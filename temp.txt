["(Module\n  (semi\n    (ImportFrom s_collections (list (alias &deque:0 None)) i0)\n    (semi\n      (FunctionDef\n        &_main:0\n        (arguments nil nil None nil nil None nil)\n        (semi\n          (FunctionDef\n            &solve:1\n            (arguments\n              nil\n              (list (arg &adj:2 None None) (arg &m:2 None None) (arg &k:2 None None) (arg &uv:2 None None))\n              None\n              nil\n              nil\n              None\n              nil\n            )\n            (semi\n              (Assign (list (Name &n:2 Store)) (Call (Name &len:0 Load) (list (Name &adj:2 Load)) nil) None)\n              (semi\n                (Assign\n                  (list (Name &nn:2 Store))\n                  (ListComp\n                    (Call (Name &len:0 Load) (list (Name &a:4 Load)) nil)\n                    (list (comprehension (Name &a:4 Store) (Name &adj:2 Load) nil i0))\n                  )\n                  None\n                )\n                (semi\n                  (Assign (list (Name &q:2 Store)) (Call (Name &deque:0 Load) nil nil) None)\n                  (semi\n                    (For\n                      (Name &i:2 Store)\n                      (Call (Name &range:0 Load) (list (Name &n:2 Load)) nil)\n                      (semi\n                        (If\n                          (Compare\n                            (Subscript (Name &nn:2 Load) (Name &i:2 Load) Load)\n                            (list Lt)\n                            (list (Name &k:2 Load))\n                          )\n                          (semi\n                            (Expr (Call (Attribute (Name &q:2 Load) s_append Load) (list (Name &i:2 Load)) nil))\n                            nil\n                          )\n                          nil\n                        )\n                        nil\n                      )\n                      nil\n                      None\n                    )\n                    (semi\n                      (While\n                        (Name &q:2 Load)\n                        (semi\n                          (Assign\n                            (list (Name &v:2 Store))\n                            (Call (Attribute (Name &q:2 Load) s_popleft Load) nil nil)\n                            None\n                          )\n                          (semi\n                            (For\n                              (Name &u:2 Store)\n                              (Subscript (Name &adj:2 Load) (Name &v:2 Load) Load)\n                              (semi\n                                (AugAssign (Subscript (Name &nn:2 Load) (Name &u:2 Load) Store) Sub (Constant i1 None))\n                                (semi\n                                  (If\n                                    (Compare\n                                      (Subscript (Name &nn:2 Load) (Name &u:2 Load) Load)\n                                      (list Eq)\n                                      (list (BinOp (Name &k:2 Load) Sub (Constant i1 None)))\n                                    )\n                                    (semi\n                                      (Expr\n                                        (Call (Attribute (Name &q:2 Load) s_append Load) (list (Name &u:2 Load)) nil)\n                                      )\n                                      nil\n                                    )\n                                    nil\n                                  )\n                                  nil\n                                )\n                              )\n                              nil\n                              None\n                            )\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                      (semi\n                        (Assign\n                          (list (Name &res:2 Store))\n                          (BinOp (List (list (Constant i0 None)) Load) Mult (Name &m:2 Load))\n                          None\n                        )\n                        (semi\n                          (Assign\n                            (list (Name &nk:2 Store))\n                            (Call\n                              (Name &len:0 Load)\n                              (list\n                                (ListComp\n                                  (Constant i1 None)\n                                  (list\n                                    (comprehension\n                                      (Name &i:5 Store)\n                                      (Name &nn:2 Load)\n                                      (list (Compare (Name &i:5 Load) (list GtE) (list (Name &k:2 Load))))\n                                      i0\n                                    )\n                                  )\n                                )\n                              )\n                              nil\n                            )\n                            None\n                          )\n                          (semi\n                            (Assign\n                              (list (Subscript (Name &res:2 Load) (UnaryOp USub (Constant i1 None)) Store))\n                              (Name &nk:2 Load)\n                              None\n                            )\n                            (semi\n                              (For\n                                (Name &i:2 Store)\n                                (Call\n                                  (Name &range:0 Load)\n                                  (list\n                                    (BinOp (Name &m:2 Load) Sub (Constant i1 None))\n                                    (Constant i0 None)\n                                    (UnaryOp USub (Constant i1 None))\n                                  )\n                                  nil\n                                )\n                                (semi\n                                  (Assign\n                                    (list (Tuple (list (Name &u1:2 Store) (Name &v1:2 Store)) Store))\n                                    (Subscript (Name &uv:2 Load) (Name &i:2 Load) Load)\n                                    None\n                                  )\n                                  (semi\n                                    (If\n                                      (BoolOp\n                                        Or\n                                        (list\n                                          (Compare\n                                            (Subscript (Name &nn:2 Load) (Name &u1:2 Load) Load)\n                                            (list Lt)\n                                            (list (Name &k:2 Load))\n                                          )\n                                          (Compare\n                                            (Subscript (Name &nn:2 Load) (Name &v1:2 Load) Load)\n                                            (list Lt)\n                                            (list (Name &k:2 Load))\n                                          )\n                                        )\n                                      )\n                                      (semi\n                                        (Assign\n                                          (list\n                                            (Subscript\n                                              (Name &res:2 Load)\n                                              (BinOp (Name &i:2 Load) Sub (Constant i1 None))\n                                              Store\n                                            )\n                                          )\n                                          (Name &nk:2 Load)\n                                          None\n                                        )\n                                        (semi Continue nil)\n                                      )\n                                      nil\n                                    )\n                                    (semi\n                                      (If\n                                        (Compare\n                                          (Subscript (Name &nn:2 Load) (Name &u1:2 Load) Load)\n                                          (list Eq)\n                                          (list (Name &k:2 Load))\n                                        )\n                                        (semi\n                                          (Expr\n                                            (Call\n                                              (Attribute (Name &q:2 Load) s_append Load)\n                                              (list (Name &u1:2 Load))\n                                              nil\n                                            )\n                                          )\n                                          (semi\n                                            (AugAssign\n                                              (Subscript (Name &nn:2 Load) (Name &u1:2 Load) Store)\n                                              Sub\n                                              (Constant i1 None)\n                                            )\n                                            nil\n                                          )\n                                        )\n                                        nil\n                                      )\n                                      (semi\n                                        (If\n                                          (BoolOp\n                                            And\n                                            (list\n                                              (UnaryOp Not (Name &q:2 Load))\n                                              (Compare\n                                                (Subscript (Name &nn:2 Load) (Name &v1:2 Load) Load)\n                                                (list Eq)\n                                                (list (Name &k:2 Load))\n                                              )\n                                            )\n                                          )\n                                          (semi\n                                            (Expr\n                                              (Call\n                                                (Attribute (Name &q:2 Load) s_append Load)\n                                                (list (Name &v1:2 Load))\n                                                nil\n                                              )\n                                            )\n                                            (semi\n                                              (AugAssign\n                                                (Subscript (Name &nn:2 Load) (Name &v1:2 Load) Store)\n                                                Sub\n                                                (Constant i1 None)\n                                              )\n                                              nil\n                                            )\n                                          )\n                                          nil\n                                        )\n                                        (semi\n                                          (If\n                                            (UnaryOp Not (Name &q:2 Load))\n                                            (semi\n                                              (AugAssign\n                                                (Subscript (Name &nn:2 Load) (Name &u1:2 Load) Store)\n                                                Sub\n                                                (Constant i1 None)\n                                              )\n                                              (semi\n                                                (AugAssign\n                                                  (Subscript (Name &nn:2 Load) (Name &v1:2 Load) Store)\n                                                  Sub\n                                                  (Constant i1 None)\n                                                )\n                                                (semi\n                                                  (Expr\n                                                    (Call\n                                                      (Attribute\n                                                        (Subscript (Name &adj:2 Load) (Name &u1:2 Load) Load)\n                                                        s_remove\n                                                        Load\n                                                      )\n                                                      (list (Name &v1:2 Load))\n                                                      nil\n                                                    )\n                                                  )\n                                                  (semi\n                                                    (Expr\n                                                      (Call\n                                                        (Attribute\n                                                          (Subscript (Name &adj:2 Load) (Name &v1:2 Load) Load)\n                                                          s_remove\n                                                          Load\n                                                        )\n                                                        (list (Name &u1:2 Load))\n                                                        nil\n                                                      )\n                                                    )\n                                                    nil\n                                                  )\n                                                )\n                                              )\n                                            )\n                                            nil\n                                          )\n                                          (semi\n                                            (While\n                                              (Name &q:2 Load)\n                                              (semi\n                                                (Assign\n                                                  (list (Name &v:2 Store))\n                                                  (Call (Attribute (Name &q:2 Load) s_popleft Load) nil nil)\n                                                  None\n                                                )\n                                                (semi\n                                                  (AugAssign (Name &nk:2 Store) Sub (Constant i1 None))\n                                                  (semi\n                                                    (For\n                                                      (Name &u:2 Store)\n                                                      (Subscript (Name &adj:2 Load) (Name &v:2 Load) Load)\n                                                      (semi\n                                                        (AugAssign\n                                                          (Subscript (Name &nn:2 Load) (Name &u:2 Load) Store)\n                                                          Sub\n                                                          (Constant i1 None)\n                                                        )\n                                                        (semi\n                                                          (If\n                                                            (Compare\n                                                              (Subscript (Name &nn:2 Load) (Name &u:2 Load) Load)\n                                                              (list Eq)\n                                                              (list (BinOp (Name &k:2 Load) Sub (Constant i1 None)))\n                                                            )\n                                                            (semi\n                                                              (Expr\n                                                                (Call\n                                                                  (Attribute (Name &q:2 Load) s_append Load)\n                                                                  (list (Name &u:2 Load))\n                                                                  nil\n                                                                )\n                                                              )\n                                                              nil\n                                                            )\n                                                            nil\n                                                          )\n                                                          nil\n                                                        )\n                                                      )\n                                                      nil\n                                                      None\n                                                    )\n                                                    nil\n                                                  )\n                                                )\n                                              )\n                                              nil\n                                            )\n                                            (semi\n                                              (Assign\n                                                (list\n                                                  (Subscript\n                                                    (Name &res:2 Load)\n                                                    (BinOp (Name &i:2 Load) Sub (Constant i1 None))\n                                                    Store\n                                                  )\n                                                )\n                                                (Name &nk:2 Load)\n                                                None\n                                              )\n                                              nil\n                                            )\n                                          )\n                                        )\n                                      )\n                                    )\n                                  )\n                                )\n                                nil\n                                None\n                              )\n                              (semi (Return (Name &res:2 Load)) nil)\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n            nil\n            None\n            None\n          )\n          (semi\n            (Assign\n              (list (Tuple (list (Name &n:1 Store) (Name &m:1 Store) (Name &k:1 Store)) Store))\n              (Call\n                (Name &map:0 Load)\n                (list (Name &int:0 Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n              None\n            )\n            (semi\n              (Assign\n                (list (Name &a:1 Store))\n                (ListComp\n                  (Call (Name &set:0 Load) nil nil)\n                  (list\n                    (comprehension (Name &i:3 Store) (Call (Name &range:0 Load) (list (Name &n:1 Load)) nil) nil i0)\n                  )\n                )\n                None\n              )\n              (semi\n                (Assign (list (Name &uv:1 Store)) (List nil Load) None)\n                (semi\n                  (For\n                    (Name &i:1 Store)\n                    (Call (Name &range:0 Load) (list (Name &m:1 Load)) nil)\n                    (semi\n                      (Assign\n                        (list (Tuple (list (Name &u:1 Store) (Name &v:1 Store)) Store))\n                        (Call\n                          (Name &map:0 Load)\n                          (list\n                            (Name &int:0 Load)\n                            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                          )\n                          nil\n                        )\n                        None\n                      )\n                      (semi\n                        (Expr\n                          (Call\n                            (Attribute\n                              (Subscript (Name &a:1 Load) (BinOp (Name &u:1 Load) Sub (Constant i1 None)) Load)\n                              s_add\n                              Load\n                            )\n                            (list (BinOp (Name &v:1 Load) Sub (Constant i1 None)))\n                            nil\n                          )\n                        )\n                        (semi\n                          (Expr\n                            (Call\n                              (Attribute\n                                (Subscript (Name &a:1 Load) (BinOp (Name &v:1 Load) Sub (Constant i1 None)) Load)\n                                s_add\n                                Load\n                              )\n                              (list (BinOp (Name &u:1 Load) Sub (Constant i1 None)))\n                              nil\n                            )\n                          )\n                          (semi\n                            (Expr\n                              (Call\n                                (Attribute (Name &uv:1 Load) s_append Load)\n                                (list\n                                  (Tuple\n                                    (list\n                                      (BinOp (Name &u:1 Load) Sub (Constant i1 None))\n                                      (BinOp (Name &v:1 Load) Sub (Constant i1 None))\n                                    )\n                                    Load\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                    nil\n                    None\n                  )\n                  (semi\n                    (Assign\n                      (list (Name &res:1 Store))\n                      (Call\n                        (Name &solve:1 Load)\n                        (list (Name &a:1 Load) (Name &m:1 Load) (Name &k:1 Load) (Name &uv:1 Load))\n                        nil\n                      )\n                      None\n                    )\n                    (semi\n                      (Expr\n                        (Call\n                          (Name &print:0 Load)\n                          (list\n                            (Call\n                              (Attribute\n                                (Call\n                                  (Attribute\n                                    (Subscript\n                                      (Call (Name &str:0 Load) (list (Name &res:1 Load)) nil)\n                                      (Slice (Constant i1 None) (UnaryOp USub (Constant i1 None)) None)\n                                      Load\n                                    )\n                                    s_replace\n                                    Load\n                                  )\n                                  (list (Constant s-WzMyXQ== None) (Constant s_ None))\n                                  nil\n                                )\n                                s_replace\n                                Load\n                              )\n                              (list (Constant s-WzQ0XQ== None) (Constant s-WzEwXQ== None))\n                              nil\n                            )\n                          )\n                          nil\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n        nil\n        None\n        None\n      )\n      (semi (Expr (Call (Name &_main:0 Load) nil nil)) nil)\n    )\n  )\n  nil\n)", "(Module\n  (semi\n    (FunctionDef\n      &_main:0\n      (arguments nil nil None nil nil None nil)\n      (semi\n        (Assign (list (Name &n:1 Store)) (Call (Name &int:0 Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (semi\n          (Assign (list (Name &s:1 Store)) (Call (Name &input:0 Load) nil nil) None)\n          (semi\n            (Assign\n              (list (Name &k:1 Store))\n              (Call (Attribute (Name &s:1 Load) s_count Load) (list (Constant s_8 None)) nil)\n              None\n            )\n            (semi\n              (Assign (list (Name &l:1 Store)) (BinOp (Name &n:1 Load) Sub (Name &k:1 Load)) None)\n              (semi\n                (If\n                  (Compare (Name &k:1 Load) (list LtE) (list (BinOp (Name &l:1 Load) FloorDiv (Constant i10 None))))\n                  (semi (Expr (Call (Name &print:0 Load) (list (Name &k:1 Load)) nil)) nil)\n                  (semi\n                    (While\n                      (Compare (Name &k:1 Load) (list Gt) (list (BinOp (Name &l:1 Load) FloorDiv (Constant i10 None))))\n                      (semi\n                        (AugAssign (Name &k:1 Store) Sub (Constant i1 None))\n                        (semi (AugAssign (Name &l:1 Store) Add (Constant i1 None)) nil)\n                      )\n                      nil\n                    )\n                    (semi\n                      (Expr\n                        (Call\n                          (Name &print:0 Load)\n                          (list\n                            (Call\n                              (Name &min:0 Load)\n                              (list (Name &k:1 Load) (BinOp (Name &l:1 Load) FloorDiv (Constant i10 None)))\n                              nil\n                            )\n                          )\n                          nil\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (semi (Expr (Call (Name &_main:0 Load) nil nil)) nil)\n  )\n  nil\n)", "(Module\n  (semi\n    (FunctionDef\n      &_main:0\n      (arguments nil nil None nil nil None nil)\n      (semi\n        (Assign (list (Name &n:1 Store)) (Call (Name &int:0 Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (semi\n          (Assign\n            (list (Name &s:1 Store))\n            (Call (Name &str:0 Load) (list (Call (Name &input:0 Load) nil nil)) nil)\n            None\n          )\n          (semi\n            (Assign\n              (list (Name &p:1 Store))\n              (Call (Attribute (Name &s:1 Load) s_count Load) (list (Constant s_8 None)) nil)\n              None\n            )\n            (semi\n              (Assign (list (Name &q:1 Store)) (BinOp (Name &n:1 Load) FloorDiv (Constant i11 None)) None)\n              (semi\n                (Assign\n                  (list (Name &f:1 Store))\n                  (Call (Name &min:0 Load) (list (Name &p:1 Load) (Name &q:1 Load)) nil)\n                  None\n                )\n                (semi (Expr (Call (Name &print:0 Load) (list (Name &f:1 Load)) nil)) nil)\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (semi (Expr (Call (Name &_main:0 Load) nil nil)) nil)\n  )\n  nil\n)", "(Module\n  (semi\n    (FunctionDef\n      &_main:0\n      (arguments nil nil None nil nil None nil)\n      (semi\n        (Assign (list (Name &a:1 Store)) (Call (Name &int:0 Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (semi\n          (Assign (list (Name &y:1 Store)) (Call (Name &input:0 Load) nil nil) None)\n          (semi\n            (Assign\n              (list (Name &x:1 Store))\n              (Call (Attribute (Name &y:1 Load) s_count Load) (list (Constant s_8 None)) nil)\n              None\n            )\n            (semi\n              (Expr\n                (Call\n                  (Name &print:0 Load)\n                  (list\n                    (Call\n                      (Name &min:0 Load)\n                      (list (BinOp (Name &a:1 Load) FloorDiv (Constant i11 None)) (Name &x:1 Load))\n                      nil\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (semi (Expr (Call (Name &_main:0 Load) nil nil)) nil)\n  )\n  nil\n)", "(Module\n  (semi\n    (FunctionDef\n      &_main:0\n      (arguments nil nil None nil nil None nil)\n      (semi\n        (Assign (list (Name &n:1 Store)) (Call (Name &int:0 Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (semi\n          (Assign (list (Name &s:1 Store)) (Call (Name &input:0 Load) nil nil) None)\n          (semi\n            (Assign (list (Name &i:1 Store)) (Constant i0 None) None)\n            (semi\n              (Assign (list (Name &nb_8:1 Store)) (Constant i0 None) None)\n              (semi\n                (If\n                  (Compare (Name &n:1 Load) (list Gt) (list (Constant i10 None)))\n                  (semi\n                    (While\n                      (BinOp\n                        (Compare (Name &i:1 Load) (list Lt) (list (Name &n:1 Load)))\n                        BitAnd\n                        (Compare\n                          (BinOp (Name &n:1 Load) Sub (BinOp (Name &nb_8:1 Load) Mult (Constant i11 None)))\n                          (list Gt)\n                          (list (Constant i10 None))\n                        )\n                      )\n                      (semi\n                        (If\n                          (Compare\n                            (Subscript (Name &s:1 Load) (Name &i:1 Load) Load)\n                            (list Eq)\n                            (list (Constant s_8 None))\n                          )\n                          (semi (AugAssign (Name &nb_8:1 Store) Add (Constant i1 None)) nil)\n                          nil\n                        )\n                        (semi (AugAssign (Name &i:1 Store) Add (Constant i1 None)) nil)\n                      )\n                      nil\n                    )\n                    nil\n                  )\n                  nil\n                )\n                (semi (Expr (Call (Name &print:0 Load) (list (Name &nb_8:1 Load)) nil)) nil)\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (semi (Expr (Call (Name &_main:0 Load) nil nil)) nil)\n  )\n  nil\n)", "(Module\n  (semi\n    (FunctionDef\n      &_main:0\n      (arguments nil nil None nil nil None nil)\n      (semi\n        (Assign (list (Name &n:1 Store)) (Call (Name &int:0 Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (semi\n          (Assign (list (Name &eights:1 Store)) (Constant i0 None) None)\n          (semi\n            (Assign (list (Name &others:1 Store)) (Constant i0 None) None)\n            (semi\n              (For\n                (Name &elem:1 Store)\n                (Call (Name &input:0 Load) nil nil)\n                (semi\n                  (If\n                    (Compare\n                      (Call (Name &int:0 Load) (list (Name &elem:1 Load)) nil)\n                      (list Eq)\n                      (list (Constant i8 None))\n                    )\n                    (semi (AugAssign (Name &eights:1 Store) Add (Constant i1 None)) nil)\n                    (semi (AugAssign (Name &others:1 Store) Add (Constant i1 None)) nil)\n                  )\n                  nil\n                )\n                nil\n                None\n              )\n              (semi\n                (Assign (list (Name &answer:1 Store)) (Constant i0 None) None)\n                (semi\n                  (While\n                    (Constant True None)\n                    (semi\n                      (If\n                        (Compare (Name &eights:1 Load) (list Eq) (list (Constant i0 None)))\n                        (semi Break nil)\n                        (semi\n                          (AugAssign (Name &eights:1 Store) Sub (Constant i1 None))\n                          (semi\n                            (If\n                              (Compare (Name &others:1 Load) (list GtE) (list (Constant i10 None)))\n                              (semi\n                                (AugAssign (Name &others:1 Store) Sub (Constant i10 None))\n                                (semi (AugAssign (Name &answer:1 Store) Add (Constant i1 None)) nil)\n                              )\n                              (semi\n                                (If\n                                  (Compare\n                                    (BinOp\n                                      (Name &eights:1 Load)\n                                      Sub\n                                      (BinOp (Constant i10 None) Sub (Name &others:1 Load))\n                                    )\n                                    (list GtE)\n                                    (list (Constant i0 None))\n                                  )\n                                  (semi\n                                    (AugAssign\n                                      (Name &eights:1 Store)\n                                      Sub\n                                      (BinOp (Constant i10 None) Sub (Name &others:1 Load))\n                                    )\n                                    (semi\n                                      (Assign (list (Name &others:1 Store)) (Constant i0 None) None)\n                                      (semi (AugAssign (Name &answer:1 Store) Add (Constant i1 None)) nil)\n                                    )\n                                  )\n                                  (semi Break nil)\n                                )\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      nil\n                    )\n                    nil\n                  )\n                  (semi (Expr (Call (Name &print:0 Load) (list (Name &answer:1 Load)) nil)) nil)\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (semi (Expr (Call (Name &_main:0 Load) nil nil)) nil)\n  )\n  nil\n)", "(Module\n  (semi\n    (Import (list (alias &os:0 None)))\n    (semi\n      (Import (list (alias &sys:0 None)))\n      (semi\n        (Import (list (alias &math:0 None)))\n        (semi\n          (Import (list (alias &heapq:0 None)))\n          (semi\n            (ImportFrom s_decimal (list (alias &*:0 None)) i0)\n            (semi\n              (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0)\n              (semi\n                (ImportFrom s_collections (list (alias &defaultdict:0 None) (alias &deque:0 None)) i0)\n                (semi\n                  (FunctionDef\n                    &_main:0\n                    (arguments nil nil None nil nil None nil)\n                    (semi\n                      (FunctionDef\n                        &r:1\n                        (arguments nil nil None nil nil None nil)\n                        (semi (Return (Call (Name &int:0 Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n                        nil\n                        None\n                        None\n                      )\n                      (semi\n                        (FunctionDef\n                          &rm:1\n                          (arguments nil nil None nil nil None nil)\n                          (semi\n                            (Return\n                              (Call\n                                (Name &map:0 Load)\n                                (list\n                                  (Name &int:0 Load)\n                                  (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                                )\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                          nil\n                          None\n                          None\n                        )\n                        (semi\n                          (FunctionDef\n                            &rl:1\n                            (arguments nil nil None nil nil None nil)\n                            (semi\n                              (Return\n                                (Call\n                                  (Name &list:0 Load)\n                                  (list\n                                    (Call\n                                      (Name &map:0 Load)\n                                      (list\n                                        (Name &int:0 Load)\n                                        (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                                      )\n                                      nil\n                                    )\n                                  )\n                                  nil\n                                )\n                              )\n                              nil\n                            )\n                            nil\n                            None\n                            None\n                          )\n                          (semi\n                            (Assign (list (Name &n:1 Store)) (Call (Name &r:1 Load) nil nil) None)\n                            (semi\n                              (Assign (list (Name &a:1 Store)) (Call (Name &input:0 Load) nil nil) None)\n                              (semi\n                                (Assign\n                                  (list (Name &num:1 Store))\n                                  (Call (Name &defaultdict:0 Load) (list (Name &int:0 Load)) nil)\n                                  None\n                                )\n                                (semi\n                                  (For\n                                    (Name &i:1 Store)\n                                    (Call (Name &range:0 Load) (list (Name &n:1 Load)) nil)\n                                    (semi\n                                      (AugAssign\n                                        (Subscript\n                                          (Name &num:1 Load)\n                                          (Call\n                                            (Name &int:0 Load)\n                                            (list (Subscript (Name &a:1 Load) (Name &i:1 Load) Load))\n                                            nil\n                                          )\n                                          Store\n                                        )\n                                        Add\n                                        (Constant i1 None)\n                                      )\n                                      nil\n                                    )\n                                    nil\n                                    None\n                                  )\n                                  (semi\n                                    (If\n                                      (Compare\n                                        (Subscript (Name &num:1 Load) (Constant i8 None) Load)\n                                        (list Eq)\n                                        (list (Constant i0 None))\n                                      )\n                                      (semi (Expr (Call (Name &print:0 Load) (list (Constant i0 None)) nil)) nil)\n                                      (semi\n                                        (Assign\n                                          (list (Name &tot:1 Store))\n                                          (BinOp\n                                            (Name &n:1 Load)\n                                            Sub\n                                            (Subscript (Name &num:1 Load) (Constant i8 None) Load)\n                                          )\n                                          None\n                                        )\n                                        (semi\n                                          (Assign\n                                            (list (Name &strips:1 Store))\n                                            (BinOp (Name &tot:1 Load) FloorDiv (Constant i10 None))\n                                            None\n                                          )\n                                          (semi\n                                            (Assign\n                                              (list (Name &rem:1 Store))\n                                              (BinOp (Name &tot:1 Load) Mod (Constant i10 None))\n                                              None\n                                            )\n                                            (semi\n                                              (If\n                                                (Compare\n                                                  (Subscript (Name &num:1 Load) (Constant i8 None) Load)\n                                                  (list LtE)\n                                                  (list (Name &strips:1 Load))\n                                                )\n                                                (semi\n                                                  (Expr\n                                                    (Call\n                                                      (Name &print:0 Load)\n                                                      (list (Subscript (Name &num:1 Load) (Constant i8 None) Load))\n                                                      nil\n                                                    )\n                                                  )\n                                                  nil\n                                                )\n                                                (semi\n                                                  (Assign (list (Name &ans:1 Store)) (Name &strips:1 Load) None)\n                                                  (semi\n                                                    (AugAssign\n                                                      (Subscript (Name &num:1 Load) (Constant i8 None) Store)\n                                                      Sub\n                                                      (Name &strips:1 Load)\n                                                    )\n                                                    (semi\n                                                      (AugAssign\n                                                        (Name &ans:1 Store)\n                                                        Add\n                                                        (BinOp\n                                                          (Subscript (Name &num:1 Load) (Constant i8 None) Load)\n                                                          FloorDiv\n                                                          (Constant i11 None)\n                                                        )\n                                                      )\n                                                      (semi\n                                                        (AugAssign\n                                                          (Subscript (Name &num:1 Load) (Constant i8 None) Store)\n                                                          Mod\n                                                          (Constant i11 None)\n                                                        )\n                                                        (semi\n                                                          (AugAssign\n                                                            (Name &ans:1 Store)\n                                                            Add\n                                                            (IfExp\n                                                              (Compare\n                                                                (BinOp\n                                                                  (BinOp\n                                                                    (Name &rem:1 Load)\n                                                                    Add\n                                                                    (Subscript\n                                                                      (Name &num:1 Load)\n                                                                      (Constant i8 None)\n                                                                      Load\n                                                                    )\n                                                                  )\n                                                                  Sub\n                                                                  (Constant i1 None)\n                                                                )\n                                                                (list GtE)\n                                                                (list (Constant i10 None))\n                                                              )\n                                                              (Constant i1 None)\n                                                              (Constant i0 None)\n                                                            )\n                                                          )\n                                                          (semi\n                                                            (Expr\n                                                              (Call (Name &print:0 Load) (list (Name &ans:1 Load)) nil)\n                                                            )\n                                                            nil\n                                                          )\n                                                        )\n                                                      )\n                                                    )\n                                                  )\n                                                )\n                                              )\n                                              nil\n                                            )\n                                          )\n                                        )\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                    nil\n                    None\n                    None\n                  )\n                  (semi (Expr (Call (Name &_main:0 Load) nil nil)) nil)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (semi\n    (FunctionDef\n      &_main:0\n      (arguments nil nil None nil nil None nil)\n      (semi\n        (Assign (list (Name &n:1 Store)) (Call (Name &int:0 Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (semi\n          (Assign\n            (list (Name &a:1 Store))\n            (Call (Name &list:0 Load) (list (Call (Name &input:0 Load) nil nil)) nil)\n            None\n          )\n          (semi\n            (Assign\n              (list (Name &k:1 Store))\n              (Call (Attribute (Name &a:1 Load) s_count Load) (list (Constant s_8 None)) nil)\n              None\n            )\n            (semi\n              (Assign (list (Name &s:1 Store)) (Constant i0 None) None)\n              (semi\n                (While\n                  (BoolOp\n                    And\n                    (list\n                      (Compare (Name &k:1 Load) (list Gt) (list (Constant i0 None)))\n                      (Compare (Name &n:1 Load) (list Gt) (list (Constant i10 None)))\n                    )\n                  )\n                  (semi\n                    (AugAssign (Name &s:1 Store) Add (Constant i1 None))\n                    (semi\n                      (AugAssign (Name &n:1 Store) Sub (Constant i11 None))\n                      (semi (AugAssign (Name &k:1 Store) Sub (Constant i1 None)) nil)\n                    )\n                  )\n                  nil\n                )\n                (semi (Expr (Call (Name &print:0 Load) (list (Name &s:1 Load)) nil)) nil)\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (semi (Expr (Call (Name &_main:0 Load) nil nil)) nil)\n  )\n  nil\n)", "(Module\n  (semi\n    (FunctionDef\n      &_main:0\n      (arguments nil nil None nil nil None nil)\n      (semi\n        (Assign (list (Name &n:1 Store)) (Call (Name &int:0 Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (semi\n          (Assign (list (Name &s:1 Store)) (Call (Name &input:0 Load) nil nil) None)\n          (semi\n            (Assign\n              (list (Name &a:1 Store))\n              (Call (Attribute (Name &s:1 Load) s_count Load) (list (Constant s_8 None)) nil)\n              None\n            )\n            (semi\n              (Assign (list (Name &b:1 Store)) (BinOp (Name &n:1 Load) FloorDiv (Constant i11 None)) None)\n              (semi\n                (Expr\n                  (Call\n                    (Name &print:0 Load)\n                    (list (Call (Name &min:0 Load) (list (Name &a:1 Load) (Name &b:1 Load)) nil))\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (semi (Expr (Call (Name &_main:0 Load) nil nil)) nil)\n  )\n  nil\n)", "(Module\n  (semi\n    (FunctionDef\n      &_main:0\n      (arguments nil nil None nil nil None nil)\n      (semi\n        (Assign (list (Name &n:1 Store)) (Call (Name &int:0 Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (semi\n          (Assign (list (Name &s:1 Store)) (Call (Name &input:0 Load) nil nil) None)\n          (semi\n            (Assign\n              (list (Name &c:1 Store))\n              (Call (Attribute (Name &s:1 Load) s_count Load) (list (Constant s_8 None)) nil)\n              None\n            )\n            (semi\n              (Assign (list (Name &x:1 Store)) (BinOp (Name &n:1 Load) FloorDiv (Constant i11 None)) None)\n              (semi\n                (If\n                  (Compare (Name &c:1 Load) (list GtE) (list (Name &x:1 Load)))\n                  (semi\n                    (Expr (Call (Name &print:0 Load) (list (BinOp (Name &n:1 Load) FloorDiv (Constant i11 None))) nil))\n                    nil\n                  )\n                  (semi\n                    (If\n                      (Compare (Name &c:1 Load) (list Lt) (list (Name &x:1 Load)))\n                      (semi (Expr (Call (Name &print:0 Load) (list (Name &c:1 Load)) nil)) nil)\n                      (semi (Expr (Call (Name &print:0 Load) (list (Constant i0 None)) nil)) nil)\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (semi (Expr (Call (Name &_main:0 Load) nil nil)) nil)\n  )\n  nil\n)"]