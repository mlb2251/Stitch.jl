["(Module\n  (/seq\n    (Assign\n      (list (Name &MAXN:0 Store))\n      (BinOp\n        (BinOp (Constant i5 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n        Add\n        (Constant i100 None)\n      )\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (Constant i0 None)) nil))\n    (Assign (list (Name &a:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Add (Name &a:0 Load)) None)\n    (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) Add (Constant i2 None)) None)\n    (Assign (list (Name &arr:0 Store)) (List nil Load) None)\n    (Expr\n      (Call\n        (Attribute (Name &arr:0 Load) s_append Load)\n        (list (Subscript (Name &a:0 Load) (Constant i0 None) Load))\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Attribute (Name &arr:0 Load) s_append Load)\n        (list (Subscript (Name &a:0 Load) (Constant i1 None) Load))\n        nil\n      )\n    )\n    (Assign (list (Name &i:0 Store)) (Constant i2 None) None)\n    (While\n      (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load)))\n      (/seq\n        (Assign (list (Name &ln:0 Store)) (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) None)\n        (Assign (list (Name &l1:0 Store)) (Subscript (Name &arr:0 Load) (UnaryOp USub (Constant i1 None)) Load) None)\n        (Assign (list (Name &l0:0 Store)) (Subscript (Name &arr:0 Load) (UnaryOp USub (Constant i2 None)) Load) None)\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &l1:0 Load) (list LtE) (list (Name &l0:0 Load)))\n              (Compare (Name &l1:0 Load) (list LtE) (list (Name &ln:0 Load)))\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp (Name &ans:0 Load) Add (Call (Name g_min Load) (list (Name &l0:0 Load) (Name &ln:0 Load)) nil))\n              None\n            )\n            (Expr (Call (Attribute (Name &arr:0 Load) s_pop Load) nil nil))\n            (Assign\n              (list (Name &l1:0 Store))\n              (Subscript (Name &arr:0 Load) (UnaryOp USub (Constant i1 None)) Load)\n              None\n            )\n            (Assign\n              (list (Name &l0:0 Store))\n              (Subscript (Name &arr:0 Load) (UnaryOp USub (Constant i2 None)) Load)\n              None\n            )\n          )\n          (/seq)\n        )\n        (Expr (Call (Attribute (Name &arr:0 Load) s_append Load) (list (Name &ln:0 Load)) nil))\n        (Assign (list (Name &i:0 Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None)\n      )\n      (/seq)\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (Constant i1 None) (BinOp (Call (Name g_len Load) (list (Name &arr:0 Load)) nil) Sub (Constant i1 None)))\n        nil\n      )\n      (/seq\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (Call\n            (Name g_min Load)\n            (list\n              (Subscript (Name &arr:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n              (Subscript (Name &arr:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Expr (Call (Name g_input Load) nil nil))\n    (Assign\n      (list (Name &list:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &stack:0 Store)) (List nil Load) None)\n    (Assign (list (Name &score:0 Store)) (Constant i0 None) None)\n    (Expr\n      (Call\n        (Attribute (Name &stack:0 Load) s_append Load)\n        (list (Subscript (Name &list:0 Load) (Constant i0 None) Load))\n        nil\n      )\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (Call (Name g_len Load) (list (Name &list:0 Load)) nil)) nil)\n      (/seq\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Call (Name g_len Load) (list (Name &stack:0 Load)) nil) (list Gt) (list (Constant i1 None)))\n              (Compare\n                (Subscript (Name &stack:0 Load) (UnaryOp USub (Constant i1 None)) Load)\n                (list LtE)\n                (list\n                  (Call\n                    (Name g_min Load)\n                    (list\n                      (Subscript (Name &list:0 Load) (Name &i:0 Load) Load)\n                      (Subscript (Name &stack:0 Load) (UnaryOp USub (Constant i2 None)) Load)\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &score:0 Store))\n              (BinOp\n                (Name &score:0 Load)\n                Add\n                (Call\n                  (Name g_min Load)\n                  (list\n                    (Subscript (Name &list:0 Load) (Name &i:0 Load) Load)\n                    (Subscript (Name &stack:0 Load) (UnaryOp USub (Constant i2 None)) Load)\n                  )\n                  nil\n                )\n              )\n              None\n            )\n            (Expr (Call (Attribute (Name &stack:0 Load) s_pop Load) nil nil))\n          )\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Attribute (Name &stack:0 Load) s_append Load)\n            (list (Subscript (Name &list:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (Constant i1 None)\n          (BinOp (Call (Name g_len Load) (list (Name &stack:0 Load)) nil) Sub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &score:0 Store))\n          (BinOp\n            (Name &score:0 Load)\n            Add\n            (Call\n              (Name g_min Load)\n              (list\n                (Subscript (Name &stack:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                (Subscript (Name &stack:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n              )\n              nil\n            )\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &score:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &cards:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &score:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &preIndexes:0 Store)) (List nil Load) None)\n    (Assign (list (Name &nextIndexes:0 Store)) (List nil Load) None)\n    (Assign (list (Name &isChosen:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (Assign (list (Name &chosens:0 Store)) (List nil Load) None)\n    (Expr (Call (Attribute (Name &nextIndexes:0 Load) s_append Load) (list (Constant i1 None)) nil))\n    (Expr (Call (Attribute (Name &preIndexes:0 Load) s_append Load) (list (UnaryOp USub (Constant i1 None))) nil))\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Subscript (Name &cards:0 Load) (Name &i:0 Load) Load)\n                (list LtE)\n                (list (Subscript (Name &cards:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load))\n              )\n              (Compare\n                (Subscript (Name &cards:0 Load) (Name &i:0 Load) Load)\n                (list LtE)\n                (list (Subscript (Name &cards:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load))\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &chosens:0 Load) s_append Load)\n                (list\n                  (Tuple\n                    (list (UnaryOp USub (Subscript (Name &cards:0 Load) (Name &i:0 Load) Load)) (Name &i:0 Load))\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n            (Assign (list (Subscript (Name &isChosen:0 Load) (Name &i:0 Load) Store)) (Constant i1 None) None)\n          )\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Attribute (Name &preIndexes:0 Load) s_append Load)\n            (list (BinOp (Name &i:0 Load) Sub (Constant i1 None)))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &nextIndexes:0 Load) s_append Load)\n            (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &preIndexes:0 Load) s_append Load)\n        (list (BinOp (Name &n:0 Load) Sub (Constant i2 None)))\n        nil\n      )\n    )\n    (Expr (Call (Attribute (Name &nextIndexes:0 Load) s_append Load) (list (Name &n:0 Load)) nil))\n    (While\n      (Compare (Call (Name g_len Load) (list (Name &chosens:0 Load)) nil) (list NotEq) (list (Constant i0 None)))\n      (/seq\n        (Assign (list (Name &chosen:0 Store)) (Call (Attribute (Name &chosens:0 Load) s_pop Load) nil nil) None)\n        (Assign\n          (list (Name &preChosen:0 Store))\n          (Subscript (Name &preIndexes:0 Load) (Subscript (Name &chosen:0 Load) (Constant i1 None) Load) Load)\n          None\n        )\n        (Assign\n          (list (Name &nextChosen:0 Store))\n          (Subscript (Name &nextIndexes:0 Load) (Subscript (Name &chosen:0 Load) (Constant i1 None) Load) Load)\n          None\n        )\n        (AugAssign\n          (Name &score:0 Store)\n          Add\n          (Call\n            (Name g_min Load)\n            (list\n              (Subscript (Name &cards:0 Load) (Name &preChosen:0 Load) Load)\n              (Subscript (Name &cards:0 Load) (Name &nextChosen:0 Load) Load)\n            )\n            nil\n          )\n        )\n        (Assign\n          (list (Subscript (Name &nextIndexes:0 Load) (Name &preChosen:0 Load) Store))\n          (Name &nextChosen:0 Load)\n          None\n        )\n        (Assign\n          (list (Subscript (Name &preIndexes:0 Load) (Name &nextChosen:0 Load) Store))\n          (Name &preChosen:0 Load)\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &preChosen:0 Load) (list NotEq) (list (Constant i0 None)))\n              (Compare\n                (Subscript (Name &preIndexes:0 Load) (Name &preChosen:0 Load) Load)\n                (list NotEq)\n                (list (UnaryOp USub (Constant i1 None)))\n              )\n              (Compare\n                (Subscript (Name &nextIndexes:0 Load) (Name &preChosen:0 Load) Load)\n                (list NotEq)\n                (list (Name &n:0 Load))\n              )\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &cards:0 Load) (Name &preChosen:0 Load) Load)\n                    (list LtE)\n                    (list\n                      (Subscript\n                        (Name &cards:0 Load)\n                        (Subscript (Name &preIndexes:0 Load) (Name &preChosen:0 Load) Load)\n                        Load\n                      )\n                    )\n                  )\n                  (Compare\n                    (Subscript (Name &cards:0 Load) (Name &preChosen:0 Load) Load)\n                    (list LtE)\n                    (list\n                      (Subscript\n                        (Name &cards:0 Load)\n                        (Subscript (Name &nextIndexes:0 Load) (Name &preChosen:0 Load) Load)\n                        Load\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &isChosen:0 Load) (Name &preChosen:0 Load) Load)\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &isChosen:0 Load) (Name &preChosen:0 Load) Store))\n                      (Constant i1 None)\n                      None\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &chosens:0 Load) s_append Load)\n                        (list\n                          (Tuple\n                            (list\n                              (UnaryOp USub (Subscript (Name &cards:0 Load) (Name &preChosen:0 Load) Load))\n                              (Name &preChosen:0 Load)\n                            )\n                            Load\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &nextChosen:0 Load) (list NotEq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n              (Compare\n                (Subscript (Name &preIndexes:0 Load) (Name &nextChosen:0 Load) Load)\n                (list NotEq)\n                (list (UnaryOp USub (Constant i1 None)))\n              )\n              (Compare\n                (Subscript (Name &nextIndexes:0 Load) (Name &nextChosen:0 Load) Load)\n                (list NotEq)\n                (list (Name &n:0 Load))\n              )\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Subscript (Name &cards:0 Load) (Name &nextChosen:0 Load) Load)\n                    (list LtE)\n                    (list\n                      (Subscript\n                        (Name &cards:0 Load)\n                        (Subscript (Name &preIndexes:0 Load) (Name &nextChosen:0 Load) Load)\n                        Load\n                      )\n                    )\n                  )\n                  (Compare\n                    (Subscript (Name &cards:0 Load) (Name &nextChosen:0 Load) Load)\n                    (list LtE)\n                    (list\n                      (Subscript\n                        (Name &cards:0 Load)\n                        (Subscript (Name &nextIndexes:0 Load) (Name &nextChosen:0 Load) Load)\n                        Load\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &isChosen:0 Load) (Name &nextChosen:0 Load) Load)\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &isChosen:0 Load) (Name &nextChosen:0 Load) Store))\n                      (Constant i1 None)\n                      None\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &chosens:0 Load) s_append Load)\n                        (list\n                          (Tuple\n                            (list\n                              (UnaryOp USub (Subscript (Name &cards:0 Load) (Name &nextChosen:0 Load) Load))\n                              (Name &nextChosen:0 Load)\n                            )\n                            Load\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n    (Assign (list (Name &tempNode:0 Store)) (Subscript (Name &nextIndexes:0 Load) (Constant i0 None) Load) None)\n    (While\n      (BoolOp\n        And\n        (list\n          (Compare (Name &tempNode:0 Load) (list NotEq) (list (Name &n:0 Load)))\n          (Compare (Name &tempNode:0 Load) (list NotEq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n        )\n      )\n      (/seq\n        (AugAssign\n          (Name &score:0 Store)\n          Add\n          (Call\n            (Name g_min Load)\n            (list\n              (Subscript (Name &cards:0 Load) (Subscript (Name &preIndexes:0 Load) (Name &tempNode:0 Load) Load) Load)\n              (Subscript (Name &cards:0 Load) (Subscript (Name &nextIndexes:0 Load) (Name &tempNode:0 Load) Load) Load)\n            )\n            nil\n          )\n        )\n        (Assign\n          (list (Name &tempNode:0 Store))\n          (Subscript (Name &nextIndexes:0 Load) (Name &tempNode:0 Load) Load)\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (Name &score:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &s:0 Store) (Name &a:0 Store)) Store))\n      (Tuple (list (Call (Name g_input Load) nil nil) (List nil Load) (Constant i0 None)) Load)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_map Load)\n        (list\n          (Name g_int Load)\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n        )\n        nil\n      )\n      (/seq\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Call (Name g_len Load) (list (Name &s:0 Load)) nil) (list Gt) (list (Constant i1 None)))\n              (Compare\n                (Call\n                  (Name g_min Load)\n                  (list (Subscript (Name &s:0 Load) (UnaryOp USub (Constant i2 None)) Load) (Name &i:0 Load))\n                  nil\n                )\n                (list GtE)\n                (list (Subscript (Name &s:0 Load) (UnaryOp USub (Constant i1 None)) Load))\n              )\n            )\n          )\n          (/seq\n            (AugAssign\n              (Name &a:0 Store)\n              Add\n              (Call\n                (Name g_min Load)\n                (list (Name &i:0 Load) (Subscript (Name &s:0 Load) (UnaryOp USub (Constant i2 None)) Load))\n                nil\n              )\n            )\n            (Delete (list (Subscript (Name &s:0 Load) (UnaryOp USub (Constant i1 None)) Del)))\n          )\n          (/seq)\n        )\n        (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &s:0 Load) s_sort Load) nil nil))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (BinOp\n            (Name &a:0 Load)\n            Add\n            (Call\n              (Name g_sum Load)\n              (list (Subscript (Name &s:0 Load) (Slice (Constant i0 None) (UnaryOp USub (Constant i2 None)) None) Load))\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &maxScore:0\n      (arguments nil (list (arg &list:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &score:1 Store)) (Constant i0 None) None)\n        (Assign (list (Name &stack:1 Store)) (List nil Load) None)\n        (Expr\n          (Call\n            (Attribute (Name &stack:1 Load) s_append Load)\n            (list (Subscript (Name &list:1 Load) (Constant i0 None) Load))\n            nil\n          )\n        )\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (Constant i1 None) (Call (Name g_len Load) (list (Name &list:1 Load)) nil))\n            nil\n          )\n          (/seq\n            (While\n              (BoolOp\n                And\n                (list\n                  (Compare (Call (Name g_len Load) (list (Name &stack:1 Load)) nil) (list Gt) (list (Constant i1 None)))\n                  (Compare\n                    (Subscript (Name &stack:1 Load) (UnaryOp USub (Constant i1 None)) Load)\n                    (list LtE)\n                    (list\n                      (Call\n                        (Name g_min Load)\n                        (list\n                          (Subscript (Name &list:1 Load) (Name &i:1 Load) Load)\n                          (Subscript (Name &stack:1 Load) (UnaryOp USub (Constant i2 None)) Load)\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &score:1 Store))\n                  (BinOp\n                    (Name &score:1 Load)\n                    Add\n                    (Call\n                      (Name g_min Load)\n                      (list\n                        (Subscript (Name &list:1 Load) (Name &i:1 Load) Load)\n                        (Subscript (Name &stack:1 Load) (UnaryOp USub (Constant i2 None)) Load)\n                      )\n                      nil\n                    )\n                  )\n                  None\n                )\n                (Expr (Call (Attribute (Name &stack:1 Load) s_pop Load) nil nil))\n              )\n              (/seq)\n            )\n            (Expr\n              (Call\n                (Attribute (Name &stack:1 Load) s_append Load)\n                (list (Subscript (Name &list:1 Load) (Name &i:1 Load) Load))\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Constant i1 None)\n              (BinOp (Call (Name g_len Load) (list (Name &stack:1 Load)) nil) Sub (Constant i1 None))\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &score:1 Store))\n              (BinOp\n                (Name &score:1 Load)\n                Add\n                (Call\n                  (Name g_min Load)\n                  (list\n                    (Subscript (Name &stack:1 Load) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) Load)\n                    (Subscript (Name &stack:1 Load) (BinOp (Name &i:1 Load) Add (Constant i1 None)) Load)\n                  )\n                  nil\n                )\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &score:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name g_input Load) nil nil))\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:2 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Call (Name &maxScore:0 Load) (list (Name &l:0 Load)) nil)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &s:0 Store)) (List nil Load) None)\n    (Assign (list (Name &a:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      (/seq\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Call (Name g_len Load) (list (Name &s:0 Load)) nil) (list Gt) (list (Constant i1 None)))\n              (Compare\n                (Call\n                  (Name g_min Load)\n                  (list (Subscript (Name &s:0 Load) (UnaryOp USub (Constant i2 None)) Load) (Name &i:0 Load))\n                  nil\n                )\n                (list GtE)\n                (list (Subscript (Name &s:0 Load) (UnaryOp USub (Constant i1 None)) Load))\n              )\n            )\n          )\n          (/seq\n            (AugAssign\n              (Name &a:0 Store)\n              Add\n              (Call\n                (Name g_min Load)\n                (list (Name &i:0 Load) (Subscript (Name &s:0 Load) (UnaryOp USub (Constant i2 None)) Load))\n                nil\n              )\n            )\n            (Delete (list (Subscript (Name &s:0 Load) (UnaryOp USub (Constant i1 None)) Del)))\n          )\n          (/seq)\n        )\n        (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &s:0 Load) s_sort Load) nil nil))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (BinOp\n            (Name &a:0 Load)\n            Add\n            (Call\n              (Name g_sum Load)\n              (list (Subscript (Name &s:0 Load) (Slice (Constant i0 None) (UnaryOp USub (Constant i2 None)) None) Load))\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &s:0 Store)) (List nil Load) None)\n    (Assign (list (Name &a:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      (/seq\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Call (Name g_len Load) (list (Name &s:0 Load)) nil) (list Gt) (list (Constant i1 None)))\n              (Compare\n                (Call\n                  (Name g_min Load)\n                  (list (Subscript (Name &s:0 Load) (UnaryOp USub (Constant i2 None)) Load) (Name &i:0 Load))\n                  nil\n                )\n                (list GtE)\n                (list (Subscript (Name &s:0 Load) (UnaryOp USub (Constant i1 None)) Load))\n              )\n            )\n          )\n          (/seq\n            (AugAssign\n              (Name &a:0 Store)\n              Add\n              (Call\n                (Name g_min Load)\n                (list (Name &i:0 Load) (Subscript (Name &s:0 Load) (UnaryOp USub (Constant i2 None)) Load))\n                nil\n              )\n            )\n            (Delete (list (Subscript (Name &s:0 Load) (UnaryOp USub (Constant i1 None)) Del)))\n          )\n          (/seq)\n        )\n        (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &s:0 Load) s_sort Load) nil nil))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (BinOp\n            (Name &a:0 Load)\n            Add\n            (Call\n              (Name g_sum Load)\n              (list (Subscript (Name &s:0 Load) (Slice (Constant i0 None) (UnaryOp USub (Constant i2 None)) None) Load))\n              nil\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"]