[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "max_arity": 4,
            "dfa": "data_for_testing/dfa_imp.json",
            "match_sequences": true,
            "application_utility_choicevar": -1.01,
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                1,
                3,
                "(/subseq (For (Name %2 Store) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content #0)) nil) (/seq (While (BoolOp And (list (Compare (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) (list Gt) (list (Constant i1 None))) (Compare (Call (Name g_min Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)) (_starred_content (Name %2 Load))) nil) (list GtE) (list (Subscript (Name %1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))))) (/seq (AugAssign (Name %3 Store) Add (Call (Name g_min Load) (list (_starred_content (Name %2 Load)) (_starred_content (Subscript (Name %1 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load))) nil)) (Delete (list (Subscript (Name %1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Del)))) (/seq)) (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (Name %2 Load))) nil))) (/seq) None) (Expr (Call (Attribute (Name %1 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name %3 Load) Add (Call (Name g_sum Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_slice (Slice (Constant i0 None) (UnaryOp USub (Constant i2 None)) None)) Load))) nil)))) nil)))",
                "seqS",
                [
                    "E"
                ],
                [
                    "X",
                    "X",
                    "X"
                ]
            ],
            [
                0,
                4,
                "(/subseq (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load))) nil)) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))) nil) (/seq (While (BoolOp And (list (Compare (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil) (list Gt) (list (Constant i1 None))) (Compare (Subscript (Name %2 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list LtE) (list (Call (Name g_min Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Name %3 Load)) Load)) (_starred_content (Subscript (Name %2 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load))) nil))))) (/seq (Assign (list (Name %4 Store)) (BinOp (Name %4 Load) Add (Call (Name g_min Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Name %3 Load)) Load)) (_starred_content (Subscript (Name %2 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load))) nil)) None) (Expr (Call (Attribute (Name %2 Load) s_pop Load) nil nil))) (/seq)) (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Name %3 Load)) Load))) nil))) (/seq) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name %4 Store)) (BinOp (Name %4 Load) Add (Call (Name g_min Load) (list (_starred_content (Subscript (Name %2 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load)) (_starred_content (Subscript (Name %2 Load) (_slice_content (BinOp (Name %3 Load) Add (Constant i1 None))) Load))) nil)) None)) (/seq) None))",
                "seqS",
                [],
                [
                    "X",
                    "X",
                    "X",
                    "X"
                ]
            ],
            [
                1,
                7,
                "(If (BoolOp And (list (Compare (Name %1 Load) (list NotEq) (list #0)) (Compare (Subscript (Name %6 Load) (_slice_content (Name %1 Load)) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (Compare (Subscript (Name %5 Load) (_slice_content (Name %1 Load)) Load) (list NotEq) (list (Name %7 Load))))) (/seq (If (BoolOp And (list (Compare (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) (list LtE) (list (Subscript (Name %3 Load) (_slice_content (Subscript (Name %6 Load) (_slice_content (Name %1 Load)) Load)) Load))) (Compare (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) (list LtE) (list (Subscript (Name %3 Load) (_slice_content (Subscript (Name %5 Load) (_slice_content (Name %1 Load)) Load)) Load))))) (/seq (If (Compare (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (Constant i1 None) None) (Expr (Call (Attribute (Name %4 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load))) (_starred_content (Name %1 Load))) Load))) nil))) (/seq))) (/seq))) (/seq))",
                "S",
                [
                    "E"
                ],
                [
                    "X",
                    "X",
                    "X",
                    "X",
                    "X",
                    "X",
                    "X"
                ]
            ]
        ],
        "programs": [
            "(Module (/seq (Assign (list (Name &MAXN:0 Store)) (BinOp (BinOp (Constant i5 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None))) Add (Constant i100 None)) None) (Assign (list (Name &a:0 Store)) (List nil Load) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Constant i0 None))) nil)) (Assign (list (Name &a:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Add (Name &a:0 Load)) None) (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) Add (Constant i2 None)) None) (Assign (list (Name &arr:0 Store)) (List nil Load) None) (Expr (Call (Attribute (Name &arr:0 Load) s_append Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))) nil)) (Expr (Call (Attribute (Name &arr:0 Load) s_append Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil)) (Assign (list (Name &i:0 Store)) (Constant i2 None) None) (While (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) (/seq (Assign (list (Name &ln:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) None) (Assign (list (Name &l1:0 Store)) (Subscript (Name &arr:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Name &l0:0 Store)) (Subscript (Name &arr:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load) None) (While (BoolOp And (list (Compare (Name &l1:0 Load) (list LtE) (list (Name &l0:0 Load))) (Compare (Name &l1:0 Load) (list LtE) (list (Name &ln:0 Load))))) (/seq (Assign (list (Name &ans:0 Store)) (BinOp (Name &ans:0 Load) Add (Call (Name g_min Load) (list (_starred_content (Name &l0:0 Load)) (_starred_content (Name &ln:0 Load))) nil)) None) (Expr (Call (Attribute (Name &arr:0 Load) s_pop Load) nil nil)) (Assign (list (Name &l1:0 Store)) (Subscript (Name &arr:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Name &l0:0 Store)) (Subscript (Name &arr:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load) None)) (/seq)) (Expr (Call (Attribute (Name &arr:0 Load) s_append Load) (list (_starred_content (Name &ln:0 Load))) nil)) (Assign (list (Name &i:0 Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None)) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &arr:0 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (AugAssign (Name &ans:0 Store) Add (Call (Name g_min Load) (list (_starred_content (Subscript (Name &arr:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)) (_starred_content (Subscript (Name &arr:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
            "(Module (/seq (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Name &list:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &stack:0 Store)) (List nil Load) None) (Assign (list (Name &score:0 Store)) (Constant i0 None) None) (/splice (fn_2 &list:0 &stack:0 &i:0 &score:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &score:0 Load))) nil))) nil)",
            "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &cards:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &score:0 Store)) (Constant i0 None) None) (Assign (list (Name &preIndexes:0 Store)) (List nil Load) None) (Assign (list (Name &nextIndexes:0 Store)) (List nil Load) None) (Assign (list (Name &isChosen:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &chosens:0 Store)) (List nil Load) None) (Expr (Call (Attribute (Name &nextIndexes:0 Load) s_append Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Attribute (Name &preIndexes:0 Load) s_append Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &cards:0 Load) (_slice_content (Name &i:0 Load)) Load) (list LtE) (list (Subscript (Name &cards:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load))) (Compare (Subscript (Name &cards:0 Load) (_slice_content (Name &i:0 Load)) Load) (list LtE) (list (Subscript (Name &cards:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))))) (/seq (Expr (Call (Attribute (Name &chosens:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Subscript (Name &cards:0 Load) (_slice_content (Name &i:0 Load)) Load))) (_starred_content (Name &i:0 Load))) Load))) nil)) (Assign (list (Subscript (Name &isChosen:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant i1 None) None)) (/seq)) (Expr (Call (Attribute (Name &preIndexes:0 Load) s_append Load) (list (_starred_content (BinOp (Name &i:0 Load) Sub (Constant i1 None)))) nil)) (Expr (Call (Attribute (Name &nextIndexes:0 Load) s_append Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))) nil))) (/seq) None) (Expr (Call (Attribute (Name &preIndexes:0 Load) s_append Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil)) (Expr (Call (Attribute (Name &nextIndexes:0 Load) s_append Load) (list (_starred_content (Name &n:0 Load))) nil)) (While (Compare (Call (Name g_len Load) (list (_starred_content (Name &chosens:0 Load))) nil) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &chosen:0 Store)) (Call (Attribute (Name &chosens:0 Load) s_pop Load) nil nil) None) (Assign (list (Name &preChosen:0 Store)) (Subscript (Name &preIndexes:0 Load) (_slice_content (Subscript (Name &chosen:0 Load) (_slice_content (Constant i1 None)) Load)) Load) None) (Assign (list (Name &nextChosen:0 Store)) (Subscript (Name &nextIndexes:0 Load) (_slice_content (Subscript (Name &chosen:0 Load) (_slice_content (Constant i1 None)) Load)) Load) None) (AugAssign (Name &score:0 Store) Add (Call (Name g_min Load) (list (_starred_content (Subscript (Name &cards:0 Load) (_slice_content (Name &preChosen:0 Load)) Load)) (_starred_content (Subscript (Name &cards:0 Load) (_slice_content (Name &nextChosen:0 Load)) Load))) nil)) (Assign (list (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &preChosen:0 Load)) Store)) (Name &nextChosen:0 Load) None) (Assign (list (Subscript (Name &preIndexes:0 Load) (_slice_content (Name &nextChosen:0 Load)) Store)) (Name &preChosen:0 Load) None) (fn_3 (Constant i0 None) &preChosen:0 &isChosen:0 &cards:0 &chosens:0 &nextIndexes:0 &preIndexes:0 &n:0) (fn_3 (BinOp (Name &n:0 Load) Sub (Constant i1 None)) &nextChosen:0 &isChosen:0 &cards:0 &chosens:0 &nextIndexes:0 &preIndexes:0 &n:0)) (/seq)) (Assign (list (Name &tempNode:0 Store)) (Subscript (Name &nextIndexes:0 Load) (_slice_content (Constant i0 None)) Load) None) (While (BoolOp And (list (Compare (Name &tempNode:0 Load) (list NotEq) (list (Name &n:0 Load))) (Compare (Name &tempNode:0 Load) (list NotEq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))))) (/seq (AugAssign (Name &score:0 Store) Add (Call (Name g_min Load) (list (_starred_content (Subscript (Name &cards:0 Load) (_slice_content (Subscript (Name &preIndexes:0 Load) (_slice_content (Name &tempNode:0 Load)) Load)) Load)) (_starred_content (Subscript (Name &cards:0 Load) (_slice_content (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &tempNode:0 Load)) Load)) Load))) nil)) (Assign (list (Name &tempNode:0 Store)) (Subscript (Name &nextIndexes:0 Load) (_slice_content (Name &tempNode:0 Load)) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &score:0 Load))) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store)) (_starred_content (Name &a:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_input Load) nil nil)) (_starred_content (List nil Load)) (_starred_content (Constant i0 None))) Load) None) (/splice (fn_1 (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil) &s:0 &i:0 &a:0))) nil)",
            "(Module (/seq (FunctionDef &maxScore:0 (arguments nil (list (arg &list:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &score:1 Store)) (Constant i0 None) None) (Assign (list (Name &stack:1 Store)) (List nil Load) None) (/splice (fn_2 &list:1 &stack:1 &i:1 &score:1)) (Return (Name &score:1 Load))) nil None None) (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Name &l:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &maxScore:0 Load) (list (_starred_content (Name &l:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &s:0 Store)) (List nil Load) None) (Assign (list (Name &a:0 Store)) (Constant i0 None) None) (/splice (fn_1 (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) &s:0 &i:0 &a:0))) nil)",
            "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &s:0 Store)) (List nil Load) None) (Assign (list (Name &a:0 Store)) (Constant i0 None) None) (/splice (fn_1 (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) &s:0 &i:0 &a:0))) nil)"
        ]
    }
]
