["(Module\n  (semi\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (semi\n      (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n      (semi\n        (Assign\n          (list (Name &k:0 Store))\n          (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n          None\n        )\n        (semi\n          (Assign (list (Name &l:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) None)\n          (semi\n            (If\n              (Compare (Name &k:0 Load) (list LtE) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))))\n              (semi (Expr (Call (Name g_print Load) (list (Name &k:0 Load)) nil)) nil)\n              (semi\n                (While\n                  (Compare (Name &k:0 Load) (list Gt) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))))\n                  (semi\n                    (AugAssign (Name &k:0 Store) Sub (Constant i1 None))\n                    (semi (AugAssign (Name &l:0 Store) Add (Constant i1 None)) nil)\n                  )\n                  nil\n                )\n                (semi\n                  (Expr\n                    (Call\n                      (Name g_print Load)\n                      (list\n                        (Call\n                          (Name g_min Load)\n                          (list (Name &k:0 Load) (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))\n                          nil\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (semi\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (semi\n      (Assign (list (Name &s:0 Store)) (Call (Name g_str Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n      (semi\n        (Assign\n          (list (Name &p:0 Store))\n          (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n          None\n        )\n        (semi\n          (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None)\n          (semi\n            (Assign (list (Name &f:0 Store)) (Call (Name g_min Load) (list (Name &p:0 Load) (Name &q:0 Load)) nil) None)\n            (semi (Expr (Call (Name g_print Load) (list (Name &f:0 Load)) nil)) nil)\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (semi\n    (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (semi\n      (Assign (list (Name &y:0 Store)) (Call (Name g_input Load) nil nil) None)\n      (semi\n        (Assign\n          (list (Name &x:0 Store))\n          (Call (Attribute (Name &y:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n          None\n        )\n        (semi\n          (Expr\n            (Call\n              (Name g_print Load)\n              (list\n                (Call\n                  (Name g_min Load)\n                  (list (BinOp (Name &a:0 Load) FloorDiv (Constant i11 None)) (Name &x:0 Load))\n                  nil\n                )\n              )\n              nil\n            )\n          )\n          nil\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (semi\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (semi\n      (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n      (semi\n        (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n        (semi\n          (Assign (list (Name &nb_8:0 Store)) (Constant i0 None) None)\n          (semi\n            (If\n              (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None)))\n              (semi\n                (While\n                  (BinOp\n                    (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load)))\n                    BitAnd\n                    (Compare\n                      (BinOp (Name &n:0 Load) Sub (BinOp (Name &nb_8:0 Load) Mult (Constant i11 None)))\n                      (list Gt)\n                      (list (Constant i10 None))\n                    )\n                  )\n                  (semi\n                    (If\n                      (Compare (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant s_8 None)))\n                      (semi (AugAssign (Name &nb_8:0 Store) Add (Constant i1 None)) nil)\n                      nil\n                    )\n                    (semi (AugAssign (Name &i:0 Store) Add (Constant i1 None)) nil)\n                  )\n                  nil\n                )\n                nil\n              )\n              nil\n            )\n            (semi (Expr (Call (Name g_print Load) (list (Name &nb_8:0 Load)) nil)) nil)\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (semi\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (semi\n      (Assign (list (Name &eights:0 Store)) (Constant i0 None) None)\n      (semi\n        (Assign (list (Name &others:0 Store)) (Constant i0 None) None)\n        (semi\n          (For\n            (Name &elem:0 Store)\n            (Call (Name g_input Load) nil nil)\n            (semi\n              (If\n                (Compare (Call (Name g_int Load) (list (Name &elem:0 Load)) nil) (list Eq) (list (Constant i8 None)))\n                (semi (AugAssign (Name &eights:0 Store) Add (Constant i1 None)) nil)\n                (semi (AugAssign (Name &others:0 Store) Add (Constant i1 None)) nil)\n              )\n              nil\n            )\n            nil\n            None\n          )\n          (semi\n            (Assign (list (Name &answer:0 Store)) (Constant i0 None) None)\n            (semi\n              (While\n                (Constant True None)\n                (semi\n                  (If\n                    (Compare (Name &eights:0 Load) (list Eq) (list (Constant i0 None)))\n                    (semi Break nil)\n                    (semi\n                      (AugAssign (Name &eights:0 Store) Sub (Constant i1 None))\n                      (semi\n                        (If\n                          (Compare (Name &others:0 Load) (list GtE) (list (Constant i10 None)))\n                          (semi\n                            (AugAssign (Name &others:0 Store) Sub (Constant i10 None))\n                            (semi (AugAssign (Name &answer:0 Store) Add (Constant i1 None)) nil)\n                          )\n                          (semi\n                            (If\n                              (Compare\n                                (BinOp (Name &eights:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load)))\n                                (list GtE)\n                                (list (Constant i0 None))\n                              )\n                              (semi\n                                (AugAssign\n                                  (Name &eights:0 Store)\n                                  Sub\n                                  (BinOp (Constant i10 None) Sub (Name &others:0 Load))\n                                )\n                                (semi\n                                  (Assign (list (Name &others:0 Store)) (Constant i0 None) None)\n                                  (semi (AugAssign (Name &answer:0 Store) Add (Constant i1 None)) nil)\n                                )\n                              )\n                              (semi Break nil)\n                            )\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n                nil\n              )\n              (semi (Expr (Call (Name g_print Load) (list (Name &answer:0 Load)) nil)) nil)\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (semi\n    (Import (list (alias g_os None)))\n    (semi\n      (Import (list (alias g_sys None)))\n      (semi\n        (Import (list (alias g_math None)))\n        (semi\n          (Import (list (alias g_heapq None)))\n          (semi\n            (ImportFrom s_decimal (list (alias g_* None)) i0)\n            (semi\n              (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n              (semi\n                (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0)\n                (semi\n                  (FunctionDef\n                    &r:0\n                    (arguments nil nil None nil nil None nil)\n                    (semi (Return (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n                    nil\n                    None\n                    None\n                  )\n                  (semi\n                    (FunctionDef\n                      &rm:0\n                      (arguments nil nil None nil nil None nil)\n                      (semi\n                        (Return\n                          (Call\n                            (Name g_map Load)\n                            (list\n                              (Name g_int Load)\n                              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                            )\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                      nil\n                      None\n                      None\n                    )\n                    (semi\n                      (FunctionDef\n                        &rl:0\n                        (arguments nil nil None nil nil None nil)\n                        (semi\n                          (Return\n                            (Call\n                              (Name g_list Load)\n                              (list\n                                (Call\n                                  (Name g_map Load)\n                                  (list\n                                    (Name g_int Load)\n                                    (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                                  )\n                                  nil\n                                )\n                              )\n                              nil\n                            )\n                          )\n                          nil\n                        )\n                        nil\n                        None\n                        None\n                      )\n                      (semi\n                        (Assign (list (Name &n:0 Store)) (Call (Name &r:0 Load) nil nil) None)\n                        (semi\n                          (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None)\n                          (semi\n                            (Assign\n                              (list (Name &num:0 Store))\n                              (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil)\n                              None\n                            )\n                            (semi\n                              (For\n                                (Name &i:0 Store)\n                                (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n                                (semi\n                                  (AugAssign\n                                    (Subscript\n                                      (Name &num:0 Load)\n                                      (Call\n                                        (Name g_int Load)\n                                        (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))\n                                        nil\n                                      )\n                                      Store\n                                    )\n                                    Add\n                                    (Constant i1 None)\n                                  )\n                                  nil\n                                )\n                                nil\n                                None\n                              )\n                              (semi\n                                (If\n                                  (Compare\n                                    (Subscript (Name &num:0 Load) (Constant i8 None) Load)\n                                    (list Eq)\n                                    (list (Constant i0 None))\n                                  )\n                                  (semi (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) nil)\n                                  (semi\n                                    (Assign\n                                      (list (Name &tot:0 Store))\n                                      (BinOp\n                                        (Name &n:0 Load)\n                                        Sub\n                                        (Subscript (Name &num:0 Load) (Constant i8 None) Load)\n                                      )\n                                      None\n                                    )\n                                    (semi\n                                      (Assign\n                                        (list (Name &strips:0 Store))\n                                        (BinOp (Name &tot:0 Load) FloorDiv (Constant i10 None))\n                                        None\n                                      )\n                                      (semi\n                                        (Assign\n                                          (list (Name &rem:0 Store))\n                                          (BinOp (Name &tot:0 Load) Mod (Constant i10 None))\n                                          None\n                                        )\n                                        (semi\n                                          (If\n                                            (Compare\n                                              (Subscript (Name &num:0 Load) (Constant i8 None) Load)\n                                              (list LtE)\n                                              (list (Name &strips:0 Load))\n                                            )\n                                            (semi\n                                              (Expr\n                                                (Call\n                                                  (Name g_print Load)\n                                                  (list (Subscript (Name &num:0 Load) (Constant i8 None) Load))\n                                                  nil\n                                                )\n                                              )\n                                              nil\n                                            )\n                                            (semi\n                                              (Assign (list (Name &ans:0 Store)) (Name &strips:0 Load) None)\n                                              (semi\n                                                (AugAssign\n                                                  (Subscript (Name &num:0 Load) (Constant i8 None) Store)\n                                                  Sub\n                                                  (Name &strips:0 Load)\n                                                )\n                                                (semi\n                                                  (AugAssign\n                                                    (Name &ans:0 Store)\n                                                    Add\n                                                    (BinOp\n                                                      (Subscript (Name &num:0 Load) (Constant i8 None) Load)\n                                                      FloorDiv\n                                                      (Constant i11 None)\n                                                    )\n                                                  )\n                                                  (semi\n                                                    (AugAssign\n                                                      (Subscript (Name &num:0 Load) (Constant i8 None) Store)\n                                                      Mod\n                                                      (Constant i11 None)\n                                                    )\n                                                    (semi\n                                                      (AugAssign\n                                                        (Name &ans:0 Store)\n                                                        Add\n                                                        (IfExp\n                                                          (Compare\n                                                            (BinOp\n                                                              (BinOp\n                                                                (Name &rem:0 Load)\n                                                                Add\n                                                                (Subscript (Name &num:0 Load) (Constant i8 None) Load)\n                                                              )\n                                                              Sub\n                                                              (Constant i1 None)\n                                                            )\n                                                            (list GtE)\n                                                            (list (Constant i10 None))\n                                                          )\n                                                          (Constant i1 None)\n                                                          (Constant i0 None)\n                                                        )\n                                                      )\n                                                      (semi\n                                                        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n                                                        nil\n                                                      )\n                                                    )\n                                                  )\n                                                )\n                                              )\n                                            )\n                                          )\n                                          nil\n                                        )\n                                      )\n                                    )\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (semi\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (semi\n      (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n      (semi\n        (Assign\n          (list (Name &k:0 Store))\n          (Call (Attribute (Name &a:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n          None\n        )\n        (semi\n          (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n          (semi\n            (While\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None)))\n                  (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None)))\n                )\n              )\n              (semi\n                (AugAssign (Name &s:0 Store) Add (Constant i1 None))\n                (semi\n                  (AugAssign (Name &n:0 Store) Sub (Constant i11 None))\n                  (semi (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) nil)\n                )\n              )\n              nil\n            )\n            (semi (Expr (Call (Name g_print Load) (list (Name &s:0 Load)) nil)) nil)\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (semi\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (semi\n      (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n      (semi\n        (Assign\n          (list (Name &a:0 Store))\n          (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n          None\n        )\n        (semi\n          (Assign (list (Name &b:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None)\n          (semi\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (Call (Name g_min Load) (list (Name &a:0 Load) (Name &b:0 Load)) nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (semi\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (semi\n      (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n      (semi\n        (Assign\n          (list (Name &c:0 Store))\n          (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n          None\n        )\n        (semi\n          (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None)\n          (semi\n            (If\n              (Compare (Name &c:0 Load) (list GtE) (list (Name &x:0 Load)))\n              (semi\n                (Expr (Call (Name g_print Load) (list (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None))) nil))\n                nil\n              )\n              (semi\n                (If\n                  (Compare (Name &c:0 Load) (list Lt) (list (Name &x:0 Load)))\n                  (semi (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil)) nil)\n                  (semi (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) nil)\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (semi\n    (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (semi\n      (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n      (semi\n        (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n        (semi\n          (For\n            (Name &i:0 Store)\n            (Name &s:0 Load)\n            (semi\n              (If\n                (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None)))\n                (semi\n                  (Assign (list (Name &count:0 Store)) (BinOp (Name &count:0 Load) Add (Constant i1 None)) None)\n                  nil\n                )\n                nil\n              )\n              nil\n            )\n            nil\n            None\n          )\n          (semi\n            (If\n              (Compare (Name &count:0 Load) (list NotEq) (list (Constant i0 None)))\n              (semi\n                (Assign (list (Name &p:0 Store)) (BinOp (Name &N:0 Load) Div (Constant i11 None)) None)\n                (semi\n                  (If\n                    (Compare (Name &p:0 Load) (list Gt) (list (Name &count:0 Load)))\n                    (semi (Expr (Call (Name g_print Load) (list (Name &count:0 Load)) nil)) nil)\n                    (semi\n                      (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &p:0 Load)) nil)) nil))\n                      nil\n                    )\n                  )\n                  nil\n                )\n              )\n              (semi (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) nil)\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)"]