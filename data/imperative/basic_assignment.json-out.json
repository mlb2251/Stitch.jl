[
    {
        "args": {},
        "abstractions": [
            [
                2,
                1,
                "(semi (Assign (list (Name %1 Store)) #1 None) #0)",
                "uninit_state",
                [
                    "uninit_state",
                    "uninit_state"
                ],
                [
                    "uninit_state"
                ]
            ],
            [
                2,
                0,
                "(Call (Name #1 Load) #0 nil)",
                "uninit_state",
                [
                    "uninit_state",
                    "uninit_state"
                ],
                []
            ],
            [
                2,
                3,
                "(Module (fn_1 (fn_1 (fn_1 #1 (Call (Attribute (Name %2 Load) s_count Load) (list (Constant s_8 None)) nil) %3) #0 %2) (fn_2 (list (fn_2 nil g_input)) g_int) %1) nil)",
                "uninit_state",
                [
                    "uninit_state",
                    "uninit_state"
                ],
                [
                    "uninit_state",
                    "uninit_state",
                    "uninit_state"
                ]
            ]
        ],
        "programs": [
            "(fn_3 (fn_2 nil g_input) (fn_1 (semi (If (Compare (Name &k:0 Load) (list LtE) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (semi (Expr (fn_2 (list (Name &k:0 Load)) g_print)) nil) (semi (While (Compare (Name &k:0 Load) (list Gt) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (semi (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) (semi (AugAssign (Name &l:0 Store) Add (Constant i1 None)) nil)) nil) (semi (Expr (fn_2 (list (fn_2 (list (Name &k:0 Load) (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))) g_min)) g_print)) nil))) nil) (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) &l:0) &n:0 &s:0 &k:0)",
            "(fn_3 (fn_2 (list (fn_2 nil g_input)) g_str) (fn_1 (fn_1 (semi (Expr (fn_2 (list (Name &f:0 Load)) g_print)) nil) (fn_2 (list (Name &p:0 Load) (Name &q:0 Load)) g_min) &f:0) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) &q:0) &n:0 &s:0 &p:0)",
            "(fn_3 (fn_2 nil g_input) (semi (Expr (fn_2 (list (fn_2 (list (BinOp (Name &a:0 Load) FloorDiv (Constant i11 None)) (Name &x:0 Load)) g_min)) g_print)) nil) &a:0 &y:0 &x:0)",
            "(Module (fn_1 (fn_1 (fn_1 (fn_1 (semi (If (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))) (semi (While (BinOp (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) BitAnd (Compare (BinOp (Name &n:0 Load) Sub (BinOp (Name &nb_8:0 Load) Mult (Constant i11 None))) (list Gt) (list (Constant i10 None)))) (semi (If (Compare (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant s_8 None))) (semi (AugAssign (Name &nb_8:0 Store) Add (Constant i1 None)) nil) nil) (semi (AugAssign (Name &i:0 Store) Add (Constant i1 None)) nil)) nil) nil) nil) (semi (Expr (fn_2 (list (Name &nb_8:0 Load)) g_print)) nil)) (Constant i0 None) &nb_8:0) (Constant i0 None) &i:0) (fn_2 nil g_input) &s:0) (fn_2 (list (fn_2 nil g_input)) g_int) &n:0) nil)",
            "(Module (fn_1 (fn_1 (fn_1 (semi (For (Name &elem:0 Store) (fn_2 nil g_input) (semi (If (Compare (fn_2 (list (Name &elem:0 Load)) g_int) (list Eq) (list (Constant i8 None))) (semi (AugAssign (Name &eights:0 Store) Add (Constant i1 None)) nil) (semi (AugAssign (Name &others:0 Store) Add (Constant i1 None)) nil)) nil) nil None) (fn_1 (semi (While (Constant True None) (semi (If (Compare (Name &eights:0 Load) (list Eq) (list (Constant i0 None))) (semi Break nil) (semi (AugAssign (Name &eights:0 Store) Sub (Constant i1 None)) (semi (If (Compare (Name &others:0 Load) (list GtE) (list (Constant i10 None))) (semi (AugAssign (Name &others:0 Store) Sub (Constant i10 None)) (semi (AugAssign (Name &answer:0 Store) Add (Constant i1 None)) nil)) (semi (If (Compare (BinOp (Name &eights:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (list GtE) (list (Constant i0 None))) (semi (AugAssign (Name &eights:0 Store) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (fn_1 (semi (AugAssign (Name &answer:0 Store) Add (Constant i1 None)) nil) (Constant i0 None) &others:0)) (semi Break nil)) nil)) nil))) nil) nil) (semi (Expr (fn_2 (list (Name &answer:0 Load)) g_print)) nil)) (Constant i0 None) &answer:0)) (Constant i0 None) &others:0) (Constant i0 None) &eights:0) (fn_2 (list (fn_2 nil g_input)) g_int) &n:0) nil)",
            "(Module (semi (Import (list (alias g_os None))) (semi (Import (list (alias g_sys None))) (semi (Import (list (alias g_math None))) (semi (Import (list (alias g_heapq None))) (semi (ImportFrom s_decimal (list (alias g_* None)) i0) (semi (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (semi (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (semi (FunctionDef &r:0 (arguments nil nil None nil nil None nil) (semi (Return (fn_2 (list (fn_2 nil g_input)) g_int)) nil) nil None None) (semi (FunctionDef &rm:0 (arguments nil nil None nil nil None nil) (semi (Return (fn_2 (list (Name g_int Load) (Call (Attribute (fn_2 nil g_input) s_split Load) nil nil)) g_map)) nil) nil None None) (semi (FunctionDef &rl:0 (arguments nil nil None nil nil None nil) (semi (Return (fn_2 (list (fn_2 (list (Name g_int Load) (Call (Attribute (fn_2 nil g_input) s_split Load) nil nil)) g_map)) g_list)) nil) nil None None) (fn_1 (fn_1 (fn_1 (semi (For (Name &i:0 Store) (fn_2 (list (Name &n:0 Load)) g_range) (semi (AugAssign (Subscript (Name &num:0 Load) (fn_2 (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) g_int) Store) Add (Constant i1 None)) nil) nil None) (semi (If (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list Eq) (list (Constant i0 None))) (semi (Expr (fn_2 (list (Constant i0 None)) g_print)) nil) (fn_1 (fn_1 (fn_1 (semi (If (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list LtE) (list (Name &strips:0 Load))) (semi (Expr (fn_2 (list (Subscript (Name &num:0 Load) (Constant i8 None) Load)) g_print)) nil) (fn_1 (semi (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Sub (Name &strips:0 Load)) (semi (AugAssign (Name &ans:0 Store) Add (BinOp (Subscript (Name &num:0 Load) (Constant i8 None) Load) FloorDiv (Constant i11 None))) (semi (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Mod (Constant i11 None)) (semi (AugAssign (Name &ans:0 Store) Add (IfExp (Compare (BinOp (BinOp (Name &rem:0 Load) Add (Subscript (Name &num:0 Load) (Constant i8 None) Load)) Sub (Constant i1 None)) (list GtE) (list (Constant i10 None))) (Constant i1 None) (Constant i0 None))) (semi (Expr (fn_2 (list (Name &ans:0 Load)) g_print)) nil))))) (Name &strips:0 Load) &ans:0)) nil) (BinOp (Name &tot:0 Load) Mod (Constant i10 None)) &rem:0) (BinOp (Name &tot:0 Load) FloorDiv (Constant i10 None)) &strips:0) (BinOp (Name &n:0 Load) Sub (Subscript (Name &num:0 Load) (Constant i8 None) Load)) &tot:0)) nil)) (fn_2 (list (Name g_int Load)) g_defaultdict) &num:0) (fn_2 nil g_input) &a:0) (fn_2 nil &r:0) &n:0))))))))))) nil)",
            "(fn_3 (fn_2 (list (fn_2 nil g_input)) g_list) (fn_1 (semi (While (BoolOp And (list (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))))) (semi (AugAssign (Name &s:0 Store) Add (Constant i1 None)) (semi (AugAssign (Name &n:0 Store) Sub (Constant i11 None)) (semi (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) nil))) nil) (semi (Expr (fn_2 (list (Name &s:0 Load)) g_print)) nil)) (Constant i0 None) &s:0) &n:0 &a:0 &k:0)",
            "(fn_3 (fn_2 nil g_input) (fn_1 (semi (Expr (fn_2 (list (fn_2 (list (Name &a:0 Load) (Name &b:0 Load)) g_min)) g_print)) nil) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) &b:0) &n:0 &s:0 &a:0)",
            "(fn_3 (fn_2 nil g_input) (fn_1 (semi (If (Compare (Name &c:0 Load) (list GtE) (list (Name &x:0 Load))) (semi (Expr (fn_2 (list (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None))) g_print)) nil) (semi (If (Compare (Name &c:0 Load) (list Lt) (list (Name &x:0 Load))) (semi (Expr (fn_2 (list (Name &c:0 Load)) g_print)) nil) (semi (Expr (fn_2 (list (Constant i0 None)) g_print)) nil)) nil)) nil) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) &x:0) &n:0 &s:0 &c:0)",
            "(Module (fn_1 (fn_1 (fn_1 (semi (For (Name &i:0 Store) (Name &s:0 Load) (semi (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None))) (fn_1 nil (BinOp (Name &count:0 Load) Add (Constant i1 None)) &count:0) nil) nil) nil None) (semi (If (Compare (Name &count:0 Load) (list NotEq) (list (Constant i0 None))) (fn_1 (semi (If (Compare (Name &p:0 Load) (list Gt) (list (Name &count:0 Load))) (semi (Expr (fn_2 (list (Name &count:0 Load)) g_print)) nil) (semi (Expr (fn_2 (list (fn_2 (list (Name &p:0 Load)) g_int)) g_print)) nil)) nil) (BinOp (Name &N:0 Load) Div (Constant i11 None)) &p:0) (semi (Expr (fn_2 (list (Constant i0 None)) g_print)) nil)) nil)) (Constant i0 None) &count:0) (fn_2 nil g_input) &s:0) (fn_2 (list (fn_2 nil g_input)) g_int) &N:0) nil)"
        ]
    },
    {
        "args": {
            "dfa": "data_for_testing/dfa.json",
            "dfa_valid_root_states": [
                "S",
                "seqS",
                "E",
                "M"
            ]
        },
        "abstractions": [
            [
                2,
                1,
                "(semi (Assign (list (Name %1 Store)) #1 None) #0)",
                "S",
                [
                    "S",
                    "E"
                ],
                [
                    "X"
                ]
            ],
            [
                2,
                3,
                "(Module (fn_1 (fn_1 (fn_1 #1 (Call (Attribute (Name %2 Load) s_count Load) (list (Constant s_8 None)) nil) %3) #0 %2) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) %1) nil)",
                "M",
                [
                    "E",
                    "S"
                ],
                [
                    "X",
                    "X",
                    "X"
                ]
            ],
            [
                1,
                0,
                "(semi (Expr (Call (Name g_print Load) (list #0) nil)) nil)",
                "S",
                [
                    "E"
                ],
                []
            ]
        ],
        "programs": [
            "(fn_2 (Call (Name g_input Load) nil nil) (fn_1 (semi (If (Compare (Name &k:0 Load) (list LtE) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (fn_3 (Name &k:0 Load)) (semi (While (Compare (Name &k:0 Load) (list Gt) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (semi (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) (semi (AugAssign (Name &l:0 Store) Add (Constant i1 None)) nil)) nil) (fn_3 (Call (Name g_min Load) (list (Name &k:0 Load) (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))) nil)))) nil) (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) &l:0) &n:0 &s:0 &k:0)",
            "(fn_2 (Call (Name g_str Load) (list (Call (Name g_input Load) nil nil)) nil) (fn_1 (fn_1 (fn_3 (Name &f:0 Load)) (Call (Name g_min Load) (list (Name &p:0 Load) (Name &q:0 Load)) nil) &f:0) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) &q:0) &n:0 &s:0 &p:0)",
            "(fn_2 (Call (Name g_input Load) nil nil) (fn_3 (Call (Name g_min Load) (list (BinOp (Name &a:0 Load) FloorDiv (Constant i11 None)) (Name &x:0 Load)) nil)) &a:0 &y:0 &x:0)",
            "(Module (fn_1 (fn_1 (fn_1 (fn_1 (semi (If (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))) (semi (While (BinOp (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) BitAnd (Compare (BinOp (Name &n:0 Load) Sub (BinOp (Name &nb_8:0 Load) Mult (Constant i11 None))) (list Gt) (list (Constant i10 None)))) (semi (If (Compare (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant s_8 None))) (semi (AugAssign (Name &nb_8:0 Store) Add (Constant i1 None)) nil) nil) (semi (AugAssign (Name &i:0 Store) Add (Constant i1 None)) nil)) nil) nil) nil) (fn_3 (Name &nb_8:0 Load))) (Constant i0 None) &nb_8:0) (Constant i0 None) &i:0) (Call (Name g_input Load) nil nil) &s:0) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) &n:0) nil)",
            "(Module (fn_1 (fn_1 (fn_1 (semi (For (Name &elem:0 Store) (Call (Name g_input Load) nil nil) (semi (If (Compare (Call (Name g_int Load) (list (Name &elem:0 Load)) nil) (list Eq) (list (Constant i8 None))) (semi (AugAssign (Name &eights:0 Store) Add (Constant i1 None)) nil) (semi (AugAssign (Name &others:0 Store) Add (Constant i1 None)) nil)) nil) nil None) (fn_1 (semi (While (Constant True None) (semi (If (Compare (Name &eights:0 Load) (list Eq) (list (Constant i0 None))) (semi Break nil) (semi (AugAssign (Name &eights:0 Store) Sub (Constant i1 None)) (semi (If (Compare (Name &others:0 Load) (list GtE) (list (Constant i10 None))) (semi (AugAssign (Name &others:0 Store) Sub (Constant i10 None)) (semi (AugAssign (Name &answer:0 Store) Add (Constant i1 None)) nil)) (semi (If (Compare (BinOp (Name &eights:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (list GtE) (list (Constant i0 None))) (semi (AugAssign (Name &eights:0 Store) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (fn_1 (semi (AugAssign (Name &answer:0 Store) Add (Constant i1 None)) nil) (Constant i0 None) &others:0)) (semi Break nil)) nil)) nil))) nil) nil) (fn_3 (Name &answer:0 Load))) (Constant i0 None) &answer:0)) (Constant i0 None) &others:0) (Constant i0 None) &eights:0) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) &n:0) nil)",
            "(Module (semi (Import (list (alias g_os None))) (semi (Import (list (alias g_sys None))) (semi (Import (list (alias g_math None))) (semi (Import (list (alias g_heapq None))) (semi (ImportFrom s_decimal (list (alias g_* None)) i0) (semi (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (semi (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (semi (FunctionDef &r:0 (arguments nil nil None nil nil None nil) (semi (Return (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) nil None None) (semi (FunctionDef &rm:0 (arguments nil nil None nil nil None nil) (semi (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) nil None None) (semi (FunctionDef &rl:0 (arguments nil nil None nil nil None nil) (semi (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil)) nil) nil None None) (fn_1 (fn_1 (fn_1 (semi (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (semi (AugAssign (Subscript (Name &num:0 Load) (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil) Store) Add (Constant i1 None)) nil) nil None) (semi (If (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list Eq) (list (Constant i0 None))) (fn_3 (Constant i0 None)) (fn_1 (fn_1 (fn_1 (semi (If (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list LtE) (list (Name &strips:0 Load))) (fn_3 (Subscript (Name &num:0 Load) (Constant i8 None) Load)) (fn_1 (semi (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Sub (Name &strips:0 Load)) (semi (AugAssign (Name &ans:0 Store) Add (BinOp (Subscript (Name &num:0 Load) (Constant i8 None) Load) FloorDiv (Constant i11 None))) (semi (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Mod (Constant i11 None)) (semi (AugAssign (Name &ans:0 Store) Add (IfExp (Compare (BinOp (BinOp (Name &rem:0 Load) Add (Subscript (Name &num:0 Load) (Constant i8 None) Load)) Sub (Constant i1 None)) (list GtE) (list (Constant i10 None))) (Constant i1 None) (Constant i0 None))) (fn_3 (Name &ans:0 Load)))))) (Name &strips:0 Load) &ans:0)) nil) (BinOp (Name &tot:0 Load) Mod (Constant i10 None)) &rem:0) (BinOp (Name &tot:0 Load) FloorDiv (Constant i10 None)) &strips:0) (BinOp (Name &n:0 Load) Sub (Subscript (Name &num:0 Load) (Constant i8 None) Load)) &tot:0)) nil)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) &num:0) (Call (Name g_input Load) nil nil) &a:0) (Call (Name &r:0 Load) nil nil) &n:0))))))))))) nil)",
            "(fn_2 (Call (Name g_list Load) (list (Call (Name g_input Load) nil nil)) nil) (fn_1 (semi (While (BoolOp And (list (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))))) (semi (AugAssign (Name &s:0 Store) Add (Constant i1 None)) (semi (AugAssign (Name &n:0 Store) Sub (Constant i11 None)) (semi (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) nil))) nil) (fn_3 (Name &s:0 Load))) (Constant i0 None) &s:0) &n:0 &a:0 &k:0)",
            "(fn_2 (Call (Name g_input Load) nil nil) (fn_1 (fn_3 (Call (Name g_min Load) (list (Name &a:0 Load) (Name &b:0 Load)) nil)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) &b:0) &n:0 &s:0 &a:0)",
            "(fn_2 (Call (Name g_input Load) nil nil) (fn_1 (semi (If (Compare (Name &c:0 Load) (list GtE) (list (Name &x:0 Load))) (fn_3 (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None))) (semi (If (Compare (Name &c:0 Load) (list Lt) (list (Name &x:0 Load))) (fn_3 (Name &c:0 Load)) (fn_3 (Constant i0 None))) nil)) nil) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) &x:0) &n:0 &s:0 &c:0)",
            "(Module (fn_1 (fn_1 (fn_1 (semi (For (Name &i:0 Store) (Name &s:0 Load) (semi (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None))) (fn_1 nil (BinOp (Name &count:0 Load) Add (Constant i1 None)) &count:0) nil) nil) nil None) (semi (If (Compare (Name &count:0 Load) (list NotEq) (list (Constant i0 None))) (fn_1 (semi (If (Compare (Name &p:0 Load) (list Gt) (list (Name &count:0 Load))) (fn_3 (Name &count:0 Load)) (fn_3 (Call (Name g_int Load) (list (Name &p:0 Load)) nil))) nil) (BinOp (Name &N:0 Load) Div (Constant i11 None)) &p:0) (fn_3 (Constant i0 None))) nil)) (Constant i0 None) &count:0) (Call (Name g_input Load) nil nil) &s:0) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) &N:0) nil)"
        ]
    },
    {
        "args": {
            "dfa": "data_for_testing/dfa.json",
            "dfa_valid_root_states": [
                "S",
                "seqS",
                "E",
                "M"
            ],
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                2,
                3,
                "(semi (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (semi (Assign (list (Name %2 Store)) #0 None) (semi (Assign (list (Name %3 Store)) (Call (Attribute (Name %2 Load) s_count Load) (list (Constant s_8 None)) nil) None) #1)))",
                "S",
                [
                    "E",
                    "S"
                ],
                [
                    "X",
                    "X",
                    "X"
                ]
            ],
            [
                1,
                0,
                "(Expr (Call (Name g_print Load) #0 nil))",
                "S",
                [
                    "E"
                ],
                []
            ],
            [
                0,
                0,
                "(Call (Name g_input Load) nil nil)",
                "E",
                [],
                []
            ]
        ],
        "programs": [
            "(Module (fn_1 (fn_3) (semi (Assign (list (Name &l:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) None) (semi (If (Compare (Name &k:0 Load) (list LtE) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (semi (fn_2 (list (Name &k:0 Load))) nil) (semi (While (Compare (Name &k:0 Load) (list Gt) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (semi (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) (semi (AugAssign (Name &l:0 Store) Add (Constant i1 None)) nil)) nil) (semi (fn_2 (list (Call (Name g_min Load) (list (Name &k:0 Load) (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))) nil))) nil))) nil)) &n:0 &s:0 &k:0) nil)",
            "(Module (fn_1 (Call (Name g_str Load) (list (fn_3)) nil) (semi (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (semi (Assign (list (Name &f:0 Store)) (Call (Name g_min Load) (list (Name &p:0 Load) (Name &q:0 Load)) nil) None) (semi (fn_2 (list (Name &f:0 Load))) nil))) &n:0 &s:0 &p:0) nil)",
            "(Module (fn_1 (fn_3) (semi (fn_2 (list (Call (Name g_min Load) (list (BinOp (Name &a:0 Load) FloorDiv (Constant i11 None)) (Name &x:0 Load)) nil))) nil) &a:0 &y:0 &x:0) nil)",
            "(Module (semi (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (fn_3)) nil) None) (semi (Assign (list (Name &s:0 Store)) (fn_3) None) (semi (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (semi (Assign (list (Name &nb_8:0 Store)) (Constant i0 None) None) (semi (If (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))) (semi (While (BinOp (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) BitAnd (Compare (BinOp (Name &n:0 Load) Sub (BinOp (Name &nb_8:0 Load) Mult (Constant i11 None))) (list Gt) (list (Constant i10 None)))) (semi (If (Compare (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant s_8 None))) (semi (AugAssign (Name &nb_8:0 Store) Add (Constant i1 None)) nil) nil) (semi (AugAssign (Name &i:0 Store) Add (Constant i1 None)) nil)) nil) nil) nil) (semi (fn_2 (list (Name &nb_8:0 Load))) nil)))))) nil)",
            "(Module (semi (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (fn_3)) nil) None) (semi (Assign (list (Name &eights:0 Store)) (Constant i0 None) None) (semi (Assign (list (Name &others:0 Store)) (Constant i0 None) None) (semi (For (Name &elem:0 Store) (fn_3) (semi (If (Compare (Call (Name g_int Load) (list (Name &elem:0 Load)) nil) (list Eq) (list (Constant i8 None))) (semi (AugAssign (Name &eights:0 Store) Add (Constant i1 None)) nil) (semi (AugAssign (Name &others:0 Store) Add (Constant i1 None)) nil)) nil) nil None) (semi (Assign (list (Name &answer:0 Store)) (Constant i0 None) None) (semi (While (Constant True None) (semi (If (Compare (Name &eights:0 Load) (list Eq) (list (Constant i0 None))) (semi Break nil) (semi (AugAssign (Name &eights:0 Store) Sub (Constant i1 None)) (semi (If (Compare (Name &others:0 Load) (list GtE) (list (Constant i10 None))) (semi (AugAssign (Name &others:0 Store) Sub (Constant i10 None)) (semi (AugAssign (Name &answer:0 Store) Add (Constant i1 None)) nil)) (semi (If (Compare (BinOp (Name &eights:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (list GtE) (list (Constant i0 None))) (semi (AugAssign (Name &eights:0 Store) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (semi (Assign (list (Name &others:0 Store)) (Constant i0 None) None) (semi (AugAssign (Name &answer:0 Store) Add (Constant i1 None)) nil))) (semi Break nil)) nil)) nil))) nil) nil) (semi (fn_2 (list (Name &answer:0 Load))) nil))))))) nil)",
            "(Module (semi (Import (list (alias g_os None))) (semi (Import (list (alias g_sys None))) (semi (Import (list (alias g_math None))) (semi (Import (list (alias g_heapq None))) (semi (ImportFrom s_decimal (list (alias g_* None)) i0) (semi (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (semi (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (semi (FunctionDef &r:0 (arguments nil nil None nil nil None nil) (semi (Return (Call (Name g_int Load) (list (fn_3)) nil)) nil) nil None None) (semi (FunctionDef &rm:0 (arguments nil nil None nil nil None nil) (semi (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (fn_3) s_split Load) nil nil)) nil)) nil) nil None None) (semi (FunctionDef &rl:0 (arguments nil nil None nil nil None nil) (semi (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (fn_3) s_split Load) nil nil)) nil)) nil)) nil) nil None None) (semi (Assign (list (Name &n:0 Store)) (Call (Name &r:0 Load) nil nil) None) (semi (Assign (list (Name &a:0 Store)) (fn_3) None) (semi (Assign (list (Name &num:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None) (semi (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (semi (AugAssign (Subscript (Name &num:0 Load) (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil) Store) Add (Constant i1 None)) nil) nil None) (semi (If (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list Eq) (list (Constant i0 None))) (semi (fn_2 (list (Constant i0 None))) nil) (semi (Assign (list (Name &tot:0 Store)) (BinOp (Name &n:0 Load) Sub (Subscript (Name &num:0 Load) (Constant i8 None) Load)) None) (semi (Assign (list (Name &strips:0 Store)) (BinOp (Name &tot:0 Load) FloorDiv (Constant i10 None)) None) (semi (Assign (list (Name &rem:0 Store)) (BinOp (Name &tot:0 Load) Mod (Constant i10 None)) None) (semi (If (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list LtE) (list (Name &strips:0 Load))) (semi (fn_2 (list (Subscript (Name &num:0 Load) (Constant i8 None) Load))) nil) (semi (Assign (list (Name &ans:0 Store)) (Name &strips:0 Load) None) (semi (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Sub (Name &strips:0 Load)) (semi (AugAssign (Name &ans:0 Store) Add (BinOp (Subscript (Name &num:0 Load) (Constant i8 None) Load) FloorDiv (Constant i11 None))) (semi (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Mod (Constant i11 None)) (semi (AugAssign (Name &ans:0 Store) Add (IfExp (Compare (BinOp (BinOp (Name &rem:0 Load) Add (Subscript (Name &num:0 Load) (Constant i8 None) Load)) Sub (Constant i1 None)) (list GtE) (list (Constant i10 None))) (Constant i1 None) (Constant i0 None))) (semi (fn_2 (list (Name &ans:0 Load))) nil))))))) nil))))) nil))))))))))))))) nil)",
            "(Module (fn_1 (Call (Name g_list Load) (list (fn_3)) nil) (semi (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (semi (While (BoolOp And (list (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))))) (semi (AugAssign (Name &s:0 Store) Add (Constant i1 None)) (semi (AugAssign (Name &n:0 Store) Sub (Constant i11 None)) (semi (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) nil))) nil) (semi (fn_2 (list (Name &s:0 Load))) nil))) &n:0 &a:0 &k:0) nil)",
            "(Module (fn_1 (fn_3) (semi (Assign (list (Name &b:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (semi (fn_2 (list (Call (Name g_min Load) (list (Name &a:0 Load) (Name &b:0 Load)) nil))) nil)) &n:0 &s:0 &a:0) nil)",
            "(Module (fn_1 (fn_3) (semi (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (semi (If (Compare (Name &c:0 Load) (list GtE) (list (Name &x:0 Load))) (semi (fn_2 (list (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)))) nil) (semi (If (Compare (Name &c:0 Load) (list Lt) (list (Name &x:0 Load))) (semi (fn_2 (list (Name &c:0 Load))) nil) (semi (fn_2 (list (Constant i0 None))) nil)) nil)) nil)) &n:0 &s:0 &c:0) nil)",
            "(Module (semi (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (fn_3)) nil) None) (semi (Assign (list (Name &s:0 Store)) (fn_3) None) (semi (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (semi (For (Name &i:0 Store) (Name &s:0 Load) (semi (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None))) (semi (Assign (list (Name &count:0 Store)) (BinOp (Name &count:0 Load) Add (Constant i1 None)) None) nil) nil) nil) nil None) (semi (If (Compare (Name &count:0 Load) (list NotEq) (list (Constant i0 None))) (semi (Assign (list (Name &p:0 Store)) (BinOp (Name &N:0 Load) Div (Constant i11 None)) None) (semi (If (Compare (Name &p:0 Load) (list Gt) (list (Name &count:0 Load))) (semi (fn_2 (list (Name &count:0 Load))) nil) (semi (fn_2 (list (Call (Name g_int Load) (list (Name &p:0 Load)) nil))) nil)) nil)) (semi (fn_2 (list (Constant i0 None))) nil)) nil))))) nil)"
        ]
    },
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "dfa": "data_for_testing/dfa.json",
            "application_utility_metavar": -1,
            "dfa_valid_root_states": [
                "S",
                "seqS",
                "E",
                "M"
            ],
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                1,
                3,
                "(semi (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (semi (Assign (list (Name %2 Store)) (Call (Name g_input Load) nil nil) None) (semi (Assign (list (Name %3 Store)) (Call (Attribute (Name %2 Load) s_count Load) (list (Constant s_8 None)) nil) None) #0)))",
                "S",
                [
                    "S"
                ],
                [
                    "X",
                    "X",
                    "X"
                ]
            ],
            [
                0,
                0,
                "(Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)",
                "E",
                [],
                []
            ],
            [
                0,
                0,
                "(Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)",
                "E",
                [],
                []
            ]
        ],
        "programs": [
            "(Module (fn_1 (semi (Assign (list (Name &l:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) None) (semi (If (Compare (Name &k:0 Load) (list LtE) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (semi (Expr (Call (Name g_print Load) (list (Name &k:0 Load)) nil)) nil) (semi (While (Compare (Name &k:0 Load) (list Gt) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (semi (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) (semi (AugAssign (Name &l:0 Store) Add (Constant i1 None)) nil)) nil) (semi (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (Name &k:0 Load) (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))) nil)) nil)) nil))) nil)) &n:0 &s:0 &k:0) nil)",
            "(Module (semi (Assign (list (Name &n:0 Store)) (fn_2) None) (semi (Assign (list (Name &s:0 Store)) (Call (Name g_str Load) (list (Call (Name g_input Load) nil nil)) nil) None) (semi (Assign (list (Name &p:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_8 None)) nil) None) (semi (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (semi (Assign (list (Name &f:0 Store)) (Call (Name g_min Load) (list (Name &p:0 Load) (Name &q:0 Load)) nil) None) (semi (Expr (Call (Name g_print Load) (list (Name &f:0 Load)) nil)) nil)))))) nil)",
            "(Module (fn_1 (semi (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (BinOp (Name &a:0 Load) FloorDiv (Constant i11 None)) (Name &x:0 Load)) nil)) nil)) nil) &a:0 &y:0 &x:0) nil)",
            "(Module (semi (Assign (list (Name &n:0 Store)) (fn_2) None) (semi (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (semi (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (semi (Assign (list (Name &nb_8:0 Store)) (Constant i0 None) None) (semi (If (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))) (semi (While (BinOp (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) BitAnd (Compare (BinOp (Name &n:0 Load) Sub (BinOp (Name &nb_8:0 Load) Mult (Constant i11 None))) (list Gt) (list (Constant i10 None)))) (semi (If (Compare (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant s_8 None))) (semi (AugAssign (Name &nb_8:0 Store) Add (Constant i1 None)) nil) nil) (semi (AugAssign (Name &i:0 Store) Add (Constant i1 None)) nil)) nil) nil) nil) (semi (Expr (Call (Name g_print Load) (list (Name &nb_8:0 Load)) nil)) nil)))))) nil)",
            "(Module (semi (Assign (list (Name &n:0 Store)) (fn_2) None) (semi (Assign (list (Name &eights:0 Store)) (Constant i0 None) None) (semi (Assign (list (Name &others:0 Store)) (Constant i0 None) None) (semi (For (Name &elem:0 Store) (Call (Name g_input Load) nil nil) (semi (If (Compare (Call (Name g_int Load) (list (Name &elem:0 Load)) nil) (list Eq) (list (Constant i8 None))) (semi (AugAssign (Name &eights:0 Store) Add (Constant i1 None)) nil) (semi (AugAssign (Name &others:0 Store) Add (Constant i1 None)) nil)) nil) nil None) (semi (Assign (list (Name &answer:0 Store)) (Constant i0 None) None) (semi (While (Constant True None) (semi (If (Compare (Name &eights:0 Load) (list Eq) (list (Constant i0 None))) (semi Break nil) (semi (AugAssign (Name &eights:0 Store) Sub (Constant i1 None)) (semi (If (Compare (Name &others:0 Load) (list GtE) (list (Constant i10 None))) (semi (AugAssign (Name &others:0 Store) Sub (Constant i10 None)) (semi (AugAssign (Name &answer:0 Store) Add (Constant i1 None)) nil)) (semi (If (Compare (BinOp (Name &eights:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (list GtE) (list (Constant i0 None))) (semi (AugAssign (Name &eights:0 Store) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (semi (Assign (list (Name &others:0 Store)) (Constant i0 None) None) (semi (AugAssign (Name &answer:0 Store) Add (Constant i1 None)) nil))) (semi Break nil)) nil)) nil))) nil) nil) (semi (Expr (Call (Name g_print Load) (list (Name &answer:0 Load)) nil)) nil))))))) nil)",
            "(Module (semi (Import (list (alias g_os None))) (semi (Import (list (alias g_sys None))) (semi (Import (list (alias g_math None))) (semi (Import (list (alias g_heapq None))) (semi (ImportFrom s_decimal (list (alias g_* None)) i0) (semi (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (semi (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (semi (FunctionDef &r:0 (arguments nil nil None nil nil None nil) (semi (Return (fn_2)) nil) nil None None) (semi (FunctionDef &rm:0 (arguments nil nil None nil nil None nil) (semi (Return (fn_3)) nil) nil None None) (semi (FunctionDef &rl:0 (arguments nil nil None nil nil None nil) (semi (Return (Call (Name g_list Load) (list (fn_3)) nil)) nil) nil None None) (semi (Assign (list (Name &n:0 Store)) (Call (Name &r:0 Load) nil nil) None) (semi (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None) (semi (Assign (list (Name &num:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None) (semi (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (semi (AugAssign (Subscript (Name &num:0 Load) (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil) Store) Add (Constant i1 None)) nil) nil None) (semi (If (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list Eq) (list (Constant i0 None))) (semi (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) nil) (semi (Assign (list (Name &tot:0 Store)) (BinOp (Name &n:0 Load) Sub (Subscript (Name &num:0 Load) (Constant i8 None) Load)) None) (semi (Assign (list (Name &strips:0 Store)) (BinOp (Name &tot:0 Load) FloorDiv (Constant i10 None)) None) (semi (Assign (list (Name &rem:0 Store)) (BinOp (Name &tot:0 Load) Mod (Constant i10 None)) None) (semi (If (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list LtE) (list (Name &strips:0 Load))) (semi (Expr (Call (Name g_print Load) (list (Subscript (Name &num:0 Load) (Constant i8 None) Load)) nil)) nil) (semi (Assign (list (Name &ans:0 Store)) (Name &strips:0 Load) None) (semi (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Sub (Name &strips:0 Load)) (semi (AugAssign (Name &ans:0 Store) Add (BinOp (Subscript (Name &num:0 Load) (Constant i8 None) Load) FloorDiv (Constant i11 None))) (semi (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Mod (Constant i11 None)) (semi (AugAssign (Name &ans:0 Store) Add (IfExp (Compare (BinOp (BinOp (Name &rem:0 Load) Add (Subscript (Name &num:0 Load) (Constant i8 None) Load)) Sub (Constant i1 None)) (list GtE) (list (Constant i10 None))) (Constant i1 None) (Constant i0 None))) (semi (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil)) nil))))))) nil))))) nil))))))))))))))) nil)",
            "(Module (semi (Assign (list (Name &n:0 Store)) (fn_2) None) (semi (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (Call (Name g_input Load) nil nil)) nil) None) (semi (Assign (list (Name &k:0 Store)) (Call (Attribute (Name &a:0 Load) s_count Load) (list (Constant s_8 None)) nil) None) (semi (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (semi (While (BoolOp And (list (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))))) (semi (AugAssign (Name &s:0 Store) Add (Constant i1 None)) (semi (AugAssign (Name &n:0 Store) Sub (Constant i11 None)) (semi (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) nil))) nil) (semi (Expr (Call (Name g_print Load) (list (Name &s:0 Load)) nil)) nil)))))) nil)",
            "(Module (fn_1 (semi (Assign (list (Name &b:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (semi (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (Name &a:0 Load) (Name &b:0 Load)) nil)) nil)) nil)) &n:0 &s:0 &a:0) nil)",
            "(Module (fn_1 (semi (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (semi (If (Compare (Name &c:0 Load) (list GtE) (list (Name &x:0 Load))) (semi (Expr (Call (Name g_print Load) (list (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None))) nil)) nil) (semi (If (Compare (Name &c:0 Load) (list Lt) (list (Name &x:0 Load))) (semi (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil)) nil) (semi (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) nil)) nil)) nil)) &n:0 &s:0 &c:0) nil)",
            "(Module (semi (Assign (list (Name &N:0 Store)) (fn_2) None) (semi (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (semi (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (semi (For (Name &i:0 Store) (Name &s:0 Load) (semi (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None))) (semi (Assign (list (Name &count:0 Store)) (BinOp (Name &count:0 Load) Add (Constant i1 None)) None) nil) nil) nil) nil None) (semi (If (Compare (Name &count:0 Load) (list NotEq) (list (Constant i0 None))) (semi (Assign (list (Name &p:0 Store)) (BinOp (Name &N:0 Load) Div (Constant i11 None)) None) (semi (If (Compare (Name &p:0 Load) (list Gt) (list (Name &count:0 Load))) (semi (Expr (Call (Name g_print Load) (list (Name &count:0 Load)) nil)) nil) (semi (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &p:0 Load)) nil)) nil)) nil)) nil)) (semi (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) nil)) nil))))) nil)"
        ]
    }
]
