["(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_gettrace None)) i0)\n    (ImportFrom s_heapq (list (alias g_nlargest None)) i0)\n    (If\n      (UnaryOp Not (Call (Name g_gettrace Load) nil nil))\n      (/seq\n        (FunctionDef\n          &input:0\n          (arguments nil nil None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Call (Name g_next Load) (list (Name g_stdin Load)) nil)\n                (Slice None (UnaryOp USub (Constant i1 None)) None)\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &INF:0 Store)) (Call (Name g_int Load) (list (Constant f100000000000.0 None)) nil) None)\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (FunctionDef\n          &solve:1\n          (arguments nil nil None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &n:2 Store) (Name &k:2 Store)) Store))\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &mm:2 Store)) (List nil Load) None)\n            (For\n              (Name &i:2 Store)\n              (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:2 Load) Add (Constant i1 None))) nil)\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &a:2 Store) (Name &b:2 Store)) Store))\n                  (Call\n                    (Name g_map Load)\n                    (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                    nil\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &mm:2 Load) s_append Load)\n                    (list (Tuple (list (Name &b:2 Load) (Name &a:2 Load) (Name &i:2 Load)) Load))\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n            (Expr (Call (Attribute (Name &mm:2 Load) s_sort Load) nil nil))\n            (Assign\n              (list (Name &dp:2 Store))\n              (ListComp\n                (BinOp\n                  (List (list (Tuple (list (UnaryOp USub (Constant i1000000 None)) (Constant False None)) Load)) Load)\n                  Mult\n                  (Call\n                    (Name g_min Load)\n                    (list\n                      (BinOp (Name &i:3 Load) Add (Constant i1 None))\n                      (BinOp (Name &k:2 Load) Add (Constant i1 None))\n                    )\n                    nil\n                  )\n                )\n                (list\n                  (comprehension\n                    (Name &i:3 Store)\n                    (Call (Name g_range Load) (list (BinOp (Name &n:2 Load) Add (Constant i1 None))) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Subscript (Subscript (Name &dp:2 Load) (Constant i1 None) Load) (Constant i0 None) Store))\n              (Tuple\n                (list\n                  (BinOp\n                    (Subscript (Subscript (Name &mm:2 Load) (Constant i0 None) Load) (Constant i0 None) Load)\n                    Mult\n                    (BinOp (Name &k:2 Load) Sub (Constant i1 None))\n                  )\n                  (Constant False None)\n                )\n                Load\n              )\n              None\n            )\n            (Assign\n              (list (Subscript (Subscript (Name &dp:2 Load) (Constant i1 None) Load) (Constant i1 None) Store))\n              (Tuple\n                (list\n                  (Subscript (Subscript (Name &mm:2 Load) (Constant i0 None) Load) (Constant i1 None) Load)\n                  (Constant True None)\n                )\n                Load\n              )\n              None\n            )\n            (For\n              (Tuple\n                (list (Name &j:2 Store) (Tuple (list (Name &b:2 Store) (Name &a:2 Store) (Name &_:2 Store)) Store))\n                Store\n              )\n              (Call\n                (Name g_enumerate Load)\n                (list (Subscript (Name &mm:2 Load) (Slice (Constant i1 None) None None) Load) (Constant i2 None))\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Subscript (Name &dp:2 Load) (Name &j:2 Load) Load) (Constant i0 None) Store))\n                  (Tuple\n                    (list\n                      (BinOp\n                        (Subscript\n                          (Subscript\n                            (Subscript (Name &dp:2 Load) (BinOp (Name &j:2 Load) Sub (Constant i1 None)) Load)\n                            (Constant i0 None)\n                            Load\n                          )\n                          (Constant i0 None)\n                          Load\n                        )\n                        Add\n                        (BinOp (Name &b:2 Load) Mult (BinOp (Name &k:2 Load) Sub (Constant i1 None)))\n                      )\n                      (Constant False None)\n                    )\n                    Load\n                  )\n                  None\n                )\n                (For\n                  (Name &l:2 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (Constant i1 None)\n                      (Call\n                        (Name g_min Load)\n                        (list (Name &j:2 Load) (BinOp (Name &k:2 Load) Add (Constant i1 None)))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &v1:2 Store))\n                      (BinOp\n                        (Subscript\n                          (Subscript\n                            (Subscript (Name &dp:2 Load) (BinOp (Name &j:2 Load) Sub (Constant i1 None)) Load)\n                            (Name &l:2 Load)\n                            Load\n                          )\n                          (Constant i0 None)\n                          Load\n                        )\n                        Add\n                        (BinOp (Name &b:2 Load) Mult (BinOp (Name &k:2 Load) Sub (Constant i1 None)))\n                      )\n                      None\n                    )\n                    (Assign\n                      (list (Name &v2:2 Store))\n                      (BinOp\n                        (BinOp\n                          (Subscript\n                            (Subscript\n                              (Subscript (Name &dp:2 Load) (BinOp (Name &j:2 Load) Sub (Constant i1 None)) Load)\n                              (BinOp (Name &l:2 Load) Sub (Constant i1 None))\n                              Load\n                            )\n                            (Constant i0 None)\n                            Load\n                          )\n                          Add\n                          (Name &a:2 Load)\n                        )\n                        Add\n                        (BinOp (Name &b:2 Load) Mult (BinOp (Name &l:2 Load) Sub (Constant i1 None)))\n                      )\n                      None\n                    )\n                    (If\n                      (Compare (Name &v1:2 Load) (list Gt) (list (Name &v2:2 Load)))\n                      (/seq\n                        (Assign\n                          (list (Subscript (Subscript (Name &dp:2 Load) (Name &j:2 Load) Load) (Name &l:2 Load) Store))\n                          (Tuple (list (Name &v1:2 Load) (Constant False None)) Load)\n                          None\n                        )\n                      )\n                      (/seq\n                        (Assign\n                          (list (Subscript (Subscript (Name &dp:2 Load) (Name &j:2 Load) Load) (Name &l:2 Load) Store))\n                          (Tuple (list (Name &v2:2 Load) (Constant True None)) Load)\n                          None\n                        )\n                      )\n                    )\n                  )\n                  nil\n                  None\n                )\n                (If\n                  (Compare (Name &j:2 Load) (list LtE) (list (Name &k:2 Load)))\n                  (/seq\n                    (Assign\n                      (list (Subscript (Subscript (Name &dp:2 Load) (Name &j:2 Load) Load) (Name &j:2 Load) Store))\n                      (Tuple\n                        (list\n                          (BinOp\n                            (BinOp\n                              (Subscript\n                                (Subscript\n                                  (Subscript (Name &dp:2 Load) (BinOp (Name &j:2 Load) Sub (Constant i1 None)) Load)\n                                  (BinOp (Name &j:2 Load) Sub (Constant i1 None))\n                                  Load\n                                )\n                                (Constant i0 None)\n                                Load\n                              )\n                              Add\n                              (Name &a:2 Load)\n                            )\n                            Add\n                            (BinOp (Name &b:2 Load) Mult (BinOp (Name &j:2 Load) Sub (Constant i1 None)))\n                          )\n                          (Constant True None)\n                        )\n                        Load\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Assign (list (Name &g1:2 Store)) (List nil Load) None)\n            (Assign (list (Name &g2:2 Store)) (List nil Load) None)\n            (Assign (list (Name &l:2 Store)) (Name &k:2 Load) None)\n            (For\n              (Name &j:2 Store)\n              (Call\n                (Name g_range Load)\n                (list (Name &n:2 Load) (Constant i0 None) (UnaryOp USub (Constant i1 None)))\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &_:2 Store) (Name &_:2 Store) (Name &i:2 Store)) Store))\n                  (Subscript (Name &mm:2 Load) (BinOp (Name &j:2 Load) Sub (Constant i1 None)) Load)\n                  None\n                )\n                (If\n                  (Subscript\n                    (Subscript (Subscript (Name &dp:2 Load) (Name &j:2 Load) Load) (Name &l:2 Load) Load)\n                    (Constant i1 None)\n                    Load\n                  )\n                  (/seq\n                    (Expr (Call (Attribute (Name &g1:2 Load) s_append Load) (list (Name &i:2 Load)) nil))\n                    (AugAssign (Name &l:2 Store) Sub (Constant i1 None))\n                  )\n                  (/seq\n                    (Expr (Call (Attribute (Name &g2:2 Load) s_append Load) (list (Name &i:2 Load)) nil))\n                    (Expr (Call (Attribute (Name &g2:2 Load) s_append Load) (list (UnaryOp USub (Name &i:2 Load))) nil))\n                  )\n                )\n              )\n              nil\n              None\n            )\n            (Expr (Call (Attribute (Name &g1:2 Load) s_reverse Load) nil nil))\n            (Assign\n              (list (Name &res:2 Store))\n              (BinOp\n                (BinOp\n                  (Subscript (Name &g1:2 Load) (Slice None (BinOp (Name &k:2 Load) Sub (Constant i1 None)) None) Load)\n                  Add\n                  (Name &g2:2 Load)\n                )\n                Add\n                (Subscript (Name &g1:2 Load) (Slice (BinOp (Name &k:2 Load) Sub (Constant i1 None)) None None) Load)\n              )\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &res:2 Load)) nil)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Call\n                    (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                    (list (Call (Name g_map Load) (list (Name g_str Load) (Name &res:2 Load)) nil))\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (For\n          (Name &_:1 Store)\n          (Call (Name g_range Load) (list (Name &q:1 Load)) nil)\n          (/seq (Expr (Call (Name &solve:1 Load) nil nil)))\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_operator (list (alias g_itemgetter None)) i0)\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &int1:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n        (BinOp (Call (Name g_int Load) (list (Name &x:3 Load)) nil) Sub (Constant i1 None))\n      )\n      None\n    )\n    (Assign\n      (list (Name &p2D:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:4 None None)) None nil nil None nil)\n        (Call\n          (Name g_print Load)\n          (list (Starred (Name &x:4 Load) Load))\n          (list (keyword s_sep (Constant s-WzEwXQ== None)))\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &II:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &MI:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute\n                  (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LI:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Name g_int Load)\n                  (Call\n                    (Attribute\n                      (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                      s_split\n                      Load\n                    )\n                    nil\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LLI:0\n      (arguments nil (list (arg &rows_number:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name &LI:0 Load) nil nil)\n            (list\n              (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (Name &rows_number:1 Load)) nil) nil i0)\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &SI:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Subscript\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            (Slice None (UnaryOp USub (Constant i1 None)) None)\n            Load\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &inf:2 Store)) (BinOp (Constant i10 None) Pow (Constant i9 None)) None)\n        (For\n          (Name &_:2 Store)\n          (Call (Name g_range Load) (list (Call (Name &II:0 Load) nil nil)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &n:2 Store) (Name &k:2 Store)) Store))\n              (Call (Name &MI:0 Load) nil nil)\n              None\n            )\n            (Assign\n              (list (Name &ab:2 Store))\n              (ListComp\n                (Tuple (list (Name &a:6 Load) (Name &b:6 Load) (Name &i:6 Load)) Load)\n                (list\n                  (comprehension\n                    (Tuple (list (Name &i:6 Store) (Tuple (list (Name &a:6 Store) (Name &b:6 Store)) Store)) Store)\n                    (Call (Name g_enumerate Load) (list (Call (Name &LLI:0 Load) (list (Name &n:2 Load)) nil)) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &dp:2 Store))\n              (ListComp\n                (BinOp (List (list (Name &inf:2 Load)) Load) Mult (Name &n:2 Load))\n                (list (comprehension (Name &_:7 Store) (Call (Name g_range Load) (list (Name &k:2 Load)) nil) nil i0))\n              )\n              None\n            )\n            (Assign\n              (list (Name &log:2 Store))\n              (ListComp\n                (ListComp\n                  (List nil Load)\n                  (list (comprehension (Name &_:9 Store) (Call (Name g_range Load) (list (Name &n:2 Load)) nil) nil i0))\n                )\n                (list (comprehension (Name &_:8 Store) (Call (Name g_range Load) (list (Name &k:2 Load)) nil) nil i0))\n              )\n              None\n            )\n            (For\n              (Name &e:2 Store)\n              (Call (Name g_range Load) (list (Name &n:2 Load)) nil)\n              (/seq\n                (Assign\n                  (list (Subscript (Subscript (Name &dp:2 Load) (Constant i0 None) Load) (Name &e:2 Load) Store))\n                  (UnaryOp USub (Subscript (Subscript (Name &ab:2 Load) (Name &e:2 Load) Load) (Constant i0 None) Load))\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Name &ab:2 Load) s_sort Load)\n                nil\n                (list (keyword s_key (Call (Name g_itemgetter Load) (list (Constant i1 None)) nil)))\n              )\n            )\n            (For\n              (Tuple (list (Name &a:2 Store) (Name &b:2 Store) (Name &i:2 Store)) Store)\n              (Name &ab:2 Load)\n              (/seq\n                (For\n                  (Name &j:2 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (BinOp (Name &k:2 Load) Sub (Constant i2 None))\n                      (UnaryOp USub (Constant i1 None))\n                      (UnaryOp USub (Constant i1 None))\n                    )\n                    nil\n                  )\n                  (/seq\n                    (For\n                      (Name &e:2 Store)\n                      (Call (Name g_range Load) (list (Name &n:2 Load)) nil)\n                      (/seq\n                        (If (Compare (Name &i:2 Load) (list Eq) (list (Name &e:2 Load))) (/seq Continue) nil)\n                        (Assign\n                          (list (Name &pre:2 Store))\n                          (Subscript (Subscript (Name &dp:2 Load) (Name &j:2 Load) Load) (Name &e:2 Load) Load)\n                          None\n                        )\n                        (If (Compare (Name &pre:2 Load) (list Eq) (list (Name &inf:2 Load))) (/seq Continue) nil)\n                        (Assign\n                          (list (Name &cur:2 Store))\n                          (BinOp\n                            (BinOp\n                              (Name &pre:2 Load)\n                              Add\n                              (BinOp\n                                (Name &b:2 Load)\n                                Mult\n                                (BinOp (BinOp (Name &k:2 Load) Sub (Constant i1 None)) Sub (Name &j:2 Load))\n                              )\n                            )\n                            Sub\n                            (Name &a:2 Load)\n                          )\n                          None\n                        )\n                        (If\n                          (Compare\n                            (Name &cur:2 Load)\n                            (list Lt)\n                            (list\n                              (Subscript\n                                (Subscript (Name &dp:2 Load) (BinOp (Name &j:2 Load) Add (Constant i1 None)) Load)\n                                (Name &e:2 Load)\n                                Load\n                              )\n                            )\n                          )\n                          (/seq\n                            (Assign\n                              (list\n                                (Subscript\n                                  (Subscript (Name &dp:2 Load) (BinOp (Name &j:2 Load) Add (Constant i1 None)) Load)\n                                  (Name &e:2 Load)\n                                  Store\n                                )\n                              )\n                              (Name &cur:2 Load)\n                              None\n                            )\n                            (Assign\n                              (list\n                                (Subscript\n                                  (Subscript (Name &log:2 Load) (BinOp (Name &j:2 Load) Add (Constant i1 None)) Load)\n                                  (Name &e:2 Load)\n                                  Store\n                                )\n                              )\n                              (BinOp\n                                (Subscript (Subscript (Name &log:2 Load) (Name &j:2 Load) Load) (Name &e:2 Load) Load)\n                                Add\n                                (List (list (Name &i:2 Load)) Load)\n                              )\n                              None\n                            )\n                          )\n                          nil\n                        )\n                      )\n                      nil\n                      None\n                    )\n                  )\n                  nil\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (Assign (list (Name &mn:2 Store) (Name &mne:2 Store)) (Name &inf:2 Load) None)\n            (For\n              (Name &e:2 Store)\n              (Call (Name g_range Load) (list (Name &n:2 Load)) nil)\n              (/seq\n                (Assign\n                  (list (Name &cur:2 Store))\n                  (Subscript (Subscript (Name &dp:2 Load) (UnaryOp USub (Constant i1 None)) Load) (Name &e:2 Load) Load)\n                  None\n                )\n                (If\n                  (Compare (Name &cur:2 Load) (list Lt) (list (Name &mn:2 Load)))\n                  (/seq\n                    (Assign (list (Name &mn:2 Store)) (Name &cur:2 Load) None)\n                    (Assign (list (Name &mne:2 Store)) (Name &e:2 Load) None)\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Assign\n              (list (Name &first:2 Store))\n              (Subscript (Subscript (Name &log:2 Load) (UnaryOp USub (Constant i1 None)) Load) (Name &mne:2 Load) Load)\n              None\n            )\n            (Assign\n              (list (Name &use:2 Store))\n              (BinOp (List (list (Constant False None)) Load) Mult (Name &n:2 Load))\n              None\n            )\n            (Assign (list (Subscript (Name &use:2 Load) (Name &mne:2 Load) Store)) (Constant True None) None)\n            (Assign (list (Name &ans:2 Store)) (List nil Load) None)\n            (For\n              (Name &i:2 Store)\n              (Name &first:2 Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &ans:2 Load) s_append Load)\n                    (list (BinOp (Name &i:2 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n                (Assign (list (Subscript (Name &use:2 Load) (Name &i:2 Load) Store)) (Constant True None) None)\n              )\n              nil\n              None\n            )\n            (For\n              (Name &i:2 Store)\n              (Call (Name g_range Load) (list (Name &n:2 Load)) nil)\n              (/seq\n                (If (Subscript (Name &use:2 Load) (Name &i:2 Load) Load) (/seq Continue) nil)\n                (Expr\n                  (Call\n                    (Attribute (Name &ans:2 Load) s_append Load)\n                    (list (BinOp (Name &i:2 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &ans:2 Load) s_append Load)\n                    (list (BinOp (UnaryOp USub (Name &i:2 Load)) Sub (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Name &ans:2 Load) s_append Load)\n                (list (BinOp (Name &mne:2 Load) Add (Constant i1 None)))\n                nil\n              )\n            )\n            (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &ans:2 Load)) nil)) nil))\n            (Expr (Call (Name g_print Load) (list (Starred (Name &ans:2 Load) Load)) nil))\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &read_int:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &read_ints:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Call (Name &read_int:0 Load) nil nil) None)\n    (For\n      (Name &case_num:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &k:0 Store)) Store))\n          (Call (Name &read_ints:0 Load) nil nil)\n          None\n        )\n        (Assign (list (Name &p:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &ai:0 Store) (Name &bi:0 Store)) Store))\n              (Call (Name &read_ints:0 Load) nil nil)\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Name &p:0 Load) s_append Load)\n                (list\n                  (Tuple\n                    (list (Name &bi:0 Load) (Name &ai:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &p:0 Load) s_sort Load) nil nil))\n        (Assign\n          (list (Name &dp:0 Store))\n          (ListComp\n            (ListComp\n              (Constant i0 None)\n              (list\n                (comprehension\n                  (Name &j:3 Store)\n                  (Call (Name g_range Load) (list (BinOp (Name &k:0 Load) Add (Constant i1 None))) nil)\n                  nil\n                  i0\n                )\n              )\n            )\n            (list\n              (comprehension\n                (Name &i:1 Store)\n                (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &use:0 Store))\n          (ListComp\n            (ListComp\n              (Constant False None)\n              (list\n                (comprehension\n                  (Name &j:4 Store)\n                  (Call (Name g_range Load) (list (BinOp (Name &k:0 Load) Add (Constant i1 None))) nil)\n                  nil\n                  i0\n                )\n              )\n            )\n            (list\n              (comprehension\n                (Name &i:2 Store)\n                (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (For\n              (Name &j:0 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (BinOp (Call (Name g_min Load) (list (Name &i:0 Load) (Name &k:0 Load)) nil) Add (Constant i1 None))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare (BinOp (Name &i:0 Load) Sub (Constant i1 None)) (list GtE) (list (Name &j:0 Load)))\n                  (/seq\n                    (Assign\n                      (list (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Store))\n                      (BinOp\n                        (Subscript\n                          (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                          (Name &j:0 Load)\n                          Load\n                        )\n                        Add\n                        (BinOp\n                          (BinOp (Name &k:0 Load) Sub (Constant i1 None))\n                          Mult\n                          (Subscript\n                            (Subscript (Name &p:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                            (Constant i0 None)\n                            Load\n                          )\n                        )\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n                (If\n                  (Compare (Name &j:0 Load) (list Gt) (list (Constant i0 None)))\n                  (/seq\n                    (Assign\n                      (list (Name &x:0 Store))\n                      (BinOp\n                        (BinOp\n                          (Subscript\n                            (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                            (BinOp (Name &j:0 Load) Sub (Constant i1 None))\n                            Load\n                          )\n                          Add\n                          (BinOp\n                            (BinOp (Name &j:0 Load) Sub (Constant i1 None))\n                            Mult\n                            (Subscript\n                              (Subscript (Name &p:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                              (Constant i0 None)\n                              Load\n                            )\n                          )\n                        )\n                        Add\n                        (Subscript\n                          (Subscript (Name &p:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                          (Constant i1 None)\n                          Load\n                        )\n                      )\n                      None\n                    )\n                    (If\n                      (Compare\n                        (Name &x:0 Load)\n                        (list Gt)\n                        (list (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Load))\n                      )\n                      (/seq\n                        (Assign\n                          (list (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Store))\n                          (Name &x:0 Load)\n                          None\n                        )\n                        (Assign\n                          (list (Subscript (Subscript (Name &use:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Store))\n                          (Constant True None)\n                          None\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &used:0 Store)) (List nil Load) None)\n        (Assign (list (Name &curr:0 Store)) (Name &k:0 Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load) (Constant i0 None) (UnaryOp USub (Constant i1 None))) nil)\n          (/seq\n            (If\n              (Subscript (Subscript (Name &use:0 Load) (Name &i:0 Load) Load) (Name &curr:0 Load) Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &used:0 Load) s_append Load)\n                    (list\n                      (Subscript\n                        (Subscript (Name &p:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                        (Constant i2 None)\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                )\n                (AugAssign (Name &curr:0 Store) Sub (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &used:0 Load) s_reverse Load) nil nil))\n        (Assign\n          (list (Name &seq:0 Store))\n          (Subscript (Name &used:0 Load) (Slice None (UnaryOp USub (Constant i1 None)) None) Load)\n          None\n        )\n        (Assign (list (Name &st:0 Store)) (Call (Name g_set Load) (list (Name &used:0 Load)) nil) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (If\n              (UnaryOp Not (Compare (Name &i:0 Load) (list In) (list (Name &st:0 Load))))\n              (/seq\n                (Expr (Call (Attribute (Name &seq:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n                (Expr (Call (Attribute (Name &seq:0 Load) s_append Load) (list (UnaryOp USub (Name &i:0 Load))) nil))\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &seq:0 Load) s_append Load)\n            (list (Subscript (Name &used:0 Load) (UnaryOp USub (Constant i1 None)) Load))\n            nil\n          )\n        )\n        (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &seq:0 Load)) nil)) nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                (list (Call (Name g_map Load) (list (Name g_str Load) (Name &seq:0 Load)) nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_typing (list (alias g_List None)) i0)\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Import (list (alias &math:0 None)))\n    (FunctionDef\n      &inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &inlt:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &insr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &s:1 Store))\n          (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil)\n          None\n        )\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Subscript (Name &s:1 Load) (Slice None (Call (Name g_len Load) (list (Name &s:1 Load)) nil) None) Load)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &invr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil) s_split Load)\n                nil\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &solve_hungarian:0\n      (arguments\n        nil\n        (list\n          (arg &a:2 (Subscript (Name g_List Load) (Subscript (Name g_List Load) (Name g_int Load) Load) Load) None)\n          (arg &n:2 (Name g_int Load) None)\n          (arg &m:2 (Name g_int Load) None)\n        )\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Expr\n          (Constant\n            s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNzMsIDEwOSwgMTEyLCAxMDgsIDEwMSwgMTA5LCAxMDEsIDExMCwgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTExLCAxMDIsIDMyLCA3MiwgMTE3LCAxMTAsIDEwMywgOTcsIDExNCwgMTA1LCA5NywgMTEwLCAzMiwgOTcsIDEwOCwgMTAzLCAxMTEsIDExNCwgMTA1LCAxMTYsIDEwNCwgMTA5LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTAsIDk0LCA1MCwgMzIsIDEwOSwgMTAsIDMyLCAzMiwgMzIsIDMyXQ==\n            None\n          )\n        )\n        (Assign\n          (list (Name &u:2 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:2 Load) Add (Constant i1 None)))\n          None\n        )\n        (Assign\n          (list (Name &v:2 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &m:2 Load) Add (Constant i1 None)))\n          None\n        )\n        (Assign\n          (list (Name &p:2 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &m:2 Load) Add (Constant i1 None)))\n          None\n        )\n        (Assign\n          (list (Name &way:2 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &m:2 Load) Add (Constant i1 None)))\n          None\n        )\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:2 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign (list (Subscript (Name &p:2 Load) (Constant i0 None) Store)) (Name &i:2 Load) None)\n            (Assign (list (Name &j0:2 Store)) (Constant i0 None) None)\n            (Assign\n              (list (Name &minv:2 Store))\n              (BinOp\n                (List (list (Call (Name g_float Load) (list (Constant s_inf None)) nil)) Load)\n                Mult\n                (BinOp (Name &m:2 Load) Add (Constant i1 None))\n              )\n              None\n            )\n            (Assign\n              (list (Name &used:2 Store))\n              (BinOp (List (list (Constant False None)) Load) Mult (BinOp (Name &m:2 Load) Add (Constant i1 None)))\n              None\n            )\n            (Assign (list (Name &condition:2 Store)) (Constant True None) None)\n            (While\n              (Name &condition:2 Load)\n              (/seq\n                (Assign (list (Subscript (Name &used:2 Load) (Name &j0:2 Load) Store)) (Constant True None) None)\n                (Assign (list (Name &i0:2 Store)) (Subscript (Name &p:2 Load) (Name &j0:2 Load) Load) None)\n                (Assign (list (Name &delta:2 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None)\n                (For\n                  (Name &j:2 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list (Constant i1 None) (BinOp (Name &m:2 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                  (/seq\n                    (If\n                      (UnaryOp Not (Subscript (Name &used:2 Load) (Name &j:2 Load) Load))\n                      (/seq\n                        (Assign\n                          (list (Name &cur:2 Store))\n                          (BinOp\n                            (BinOp\n                              (Subscript (Subscript (Name &a:2 Load) (Name &i0:2 Load) Load) (Name &j:2 Load) Load)\n                              Sub\n                              (Subscript (Name &u:2 Load) (Name &i0:2 Load) Load)\n                            )\n                            Sub\n                            (Subscript (Name &v:2 Load) (Name &j:2 Load) Load)\n                          )\n                          None\n                        )\n                        (If\n                          (Compare\n                            (Name &cur:2 Load)\n                            (list Lt)\n                            (list (Subscript (Name &minv:2 Load) (Name &j:2 Load) Load))\n                          )\n                          (/seq\n                            (Assign\n                              (list (Subscript (Name &minv:2 Load) (Name &j:2 Load) Store))\n                              (Name &cur:2 Load)\n                              None\n                            )\n                            (Assign (list (Subscript (Name &way:2 Load) (Name &j:2 Load) Store)) (Name &j0:2 Load) None)\n                          )\n                          nil\n                        )\n                        (If\n                          (Compare\n                            (Subscript (Name &minv:2 Load) (Name &j:2 Load) Load)\n                            (list Lt)\n                            (list (Name &delta:2 Load))\n                          )\n                          (/seq\n                            (Assign\n                              (list (Name &delta:2 Store))\n                              (Subscript (Name &minv:2 Load) (Name &j:2 Load) Load)\n                              None\n                            )\n                            (Assign (list (Name &j1:2 Store)) (Name &j:2 Load) None)\n                          )\n                          nil\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  nil\n                  None\n                )\n                (For\n                  (Name &j:2 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list (Constant i0 None) (BinOp (Name &m:2 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                  (/seq\n                    (If\n                      (Subscript (Name &used:2 Load) (Name &j:2 Load) Load)\n                      (/seq\n                        (AugAssign\n                          (Subscript (Name &u:2 Load) (Subscript (Name &p:2 Load) (Name &j:2 Load) Load) Store)\n                          Add\n                          (Name &delta:2 Load)\n                        )\n                        (AugAssign (Subscript (Name &v:2 Load) (Name &j:2 Load) Store) Sub (Name &delta:2 Load))\n                      )\n                      (/seq (AugAssign (Subscript (Name &minv:2 Load) (Name &j:2 Load) Store) Sub (Name &delta:2 Load)))\n                    )\n                  )\n                  nil\n                  None\n                )\n                (Assign (list (Name &j0:2 Store)) (Name &j1:2 Load) None)\n                (Assign\n                  (list (Name &condition:2 Store))\n                  (Compare (Subscript (Name &p:2 Load) (Name &j0:2 Load) Load) (list NotEq) (list (Constant i0 None)))\n                  None\n                )\n              )\n              nil\n            )\n            (Assign (list (Name &condition:2 Store)) (Constant True None) None)\n            (While\n              (Name &condition:2 Load)\n              (/seq\n                (Assign (list (Name &j1:2 Store)) (Subscript (Name &way:2 Load) (Name &j0:2 Load) Load) None)\n                (Assign\n                  (list (Subscript (Name &p:2 Load) (Name &j0:2 Load) Store))\n                  (Subscript (Name &p:2 Load) (Name &j1:2 Load) Load)\n                  None\n                )\n                (Assign (list (Name &j0:2 Store)) (Name &j1:2 Load) None)\n                (Assign\n                  (list (Name &condition:2 Store))\n                  (Compare (Name &j0:2 Load) (list NotEq) (list (Constant i0 None)))\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list (Name &ans:2 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:2 Load) Add (Constant i1 None)))\n          None\n        )\n        (For\n          (Name &j:2 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &m:2 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &ans:2 Load) (Subscript (Name &p:2 Load) (Name &j:2 Load) Load) Store))\n              (Name &j:2 Load)\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return\n          (Tuple (list (UnaryOp USub (Subscript (Name &v:2 Load) (Constant i0 None) Load)) (Name &ans:2 Load)) Load)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments\n        nil\n        (list (arg &n:3 None None) (arg &k:3 None None) (arg &a:3 None None) (arg &b:3 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &A:3 Store))\n          (ListComp\n            (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None)))\n            (list\n              (comprehension\n                (Name &_:5 Store)\n                (Call (Name g_range Load) (list (BinOp (Name &n:3 Load) Add (Constant i1 None))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Name &i:3 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:3 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (For\n              (Name &j:3 Store)\n              (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &k:3 Load) Add (Constant i1 None))) nil)\n              (/seq\n                (Assign\n                  (list (Subscript (Subscript (Name &A:3 Load) (Name &i:3 Load) Load) (Name &j:3 Load) Store))\n                  (BinOp\n                    (Subscript (Name &a:3 Load) (Name &i:3 Load) Load)\n                    Add\n                    (BinOp\n                      (BinOp (Name &j:3 Load) Sub (Constant i1 None))\n                      Mult\n                      (Subscript (Name &b:3 Load) (Name &i:3 Load) Load)\n                    )\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (For\n              (Name &j:3 Store)\n              (Call\n                (Name g_range Load)\n                (list (BinOp (Name &k:3 Load) Add (Constant i1 None)) (BinOp (Name &n:3 Load) Add (Constant i1 None)))\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Subscript (Name &A:3 Load) (Name &i:3 Load) Load) (Name &j:3 Load) Store))\n                  (BinOp\n                    (BinOp (Name &k:3 Load) Sub (Constant i1 None))\n                    Mult\n                    (Subscript (Name &b:3 Load) (Name &i:3 Load) Load)\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Tuple (list (Name &i:3 Store) (Name &row:3 Store)) Store)\n          (Call (Name g_enumerate Load) (list (Name &A:3 Load)) nil)\n          (/seq\n            (Assign (list (Name &M:3 Store)) (Call (Name g_max Load) (list (Name &row:3 Load)) nil) None)\n            (For\n              (Name &j:3 Store)\n              (Call (Name g_range Load) (list (BinOp (Name &n:3 Load) Add (Constant i1 None))) nil)\n              (/seq\n                (Assign\n                  (list (Subscript (Subscript (Name &A:3 Load) (Name &i:3 Load) Load) (Name &j:3 Load) Store))\n                  (BinOp\n                    (Name &M:3 Load)\n                    Sub\n                    (Subscript (Subscript (Name &A:3 Load) (Name &i:3 Load) Load) (Name &j:3 Load) Load)\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list (Tuple (list (Name &cost:3 Store) (Name &match:3 Store)) Store))\n          (Call (Name &solve_hungarian:0 Load) (list (Name &A:3 Load) (Name &n:3 Load) (Name &n:3 Load)) nil)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (BinOp (Name &n:3 Load) Add (BinOp (Name &n:3 Load) Sub (Name &k:3 Load))))\n            nil\n          )\n        )\n        (Assign\n          (list (Name &role_to_creature:3 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_zip Load)\n                (list\n                  (Name &match:3 Load)\n                  (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &match:3 Load)) nil)) nil)\n                )\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &role_to_creature:3 Load) s_sort Load) nil nil))\n        (Assign (list (Name &res:3 Store)) (List nil Load) None)\n        (For\n          (Name &index:3 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (Name &k:3 Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &res:3 Load) s_append Load)\n                (list\n                  (Subscript\n                    (Subscript (Name &role_to_creature:3 Load) (Name &index:3 Load) Load)\n                    (Constant i1 None)\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &index:3 Store)\n          (Call\n            (Name g_range Load)\n            (list (BinOp (Name &k:3 Load) Add (Constant i1 None)) (BinOp (Name &n:3 Load) Add (Constant i1 None)))\n            nil\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &res:3 Load) s_append Load)\n                (list\n                  (Subscript\n                    (Subscript (Name &role_to_creature:3 Load) (Name &index:3 Load) Load)\n                    (Constant i1 None)\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Attribute (Name &res:3 Load) s_append Load)\n                (list\n                  (UnaryOp\n                    USub\n                    (Subscript\n                      (Subscript (Name &role_to_creature:3 Load) (Name &index:3 Load) Load)\n                      (Constant i1 None)\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &res:3 Load) s_append Load)\n            (list (Subscript (Subscript (Name &role_to_creature:3 Load) (Name &k:3 Load) Load) (Constant i1 None) Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                (list (Call (Name g_map Load) (list (Name g_str Load) (Name &res:3 Load)) nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &from_file:0\n      (arguments nil (list (arg &f:4 None None)) None nil nil None nil)\n      (/seq (Return (Attribute (Name &f:4 Load) s_readline Load)))\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Call (Name &inp:0 Load) nil nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign (list (Tuple (list (Name &n:0 Store) (Name &k:0 Store)) Store)) (Call (Name &invr:0 Load) nil nil) None)\n        (Assign (list (Name &a:0 Store)) (List (list (Constant i0 None)) Load) None)\n        (Assign (list (Name &b:0 Store)) (List (list (Constant i0 None)) Load) None)\n        (For\n          (Name &_:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &ai:0 Store) (Name &bi:0 Store)) Store))\n              (Call (Name &invr:0 Load) nil nil)\n              None\n            )\n            (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (Name &ai:0 Load)) nil))\n            (Expr (Call (Attribute (Name &b:0 Load) s_append Load) (list (Name &bi:0 Load)) nil))\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call (Name &solve:0 Load) (list (Name &n:0 Load) (Name &k:0 Load) (Name &a:0 Load) (Name &b:0 Load)) nil)\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &readline:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &read:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_read Load) None)\n    (Assign\n      (list (Name &ns:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call (Attribute (Call (Name &readline:0 Load) nil nil) s_rstrip Load) nil nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &ni:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_int Load)\n          (list (Call (Attribute (Call (Name &readline:0 Load) nil nil) s_rstrip Load) nil nil))\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &nm:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list (Name g_int Load) (Call (Attribute (Call (Name &readline:0 Load) nil nil) s_split Load) nil nil))\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &nl:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_list Load)\n          (list\n            (Call\n              (Name g_map Load)\n              (list (Name g_int Load) (Call (Attribute (Call (Name &readline:0 Load) nil nil) s_split Load) nil nil))\n              nil\n            )\n          )\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &prn:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n        (Call\n          (Name g_print Load)\n          (list (Starred (Name &x:2 Load) Load))\n          (list (keyword s_sep (Constant s-WzEwXQ== None)))\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Tuple (list (Name &n:1 Store) (Name &k:1 Store)) Store)) (Call (Name &nm:0 Load) nil nil) None)\n        (Assign\n          (list (Name &mini:1 Store))\n          (ListComp\n            (Call\n              (Name g_tuple Load)\n              (list\n                (BinOp\n                  (Call (Name &nl:0 Load) nil nil)\n                  Add\n                  (List (list (BinOp (Name &i:3 Load) Add (Constant i1 None))) Load)\n                )\n              )\n              nil\n            )\n            (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (Name &n:1 Load)) nil) nil i0))\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &mini:1 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:5 None None)) None nil nil None nil)\n                  (Subscript (Name &x:5 Load) (Constant i1 None) Load)\n                )\n              )\n            )\n          )\n        )\n        (Assign\n          (list (Name &dp:1 Store))\n          (BinOp\n            (List (list (UnaryOp USub (Constant i1 None))) Load)\n            Mult\n            (BinOp (Name &k:1 Load) Add (Constant i1 None))\n          )\n          None\n        )\n        (Assign (list (Subscript (Name &dp:1 Load) (Constant i0 None) Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &f:1 Store))\n          (ListComp\n            (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &k:1 Load) Add (Constant i1 None)))\n            (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (Name &n:1 Load)) nil) nil i0))\n          )\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Name &n:1 Load)) nil)\n          (/seq\n            (If\n              (Compare (Subscript (Name &dp:1 Load) (Name &k:1 Load) Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Subscript (Name &dp:1 Load) (Name &k:1 Load) Store)\n                  Add\n                  (BinOp\n                    (BinOp (Name &k:1 Load) Sub (Constant i1 None))\n                    Mult\n                    (Subscript (Subscript (Name &mini:1 Load) (Name &i:1 Load) Load) (Constant i1 None) Load)\n                  )\n                )\n              )\n              nil\n            )\n            (For\n              (Name &j:1 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (BinOp (Name &k:1 Load) Sub (Constant i1 None))\n                  (UnaryOp USub (Constant i1 None))\n                  (UnaryOp USub (Constant i1 None))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare (Subscript (Name &dp:1 Load) (Name &j:1 Load) Load) (list GtE) (list (Constant i0 None)))\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &dp:1 Load) (BinOp (Name &j:1 Load) Add (Constant i1 None)) Load)\n                        (list Lt)\n                        (list\n                          (BinOp\n                            (BinOp\n                              (Subscript (Name &dp:1 Load) (Name &j:1 Load) Load)\n                              Add\n                              (Subscript (Subscript (Name &mini:1 Load) (Name &i:1 Load) Load) (Constant i0 None) Load)\n                            )\n                            Add\n                            (BinOp\n                              (Name &j:1 Load)\n                              Mult\n                              (Subscript (Subscript (Name &mini:1 Load) (Name &i:1 Load) Load) (Constant i1 None) Load)\n                            )\n                          )\n                        )\n                      )\n                      (/seq\n                        (Assign\n                          (list (Subscript (Name &dp:1 Load) (BinOp (Name &j:1 Load) Add (Constant i1 None)) Store))\n                          (BinOp\n                            (BinOp\n                              (Subscript (Name &dp:1 Load) (Name &j:1 Load) Load)\n                              Add\n                              (Subscript (Subscript (Name &mini:1 Load) (Name &i:1 Load) Load) (Constant i0 None) Load)\n                            )\n                            Add\n                            (BinOp\n                              (Name &j:1 Load)\n                              Mult\n                              (Subscript (Subscript (Name &mini:1 Load) (Name &i:1 Load) Load) (Constant i1 None) Load)\n                            )\n                          )\n                          None\n                        )\n                        (Assign\n                          (list\n                            (Subscript\n                              (Subscript (Name &f:1 Load) (Name &i:1 Load) Load)\n                              (BinOp (Name &j:1 Load) Add (Constant i1 None))\n                              Store\n                            )\n                          )\n                          (Constant i1 None)\n                          None\n                        )\n                      )\n                      nil\n                    )\n                    (AugAssign\n                      (Subscript (Name &dp:1 Load) (Name &j:1 Load) Store)\n                      Add\n                      (BinOp\n                        (BinOp (Name &k:1 Load) Sub (Constant i1 None))\n                        Mult\n                        (Subscript (Subscript (Name &mini:1 Load) (Name &i:1 Load) Load) (Constant i1 None) Load)\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &cx:1 Store)) (Name &k:1 Load) None)\n        (Assign (list (Name &a:1 Store)) (Call (Name g_list Load) nil nil) None)\n        (Assign (list (Name &b:1 Store)) (Call (Name g_list Load) nil nil) None)\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (BinOp (Name &n:1 Load) Sub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Subscript (Subscript (Name &f:1 Load) (Name &i:1 Load) Load) (Name &cx:1 Load) Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &a:1 Load) s_append Load)\n                    (list (Subscript (Subscript (Name &mini:1 Load) (Name &i:1 Load) Load) (Constant i2 None) Load))\n                    nil\n                  )\n                )\n                (AugAssign (Name &cx:1 Store) Sub (Constant i1 None))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &b:1 Load) s_append Load)\n                    (list (Subscript (Subscript (Name &mini:1 Load) (Name &i:1 Load) Load) (Constant i2 None) Load))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &com:1 Store)) (Call (Name g_list Load) nil nil) None)\n        (For\n          (Name &x:1 Store)\n          (Subscript (Name &a:1 Load) (Slice None (Constant i0 None) (UnaryOp USub (Constant i1 None))) Load)\n          (/seq (Expr (Call (Attribute (Name &com:1 Load) s_append Load) (list (Name &x:1 Load)) nil)))\n          nil\n          None\n        )\n        (For\n          (Name &x:1 Store)\n          (Name &b:1 Load)\n          (/seq\n            (Expr (Call (Attribute (Name &com:1 Load) s_append Load) (list (Name &x:1 Load)) nil))\n            (Expr (Call (Attribute (Name &com:1 Load) s_append Load) (list (UnaryOp USub (Name &x:1 Load))) nil))\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &com:1 Load) s_append Load)\n            (list (Subscript (Name &a:1 Load) (Constant i0 None) Load))\n            nil\n          )\n        )\n        (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &com:1 Load)) nil)) nil))\n        (Expr (Call (Name g_print Load) (list (Starred (Name &com:1 Load) Load)) nil))\n        (Return None)\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &T:0 Store)) (Call (Name &ni:0 Load) nil nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &T:0 Load)) nil)\n      (/seq (Expr (Call (Name &solve:0 Load) nil nil)))\n      nil\n      None\n    )\n  )\n  nil\n)"]