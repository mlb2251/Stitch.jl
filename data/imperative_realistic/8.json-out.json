[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                0,
                0,
                "(Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)",
                "E",
                [],
                []
            ],
            [
                0,
                2,
                "(Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name %2 Load) Mult (Name %1 Load)) Div (Constant i100 None))) nil)",
                "E",
                [],
                [
                    "X",
                    "X"
                ]
            ],
            [
                0,
                0,
                "(Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))",
                "S",
                [],
                []
            ]
        ],
        "programs": [
            "(Module (/seq (Assign (list (Tuple (list (Name &num:0 Store) (Name &wiz:0 Store) (Name &per:0 Store)) Store)) (fn_1) None) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (BinOp (Name &k:0 Load) Add (Name &wiz:0 Load)) Div (Name &num:0 Load)) Mult (Constant i100 None)) (list Lt) (list (Name &per:0 Load))) (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &k:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (AugAssign (Name &y:0 Store) Div (Constant i100 None)) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (If (Compare (BinOp (BinOp (Name &x:0 Load) Add (Name &c:0 Load)) Div (Name &n:0 Load)) (list GtE) (list (Name &y:0 Load))) (/seq Break) nil) (AugAssign (Name &c:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &z:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &z:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &z:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Assign (list (Name &z:0 Store)) (Name g_input Load) None) (Assign (list (Name &mod:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (ImportFrom s_collections (list (alias &*:0 None)) i0) (ImportFrom s_queue (list (alias &*:0 None)) i0) (ImportFrom s_sys (list (alias &*:0 None)) i0) (ImportFrom s_collections (list (alias &*:0 None)) i0) (ImportFrom s_math (list (alias &*:0 None)) i0) (ImportFrom s_heapq (list (alias &*:0 None)) i0) (ImportFrom s_itertools (list (alias &*:0 None)) i0) (ImportFrom s_bisect (list (alias &*:0 None)) i0) (ImportFrom s_collections (list (alias s_Counter &cc:0)) i0) (ImportFrom s_math (list (alias s_factorial &f:0)) i0) (FunctionDef &lcd:0 (arguments nil (list (arg &xnum1:1 None None) (arg &xnum2:1 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &xnum1:1 Load) Mult (Name &xnum2:1 Load)) FloorDiv (Call (Name g_gcd Load) (list (Name &xnum1:1 Load) (Name &xnum2:1 Load)) nil)))) nil None None) (Expr (Constant s-WzEwLCAxMCwgMTEwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDIsIDExMSwgMTE0LCAzMiwgOTUsIDMyLCAxMDUsIDExMCwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDEsIDQwLCAxMDUsIDExMCwgMTE2LCA0MCwgMTIyLCA0MCwgNDEsIDQxLCA0MSwgNTgsIDEwLCAxMCwgMTIwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDYxLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQwLCAxMDksIDk3LCAxMTIsIDQwLCAxMDUsIDExMCwgMTE2LCA0NCwgMTIyLCA0MCwgNDEsIDQ2LCAxMTUsIDExMiwgMTA4LCAxMDUsIDExNiwgNDAsIDQxLCA0MSwgNDEsIDEwLCAxMCwgMTEwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDYxLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0MCwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCA0MSwgOTEsIDU4LCA1OCwgNDUsIDQ5LCA5MywgMTAsIDEwLCA5NywgNDQsIDk4LCA2MSwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDEwLCAxMCwgMTA4LCA2MSwgMTE1LCAxMDEsIDExNiwgNDAsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMjIsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDEwMSwgMTAwLCA2MSwgNDAsIDU0LCA0NCwgNTAsIDQ0LCA1MywgNDQsIDUzLCA0NCwgNTIsIDQ0LCA1MywgNDQsIDU0LCA0NCwgNTEsIDQ0LCA1NSwgNDQsIDU0LCA0MSwgMTAsIDEwLCAxMTgsIDExMSwgMTE5LCAxMDEsIDEwOCwgNjEsIDEyMywgMzksIDk3LCAzOSwgNTgsIDQ4LCA0NCwgMzksIDEwMSwgMzksIDU4LCA0OCwgNDQsIDM5LCAxMDUsIDM5LCA1OCwgNDgsIDQ0LCAzOSwgMTExLCAzOSwgNTgsIDQ4LCA0NCwgMzksIDExNywgMzksIDU4LCA0OCwgMTI1LCAxMCwgMTAsIDk5LCAxMTEsIDEwOCwgMTExLCAxMTQsIDQ1LCA1MiwgNjEsIDkxLCAzNCwgNzEsIDM0LCA0NCwgMzIsIDM0LCA3MSwgNjYsIDM0LCA0NCwgMzIsIDM0LCA4OSwgNzEsIDY2LCAzNCwgNDQsIDMyLCAzNCwgODksIDcxLCA2NiwgNzMsIDM0LCA0NCwgMzIsIDM0LCA3OSwgODksIDcxLCA2NiwgNzMsIDM0LCAzMiwgNDQsIDM0LCA3OSwgODksIDcxLCA2NiwgNzMsIDg2LCAzNCwgNDQsIDM5LCA4MiwgNzksIDg5LCA3MSwgNjYsIDczLCA4NiwgMzksIDMyLCA5MywgMTAsIDEwXQ== None)) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Constant i1 None)) nil) (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &w:0 Store)) (Name &x:0 Load) None) (Assign (list (Name &m:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &x:0 Load)) None) (Assign (list (Name &t:0 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &t:0 Load) Sub (Name &x:0 Load))) nil)) nil))) nil None)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &percentage:0 Store)) (fn_2 &n:0 &y:0) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &percentage:0 Load) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Expr (Constant s-WzEwLCAzMiwgMTAsIDExMCwgNjEsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMjIsIDQwLCA0MSwgNDEsIDEwLCAzMiwgMTAsIDEwMiwgMTExLCAxMTQsIDMyLCA5NSwgMzIsIDEwNSwgMTEwLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgNDAsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMjIsIDQwLCA0MSwgNDEsIDQxLCA1OCwgMTAsIDMyLCAxMCwgMTIwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDMyLCAxMCwgMTA4LCA2MSwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMTAsIDYxLCAxMDUsIDExMCwgMTE2LCA0MCwgMTIyLCA0MCwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDYxLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0MCwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCA0MSwgOTEsIDU4LCA1OCwgNDUsIDQ5LCA5MywgMTAsIDMyLCAxMCwgOTcsIDQ0LCA5OCwgNjEsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMjIsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDYxLCAxMTUsIDEwMSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDEwMSwgMTAwLCA2MSwgNDAsIDU0LCA0NCwgNTAsIDQ0LCA1MywgNDQsIDUzLCA0NCwgNTIsIDQ0LCA1MywgNDQsIDU0LCA0NCwgNTEsIDQ0LCA1NSwgNDQsIDU0LCA0MSwgMTAsIDMyLCAxMCwgMTE4LCAxMTEsIDExOSwgMTAxLCAxMDgsIDYxLCAxMjMsIDM5LCA5NywgMzksIDU4LCA0OCwgNDQsIDM5LCAxMDEsIDM5LCA1OCwgNDgsIDQ0LCAzOSwgMTA1LCAzOSwgNTgsIDQ4LCA0NCwgMzksIDExMSwgMzksIDU4LCA0OCwgNDQsIDM5LCAxMTcsIDM5LCA1OCwgNDgsIDEyNSwgMTAsIDMyLCAxMCwgOTksIDExMSwgMTA4LCAxMTEsIDExNCwgNTIsIDYxLCA5MSwgMzQsIDcxLCAzNCwgNDQsIDMyLCAzNCwgNzEsIDY2LCAzNCwgNDQsIDMyLCAzNCwgODksIDcxLCA2NiwgMzQsIDQ0LCAzMiwgMzQsIDg5LCA3MSwgNjYsIDczLCAzNCwgNDQsIDMyLCAzNCwgNzksIDg5LCA3MSwgNjYsIDczLCAzNCwgMzIsIDQ0LCAzNCwgNzksIDg5LCA3MSwgNjYsIDczLCA4NiwgMzQsIDQ0LCAzOSwgODIsIDc5LCA4OSwgNzEsIDY2LCA3MywgODYsIDM5LCAzMiwgOTMsIDEwLCAzMiwgMTBd None)) (Import (list (alias &os:0 None))) (Import (list (alias &sys:0 None))) (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None) (FunctionDef &inp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))) nil None None) (FunctionDef &inlt:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (FunctionDef &insr:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &s:3 Store)) (Call (Name &input:0 Load) nil nil) None) (Return (Call (Name g_list Load) (list (Subscript (Name &s:3 Load) (Slice None (BinOp (Call (Name g_len Load) (list (Name &s:3 Load)) nil) Sub (Constant i1 None)) None) Load)) nil))) nil None None) (FunctionDef &invr:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (ImportFrom s_math (list (alias &ceil:0 None)) i0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Try (/seq (Assign (list (Tuple (list (Name &n:4 Store) (Name &x:4 Store) (Name &y:4 Store)) Store)) (Call (Name &invr:0 Load) nil nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Call (Name &ceil:0 Load) (list (BinOp (BinOp (Name &y:4 Load) Mult (Name &n:4 Load)) Div (Constant i100 None))) nil) Sub (Name &x:4 Load))) nil)) nil))) (list (ExceptHandler (Name g_Exception Load) &e:4 (/seq (Expr (Call (Name g_print Load) (list (Name &e:4 Load)) nil))))) nil nil)) nil None None) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name &IOBase:0 Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:5 None None) (arg &file:5 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:5 Load) s__fd Store)) (Call (Attribute (Name &file:5 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:5 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None) (Assign (list (Attribute (Name &self:5 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:5 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:5 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:5 Load) s_write Store)) (IfExp (Attribute (Name &self:5 Load) s_writable Load) (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:6 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:6 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (Attribute (Name &self:6 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (Attribute (Name &self:6 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:6 Load)) (/seq Break) nil) (Assign (list (Name &ptr:6 Store)) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load) (list (Name &b:6 Load)) nil) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (Name &ptr:6 Load)) nil)) Load))) nil) (Assign (list (Attribute (Name &self:6 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:7 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:7 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (Attribute (Name &self:7 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (Attribute (Name &self:7 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:7 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:7 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:7 Load))) None) (Assign (list (Name &ptr:7 Store)) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load) (list (Name &b:7 Load)) nil) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load) (list (Name &ptr:7 Load)) nil)) Load))) nil) (AugAssign (Attribute (Name &self:7 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:8 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:8 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name &os:0 Load) s_write Load) (list (Attribute (Name &self:8 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name &IOBase:0 Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:9 None None) (arg &file:9 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:9 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:9 Load)) nil) None) (Assign (list (Attribute (Name &self:9 Load) s_flush Store)) (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:9 Load) s_writable Store)) (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:9 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:10 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:10 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:9 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:9 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil)) None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &d:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (If (Compare (Call (Name g_int Load) (list (Name &d:0 Load)) nil) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_int Load) (list (Name &d:0 Load)) nil) Sub (Name &x:0 Load))) nil))) (/seq (If (Compare (Call (Name g_int Load) (list (Name &d:0 Load)) nil) (list LtE) (list (Name &x:0 Load))) (/seq (fn_3)) nil)))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil)) nil) None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (BinOp (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load)) (list Gt) (list (Constant i0 None))) (BinOp (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load)) (Constant i0 None))) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (BinOp (fn_2 &y:0 &n:0) Sub (Name &x:0 Load)) (Constant i0 None)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None)) Sub (Name &b:0 Load))) nil) (list Gt) (list (Constant i0 None))) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None)) Sub (Name &b:0 Load))) nil) (Constant i0 None))) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &wizard_needed:0 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &wizard_needed:0 Load) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Name &n:0 Load)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Name &x:0 Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Name &y:0 Load)) nil) None) (Assign (list (Name &nx:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &x:0 Load)) None) (Assign (list (Name &pp:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (BinOp (Name &x:0 Load) Add (Name &pp:0 Load)) Div (Name &n:0 Load)) Mult (Constant i100 None)) (list Lt) (list (Name &y:0 Load))) (/seq (AugAssign (Name &pp:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &pp:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &my_file:0 Store)) (Attribute (Name g_sys Load) s_stdin Load) None) (Assign (list (Name &line:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:1 Load)) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Attribute (Name &my_file:0 Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Tuple (list (Subscript (Name &line:0 Load) (Constant i0 None) Load) (Subscript (Name &line:0 Load) (Constant i1 None) Load) (Subscript (Name &line:0 Load) (Constant i2 None) Load)) Load) None) (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (Assign (list (Name &need:0 Store)) (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) None) (While (Compare (Name &x:0 Load) (list Lt) (list (Name &need:0 Load))) (/seq (AugAssign (Name &x:0 Store) Add (Constant i1 None)) (AugAssign (Name &res:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &my_file:0 Store)) (Attribute (Name g_sys Load) s_stdin Load) None) (Assign (list (Name &line:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:1 Load)) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Attribute (Name &my_file:0 Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Tuple (list (Subscript (Name &line:0 Load) (Constant i0 None) Load) (Subscript (Name &line:0 Load) (Constant i1 None) Load) (Subscript (Name &line:0 Load) (Constant i2 None) Load)) Load) None) (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (While (Compare (Name &x:0 Load) (list Lt) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))) (/seq (AugAssign (Name &x:0 Store) Add (Constant i1 None)) (AugAssign (Name &res:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &x:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (BinOp (Call (Name g_int Load) (list (Subscript (Name &x:0 Load) (Constant i2 None) Load)) nil) Mult (Call (Name g_int Load) (list (Subscript (Name &x:0 Load) (Constant i0 None) Load)) nil)) Div (Constant i100 None)) Sub (Call (Name g_int Load) (list (Subscript (Name &x:0 Load) (Constant i1 None) Load)) nil))) nil) None) (If (Compare (Name &y:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &y:0 Load)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &y:0 Store)) (BinOp (Name &y:0 Load) Div (Constant i100 None)) None) (Assign (list (Name &z:0 Store)) (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (Name &n:0 Load) Mult (Name &y:0 Load))) nil) Sub (Name &x:0 Load)) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (Name &z:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (Constant i0 None) (Call (Name g_ceil Load) (list (BinOp (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant f100.0 None)) Sub (Name &x:0 Load))) nil)) nil) None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Assign (list (Name &temp:0 Store)) (BinOp (Name &a:0 Load) Mult (BinOp (Name &c:0 Load) Div (Constant i100 None))) None) (If (Compare (BinOp (Name &temp:0 Load) Sub (Call (Name g_int Load) (list (Name &temp:0 Load)) nil)) (list Gt) (list (Constant f0.0 None))) (/seq (Assign (list (Name &temp:0 Store)) (Call (Name g_int Load) (list (BinOp (Name &temp:0 Load) Add (Constant i1 None))) nil) None)) (/seq (Assign (list (Name &temp:0 Store)) (Call (Name g_int Load) (list (Name &temp:0 Load)) nil) None))) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &temp:0 Load) Sub (Name &b:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (If (Compare (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) (list Gt) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) FloorDiv (Constant i100 None)))) (/seq (Assign (list (Name &reqad:0 Store)) (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) FloorDiv (Constant i100 None)) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &reqad:0 Store)) (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) FloorDiv (Constant i100 None)) None))) (Assign (list (Name &ans:0 Store)) (BinOp (Name &reqad:0 Load) Sub (Name &x:0 Load)) None) (If (Compare (Name &ans:0 Load) (list Lt) (list (Constant i0 None))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &xx:0 Store)) (Call (Name g_max Load) (list (Constant i0 None) (BinOp (fn_2 &y:0 &n:0) Sub (Name &x:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (Name &xx:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (ImportFrom s_bisect (list (alias g_bisect_left None) (alias g_bisect None) (alias g_bisect_right None)) i0) (ImportFrom s_itertools (list (alias g_accumulate None)) i0) (FunctionDef &index:0 (arguments nil (list (arg &a:1 None None) (arg &x:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-Wzc2LCAxMTEsIDk5LCA5NywgMTE2LCAxMDEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA4LCAxMDEsIDEwMiwgMTE2LCAxMDksIDExMSwgMTE1LCAxMTYsIDMyLCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCAzMiwgMTAxLCAxMjAsIDk3LCA5OSwgMTE2LCAxMDgsIDEyMSwgMzIsIDEwMSwgMTEzLCAxMTcsIDk3LCAxMDgsIDMyLCAxMTYsIDExMSwgMzIsIDEyMF0= None)) (Assign (list (Name &i:1 Store)) (Call (Name g_bisect_left Load) (list (Name &a:1 Load) (Name &x:1 Load)) nil) None) (If (BoolOp And (list (Compare (Name &i:1 Load) (list NotEq) (list (Call (Name g_len Load) (list (Name &a:1 Load)) nil))) (Compare (Subscript (Name &a:1 Load) (Name &i:1 Load) Load) (list Eq) (list (Name &x:1 Load))))) (/seq (Return (Name &i:1 Load))) nil) (Raise (Name g_ValueError Load) None)) nil None None) (FunctionDef &find_lt:0 (arguments nil (list (arg &a:2 None None) (arg &x:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzcwLCAxMDUsIDExMCwgMTAwLCAzMiwgMTE0LCAxMDUsIDEwMywgMTA0LCAxMTYsIDEwOSwgMTExLCAxMTUsIDExNiwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDMyLCAxMDgsIDEwMSwgMTE1LCAxMTUsIDMyLCAxMTYsIDEwNCwgOTcsIDExMCwgMzIsIDEyMF0= None)) (Assign (list (Name &i:2 Store)) (Call (Name g_bisect_left Load) (list (Name &a:2 Load) (Name &x:2 Load)) nil) None) (If (Name &i:2 Load) (/seq (Return (Subscript (Name &a:2 Load) (BinOp (Name &i:2 Load) Sub (Constant i1 None)) Load))) nil) (Raise (Name g_ValueError Load) None)) nil None None) (FunctionDef &find_le:0 (arguments nil (list (arg &a:3 None None) (arg &x:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzcwLCAxMDUsIDExMCwgMTAwLCAzMiwgMTE0LCAxMDUsIDEwMywgMTA0LCAxMTYsIDEwOSwgMTExLCAxMTUsIDExNiwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDMyLCAxMDgsIDEwMSwgMTE1LCAxMTUsIDMyLCAxMTYsIDEwNCwgOTcsIDExMCwgMzIsIDExMSwgMTE0LCAzMiwgMTAxLCAxMTMsIDExNywgOTcsIDEwOCwgMzIsIDExNiwgMTExLCAzMiwgMTIwXQ== None)) (Assign (list (Name &i:3 Store)) (Call (Name g_bisect_right Load) (list (Name &a:3 Load) (Name &x:3 Load)) nil) None) (If (Name &i:3 Load) (/seq (Return (Subscript (Name &a:3 Load) (BinOp (Name &i:3 Load) Sub (Constant i1 None)) Load))) nil) (Raise (Name g_ValueError Load) None)) nil None None) (FunctionDef &find_gt:0 (arguments nil (list (arg &a:4 None None) (arg &x:4 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzcwLCAxMDUsIDExMCwgMTAwLCAzMiwgMTA4LCAxMDEsIDEwMiwgMTE2LCAxMDksIDExMSwgMTE1LCAxMTYsIDMyLCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCAzMiwgMTAzLCAxMTQsIDEwMSwgOTcsIDExNiwgMTAxLCAxMTQsIDMyLCAxMTYsIDEwNCwgOTcsIDExMCwgMzIsIDEyMF0= None)) (Assign (list (Name &i:4 Store)) (Call (Name g_bisect_right Load) (list (Name &a:4 Load) (Name &x:4 Load)) nil) None) (If (Compare (Name &i:4 Load) (list NotEq) (list (Call (Name g_len Load) (list (Name &a:4 Load)) nil))) (/seq (Return (Subscript (Name &a:4 Load) (Name &i:4 Load) Load))) nil) (Raise (Name g_ValueError Load) None)) nil None None) (FunctionDef &find_ge:0 (arguments nil (list (arg &a:5 None None) (arg &x:5 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzcwLCAxMDUsIDExMCwgMTAwLCAzMiwgMTA4LCAxMDEsIDEwMiwgMTE2LCAxMDksIDExMSwgMTE1LCAxMTYsIDMyLCAxMDUsIDExNiwgMTAxLCAxMDksIDMyLCAxMDMsIDExNCwgMTAxLCA5NywgMTE2LCAxMDEsIDExNCwgMzIsIDExNiwgMTA0LCA5NywgMTEwLCAzMiwgMTExLCAxMTQsIDMyLCAxMDEsIDExMywgMTE3LCA5NywgMTA4LCAzMiwgMTE2LCAxMTEsIDMyLCAxMjBd None)) (Assign (list (Name &i:5 Store)) (Call (Name g_bisect_left Load) (list (Name &a:5 Load) (Name &x:5 Load)) nil) None) (If (Compare (Name &i:5 Load) (list NotEq) (list (Call (Name g_len Load) (list (Name &a:5 Load)) nil))) (/seq (Return (Subscript (Name &a:5 Load) (Name &i:5 Load) Load))) nil) (Raise (Name g_ValueError Load) None)) nil None None) (Assign (list (Name &st:0 Store)) (Constant s_ None) None) (FunctionDef &func:0 (arguments nil (list (arg &n:6 None None) (arg &x:6 None None) (arg &y:6 None None)) None nil nil None nil) (/seq (Return (Call (Name g_max Load) (list (Constant i0 None) (BinOp (fn_2 &n:6 &y:6) Sub (Name &x:6 Load))) nil))) nil None None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Constant i1 None)) nil) (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &a:0 Store) (Name &b:0 Store)) Store)) (fn_1) None) (AugAssign (Name &st:0 Store) Add (BinOp (Call (Name g_str Load) (list (Call (Name g_int Load) (list (Call (Name &func:0 Load) (list (Name &n:0 Load) (Name &a:0 Load) (Name &b:0 Load)) nil)) nil)) nil) Add (Constant s-WzEwXQ== None)))) nil None) (Expr (Call (Name g_print Load) (list (Name &st:0 Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_* None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &z:0 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Call (Name g_int Load) (list (Name &y:0 Load)) nil) Div (Constant i100 None)) Mult (Call (Name g_int Load) (list (Name &n:0 Load)) nil))) nil) None) (If (Compare (Name &z:0 Load) (list Gt) (list (Call (Name g_int Load) (list (Name &x:0 Load)) nil))) (/seq (Assign (list (Name &s:0 Store)) (BinOp (Name &z:0 Load) Sub (Call (Name g_int Load) (list (Name &x:0 Load)) nil)) None)) (/seq (Assign (list (Name &s:0 Store)) (Constant i0 None) None))) (Expr (Call (Name g_print Load) (list (Name &s:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Name &l:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &l:0 Store)) (Call (Attribute (Name &l:0 Load) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &l:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &l:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &l:0 Load) (Constant i2 None) Load)) nil) None) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (Name &x:0 Load) Div (Name &n:0 Load)) Mult (Constant i100 None)) (list Lt) (list (Name &y:0 Load))) (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None)) (AugAssign (Name &x:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &s:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Attribute (Call (Name g_str Load) (list (Call (Name g_input Load) nil nil)) nil) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Name &n:0 Load)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Name &x:0 Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Name &y:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Call (Name g_int Load) (list (fn_2 &y:0 &n:0)) nil) Sub (Name &x:0 Load))) nil)) nil))) nil)) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (If (BoolOp And (list (Compare (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Mod (Constant i100 None)) (list Eq) (list (Constant i0 None))) (Compare (Call (Name g_int Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) (list LtE) (list (Name &x:0 Load))))) (/seq (fn_3)) (/seq (If (BoolOp And (list (Compare (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Mod (Constant i100 None)) (list NotEq) (list (Constant i0 None))) (Compare (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Add (Constant i1 None)) (list LtE) (list (Name &x:0 Load))))) (/seq (fn_3)) (/seq (If (Compare (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Mod (Constant i100 None)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Add (Constant i1 None)) Sub (Name &x:0 Load))) nil))))))))) nil)",
            "(Module (/seq (Assign (list (Name &inpu:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &inpu:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &inpu:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &inpu:0 Load) (Constant i2 None) Load)) nil) None) (Assign (list (Name &req:0 Store)) (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant f100.0 None)) None) (If (Compare (Name &req:0 Load) (list NotEq) (list (Call (Name g_int Load) (list (Name &req:0 Load)) nil))) (/seq (Assign (list (Name &req:0 Store)) (BinOp (Call (Name g_int Load) (list (Name &req:0 Load)) nil) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &req:0 Store)) (Call (Name g_int Load) (list (Name &req:0 Load)) nil) None))) (If (Compare (Name &req:0 Load) (list LtE) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &req:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (ImportFrom s_math (list (alias &ceil:0 None)) i0) (Assign (list (Name &r:0 Store)) (Call (Name &ceil:0 Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &r:0 Load) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &v:0 Store)) (fn_2 &n:0 &y:0) None) (Expr (IfExp (Compare (BinOp (Name &v:0 Load) Sub (Name &x:0 Load)) (list Gt) (list (Constant i0 None))) (Call (Name g_print Load) (list (BinOp (Name &v:0 Load) Sub (Name &x:0 Load))) nil) (Call (Name g_print Load) (list (Constant s_0 None)) nil)))) nil)",
            "(Module (/seq (Import (list (alias s_math g_m))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name g_m Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (Name &x:0 Load) (list LtE) (list (Name &a:0 Load))) (BinOp (Name &a:0 Load) Sub (Name &x:0 Load)) (Constant i0 None))) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &d:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (Name &n:0 Load) Mult (BinOp (Name &y:0 Load) Div (Constant i100 None)))) nil) None) (If (Compare (Name &d:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &d:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_* None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Tuple (list (Call (Name g_int Load) (list (Name &n:0 Load)) nil) (Call (Name g_int Load) (list (Name &x:0 Load)) nil) (Call (Name g_int Load) (list (Name &y:0 Load)) nil)) Load) None) (Assign (list (Name &z:0 Store)) (BinOp (Call (Name g_ceil Load) (list (BinOp (Name &n:0 Load) Mult (BinOp (Name &y:0 Load) Div (Constant i100 None)))) nil) Sub (Name &x:0 Load)) None) (If (Compare (Name &z:0 Load) (list Lt) (list (Constant i0 None))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (Name &z:0 Load)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:1 Load)) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &clone:0 Store)) (Constant i0 None) None) (Assign (list (Name &z:0 Store)) (Constant False None) None) (If (UnaryOp Not (Compare (BinOp (BinOp (Name &x:0 Load) Div (Name &n:0 Load)) Mult (Constant i100 None)) (list Lt) (list (Name &y:0 Load)))) (/seq (fn_3) (Assign (list (Name &z:0 Store)) (Constant True None) None)) nil) (While (Compare (BinOp (BinOp (Name &x:0 Load) Div (Name &n:0 Load)) Mult (Constant i100 None)) (list Lt) (list (Name &y:0 Load))) (/seq (AugAssign (Name &x:0 Store) Add (Constant i1 None)) (AugAssign (Name &clone:0 Store) Add (Constant i1 None))) nil) (If (UnaryOp Not (Name &z:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (Name &clone:0 Load)) nil))) nil)) nil)",
            "(Module (/seq (Assign (list (Name &ins:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Tuple (list (Call (Name g_int Load) (list (Subscript (Name &ins:0 Load) (Constant i0 None) Load)) nil) (Call (Name g_int Load) (list (Subscript (Name &ins:0 Load) (Constant i1 None) Load)) nil) (Call (Name g_int Load) (list (Subscript (Name &ins:0 Load) (Constant i2 None) Load)) nil)) Load) None) (Assign (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store)) Store)) (Tuple (list (Constant i0 None) (Constant i100000000000000 None)) Load) None) (While (Compare (Name &l:0 Load) (list Lt) (list (Name &r:0 Load))) (/seq (Assign (list (Name &c:0 Store)) (BinOp (BinOp (Name &l:0 Load) Add (Name &r:0 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (BinOp (BinOp (BinOp (Name &c:0 Load) Add (Name &x:0 Load)) Div (Name &n:0 Load)) Mult (Constant i100 None)) (list GtE) (list (Name &y:0 Load))) (/seq (Assign (list (Name &r:0 Store)) (Name &c:0 Load) None)) (/seq (Assign (list (Name &l:0 Store)) (BinOp (Name &c:0 Load) Add (Constant i1 None)) None)))) nil) (Expr (Call (Name g_print Load) (list (Name &l:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &needed:0 Store)) (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)) None) (Assign (list (Name &ans:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &needed:0 Load) Sub (Name &x:0 Load))) nil)) nil) None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &p:0 Store)) (Call (Attribute (Name &a:0 Load) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_float Load) (list (Subscript (Name &p:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_float Load) (list (Subscript (Name &p:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_float Load) (list (Subscript (Name &p:0 Load) (Constant i2 None) Load)) nil) None) (Assign (list (Name &out:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (If (Compare (Call (Name g_int Load) (list (BinOp (Name &out:0 Load) Sub (Name &x:0 Load))) nil) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (Name &out:0 Load) Sub (Name &x:0 Load))) nil)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &p:0 Store)) (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) None) (Assign (list (Name &t:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (Name &p:0 Load) Sub (Name &x:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (Name &t:0 Load) (list GtE) (list (Constant i0 None))) (Name &t:0 Load) (Constant i0 None))) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_* None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Tuple (list (Call (Name g_int Load) (list (Name &n:0 Load)) nil) (Call (Name g_int Load) (list (Name &x:0 Load)) nil) (Call (Name g_int Load) (list (Name &y:0 Load)) nil)) Load) None) (Assign (list (Name &puppet:0 Store)) (Constant i0 None) None) (If (Compare (BinOp (BinOp (Name &x:0 Load) Mult (Constant i100 None)) Div (Name &n:0 Load)) (list Lt) (list (Name &y:0 Load))) (/seq (Assign (list (Name &puppet:0 Store)) (BinOp (Call (Name g_int Load) (list (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Call (Name g_float Load) (list (Name &y:0 Load)) nil)) Div (Constant i100 None))) nil)) nil) Sub (Name &x:0 Load)) None)) nil) (Expr (Call (Name g_print Load) (list (Name &puppet:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &j:0 Store) (Name &m:0 Store) (Name &p:0 Store)) Store)) (fn_1) None) (Assign (list (Name &l:0 Store)) (BinOp (Name &j:0 Load) Mult (Name &p:0 Load)) None) (Assign (list (Name &l:0 Store)) (BinOp (BinOp (BinOp (Name &l:0 Load) FloorDiv (Constant i100 None)) Add (Call (Name g_int Load) (list (Compare (BinOp (Name &l:0 Load) Mod (Constant i100 None)) (list Gt) (list (Constant i0 None)))) nil)) Sub (Name &m:0 Load)) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Name &l:0 Load) (Constant i0 None)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &n_x_y:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &minn:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Subscript (Name &n_x_y:0 Load) (Constant i2 None) Load) Div (Constant i100 None)) Mult (Subscript (Name &n_x_y:0 Load) (Constant i0 None) Load))) nil) None) (Assign (list (Name &req:0 Store)) (BinOp (Name &minn:0 Load) Sub (Subscript (Name &n_x_y:0 Load) (Constant i1 None) Load)) None) (If (Compare (Name &req:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Name &req:0 Load)) nil))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Div (Constant i100 None)) Mult (Name &y:0 Load))) nil) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (FunctionDef &wizard:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &k:1 Store)) (Constant i3 None) None) (Assign (list (Tuple (list (Name &n:1 Store) (Name &x:1 Store) (Name &y:1 Store)) Store)) (Subscript (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil)) nil)) nil) (Slice None (Name &k:1 Load) None) Load) None) (Assign (list (Name &c:1 Store)) (Call (Name g_int Load) (list (BinOp (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (BinOp (BinOp (BinOp (Name &n:1 Load) Mult (Name &y:1 Load)) Div (Constant i100 None)) Sub (Name &x:1 Load))) FloorDiv (Constant i1 None)) Mult (UnaryOp USub (Constant i1 None)))) nil) None) (If (Compare (Name &c:1 Load) (list Gt) (list (Constant i0 None))) (/seq (Return (Name &c:1 Load))) (/seq (Return (Constant i0 None))))) nil None None) (Expr (Call (Name g_print Load) (list (Call (Name &wizard:0 Load) nil nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &a:0 Store) (Name &b:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &x:0 Store)) (BinOp (BinOp (Name &n:0 Load) Mult (Name &b:0 Load)) Div (Constant i100 None)) None) (Assign (list (Name &x:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (Name &x:0 Load)) nil) None) (If (Compare (Name &x:0 Load) (list Gt) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &x:0 Load) Sub (Name &a:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Import (list (alias g_math None))) (Assign (list (Name &get_string:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil)) None) (Assign (list (Name &get_int_list:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil)) nil)) nil)) None) (Assign (list (Name &get_int:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_int Load) (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)) nil)) None) (Assign (list (Name &pt:0 Store)) (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) (list (BinOp (Call (Name g_str Load) (list (Name &x:1 Load)) nil) Add (Constant s-WzEwXQ== None))) nil)) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name &get_int_list:0 Load) nil nil) None) (Assign (list (Name &req:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (If (Compare (Name &req:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &req:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Import (list (alias s_itertools g_it))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (For (Name &i:0 Store) (Call (Attribute (Name g_it Load) s_count Load) nil nil) (/seq (If (Compare (BinOp (BinOp (Name &x:0 Load) Add (Name &i:0 Load)) Mult (Constant i100 None)) (list GtE) (list (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (Name &i:0 Load)) nil)) Break) nil)) nil None)) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &goal:0 Store)) (Call (Name g_ceil Load) (list (BinOp (Name &n:0 Load) Mult (BinOp (Name &y:0 Load) Div (Constant i100 None)))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (BinOp (Name &goal:0 Load) Sub (Name &x:0 Load)) (Constant i0 None)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &ReqPeople:0 Store)) (fn_2 &n:0 &y:0) None) (If (Compare (Name &x:0 Load) (list Lt) (list (Name &ReqPeople:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &ReqPeople:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &per:0 Store)) (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)) None) (Assign (list (Name &t:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (Name &per:0 Load)) nil) None) (AugAssign (Name &t:0 Store) Sub (Name &x:0 Load)) (If (Compare (Name &t:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Name &t:0 Load)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &per:0 Store)) (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)) None) (If (Compare (BinOp (Name &per:0 Load) Sub (Name &x:0 Load)) (list Lt) (list (Constant i0 None))) (/seq (fn_3)) (/seq (If (Compare (Name &per:0 Load) (list Eq) (list (Call (Name g_int Load) (list (Name &per:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (Name &per:0 Load) Sub (Name &x:0 Load))) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (BinOp (Call (Name g_int Load) (list (Name &per:0 Load)) nil) Sub (Name &x:0 Load)) Add (Constant i1 None))) nil)) nil))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &a:0 Store)) (fn_2 &y:0 &n:0) None) (If (Compare (Name &a:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_abs Load) (list (BinOp (Name &x:0 Load) Sub (Name &a:0 Load))) nil)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Import (list (alias s_math g_m))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (If (Compare (BinOp (BinOp (Name &x:0 Load) Div (Name &n:0 Load)) Mult (Constant i100 None)) (list GtE) (list (Name &y:0 Load))) (/seq (fn_3)) (/seq (Assign (list (Name &ans:0 Store)) (BinOp (Call (Attribute (Name g_m Load) s_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load)) None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (Call (Name g_int Load) (list (BinOp (BinOp (BinOp (BinOp (Name &n:0 Load) Div (Constant i100 None)) Mult (Name &y:0 Load)) Sub (Name &x:0 Load)) Add (Constant f0.9999999999 None))) nil)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (FunctionDef &input:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &iinput:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))) nil None None) (FunctionDef &rinput:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &get_list:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name &rinput:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) None) (If (Compare (Call (Name g_int Load) (list (Name &a:0 Load)) nil) (list Eq) (list (Name &a:0 Load))) (/seq (Assign (list (Name &s:0 Store)) (Name &a:0 Load) None)) (/seq (Assign (list (Name &s:0 Store)) (BinOp (Name &a:0 Load) Add (Constant i1 None)) None))) (If (Compare (Call (Name g_int Load) (list (BinOp (Name &s:0 Load) Sub (Name &x:0 Load))) nil) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (Name &s:0 Load) Sub (Name &x:0 Load))) nil)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (UnaryOp USub (Call (Name g_min Load) (list (Constant i0 None) (BinOp (BinOp (BinOp (UnaryOp USub (Name &n:0 Load)) Mult (Name &y:0 Load)) FloorDiv (Constant i100 None)) Add (Name &x:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_int Load) (list (fn_2 &n:0 &y:0)) nil) None) (Assign (list (Name &cnt:0 Store)) (BinOp (Name &ans:0 Load) Sub (Name &x:0 Load)) None) (If (Compare (Name &cnt:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Name &cnt:0 Load)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &ans:0 Store)) (fn_2 &n:0 &y:0) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &ans:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &ans:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Name g_math Load) s_ceil Load) (list (Call (Name g_float Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Mult (Constant f0.01 None))) nil)) nil)) nil) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &a:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &a:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (fn_2 &y:0 &n:0) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None) (alias g_floor None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (If (Compare (Call (Name g_floor Load) (list (BinOp (BinOp (Name &x:0 Load) Mult (Constant i100 None)) Div (Name &n:0 Load))) nil) (list GtE) (list (Name &y:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &req:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (Assign (list (Name &ans:0 Store)) (BinOp (Name &req:0 Load) Sub (Name &x:0 Load)) None) (If (Compare (Name &ans:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Name &X:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &Result:0 Store)) (BinOp (Call (Name g_ceil Load) (list (BinOp (BinOp (Subscript (Name &X:0 Load) (Constant i0 None) Load) Mult (Subscript (Name &X:0 Load) (Constant i2 None) Load)) Div (Constant i100 None))) nil) Sub (Subscript (Name &X:0 Load) (Constant i1 None) Load)) None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (Name &Result:0 Load) (list Gt) (list (Constant i0 None))) (Name &Result:0 Load) (Constant i0 None))) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &c1:0 Store)) (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) None) (Assign (list (Name &c2:0 Store)) (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) FloorDiv (Constant i100 None)) None) (If (Compare (Name &c1:0 Load) (list Eq) (list (Name &c2:0 Load))) (/seq (Assign (list (Name &c2:0 Store)) (Call (Name g_int Load) (list (Name &c1:0 Load)) nil) None)) (/seq (Assign (list (Name &c2:0 Store)) (BinOp (Call (Name g_int Load) (list (Name &c1:0 Load)) nil) Add (Constant i1 None)) None))) (If (Compare (BinOp (Name &c2:0 Load) Sub (Name &x:0 Load)) (list GtE) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &c2:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (If (Compare (fn_2 &y:0 &n:0) (list LtE) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (fn_2 &y:0 &n:0) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &m:0 Store)) (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) None) (If (Compare (Name &m:0 Load) (list NotEq) (list (BinOp (Name &m:0 Load) FloorDiv (Constant i1 None)))) (/seq (Assign (list (Name &m:0 Store)) (BinOp (BinOp (Name &m:0 Load) FloorDiv (Constant i1 None)) Add (Constant i1 None)) None)) nil) (If (Compare (Name &m:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_int Load) (list (Name &m:0 Load)) nil) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &c:0 Store)) (BinOp (fn_2 &y:0 &n:0) Sub (Name &x:0 Load)) None) (If (Compare (Name &c:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &c:0 Store)) (Constant i0 None) None)) nil) (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &req:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant f100.0 None)) Mult (Name &n:0 Load))) nil)) nil) None) (If (Compare (BinOp (Name &req:0 Load) Sub (Name &x:0 Load)) (list Lt) (list (Constant i0 None))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &req:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i0 None) (Call (Name g_len Load) (list (Name &n:0 Load)) nil)) nil) (/seq (Assign (list (Subscript (Name &n:0 Load) (Name &i:0 Load) Store)) (Call (Name g_int Load) (list (Subscript (Name &n:0 Load) (Name &i:0 Load) Load)) nil) None)) nil None) (If (Compare (BinOp (Subscript (Name &n:0 Load) (Constant i0 None) Load) Div (Subscript (Name &n:0 Load) (Constant i1 None) Load)) (list Eq) (list (BinOp (Constant i100 None) Div (Subscript (Name &n:0 Load) (Constant i2 None) Load)))) (/seq (fn_3) (Expr (Call (Name g_exit Load) nil nil))) nil) (Assign (list (Name &s:0 Store)) (BinOp (Subscript (Name &n:0 Load) (Constant i0 None) Load) Div (Constant i100 None)) None) (Assign (list (Name &vi:0 Store)) (Call (Name g_int Load) (list (BinOp (Name &s:0 Load) Mult (Subscript (Name &n:0 Load) (Constant i2 None) Load))) nil) None) (Assign (list (Name &vf:0 Store)) (BinOp (Name &s:0 Load) Mult (Subscript (Name &n:0 Load) (Constant i2 None) Load)) None) (If (Compare (BinOp (Name &vi:0 Load) Sub (Subscript (Name &n:0 Load) (Constant i1 None) Load)) (list Lt) (list (Constant i0 None))) (/seq (fn_3) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (Compare (Call (Name g_abs Load) (list (BinOp (Name &vf:0 Load) Sub (Name &vi:0 Load))) nil) (list Gt) (list (Constant f1e-06 None))) (/seq (AugAssign (Name &vi:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (BinOp (Name &vi:0 Load) Sub (Subscript (Name &n:0 Load) (Constant i1 None) Load))) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &l:0 Store)) (Call (Name g_int Load) (list (fn_2 &y:0 &n:0)) nil) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &l:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &clones:0 Store)) (BinOp (fn_2 &y:0 &n:0) Sub (Name &x:0 Load)) None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (Name &clones:0 Load) (list Gt) (list (Constant i0 None))) (Name &clones:0 Load) (Constant i0 None))) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &tocome:0 Store)) (BinOp (Name &y:0 Load) Div (Constant f100.0 None)) None) (If (Compare (Name &x:0 Load) (list Lt) (list (BinOp (Name &tocome:0 Load) Mult (Name &n:0 Load)))) (/seq (Assign (list (Name &need:0 Store)) (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (Name &tocome:0 Load) Mult (Name &n:0 Load))) nil) Sub (Name &x:0 Load)) None) (Expr (Call (Name g_print Load) (list (Name &need:0 Load)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &rew:0 Store)) (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) None) (If (Compare (Name &x:0 Load) (list Lt) (list (Call (Name g_ceil Load) (list (Name &rew:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_ceil Load) (list (Name &rew:0 Load)) nil) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (GeneratorExp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (UnaryOp USub (BinOp (BinOp (BinOp (Constant i100 None) Mult (Name &x:0 Load)) Sub (BinOp (Name &n:0 Load) Mult (Name &y:0 Load))) FloorDiv (Constant i100 None)))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &n:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &k:0 Store)) (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Subscript (Name &n:0 Load) (Constant i0 None) Load) Mult (Subscript (Name &n:0 Load) (Constant i2 None) Load)) Div (Constant i100 None))) nil) Sub (Subscript (Name &n:0 Load) (Constant i1 None) Load)) None) (If (Compare (Name &k:0 Load) (list GtE) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &k:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (If (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Mod (Constant i100 None)) (/seq (If (Compare (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Add (Constant i1 None)) (list Lt) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Add (Constant i1 None)) Sub (Name &x:0 Load))) nil))))) (/seq (If (Compare (Call (Name g_int Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) (list Lt) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load))) nil))))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None) (alias g_threading None) (alias g_os.path None))) (Import (list (alias g_collections None) (alias g_heapq None) (alias g_math None) (alias g_bisect None))) (Import (list (alias g_string None))) (ImportFrom s_platform (list (alias g_python_version None)) i0) (Import (list (alias g_itertools None))) (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (BinOp (Constant i10 None) Pow (Constant i6 None))) nil)) (Expr (Call (Attribute (Name g_threading Load) s_stack_size Load) (list (BinOp (Constant i2 None) Pow (Constant i27 None))) nil)) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (If (Call (Attribute (Attribute (Name g_os Load) s_path Load) s_exists Load) (list (Constant s_input.txt None)) nil) (/seq (Assign (list (Name &input:1 Store)) (Call (Name g_open Load) (list (Constant s_input.txt None) (Constant s_r None)) nil) None)) (/seq (Assign (list (Name &input:1 Store)) (Attribute (Name g_sys Load) s_stdin Load) None))) (Assign (list (Tuple (list (Name &n:1 Store) (Name &x:1 Store) (Name &y:1 Store)) Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Name &input:1 Load) s_readline Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &per:1 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:1 Load) Div (Constant i100 None)) Mult (Name &n:1 Load))) nil) None) (If (Compare (Name &per:1 Load) (list Gt) (list (Name &x:1 Load))) (/seq (Assign (list (Name &output:1 Store)) (BinOp (Name &per:1 Load) Sub (Name &x:1 Load)) None)) (/seq (Assign (list (Name &output:1 Store)) (Constant i0 None) None))) (If (Call (Attribute (Attribute (Name g_os Load) s_path Load) s_exists Load) (list (Constant s_output.txt None)) nil) (/seq (Expr (Call (Attribute (Call (Name g_open Load) (list (Constant s_output.txt None) (Constant s_w None)) nil) s_writelines Load) (list (Call (Name g_str Load) (list (Name &output:1 Load)) nil)) nil))) (/seq (Expr (Call (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) (list (Call (Name g_str Load) (list (Name &output:1 Load)) nil)) nil))))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &temp:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (If (Compare (BinOp (Name &temp:0 Load) Sub (Name &x:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &temp:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &answer:0 Store)) (Call (Name g_max Load) (list (Constant i0 None) (BinOp (UnaryOp USub (BinOp (BinOp (UnaryOp USub (Name &y:0 Load)) Mult (Name &n:0 Load)) FloorDiv (Constant i100 None))) Sub (Name &x:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (Name &answer:0 Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &tot:0 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &tot:0 Load) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (FunctionDef &solve:0 (arguments nil (list (arg &n:1 None None) (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &p:1 Store)) (fn_2 &y:1 &n:1) None) (If (Compare (Name &x:1 Load) (list GtE) (list (Name &p:1 Load))) (/seq (Return (Constant i0 None))) nil) (Return (Call (Name g_abs Load) (list (BinOp (Name &p:1 Load) Sub (Name &x:1 Load))) nil))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &i:2 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name &solve:0 Load) (list (Starred (Name &i:2 Load) Load)) nil)) nil))) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &a:0 Store)) (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) None) (If (Compare (BinOp (Name &a:0 Load) Mod (Constant i100 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &a:0 Store)) (BinOp (Name &a:0 Load) FloorDiv (Constant i100 None)) None)) (/seq (Assign (list (Name &a:0 Store)) (BinOp (BinOp (Name &a:0 Load) FloorDiv (Constant i100 None)) Add (Constant i1 None)) None))) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_abs Load) (list (BinOp (Name &x:0 Load) Sub (Name &a:0 Load))) nil)) nil))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (FunctionDef &magicians:0 (arguments nil (list (arg &n:1 None None) (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &z:1 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:1 Load) Mult (Name &y:1 Load)) Div (Constant i100 None))) nil) None) (If (Compare (Name &x:1 Load) (list Lt) (list (Name &z:1 Load))) (/seq (Return (BinOp (Name &z:1 Load) Sub (Name &x:1 Load)))) nil) (Return (Constant i0 None))) nil None None) (Assign (list (Tuple (list (Name &N:0 Store) (Name &X:0 Store) (Name &Y:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:2 Load)) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (Call (Name &magicians:0 Load) (list (Name &N:0 Load) (Name &X:0 Load) (Name &Y:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (fn_2 &n:0 &y:0) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &p:0 Store)) (Call (Name g_int Load) (list (BinOp (BinOp (BinOp (Name &n:0 Load) Div (Constant i100 None)) Mult (Name &y:0 Load)) Add (Constant f0.9999999 None))) nil) None) (If (Compare (Name &p:0 Load) (list LtE) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &p:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Assign (list (Name &d:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (Name &b:0 Load) Div (Name &a:0 Load)) Mult (Constant i100 None)) (list Lt) (list (Name &c:0 Load))) (/seq (AugAssign (Name &b:0 Store) Add (Constant i1 None)) (AugAssign (Name &d:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (Call (Name g_ceil Load) (list (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) Sub (Name &x:0 Load))) nil)) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &people:0 Store)) (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) None) (If (UnaryOp Not (Call (Attribute (Name &people:0 Load) s_is_integer Load) nil nil)) (/seq (Assign (list (Name &people:0 Store)) (BinOp (Call (Name g_int Load) (list (Name &people:0 Load)) nil) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &people:0 Store)) (Call (Name g_int Load) (list (Name &people:0 Load)) nil) None))) (If (Compare (Name &people:0 Load) (list Lt) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &people:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil) None) (Assign (list (Name &f:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (BinOp (Call (Name g_float Load) (list (Name &y:0 Load)) nil) Div (Constant i100 None)) Mult (Name &n:0 Load)) Sub (Name &x:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (Name &f:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (fn_2 &y:0 &n:0) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Import (list (alias g_math None))) (Import (list (alias g_bisect None))) (FunctionDef &solve:0 (arguments nil (list (arg &n:1 None None) (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &ans:1 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (Name &x:1 Load) Add (Name &ans:1 Load)) Mult (Constant i100 None)) (list Lt) (list (BinOp (Name &y:1 Load) Mult (Name &n:1 Load)))) (/seq (AugAssign (Name &ans:1 Store) Add (Constant i1 None))) nil) (Return (Name &ans:1 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &n:2 Store) (Name &x:2 Store) (Name &y:2 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name &solve:0 Load) (list (Name &n:2 Load) (Name &x:2 Load) (Name &y:2 Load)) nil)) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_io None))) (Import (list (alias g_os None))) (Import (list (alias g_math None))) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &n:1 Store) (Name &x:1 Store) (Name &y:1 Store)) Store)) (fn_1) None) (Assign (list (Name &c:1 Store)) (Constant i0 None) None) (While (Compare (Call (Attribute (Name g_math Load) s_floor Load) (list (BinOp (BinOp (BinOp (Name &x:1 Load) Add (Name &c:1 Load)) Div (Name &n:1 Load)) Mult (Constant i100 None))) nil) (list Lt) (list (Name &y:1 Load))) (/seq (AugAssign (Name &c:1 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &c:1 Load)) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &porc:0 Store)) (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) None) (Assign (list (Name &faltam:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (Name &porc:0 Load) Sub (Name &x:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Name &faltam:0 Load) (Constant i0 None)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &clones:0 Store)) (BinOp (fn_2 &n:0 &y:0) Sub (Name &x:0 Load)) None) (If (Compare (Name &clones:0 Load) (list GtE) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &clones:0 Load)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &a:0 Store)) (fn_2 &y:0 &n:0) None) (If (Compare (Name &a:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &a:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &s:1 Load)) nil) (list (comprehension (Name &s:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil) nil i0))) None) (Assign (list (Name &c:0 Store)) (Call (Name g_max Load) (list (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (BinOp (Name &y:0 Load) Div (Constant i100 None))) Sub (Name &x:0 Load))) nil) (Constant i0 None)) nil) None) (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (Import (list (alias g_math None))) (ImportFrom s_itertools (list (alias g_permutations None) (alias g_combinations None)) i0) (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (ImportFrom s_bisect (list (alias g_bisect_left None)) i0) (FunctionDef &L:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (FunctionDef &In:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &I:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil))) nil None None) (Assign (list (Name &P:0 Store)) (Constant i1000000007 None) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name &In:0 Load) nil nil) None) (Assign (list (Name &y1:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil)) nil) None) (If (Compare (Name &x:0 Load) (list Lt) (list (Name &y1:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &y1:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &has:0 Store) (Name &going:0 Store) (Name &perc:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &need:0 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &has:0 Load) Mult (Name &perc:0 Load)) Div (Constant i100 None))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &need:0 Load) Sub (Name &going:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &k:0 Store)) (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)) None) (Assign (list (Name &k:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (Name &k:0 Load)) nil) None) (If (Compare (Name &k:0 Load) (list LtE) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_abs Load) (list (BinOp (Name &k:0 Load) Sub (Name &x:0 Load))) nil)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &k:0 Store)) (fn_2 &n:0 &y:0) None) (If (Compare (Name &k:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &k:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &sam:0 Store)) (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)) None) (If (Compare (Call (Name g_int Load) (list (Name &sam:0 Load)) nil) (list Eq) (list (Name &sam:0 Load))) (/seq (If (Compare (Name &x:0 Load) (list GtE) (list (Name &sam:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_int Load) (list (Name &sam:0 Load)) nil) Sub (Name &x:0 Load))) nil))))) (/seq (Assign (list (Name &sam:0 Store)) (BinOp (Call (Name g_int Load) (list (Name &sam:0 Load)) nil) Add (Constant i1 None)) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &sam:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &sam:0 Load) Sub (Name &x:0 Load))) nil))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) Sub (Name &x:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store) (Name &k:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil) nil i0))) None) (Assign (list (Name &per:0 Store)) (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &k:0 Load)) Add (Constant i99 None)) FloorDiv (Constant i100 None)) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &per:0 Load) Sub (Name &m:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &t:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (If (Compare (Name &x:0 Load) (list Gt) (list (Name &t:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &t:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &t:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (Name &x:0 Load) Add (Name &t:0 Load)) Div (Name &n:0 Load)) (list Lt) (list (BinOp (Name &y:0 Load) Div (Constant i100 None)))) (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &t:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:1 Load)) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_int Load) (list (BinOp (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)) Sub (Name &x:0 Load))) nil) None) (If (Compare (BinOp (BinOp (Name &ans:0 Load) Add (Name &x:0 Load)) Div (Name &n:0 Load)) (list Lt) (list (BinOp (Name &y:0 Load) Div (Constant i100 None)))) (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) nil) (If (Compare (Name &ans:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (UnaryOp USub (BinOp (BinOp (BinOp (Constant i100 None) Mult (Name &x:0 Load)) Sub (BinOp (Name &n:0 Load) Mult (Name &y:0 Load))) FloorDiv (Constant i100 None)))) nil)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Assign (list (Name &t:0 Store)) (BinOp (Name &c:0 Load) Div (Constant i100 None)) None) (If (Compare (Name &t:0 Load) (list LtE) (list (BinOp (Name &b:0 Load) Div (Name &a:0 Load)))) (/seq (fn_3)) (/seq (Assign (list (Name &l:0 Store)) (Call (Name g_float Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MiwgMTAyLCAxMjVd None) s_format Load) (list (BinOp (Name &a:0 Load) Mult (BinOp (Name &t:0 Load) Sub (BinOp (Name &b:0 Load) Div (Name &a:0 Load))))) nil)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_ceil Load) (list (Name &l:0 Load)) nil)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &needed:0 Store)) (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Add (Constant i99 None)) FloorDiv (Constant i100 None)) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &needed:0 Load) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &k:0 Store)) (BinOp (fn_2 &n:0 &y:0) Sub (Name &x:0 Load)) None) (If (Compare (Name &k:0 Load) (list GtE) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &k:0 Load)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &b:0 Store)) (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) None) (Assign (list (Name &m:0 Store)) (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Mod (Constant i100 None)) None) (If (Compare (Name &b:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (If (Name &m:0 Load) (/seq (Expr (Call (Name g_print Load) (list (BinOp (BinOp (Call (Name g_int Load) (list (Name &b:0 Load)) nil) Add (Constant i1 None)) Sub (Name &x:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_int Load) (list (Name &b:0 Load)) nil) Sub (Name &x:0 Load))) nil))))) (/seq (fn_3)))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &w:0 Store) (Name &perc:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Call (Name g_ceil Load) (list (BinOp (Name &n:0 Load) Mult (BinOp (Name &perc:0 Load) Div (Constant i100 None)))) nil) Sub (Name &w:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &people:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (If (Compare (Name &people:0 Load) (list LtE) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &people:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &required:0 Store)) (BinOp (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) FloorDiv (Constant i100 None)) Add (Call (Name g_bool Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Mod (Constant i100 None))) nil)) None) (If (Compare (Name &x:0 Load) (list Gt) (list (Name &required:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &required:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_decimal None))) (Assign (list (Name &D:0 Store)) (Attribute (Name g_decimal Load) s_Decimal Load) None) (Assign (list (Name &l1:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Tuple (list (Subscript (Name &l1:0 Load) (Constant i0 None) Load) (Subscript (Name &l1:0 Load) (Constant i1 None) Load) (Subscript (Name &l1:0 Load) (Constant i2 None) Load)) Load) None) (Assign (list (Name &need:0 Store)) (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) None) (Assign (list (Name &have:0 Store)) (BinOp (Name &x:0 Load) Mult (Constant i100 None)) None) (Assign (list (Name &extra:0 Store)) (Constant i0 None) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (Name &need:0 Load) Sub (Name &have:0 Load)) (list Gt) (list (Name &extra:0 Load))) (/seq (AugAssign (Name &extra:0 Store) Add (Constant i100 None)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &i:0 Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &target:0 Store)) (Call (Name g_ceil Load) (list (BinOp (Name &n:0 Load) Mult (BinOp (Name &y:0 Load) Div (Constant i100 None)))) nil) None) (If (Compare (BinOp (Name &target:0 Load) Sub (Name &x:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &target:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &temp:0 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (BinOp (Name &temp:0 Load) Sub (Name &x:0 Load)) (Constant i0 None)) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (BinOp (Constant i0 None) Sub (BinOp (BinOp (UnaryOp USub (Name &n:0 Load)) Mult (Name &y:0 Load)) FloorDiv (Constant i100 None))) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias s_math g_m))) (Assign (list (Name &n:0 Store)) (ListComp (Call (Name g_float Load) (list (Name &i:1 Load)) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &o:0 Store)) (Call (Attribute (Name g_m Load) s_ceil Load) (list (BinOp (Subscript (Name &n:0 Load) (Constant i0 None) Load) Mult (BinOp (Subscript (Name &n:0 Load) (Constant i2 None) Load) Div (Constant i100 None)))) nil) None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (Name &o:0 Load) (list GtE) (list (Call (Name g_int Load) (list (Subscript (Name &n:0 Load) (Constant i1 None) Load)) nil))) (BinOp (Name &o:0 Load) Sub (Call (Name g_int Load) (list (Subscript (Name &n:0 Load) (Constant i1 None) Load)) nil)) (Constant i0 None))) nil))) nil)",
            "(Module (/seq (Expr (Constant s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA4NCwgMTA0LCAxMTcsIDMyLCA3NywgOTcsIDEyMSwgMzIsIDUwLCA1NSwgMzIsIDQ4LCA1NywgNTgsIDUxLCA1NSwgNTgsIDQ4LCA1MywgMzIsIDUwLCA0OCwgNTAsIDQ5LCAxMCwgMTAsIDY0LCA5NywgMTE3LCAxMTYsIDEwNCwgMTExLCAxMTQsIDU4LCAzMiwgODYsIDEwNSwgMTEwLCAxMDEsIDEwMSwgMTE2LCAxMF0= None)) (Import (list (alias &math:0 None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &math:0 Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (If (Compare (Name &a:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Assign (list (Name &b:0 Store)) (BinOp (Name &a:0 Load) Sub (Name &x:0 Load)) None) (Expr (Call (Name g_print Load) (list (Name &b:0 Load)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil) None) (Assign (list (Name &Answer:0 Store)) (Constant i0 None) None) (If (Compare (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)) (list GtE) (list (Name &x:0 Load))) (/seq (Assign (list (Name &Answer:0 Store)) (BinOp (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)) Sub (Name &x:0 Load)) None)) nil) (Expr (Call (Name g_print Load) (list (Call (Name g_ceil Load) (list (Name &Answer:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &w:0 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) None) (If (Compare (BinOp (Name &w:0 Load) Sub (Name &x:0 Load)) (list GtE) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &w:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &ch:1 Load)) nil) (list (comprehension (Name &ch:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil) nil i0))) None) (Assign (list (Name &ans:0 Store)) (BinOp (fn_2 &n:0 &y:0) Sub (Name &x:0 Load)) None) (Expr (IfExp (Compare (Name &ans:0 Load) (list Lt) (list (Constant i0 None))) (Call (Name g_print Load) (list (Constant s_0 None)) nil) (Call (Name g_print Load) (list (Name &ans:0 Load)) nil)))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Try (/seq (Assign (list (Name &t:0 Store)) (Constant i1 None) None) (While (Name &t:0 Load) (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (BinOp (fn_2 &n:0 &y:0) Sub (Name &x:0 Load)) (Constant i0 None)) nil)) nil))) nil)) (list (ExceptHandler None None (/seq Pass))) nil nil)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None)) Sub (Name &b:0 Load))) nil) (Constant i0 None)) nil)) nil))) nil)",
            "(Module (/seq (FunctionDef &f:0 (arguments nil (list (arg &l:1 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &n:1 Store) (Name &x:1 Store) (Name &y:1 Store)) Store)) (Name &l:1 Load) None) (Return (Call (Name g_max Load) (list (BinOp (BinOp (BinOp (BinOp (Name &n:1 Load) Mult (Name &y:1 Load)) Add (Constant i99 None)) FloorDiv (Constant i100 None)) Sub (Name &x:1 Load)) (Constant i0 None)) nil))) nil None None) (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name &f:0 Load) (list (Name &l:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &o:0 Store)) (BinOp (BinOp (Name &n:0 Load) Mult (BinOp (Name &y:0 Load) Div (Constant i100 None))) Sub (Name &x:0 Load)) None) (If (Compare (Name &o:0 Load) (list Lt) (list (Constant i0 None))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Name g_math Load) s_ceil Load) (list (Name &o:0 Load)) nil)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &number:0 Store)) (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)) None) (Assign (list (Name &needed:0 Store)) (BinOp (Name &number:0 Load) Sub (Name &x:0 Load)) None) (If (Compare (Name &needed:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (If (Compare (BinOp (Name &number:0 Load) Mod (Constant i1 None)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &needed:0 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (Name &needed:0 Load) Add (Constant i1 None))) nil)) nil))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &req:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (Assign (list (Name &ans:0 Store)) (IfExp (Compare (Name &req:0 Load) (list Gt) (list (Name &x:0 Load))) (BinOp (Name &req:0 Load) Sub (Name &x:0 Load)) (Constant i0 None)) None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (List (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (BinOp (BinOp (Name &x:0 Load) Div (Name &n:0 Load)) Mult (Constant i100 None)) (list Lt) (list (Name &y:0 Load))) (Call (Name g_ceil Load) (list (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) Sub (Name &x:0 Load))) nil) (Constant i0 None))) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Import (list (alias g_sys None))) (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (Constant i1000 None)) nil)) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (fn_2 &y:0 &n:0) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Name &__author__:0 Store)) (Constant s_Esfandiar None) None) (Import (list (alias &sys:0 None))) (ImportFrom s_math (list (alias &ceil:0 None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &Person:0 Store)) (Call (Name &ceil:0 Load) (list (BinOp (Name &n:0 Load) Mult (BinOp (Name &y:0 Load) Div (Constant i100 None)))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &Person:0 Load) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Assign (list (Name &p:0 Store)) (UnaryOp USub (Call (Name g_min Load) (list (Constant i0 None) (BinOp (BinOp (BinOp (UnaryOp USub (Name &a:0 Load)) Mult (Name &c:0 Load)) Div (Constant i100 None)) Add (Name &b:0 Load))) nil)) None) (Expr (IfExp (Compare (Name &p:0 Load) (list Eq) (list (Call (Name g_int Load) (list (Name &p:0 Load)) nil))) (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &p:0 Load)) nil)) nil) (Call (Name g_print Load) (list (BinOp (Call (Name g_int Load) (list (Name &p:0 Load)) nil) Add (Constant i1 None))) nil)))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &n:1 Store) (Name &x:1 Store) (Name &y:1 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &n:1 Load) Div (Constant i100 None)) Mult (Name &y:1 Load))) nil) Sub (Name &x:1 Load))) nil)) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_* None)) i0) (Assign (list (Name &n1:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &n1:0 Load) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil) None) (Assign (list (Name &k:0 Store)) (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Call (Name g_ceil Load) (list (Name &k:0 Load)) nil)) nil) None) (If (Compare (Name &y:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &y:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (Call (Name g_ceil Load) (list (BinOp (BinOp (BinOp (Subscript (Name &a:0 Load) (Constant i0 None) Load) Mult (Subscript (Name &a:0 Load) (Constant i2 None) Load)) Div (Constant i100 None)) Sub (Subscript (Name &a:0 Load) (Constant i1 None) Load))) nil)) nil)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (GeneratorExp (Call (Name g_int Load) (list (Name &i:1 Load)) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil) nil i0))) None) (Assign (list (Name &z:0 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) None) (If (Compare (Name &z:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &z:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Import (list (alias &math:0 None))) (If (Compare (Name &x:0 Load) (list GtE) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Name &math:0 Load) s_ceil Load) (list (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) Sub (Name &x:0 Load))) nil)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (UnaryOp USub (BinOp (BinOp (BinOp (Constant i100 None) Mult (Name &x:0 Load)) Sub (BinOp (Name &n:0 Load) Mult (Name &y:0 Load))) FloorDiv (Constant i100 None)))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &a:0 Store)) (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Sub (BinOp (Name &x:0 Load) Mult (Constant i100 None))) Div (Constant i100 None)) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (Call (Attribute (Name g_math Load) s_ceil Load) (list (Name &a:0 Load)) nil)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &S:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &S:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &S:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &S:0 Load) (Constant i2 None) Load)) nil) None) (Assign (list (Name &needed:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (If (Compare (BinOp (Name &needed:0 Load) Sub (Name &x:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &needed:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &p:0 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) None) (If (Compare (Name &p:0 Load) (list Lt) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &p:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (If (Compare (BinOp (Name &x:0 Load) Div (Name &n:0 Load)) (list GtE) (list (BinOp (Name &y:0 Load) Div (Constant i100 None)))) (/seq (fn_3)) (/seq (Assign (list (Name &b:0 Store)) (BinOp (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)) Sub (Name &x:0 Load)) None) (Expr (Call (Name g_print Load) (list (Call (Name g_ceil Load) (list (Name &b:0 Load)) nil)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &w:0 Store) (Name &p:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &m:0 Store)) (fn_2 &p:0 &n:0) None) (If (Compare (Name &w:0 Load) (list GtE) (list (Name &m:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &m:0 Load) Sub (Name &w:0 Load))) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &p:0 Store)) (BinOp (Name &n:0 Load) Div (Constant i100 None)) None) (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (Name &y:0 Load) Mult (Name &p:0 Load)) Sub (Name &x:0 Load)) None) (If (Compare (BinOp (Name &ans:0 Load) Mod (Constant i1 None)) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (Name &ans:0 Load) Sub (BinOp (Name &ans:0 Load) Mod (Constant i1 None))) Add (Constant i1 None)) None)) nil) (If (Compare (Name &ans:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)) nil) (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &ans:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Assign (list (Name &d:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (BinOp (Name &b:0 Load) Add (Name &d:0 Load)) Div (Name &a:0 Load)) Mult (Constant i100 None)) (list Lt) (list (Name &c:0 Load))) (/seq (AugAssign (Name &d:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &left:0 Store)) (UnaryOp USub (Constant i1 None)) None) (Assign (list (Name &right:0 Store)) (Constant i10000000000 None) None) (While (Compare (BinOp (Name &right:0 Load) Sub (Name &left:0 Load)) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &k:0 Store)) (BinOp (BinOp (Name &left:0 Load) Add (Name &right:0 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (BinOp (Name &x:0 Load) Add (Name &k:0 Load)) (list GtE) (list (BinOp (Name &n:0 Load) Mult (BinOp (Name &y:0 Load) Div (Constant i100 None))))) (/seq (Assign (list (Name &right:0 Store)) (Name &k:0 Load) None)) (/seq (Assign (list (Name &left:0 Store)) (Name &k:0 Load) None)))) nil) (Expr (Call (Name g_print Load) (list (Name &right:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &number_of_testcases:0 Store)) (Constant i1 None) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &number_of_testcases:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &num_citizen:0 Store) (Name &num_wizard:0 Store) (Name &percentage_demonstration:0 Store)) Store)) (fn_1) None) (Assign (list (Name &num_clones_needed:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &num_citizen:0 Load) Mult (Name &percentage_demonstration:0 Load)) Div (Constant f100.0 None))) nil)) nil) None) (If (Compare (Name &num_wizard:0 Load) (list GtE) (list (Name &num_clones_needed:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &num_clones_needed:0 Load) Sub (Name &num_wizard:0 Load))) nil))))) nil None)) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias s_ceil g_c)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &a:0 Store)) (Call (Name g_c Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &a:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None) (alias g_itertools None) (alias g_fractions None) (alias g_heapq None) (alias g_collections None) (alias g_bisect None) (alias g_sys None) (alias g_queue None) (alias g_copy None))) (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (BinOp (Constant i10 None) Pow (Constant i7 None))) nil)) (Assign (list (Name &inf:0 Store)) (BinOp (Constant i10 None) Pow (Constant i20 None)) None) (Assign (list (Name &mod:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &dd:0 Store)) (List (list (Tuple (list (UnaryOp USub (Constant i1 None)) (Constant i0 None)) Load) (Tuple (list (Constant i0 None) (Constant i1 None)) Load) (Tuple (list (Constant i1 None) (Constant i0 None)) Load) (Tuple (list (Constant i0 None) (UnaryOp USub (Constant i1 None))) Load)) Load) None) (Assign (list (Name &ddn:0 Store)) (List (list (Tuple (list (UnaryOp USub (Constant i1 None)) (Constant i0 None)) Load) (Tuple (list (UnaryOp USub (Constant i1 None)) (Constant i1 None)) Load) (Tuple (list (Constant i0 None) (Constant i1 None)) Load) (Tuple (list (Constant i1 None) (Constant i1 None)) Load) (Tuple (list (Constant i1 None) (Constant i0 None)) Load) (Tuple (list (Constant i1 None) (UnaryOp USub (Constant i1 None))) Load) (Tuple (list (Constant i0 None) (UnaryOp USub (Constant i1 None))) Load) (Tuple (list (UnaryOp USub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) Load)) Load) None) (FunctionDef &LI:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (Name &x:2 Load)) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &LF:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_float Load) (list (Name &x:3 Load)) nil) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &I:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)) nil))) nil None None) (FunctionDef &LS:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil None None) (FunctionDef &S:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_input Load) nil nil))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &a:1 Store) (Name &b:1 Store) (Name &c:1 Store)) Store)) (Call (Name &LI:0 Load) nil nil) None) (Assign (list (Name &x:1 Store)) (BinOp (BinOp (Name &a:1 Load) Mult (Name &c:1 Load)) Div (Constant i100 None)) None) (Assign (list (Name &ans:1 Store)) (Call (Name g_max Load) (list (Constant i0 None) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (Name &x:1 Load) Sub (Name &b:1 Load))) nil)) nil) None) (Return (Name &ans:1 Load))) nil None None) (Expr (Call (Name g_print Load) (list (Call (Name &main:0 Load) nil nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_float Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &required:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) Sub (Name &x:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (Name &required:0 Load) (list GtE) (list (Constant i0 None))) (Name &required:0 Load) (Constant i0 None))) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &ans:0 Store)) (BinOp (Call (Name g_float Load) (list (BinOp (Name &y:0 Load) Div (Constant i100 None))) nil) Mult (Name &n:0 Load)) None) (If (Compare (BinOp (Call (Name g_ceil Load) (list (Name &ans:0 Load)) nil) Sub (Name &x:0 Load)) (list Lt) (list (Constant i0 None))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_ceil Load) (list (Name &ans:0 Load)) nil) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &data:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (Name &N:0 Store) (Name &X:0 Store) (Name &Y:0 Store)) Store)) (Tuple (list (Call (Name g_int Load) (list (Subscript (Name &data:0 Load) (Constant i0 None) Load)) nil) (Call (Name g_int Load) (list (Subscript (Name &data:0 Load) (Constant i1 None) Load)) nil) (Call (Name g_int Load) (list (Subscript (Name &data:0 Load) (Constant i2 None) Load)) nil)) Load) None) (Assign (list (Name &clones:0 Store)) (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (Name &N:0 Load) Mult (BinOp (Name &Y:0 Load) Div (Constant i100 None)))) nil) Sub (Name &X:0 Load)) None) (If (Compare (Name &clones:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &clones:0 Load)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &req:0 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &req:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &req:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &v:0 Store)) (Call (Name g_int Load) (list (fn_2 &n:0 &y:0)) nil) None) (If (Compare (Name &v:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &v:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &real_percentage:0 Store)) (BinOp (BinOp (Name &x:0 Load) Div (Name &n:0 Load)) Mult (Constant i100 None)) None) (Assign (list (Name &needed_clone:0 Store)) (Constant i0 None) None) (While (Compare (Name &real_percentage:0 Load) (list Lt) (list (Name &y:0 Load))) (/seq (AugAssign (Name &needed_clone:0 Store) Add (Constant i1 None)) (AugAssign (Name &x:0 Store) Add (Constant i1 None)) (Assign (list (Name &real_percentage:0 Store)) (BinOp (BinOp (Name &x:0 Load) Div (Name &n:0 Load)) Mult (Constant i100 None)) None)) nil) (Expr (Call (Name g_print Load) (list (Name &needed_clone:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &num:0 Store)) (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) None) (Assign (list (Name &num1:0 Store)) (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) FloorDiv (Constant i100 None)) None) (Assign (list (Name &z:0 Store)) (BinOp (Name &num:0 Load) Sub (Name &num1:0 Load)) None) (If (BoolOp And (list (Compare (Name &z:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &x:0 Load) (list LtE) (list (Name &num:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &num1:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (If (BoolOp And (list (Compare (Name &z:0 Load) (list NotEq) (list (Constant i0 None))) (Compare (Name &x:0 Load) (list LtE) (list (Name &num:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (BinOp (Name &num1:0 Load) Add (Constant i1 None)) Sub (Name &x:0 Load))) nil))) (/seq (If (Compare (Name &x:0 Load) (list Gt) (list (Name &num:0 Load))) (/seq (fn_3)) nil)))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &k:0 Store) (Name &p:0 Store)) Store)) (fn_1) None) (Assign (list (Name &need:0 Store)) (fn_2 &p:0 &n:0) None) (Assign (list (Name &res:0 Store)) (BinOp (Name &need:0 Load) Sub (Name &k:0 Load)) None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (Name &res:0 Load) (list Gt) (list (Constant i0 None))) (Name &res:0 Load) (Constant i0 None))) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Assign (list (Name &p:0 Store)) (fn_2 &a:0 &c:0) None) (If (Compare (Name &p:0 Load) (list LtE) (list (Name &b:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &p:0 Load) Sub (Name &b:0 Load))) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Import (list (alias &math:0 None))) (Expr (Call (Name g_print Load) (list (IfExp (Compare (Name &x:0 Load) (list GtE) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))) (Constant i0 None) (Call (Attribute (Name &math:0 Load) s_ceil Load) (list (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) Sub (Name &x:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &arr:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &arr:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &arr:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &arr:0 Load) (Constant i2 None) Load)) nil) None) (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) Sub (Name &x:0 Load)) None) (If (Compare (Name &ans:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Name g_math Load) s_ceil Load) (list (Name &ans:0 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &wizards:0 Store) (Name &percent:0 Store)) Store)) (fn_1) None) (Import (list (alias &math:0 None))) (Assign (list (Name &people:0 Store)) (Call (Attribute (Name &math:0 Load) s_ceil Load) (list (BinOp (BinOp (Name &percent:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) None) (If (Compare (Name &people:0 Load) (list LtE) (list (Name &wizards:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &people:0 Load) Sub (Name &wizards:0 Load))) nil))))) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (BinOp (BinOp (Name &x:0 Load) Div (Name &n:0 Load)) Mult (Constant i100 None)) (list GtE) (list (Name &y:0 Load))) (/seq (Expr (Call (Attribute (Name g_stdout Load) s_write Load) (list (Constant s_0 None)) nil))) (/seq (Assign (list (Name &l:0 Store)) (Constant i0 None) None) (Assign (list (Name &r:0 Store)) (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) None) (While (Compare (BinOp (Name &r:0 Load) Sub (Name &l:0 Load)) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &m:0 Store)) (BinOp (BinOp (Name &r:0 Load) Add (Name &l:0 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (BinOp (BinOp (BinOp (Name &x:0 Load) Add (Name &m:0 Load)) Div (Name &n:0 Load)) Mult (Constant i100 None)) (list GtE) (list (Name &y:0 Load))) (/seq (Assign (list (Name &r:0 Store)) (Name &m:0 Load) None)) (/seq (Assign (list (Name &l:0 Store)) (Name &m:0 Load) None)))) nil) (Expr (Call (Attribute (Name g_stdout Load) s_write Load) (list (Call (Name g_str Load) (list (Name &r:0 Load)) nil)) nil))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &total_people_need:0 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Call (Name g_float Load) (list (Name &n:0 Load)) nil) Div (Constant i100 None)) Mult (Call (Name g_float Load) (list (Name &y:0 Load)) nil))) nil) None) (Assign (list (Name &puppet_need:0 Store)) (Call (Name g_max Load) (list (BinOp (Call (Name g_int Load) (list (Name &total_people_need:0 Load)) nil) Sub (Name &x:0 Load)) (Constant i0 None)) nil) None) (Expr (Call (Name g_print Load) (list (Name &puppet_need:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &w:0 Store) (Name &p:0 Store)) Store)) (fn_1) None) (Assign (list (Name &needed:0 Store)) (Call (Name g_int Load) (list (fn_2 &p:0 &n:0)) nil) None) (Assign (list (Name &ans:0 Store)) (BinOp (Name &needed:0 Load) Sub (Name &w:0 Load)) None) (If (Compare (Name &ans:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (List (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &percent:0 Store)) (BinOp (Name &y:0 Load) Div (Constant i100 None)) None) (Assign (list (Name &minimum:0 Store)) (BinOp (Name &n:0 Load) Mult (Name &percent:0 Load)) None) (If (Compare (Name &minimum:0 Load) (list NotEq) (list (BinOp (Name &minimum:0 Load) FloorDiv (Constant i1 None)))) (/seq (Assign (list (Name &minimum:0 Store)) (BinOp (BinOp (Name &minimum:0 Load) FloorDiv (Constant i1 None)) Add (Constant i1 None)) None)) nil) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &minimum:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Constant i0 None)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (Name &minimum:0 Load) Sub (Name &x:0 Load))) nil)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Assign (list (Name &x:0 Store)) (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) None) (Assign (list (Name &y:0 Store)) (Constant i0 None) None) (If (Compare (BinOp (Name &x:0 Load) Mod (Constant i100 None)) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &y:0 Store)) (Constant i1 None) None)) nil) (AugAssign (Name &y:0 Store) Add (Call (Name g_int Load) (list (BinOp (Name &x:0 Load) Div (Constant i100 None))) nil)) (If (Compare (Name &b:0 Load) (list GtE) (list (Name &y:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &y:0 Load) Sub (Name &b:0 Load))) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Assign (list (Name &r:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (Name &b:0 Load) Div (Name &a:0 Load)) Mult (Constant i100 None)) (list Lt) (list (Name &c:0 Load))) (/seq (AugAssign (Name &b:0 Store) Add (Constant i1 None)) (AugAssign (Name &r:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &r:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &a:0 Store)) (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (Name &a:0 Load)) nil) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &a:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (Name &a:0 Load) Sub (Name &x:0 Load))) nil)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Sub (BinOp (Constant i100 None) Mult (Name &x:0 Load))) Add (Constant i99 None)) FloorDiv (Constant i100 None))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &string:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Name &string:0 Load) s_split Load) nil nil)) nil) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (If (Compare (Name &a:0 Load) (list Lt) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &a:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (ClassDef &data:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &a:2 Store) (Name &b:2 Store) (Name &c:2 Store)) Store)) (fn_1) None) (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Name &a:2 Load) None) (Assign (list (Attribute (Name &self:2 Load) s_x Store)) (Name &b:2 Load) None) (Assign (list (Attribute (Name &self:2 Load) s_y Store)) (Name &c:2 Load) None) (Expr (Call (Attribute (Name &self:2 Load) s_printit Load) nil nil))) nil None None) (FunctionDef &claculate:1 (arguments nil (list (arg &self:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &p:3 Store)) (BinOp (Attribute (Name &self:3 Load) s_y Load) Div (Constant i100 None)) None) (Assign (list (Name &p:3 Store)) (BinOp (Name &p:3 Load) Mult (Attribute (Name &self:3 Load) s_n Load)) None) (Assign (list (Name &p:3 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (Name &p:3 Load)) nil) None) (Assign (list (Name &p:3 Store)) (Call (Name g_int Load) (list (Name &p:3 Load)) nil) None) (Assign (list (Name &p:3 Store)) (BinOp (Name &p:3 Load) Sub (Attribute (Name &self:3 Load) s_x Load)) None) (If (Compare (Name &p:3 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &p:3 Store)) (Constant i0 None) None)) nil) (Return (Name &p:3 Load))) nil None None) (FunctionDef &printit:1 (arguments nil (list (arg &self:4 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Name &self:4 Load) s_claculate Load) nil nil)) nil))) nil None None)) nil) (Assign (list (Name &inp:0 Store)) (Call (Name &data:0 Load) nil nil) None)) nil)",
            "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil) None) (If (Compare (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) (list LtE) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (If (Compare (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) (list Gt) (list (Name &x:0 Load))) (/seq (If (BoolOp And (list (Compare (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) (list Gt) (list (Call (Name g_int Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil))) (Compare (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) (list Lt) (list (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) Add (Constant i1 None)))))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) Add (Constant i1 None)) Sub (Name &x:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load))) nil))))) nil)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Import (list (alias &math:0 None))) (If (Compare (BinOp (BinOp (Name &x:0 Load) Div (Name &n:0 Load)) Mult (Constant i100 None)) (list GtE) (list (Name &y:0 Load))) (/seq (fn_3)) (/seq (Assign (list (Name &z:0 Store)) (Call (Attribute (Name &math:0 Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) None) (Expr (Call (Name g_print Load) (list (BinOp (Name &z:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &nxy:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &n:0 Store)) (Subscript (Name &nxy:0 Load) (Constant i0 None) Load) None) (Assign (list (Name &x:0 Store)) (Subscript (Name &nxy:0 Load) (Constant i1 None) Load) None) (Assign (list (Name &y:0 Store)) (Subscript (Name &nxy:0 Load) (Constant i2 None) Load) None) (Assign (list (Name &indemo:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (Assign (list (Name &clones:0 Store)) (Constant i0 None) None) (If (Compare (BinOp (Name &indemo:0 Load) Sub (Name &x:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &clones:0 Store)) (BinOp (Name &indemo:0 Load) Sub (Name &x:0 Load)) None)) nil) (Expr (Call (Name g_print Load) (list (Name &clones:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_float Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &l:0 Store)) (Name &x:0 Load) None) (While (Compare (BinOp (BinOp (Name &l:0 Load) Div (Name &n:0 Load)) Mult (Constant i100 None)) (list Lt) (list (Name &y:0 Load))) (/seq (Assign (list (Name &l:0 Store)) (BinOp (Name &l:0 Load) Add (Constant i1 None)) None)) nil) (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (Name &l:0 Load) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &need:0 Store)) (BinOp (BinOp (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Add (Constant i99 None)) FloorDiv (Constant i100 None)) Sub (Name &x:0 Load)) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Name &need:0 Load) (Constant i0 None)) nil)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &final:0 Store)) (BinOp (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load)) None) (If (Compare (Name &final:0 Load) (list Lt) (list (Constant i0 None))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (Name &final:0 Load)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &y:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (If (Compare (Name &y:0 Load) (list Lt) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &y:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (Call (Name g_int Load) (list (BinOp (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load))) nil)) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (Call (Name g_int Load) (list (BinOp (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) FloorDiv (Constant i100 None)) Add (Compare (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Mod (Constant i100 None)) (list NotEq) (list (Constant i0 None)))) Sub (Name &x:0 Load))) nil)) nil)) nil))) nil)",
            "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (ImportFrom s_math (list (alias &ceil:1 None)) i0) (Assign (list (Tuple (list (Name &n:1 Store) (Name &x:1 Store) (Name &y:1 Store)) Store)) (fn_1) None) (Assign (list (Name &ans:1 Store)) (BinOp (Call (Name &ceil:1 Load) (list (BinOp (BinOp (Name &y:1 Load) Div (Constant f100.0 None)) Mult (Name &n:1 Load))) nil) Sub (Name &x:1 Load)) None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (Name &ans:1 Load) (list Gt) (list (Constant i0 None))) (Name &ans:1 Load) (Constant i0 None))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &req:0 Store)) (fn_2 &n:0 &y:0) None) (Assign (list (Name &deficient:0 Store)) (Call (Name g_int Load) (list (BinOp (Name &req:0 Load) Sub (Name &x:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (Name &deficient:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Name &__copyright__:0 Store)) (Constant s_ None) None) (Assign (list (Name &__author__:0 Store)) (Constant s-WzgzLCAxMTEsIDExMCwgNDUsIDcyLCAxMTcsIDEyMSwgMzIsIDg0LCA4MiwgNjUsIDc4XQ== None) None) (Assign (list (Name &__email__:0 Store)) (Constant s-WzExNSwgMTExLCAxMTAsIDEwNCwgMTE3LCAxMjEsIDExNiwgMTE0LCA5NywgMTEwLCA2NCwgMTAzLCAxMDksIDk3LCAxMDUsIDEwOCwgNDYsIDk5LCAxMTEsIDEwOV0= None) None) (Assign (list (Name &__doc__:0 Store)) (Constant s_ None) None) (Assign (list (Name &__version__:0 Store)) (Constant s_1.0 None) None) (ImportFrom s_math (list (alias &ceil:0 None)) i0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &n:1 Store) (Name &x:1 Store) (Name &y:1 Store)) Store)) (fn_1) None) (If (Compare (BinOp (BinOp (Name &x:1 Load) Div (Name &n:1 Load)) Mult (Constant i100 None)) (list GtE) (list (Name &y:1 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (Call (Name &ceil:0 Load) (list (BinOp (BinOp (BinOp (Name &n:1 Load) Mult (Name &y:1 Load)) Div (Constant i100 None)) Sub (Name &x:1 Load))) nil)) nil)))) (Return (Constant i0 None))) nil (Name g_int Load) None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name g_exit Load) (list (Call (Name &main:0 Load) nil nil)) nil))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (FunctionDef &question1:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &total_people:1 Store) (Name &wizzards:1 Store) (Name &percent_required:1 Store)) Store)) (fn_1) None) (Assign (list (Name &required_people:1 Store)) (fn_2 &percent_required:1 &total_people:1) None) (If (Compare (Name &required_people:1 Load) (list LtE) (list (Name &wizzards:1 Load))) (/seq (Return (Constant i0 None))) nil) (Return (BinOp (Name &required_people:1 Load) Sub (Name &wizzards:1 Load)))) nil None None) (Assign (list (Name &remained_test_cases:0 Store)) (Constant i1 None) None) (While (Compare (Name &remained_test_cases:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name &question1:0 Load) nil nil)) nil)) (AugAssign (Name &remained_test_cases:0 Store) Sub (Constant i1 None))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &a:0 Store)) (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) None) (If (Compare (Call (Name g_round Load) (list (Name &a:0 Load)) nil) (list Gt) (list (Name &a:0 Load))) (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_round Load) (list (Name &a:0 Load)) nil) None)) nil) (If (Compare (Call (Name g_round Load) (list (Name &a:0 Load)) nil) (list Lt) (list (Name &a:0 Load))) (/seq (Assign (list (Name &a:0 Store)) (BinOp (Call (Name g_round Load) (list (Name &a:0 Load)) nil) Add (Constant i1 None)) None)) nil) (If (Compare (Name &x:0 Load) (list Eq) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (If (Compare (BinOp (Name &a:0 Load) Sub (Name &x:0 Load)) (list GtE) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (Name &a:0 Load) Sub (Name &x:0 Load))) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &z:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Div (Constant i100 None)) Mult (Name &z:0 Load))) nil) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &n:1 Store) (Name &x:1 Store) (Name &y:1 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:1 Load) Mult (Name &y:1 Load)) Div (Constant i100 None))) nil) Sub (Name &x:1 Load))) nil)) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (UnaryOp USub (Name &x:0 Load)) Sub (BinOp (BinOp (UnaryOp USub (Name &n:0 Load)) Mult (Name &y:0 Load)) FloorDiv (Constant i100 None)))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Name &temp:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_rstrip Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &n:0 Store)) (Subscript (Name &temp:0 Load) (Constant i0 None) Load) None) (Assign (list (Name &x:0 Store)) (Subscript (Name &temp:0 Load) (Constant i1 None) Load) None) (Assign (list (Name &y:0 Store)) (Subscript (Name &temp:0 Load) (Constant i2 None) Load) None) (Assign (list (Name &totalRequired:0 Store)) (fn_2 &y:0 &n:0) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &totalRequired:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &totalRequired:0 Load) Sub (Name &x:0 Load))) nil))))) nil)) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (ImportFrom s_math (list (alias &ceil:0 None)) i0) (Assign (list (Name &required:0 Store)) (Call (Name &ceil:0 Load) (list (BinOp (Name &n:0 Load) Mult (BinOp (Name &y:0 Load) Div (Constant i100 None)))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &required:0 Load) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) Sub (Name &x:0 Load))) nil)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (If (Compare (BinOp (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) FloorDiv (Constant i100 None)) Sub (Name &x:0 Load)) (list GtE) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (fn_2 &n:0 &y:0) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Assign (list (Name &g:0 Store)) (BinOp (BinOp (Name &c:0 Load) Sub (BinOp (BinOp (Name &b:0 Load) Div (Name &a:0 Load)) Mult (Constant i100 None))) Div (BinOp (Constant i100 None) Div (Name &a:0 Load))) None) (If (BoolOp And (list (Compare (Name &g:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Call (Name g_int Load) (list (Name &g:0 Load)) nil) (list NotEq) (list (Name &g:0 Load))))) (/seq (Assign (list (Name &g:0 Store)) (BinOp (Call (Name g_int Load) (list (Name &g:0 Load)) nil) Add (Constant i1 None)) None)) nil) (Expr (IfExp (Compare (Name &g:0 Load) (list Gt) (list (Constant i0 None))) (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &g:0 Load)) nil)) nil) (Call (Name g_print Load) (list (Constant i0 None)) nil)))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &z:0 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) None) (If (Compare (Name &z:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &z:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &w:0 Store)) (Name &x:0 Load) None) (AugAssign (Name &y:0 Store) Div (Constant i100 None)) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (Name &w:0 Load) Div (Name &n:0 Load)) (list Lt) (list (Name &y:0 Load))) (/seq (AugAssign (Name &w:0 Store) Add (Constant i1 None)) (AugAssign (Name &ans:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &ans:0 Store)) (BinOp (fn_2 &y:0 &n:0) Sub (Name &x:0 Load)) None) (If (Compare (Name &ans:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)) nil) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_* None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &xx:0 Store)) (BinOp (BinOp (Name &x:0 Load) Mult (Constant i100 None)) Div (Name &n:0 Load)) None) (Assign (list (Name &yy:0 Store)) (BinOp (Name &y:0 Load) Sub (Name &xx:0 Load)) None) (Assign (list (Name &z:0 Store)) (BinOp (BinOp (Name &yy:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) None) (If (Compare (Name &z:0 Load) (list LtE) (list (Constant i0 None))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_ceil Load) (list (Name &z:0 Load)) nil)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &requi:0 Store)) (BinOp (BinOp (Name &x:0 Load) Div (Name &n:0 Load)) Mult (Constant i100 None)) None) (If (Compare (Name &requi:0 Load) (list Lt) (list (Name &y:0 Load))) (/seq (For (Name &c:0 Store) (Call (Name g_range Load) (list (Constant i0 None) (BinOp (Constant i10 None) Pow (Constant i6 None))) nil) (/seq (Assign (list (Name &requi:0 Store)) (BinOp (BinOp (BinOp (Name &x:0 Load) Add (Name &c:0 Load)) Div (Name &n:0 Load)) Mult (Constant i100 None)) None) (If (Compare (Name &requi:0 Load) (list GtE) (list (Name &y:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil)) Break) nil)) nil None)) (/seq (fn_3)))) nil)",
            "(Module (/seq (FunctionDef &readln:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_tuple Load) (list (fn_1)) nil))) nil None None) (ImportFrom s_math (list (alias &ceil:0 None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name &readln:0 Load) nil nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Call (Name &ceil:0 Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Expr (Constant s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA4NCwgMTA0LCAxMTcsIDMyLCA2NSwgMTEyLCAxMTQsIDMyLCAzMiwgNTAsIDMyLCA0OCwgNTMsIDU4LCA1MiwgNDgsIDU4LCA0OCwgNTIsIDMyLCA1MCwgNDgsIDUwLCA0OCwgMTAsIDEwLCA2NCwgOTcsIDExNywgMTE2LCAxMDQsIDExMSwgMTE0LCA1OCwgMzIsIDk3LCAxMDgsIDEwMSwgMTIwLCAxMDUsIDEwXQ== None)) (Import (list (alias &math:0 None))) (FunctionDef &wizards_city:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &wizards:1 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &temp:1 Store)) (Call (Attribute (Name &math:0 Load) s_ceil Load) (list (BinOp (BinOp (Subscript (Name &wizards:1 Load) (Constant i0 None) Load) Div (Constant i100 None)) Mult (Subscript (Name &wizards:1 Load) (Constant i2 None) Load))) nil) None) (If (Compare (Subscript (Name &wizards:1 Load) (Constant i1 None) Load) (list GtE) (list (Name &temp:1 Load))) (/seq (Return (Constant i0 None))) (/seq (Return (BinOp (Name &temp:1 Load) Sub (Subscript (Name &wizards:1 Load) (Constant i1 None) Load)))))) nil None None) (Assign (list (Name &A:0 Store)) (Call (Name &wizards_city:0 Load) nil nil) None) (Expr (Call (Name g_print Load) (list (Name &A:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &z:0 Store)) (BinOp (Name &n:0 Load) Mult (BinOp (Name &y:0 Load) Mult (Constant f0.01 None))) None) (Assign (list (Name &m:0 Store)) (BinOp (Name &z:0 Load) Sub (Call (Name g_int Load) (list (Name &z:0 Load)) nil)) None) (If (Compare (Name &m:0 Load) (list Lt) (list (Constant f1e-11 None))) (/seq (If (Compare (Name &z:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (Name &z:0 Load) Sub (Name &x:0 Load))) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))) (/seq (If (Compare (BinOp (Name &z:0 Load) Add (Constant i1 None)) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (BinOp (Name &z:0 Load) Add (Constant i1 None)) Sub (Name &x:0 Load))) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &req:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &req:0 Load) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &n:1 Store) (Name &x:1 Store) (Name &y:1 Store)) Store)) (fn_1) None) (Assign (list (Name &y:1 Store)) (BinOp (Name &y:1 Load) Div (Constant i100 None)) None) (Assign (list (Name &people:1 Store)) (BinOp (Name &n:1 Load) Mult (Name &y:1 Load)) None) (Expr (IfExp (Compare (Call (Name g_int Load) (list (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (Name &people:1 Load)) nil) Sub (Name &x:1 Load))) nil) (list Gt) (list (Constant i0 None))) (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (Name &people:1 Load)) nil) Sub (Name &x:1 Load))) nil)) nil) (Call (Name g_print Load) (list (Constant i0 None)) nil)))) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_Counter None) (alias g_deque None)) i0) (Assign (list (Name &INF:0 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None) (FunctionDef &gcd:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (While (Name &b:1 Load) (/seq (Assign (list (Tuple (list (Name &a:1 Store) (Name &b:1 Store)) Store)) (Tuple (list (Name &b:1 Load) (BinOp (Name &a:1 Load) Mod (Name &b:1 Load))) Load) None)) nil) (Return (Name &a:1 Load))) nil None None) (FunctionDef &isPrime:0 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:2 Load) (list LtE) (list (Constant i1 None))) (/seq (Return (Constant False None))) nil) (Assign (list (Name &i:2 Store)) (Constant i2 None) None) (While (Compare (BinOp (Name &i:2 Load) Pow (Constant i2 None)) (list LtE) (list (Name &n:2 Load))) (/seq (If (Compare (BinOp (Name &n:2 Load) Mod (Name &i:2 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant False None))) nil) (AugAssign (Name &i:2 Store) Add (Constant i1 None))) nil) (Return (Constant True None))) nil None None) (FunctionDef &primeFactor:0 (arguments nil (list (arg &n:3 None None)) None nil nil None nil) (/seq (If (Compare (BinOp (Name &n:3 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i2 None))) nil) (Assign (list (Name &i:3 Store)) (Constant i3 None) None) (While (Compare (BinOp (Name &i:3 Load) Pow (Constant i2 None)) (list LtE) (list (Name &n:3 Load))) (/seq (If (Compare (BinOp (Name &n:3 Load) Mod (Name &i:3 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &i:3 Load))) nil) (AugAssign (Name &i:3 Store) Add (Constant i1 None))) nil) (Return (Name &n:3 Load))) nil None None) (FunctionDef &vars:0 (arguments nil nil None nil nil None nil) (/seq (Return (fn_1))) nil None None) (FunctionDef &array:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (fn_1)) nil))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &n:4 Store) (Name &x:4 Store) (Name &y:4 Store)) Store)) (Call (Name &vars:0 Load) nil nil) None) (Assign (list (Name &p:4 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (Name &n:4 Load) Mult (BinOp (Name &y:4 Load) Div (Constant i100 None)))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &p:4 Load) Sub (Name &x:4 Load))) nil)) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Name &t:0 Store)) (Constant i1 None) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil None)) nil)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Subscript (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) (Slice None (Constant i3 None) None) Load)) nil) None) (If (Compare (Name &x:0 Load) (list GtE) (list (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (Name &y:0 Load) Mult (Name &n:0 Load))) nil) Div (Constant i100 None)))) (/seq (fn_3)) (/seq (Assign (list (Name &k:0 Store)) (fn_2 &n:0 &y:0) None) (Assign (list (Name &p:0 Store)) (BinOp (Name &k:0 Load) Sub (Name &x:0 Load)) None) (Expr (Call (Name g_print Load) (list (Name &p:0 Load)) nil))))) nil)",
            "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil) None) (Assign (list (Name &per:0 Store)) (BinOp (BinOp (Name &x:0 Load) Mult (Constant i100 None)) Div (Name &n:0 Load)) None) (Assign (list (Name &y:0 Store)) (BinOp (Name &y:0 Load) Sub (Name &per:0 Load)) None) (If (Compare (Name &y:0 Load) (list LtE) (list (Constant i0 None))) (/seq (fn_3)) (/seq (If (Compare (BinOp (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) Sub (Call (Name g_int Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) Add (Constant i1 None))) nil))))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &total:0 Store)) (BinOp (Name &n:0 Load) Mult (BinOp (Name &y:0 Load) Div (Constant i100 None))) None) (Assign (list (Name &total:0 Store)) (Call (Name g_ceil Load) (list (Name &total:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &total:0 Load) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Name &n:0 Load)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Name &x:0 Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Name &y:0 Load)) nil) None) (Import (list (alias &math:0 None))) (Assign (list (Name &needed:0 Store)) (Call (Attribute (Name &math:0 Load) s_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) None) (If (Compare (Name &needed:0 Load) (list GtE) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &needed:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Assign (list (Name &p:0 Store)) (BinOp (BinOp (Name &x:0 Load) Mult (Constant i100 None)) Div (Name &n:0 Load)) None) (If (Compare (Name &p:0 Load) (list GtE) (list (Name &y:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil)) Break) nil) (AugAssign (Name &x:0 Store) Add (Constant i1 None)) (AugAssign (Name &c:0 Store) Add (Constant i1 None))) nil)) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (Assign (list (Name &p:0 Store)) (BinOp (BinOp (Name &x:0 Load) Mult (Constant i100 None)) Div (Name &n:0 Load)) None) (While (Compare (Name &p:0 Load) (list Lt) (list (Name &y:0 Load))) (/seq (AugAssign (Name &x:0 Store) Add (Constant i1 None)) (Assign (list (Name &p:0 Store)) (BinOp (BinOp (Name &x:0 Load) Mult (Constant i100 None)) Div (Name &n:0 Load)) None) (AugAssign (Name &k:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &k:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &data:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &data:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &data:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &data:0 Load) (Constant i2 None) Load)) nil) None) (Assign (list (Name &demo:0 Store)) (fn_2 &n:0 &y:0) None) (If (Compare (Name &demo:0 Load) (list Lt) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (Assign (list (Name &res:0 Store)) (Call (Name g_abs Load) (list (BinOp (Name &x:0 Load) Sub (Name &demo:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Assign (list (Name &w:0 Store)) (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None)) None) (If (Compare (BinOp (Name &w:0 Load) Sub (Name &b:0 Load)) (list Lt) (list (Constant i0 None))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (Name &w:0 Load) Sub (Name &b:0 Load))) nil)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &re:0 Store)) (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) None) (Assign (list (Name &r:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (Name &re:0 Load)) nil) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &r:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &r:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &tot:0 Store)) (Call (Name g_int Load) (list (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant f100.0 None))) nil)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &tot:0 Load) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (If (Compare (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Mod (Constant i100 None)) (list NotEq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load)) Add (Constant i1 None)) (list Lt) (list (Constant i0 None))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load)) Add (Constant i1 None))) nil))))) (/seq (If (Compare (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load)) (list Lt) (list (Constant i0 None))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load))) nil))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) (list (Constant s_ None)) nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil) None) (Assign (list (Name &s:0 Store)) (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) None) (If (Compare (BinOp (Name &s:0 Load) Mod (Constant i100 None)) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_int Load) (list (BinOp (Name &s:0 Load) Div (Constant i100 None))) nil) None) (Assign (list (Name &s:0 Store)) (BinOp (Name &s:0 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_int Load) (list (BinOp (Name &s:0 Load) Div (Constant i100 None))) nil) None))) (If (Compare (Name &s:0 Load) (list Lt) (list (Name &x:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)) (/seq (Assign (list (Name &ans:0 Store)) (BinOp (Name &s:0 Load) Sub (Name &x:0 Load)) None))) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (If (Compare (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) (list Lt) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) Sub (Name &x:0 Load))) nil)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &w:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Assign (list (Name &k:0 Store)) (BinOp (BinOp (Name &c:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) None) (If (Compare (Call (Name g_int Load) (list (Name &k:0 Load)) nil) (list NotEq) (list (Name &k:0 Load))) (/seq (Assign (list (Name &k:0 Store)) (BinOp (Call (Name g_int Load) (list (Name &k:0 Load)) nil) Add (Constant i1 None)) None)) nil) (Expr (Call (Name g_print Load) (list (IfExp (Compare (BinOp (Call (Name g_int Load) (list (Name &k:0 Load)) nil) Sub (Name &w:0 Load)) (list Gt) (list (Constant i0 None))) (BinOp (Call (Name g_int Load) (list (Name &k:0 Load)) nil) Sub (Name &w:0 Load)) (Constant i0 None))) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (If (Compare (BinOp (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &a:0 Store)) (BinOp (Call (Name g_int Load) (list (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil)) nil) Sub (Name &x:0 Load)) None) (If (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &a:0 Store)) (Constant i0 None) None)) nil) (Expr (Call (Name g_print Load) (list (Name &a:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &n:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &n:0 Load) (Constant i2 None) Load)) nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &n:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &t:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &y:0 Load)) None) (Assign (list (Name &res:0 Store)) (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) None) (If (UnaryOp Not (Compare (Name &res:0 Load) (list Eq) (list (Call (Name g_round Load) (list (Name &res:0 Load)) nil)))) (/seq (Assign (list (Name &res:0 Store)) (BinOp (Call (Name g_int Load) (list (Name &res:0 Load)) nil) Add (Constant i1 None)) None)) nil) (Assign (list (Name &res:0 Store)) (Call (Name g_int Load) (list (BinOp (UnaryOp USub (Name &x:0 Load)) Add (Name &res:0 Load))) nil) None) (Assign (list (Name &res:0 Store)) (Call (Name g_max Load) (list (Name &res:0 Load) (Constant i0 None)) nil) None) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (ImportFrom s_functools (list (alias g_reduce None)) i0) (ImportFrom s_collections (list (alias g_Counter None)) i0) (Import (list (alias g_time None))) (Import (list (alias g_datetime None))) (Import (list (alias g_math None))) (FunctionDef &ip:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)) nil))) nil None None) (FunctionDef &sip:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))) nil None None) (FunctionDef &mip:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &mips:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_str Load) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &lip:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (FunctionDef &matip:0 (arguments nil (list (arg &n:1 None None) (arg &m:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &lst:1 Store)) (List nil Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:1 Load)) nil) (/seq (Assign (list (Name &arr:1 Store)) (Call (Name &lip:0 Load) nil nil) None) (Expr (Call (Attribute (Name &lst:1 Load) s_append Load) (list (Name &arr:1 Load)) nil))) nil None) (Return (Name &lst:1 Load))) nil None None) (FunctionDef &factors:0 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Call (Name g_reduce Load) (list (Attribute (Name g_list Load) s___add__ Load) (GeneratorExp (List (list (Name &i:7 Load) (BinOp (Name &n:2 Load) FloorDiv (Name &i:7 Load))) Load) (list (comprehension (Name &i:7 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Call (Name g_int Load) (list (BinOp (Name &n:2 Load) Pow (Constant f0.5 None))) nil) Add (Constant i1 None))) nil) (list (Compare (BinOp (Name &n:2 Load) Mod (Name &i:7 Load)) (list Eq) (list (Constant i0 None)))) i0)))) nil)) nil)) nil))) nil None None) (FunctionDef &minJumps:0 (arguments nil (list (arg &arr:3 None None) (arg &n:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &jumps:3 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:6 Store) (Call (Name g_range Load) (list (Name &n:3 Load)) nil) nil i0))) None) (If (BoolOp Or (list (Compare (Name &n:3 Load) (list Eq) (list (Constant i0 None))) (Compare (Subscript (Name &arr:3 Load) (Constant i0 None) Load) (list Eq) (list (Constant i0 None))))) (/seq (Return (Call (Name g_float Load) (list (Constant s_inf None)) nil))) nil) (Assign (list (Subscript (Name &jumps:3 Load) (Constant i0 None) Store)) (Constant i0 None) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &n:3 Load)) nil) (/seq (Assign (list (Subscript (Name &jumps:3 Load) (Name &i:3 Load) Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None) (For (Name &j:3 Store) (Call (Name g_range Load) (list (Name &i:3 Load)) nil) (/seq (If (BoolOp And (list (Compare (Name &i:3 Load) (list LtE) (list (BinOp (Name &j:3 Load) Add (Subscript (Name &arr:3 Load) (Name &j:3 Load) Load)))) (Compare (Subscript (Name &jumps:3 Load) (Name &j:3 Load) Load) (list NotEq) (list (Call (Name g_float Load) (list (Constant s_inf None)) nil))))) (/seq (Assign (list (Subscript (Name &jumps:3 Load) (Name &i:3 Load) Store)) (Call (Name g_min Load) (list (Subscript (Name &jumps:3 Load) (Name &i:3 Load) Load) (BinOp (Subscript (Name &jumps:3 Load) (Name &j:3 Load) Load) Add (Constant i1 None))) nil) None) Break) nil)) nil None)) nil None) (Return (Subscript (Name &jumps:3 Load) (BinOp (Name &n:3 Load) Sub (Constant i1 None)) Load))) nil None None) (FunctionDef &dic:0 (arguments nil (list (arg &arr:4 None None)) None nil nil None nil) (/seq (Return (Call (Name g_Counter Load) (list (Name &arr:4 Load)) nil))) nil None None) (FunctionDef &check_prime:0 (arguments nil (list (arg &n:5 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:5 Load) (list Lt) (list (Constant i2 None))) (/seq (Return (Constant False None))) nil) (For (Name &i:5 Store) (Call (Name g_range Load) (list (Constant i2 None) (BinOp (Call (Name g_int Load) (list (BinOp (Name &n:5 Load) Pow (Constant f0.5 None))) nil) Add (Constant i1 None)) (Constant i2 None)) nil) (/seq (If (Compare (BinOp (Name &n:5 Load) Mod (Name &i:5 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant False None))) nil)) nil None) (Return (Constant True None))) nil None None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name &mip:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (Name &a:0 Load)) nil) None) (If (Compare (Name &a:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &a:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Assign (list (Name &a:0 Store)) (BinOp (BinOp (BinOp (Name &c:0 Load) Mult (Name &a:0 Load)) Add (Constant i99 None)) FloorDiv (Constant i100 None)) None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)) (list Lt) (list (Constant i0 None))) (Constant i0 None) (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)))) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (AugAssign (Name &c:0 Store) Div (Constant i100 None)) (AugAssign (Name &a:0 Store) Mult (Name &c:0 Load)) (AugAssign (Name &a:0 Store) Mult (Constant i10 None)) (Assign (list (Name &finals:0 Store)) (Constant i0 None) None) (If (Compare (BinOp (Name &a:0 Load) Mod (Constant i10 None)) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &a:0 Store) Div (Constant i10 None)) (Assign (list (Name &finals:0 Store)) (BinOp (Call (Name g_int Load) (list (Name &a:0 Load)) nil) Add (Constant i1 None)) None)) (/seq (AugAssign (Name &a:0 Store) Div (Constant i10 None)) (Assign (list (Name &finals:0 Store)) (Call (Name g_int Load) (list (Name &a:0 Load)) nil) None))) (If (Compare (Name &finals:0 Load) (list LtE) (list (Name &b:0 Load))) (/seq (Assign (list (Name &finals:0 Store)) (Constant i0 None) None) (Expr (Call (Name g_print Load) (list (Name &finals:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &finals:0 Load) Sub (Name &b:0 Load))) nil))))) nil)",
            "(Module (/seq (FunctionDef &wizard:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &k:1 Store)) (Constant i3 None) None) (Assign (list (Tuple (list (Name &n:1 Store) (Name &x:1 Store) (Name &y:1 Store)) Store)) (Subscript (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil)) nil)) nil) (Slice None (Name &k:1 Load) None) Load) None) (Assign (list (Name &res:1 Store)) (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (BinOp (Name &n:1 Load) Mult (Name &y:1 Load)) Div (Constant i100 None)) Add (Compare (BinOp (BinOp (Name &n:1 Load) Mult (Name &y:1 Load)) Mod (Constant i100 None)) (list NotEq) (list (Constant i0 None))))) nil) Sub (Name &x:1 Load)) None) (If (Compare (Name &res:1 Load) (list Gt) (list (Constant i0 None))) (/seq (Return (Name &res:1 Load))) (/seq (Return (Constant i0 None))))) nil None None) (Expr (Call (Name g_print Load) (list (Call (Name &wizard:0 Load) nil nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &w:0 Store) (Name &p:0 Store)) Store)) (fn_1) None) (Assign (list (Name &x:0 Store)) (BinOp (BinOp (Name &n:0 Load) Mult (Name &p:0 Load)) Div (Constant i100 None)) None) (If (Compare (BinOp (Name &x:0 Load) Mod (Constant i1 None)) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Call (Name g_int Load) (list (BinOp (Name &x:0 Load) Sub (Name &w:0 Load))) nil) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (Name &x:0 Load) Sub (Name &w:0 Load))) nil)) nil))) (/seq (fn_3)))) (/seq (If (Compare (BinOp (BinOp (Call (Name g_int Load) (list (Name &x:0 Load)) nil) Add (Constant i1 None)) Sub (Name &w:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (BinOp (Call (Name g_int Load) (list (Name &x:0 Load)) nil) Add (Constant i1 None)) Sub (Name &w:0 Load))) nil))) (/seq (fn_3)))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &required:0 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &required:0 Load) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &P:0 Store) (Name &N:0 Store) (Name &rate:0 Store)) Store)) (fn_1) None) (Assign (list (Name &need:0 Store)) (BinOp (BinOp (Name &P:0 Load) Mult (Name &rate:0 Load)) Div (Constant i100 None)) None) (If (Compare (BinOp (BinOp (Name &P:0 Load) Mult (Name &rate:0 Load)) Mod (Constant i100 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &need:0 Store)) (BinOp (BinOp (Name &P:0 Load) Mult (Name &rate:0 Load)) FloorDiv (Constant i100 None)) None)) (/seq (Assign (list (Name &need:0 Store)) (BinOp (BinOp (BinOp (Name &P:0 Load) Mult (Name &rate:0 Load)) FloorDiv (Constant i100 None)) Add (Constant i1 None)) None))) (If (Compare (Name &need:0 Load) (list Gt) (list (Name &N:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &need:0 Load) Sub (Name &N:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Name &l:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &l:0 Store)) (Call (Attribute (Name &l:0 Load) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &l:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &l:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &l:0 Load) (Constant i2 None) Load)) nil) None) (Assign (list (Name &k:0 Store)) (UnaryOp USub (BinOp (UnaryOp USub (BinOp (Name &y:0 Load) Mult (Name &n:0 Load))) FloorDiv (Constant i100 None))) None) (Assign (list (Name &k:0 Store)) (BinOp (Name &k:0 Load) Sub (Name &x:0 Load)) None) (If (Compare (Name &k:0 Load) (list GtE) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &k:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Name g_math Load) s_ceil Load) (list (UnaryOp USub (Call (Name g_min Load) (list (Constant i0 None) (BinOp (BinOp (BinOp (UnaryOp USub (Name &a:0 Load)) Mult (Name &c:0 Load)) Div (Constant i100 None)) Add (Name &b:0 Load))) nil))) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &p:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (BinOp (Constant i10 None) Pow (Constant i6 None)) Add (Constant i1 None))) nil) (/seq (If (Compare (BinOp (BinOp (Name &x:0 Load) Add (Name &p:0 Load)) Div (Name &n:0 Load)) (list GtE) (list (BinOp (Name &y:0 Load) Div (Constant i100 None)))) (/seq (Expr (Call (Name g_print Load) (list (Name &p:0 Load)) nil)) Break) nil) (AugAssign (Name &p:0 Store) Add (Constant i1 None))) nil None)) nil)",
            "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (List (list (Name &n:1 Store) (Name &x:1 Store) (Name &y:1 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &_:2 Load)) nil) (list (comprehension (Name &_:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &a:1 Store)) (BinOp (BinOp (BinOp (Name &n:1 Load) Div (Constant i100 None)) Mult (Name &y:1 Load)) Sub (Name &x:1 Load)) None) (If (Compare (Name &a:1 Load) (list LtE) (list (Constant i0 None))) (/seq (fn_3)) (/seq (ImportFrom s_math (list (alias &ceil:1 None)) i0) (Expr (Call (Name g_print Load) (list (Call (Name &ceil:1 Load) (list (Name &a:1 Load)) nil)) nil))))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (fn_2 &y:0 &n:0) Sub (Name &x:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Name &n:0 Load)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Name &x:0 Load)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_int Load) (list (Name &y:0 Load)) nil) None) (Assign (list (Name &p:0 Store)) (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)) None) (If (Compare (Name &p:0 Load) (list NotEq) (list (Call (Name g_int Load) (list (Name &p:0 Load)) nil))) (/seq (Assign (list (Name &p:0 Store)) (Call (Name g_int Load) (list (BinOp (Name &p:0 Load) Add (Constant i1 None))) nil) None)) (/seq (Assign (list (Name &p:0 Store)) (Call (Name g_int Load) (list (Name &p:0 Load)) nil) None))) (Assign (list (Name &r:0 Store)) (BinOp (Name &p:0 Load) Sub (Name &x:0 Load)) None) (If (Compare (Name &r:0 Load) (list GtE) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &r:0 Load)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store) (Name &percentage:0 Store)) Store)) (fn_1) None) (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (Name &percentage:0 Load) Div (Constant i100 None)) Mult (Name &x:0 Load)) None) (If (Compare (Name &ans:0 Load) (list Gt) (list (Name &y:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_ceil Load) (list (BinOp (Name &ans:0 Load) Sub (Name &y:0 Load))) nil)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &w:0 Store) (Name &p:0 Store)) Store)) (fn_1) None) (Import (list (alias &math:0 None))) (Assign (list (Name &rq:0 Store)) (Call (Attribute (Name &math:0 Load) s_ceil Load) (list (BinOp (BinOp (Name &p:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (Expr (IfExp (Compare (BinOp (Name &rq:0 Load) Sub (Name &w:0 Load)) (list Gt) (list (Constant i0 None))) (Call (Name g_print Load) (list (BinOp (Name &rq:0 Load) Sub (Name &w:0 Load))) nil) (Call (Name g_print Load) (list (Constant i0 None)) nil)))) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (Import (list (alias g_math None) (alias g_sys None))) (ImportFrom s_itertools (list (alias g_permutations None) (alias g_combinations None)) i0) (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None) (alias g_OrderedDict None)) i0) (ImportFrom s_os (list (alias g_path None)) i0) (Import (list (alias s_bisect g_bi))) (Import (list (alias g_heapq None))) (FunctionDef &yes:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil None None) (FunctionDef &no:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) nil None None) (If (Call (Attribute (Name g_path Load) s_exists Load) (list (Constant s_input.txt None)) nil) (/seq (Assign (list (Attribute (Name g_sys Load) s_stdin Store)) (Call (Name g_open Load) (list (Constant s_input.txt None) (Constant s_r None)) nil) None) (Assign (list (Attribute (Name g_sys Load) s_stdout Store)) (Call (Name g_open Load) (list (Constant s_output.txt None) (Constant s_w None)) nil) None) (FunctionDef &I:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil))) nil None None) (FunctionDef &In:0 (arguments nil nil None nil nil None nil) (/seq (Return (fn_1))) nil None None)) (/seq (FunctionDef &I:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil))) nil None None) (FunctionDef &In:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil))) nil None None))) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Try (/seq (Assign (list (Tuple (list (Name &n:1 Store) (Name &x:1 Store) (Name &y:1 Store)) Store)) (Call (Name &In:0 Load) nil nil) None) (Assign (list (Name &per:1 Store)) (fn_2 &n:1 &y:1) None) (Assign (list (Name &per:1 Store)) (BinOp (Name &x:1 Load) Sub (Name &per:1 Load)) None) (If (Compare (Name &per:1 Load) (list GtE) (list (Constant i0 None))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_abs Load) (list (Name &per:1 Load)) nil)) nil))))) (list (ExceptHandler None None (/seq Pass))) nil nil)) nil None None) (Assign (list (Name &M:0 Store)) (Constant i998244353 None) None) (Assign (list (Name &P:0 Store)) (Constant i1000000007 None) None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (For (Name &_:0 Store) (Call (Name g_range Load) (list (Constant i1 None)) nil) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil None)) nil)) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (If (Compare (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Mod (Constant i100 None)) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &x:0 Load) (list Lt) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) FloorDiv (Constant i100 None)))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) FloorDiv (Constant i100 None)) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) (/seq (Assign (list (Name &res:0 Store)) (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) FloorDiv (Constant i100 None)) Add (Constant i1 None)) None) (If (Compare (Name &x:0 Load) (list Lt) (list (Name &res:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &res:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &p:0 Store)) (fn_2 &n:0 &y:0) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_abs Load) (list (BinOp (Name &p:0 Load) Sub (Name &x:0 Load))) nil) None) (If (Compare (Name &p:0 Load) (list Lt) (list (Name &x:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &req:0 Store)) (Call (Name g_int Load) (list (fn_2 &y:0 &n:0)) nil) None) (If (Compare (Name &x:0 Load) (list Gt) (list (Name &req:0 Load))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &req:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &a:0 Store)) (BinOp (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)) Sub (Name &x:0 Load)) None) (If (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None))) (/seq (fn_3)) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_ceil Load) (list (Name &a:0 Load)) nil)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &extraPeopleNeeded:0 Store)) (fn_2 &n:0 &y:0) None) (If (Compare (Name &extraPeopleNeeded:0 Load) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &extraPeopleNeeded:0 Load) Sub (Name &x:0 Load))) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (FunctionDef &wizards:0 (arguments nil (list (arg &n:1 None None) (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &percent:1 Store)) (fn_2 &y:1 &n:1) None) (If (Compare (Name &percent:1 Load) (list Gt) (list (Name &x:1 Load))) (/seq (Return (BinOp (Name &percent:1 Load) Sub (Name &x:1 Load)))) (/seq (Return (Constant i0 None))))) nil None None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &result:0 Store)) (Call (Name &wizards:0 Load) (list (Name &n:0 Load) (Name &x:0 Load) (Name &y:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Name &result:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Tuple (list (Call (Name g_int Load) (list (Name &n:0 Load)) nil) (Call (Name g_int Load) (list (Name &x:0 Load)) nil) (Call (Name g_int Load) (list (Name &y:0 Load)) nil)) Load) None) (Assign (list (Name &percent:0 Store)) (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)) None) (If (Compare (Call (Name g_int Load) (list (Name &percent:0 Load)) nil) (list NotEq) (list (Name &percent:0 Load))) (/seq (AugAssign (Name &percent:0 Store) Add (Constant i1 None)) (Assign (list (Name &percent:0 Store)) (Call (Name g_int Load) (list (Name &percent:0 Load)) nil) None)) nil) (Assign (list (Name &ans:0 Store)) (Call (Name g_int Load) (list (BinOp (Name &percent:0 Load) Sub (Name &x:0 Load))) nil) None) (If (Compare (Name &ans:0 Load) (list GtE) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) (/seq (fn_3)))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &d:0 Store)) (Constant i0 None) None) (Assign (list (Name &p:0 Store)) (BinOp (BinOp (Name &x:0 Load) Mult (Constant i100 None)) Div (Name &n:0 Load)) None) (While (Compare (Name &p:0 Load) (list Lt) (list (Name &y:0 Load))) (/seq (Assign (list (Name &d:0 Store)) (BinOp (Name &d:0 Load) Add (Constant i1 None)) None) (Assign (list (Name &x:0 Store)) (BinOp (Name &x:0 Load) Add (Constant i1 None)) None) (Assign (list (Name &p:0 Store)) (BinOp (BinOp (Name &x:0 Load) Mult (Constant i100 None)) Div (Name &n:0 Load)) None)) nil) (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &z:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &n:0 Store)) (Subscript (Name &z:0 Load) (Constant i0 None) Load) None) (Assign (list (Name &x:0 Store)) (Subscript (Name &z:0 Load) (Constant i1 None) Load) None) (Assign (list (Name &y:0 Store)) (Subscript (Name &z:0 Load) (Constant i2 None) Load) None) (Assign (list (Name &c:0 Store)) (BinOp (Name &x:0 Load) Div (Name &n:0 Load)) None) (Assign (list (Name &c:0 Store)) (BinOp (Name &c:0 Load) Mult (Constant i100 None)) None) (Assign (list (Name &c:0 Store)) (Call (Name g_round Load) (list (Name &c:0 Load) (Constant i4 None)) nil) None) (If (Compare (Name &c:0 Load) (list GtE) (list (Name &y:0 Load))) (/seq (fn_3)) (/seq (Assign (list (Name &p:0 Store)) (BinOp (BinOp (BinOp (Name &y:0 Load) Sub (Name &c:0 Load)) Mult (Name &n:0 Load)) Div (Constant i100 None)) None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Name g_math Load) s_ceil Load) (list (Name &p:0 Load)) nil)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:2 Load)) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) nil i0))) None) (FunctionDef &ceil:0 (arguments nil (list (arg &val:1 None None)) None nil nil None nil) (/seq (If (Compare (Call (Name g_int Load) (list (Name &val:1 Load)) nil) (list Eq) (list (Name &val:1 Load))) (/seq (Return (Call (Name g_int Load) (list (Name &val:1 Load)) nil))) (/seq (Return (BinOp (Call (Name g_int Load) (list (Name &val:1 Load)) nil) Add (Constant i1 None)))))) nil None None) (Assign (list (Name &num:0 Store)) (Call (Name &ceil:0 Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) None) (Assign (list (Name &count:0 Store)) (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &num:0 Load) Sub (Name &x:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (Name &count:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Assign (list (Name &need:0 Store)) (BinOp (Call (Name g_round Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Add (BoolOp And (list (Compare (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) (list Gt) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) FloorDiv (Constant i100 None)))) (Compare (Call (Name g_round Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) (list Lt) (list (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) FloorDiv (Constant i100 None)) Add (Constant i1 None))))))) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (BinOp (Name &need:0 Load) Sub (Name &x:0 Load)) (Constant i0 None)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &total:0 Store)) (Subscript (Name &arr:0 Load) (Constant i0 None) Load) None) (Assign (list (Name &wiz:0 Store)) (Subscript (Name &arr:0 Load) (Constant i1 None) Load) None) (Assign (list (Name &per:0 Store)) (Subscript (Name &arr:0 Load) (Constant i2 None) Load) None) (Assign (list (Name &required:0 Store)) (fn_2 &per:0 &total:0) None) (If (Compare (Name &required:0 Load) (list LtE) (list (Name &wiz:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &required:0 Load) Sub (Name &wiz:0 Load))) nil))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &mode:1 Store)) (Constant s_filee None) None) (If (Compare (Name &mode:1 Load) (list Eq) (list (Constant s_file None))) (/seq (Assign (list (Name &f:1 Store)) (Call (Name g_open Load) (list (Constant s_test.txt None) (Constant s_r None)) nil) None)) nil) (Assign (list (Name &get:1 Store)) (Lambda (arguments nil nil None nil nil None nil) (ListComp (Call (Name g_int Load) (list (Name &x:2 Load)) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (IfExp (Compare (Name &mode:1 Load) (list Eq) (list (Constant s_file None))) (Call (Attribute (Name &f:1 Load) s_readline Load) nil nil) (Call (Name g_input Load) nil nil)) s_split Load) nil nil) nil i0)))) None) (Assign (list (List (list (Name &n:1 Store) (Name &x:1 Store) (Name &y:1 Store)) Store)) (Call (Name &get:1 Load) nil nil) None) (Assign (list (Name &total:1 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &y:1 Load) Div (Constant i100 None)) Mult (Name &n:1 Load))) nil) None) (If (Compare (Name &total:1 Load) (list Gt) (list (Name &x:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &total:1 Load) Sub (Name &x:1 Load))) nil))) (/seq (fn_3))) (If (Compare (Name &mode:1 Load) (list Eq) (list (Constant s_file None))) (/seq (Expr (Call (Attribute (Name &f:1 Load) s_close Load) nil nil))) nil)) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (BinOp (Call (Name g_int Load) (list (BinOp (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)) Add (Constant f0.99999 None))) nil) Sub (Name &x:0 Load)) (Constant i0 None)) nil)) nil))) nil)"
        ]
    }
]
