["(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_Counter None)) i0)\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (Assign (list (Name &a:1 Store)) (Call (Name &readIntArr:0 Load) nil nil) None)\n        (Assign\n          (list (Name &b:1 Store))\n          (Call (Name g_sorted Load) (list (Name &a:1 Load)) (list (keyword s_reverse (Constant True None))))\n          None\n        )\n        (Assign (list (Name &m:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (Assign (list (Name &allans:1 Store)) (List nil Load) None)\n        (For\n          (Name &_:1 Store)\n          (Call (Name g_range Load) (list (Name &m:1 Load)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &k:1 Store) (Name &pos:1 Store)) Store))\n              (Call (Name &readIntArr:0 Load) nil nil)\n              None\n            )\n            (Assign\n              (list (Name &cnt:1 Store))\n              (Call\n                (Name g_Counter Load)\n                (list (Subscript (Name &b:1 Load) (Slice None (Name &k:1 Load) None) Load))\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &totalCnts:1 Store)) (Constant i0 None) None)\n            (For\n              (Name &x:1 Store)\n              (Name &a:1 Load)\n              (/seq\n                (If\n                  (Compare (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Load) (list Gt) (list (Constant i0 None)))\n                  (/seq\n                    (AugAssign (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Store) Sub (Constant i1 None))\n                    (AugAssign (Name &totalCnts:1 Store) Add (Constant i1 None))\n                    (If\n                      (Compare (Name &totalCnts:1 Load) (list Eq) (list (Name &pos:1 Load)))\n                      (/seq\n                        (Expr (Call (Attribute (Name &allans:1 Load) s_append Load) (list (Name &x:1 Load)) nil))\n                        Break\n                      )\n                      nil\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name &multiLineArrayPrint:0 Load) (list (Name &allans:1 Load)) nil))\n        (Return None)\n      )\n      nil\n      None\n      None\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (FunctionDef\n      &oneLineArrayPrint:0\n      (arguments nil (list (arg &arr:2 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call (Name g_str Load) (list (Name &x:11 Load)) nil)\n                    (list (comprehension (Name &x:11 Store) (Name &arr:2 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &multiLineArrayPrint:0\n      (arguments nil (list (arg &arr:3 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEwXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call (Name g_str Load) (list (Name &x:12 Load)) nil)\n                    (list (comprehension (Name &x:12 Store) (Name &arr:3 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &multiLineArrayOfArraysPrint:0\n      (arguments nil (list (arg &arr:4 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEwXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call\n                      (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                      (list\n                        (ListComp\n                          (Call (Name g_str Load) (list (Name &x:15 Load)) nil)\n                          (list (comprehension (Name &x:15 Store) (Name &y:13 Load) nil i0))\n                        )\n                      )\n                      nil\n                    )\n                    (list (comprehension (Name &y:13 Store) (Name &arr:4 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &readIntArr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:8 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:8 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &makeArr:0\n      (arguments nil (list (arg &defaultValFactory:5 None None) (arg &dimensionArr:5 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &dv:5 Store)) (Name &defaultValFactory:5 Load) None)\n        (Assign (list (Name &da:5 Store)) (Name &dimensionArr:5 Load) None)\n        (If\n          (Compare (Call (Name g_len Load) (list (Name &da:5 Load)) nil) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Return\n              (ListComp\n                (Call (Name &dv:5 Load) nil nil)\n                (list\n                  (comprehension\n                    (Name &_:9 Store)\n                    (Call (Name g_range Load) (list (Subscript (Name &da:5 Load) (Constant i0 None) Load)) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (Return\n              (ListComp\n                (Call\n                  (Name &makeArr:0 Load)\n                  (list (Name &dv:5 Load) (Subscript (Name &da:5 Load) (Slice (Constant i1 None) None None) Load))\n                  nil\n                )\n                (list\n                  (comprehension\n                    (Name &_:10 Store)\n                    (Call (Name g_range Load) (list (Subscript (Name &da:5 Load) (Constant i0 None) Load)) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &queryInteractive:0\n      (arguments nil (list (arg &i:6 None None) (arg &j:6 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzYzLCAzMiwgMTIzLCAxMjUsIDMyLCAxMjMsIDEyNV0= None) s_format Load)\n                (list (Name &i:6 Load) (Name &j:6 Load))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Attribute (Attribute (Name &sys:0 Load) s_stdout Load) s_flush Load) nil nil))\n        (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &answerInteractive:0\n      (arguments nil (list (arg &ans:7 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMzLCAzMiwgMTIzLCAxMjVd None) s_format Load)\n                (list\n                  (Call\n                    (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                    (list\n                      (ListComp\n                        (Call (Name g_str Load) (list (Name &x:14 Load)) nil)\n                        (list (comprehension (Name &x:14 Store) (Name &ans:7 Load) nil i0))\n                      )\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Attribute (Attribute (Name &sys:0 Load) s_stdout Load) s_flush Load) nil nil))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &inf:0 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None)\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (For\n      (Name &_abc:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None)) nil)\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &min_s:0\n      (arguments nil (list (arg &a:1 None None) (arg &k:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &res:1 Store)) (Call (Attribute (Name &a:1 Load) s_copy Load) nil nil) None)\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (BinOp (Call (Name g_len Load) (list (Name &a:1 Load)) nil) Sub (Name &k:1 Load)))\n            nil\n          )\n          (/seq\n            (Assign (list (Name &m:1 Store)) (Call (Name g_min Load) (list (Name &res:1 Load)) nil) None)\n            (Expr (Call (Attribute (Name &res:1 Load) s_reverse Load) nil nil))\n            (Expr (Call (Attribute (Name &res:1 Load) s_remove Load) (list (Name &m:1 Load)) nil))\n            (Expr (Call (Attribute (Name &res:1 Load) s_reverse Load) nil nil))\n          )\n          nil\n          None\n        )\n        (Return (Name &res:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:2 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:3 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:3 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &l:0 Store)) (Call (Name &min_s:0 Load) (list (Name &a:0 Load) (Name &k:0 Load)) nil) None)\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Subscript (Name &l:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &qs:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &q:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &qs:0 Load) s_append Load)\n            (list (List (list (Name &a:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) (Name &i:0 Load)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &qs:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &ret:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &used:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (ListComp\n        (UnaryOp USub (Constant i1 None))\n        (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &z:0 Store)\n      (Call (Name g_range Load) (list (Name &q:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:0 Store) (Name &pos:0 Store) (Name &o:0 Store)) Store))\n          (Subscript (Name &qs:0 Load) (Name &z:0 Load) Load)\n          None\n        )\n        (While\n          (Compare (Call (Name g_len Load) (list (Name &ret:0 Load)) nil) (list Lt) (list (Name &l:0 Load)))\n          (/seq\n            (Assign (list (Name &mx:0 Store)) (Constant i0 None) None)\n            (Assign (list (Name &ind:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n            (For\n              (Name &i:0 Store)\n              (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n              (/seq\n                (If\n                  (UnaryOp Not (Subscript (Name &used:0 Load) (Name &i:0 Load) Load))\n                  (/seq\n                    (If\n                      (Compare (Name &mx:0 Load) (list Lt) (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load)))\n                      (/seq\n                        (Assign (list (Name &mx:0 Store)) (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) None)\n                        (Assign (list (Name &ind:0 Store)) (Name &i:0 Load) None)\n                      )\n                      nil\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Assign (list (Subscript (Name &used:0 Load) (Name &ind:0 Load) Store)) (Constant i1 None) None)\n            (Expr (Call (Attribute (Name &ret:0 Load) s_append Load) (list (Name &mx:0 Load)) nil))\n          )\n          nil\n        )\n        (Assign (list (Name &c:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (If\n              (Subscript (Name &used:0 Load) (Name &i:0 Load) Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &c:0 Load) s_append Load)\n                    (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list\n            (Subscript\n              (Name &ans:0 Load)\n              (Subscript (Subscript (Name &qs:0 Load) (Name &z:0 Load) Load) (Constant i2 None) Load)\n              Store\n            )\n          )\n          (Subscript (Name &c:0 Load) (Name &pos:0 Load) Load)\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &q:0 Load)) nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Load)) nil)))\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a1:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Name &a:0 Load))\n        (list\n          (keyword\n            s_key\n            (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (UnaryOp USub (Name &x:1 Load)))\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &q:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &pos:0 Store) Sub (Constant i1 None))\n        (Assign (list (Name &notused:0 Store)) (Dict nil nil) None)\n        (For\n          (Name &j:0 Store)\n          (Subscript (Name &a1:0 Load) (Slice None (Name &k:0 Load) None) Load)\n          (/seq\n            (If\n              (Compare (Name &j:0 Load) (list In) (list (Name &notused:0 Load)))\n              (/seq (AugAssign (Subscript (Name &notused:0 Load) (Name &j:0 Load) Store) Add (Constant i1 None)))\n              (/seq (Assign (list (Subscript (Name &notused:0 Load) (Name &j:0 Load) Store)) (Constant i1 None) None))\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Name &a:0 Load)\n          (/seq\n            (If\n              (Compare (Name &j:0 Load) (list In) (list (Name &notused:0 Load)))\n              (/seq\n                (If\n                  (Compare (Name &pos:0 Load) (list Gt) (list (Constant i0 None)))\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &notused:0 Load) (Name &j:0 Load) Load)\n                        (list Gt)\n                        (list (Constant i1 None))\n                      )\n                      (/seq\n                        (AugAssign (Subscript (Name &notused:0 Load) (Name &j:0 Load) Store) Sub (Constant i1 None))\n                      )\n                      (/seq (Expr (Call (Attribute (Name &notused:0 Load) s_pop Load) (list (Name &j:0 Load)) nil)))\n                    )\n                    (AugAssign (Name &pos:0 Store) Sub (Constant i1 None))\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Name &j:0 Load)) nil)) Break)\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &line:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &lf:0 Store)) (Subscript (Name &line:0 Load) (Slice None None None) Load) None)\n        (While\n          (Compare (Call (Name g_len Load) (list (Name &lf:0 Load)) nil) (list Gt) (list (Name &k:0 Load)))\n          (/seq\n            (Assign (list (Name &j:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n            (Assign (list (Name &x:0 Store)) (Call (Name g_min Load) (list (Name &lf:0 Load)) nil) None)\n            (While\n              (Compare\n                (Name &j:0 Load)\n                (list Gt)\n                (list\n                  (BinOp (UnaryOp USub (Call (Name g_len Load) (list (Name &lf:0 Load)) nil)) Sub (Constant i1 None))\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Subscript (Name &lf:0 Load) (Name &j:0 Load) Load) (list Eq) (list (Name &x:0 Load)))\n                  (/seq\n                    (Delete (list (Subscript (Name &lf:0 Load) (Name &j:0 Load) Del)))\n                    (If\n                      (Compare (Call (Name g_len Load) (list (Name &lf:0 Load)) nil) (list Eq) (list (Name &k:0 Load)))\n                      (/seq Break)\n                      nil\n                    )\n                  )\n                  (/seq (AugAssign (Name &j:0 Store) Sub (Constant i1 None)))\n                )\n              )\n              nil\n            )\n          )\n          nil\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Subscript (Name &lf:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (ListComp\n        (Tuple (list (Name &i:1 Load) (Name &num:1 Load)) Load)\n        (list\n          (comprehension\n            (Tuple (list (Name &num:1 Store) (Name &i:1 Store)) Store)\n            (Call (Name g_enumerate Load) (list (Name &arr:0 Load)) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &arr:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n              (Tuple\n                (list\n                  (UnaryOp USub (Subscript (Name &x:2 Load) (Constant i0 None) Load))\n                  (Subscript (Name &x:2 Load) (Constant i1 None) Load)\n                )\n                Load\n              )\n            )\n          )\n        )\n      )\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &q:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_tuple Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &now:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Name &arr:0 Load)\n          (/seq\n            (If\n              (Compare (Call (Name g_len Load) (list (Name &now:0 Load)) nil) (list Eq) (list (Name &k:0 Load)))\n              (/seq Break)\n              nil\n            )\n            (Expr (Call (Attribute (Name &now:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &now:0 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n                  (Subscript (Name &x:3 Load) (Constant i1 None) Load)\n                )\n              )\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &now:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (ListComp\n        (List (list (Subscript (Name &a:0 Load) (Name &i:1 Load) Load) (Name &i:1 Load)) Load)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &x:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n              (Subscript (Name &x:2 Load) (Constant i0 None) Load)\n            )\n          )\n          (keyword s_reverse (Constant True None))\n        )\n      )\n    )\n    (For\n      (Name &_i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &p:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript\n                  (Call\n                    (Name g_sorted Load)\n                    (list (Subscript (Name &x:0 Load) (Slice None (Name &k:0 Load) None) Load))\n                    (list\n                      (keyword\n                        s_key\n                        (Lambda\n                          (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n                          (Subscript (Name &x:3 Load) (Constant i1 None) Load)\n                        )\n                      )\n                    )\n                  )\n                  (BinOp (Name &p:0 Load) Sub (Constant i1 None))\n                  Load\n                )\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &data:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &s:0 Store)) (Subscript (Name &data:0 Load) (Slice None None None) Load) None)\n        (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &k:0 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &x:0 Store))\n              (Call\n                (Attribute (Name &s:0 Load) s_index Load)\n                (list (Call (Name g_max Load) (list (Name &s:0 Load)) nil))\n                nil\n              )\n              None\n            )\n            (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &x:0 Load)) nil))\n            (Assign (list (Subscript (Name &s:0 Load) (Name &x:0 Load) Store)) (UnaryOp USub (Constant i1 None)) None)\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &ans:0 Load) s_sort Load) nil nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Name &data:0 Load)\n                (Subscript (Name &ans:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) nil) None)\n    (Assign (list (Name &c:0 Store)) (List nil Load) None)\n    (Expr (Call (Attribute (Name &c:0 Load) s_append Load) (list (Name &a:0 Load)) nil))\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &k:0 Store))\n          (BinOp\n            (BinOp\n              (Call\n                (Name g_len Load)\n                (list (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load))\n                nil\n              )\n              Sub\n              (Constant i1 None)\n            )\n            Sub\n            (Call\n              (Attribute\n                (Subscript\n                  (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                  (Slice None None (UnaryOp USub (Constant i1 None)))\n                  Load\n                )\n                s_index\n                Load\n              )\n              (list (Subscript (Name &b:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load))\n              nil\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &c:0 Load) s_append Load)\n            (list\n              (BinOp\n                (Subscript\n                  (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                  (Slice (Constant i0 None) (Name &k:0 Load) None)\n                  Load\n                )\n                Add\n                (Subscript\n                  (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                  (Slice (BinOp (Name &k:0 Load) Add (Constant i1 None)) None None)\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript\n                  (Name &c:0 Load)\n                  (BinOp\n                    (BinOp (Call (Name g_len Load) (list (Name &c:0 Load)) nil) Sub (Name &k:0 Load))\n                    Sub\n                    (Constant i1 None)\n                  )\n                  Load\n                )\n                (BinOp (Name &pos:0 Load) Sub (Constant i1 None))\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (FunctionDef\n      &getFirstSetBitPos:0\n      (arguments nil (list (arg &n:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (Call\n              (Attribute (Name g_math Load) s_log2 Load)\n              (list (BinOp (Name &n:1 Load) BitAnd (UnaryOp USub (Name &n:1 Load))))\n              nil\n            )\n            Add\n            (Constant i1 None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &find_div:0\n      (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ls:2 Store)) (List nil Load) None)\n        (For\n          (Name &i:2 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Constant i2 None)\n              (BinOp\n                (Call (Name g_int Load) (list (BinOp (Name &x:2 Load) Pow (Constant f0.5 None))) nil)\n                Add\n                (Constant i1 None)\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &x:2 Load) Mod (Name &i:2 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Attribute (Name &ls:2 Load) s_append Load) (list (Name &i:2 Load)) nil))\n                (If\n                  (Compare (Name &i:2 Load) (list NotEq) (list (BinOp (Name &x:2 Load) FloorDiv (Name &i:2 Load))))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &ls:2 Load) s_append Load)\n                        (list (BinOp (Name &x:2 Load) FloorDiv (Name &i:2 Load)))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (Call (Name g_sorted Load) (list (Name &ls:2 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (ImportFrom s_collections (list (alias &Counter:0 None)) i0)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &ar:0 Store))\n      (ListComp\n        (Tuple (list (Call (Name g_int Load) (list (Name &x:3 Load)) nil) (Name &i:3 Load)) Load)\n        (list\n          (comprehension\n            (Tuple (list (Name &i:3 Store) (Name &x:3 Store)) Store)\n            (Call\n              (Name g_enumerate Load)\n              (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Name &ar:0 Load))\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:4 None None)) None nil nil None nil)\n              (Tuple\n                (list\n                  (Subscript (Name &x:4 Load) (Constant i0 None) Load)\n                  (BinOp (UnaryOp USub (Constant i1 None)) Mult (Subscript (Name &x:4 Load) (Constant i1 None) Load))\n                )\n                Load\n              )\n            )\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &ls:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list (Subscript (Name &arr:0 Load) (Slice (UnaryOp USub (Name &k:0 Load)) None None) Load))\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:5 None None)) None nil nil None nil)\n                  (Subscript (Name &x:5 Load) (Constant i1 None) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &ls:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &mergesort:0\n      (arguments\n        nil\n        (list (arg &l:1 None None) (arg &r:1 None None) (arg &arr:1 None None) (arg &pos:1 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (If\n          (Compare (BinOp (Name &r:1 Load) Sub (Name &l:1 Load)) (list Eq) (list (Constant i1 None)))\n          (/seq (Return (Tuple (list (Name &arr:1 Load) (Name &pos:1 Load)) Load)))\n          nil\n        )\n        (Assign\n          (list (Name &m:1 Store))\n          (BinOp (BinOp (Name &l:1 Load) Add (Name &r:1 Load)) FloorDiv (Constant i2 None))\n          None\n        )\n        (Assign\n          (list (Tuple (list (Name &arr:1 Store) (Name &pos:1 Store)) Store))\n          (Call\n            (Name &mergesort:0 Load)\n            (list (Name &l:1 Load) (Name &m:1 Load) (Name &arr:1 Load) (Name &pos:1 Load))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (Name &arr:1 Store) (Name &pos:1 Store)) Store))\n          (Call\n            (Name &mergesort:0 Load)\n            (list (Name &m:1 Load) (Name &r:1 Load) (Name &arr:1 Load) (Name &pos:1 Load))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &c:1 Store))\n          (ListComp\n            (Constant i0 None)\n            (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (Name &r:1 Load)) nil) nil i0))\n          )\n          None\n        )\n        (Assign\n          (list (Name &d:1 Store))\n          (ListComp\n            (Constant i0 None)\n            (list (comprehension (Name &i:5 Store) (Call (Name g_range Load) (list (Name &r:1 Load)) nil) nil i0))\n          )\n          None\n        )\n        (Assign (list (Name &poi_a:1 Store)) (Name &l:1 Load) None)\n        (Assign (list (Name &poi_b:1 Store)) (Name &m:1 Load) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Name &l:1 Load) (Name &r:1 Load)) nil)\n          (/seq\n            (If\n              (Compare (Name &poi_a:1 Load) (list Eq) (list (Name &m:1 Load)))\n              (/seq\n                (Assign\n                  (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store))\n                  (Subscript (Name &arr:1 Load) (Name &poi_b:1 Load) Load)\n                  None\n                )\n                (Assign\n                  (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store))\n                  (Subscript (Name &pos:1 Load) (Name &poi_b:1 Load) Load)\n                  None\n                )\n                (AugAssign (Name &poi_b:1 Store) Add (Constant i1 None))\n              )\n              (/seq\n                (If\n                  (Compare (Name &poi_b:1 Load) (list Eq) (list (Name &r:1 Load)))\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store))\n                      (Subscript (Name &arr:1 Load) (Name &poi_a:1 Load) Load)\n                      None\n                    )\n                    (Assign\n                      (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store))\n                      (Subscript (Name &pos:1 Load) (Name &poi_a:1 Load) Load)\n                      None\n                    )\n                    (AugAssign (Name &poi_a:1 Store) Add (Constant i1 None))\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &a:0 Load) (Name &poi_a:1 Load) Load)\n                        (list Gt)\n                        (list (Subscript (Name &arr:1 Load) (Name &poi_b:1 Load) Load))\n                      )\n                      (/seq\n                        (Assign\n                          (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store))\n                          (Subscript (Name &arr:1 Load) (Name &poi_a:1 Load) Load)\n                          None\n                        )\n                        (Assign\n                          (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store))\n                          (Subscript (Name &pos:1 Load) (Name &poi_a:1 Load) Load)\n                          None\n                        )\n                        (AugAssign (Name &poi_a:1 Store) Add (Constant i1 None))\n                      )\n                      (/seq\n                        (Assign\n                          (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store))\n                          (Subscript (Name &arr:1 Load) (Name &poi_b:1 Load) Load)\n                          None\n                        )\n                        (Assign\n                          (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store))\n                          (Subscript (Name &pos:1 Load) (Name &poi_b:1 Load) Load)\n                          None\n                        )\n                        (AugAssign (Name &poi_b:1 Store) Add (Constant i1 None))\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Name &l:1 Load) (Name &r:1 Load)) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &arr:1 Load) (Name &i:1 Load) Store))\n              (Subscript (Name &c:1 Load) (Name &i:1 Load) Load)\n              None\n            )\n            (Assign\n              (list (Subscript (Name &pos:1 Load) (Name &i:1 Load) Store))\n              (Subscript (Name &d:1 Load) (Name &i:1 Load) Load)\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return (Tuple (list (Name &arr:1 Load) (Name &pos:1 Load)) Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp\n        (Name &i:2 Load)\n        (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign (list (Name &temp:0 Store)) (Subscript (Name &a:0 Load) (Slice None None None) Load) None)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &p:0 Store)) Store))\n      (Call (Name &mergesort:0 Load) (list (Constant i0 None) (Name &n:0 Load) (Name &a:0 Load) (Name &p:0 Load)) nil)\n      None\n    )\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load)))\n      (/seq\n        (Assign (list (Name &j:0 Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None)\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &j:0 Load) (list Lt) (list (Name &n:0 Load)))\n              (Compare\n                (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)\n                (list Eq)\n                (list (Subscript (Name &a:0 Load) (Name &j:0 Load) Load))\n              )\n            )\n          )\n          (/seq (AugAssign (Name &j:0 Store) Add (Constant i1 None)))\n          nil\n        )\n        (Assign\n          (list (Subscript (Name &p:0 Load) (Slice (Name &i:0 Load) (Name &j:0 Load) None) Store))\n          (Call\n            (Name g_sorted Load)\n            (list (Subscript (Name &p:0 Load) (Slice (Name &i:0 Load) (Name &j:0 Load) None) Load))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &i:0 Store)) (Name &j:0 Load) None)\n      )\n      nil\n    )\n    (Assign\n      (list (Name &pref:0 Store))\n      (ListComp\n        (List nil Load)\n        (list\n          (comprehension\n            (Name &i:3 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &pref:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (List (list (Constant i0 None)) Load)\n            Add\n            (Call (Name g_sorted Load) (list (Subscript (Name &p:0 Load) (Slice None (Name &i:0 Load) None) Load)) nil)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &m:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Name &temp:0 Load)\n                (Subscript (Subscript (Name &pref:0 Load) (Name &k:0 Load) Load) (Name &pos:0 Load) Load)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (ListComp\n        (Tuple\n          (list (Subscript (Name &a:0 Load) (Name &i:2 Load) Load) (BinOp (Name &n:0 Load) Sub (Name &i:2 Load)))\n          Load\n        )\n        (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (Assign\n      (list (Name &b:0 Store))\n      (ListComp\n        (Tuple\n          (list\n            (Subscript (Subscript (Name &b:0 Load) (Name &i:3 Load) Load) (Constant i0 None) Load)\n            (BinOp\n              (Name &n:0 Load)\n              Sub\n              (Subscript (Subscript (Name &b:0 Load) (Name &i:3 Load) Load) (Constant i1 None) Load)\n            )\n          )\n          Load\n        )\n        (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &qu:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &p:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &c:0 Store)) (Subscript (Name &b:0 Load) (Slice None (Name &k:0 Load) None) Load) None)\n        (Expr\n          (Call\n            (Attribute (Name &c:0 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:4 None None)) None nil nil None nil)\n                  (Subscript (Name &x:4 Load) (Constant i1 None) Load)\n                )\n              )\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &c:0 Load) (BinOp (Name &p:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias s_sys g__sys)))\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &t:1 Store)) (Constant i1 None) None)\n        (For\n          (Name &i_t:1 Store)\n          (Call (Name g_range Load) (list (Name &t:1 Load)) nil)\n          (/seq\n            (Assign (list (Tuple (list (Name &n:1 Store)) Store)) (Call (Name &_read_ints:0 Load) nil nil) None)\n            (Assign\n              (list (Name &a:1 Store))\n              (Call (Name g_tuple Load) (list (Call (Name &_read_ints:0 Load) nil nil)) nil)\n              None\n            )\n            (Assign (list (Tuple (list (Name &m:1 Store)) Store)) (Call (Name &_read_ints:0 Load) nil nil) None)\n            (Assign\n              (list (Name &queries:1 Store))\n              (GeneratorExp\n                (Call (Name g_tuple Load) (list (Call (Name &_read_ints:0 Load) nil nil)) nil)\n                (list\n                  (comprehension (Name &i_query:5 Store) (Call (Name g_range Load) (list (Name &m:1 Load)) nil) nil i0)\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &result:1 Store))\n              (Call (Name &process_queries:0 Load) (list (Name &a:1 Load) (Name &queries:1 Load)) nil)\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (Starred (Name &result:1 Load) Load))\n                (list (keyword s_sep (Constant s-WzEwXQ== None)))\n              )\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &_read_line:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &result:2 Store))\n          (Call (Attribute (Attribute (Name g__sys Load) s_stdin Load) s_readline Load) nil nil)\n          None\n        )\n        (Assert\n          (Compare\n            (Subscript (Name &result:2 Load) (UnaryOp USub (Constant i1 None)) Load)\n            (list Eq)\n            (list (Constant s-WzEwXQ== None))\n          )\n          None\n        )\n        (Return (Subscript (Name &result:2 Load) (Slice None (UnaryOp USub (Constant i1 None)) None) Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &_read_ints:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &_read_line:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &process_queries:0\n      (arguments nil (list (arg &sequence:3 None None) (arg &queries:3 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &sequence:3 Store)) (Call (Name g_tuple Load) (list (Name &sequence:3 Load)) nil) None)\n        (Assign\n          (list (Name &sorted_sequence:3 Store))\n          (Call (Name g_sorted Load) (list (Name &sequence:3 Load)) (list (keyword s_reverse (Constant True None))))\n          None\n        )\n        (For\n          (Tuple (list (Name &k:3 Store) (Name &pos:3 Store)) Store)\n          (Name &queries:3 Load)\n          (/seq\n            (AugAssign (Name &pos:3 Store) Sub (Constant i1 None))\n            (Assign\n              (list (Name &k_max_elems:3 Store))\n              (Subscript\n                (Subscript (Name &sorted_sequence:3 Load) (Slice None (Name &k:3 Load) None) Load)\n                (Slice None None (UnaryOp USub (Constant i1 None)))\n                Load\n              )\n              None\n            )\n            (Assign (list (Name &seq:3 Store)) (Name &sequence:3 Load) None)\n            (Assign (list (Name &subseq:3 Store)) (List nil Load) None)\n            (While\n              (Compare (Call (Name g_len Load) (list (Name &subseq:3 Load)) nil) (list Lt) (list (Name &k:3 Load)))\n              (/seq\n                (For\n                  (Name &i_next_elem:3 Store)\n                  (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &k_max_elems:3 Load)) nil)) nil)\n                  (/seq\n                    (Assign\n                      (list (Name &next_elem:3 Store))\n                      (Subscript (Name &k_max_elems:3 Load) (Name &i_next_elem:3 Load) Load)\n                      None\n                    )\n                    (Assign\n                      (list (Name &seq_after:3 Store))\n                      (Subscript\n                        (Name &seq:3 Load)\n                        (Slice\n                          (BinOp\n                            (Call (Attribute (Name &seq:3 Load) s_index Load) (list (Name &next_elem:3 Load)) nil)\n                            Add\n                            (Constant i1 None)\n                          )\n                          None\n                          None\n                        )\n                        Load\n                      )\n                      None\n                    )\n                    (Assign\n                      (list (Name &elems_remain:3 Store))\n                      (BinOp\n                        (Subscript (Name &k_max_elems:3 Load) (Slice None (Name &i_next_elem:3 Load) None) Load)\n                        Add\n                        (Subscript\n                          (Name &k_max_elems:3 Load)\n                          (Slice (BinOp (Name &i_next_elem:3 Load) Add (Constant i1 None)) None None)\n                          Load\n                        )\n                      )\n                      None\n                    )\n                    (If\n                      (Call\n                        (Name &_contains_elems:0 Load)\n                        (list (Name &seq_after:3 Load) (Name &elems_remain:3 Load))\n                        nil\n                      )\n                      (/seq\n                        (Assign (list (Name &seq:3 Store)) (Name &seq_after:3 Load) None)\n                        (Assign (list (Name &k_max_elems:3 Store)) (Name &elems_remain:3 Load) None)\n                        (Expr\n                          (Call (Attribute (Name &subseq:3 Load) s_append Load) (list (Name &next_elem:3 Load)) nil)\n                        )\n                        Break\n                      )\n                      nil\n                    )\n                  )\n                  nil\n                  None\n                )\n              )\n              nil\n            )\n            (Expr (Yield (Subscript (Name &subseq:3 Load) (Name &pos:3 Load) Load)))\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &_contains_elems:0\n      (arguments nil (list (arg &seq:4 None None) (arg &elems:4 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &seq:4 Store)) (Call (Name g_sorted Load) (list (Name &seq:4 Load)) nil) None)\n        (Assign (list (Name &subseq:4 Store)) (Call (Name g_sorted Load) (list (Name &elems:4 Load)) nil) None)\n        (Assign (list (Name &i_seq:4 Store)) (Constant i0 None) None)\n        (Assign (list (Name &i_subseq:4 Store)) (Constant i0 None) None)\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &i_seq:4 Load) (list Lt) (list (Call (Name g_len Load) (list (Name &seq:4 Load)) nil)))\n              (Compare\n                (Name &i_subseq:4 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Name &subseq:4 Load)) nil))\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &seq:4 Load) (Name &i_seq:4 Load) Load)\n                (list Eq)\n                (list (Subscript (Name &subseq:4 Load) (Name &i_subseq:4 Load) Load))\n              )\n              (/seq (AugAssign (Name &i_subseq:4 Store) Add (Constant i1 None)))\n              nil\n            )\n            (AugAssign (Name &i_seq:4 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Return\n          (Compare (Name &i_subseq:4 Load) (list Eq) (list (Call (Name g_len Load) (list (Name &subseq:4 Load)) nil)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjUsIDExNywgMTE2LCAxMDQsIDExMSwgMTE0LCAzMiwgNDUsIDMyLCA4MywgOTcsIDExNiwgMTE5LCAxMDUsIDEwNywgMzIsIDg0LCAxMDUsIDExOSwgOTcsIDExNCwgMTA1LCAzMiwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNDksIDU2LCAxMTYsIDEwNCwgMzIsIDcwLCAxMDEsIDk4LCAzMiwgNDQsIDMyLCA1MCwgNDgsIDUwLCA0OSwgMzIsIDMyLCA0NSwgMzIsIDg0LCAxMDQsIDExNywgMTE0LCAxMTUsIDEwMCwgOTcsIDEyMSwgMTBd\n        None\n      )\n    )\n    (ImportFrom s___future__ (list (alias &division:0 None) (alias &print_function:0 None)) i0)\n    (ImportFrom s_fractions (list (alias &Fraction:0 None)) i0)\n    (Import (list (alias &sys:0 None)))\n    (Import (list (alias &os:0 None)))\n    (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0)\n    (ImportFrom s_functools (list (alias &cmp_to_key:0 None)) i0)\n    (ImportFrom s_heapq (list (alias &*:0 None)) i0)\n    (ImportFrom\n      s_math\n      (list\n        (alias &gcd:0 None)\n        (alias &factorial:0 None)\n        (alias &floor:0 None)\n        (alias &ceil:0 None)\n        (alias &sqrt:0 None)\n        (alias &log2:0 None)\n      )\n      i0\n    )\n    (ImportFrom s_copy (list (alias &deepcopy:0 None)) i0)\n    (ImportFrom s_collections (list (alias &deque:0 None)) i0)\n    (ImportFrom s_bisect (list (alias s_bisect_left &bl:0)) i0)\n    (ImportFrom s_bisect (list (alias s_bisect_right &br:0)) i0)\n    (ImportFrom s_bisect (list (alias &bisect:0 None)) i0)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name &IOBase:0 Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:15 None None) (arg &file:15 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:15 Load) s__fd Store))\n              (Call (Attribute (Name &file:15 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:15 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:15 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:15 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:15 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:15 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:15 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:15 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:16 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:16 Store))\n                  (Call\n                    (Attribute (Name &os:0 Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:16 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name &os:0 Load) s_fstat Load)\n                              (list (Attribute (Name &self:16 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:16 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:16 Store))\n                  (Call (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:16 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:16 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:16 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:17 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:17 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:17 Store))\n                  (Call\n                    (Attribute (Name &os:0 Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:17 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name &os:0 Load) s_fstat Load)\n                              (list (Attribute (Name &self:17 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:17 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:17 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:17 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:17 Store))\n                  (Call (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:17 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:17 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:17 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:18 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:18 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &os:0 Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:18 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name &IOBase:0 Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:19 None None) (arg &file:19 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:19 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:19 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:19 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:19 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:19 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:50 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:50 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:19 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:19 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &print:0\n      (arguments nil nil (arg &args:6 None None) nil nil (arg &kwargs:6 None None) nil)\n      (/seq\n        (Expr\n          (Constant\n            s-WzgwLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDExNSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCAxMTUsIDMyLCAxMTYsIDExMSwgMzIsIDk3LCAzMiwgMTE1LCAxMTYsIDExNCwgMTAxLCA5NywgMTA5LCA0NCwgMzIsIDExMSwgMTE0LCAzMiwgMTE2LCAxMTEsIDMyLCAxMTUsIDEyMSwgMTE1LCA0NiwgMTE1LCAxMTYsIDEwMCwgMTExLCAxMTcsIDExNiwgMzIsIDk4LCAxMjEsIDMyLCAxMDAsIDEwMSwgMTAyLCA5NywgMTE3LCAxMDgsIDExNiwgNDZd\n            None\n          )\n        )\n        (Assign\n          (list (Tuple (list (Name &sep:6 Store) (Name &file:6 Store)) Store))\n          (Tuple\n            (list\n              (Call\n                (Attribute (Name &kwargs:6 Load) s_pop Load)\n                (list (Constant s_sep None) (Constant s-WzMyXQ== None))\n                nil\n              )\n              (Call\n                (Attribute (Name &kwargs:6 Load) s_pop Load)\n                (list (Constant s_file None) (Attribute (Name &sys:0 Load) s_stdout Load))\n                nil\n              )\n            )\n            Load\n          )\n          None\n        )\n        (Assign (list (Name &at_start:6 Store)) (Constant True None) None)\n        (For\n          (Name &x:6 Store)\n          (Name &args:6 Load)\n          (/seq\n            (If\n              (UnaryOp Not (Name &at_start:6 Load))\n              (/seq (Expr (Call (Attribute (Name &file:6 Load) s_write Load) (list (Name &sep:6 Load)) nil)))\n              nil\n            )\n            (Expr\n              (Call\n                (Attribute (Name &file:6 Load) s_write Load)\n                (list (Call (Name g_str Load) (list (Name &x:6 Load)) nil))\n                nil\n              )\n            )\n            (Assign (list (Name &at_start:6 Store)) (Constant False None) None)\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &file:6 Load) s_write Load)\n            (list\n              (Call\n                (Attribute (Name &kwargs:6 Load) s_pop Load)\n                (list (Constant s_end None) (Constant s-WzEwXQ== None))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (If\n          (Call (Attribute (Name &kwargs:6 Load) s_pop Load) (list (Constant s_flush None) (Constant False None)) nil)\n          (/seq (Expr (Call (Attribute (Name &file:6 Load) s_flush Load) nil nil)))\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare\n        (Subscript (Attribute (Name &sys:0 Load) s_version_info Load) (Constant i0 None) Load)\n        (list Lt)\n        (list (Constant i3 None))\n      )\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store))\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (Call (Name &FastIO:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil)\n              (Call (Name &FastIO:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)\n            )\n            Load\n          )\n          None\n        )\n      )\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store))\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil)\n              (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)\n            )\n            Load\n          )\n          None\n        )\n      )\n    )\n    (ImportFrom s_types (list (alias &GeneratorType:0 None)) i0)\n    (FunctionDef\n      &iterative:0\n      (arguments nil (list (arg &f:3 None None) (arg &stack:3 None None)) None nil nil None (list (List nil Load)))\n      (/seq\n        (FunctionDef\n          &wrapped_func:3\n          (arguments nil nil (arg &args:20 None None) nil nil (arg &kwargs:20 None None) nil)\n          (/seq\n            (If\n              (Name &stack:3 Load)\n              (/seq\n                (Return\n                  (Call\n                    (Name &f:3 Load)\n                    (list (Starred (Name &args:20 Load) Load))\n                    (list (keyword None (Name &kwargs:20 Load)))\n                  )\n                )\n              )\n              nil\n            )\n            (Assign\n              (list (Name &to:20 Store))\n              (Call\n                (Name &f:3 Load)\n                (list (Starred (Name &args:20 Load) Load))\n                (list (keyword None (Name &kwargs:20 Load)))\n              )\n              None\n            )\n            (While\n              (Constant True None)\n              (/seq\n                (If\n                  (Compare\n                    (Call (Name g_type Load) (list (Name &to:20 Load)) nil)\n                    (list Is)\n                    (list (Name &GeneratorType:0 Load))\n                  )\n                  (/seq\n                    (Expr (Call (Attribute (Name &stack:3 Load) s_append Load) (list (Name &to:20 Load)) nil))\n                    (Assign (list (Name &to:20 Store)) (Call (Name g_next Load) (list (Name &to:20 Load)) nil) None)\n                    Continue\n                  )\n                  nil\n                )\n                (Expr (Call (Attribute (Name &stack:3 Load) s_pop Load) nil nil))\n                (If (UnaryOp Not (Name &stack:3 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &to:20 Store))\n                  (Call\n                    (Attribute (Subscript (Name &stack:3 Load) (UnaryOp USub (Constant i1 None)) Load) s_send Load)\n                    (list (Name &to:20 Load))\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &to:20 Load))\n          )\n          nil\n          None\n          None\n        )\n        (Return (Name &wrapped_func:3 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil)\n              s_rstrip\n              Load\n            )\n            (list (Constant s-WzEzLCAxMF0= None))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &out:0\n      (arguments nil (list (arg &var:7 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Attribute (Name &sys:0 Load) s_stdout Load) s_write Load)\n            (list (Call (Name g_str Load) (list (Name &var:7 Load)) nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lis:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &stringlis:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_str Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sep:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &strsep:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_str Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &testcase:0\n      (arguments nil (list (arg &t:8 None None)) None nil nil None nil)\n      (/seq\n        (For\n          (Name &pp:8 Store)\n          (Call (Name g_range Load) (list (Name &t:8 Load)) nil)\n          (/seq (Expr (Call (Name &solve:0 Load) (list (Name &pp:8 Load)) nil)))\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &google:0\n      (arguments nil (list (arg &p:9 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name &print:0 Load)\n            (list\n              (BinOp\n                (BinOp\n                  (Constant s-WzY3LCA5NywgMTE1LCAxMDEsIDMyLCAzNV0= None)\n                  Add\n                  (Call (Name g_str Load) (list (Name &p:9 Load)) nil)\n                )\n                Add\n                (Constant s-WzU4LCAzMl0= None)\n              )\n            )\n            (list (keyword s_end (Constant s_ None)))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lcm:0\n      (arguments nil (list (arg &a:10 None None) (arg &b:10 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp (Name &a:10 Load) Mult (Name &b:10 Load))\n            FloorDiv\n            (Call (Name &gcd:0 Load) (list (Name &a:10 Load) (Name &b:10 Load)) nil)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &power:0\n      (arguments nil (list (arg &x:11 None None) (arg &y:11 None None) (arg &p:11 None None)) None nil nil None nil)\n      (/seq\n        (AugAssign (Name &y:11 Store) Mod (BinOp (Name &p:11 Load) Sub (Constant i1 None)))\n        (Assign (list (Name &res:11 Store)) (Constant i1 None) None)\n        (Assign (list (Name &x:11 Store)) (BinOp (Name &x:11 Load) Mod (Name &p:11 Load)) None)\n        (If (Compare (Name &x:11 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i0 None))) nil)\n        (While\n          (Compare (Name &y:11 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (BinOp (Name &y:11 Load) BitAnd (Constant i1 None)) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (Assign\n                  (list (Name &res:11 Store))\n                  (BinOp (BinOp (Name &res:11 Load) Mult (Name &x:11 Load)) Mod (Name &p:11 Load))\n                  None\n                )\n              )\n              nil\n            )\n            (Assign (list (Name &y:11 Store)) (BinOp (Name &y:11 Load) RShift (Constant i1 None)) None)\n            (Assign\n              (list (Name &x:11 Store))\n              (BinOp (BinOp (Name &x:11 Load) Mult (Name &x:11 Load)) Mod (Name &p:11 Load))\n              None\n            )\n          )\n          nil\n        )\n        (Return (Name &res:11 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ncr:0\n      (arguments nil (list (arg &n:12 None None) (arg &r:12 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (Call (Name &factorial:0 Load) (list (Name &n:12 Load)) nil)\n            FloorDiv\n            (BinOp\n              (Call (Name &factorial:0 Load) (list (Name &r:12 Load)) nil)\n              Mult\n              (Call\n                (Name &factorial:0 Load)\n                (list\n                  (Call (Name g_max Load) (list (BinOp (Name &n:12 Load) Sub (Name &r:12 Load)) (Constant i1 None)) nil)\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &isPrime:0\n      (arguments nil (list (arg &n:13 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &n:13 Load) (list LtE) (list (Constant i1 None))) (/seq (Return (Constant False None))) nil)\n        (If (Compare (Name &n:13 Load) (list LtE) (list (Constant i3 None))) (/seq (Return (Constant True None))) nil)\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (BinOp (Name &n:13 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n              (Compare (BinOp (Name &n:13 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Return (Constant False None)))\n          nil\n        )\n        (Assign (list (Name &i:13 Store)) (Constant i5 None) None)\n        (While\n          (Compare (BinOp (Name &i:13 Load) Mult (Name &i:13 Load)) (list LtE) (list (Name &n:13 Load)))\n          (/seq\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare (BinOp (Name &n:13 Load) Mod (Name &i:13 Load)) (list Eq) (list (Constant i0 None)))\n                  (Compare\n                    (BinOp (Name &n:13 Load) Mod (BinOp (Name &i:13 Load) Add (Constant i2 None)))\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                )\n              )\n              (/seq (Return (Constant False None)))\n              nil\n            )\n            (Assign (list (Name &i:13 Store)) (BinOp (Name &i:13 Load) Add (Constant i6 None)) None)\n          )\n          nil\n        )\n        (Return (Constant True None))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &inf:0 Store)) (Call (Name g_pow Load) (list (Constant i10 None) (Constant i20 None)) nil) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (ClassDef\n      &FenwickTree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:4\n          (arguments nil (list (arg &self:21 None None) (arg &x:21 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzExNiwgMTE0LCA5NywgMTEwLCAxMTUsIDEwMiwgMTExLCAxMTQsIDEwOSwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgMzIsIDEwNSwgMTEwLCAxMTYsIDExMSwgMzIsIDY2LCA3MywgODRd\n                None\n              )\n            )\n            (Assign (list (Attribute (Name &self:21 Load) s_bit Store)) (Name &x:21 Load) None)\n            (For\n              (Name &i:21 Store)\n              (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &x:21 Load)) nil)) nil)\n              (/seq\n                (Assign\n                  (list (Name &j:21 Store))\n                  (BinOp (Name &i:21 Load) BitOr (BinOp (Name &i:21 Load) Add (Constant i1 None)))\n                  None\n                )\n                (If\n                  (Compare (Name &j:21 Load) (list Lt) (list (Call (Name g_len Load) (list (Name &x:21 Load)) nil)))\n                  (/seq\n                    (AugAssign\n                      (Subscript (Name &x:21 Load) (Name &j:21 Load) Store)\n                      Add\n                      (Subscript (Name &x:21 Load) (Name &i:21 Load) Load)\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:4\n          (arguments\n            nil\n            (list (arg &self:22 None None) (arg &idx:22 None None) (arg &x:22 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzExNywgMTEyLCAxMDAsIDk3LCAxMTYsIDEwMSwgMTE1LCAzMiwgOTgsIDEwNSwgMTE2LCA5MSwgMTA1LCAxMDAsIDEyMCwgOTMsIDMyLCA0MywgNjEsIDMyLCAxMjBd\n                None\n              )\n            )\n            (While\n              (Compare\n                (Name &idx:22 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:22 Load) s_bit Load)) nil))\n              )\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:22 Load) s_bit Load) (Name &idx:22 Load) Store)\n                  Add\n                  (Name &x:22 Load)\n                )\n                (AugAssign (Name &idx:22 Store) BitOr (BinOp (Name &idx:22 Load) Add (Constant i1 None)))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:4\n          (arguments nil (list (arg &self:23 None None) (arg &end:23 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-Wzk5LCA5NywgMTA4LCA5OSwgMzIsIDExNSwgMTE3LCAxMDksIDQwLCA5OCwgMTA1LCAxMTYsIDkxLCA1OCwgMTAxLCAxMTAsIDEwMCwgNDEsIDQxXQ==\n                None\n              )\n            )\n            (Assign (list (Name &x:23 Store)) (Constant i0 None) None)\n            (While\n              (Name &end:23 Load)\n              (/seq\n                (AugAssign\n                  (Name &x:23 Store)\n                  Add\n                  (Subscript\n                    (Attribute (Name &self:23 Load) s_bit Load)\n                    (BinOp (Name &end:23 Load) Sub (Constant i1 None))\n                    Load\n                  )\n                )\n                (AugAssign (Name &end:23 Store) BitAnd (BinOp (Name &end:23 Load) Sub (Constant i1 None)))\n              )\n              nil\n            )\n            (Return (Name &x:23 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &findkth:4\n          (arguments nil (list (arg &self:24 None None) (arg &k:24 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzcwLCAxMDUsIDExMCwgMTAwLCAzMiwgMTA4LCA5NywgMTE0LCAxMDMsIDEwMSwgMTE1LCAxMTYsIDMyLCAxMDUsIDEwMCwgMTIwLCAzMiwgMTE1LCAxMTcsIDk5LCAxMDQsIDMyLCAxMTYsIDEwNCwgOTcsIDExNiwgMzIsIDExNSwgMTE3LCAxMDksIDQwLCA5OCwgMTA1LCAxMTYsIDkxLCA1OCwgMTA1LCAxMDAsIDEyMCwgOTMsIDQxLCAzMiwgNjAsIDYxLCAzMiwgMTA3XQ==\n                None\n              )\n            )\n            (Assign (list (Name &idx:24 Store)) (UnaryOp USub (Constant i1 None)) None)\n            (For\n              (Name &d:24 Store)\n              (Call\n                (Name g_reversed Load)\n                (list\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (Call\n                        (Attribute\n                          (Call (Name g_len Load) (list (Attribute (Name &self:24 Load) s_bit Load)) nil)\n                          s_bit_length\n                          Load\n                        )\n                        nil\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Name &right_idx:24 Store))\n                  (BinOp (Name &idx:24 Load) Add (BinOp (Constant i1 None) LShift (Name &d:24 Load)))\n                  None\n                )\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Name &right_idx:24 Load)\n                        (list Lt)\n                        (list (Call (Name g_len Load) (list (Attribute (Name &self:24 Load) s_bit Load)) nil))\n                      )\n                      (Compare\n                        (Name &k:24 Load)\n                        (list GtE)\n                        (list (Subscript (Attribute (Name &self:24 Load) s_bit Load) (Name &right_idx:24 Load) Load))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign (list (Name &idx:24 Store)) (Name &right_idx:24 Load) None)\n                    (AugAssign\n                      (Name &k:24 Store)\n                      Sub\n                      (Subscript (Attribute (Name &self:24 Load) s_bit Load) (Name &idx:24 Load) Load)\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Return (BinOp (Name &idx:24 Load) Add (Constant i1 None)))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &printpref:4\n          (arguments nil (list (arg &self:25 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &out:25 Store)) (List nil Load) None)\n            (For\n              (Name &i:25 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (Constant i1 None)\n                  (BinOp\n                    (Call (Name g_len Load) (list (Attribute (Name &self:25 Load) s_bit Load)) nil)\n                    Add\n                    (Constant i1 None)\n                  )\n                )\n                nil\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &out:25 Load) s_append Load)\n                    (list (Call (Attribute (Name &self:25 Load) s_query Load) (list (Name &i:25 Load)) nil))\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n            (Expr (Call (Name &print:0 Load) (list (Name &out:25 Load)) nil))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Expr\n      (Constant\n        s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExNSwgMTA3LCAzMiwgMTEzLCAxMTcsIDEwMSwgMTE0LCAxMjEsIDQwLCAxMDUsIDQzLCA0OSwgNDEsIDMyLCA0NSwgNDUsIDQ1LCA0NSwgNjIsIDYyLCA2MiwgMzIsIDQ5LCAzMiwgMTA1LCAxMTAsIDEwMCwgMTAxLCAxMjAsIDEwMSwgMTAwLCAzMiwgOTgsIDk3LCAxMTUsIDEwMSwgMTAwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDExNywgMTEyLCAxMDAsIDk3LCAxMTYsIDEwMSwgNDAsIDEwNSwgNDQsIDEyMCwgNDEsIDMyLCA0NSwgNDUsIDQ1LCA2MiwgNjIsIDYyLCAzMiwgNDgsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCAxMDEsIDEwMCwgMzIsIDk4LCA5NywgMTE1LCAxMDEsIDEwMCwgMzIsIDEwXQ==\n        None\n      )\n    )\n    (ClassDef\n      &SortedList:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:5\n          (arguments\n            nil\n            (list (arg &self:26 None None) (arg &iterable:26 None None) (arg &_load:26 None None))\n            None\n            nil\n            nil\n            None\n            (list (List nil Load) (Constant i200 None))\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzczLCAxMTAsIDEwNSwgMTE2LCAxMDUsIDk3LCAxMDgsIDEwNSwgMTIyLCAxMDEsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCAzMiwgMTA1LCAxMTAsIDExNSwgMTE2LCA5NywgMTEwLCA5OSwgMTAxLCA0Nl0=\n                None\n              )\n            )\n            (Assign (list (Name &values:26 Store)) (Call (Name g_sorted Load) (list (Name &iterable:26 Load)) nil) None)\n            (Assign\n              (list (Attribute (Name &self:26 Load) s__len Store) (Name &_len:26 Store))\n              (Call (Name g_len Load) (list (Name &values:26 Load)) nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:26 Load) s__load Store)) (Name &_load:26 Load) None)\n            (Assign\n              (list (Attribute (Name &self:26 Load) s__lists Store) (Name &_lists:26 Store))\n              (ListComp\n                (Subscript\n                  (Name &values:26 Load)\n                  (Slice (Name &i:51 Load) (BinOp (Name &i:51 Load) Add (Name &_load:26 Load)) None)\n                  Load\n                )\n                (list\n                  (comprehension\n                    (Name &i:51 Store)\n                    (Call (Name g_range Load) (list (Constant i0 None) (Name &_len:26 Load) (Name &_load:26 Load)) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:26 Load) s__list_lens Store))\n              (ListComp\n                (Call (Name g_len Load) (list (Name &_list:52 Load)) nil)\n                (list (comprehension (Name &_list:52 Store) (Name &_lists:26 Load) nil i0))\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:26 Load) s__mins Store))\n              (ListComp\n                (Subscript (Name &_list:53 Load) (Constant i0 None) Load)\n                (list (comprehension (Name &_list:53 Store) (Name &_lists:26 Load) nil i0))\n              )\n              None\n            )\n            (Assign (list (Attribute (Name &self:26 Load) s__fen_tree Store)) (List nil Load) None)\n            (Assign (list (Attribute (Name &self:26 Load) s__rebuild Store)) (Constant True None) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_fen_build:5\n          (arguments nil (list (arg &self:27 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzY2LCAxMTcsIDEwNSwgMTA4LCAxMDAsIDMyLCA5NywgMzIsIDEwMiwgMTAxLCAxMTAsIDExOSwgMTA1LCA5OSwgMTA3LCAzMiwgMTE2LCAxMTQsIDEwMSwgMTAxLCAzMiwgMTA1LCAxMTAsIDExNSwgMTE2LCA5NywgMTEwLCA5OSwgMTAxLCA0Nl0=\n                None\n              )\n            )\n            (Assign\n              (list (Subscript (Attribute (Name &self:27 Load) s__fen_tree Load) (Slice None None None) Store))\n              (Attribute (Name &self:27 Load) s__list_lens Load)\n              None\n            )\n            (Assign (list (Name &_fen_tree:27 Store)) (Attribute (Name &self:27 Load) s__fen_tree Load) None)\n            (For\n              (Name &i:27 Store)\n              (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &_fen_tree:27 Load)) nil)) nil)\n              (/seq\n                (If\n                  (Compare\n                    (BinOp (Name &i:27 Load) BitOr (BinOp (Name &i:27 Load) Add (Constant i1 None)))\n                    (list Lt)\n                    (list (Call (Name g_len Load) (list (Name &_fen_tree:27 Load)) nil))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript\n                        (Name &_fen_tree:27 Load)\n                        (BinOp (Name &i:27 Load) BitOr (BinOp (Name &i:27 Load) Add (Constant i1 None)))\n                        Store\n                      )\n                      Add\n                      (Subscript (Name &_fen_tree:27 Load) (Name &i:27 Load) Load)\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Assign (list (Attribute (Name &self:27 Load) s__rebuild Store)) (Constant False None) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_fen_update:5\n          (arguments\n            nil\n            (list (arg &self:28 None None) (arg &index:28 None None) (arg &value:28 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-Wzg1LCAxMTIsIDEwMCwgOTcsIDExNiwgMTAxLCAzMiwgOTYsIDEwMiwgMTAxLCAxMTAsIDk1LCAxMTYsIDExNCwgMTAxLCAxMDEsIDkxLCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgOTMsIDMyLCA0MywgNjEsIDMyLCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgNDZd\n                None\n              )\n            )\n            (If\n              (UnaryOp Not (Attribute (Name &self:28 Load) s__rebuild Load))\n              (/seq\n                (Assign (list (Name &_fen_tree:28 Store)) (Attribute (Name &self:28 Load) s__fen_tree Load) None)\n                (While\n                  (Compare\n                    (Name &index:28 Load)\n                    (list Lt)\n                    (list (Call (Name g_len Load) (list (Name &_fen_tree:28 Load)) nil))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript (Name &_fen_tree:28 Load) (Name &index:28 Load) Store)\n                      Add\n                      (Name &value:28 Load)\n                    )\n                    (AugAssign (Name &index:28 Store) BitOr (BinOp (Name &index:28 Load) Add (Constant i1 None)))\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_fen_query:5\n          (arguments nil (list (arg &self:29 None None) (arg &end:29 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk2LCAxMTUsIDExNywgMTA5LCA0MCwgOTUsIDEwMiwgMTAxLCAxMTAsIDk1LCAxMTYsIDExNCwgMTAxLCAxMDEsIDkxLCA1OCwgMTAxLCAxMTAsIDEwMCwgOTMsIDQxLCA5NiwgNDZd\n                None\n              )\n            )\n            (If\n              (Attribute (Name &self:29 Load) s__rebuild Load)\n              (/seq (Expr (Call (Attribute (Name &self:29 Load) s__fen_build Load) nil nil)))\n              nil\n            )\n            (Assign (list (Name &_fen_tree:29 Store)) (Attribute (Name &self:29 Load) s__fen_tree Load) None)\n            (Assign (list (Name &x:29 Store)) (Constant i0 None) None)\n            (While\n              (Name &end:29 Load)\n              (/seq\n                (AugAssign\n                  (Name &x:29 Store)\n                  Add\n                  (Subscript (Name &_fen_tree:29 Load) (BinOp (Name &end:29 Load) Sub (Constant i1 None)) Load)\n                )\n                (AugAssign (Name &end:29 Store) BitAnd (BinOp (Name &end:29 Load) Sub (Constant i1 None)))\n              )\n              nil\n            )\n            (Return (Name &x:29 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_fen_findkth:5\n          (arguments nil (list (arg &self:30 None None) (arg &k:30 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAzMiwgMTEyLCA5NywgMTA1LCAxMTQsIDMyLCAxMTEsIDEwMiwgMzIsIDQwLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA4LCA5NywgMTE0LCAxMDMsIDEwMSwgMTE1LCAxMTYsIDMyLCA5NiwgMTA1LCAxMDAsIDEyMCwgOTYsIDMyLCAxMTUsIDExNywgOTksIDEwNCwgMzIsIDExNiwgMTA0LCA5NywgMTE2LCAzMiwgOTYsIDExNSwgMTE3LCAxMDksIDQwLCA5NSwgMTAyLCAxMDEsIDExMCwgOTUsIDExNiwgMTE0LCAxMDEsIDEwMSwgOTEsIDU4LCAxMDUsIDEwMCwgMTIwLCA5MywgNDEsIDMyLCA2MCwgNjEsIDMyLCAxMDcsIDk2LCA0NCwgMzIsIDk2LCAxMDcsIDMyLCA0NSwgMzIsIDExNSwgMTE3LCAxMDksIDQwLCA5NSwgMTAyLCAxMDEsIDExMCwgOTUsIDExNiwgMTE0LCAxMDEsIDEwMSwgOTEsIDU4LCAxMDUsIDEwMCwgMTIwLCA5MywgNDEsIDk2LCA0MSwgNDZd\n                None\n              )\n            )\n            (Assign (list (Name &_list_lens:30 Store)) (Attribute (Name &self:30 Load) s__list_lens Load) None)\n            (If\n              (Compare\n                (Name &k:30 Load)\n                (list Lt)\n                (list (Subscript (Name &_list_lens:30 Load) (Constant i0 None) Load))\n              )\n              (/seq (Return (Tuple (list (Constant i0 None) (Name &k:30 Load)) Load)))\n              nil\n            )\n            (If\n              (Compare\n                (Name &k:30 Load)\n                (list GtE)\n                (list\n                  (BinOp\n                    (Attribute (Name &self:30 Load) s__len Load)\n                    Sub\n                    (Subscript (Name &_list_lens:30 Load) (UnaryOp USub (Constant i1 None)) Load)\n                  )\n                )\n              )\n              (/seq\n                (Return\n                  (Tuple\n                    (list\n                      (BinOp (Call (Name g_len Load) (list (Name &_list_lens:30 Load)) nil) Sub (Constant i1 None))\n                      (BinOp\n                        (BinOp\n                          (Name &k:30 Load)\n                          Add\n                          (Subscript (Name &_list_lens:30 Load) (UnaryOp USub (Constant i1 None)) Load)\n                        )\n                        Sub\n                        (Attribute (Name &self:30 Load) s__len Load)\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (If\n              (Attribute (Name &self:30 Load) s__rebuild Load)\n              (/seq (Expr (Call (Attribute (Name &self:30 Load) s__fen_build Load) nil nil)))\n              nil\n            )\n            (Assign (list (Name &_fen_tree:30 Store)) (Attribute (Name &self:30 Load) s__fen_tree Load) None)\n            (Assign (list (Name &idx:30 Store)) (UnaryOp USub (Constant i1 None)) None)\n            (For\n              (Name &d:30 Store)\n              (Call\n                (Name g_reversed Load)\n                (list\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (Call\n                        (Attribute (Call (Name g_len Load) (list (Name &_fen_tree:30 Load)) nil) s_bit_length Load)\n                        nil\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Name &right_idx:30 Store))\n                  (BinOp (Name &idx:30 Load) Add (BinOp (Constant i1 None) LShift (Name &d:30 Load)))\n                  None\n                )\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Name &right_idx:30 Load)\n                        (list Lt)\n                        (list (Call (Name g_len Load) (list (Name &_fen_tree:30 Load)) nil))\n                      )\n                      (Compare\n                        (Name &k:30 Load)\n                        (list GtE)\n                        (list (Subscript (Name &_fen_tree:30 Load) (Name &right_idx:30 Load) Load))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign (list (Name &idx:30 Store)) (Name &right_idx:30 Load) None)\n                    (AugAssign (Name &k:30 Store) Sub (Subscript (Name &_fen_tree:30 Load) (Name &idx:30 Load) Load))\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Return (Tuple (list (BinOp (Name &idx:30 Load) Add (Constant i1 None)) (Name &k:30 Load)) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_delete:5\n          (arguments\n            nil\n            (list (arg &self:31 None None) (arg &pos:31 None None) (arg &idx:31 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzY4LCAxMDEsIDEwOCwgMTAxLCAxMTYsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMywgMTA1LCAxMTgsIDEwMSwgMTEwLCAzMiwgOTYsIDQwLCAxMTIsIDExMSwgMTE1LCA0NCwgMzIsIDEwNSwgMTAwLCAxMjAsIDQxLCA5NiwgNDZd\n                None\n              )\n            )\n            (Assign (list (Name &_lists:31 Store)) (Attribute (Name &self:31 Load) s__lists Load) None)\n            (Assign (list (Name &_mins:31 Store)) (Attribute (Name &self:31 Load) s__mins Load) None)\n            (Assign (list (Name &_list_lens:31 Store)) (Attribute (Name &self:31 Load) s__list_lens Load) None)\n            (AugAssign (Attribute (Name &self:31 Load) s__len Store) Sub (Constant i1 None))\n            (Expr\n              (Call\n                (Attribute (Name &self:31 Load) s__fen_update Load)\n                (list (Name &pos:31 Load) (UnaryOp USub (Constant i1 None)))\n                nil\n              )\n            )\n            (Delete\n              (list (Subscript (Subscript (Name &_lists:31 Load) (Name &pos:31 Load) Load) (Name &idx:31 Load) Del))\n            )\n            (AugAssign (Subscript (Name &_list_lens:31 Load) (Name &pos:31 Load) Store) Sub (Constant i1 None))\n            (If\n              (Subscript (Name &_list_lens:31 Load) (Name &pos:31 Load) Load)\n              (/seq\n                (Assign\n                  (list (Subscript (Name &_mins:31 Load) (Name &pos:31 Load) Store))\n                  (Subscript (Subscript (Name &_lists:31 Load) (Name &pos:31 Load) Load) (Constant i0 None) Load)\n                  None\n                )\n              )\n              (/seq\n                (Delete (list (Subscript (Name &_lists:31 Load) (Name &pos:31 Load) Del)))\n                (Delete (list (Subscript (Name &_list_lens:31 Load) (Name &pos:31 Load) Del)))\n                (Delete (list (Subscript (Name &_mins:31 Load) (Name &pos:31 Load) Del)))\n                (Assign (list (Attribute (Name &self:31 Load) s__rebuild Store)) (Constant True None) None)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_loc_left:5\n          (arguments nil (list (arg &self:32 None None) (arg &value:32 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAxMTAsIDMyLCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgMzIsIDExMiwgOTcsIDEwNSwgMTE0LCAzMiwgMTE2LCAxMDQsIDk3LCAxMTYsIDMyLCA5OSwgMTExLCAxMTQsIDExNCwgMTAxLCAxMTUsIDExMiwgMTExLCAxMTAsIDEwMCwgMTE1LCAzMiwgMTE2LCAxMTEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTAyLCAxMDUsIDExNCwgMTE1LCAxMTYsIDMyLCAxMTIsIDExMSwgMTE1LCAxMDUsIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExMSwgMTAyLCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd\n                None\n              )\n            )\n            (If\n              (UnaryOp Not (Attribute (Name &self:32 Load) s__len Load))\n              (/seq (Return (Tuple (list (Constant i0 None) (Constant i0 None)) Load)))\n              nil\n            )\n            (Assign (list (Name &_lists:32 Store)) (Attribute (Name &self:32 Load) s__lists Load) None)\n            (Assign (list (Name &_mins:32 Store)) (Attribute (Name &self:32 Load) s__mins Load) None)\n            (Assign\n              (list (Tuple (list (Name &lo:32 Store) (Name &pos:32 Store)) Store))\n              (Tuple\n                (list\n                  (UnaryOp USub (Constant i1 None))\n                  (BinOp (Call (Name g_len Load) (list (Name &_lists:32 Load)) nil) Sub (Constant i1 None))\n                )\n                Load\n              )\n              None\n            )\n            (While\n              (Compare (BinOp (Name &lo:32 Load) Add (Constant i1 None)) (list Lt) (list (Name &pos:32 Load)))\n              (/seq\n                (Assign\n                  (list (Name &mi:32 Store))\n                  (BinOp (BinOp (Name &lo:32 Load) Add (Name &pos:32 Load)) RShift (Constant i1 None))\n                  None\n                )\n                (If\n                  (Compare\n                    (Name &value:32 Load)\n                    (list LtE)\n                    (list (Subscript (Name &_mins:32 Load) (Name &mi:32 Load) Load))\n                  )\n                  (/seq (Assign (list (Name &pos:32 Store)) (Name &mi:32 Load) None))\n                  (/seq (Assign (list (Name &lo:32 Store)) (Name &mi:32 Load) None))\n                )\n              )\n              nil\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Name &pos:32 Load)\n                  (Compare\n                    (Name &value:32 Load)\n                    (list LtE)\n                    (list\n                      (Subscript\n                        (Subscript (Name &_lists:32 Load) (BinOp (Name &pos:32 Load) Sub (Constant i1 None)) Load)\n                        (UnaryOp USub (Constant i1 None))\n                        Load\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &pos:32 Store) Sub (Constant i1 None)))\n              nil\n            )\n            (Assign (list (Name &_list:32 Store)) (Subscript (Name &_lists:32 Load) (Name &pos:32 Load) Load) None)\n            (Assign\n              (list (Tuple (list (Name &lo:32 Store) (Name &idx:32 Store)) Store))\n              (Tuple\n                (list (UnaryOp USub (Constant i1 None)) (Call (Name g_len Load) (list (Name &_list:32 Load)) nil))\n                Load\n              )\n              None\n            )\n            (While\n              (Compare (BinOp (Name &lo:32 Load) Add (Constant i1 None)) (list Lt) (list (Name &idx:32 Load)))\n              (/seq\n                (Assign\n                  (list (Name &mi:32 Store))\n                  (BinOp (BinOp (Name &lo:32 Load) Add (Name &idx:32 Load)) RShift (Constant i1 None))\n                  None\n                )\n                (If\n                  (Compare\n                    (Name &value:32 Load)\n                    (list LtE)\n                    (list (Subscript (Name &_list:32 Load) (Name &mi:32 Load) Load))\n                  )\n                  (/seq (Assign (list (Name &idx:32 Store)) (Name &mi:32 Load) None))\n                  (/seq (Assign (list (Name &lo:32 Store)) (Name &mi:32 Load) None))\n                )\n              )\n              nil\n            )\n            (Return (Tuple (list (Name &pos:32 Load) (Name &idx:32 Load)) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_loc_right:5\n          (arguments nil (list (arg &self:33 None None) (arg &value:33 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAxMTAsIDMyLCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgMzIsIDExMiwgOTcsIDEwNSwgMTE0LCAzMiwgMTE2LCAxMDQsIDk3LCAxMTYsIDMyLCA5OSwgMTExLCAxMTQsIDExNCwgMTAxLCAxMTUsIDExMiwgMTExLCAxMTAsIDEwMCwgMTE1LCAzMiwgMTE2LCAxMTEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA4LCA5NywgMTE1LCAxMTYsIDMyLCAxMTIsIDExMSwgMTE1LCAxMDUsIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExMSwgMTAyLCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd\n                None\n              )\n            )\n            (If\n              (UnaryOp Not (Attribute (Name &self:33 Load) s__len Load))\n              (/seq (Return (Tuple (list (Constant i0 None) (Constant i0 None)) Load)))\n              nil\n            )\n            (Assign (list (Name &_lists:33 Store)) (Attribute (Name &self:33 Load) s__lists Load) None)\n            (Assign (list (Name &_mins:33 Store)) (Attribute (Name &self:33 Load) s__mins Load) None)\n            (Assign\n              (list (Tuple (list (Name &pos:33 Store) (Name &hi:33 Store)) Store))\n              (Tuple (list (Constant i0 None) (Call (Name g_len Load) (list (Name &_lists:33 Load)) nil)) Load)\n              None\n            )\n            (While\n              (Compare (BinOp (Name &pos:33 Load) Add (Constant i1 None)) (list Lt) (list (Name &hi:33 Load)))\n              (/seq\n                (Assign\n                  (list (Name &mi:33 Store))\n                  (BinOp (BinOp (Name &pos:33 Load) Add (Name &hi:33 Load)) RShift (Constant i1 None))\n                  None\n                )\n                (If\n                  (Compare\n                    (Name &value:33 Load)\n                    (list Lt)\n                    (list (Subscript (Name &_mins:33 Load) (Name &mi:33 Load) Load))\n                  )\n                  (/seq (Assign (list (Name &hi:33 Store)) (Name &mi:33 Load) None))\n                  (/seq (Assign (list (Name &pos:33 Store)) (Name &mi:33 Load) None))\n                )\n              )\n              nil\n            )\n            (Assign (list (Name &_list:33 Store)) (Subscript (Name &_lists:33 Load) (Name &pos:33 Load) Load) None)\n            (Assign\n              (list (Tuple (list (Name &lo:33 Store) (Name &idx:33 Store)) Store))\n              (Tuple\n                (list (UnaryOp USub (Constant i1 None)) (Call (Name g_len Load) (list (Name &_list:33 Load)) nil))\n                Load\n              )\n              None\n            )\n            (While\n              (Compare (BinOp (Name &lo:33 Load) Add (Constant i1 None)) (list Lt) (list (Name &idx:33 Load)))\n              (/seq\n                (Assign\n                  (list (Name &mi:33 Store))\n                  (BinOp (BinOp (Name &lo:33 Load) Add (Name &idx:33 Load)) RShift (Constant i1 None))\n                  None\n                )\n                (If\n                  (Compare\n                    (Name &value:33 Load)\n                    (list Lt)\n                    (list (Subscript (Name &_list:33 Load) (Name &mi:33 Load) Load))\n                  )\n                  (/seq (Assign (list (Name &idx:33 Store)) (Name &mi:33 Load) None))\n                  (/seq (Assign (list (Name &lo:33 Store)) (Name &mi:33 Load) None))\n                )\n              )\n              nil\n            )\n            (Return (Tuple (list (Name &pos:33 Load) (Name &idx:33 Load)) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:5\n          (arguments nil (list (arg &self:34 None None) (arg &value:34 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzY1LCAxMDAsIDEwMCwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDExNiwgMTExLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd\n                None\n              )\n            )\n            (Assign (list (Name &_load:34 Store)) (Attribute (Name &self:34 Load) s__load Load) None)\n            (Assign (list (Name &_lists:34 Store)) (Attribute (Name &self:34 Load) s__lists Load) None)\n            (Assign (list (Name &_mins:34 Store)) (Attribute (Name &self:34 Load) s__mins Load) None)\n            (Assign (list (Name &_list_lens:34 Store)) (Attribute (Name &self:34 Load) s__list_lens Load) None)\n            (AugAssign (Attribute (Name &self:34 Load) s__len Store) Add (Constant i1 None))\n            (If\n              (Name &_lists:34 Load)\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &pos:34 Store) (Name &idx:34 Store)) Store))\n                  (Call (Attribute (Name &self:34 Load) s__loc_right Load) (list (Name &value:34 Load)) nil)\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &self:34 Load) s__fen_update Load)\n                    (list (Name &pos:34 Load) (Constant i1 None))\n                    nil\n                  )\n                )\n                (Assign (list (Name &_list:34 Store)) (Subscript (Name &_lists:34 Load) (Name &pos:34 Load) Load) None)\n                (Expr\n                  (Call\n                    (Attribute (Name &_list:34 Load) s_insert Load)\n                    (list (Name &idx:34 Load) (Name &value:34 Load))\n                    nil\n                  )\n                )\n                (AugAssign (Subscript (Name &_list_lens:34 Load) (Name &pos:34 Load) Store) Add (Constant i1 None))\n                (Assign\n                  (list (Subscript (Name &_mins:34 Load) (Name &pos:34 Load) Store))\n                  (Subscript (Name &_list:34 Load) (Constant i0 None) Load)\n                  None\n                )\n                (If\n                  (Compare\n                    (BinOp (Name &_load:34 Load) Add (Name &_load:34 Load))\n                    (list Lt)\n                    (list (Call (Name g_len Load) (list (Name &_list:34 Load)) nil))\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &_lists:34 Load) s_insert Load)\n                        (list\n                          (BinOp (Name &pos:34 Load) Add (Constant i1 None))\n                          (Subscript (Name &_list:34 Load) (Slice (Name &_load:34 Load) None None) Load)\n                        )\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &_list_lens:34 Load) s_insert Load)\n                        (list\n                          (BinOp (Name &pos:34 Load) Add (Constant i1 None))\n                          (BinOp (Call (Name g_len Load) (list (Name &_list:34 Load)) nil) Sub (Name &_load:34 Load))\n                        )\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &_mins:34 Load) s_insert Load)\n                        (list\n                          (BinOp (Name &pos:34 Load) Add (Constant i1 None))\n                          (Subscript (Name &_list:34 Load) (Name &_load:34 Load) Load)\n                        )\n                        nil\n                      )\n                    )\n                    (Assign\n                      (list (Subscript (Name &_list_lens:34 Load) (Name &pos:34 Load) Store))\n                      (Name &_load:34 Load)\n                      None\n                    )\n                    (Delete (list (Subscript (Name &_list:34 Load) (Slice (Name &_load:34 Load) None None) Del)))\n                    (Assign (list (Attribute (Name &self:34 Load) s__rebuild Store)) (Constant True None) None)\n                  )\n                  nil\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &_lists:34 Load) s_append Load)\n                    (list (List (list (Name &value:34 Load)) Load))\n                    nil\n                  )\n                )\n                (Expr (Call (Attribute (Name &_mins:34 Load) s_append Load) (list (Name &value:34 Load)) nil))\n                (Expr (Call (Attribute (Name &_list_lens:34 Load) s_append Load) (list (Constant i1 None)) nil))\n                (Assign (list (Attribute (Name &self:34 Load) s__rebuild Store)) (Constant True None) None)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &discard:5\n          (arguments nil (list (arg &self:35 None None) (arg &value:35 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDEwMiwgMTE0LCAxMTEsIDEwOSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDMyLCAxMDUsIDEwMiwgMzIsIDEwNSwgMTE2LCAzMiwgMTA1LCAxMTUsIDMyLCA5NywgMzIsIDEwOSwgMTAxLCAxMDksIDk4LCAxMDEsIDExNCwgNDZd\n                None\n              )\n            )\n            (Assign (list (Name &_lists:35 Store)) (Attribute (Name &self:35 Load) s__lists Load) None)\n            (If\n              (Name &_lists:35 Load)\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &pos:35 Store) (Name &idx:35 Store)) Store))\n                  (Call (Attribute (Name &self:35 Load) s__loc_right Load) (list (Name &value:35 Load)) nil)\n                  None\n                )\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Name &idx:35 Load)\n                      (Compare\n                        (Subscript\n                          (Subscript (Name &_lists:35 Load) (Name &pos:35 Load) Load)\n                          (BinOp (Name &idx:35 Load) Sub (Constant i1 None))\n                          Load\n                        )\n                        (list Eq)\n                        (list (Name &value:35 Load))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &self:35 Load) s__delete Load)\n                        (list (Name &pos:35 Load) (BinOp (Name &idx:35 Load) Sub (Constant i1 None)))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &remove:5\n          (arguments nil (list (arg &self:36 None None) (arg &value:36 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDEwMiwgMTE0LCAxMTEsIDEwOSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDU5LCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA5LCAxMTcsIDExNSwgMTE2LCAzMiwgOTgsIDEwMSwgMzIsIDk3LCAzMiwgMTA5LCAxMDEsIDEwOSwgOTgsIDEwMSwgMTE0LCA0Nl0=\n                None\n              )\n            )\n            (Assign (list (Name &_len:36 Store)) (Attribute (Name &self:36 Load) s__len Load) None)\n            (Expr (Call (Attribute (Name &self:36 Load) s_discard Load) (list (Name &value:36 Load)) nil))\n            (If\n              (Compare (Name &_len:36 Load) (list Eq) (list (Attribute (Name &self:36 Load) s__len Load)))\n              (/seq\n                (Raise\n                  (Call\n                    (Name g_ValueError Load)\n                    (list\n                      (Call\n                        (Attribute\n                          (Constant\n                            s-WzEyMywgNDgsIDMzLCAxMTQsIDEyNSwgMzIsIDExMCwgMTExLCAxMTYsIDMyLCAxMDUsIDExMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNl0=\n                            None\n                          )\n                          s_format\n                          Load\n                        )\n                        (list (Name &value:36 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &pop:5\n          (arguments\n            nil\n            (list (arg &self:37 None None) (arg &index:37 None None))\n            None\n            nil\n            nil\n            None\n            (list (UnaryOp USub (Constant i1 None)))\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDk3LCAxMTAsIDEwMCwgMzIsIDExNCwgMTAxLCAxMTYsIDExNywgMTE0LCAxMTAsIDMyLCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCAzMiwgOTcsIDExNiwgMzIsIDk2LCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgOTYsIDMyLCAxMDUsIDExMCwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ==\n                None\n              )\n            )\n            (Assign\n              (list (Tuple (list (Name &pos:37 Store) (Name &idx:37 Store)) Store))\n              (Call\n                (Attribute (Name &self:37 Load) s__fen_findkth Load)\n                (list\n                  (IfExp\n                    (Compare (Name &index:37 Load) (list Lt) (list (Constant i0 None)))\n                    (BinOp (Attribute (Name &self:37 Load) s__len Load) Add (Name &index:37 Load))\n                    (Name &index:37 Load)\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (Assign\n              (list (Name &value:37 Store))\n              (Subscript\n                (Subscript (Attribute (Name &self:37 Load) s__lists Load) (Name &pos:37 Load) Load)\n                (Name &idx:37 Load)\n                Load\n              )\n              None\n            )\n            (Expr\n              (Call (Attribute (Name &self:37 Load) s__delete Load) (list (Name &pos:37 Load) (Name &idx:37 Load)) nil)\n            )\n            (Return (Name &value:37 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &bisect_left:5\n          (arguments nil (list (arg &self:38 None None) (arg &value:38 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDIsIDEwNSwgMTE0LCAxMTUsIDExNiwgMzIsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCAzMiwgMTE2LCAxMTEsIDMyLCAxMDUsIDExMCwgMTE1LCAxMDEsIDExNCwgMTE2LCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd\n                None\n              )\n            )\n            (Assign\n              (list (Tuple (list (Name &pos:38 Store) (Name &idx:38 Store)) Store))\n              (Call (Attribute (Name &self:38 Load) s__loc_left Load) (list (Name &value:38 Load)) nil)\n              None\n            )\n            (Return\n              (BinOp\n                (Call (Attribute (Name &self:38 Load) s__fen_query Load) (list (Name &pos:38 Load)) nil)\n                Add\n                (Name &idx:38 Load)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &bisect_right:5\n          (arguments nil (list (arg &self:39 None None) (arg &value:39 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDgsIDk3LCAxMTUsIDExNiwgMzIsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCAzMiwgMTE2LCAxMTEsIDMyLCAxMDUsIDExMCwgMTE1LCAxMDEsIDExNCwgMTE2LCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd\n                None\n              )\n            )\n            (Assign\n              (list (Tuple (list (Name &pos:39 Store) (Name &idx:39 Store)) Store))\n              (Call (Attribute (Name &self:39 Load) s__loc_right Load) (list (Name &value:39 Load)) nil)\n              None\n            )\n            (Return\n              (BinOp\n                (Call (Attribute (Name &self:39 Load) s__fen_query Load) (list (Name &pos:39 Load)) nil)\n                Add\n                (Name &idx:39 Load)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &count:5\n          (arguments nil (list (arg &self:40 None None) (arg &value:40 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExMCwgMTE3LCAxMDksIDk4LCAxMDEsIDExNCwgMzIsIDExMSwgMTAyLCAzMiwgMTExLCA5OSwgOTksIDExNywgMTE0LCAxMTQsIDEwMSwgMTEwLCA5OSwgMTAxLCAxMTUsIDMyLCAxMTEsIDEwMiwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDEwNSwgMTEwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ==\n                None\n              )\n            )\n            (Return\n              (BinOp\n                (Call (Attribute (Name &self:40 Load) s_bisect_right Load) (list (Name &value:40 Load)) nil)\n                Sub\n                (Call (Attribute (Name &self:40 Load) s_bisect_left Load) (list (Name &value:40 Load)) nil)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__len__:5\n          (arguments nil (list (arg &self:41 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDEwNSwgMTIyLCAxMDEsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCA0Nl0=\n                None\n              )\n            )\n            (Return (Attribute (Name &self:41 Load) s__len Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__getitem__:5\n          (arguments nil (list (arg &self:42 None None) (arg &index:42 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-Wzc2LCAxMTEsIDExMSwgMTA3LCAxMTcsIDExMiwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDMyLCA5NywgMTE2LCAzMiwgOTYsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCA5NiwgMzIsIDEwNSwgMTEwLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd\n                None\n              )\n            )\n            (Assign\n              (list (Tuple (list (Name &pos:42 Store) (Name &idx:42 Store)) Store))\n              (Call\n                (Attribute (Name &self:42 Load) s__fen_findkth Load)\n                (list\n                  (IfExp\n                    (Compare (Name &index:42 Load) (list Lt) (list (Constant i0 None)))\n                    (BinOp (Attribute (Name &self:42 Load) s__len Load) Add (Name &index:42 Load))\n                    (Name &index:42 Load)\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (Return\n              (Subscript\n                (Subscript (Attribute (Name &self:42 Load) s__lists Load) (Name &pos:42 Load) Load)\n                (Name &idx:42 Load)\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__delitem__:5\n          (arguments nil (list (arg &self:43 None None) (arg &index:43 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDMyLCA5NywgMTE2LCAzMiwgOTYsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCA5NiwgMzIsIDEwMiwgMTE0LCAxMTEsIDEwOSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ==\n                None\n              )\n            )\n            (Assign\n              (list (Tuple (list (Name &pos:43 Store) (Name &idx:43 Store)) Store))\n              (Call\n                (Attribute (Name &self:43 Load) s__fen_findkth Load)\n                (list\n                  (IfExp\n                    (Compare (Name &index:43 Load) (list Lt) (list (Constant i0 None)))\n                    (BinOp (Attribute (Name &self:43 Load) s__len Load) Add (Name &index:43 Load))\n                    (Name &index:43 Load)\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call (Attribute (Name &self:43 Load) s__delete Load) (list (Name &pos:43 Load) (Name &idx:43 Load)) nil)\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__contains__:5\n          (arguments nil (list (arg &self:44 None None) (arg &value:44 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTE0LCAxMTcsIDEwMSwgMzIsIDEwNSwgMTAyLCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTUsIDMyLCA5NywgMTEwLCAzMiwgMTAxLCAxMDgsIDEwMSwgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTExLCAxMDIsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd\n                None\n              )\n            )\n            (Assign (list (Name &_lists:44 Store)) (Attribute (Name &self:44 Load) s__lists Load) None)\n            (If\n              (Name &_lists:44 Load)\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &pos:44 Store) (Name &idx:44 Store)) Store))\n                  (Call (Attribute (Name &self:44 Load) s__loc_left Load) (list (Name &value:44 Load)) nil)\n                  None\n                )\n                (Return\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Name &idx:44 Load)\n                        (list Lt)\n                        (list\n                          (Call\n                            (Name g_len Load)\n                            (list (Subscript (Name &_lists:44 Load) (Name &pos:44 Load) Load))\n                            nil\n                          )\n                        )\n                      )\n                      (Compare\n                        (Subscript (Subscript (Name &_lists:44 Load) (Name &pos:44 Load) Load) (Name &idx:44 Load) Load)\n                        (list Eq)\n                        (list (Name &value:44 Load))\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n            (Return (Constant False None))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__iter__:5\n          (arguments nil (list (arg &self:45 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAxMTAsIDMyLCAxMDUsIDExNiwgMTAxLCAxMTQsIDk3LCAxMTYsIDExMSwgMTE0LCAzMiwgMTExLCAxMTgsIDEwMSwgMTE0LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ==\n                None\n              )\n            )\n            (Return\n              (GeneratorExp\n                (Name &value:48 Load)\n                (list\n                  (comprehension (Name &_list:54 Store) (Attribute (Name &self:45 Load) s__lists Load) nil i0)\n                  (comprehension (Name &value:48 Store) (Name &_list:54 Load) nil i0)\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__reversed__:5\n          (arguments nil (list (arg &self:46 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAzMiwgMTE0LCAxMDEsIDExOCwgMTAxLCAxMTQsIDExNSwgMTAxLCAzMiwgMTA1LCAxMTYsIDEwMSwgMTE0LCA5NywgMTE2LCAxMTEsIDExNCwgMzIsIDExMSwgMTE4LCAxMDEsIDExNCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCA0Nl0=\n                None\n              )\n            )\n            (Return\n              (GeneratorExp\n                (Name &value:49 Load)\n                (list\n                  (comprehension\n                    (Name &_list:55 Store)\n                    (Call (Name g_reversed Load) (list (Attribute (Name &self:46 Load) s__lists Load)) nil)\n                    nil\n                    i0\n                  )\n                  (comprehension\n                    (Name &value:49 Store)\n                    (Call (Name g_reversed Load) (list (Name &_list:55 Load)) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__repr__:5\n          (arguments nil (list (arg &self:47 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNSwgMTE2LCAxMTQsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTQsIDEwMSwgMTEyLCAxMTQsIDEwMSwgMTE1LCAxMDEsIDExMCwgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTExLCAxMDIsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCA0Nl0=\n                None\n              )\n            )\n            (Return\n              (Call\n                (Attribute\n                  (Constant\n                    s-WzgzLCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgNzYsIDEwNSwgMTE1LCAxMTYsIDQwLCAxMjMsIDQ4LCAxMjUsIDQxXQ==\n                    None\n                  )\n                  s_format\n                  Load\n                )\n                (list (Call (Name g_list Load) (list (Name &self:47 Load)) nil))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &case:14 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:14 Store)) (Call (Name g_int Load) (list (Call (Name &inp:0 Load) nil nil)) nil) None)\n        (Assign (list (Name &a:14 Store)) (Call (Name &lis:0 Load) nil nil) None)\n        (Assign (list (Name &queries:14 Store)) (List nil Load) None)\n        (Assign (list (Name &m:14 Store)) (Call (Name g_int Load) (list (Call (Name &inp:0 Load) nil nil)) nil) None)\n        (For\n          (Name &i:14 Store)\n          (Call (Name g_range Load) (list (Name &m:14 Load)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &k:14 Store) (Name &pos:14 Store)) Store))\n              (Call (Name &sep:0 Load) nil nil)\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Name &queries:14 Load) s_append Load)\n                (list (Tuple (list (Name &k:14 Load) (Name &pos:14 Load) (Name &i:14 Load)) Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &queries:14 Load) s_sort Load) nil nil))\n        (Assign\n          (list (Name &b:14 Store))\n          (Subscript\n            (Call (Name g_sorted Load) (list (Name &a:14 Load)) nil)\n            (Slice None None (UnaryOp USub (Constant i1 None)))\n            Load\n          )\n          None\n        )\n        (Assign (list (Name &ind:14 Store)) (Dict nil nil) None)\n        (For\n          (Name &i:14 Store)\n          (Call (Name g_range Load) (list (Name &n:14 Load)) nil)\n          (/seq\n            (If\n              (Compare (Subscript (Name &a:14 Load) (Name &i:14 Load) Load) (list NotIn) (list (Name &ind:14 Load)))\n              (/seq\n                (Assign\n                  (list (Subscript (Name &ind:14 Load) (Subscript (Name &a:14 Load) (Name &i:14 Load) Load) Store))\n                  (Call (Name &deque:0 Load) (list (List (list (Name &i:14 Load)) Load)) nil)\n                  None\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript (Name &ind:14 Load) (Subscript (Name &a:14 Load) (Name &i:14 Load) Load) Load)\n                      s_append\n                      Load\n                    )\n                    (list (Name &i:14 Load))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &sl:14 Store)) (Call (Name &SortedList:0 Load) nil nil) None)\n        (Assign (list (Name &currind:14 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &ans:14 Store))\n          (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &m:14 Load))\n          None\n        )\n        (For\n          (Tuple (list (Name &k:14 Store) (Name &pos:14 Store) (Name &where:14 Store)) Store)\n          (Name &queries:14 Load)\n          (/seq\n            (While\n              (Compare (Name &currind:14 Load) (list Lt) (list (Name &k:14 Load)))\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &sl:14 Load) s_add Load)\n                    (list\n                      (Call\n                        (Attribute\n                          (Subscript\n                            (Name &ind:14 Load)\n                            (Subscript (Name &b:14 Load) (Name &currind:14 Load) Load)\n                            Load\n                          )\n                          s_popleft\n                          Load\n                        )\n                        nil\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (AugAssign (Name &currind:14 Store) Add (Constant i1 None))\n              )\n              nil\n            )\n            (Assign\n              (list (Subscript (Name &ans:14 Load) (Name &where:14 Load) Store))\n              (Subscript\n                (Name &a:14 Load)\n                (Subscript (Name &sl:14 Load) (BinOp (Name &pos:14 Load) Sub (Constant i1 None)) Load)\n                Load\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &i:14 Store)\n          (Name &ans:14 Load)\n          (/seq (Expr (Call (Name &print:0 Load) (list (Name &i:14 Load)) nil)))\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &testcase:0 Load) (list (Constant i1 None)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call\n        (Name g_int Load)\n        (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute\n                  (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp (Name &i:1 Load) (list (comprehension (Name &i:1 Store) (Name &arr:0 Load) nil i0)))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Store))\n          (List (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Name &i:0 Load))) Load)\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &arr:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &dic:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_list Load)) nil) None)\n    (Expr\n      (Constant\n        s-WzEwMiwgMTExLCAxMTQsIDMyLCAxMDUsIDMyLCAxMDUsIDExMCwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDEsIDQwLCA0OSwgNDQsIDExMCwgNDMsIDQ5LCA0MSwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMTAwLCAxMDUsIDk5LCA5MSwgMTA1LCA5MywgNjEsIDEwMCwgMTA1LCA5OSwgOTEsIDEwNSwgNDUsIDQ5LCA5MywgNDMsIDkxLCA0NSwgOTcsIDExNCwgMTE0LCA5MSwgMTEwLCA0NSwgMTA1LCA5MywgOTEsIDQ5LCA5MywgOTMsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMTAwLCAxMDUsIDk5LCA5MSwgMTA1LCA5MywgNDYsIDExNSwgMTExLCAxMTQsIDExNiwgNDAsIDQxXQ==\n        None\n      )\n    )\n    (Assign (list (Name &z:0 Store)) (Call (Name g_len Load) (list (Name &arr:0 Load)) nil) None)\n    (Assign\n      (list (Name &m:0 Store))\n      (Call\n        (Name g_int Load)\n        (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n        nil\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute\n                  (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Subscript (Name &dic:0 Load) (Name &n:0 Load) Load) (list NotEq) (list (List nil Load)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Subscript\n                    (Name &l:0 Load)\n                    (Subscript\n                      (Subscript (Name &dic:0 Load) (Name &n:0 Load) Load)\n                      (BinOp (Name &pos:0 Load) Sub (Constant i1 None))\n                      Load\n                    )\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &dic:0 Load) (Name &n:0 Load) Store))\n              (ListComp\n                (Constant i0 None)\n                (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n              )\n              None\n            )\n            (Assign (list (Name &ind:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None)\n            (For\n              (Name &i:0 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (BinOp (Name &z:0 Load) Sub (Constant i1 None))\n                  (BinOp (BinOp (Name &z:0 Load) Sub (Name &n:0 Load)) Sub (Constant i1 None))\n                  (UnaryOp USub (Constant i1 None))\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Subscript (Name &dic:0 Load) (Name &n:0 Load) Load) (Name &ind:0 Load) Store))\n                  (UnaryOp\n                    USub\n                    (Subscript (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n                  )\n                  None\n                )\n                (AugAssign (Name &ind:0 Store) Sub (Constant i1 None))\n              )\n              nil\n              None\n            )\n            (Expr (Call (Attribute (Subscript (Name &dic:0 Load) (Name &n:0 Load) Load) s_sort Load) nil nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Subscript\n                    (Name &l:0 Load)\n                    (Subscript\n                      (Subscript (Name &dic:0 Load) (Name &n:0 Load) Load)\n                      (BinOp (Name &pos:0 Load) Sub (Constant i1 None))\n                      Load\n                    )\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (ClassDef\n      &SortedList:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments\n            nil\n            (list (arg &self:5 None None) (arg &iterable:5 None None) (arg &_load:5 None None))\n            None\n            nil\n            nil\n            None\n            (list (Constant None None) (Constant i200 None))\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzczLCAxMTAsIDEwNSwgMTE2LCAxMDUsIDk3LCAxMDgsIDEwNSwgMTIyLCAxMDEsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCAzMiwgMTA1LCAxMTAsIDExNSwgMTE2LCA5NywgMTEwLCA5OSwgMTAxLCA0Nl0=\n                None\n              )\n            )\n            (If\n              (Compare (Name &iterable:5 Load) (list Is) (list (Constant None None)))\n              (/seq (Assign (list (Name &iterable:5 Store)) (List nil Load) None))\n              nil\n            )\n            (Assign (list (Name &values:5 Store)) (Call (Name g_sorted Load) (list (Name &iterable:5 Load)) nil) None)\n            (Assign\n              (list (Attribute (Name &self:5 Load) s__len Store) (Name &_len:5 Store))\n              (Call (Name g_len Load) (list (Name &values:5 Load)) nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:5 Load) s__load Store)) (Name &_load:5 Load) None)\n            (Assign\n              (list (Attribute (Name &self:5 Load) s__lists Store) (Name &_lists:5 Store))\n              (ListComp\n                (Subscript\n                  (Name &values:5 Load)\n                  (Slice (Name &i:35 Load) (BinOp (Name &i:35 Load) Add (Name &_load:5 Load)) None)\n                  Load\n                )\n                (list\n                  (comprehension\n                    (Name &i:35 Store)\n                    (Call (Name g_range Load) (list (Constant i0 None) (Name &_len:5 Load) (Name &_load:5 Load)) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:5 Load) s__list_lens Store))\n              (ListComp\n                (Call (Name g_len Load) (list (Name &_list:36 Load)) nil)\n                (list (comprehension (Name &_list:36 Store) (Name &_lists:5 Load) nil i0))\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:5 Load) s__mins Store))\n              (ListComp\n                (Subscript (Name &_list:37 Load) (Constant i0 None) Load)\n                (list (comprehension (Name &_list:37 Store) (Name &_lists:5 Load) nil i0))\n              )\n              None\n            )\n            (Assign (list (Attribute (Name &self:5 Load) s__fen_tree Store)) (List nil Load) None)\n            (Assign (list (Attribute (Name &self:5 Load) s__rebuild Store)) (Constant True None) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_fen_build:1\n          (arguments nil (list (arg &self:6 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzY2LCAxMTcsIDEwNSwgMTA4LCAxMDAsIDMyLCA5NywgMzIsIDEwMiwgMTAxLCAxMTAsIDExOSwgMTA1LCA5OSwgMTA3LCAzMiwgMTE2LCAxMTQsIDEwMSwgMTAxLCAzMiwgMTA1LCAxMTAsIDExNSwgMTE2LCA5NywgMTEwLCA5OSwgMTAxLCA0Nl0=\n                None\n              )\n            )\n            (Assign\n              (list (Subscript (Attribute (Name &self:6 Load) s__fen_tree Load) (Slice None None None) Store))\n              (Attribute (Name &self:6 Load) s__list_lens Load)\n              None\n            )\n            (Assign (list (Name &_fen_tree:6 Store)) (Attribute (Name &self:6 Load) s__fen_tree Load) None)\n            (For\n              (Name &i:6 Store)\n              (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &_fen_tree:6 Load)) nil)) nil)\n              (/seq\n                (If\n                  (Compare\n                    (BinOp (Name &i:6 Load) BitOr (BinOp (Name &i:6 Load) Add (Constant i1 None)))\n                    (list Lt)\n                    (list (Call (Name g_len Load) (list (Name &_fen_tree:6 Load)) nil))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript\n                        (Name &_fen_tree:6 Load)\n                        (BinOp (Name &i:6 Load) BitOr (BinOp (Name &i:6 Load) Add (Constant i1 None)))\n                        Store\n                      )\n                      Add\n                      (Subscript (Name &_fen_tree:6 Load) (Name &i:6 Load) Load)\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Assign (list (Attribute (Name &self:6 Load) s__rebuild Store)) (Constant False None) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_fen_update:1\n          (arguments\n            nil\n            (list (arg &self:7 None None) (arg &index:7 None None) (arg &value:7 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-Wzg1LCAxMTIsIDEwMCwgOTcsIDExNiwgMTAxLCAzMiwgOTYsIDEwMiwgMTAxLCAxMTAsIDk1LCAxMTYsIDExNCwgMTAxLCAxMDEsIDkxLCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgOTMsIDMyLCA0MywgNjEsIDMyLCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgNDZd\n                None\n              )\n            )\n            (If\n              (UnaryOp Not (Attribute (Name &self:7 Load) s__rebuild Load))\n              (/seq\n                (Assign (list (Name &_fen_tree:7 Store)) (Attribute (Name &self:7 Load) s__fen_tree Load) None)\n                (While\n                  (Compare\n                    (Name &index:7 Load)\n                    (list Lt)\n                    (list (Call (Name g_len Load) (list (Name &_fen_tree:7 Load)) nil))\n                  )\n                  (/seq\n                    (AugAssign (Subscript (Name &_fen_tree:7 Load) (Name &index:7 Load) Store) Add (Name &value:7 Load))\n                    (AugAssign (Name &index:7 Store) BitOr (BinOp (Name &index:7 Load) Add (Constant i1 None)))\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_fen_query:1\n          (arguments nil (list (arg &self:8 None None) (arg &end:8 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk2LCAxMTUsIDExNywgMTA5LCA0MCwgOTUsIDEwMiwgMTAxLCAxMTAsIDk1LCAxMTYsIDExNCwgMTAxLCAxMDEsIDkxLCA1OCwgMTAxLCAxMTAsIDEwMCwgOTMsIDQxLCA5NiwgNDZd\n                None\n              )\n            )\n            (If\n              (Attribute (Name &self:8 Load) s__rebuild Load)\n              (/seq (Expr (Call (Attribute (Name &self:8 Load) s__fen_build Load) nil nil)))\n              nil\n            )\n            (Assign (list (Name &_fen_tree:8 Store)) (Attribute (Name &self:8 Load) s__fen_tree Load) None)\n            (Assign (list (Name &x:8 Store)) (Constant i0 None) None)\n            (While\n              (Name &end:8 Load)\n              (/seq\n                (AugAssign\n                  (Name &x:8 Store)\n                  Add\n                  (Subscript (Name &_fen_tree:8 Load) (BinOp (Name &end:8 Load) Sub (Constant i1 None)) Load)\n                )\n                (AugAssign (Name &end:8 Store) BitAnd (BinOp (Name &end:8 Load) Sub (Constant i1 None)))\n              )\n              nil\n            )\n            (Return (Name &x:8 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_fen_findkth:1\n          (arguments nil (list (arg &self:9 None None) (arg &k:9 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAzMiwgMTEyLCA5NywgMTA1LCAxMTQsIDMyLCAxMTEsIDEwMiwgMzIsIDQwLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA4LCA5NywgMTE0LCAxMDMsIDEwMSwgMTE1LCAxMTYsIDMyLCA5NiwgMTA1LCAxMDAsIDEyMCwgOTYsIDMyLCAxMTUsIDExNywgOTksIDEwNCwgMzIsIDExNiwgMTA0LCA5NywgMTE2LCAzMiwgOTYsIDExNSwgMTE3LCAxMDksIDQwLCA5NSwgMTAyLCAxMDEsIDExMCwgOTUsIDExNiwgMTE0LCAxMDEsIDEwMSwgOTEsIDU4LCAxMDUsIDEwMCwgMTIwLCA5MywgNDEsIDMyLCA2MCwgNjEsIDMyLCAxMDcsIDk2LCA0NCwgMzIsIDk2LCAxMDcsIDMyLCA0NSwgMzIsIDExNSwgMTE3LCAxMDksIDQwLCA5NSwgMTAyLCAxMDEsIDExMCwgOTUsIDExNiwgMTE0LCAxMDEsIDEwMSwgOTEsIDU4LCAxMDUsIDEwMCwgMTIwLCA5MywgNDEsIDk2LCA0MSwgNDZd\n                None\n              )\n            )\n            (Assign (list (Name &_list_lens:9 Store)) (Attribute (Name &self:9 Load) s__list_lens Load) None)\n            (If\n              (Compare (Name &k:9 Load) (list Lt) (list (Subscript (Name &_list_lens:9 Load) (Constant i0 None) Load)))\n              (/seq (Return (Tuple (list (Constant i0 None) (Name &k:9 Load)) Load)))\n              nil\n            )\n            (If\n              (Compare\n                (Name &k:9 Load)\n                (list GtE)\n                (list\n                  (BinOp\n                    (Attribute (Name &self:9 Load) s__len Load)\n                    Sub\n                    (Subscript (Name &_list_lens:9 Load) (UnaryOp USub (Constant i1 None)) Load)\n                  )\n                )\n              )\n              (/seq\n                (Return\n                  (Tuple\n                    (list\n                      (BinOp (Call (Name g_len Load) (list (Name &_list_lens:9 Load)) nil) Sub (Constant i1 None))\n                      (BinOp\n                        (BinOp\n                          (Name &k:9 Load)\n                          Add\n                          (Subscript (Name &_list_lens:9 Load) (UnaryOp USub (Constant i1 None)) Load)\n                        )\n                        Sub\n                        (Attribute (Name &self:9 Load) s__len Load)\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (If\n              (Attribute (Name &self:9 Load) s__rebuild Load)\n              (/seq (Expr (Call (Attribute (Name &self:9 Load) s__fen_build Load) nil nil)))\n              nil\n            )\n            (Assign (list (Name &_fen_tree:9 Store)) (Attribute (Name &self:9 Load) s__fen_tree Load) None)\n            (Assign (list (Name &idx:9 Store)) (UnaryOp USub (Constant i1 None)) None)\n            (For\n              (Name &d:9 Store)\n              (Call\n                (Name g_reversed Load)\n                (list\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (Call\n                        (Attribute (Call (Name g_len Load) (list (Name &_fen_tree:9 Load)) nil) s_bit_length Load)\n                        nil\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Name &right_idx:9 Store))\n                  (BinOp (Name &idx:9 Load) Add (BinOp (Constant i1 None) LShift (Name &d:9 Load)))\n                  None\n                )\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Name &right_idx:9 Load)\n                        (list Lt)\n                        (list (Call (Name g_len Load) (list (Name &_fen_tree:9 Load)) nil))\n                      )\n                      (Compare\n                        (Name &k:9 Load)\n                        (list GtE)\n                        (list (Subscript (Name &_fen_tree:9 Load) (Name &right_idx:9 Load) Load))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign (list (Name &idx:9 Store)) (Name &right_idx:9 Load) None)\n                    (AugAssign (Name &k:9 Store) Sub (Subscript (Name &_fen_tree:9 Load) (Name &idx:9 Load) Load))\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Return (Tuple (list (BinOp (Name &idx:9 Load) Add (Constant i1 None)) (Name &k:9 Load)) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_delete:1\n          (arguments\n            nil\n            (list (arg &self:10 None None) (arg &pos:10 None None) (arg &idx:10 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzY4LCAxMDEsIDEwOCwgMTAxLCAxMTYsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMywgMTA1LCAxMTgsIDEwMSwgMTEwLCAzMiwgOTYsIDQwLCAxMTIsIDExMSwgMTE1LCA0NCwgMzIsIDEwNSwgMTAwLCAxMjAsIDQxLCA5NiwgNDZd\n                None\n              )\n            )\n            (Assign (list (Name &_lists:10 Store)) (Attribute (Name &self:10 Load) s__lists Load) None)\n            (Assign (list (Name &_mins:10 Store)) (Attribute (Name &self:10 Load) s__mins Load) None)\n            (Assign (list (Name &_list_lens:10 Store)) (Attribute (Name &self:10 Load) s__list_lens Load) None)\n            (AugAssign (Attribute (Name &self:10 Load) s__len Store) Sub (Constant i1 None))\n            (Expr\n              (Call\n                (Attribute (Name &self:10 Load) s__fen_update Load)\n                (list (Name &pos:10 Load) (UnaryOp USub (Constant i1 None)))\n                nil\n              )\n            )\n            (Delete\n              (list (Subscript (Subscript (Name &_lists:10 Load) (Name &pos:10 Load) Load) (Name &idx:10 Load) Del))\n            )\n            (AugAssign (Subscript (Name &_list_lens:10 Load) (Name &pos:10 Load) Store) Sub (Constant i1 None))\n            (If\n              (Subscript (Name &_list_lens:10 Load) (Name &pos:10 Load) Load)\n              (/seq\n                (Assign\n                  (list (Subscript (Name &_mins:10 Load) (Name &pos:10 Load) Store))\n                  (Subscript (Subscript (Name &_lists:10 Load) (Name &pos:10 Load) Load) (Constant i0 None) Load)\n                  None\n                )\n              )\n              (/seq\n                (Delete (list (Subscript (Name &_lists:10 Load) (Name &pos:10 Load) Del)))\n                (Delete (list (Subscript (Name &_list_lens:10 Load) (Name &pos:10 Load) Del)))\n                (Delete (list (Subscript (Name &_mins:10 Load) (Name &pos:10 Load) Del)))\n                (Assign (list (Attribute (Name &self:10 Load) s__rebuild Store)) (Constant True None) None)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_loc_left:1\n          (arguments nil (list (arg &self:11 None None) (arg &value:11 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAxMTAsIDMyLCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgMzIsIDExMiwgOTcsIDEwNSwgMTE0LCAzMiwgMTE2LCAxMDQsIDk3LCAxMTYsIDMyLCA5OSwgMTExLCAxMTQsIDExNCwgMTAxLCAxMTUsIDExMiwgMTExLCAxMTAsIDEwMCwgMTE1LCAzMiwgMTE2LCAxMTEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTAyLCAxMDUsIDExNCwgMTE1LCAxMTYsIDMyLCAxMTIsIDExMSwgMTE1LCAxMDUsIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExMSwgMTAyLCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd\n                None\n              )\n            )\n            (If\n              (UnaryOp Not (Attribute (Name &self:11 Load) s__len Load))\n              (/seq (Return (Tuple (list (Constant i0 None) (Constant i0 None)) Load)))\n              nil\n            )\n            (Assign (list (Name &_lists:11 Store)) (Attribute (Name &self:11 Load) s__lists Load) None)\n            (Assign (list (Name &_mins:11 Store)) (Attribute (Name &self:11 Load) s__mins Load) None)\n            (Assign\n              (list (Tuple (list (Name &lo:11 Store) (Name &pos:11 Store)) Store))\n              (Tuple\n                (list\n                  (UnaryOp USub (Constant i1 None))\n                  (BinOp (Call (Name g_len Load) (list (Name &_lists:11 Load)) nil) Sub (Constant i1 None))\n                )\n                Load\n              )\n              None\n            )\n            (While\n              (Compare (BinOp (Name &lo:11 Load) Add (Constant i1 None)) (list Lt) (list (Name &pos:11 Load)))\n              (/seq\n                (Assign\n                  (list (Name &mi:11 Store))\n                  (BinOp (BinOp (Name &lo:11 Load) Add (Name &pos:11 Load)) RShift (Constant i1 None))\n                  None\n                )\n                (If\n                  (Compare\n                    (Name &value:11 Load)\n                    (list LtE)\n                    (list (Subscript (Name &_mins:11 Load) (Name &mi:11 Load) Load))\n                  )\n                  (/seq (Assign (list (Name &pos:11 Store)) (Name &mi:11 Load) None))\n                  (/seq (Assign (list (Name &lo:11 Store)) (Name &mi:11 Load) None))\n                )\n              )\n              nil\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Name &pos:11 Load)\n                  (Compare\n                    (Name &value:11 Load)\n                    (list LtE)\n                    (list\n                      (Subscript\n                        (Subscript (Name &_lists:11 Load) (BinOp (Name &pos:11 Load) Sub (Constant i1 None)) Load)\n                        (UnaryOp USub (Constant i1 None))\n                        Load\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &pos:11 Store) Sub (Constant i1 None)))\n              nil\n            )\n            (Assign (list (Name &_list:11 Store)) (Subscript (Name &_lists:11 Load) (Name &pos:11 Load) Load) None)\n            (Assign\n              (list (Tuple (list (Name &lo:11 Store) (Name &idx:11 Store)) Store))\n              (Tuple\n                (list (UnaryOp USub (Constant i1 None)) (Call (Name g_len Load) (list (Name &_list:11 Load)) nil))\n                Load\n              )\n              None\n            )\n            (While\n              (Compare (BinOp (Name &lo:11 Load) Add (Constant i1 None)) (list Lt) (list (Name &idx:11 Load)))\n              (/seq\n                (Assign\n                  (list (Name &mi:11 Store))\n                  (BinOp (BinOp (Name &lo:11 Load) Add (Name &idx:11 Load)) RShift (Constant i1 None))\n                  None\n                )\n                (If\n                  (Compare\n                    (Name &value:11 Load)\n                    (list LtE)\n                    (list (Subscript (Name &_list:11 Load) (Name &mi:11 Load) Load))\n                  )\n                  (/seq (Assign (list (Name &idx:11 Store)) (Name &mi:11 Load) None))\n                  (/seq (Assign (list (Name &lo:11 Store)) (Name &mi:11 Load) None))\n                )\n              )\n              nil\n            )\n            (Return (Tuple (list (Name &pos:11 Load) (Name &idx:11 Load)) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_loc_right:1\n          (arguments nil (list (arg &self:12 None None) (arg &value:12 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAxMTAsIDMyLCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgMzIsIDExMiwgOTcsIDEwNSwgMTE0LCAzMiwgMTE2LCAxMDQsIDk3LCAxMTYsIDMyLCA5OSwgMTExLCAxMTQsIDExNCwgMTAxLCAxMTUsIDExMiwgMTExLCAxMTAsIDEwMCwgMTE1LCAzMiwgMTE2LCAxMTEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA4LCA5NywgMTE1LCAxMTYsIDMyLCAxMTIsIDExMSwgMTE1LCAxMDUsIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExMSwgMTAyLCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd\n                None\n              )\n            )\n            (If\n              (UnaryOp Not (Attribute (Name &self:12 Load) s__len Load))\n              (/seq (Return (Tuple (list (Constant i0 None) (Constant i0 None)) Load)))\n              nil\n            )\n            (Assign (list (Name &_lists:12 Store)) (Attribute (Name &self:12 Load) s__lists Load) None)\n            (Assign (list (Name &_mins:12 Store)) (Attribute (Name &self:12 Load) s__mins Load) None)\n            (Assign\n              (list (Tuple (list (Name &pos:12 Store) (Name &hi:12 Store)) Store))\n              (Tuple (list (Constant i0 None) (Call (Name g_len Load) (list (Name &_lists:12 Load)) nil)) Load)\n              None\n            )\n            (While\n              (Compare (BinOp (Name &pos:12 Load) Add (Constant i1 None)) (list Lt) (list (Name &hi:12 Load)))\n              (/seq\n                (Assign\n                  (list (Name &mi:12 Store))\n                  (BinOp (BinOp (Name &pos:12 Load) Add (Name &hi:12 Load)) RShift (Constant i1 None))\n                  None\n                )\n                (If\n                  (Compare\n                    (Name &value:12 Load)\n                    (list Lt)\n                    (list (Subscript (Name &_mins:12 Load) (Name &mi:12 Load) Load))\n                  )\n                  (/seq (Assign (list (Name &hi:12 Store)) (Name &mi:12 Load) None))\n                  (/seq (Assign (list (Name &pos:12 Store)) (Name &mi:12 Load) None))\n                )\n              )\n              nil\n            )\n            (Assign (list (Name &_list:12 Store)) (Subscript (Name &_lists:12 Load) (Name &pos:12 Load) Load) None)\n            (Assign\n              (list (Tuple (list (Name &lo:12 Store) (Name &idx:12 Store)) Store))\n              (Tuple\n                (list (UnaryOp USub (Constant i1 None)) (Call (Name g_len Load) (list (Name &_list:12 Load)) nil))\n                Load\n              )\n              None\n            )\n            (While\n              (Compare (BinOp (Name &lo:12 Load) Add (Constant i1 None)) (list Lt) (list (Name &idx:12 Load)))\n              (/seq\n                (Assign\n                  (list (Name &mi:12 Store))\n                  (BinOp (BinOp (Name &lo:12 Load) Add (Name &idx:12 Load)) RShift (Constant i1 None))\n                  None\n                )\n                (If\n                  (Compare\n                    (Name &value:12 Load)\n                    (list Lt)\n                    (list (Subscript (Name &_list:12 Load) (Name &mi:12 Load) Load))\n                  )\n                  (/seq (Assign (list (Name &idx:12 Store)) (Name &mi:12 Load) None))\n                  (/seq (Assign (list (Name &lo:12 Store)) (Name &mi:12 Load) None))\n                )\n              )\n              nil\n            )\n            (Return (Tuple (list (Name &pos:12 Load) (Name &idx:12 Load)) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:1\n          (arguments nil (list (arg &self:13 None None) (arg &value:13 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzY1LCAxMDAsIDEwMCwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDExNiwgMTExLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd\n                None\n              )\n            )\n            (Assign (list (Name &_load:13 Store)) (Attribute (Name &self:13 Load) s__load Load) None)\n            (Assign (list (Name &_lists:13 Store)) (Attribute (Name &self:13 Load) s__lists Load) None)\n            (Assign (list (Name &_mins:13 Store)) (Attribute (Name &self:13 Load) s__mins Load) None)\n            (Assign (list (Name &_list_lens:13 Store)) (Attribute (Name &self:13 Load) s__list_lens Load) None)\n            (AugAssign (Attribute (Name &self:13 Load) s__len Store) Add (Constant i1 None))\n            (If\n              (Name &_lists:13 Load)\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &pos:13 Store) (Name &idx:13 Store)) Store))\n                  (Call (Attribute (Name &self:13 Load) s__loc_right Load) (list (Name &value:13 Load)) nil)\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &self:13 Load) s__fen_update Load)\n                    (list (Name &pos:13 Load) (Constant i1 None))\n                    nil\n                  )\n                )\n                (Assign (list (Name &_list:13 Store)) (Subscript (Name &_lists:13 Load) (Name &pos:13 Load) Load) None)\n                (Expr\n                  (Call\n                    (Attribute (Name &_list:13 Load) s_insert Load)\n                    (list (Name &idx:13 Load) (Name &value:13 Load))\n                    nil\n                  )\n                )\n                (AugAssign (Subscript (Name &_list_lens:13 Load) (Name &pos:13 Load) Store) Add (Constant i1 None))\n                (Assign\n                  (list (Subscript (Name &_mins:13 Load) (Name &pos:13 Load) Store))\n                  (Subscript (Name &_list:13 Load) (Constant i0 None) Load)\n                  None\n                )\n                (If\n                  (Compare\n                    (BinOp (Name &_load:13 Load) Add (Name &_load:13 Load))\n                    (list Lt)\n                    (list (Call (Name g_len Load) (list (Name &_list:13 Load)) nil))\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &_lists:13 Load) s_insert Load)\n                        (list\n                          (BinOp (Name &pos:13 Load) Add (Constant i1 None))\n                          (Subscript (Name &_list:13 Load) (Slice (Name &_load:13 Load) None None) Load)\n                        )\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &_list_lens:13 Load) s_insert Load)\n                        (list\n                          (BinOp (Name &pos:13 Load) Add (Constant i1 None))\n                          (BinOp (Call (Name g_len Load) (list (Name &_list:13 Load)) nil) Sub (Name &_load:13 Load))\n                        )\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &_mins:13 Load) s_insert Load)\n                        (list\n                          (BinOp (Name &pos:13 Load) Add (Constant i1 None))\n                          (Subscript (Name &_list:13 Load) (Name &_load:13 Load) Load)\n                        )\n                        nil\n                      )\n                    )\n                    (Assign\n                      (list (Subscript (Name &_list_lens:13 Load) (Name &pos:13 Load) Store))\n                      (Name &_load:13 Load)\n                      None\n                    )\n                    (Delete (list (Subscript (Name &_list:13 Load) (Slice (Name &_load:13 Load) None None) Del)))\n                    (Assign (list (Attribute (Name &self:13 Load) s__rebuild Store)) (Constant True None) None)\n                  )\n                  nil\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &_lists:13 Load) s_append Load)\n                    (list (List (list (Name &value:13 Load)) Load))\n                    nil\n                  )\n                )\n                (Expr (Call (Attribute (Name &_mins:13 Load) s_append Load) (list (Name &value:13 Load)) nil))\n                (Expr (Call (Attribute (Name &_list_lens:13 Load) s_append Load) (list (Constant i1 None)) nil))\n                (Assign (list (Attribute (Name &self:13 Load) s__rebuild Store)) (Constant True None) None)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &discard:1\n          (arguments nil (list (arg &self:14 None None) (arg &value:14 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDEwMiwgMTE0LCAxMTEsIDEwOSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDMyLCAxMDUsIDEwMiwgMzIsIDEwNSwgMTE2LCAzMiwgMTA1LCAxMTUsIDMyLCA5NywgMzIsIDEwOSwgMTAxLCAxMDksIDk4LCAxMDEsIDExNCwgNDZd\n                None\n              )\n            )\n            (Assign (list (Name &_lists:14 Store)) (Attribute (Name &self:14 Load) s__lists Load) None)\n            (If\n              (Name &_lists:14 Load)\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &pos:14 Store) (Name &idx:14 Store)) Store))\n                  (Call (Attribute (Name &self:14 Load) s__loc_right Load) (list (Name &value:14 Load)) nil)\n                  None\n                )\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Name &idx:14 Load)\n                      (Compare\n                        (Subscript\n                          (Subscript (Name &_lists:14 Load) (Name &pos:14 Load) Load)\n                          (BinOp (Name &idx:14 Load) Sub (Constant i1 None))\n                          Load\n                        )\n                        (list Eq)\n                        (list (Name &value:14 Load))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &self:14 Load) s__delete Load)\n                        (list (Name &pos:14 Load) (BinOp (Name &idx:14 Load) Sub (Constant i1 None)))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &remove:1\n          (arguments nil (list (arg &self:15 None None) (arg &value:15 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDEwMiwgMTE0LCAxMTEsIDEwOSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDU5LCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA5LCAxMTcsIDExNSwgMTE2LCAzMiwgOTgsIDEwMSwgMzIsIDk3LCAzMiwgMTA5LCAxMDEsIDEwOSwgOTgsIDEwMSwgMTE0LCA0Nl0=\n                None\n              )\n            )\n            (Assign (list (Name &_len:15 Store)) (Attribute (Name &self:15 Load) s__len Load) None)\n            (Expr (Call (Attribute (Name &self:15 Load) s_discard Load) (list (Name &value:15 Load)) nil))\n            (If\n              (Compare (Name &_len:15 Load) (list Eq) (list (Attribute (Name &self:15 Load) s__len Load)))\n              (/seq\n                (Raise\n                  (Call\n                    (Name g_ValueError Load)\n                    (list\n                      (Call\n                        (Attribute\n                          (Constant\n                            s-WzEyMywgNDgsIDMzLCAxMTQsIDEyNSwgMzIsIDExMCwgMTExLCAxMTYsIDMyLCAxMDUsIDExMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNl0=\n                            None\n                          )\n                          s_format\n                          Load\n                        )\n                        (list (Name &value:15 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &pop:1\n          (arguments\n            nil\n            (list (arg &self:16 None None) (arg &index:16 None None))\n            None\n            nil\n            nil\n            None\n            (list (UnaryOp USub (Constant i1 None)))\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDk3LCAxMTAsIDEwMCwgMzIsIDExNCwgMTAxLCAxMTYsIDExNywgMTE0LCAxMTAsIDMyLCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCAzMiwgOTcsIDExNiwgMzIsIDk2LCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgOTYsIDMyLCAxMDUsIDExMCwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ==\n                None\n              )\n            )\n            (Assign\n              (list (Tuple (list (Name &pos:16 Store) (Name &idx:16 Store)) Store))\n              (Call\n                (Attribute (Name &self:16 Load) s__fen_findkth Load)\n                (list\n                  (IfExp\n                    (Compare (Name &index:16 Load) (list Lt) (list (Constant i0 None)))\n                    (BinOp (Attribute (Name &self:16 Load) s__len Load) Add (Name &index:16 Load))\n                    (Name &index:16 Load)\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (Assign\n              (list (Name &value:16 Store))\n              (Subscript\n                (Subscript (Attribute (Name &self:16 Load) s__lists Load) (Name &pos:16 Load) Load)\n                (Name &idx:16 Load)\n                Load\n              )\n              None\n            )\n            (Expr\n              (Call (Attribute (Name &self:16 Load) s__delete Load) (list (Name &pos:16 Load) (Name &idx:16 Load)) nil)\n            )\n            (Return (Name &value:16 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &bisect_left:1\n          (arguments nil (list (arg &self:17 None None) (arg &value:17 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDIsIDEwNSwgMTE0LCAxMTUsIDExNiwgMzIsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCAzMiwgMTE2LCAxMTEsIDMyLCAxMDUsIDExMCwgMTE1LCAxMDEsIDExNCwgMTE2LCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd\n                None\n              )\n            )\n            (Assign\n              (list (Tuple (list (Name &pos:17 Store) (Name &idx:17 Store)) Store))\n              (Call (Attribute (Name &self:17 Load) s__loc_left Load) (list (Name &value:17 Load)) nil)\n              None\n            )\n            (Return\n              (BinOp\n                (Call (Attribute (Name &self:17 Load) s__fen_query Load) (list (Name &pos:17 Load)) nil)\n                Add\n                (Name &idx:17 Load)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &bisect_right:1\n          (arguments nil (list (arg &self:18 None None) (arg &value:18 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDgsIDk3LCAxMTUsIDExNiwgMzIsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCAzMiwgMTE2LCAxMTEsIDMyLCAxMDUsIDExMCwgMTE1LCAxMDEsIDExNCwgMTE2LCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd\n                None\n              )\n            )\n            (Assign\n              (list (Tuple (list (Name &pos:18 Store) (Name &idx:18 Store)) Store))\n              (Call (Attribute (Name &self:18 Load) s__loc_right Load) (list (Name &value:18 Load)) nil)\n              None\n            )\n            (Return\n              (BinOp\n                (Call (Attribute (Name &self:18 Load) s__fen_query Load) (list (Name &pos:18 Load)) nil)\n                Add\n                (Name &idx:18 Load)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &count:1\n          (arguments nil (list (arg &self:19 None None) (arg &value:19 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExMCwgMTE3LCAxMDksIDk4LCAxMDEsIDExNCwgMzIsIDExMSwgMTAyLCAzMiwgMTExLCA5OSwgOTksIDExNywgMTE0LCAxMTQsIDEwMSwgMTEwLCA5OSwgMTAxLCAxMTUsIDMyLCAxMTEsIDEwMiwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDEwNSwgMTEwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ==\n                None\n              )\n            )\n            (Return\n              (BinOp\n                (Call (Attribute (Name &self:19 Load) s_bisect_right Load) (list (Name &value:19 Load)) nil)\n                Sub\n                (Call (Attribute (Name &self:19 Load) s_bisect_left Load) (list (Name &value:19 Load)) nil)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__len__:1\n          (arguments nil (list (arg &self:20 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDEwNSwgMTIyLCAxMDEsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCA0Nl0=\n                None\n              )\n            )\n            (Return (Attribute (Name &self:20 Load) s__len Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__getitem__:1\n          (arguments nil (list (arg &self:21 None None) (arg &index:21 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-Wzc2LCAxMTEsIDExMSwgMTA3LCAxMTcsIDExMiwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDMyLCA5NywgMTE2LCAzMiwgOTYsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCA5NiwgMzIsIDEwNSwgMTEwLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd\n                None\n              )\n            )\n            (Assign\n              (list (Tuple (list (Name &pos:21 Store) (Name &idx:21 Store)) Store))\n              (Call\n                (Attribute (Name &self:21 Load) s__fen_findkth Load)\n                (list\n                  (IfExp\n                    (Compare (Name &index:21 Load) (list Lt) (list (Constant i0 None)))\n                    (BinOp (Attribute (Name &self:21 Load) s__len Load) Add (Name &index:21 Load))\n                    (Name &index:21 Load)\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (Return\n              (Subscript\n                (Subscript (Attribute (Name &self:21 Load) s__lists Load) (Name &pos:21 Load) Load)\n                (Name &idx:21 Load)\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__delitem__:1\n          (arguments nil (list (arg &self:22 None None) (arg &index:22 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDMyLCA5NywgMTE2LCAzMiwgOTYsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCA5NiwgMzIsIDEwMiwgMTE0LCAxMTEsIDEwOSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ==\n                None\n              )\n            )\n            (Assign\n              (list (Tuple (list (Name &pos:22 Store) (Name &idx:22 Store)) Store))\n              (Call\n                (Attribute (Name &self:22 Load) s__fen_findkth Load)\n                (list\n                  (IfExp\n                    (Compare (Name &index:22 Load) (list Lt) (list (Constant i0 None)))\n                    (BinOp (Attribute (Name &self:22 Load) s__len Load) Add (Name &index:22 Load))\n                    (Name &index:22 Load)\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call (Attribute (Name &self:22 Load) s__delete Load) (list (Name &pos:22 Load) (Name &idx:22 Load)) nil)\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__contains__:1\n          (arguments nil (list (arg &self:23 None None) (arg &value:23 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTE0LCAxMTcsIDEwMSwgMzIsIDEwNSwgMTAyLCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTUsIDMyLCA5NywgMTEwLCAzMiwgMTAxLCAxMDgsIDEwMSwgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTExLCAxMDIsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd\n                None\n              )\n            )\n            (Assign (list (Name &_lists:23 Store)) (Attribute (Name &self:23 Load) s__lists Load) None)\n            (If\n              (Name &_lists:23 Load)\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &pos:23 Store) (Name &idx:23 Store)) Store))\n                  (Call (Attribute (Name &self:23 Load) s__loc_left Load) (list (Name &value:23 Load)) nil)\n                  None\n                )\n                (Return\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Name &idx:23 Load)\n                        (list Lt)\n                        (list\n                          (Call\n                            (Name g_len Load)\n                            (list (Subscript (Name &_lists:23 Load) (Name &pos:23 Load) Load))\n                            nil\n                          )\n                        )\n                      )\n                      (Compare\n                        (Subscript (Subscript (Name &_lists:23 Load) (Name &pos:23 Load) Load) (Name &idx:23 Load) Load)\n                        (list Eq)\n                        (list (Name &value:23 Load))\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n            (Return (Constant False None))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__iter__:1\n          (arguments nil (list (arg &self:24 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAxMTAsIDMyLCAxMDUsIDExNiwgMTAxLCAxMTQsIDk3LCAxMTYsIDExMSwgMTE0LCAzMiwgMTExLCAxMTgsIDEwMSwgMTE0LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ==\n                None\n              )\n            )\n            (Return\n              (GeneratorExp\n                (Name &value:32 Load)\n                (list\n                  (comprehension (Name &_list:38 Store) (Attribute (Name &self:24 Load) s__lists Load) nil i0)\n                  (comprehension (Name &value:32 Store) (Name &_list:38 Load) nil i0)\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__reversed__:1\n          (arguments nil (list (arg &self:25 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAzMiwgMTE0LCAxMDEsIDExOCwgMTAxLCAxMTQsIDExNSwgMTAxLCAzMiwgMTA1LCAxMTYsIDEwMSwgMTE0LCA5NywgMTE2LCAxMTEsIDExNCwgMzIsIDExMSwgMTE4LCAxMDEsIDExNCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCA0Nl0=\n                None\n              )\n            )\n            (Return\n              (GeneratorExp\n                (Name &value:33 Load)\n                (list\n                  (comprehension\n                    (Name &_list:39 Store)\n                    (Call (Name g_reversed Load) (list (Attribute (Name &self:25 Load) s__lists Load)) nil)\n                    nil\n                    i0\n                  )\n                  (comprehension\n                    (Name &value:33 Store)\n                    (Call (Name g_reversed Load) (list (Name &_list:39 Load)) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__repr__:1\n          (arguments nil (list (arg &self:26 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNSwgMTE2LCAxMTQsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTQsIDEwMSwgMTEyLCAxMTQsIDEwMSwgMTE1LCAxMDEsIDExMCwgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTExLCAxMDIsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCA0Nl0=\n                None\n              )\n            )\n            (Return\n              (Call\n                (Attribute\n                  (Constant\n                    s-WzgzLCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgNzYsIDEwNSwgMTE1LCAxMTYsIDQwLCAxMjMsIDQ4LCAxMjUsIDQxXQ==\n                    None\n                  )\n                  s_format\n                  Load\n                )\n                (list (Call (Name g_list Load) (list (Name &self:26 Load)) nil))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:4 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &aa:4 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &a:4 Store))\n          (ListComp\n            (Tuple\n              (list (Name &v:34 Load) (BinOp (BinOp (Name &n:4 Load) Sub (Name &i:34 Load)) Sub (Constant i1 None)))\n              Load\n            )\n            (list\n              (comprehension\n                (Tuple (list (Name &i:34 Store) (Name &v:34 Store)) Store)\n                (Call (Name g_enumerate Load) (list (Name &aa:4 Load)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &a:4 Load) s_sort Load) nil nil))\n        (Expr (Call (Attribute (Name &a:4 Load) s_reverse Load) nil nil))\n        (Assign (list (Name &q:4 Store)) (List nil Load) None)\n        (For\n          (Name &i:4 Store)\n          (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &x:4 Store) (Name &y:4 Store)) Store))\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Name &q:4 Load) s_append Load)\n                (list (Tuple (list (Name &x:4 Load) (Name &y:4 Load) (Name &i:4 Load)) Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &q:4 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:41 None None)) None nil nil None nil)\n                  (Subscript (Name &x:41 Load) (Constant i0 None) Load)\n                )\n              )\n            )\n          )\n        )\n        (Assign (list (Name &b:4 Store)) (Call (Name &SortedList:0 Load) nil nil) None)\n        (Assign\n          (list (Name &ans:4 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (Call (Name g_len Load) (list (Name &q:4 Load)) nil))\n          None\n        )\n        (Assign (list (Name &j:4 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:4 Store)\n          (Name &q:4 Load)\n          (/seq\n            (While\n              (Compare (Name &j:4 Load) (list Lt) (list (Subscript (Name &i:4 Load) (Constant i0 None) Load)))\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &b:4 Load) s_add Load)\n                    (list\n                      (UnaryOp\n                        USub\n                        (BinOp\n                          (BinOp\n                            (Subscript (Subscript (Name &a:4 Load) (Name &j:4 Load) Load) (Constant i1 None) Load)\n                            Sub\n                            (Name &n:4 Load)\n                          )\n                          Add\n                          (Constant i1 None)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n                (AugAssign (Name &j:4 Store) Add (Constant i1 None))\n              )\n              nil\n            )\n            (Assign\n              (list (Subscript (Name &ans:4 Load) (Subscript (Name &i:4 Load) (Constant i2 None) Load) Store))\n              (Subscript\n                (Name &aa:4 Load)\n                (Subscript\n                  (Name &b:4 Load)\n                  (BinOp (Subscript (Name &i:4 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                  Load\n                )\n                Load\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &i:4 Store)\n          (Name &ans:4 Load)\n          (/seq (Expr (Call (Name g_print Load) (list (Name &i:4 Load)) nil)))\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:2 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:27 None None) (arg &file:27 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:27 Load) s__fd Store))\n              (Call (Attribute (Name &file:27 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:27 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:27 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:27 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:27 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:27 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:27 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:27 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:2\n          (arguments nil (list (arg &self:28 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:28 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:28 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:28 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:28 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:28 Store))\n                  (Call (Attribute (Attribute (Name &self:28 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:28 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:28 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:28 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:28 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:28 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:28 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:28 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:2\n          (arguments nil (list (arg &self:29 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:29 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:29 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:29 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:29 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:29 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:29 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:29 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:29 Store))\n                  (Call (Attribute (Attribute (Name &self:29 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:29 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:29 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:29 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:29 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:29 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:29 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:29 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:2\n          (arguments nil (list (arg &self:30 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:30 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:30 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:30 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:30 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:30 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:3\n          (arguments nil (list (arg &self:31 None None) (arg &file:31 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:31 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:31 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:31 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:31 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:31 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:31 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:31 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:40 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:31 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:40 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:31 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:31 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:31 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:31 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (ListComp\n        (List nil Load)\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i3 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &g:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign (list (Name &k:0 Store)) (Name &g:0 Load) None)\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &mm:0 Store)) (BinOp (Constant i10 None) Pow (Constant i10 None)) None)\n        (Assign (list (Name &m:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (If\n              (Compare\n                (Call (Name g_len Load) (list (Subscript (Name &b:0 Load) (Name &g:0 Load) Load)) nil)\n                (list NotEq)\n                (list (Constant i0 None))\n              )\n              (/seq\n                (Assign\n                  (list (Name &mm:0 Store))\n                  (Call (Name g_min Load) (list (Subscript (Name &b:0 Load) (Name &g:0 Load) Load)) nil)\n                  None\n                )\n              )\n              nil\n            )\n            (If\n              (Compare (Name &cnt:0 Load) (list Eq) (list (Name &k:0 Load)))\n              (/seq\n                (If\n                  (Compare (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (list Gt) (list (Name &mm:0 Load)))\n                  (/seq\n                    (For\n                      (Name &j:0 Store)\n                      (Call\n                        (Name g_range Load)\n                        (list\n                          (BinOp (Name &k:0 Load) Sub (Constant i1 None))\n                          (UnaryOp USub (Constant i1 None))\n                          (UnaryOp USub (Constant i1 None))\n                        )\n                        nil\n                      )\n                      (/seq\n                        (If\n                          (Compare\n                            (Subscript (Subscript (Name &b:0 Load) (Name &g:0 Load) Load) (Name &j:0 Load) Load)\n                            (list Eq)\n                            (list (Name &mm:0 Load))\n                          )\n                          (/seq\n                            (Expr\n                              (Call\n                                (Attribute (Subscript (Name &b:0 Load) (Name &g:0 Load) Load) s_pop Load)\n                                (list (Name &j:0 Load))\n                                nil\n                              )\n                            )\n                            Break\n                          )\n                          nil\n                        )\n                      )\n                      nil\n                      None\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Subscript (Name &b:0 Load) (Name &g:0 Load) Load) s_append Load)\n                        (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Subscript (Name &b:0 Load) (Name &g:0 Load) Load) s_append Load)\n                    (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))\n                    nil\n                  )\n                )\n                (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n              )\n            )\n            (Assign\n              (list (Name &m:0 Store))\n              (Call (Name g_max Load) (list (Subscript (Name &b:0 Load) (Name &g:0 Load) Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:3 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:3 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (AugAssign (Name &pos:0 Store) Sub (Constant i1 None))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Subscript (Subscript (Name &b:0 Load) (Name &k:0 Load) Load) (Name &pos:0 Load) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &a:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_enumerate Load)\n                (list\n                  (Call\n                    (Name g_map Load)\n                    (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &a:1 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &item:2 None None)) None nil nil None nil)\n                  (Tuple\n                    (list\n                      (Subscript (Name &item:2 Load) (Constant i1 None) Load)\n                      (UnaryOp USub (Subscript (Name &item:2 Load) (Constant i0 None) Load))\n                    )\n                    Load\n                  )\n                )\n              )\n            )\n          )\n        )\n        (Assign (list (Name &m:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Name &m:1 Load)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &k:1 Store) (Name &pos:1 Store)) Store))\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n              None\n            )\n            (Assign\n              (list (Name &s:1 Store))\n              (Subscript (Name &a:1 Load) (Slice (UnaryOp USub (Name &k:1 Load)) None None) Load)\n              None\n            )\n            (Assign (list (Name &s:1 Store)) (Call (Name g_sorted Load) (list (Name &s:1 Load)) nil) None)\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Subscript\n                    (Subscript (Name &s:1 Load) (BinOp (Name &pos:1 Load) Sub (Constant i1 None)) Load)\n                    (Constant i1 None)\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &aa:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &dic:0 Store)) (Dict nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i0 None) (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &aa:0 Load) (Name &i:0 Load) Load) (list NotIn) (list (Name &dic:0 Load)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &dic:0 Load) (Subscript (Name &aa:0 Load) (Name &i:0 Load) Load) Store))\n              (List (list (Name &i:0 Load)) Load)\n              None\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute\n                  (Subscript (Name &dic:0 Load) (Subscript (Name &aa:0 Load) (Name &i:0 Load) Load) Load)\n                  s_append\n                  Load\n                )\n                (list (Name &i:0 Load))\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &ll:0 Store))\n      (Subscript\n        (Call (Name g_sorted Load) (list (Name &dic:0 Load)) nil)\n        (Slice None None (UnaryOp USub (Constant i1 None)))\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Constant i0 None) (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Constant i0 None) (Call (Name g_len Load) (list (Name &ll:0 Load)) nil)) nil)\n          (/seq\n            (If\n              (Compare\n                (Call\n                  (Name g_len Load)\n                  (list (Subscript (Name &dic:0 Load) (Subscript (Name &ll:0 Load) (Name &i:0 Load) Load) Load))\n                  nil\n                )\n                (list Lt)\n                (list (Name &k:0 Load))\n              )\n              (/seq\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Add\n                  (Subscript (Name &dic:0 Load) (Subscript (Name &ll:0 Load) (Name &i:0 Load) Load) Load)\n                )\n                (AugAssign\n                  (Name &k:0 Store)\n                  Sub\n                  (Call\n                    (Name g_len Load)\n                    (list (Subscript (Name &dic:0 Load) (Subscript (Name &ll:0 Load) (Name &i:0 Load) Load) Load))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Add\n                  (Subscript\n                    (Subscript (Name &dic:0 Load) (Subscript (Name &ll:0 Load) (Name &i:0 Load) Load) Load)\n                    (Slice None (Name &k:0 Load) None)\n                    Load\n                  )\n                )\n                Break\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Name &aa:0 Load)\n                (Subscript\n                  (Call (Name g_sorted Load) (list (Name &ans:0 Load)) nil)\n                  (BinOp (Name &pos:0 Load) Sub (Constant i1 None))\n                  Load\n                )\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &u:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) nil) None)\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &d:0 Store)) (List nil Load) None)\n        (Assign (list (Name &p:0 Store)) (List nil Load) None)\n        (Assign\n          (list (Name &s:0 Store))\n          (Subscript (Name &u:0 Load) (Slice (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) None None) Load)\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (If\n              (Compare (Call (Name g_len Load) (list (Name &d:0 Load)) nil) (list Eq) (list (Name &k:0 Load)))\n              (/seq Break)\n              nil\n            )\n            (For\n              (Name &j:0 Store)\n              (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &s:0 Load)) nil)) nil)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &s:0 Load) (Name &j:0 Load) Load)\n                    (list Eq)\n                    (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &s:0 Load) (Name &j:0 Load) Store))\n                      (UnaryOp USub (Constant i1 None))\n                      None\n                    )\n                    (Expr (Call (Attribute (Name &d:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n                    Break\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &d:0 Load) s_sort Load) nil nil))\n        (Expr\n          (Call\n            (Attribute (Name &ans:0 Load) s_append Load)\n            (list\n              (Subscript\n                (Name &a:0 Load)\n                (Subscript (Name &d:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Attribute (Constant s-WzEwXQ== None) s_join Load)\n            (list (Call (Name g_map Load) (list (Name g_str Load) (Name &ans:0 Load)) nil))\n            nil\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a1:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Name &a:0 Load))\n        (list\n          (keyword\n            s_key\n            (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (UnaryOp USub (Name &x:1 Load)))\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &p:0 Store)) Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &c:0 Store)) (Dict nil nil) None)\n        (Assign (list (Name &c1:0 Store)) (Dict nil nil) None)\n        (Assign (list (Name &s:0 Store)) (List nil Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n          (/seq (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (Dict nil nil)) nil)))\n          nil\n          None\n        )\n        (Assign (list (Name &pos:0 Store)) (Dict nil nil) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &c:0 Load) (Subscript (Name &a1:0 Load) (Name &j:0 Load) Load) Store))\n              (Constant i0 None)\n              None\n            )\n            (Assign\n              (list (Subscript (Name &c1:0 Load) (Subscript (Name &a1:0 Load) (Name &j:0 Load) Load) Store))\n              (Constant i0 None)\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                  (Subscript (Name &a:0 Load) (Name &j:0 Load) Load)\n                  Store\n                )\n              )\n              (Constant i0 None)\n              None\n            )\n            (Assign\n              (list (Subscript (Name &pos:0 Load) (Subscript (Name &a1:0 Load) (Name &j:0 Load) Load) Store))\n              (List nil Load)\n              None\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (AugAssign\n              (Subscript\n                (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                (Subscript (Name &a:0 Load) (Name &j:0 Load) Load)\n                Store\n              )\n              Add\n              (Constant i1 None)\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (For\n              (Name &t:0 Store)\n              (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Subscript (Name &s:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Load)\n                      (Subscript (Name &a:0 Load) (Name &t:0 Load) Load)\n                      Store\n                    )\n                  )\n                  (Subscript\n                    (Subscript (Name &s:0 Load) (Name &j:0 Load) Load)\n                    (Subscript (Name &a:0 Load) (Name &t:0 Load) Load)\n                    Load\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (AugAssign\n              (Subscript\n                (Subscript (Name &s:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Load)\n                (Subscript (Name &a:0 Load) (Name &j:0 Load) Load)\n                Store\n              )\n              Sub\n              (Constant i1 None)\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &b:0 Store)) (List nil Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (Name &k:0 Load)) nil)\n          (/seq\n            (AugAssign\n              (Subscript (Name &c:0 Load) (Subscript (Name &a1:0 Load) (Name &j:0 Load) Load) Store)\n              Add\n              (Constant i1 None)\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (Name &k:0 Load) (Name &n:0 Load)) nil)\n          (/seq\n            (AugAssign\n              (Subscript (Name &c1:0 Load) (Subscript (Name &a1:0 Load) (Name &j:0 Load) Load) Store)\n              Add\n              (Constant i1 None)\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &ns:0 Store)) (List nil Load) None)\n        (Assign (list (Name &us:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n        (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (BinOp\n                (Subscript (Name &c1:0 Load) (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) Load)\n                BitXor\n                (Constant i0 None)\n              )\n              (/seq\n                (AugAssign\n                  (Subscript (Name &c1:0 Load) (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) Store)\n                  Sub\n                  (Constant i1 None)\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &ans:0 Load) s_append Load)\n                    (list (Subscript (Name &a:0 Load) (Name &j:0 Load) Load))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (BinOp (Call (Name g_len Load) (list (Name &ans:0 Load)) nil) FloorDiv (Constant i2 None)))\n            nil\n          )\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (Subscript (Name &ans:0 Load) (Name &j:0 Load) Store)\n                    (Subscript\n                      (Name &ans:0 Load)\n                      (BinOp\n                        (BinOp (Call (Name g_len Load) (list (Name &ans:0 Load)) nil) Sub (Constant i1 None))\n                        Sub\n                        (Name &j:0 Load)\n                      )\n                      Store\n                    )\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (Subscript\n                    (Name &ans:0 Load)\n                    (BinOp\n                      (BinOp (Call (Name g_len Load) (list (Name &ans:0 Load)) nil) Sub (Constant i1 None))\n                      Sub\n                      (Name &j:0 Load)\n                    )\n                    Load\n                  )\n                  (Subscript (Name &ans:0 Load) (Name &j:0 Load) Load)\n                )\n                Load\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Subscript (Name &ans:0 Load) (BinOp (Name &p:0 Load) Sub (Constant i1 None)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Import (list (alias &os:1 None)))\n        (ImportFrom s_io (list (alias &BytesIO:1 None)) i0)\n        (Assign\n          (list (Name &input:1 Store))\n          (Attribute\n            (Call\n              (Name &BytesIO:1 Load)\n              (list\n                (Call\n                  (Attribute (Name &os:1 Load) s_read Load)\n                  (list\n                    (Constant i0 None)\n                    (Attribute\n                      (Call (Attribute (Name &os:1 Load) s_fstat Load) (list (Constant i0 None)) nil)\n                      s_st_size\n                      Load\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n            s_readline\n            Load\n          )\n          None\n        )\n        (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:1 Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &a:1 Store))\n          (ListComp\n            (Tuple (list (Call (Name g_int Load) (list (Name &el:2 Load)) nil) (UnaryOp USub (Name &ind:2 Load))) Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &ind:2 Store) (Name &el:2 Store)) Store)\n                (Call\n                  (Name g_enumerate Load)\n                  (list (Call (Attribute (Call (Name &input:1 Load) nil nil) s_split Load) nil nil))\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &a:1 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:1 Load) nil nil)) nil)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &x:1 Store) (Name &y:1 Store)) Store))\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:1 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n              None\n            )\n            (Assign\n              (list (Name &t:1 Store))\n              (Call\n                (Name g_sorted Load)\n                (list (Subscript (Name &a:1 Load) (Slice None (Name &x:1 Load) None) Load))\n                (list\n                  (keyword\n                    s_key\n                    (Lambda\n                      (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n                      (UnaryOp USub (Subscript (Name &x:3 Load) (Constant i1 None) Load))\n                    )\n                  )\n                )\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Subscript\n                    (Subscript (Name &t:1 Load) (BinOp (Name &y:1 Load) Sub (Constant i1 None)) Load)\n                    (Constant i0 None)\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_sorted Load) (list (Name &a:0 Load)) (list (keyword s_reverse (Constant True None))))\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &d:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &k:0 Load)) nil)\n          (/seq\n            (AugAssign\n              (Subscript (Name &d:0 Load) (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) Store)\n              Add\n              (Constant i1 None)\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &num:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n        (For\n          (Name &x:0 Store)\n          (Name &a:0 Load)\n          (/seq\n            (If\n              (Subscript (Name &d:0 Load) (Name &x:0 Load) Load)\n              (/seq\n                (AugAssign (Subscript (Name &d:0 Load) (Name &x:0 Load) Store) Sub (Constant i1 None))\n                (AugAssign (Name &count:0 Store) Add (Constant i1 None))\n              )\n              nil\n            )\n            (If\n              (Compare (Name &count:0 Load) (list Eq) (list (Name &pos:0 Load)))\n              (/seq (Assign (list (Name &num:0 Store)) (Name &x:0 Load) None) Break)\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &num:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_math None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (ImportFrom s_fractions (list (alias g_Fraction None)) i0)\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (ImportFrom s_itertools (list (alias g_permutations None)) i0)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &file:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:3 Load) s__fd Store))\n              (Call (Attribute (Name &file:3 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:3 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:3 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:3 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:3 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:3 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:4 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:4 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:4 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:4 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:4 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:4 Store))\n                  (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:4 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:4 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:4 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:5 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:5 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:5 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:5 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:5 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:5 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:5 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:5 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:5 Store))\n                  (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:5 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:5 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:5 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:6 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:6 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:6 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:7 None None) (arg &file:7 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:7 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:8 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:8 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a1:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &a:0 Load) s_append Load)\n            (list\n              (Tuple\n                (list (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)))\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &c:0 Store)) (Call (Name g_list Load) nil nil) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (Name &k:0 Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &c:0 Load) s_append Load)\n                (list\n                  (BinOp\n                    (Name &n:0 Load)\n                    Sub\n                    (Subscript (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) (Constant i1 None) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &c:0 Load) s_sort Load) nil nil))\n        (Assign\n          (list (Name &res:0 Store))\n          (Subscript\n            (Name &a1:0 Load)\n            (Subscript (Name &c:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n            Load\n          )\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &test:0\n      (arguments nil (list (arg &a:1 None None) (arg &k:1 None None) (arg &pos:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &r:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_reversed Load)\n                (list (Call (Name g_sorted Load) (list (Call (Attribute (Name &a:1 Load) s_copy Load) nil nil)) nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &countLast:1 Store))\n          (Subscript (Name &r:1 Load) (BinOp (Name &k:1 Load) Sub (Constant i1 None)) Load)\n          None\n        )\n        (Assign (list (Name &s:1 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Name &k:1 Load) (Call (Name g_len Load) (list (Name &r:1 Load)) nil)) nil)\n          (/seq\n            (If\n              (Compare (Subscript (Name &r:1 Load) (Name &i:1 Load) Load) (list Eq) (list (Name &countLast:1 Load)))\n              (/seq (AugAssign (Name &s:1 Store) Add (Constant i1 None)))\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &ans:1 Store)) (List nil Load) None)\n        (Assign\n          (list (Name &a:1 Store))\n          (Call (Name g_list Load) (list (Call (Name g_reversed Load) (list (Name &a:1 Load)) nil)) nil)\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &a:1 Load)) nil)) nil)\n          (/seq\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare (Subscript (Name &a:1 Load) (Name &i:1 Load) Load) (list Gt) (list (Name &countLast:1 Load)))\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Subscript (Name &a:1 Load) (Name &i:1 Load) Load)\n                        (list Eq)\n                        (list (Name &countLast:1 Load))\n                      )\n                      (Compare (Name &s:1 Load) (list Eq) (list (Constant i0 None)))\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &ans:1 Load) s_append Load)\n                    (list (Subscript (Name &a:1 Load) (Name &i:1 Load) Load))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Subscript (Name &a:1 Load) (Name &i:1 Load) Load) (list Eq) (list (Name &countLast:1 Load)))\n                  (/seq (AugAssign (Name &s:1 Store) Sub (Constant i1 None)))\n                  nil\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Call (Name g_list Load) (list (Call (Name g_reversed Load) (list (Name &ans:1 Load)) nil)) nil)\n                (BinOp (Name &pos:1 Load) Sub (Constant i1 None))\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr (Call (Name &test:0 Load) (list (Name &a:0 Load) (Name &k:0 Load) (Name &pos:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_* None)) i0)\n    (ImportFrom s_copy (list (alias g_copy None)) i0)\n    (FunctionDef\n      &maximum:0\n      (arguments nil (list (arg &list_ticket:1 None None)) None nil nil None nil)\n      (/seq\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &list_ticket:1 Load)) nil)) nil)\n          (/seq\n            (If\n              (Compare (Name &i:1 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &ma:1 Store)) (Subscript (Name &list_ticket:1 Load) (Name &i:1 Load) Load) None)\n              )\n              (/seq\n                (Assign\n                  (list (Name &ma:1 Store))\n                  (Call\n                    (Name g_max Load)\n                    (list (Name &ma:1 Load) (Subscript (Name &list_ticket:1 Load) (Name &i:1 Load) Load))\n                    nil\n                  )\n                  None\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list (Name &ma:1 Store))\n          (Call (Attribute (Name &list_ticket:1 Load) s_index Load) (list (Name &ma:1 Load)) nil)\n          None\n        )\n        (Expr\n          (Call (Attribute (Name &list_ticket:1 Load) s_insert Load) (list (Name &ma:1 Load) (Constant i0 None)) nil)\n        )\n        (Expr\n          (Call\n            (Attribute (Name &list_ticket:1 Load) s_pop Load)\n            (list (BinOp (Name &ma:1 Load) Add (Constant i1 None)))\n            nil\n          )\n        )\n        (Return (Name &ma:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign (list (Name &b:0 Store)) (Call (Name g_copy Load) (list (Name &a:0 Load)) nil) None)\n        (Assign (list (Name &q:0 Store)) (List nil Load) None)\n        (Assign\n          (list (Name &array:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Subscript (Name &array:0 Load) (Constant i0 None) Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &q:0 Load) s_append Load)\n                (list (Call (Name &maximum:0 Load) (list (Name &b:0 Load)) nil))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &q:0 Load) s_sort Load) nil nil))\n        (Assign (list (Name &q1:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &q:0 Load)) nil)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &q1:0 Load) s_append Load)\n                (list (Subscript (Name &a:0 Load) (Subscript (Name &q:0 Load) (Name &i:0 Load) Load) Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list (Name &q1:0 Store))\n          (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &q1:0 Load)) nil)) nil)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Name &q1:0 Load)\n                (BinOp (Subscript (Name &array:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &a:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Store))\n          (Tuple (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Name &i:0 Load))) Load)\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &k:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &q:0 Store)\n      (Call (Name g_range Load) (list (Name &k:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &l:0 Store)) (Subscript (Name &a:0 Load) (Constant i0 None) Load) None)\n        (Assign (list (Name &p:0 Store)) (Subscript (Name &a:0 Load) (Constant i1 None) Load) None)\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript\n                  (Call\n                    (Name g_sorted Load)\n                    (list (Subscript (Name &b:0 Load) (Slice (UnaryOp USub (Name &l:0 Load)) None None) Load))\n                    (list\n                      (keyword\n                        s_key\n                        (Lambda\n                          (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n                          (UnaryOp USub (Subscript (Name &x:1 Load) (Constant i1 None) Load))\n                        )\n                      )\n                    )\n                  )\n                  (BinOp (Name &p:0 Load) Sub (Constant i1 None))\n                  Load\n                )\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &kj:0 Store) (Name &posj:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &a_copy:0 Store))\n          (ListComp (Name &x:2 Load) (list (comprehension (Name &x:2 Store) (Name &a:0 Load) nil i0)))\n          None\n        )\n        (For\n          (Name &u:0 Store)\n          (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Name &kj:0 Load))) nil)\n          (/seq\n            (Assign (list (Name &mid:0 Store)) (Constant i0 None) None)\n            (For\n              (Name &uuu:0 Store)\n              (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &a_copy:0 Load)) nil)) nil)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &a_copy:0 Load) (Name &uuu:0 Load) Load)\n                    (list LtE)\n                    (list (Subscript (Name &a_copy:0 Load) (Name &mid:0 Load) Load))\n                  )\n                  (/seq (Assign (list (Name &mid:0 Store)) (Name &uuu:0 Load) None))\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Expr (Call (Attribute (Name &a_copy:0 Load) s_pop Load) (list (Name &mid:0 Load)) nil))\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Subscript (Name &a_copy:0 Load) (BinOp (Name &posj:0 Load) Sub (Constant i1 None)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &q:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &q:0 Load) s_append Load)\n            (list (Tuple (list (Name &a:0 Load) (Name &b:0 Load)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (FunctionDef\n      &f:0\n      (arguments nil (list (arg &arr:1 None None) (arg &m:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &vis:1 Store))\n          (BinOp (List (list (Constant False None)) Load) Mult (Call (Name g_len Load) (list (Name &arr:1 Load)) nil))\n          None\n        )\n        (Assign (list (Name &arr2:1 Store)) (List nil Load) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &arr:1 Load)) nil)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &arr2:1 Load) s_append Load)\n                (list\n                  (List\n                    (list\n                      (Subscript (Name &arr:1 Load) (Name &i:1 Load) Load)\n                      (BinOp (Name &n:0 Load) Sub (Name &i:1 Load))\n                    )\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &arr2:1 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n        (Assign\n          (list (Name &arr2:1 Store))\n          (Subscript (Name &arr2:1 Load) (Slice None (Name &m:1 Load) None) Load)\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &arr2:1 Load)) nil)) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Subscript (Name &arr2:1 Load) (Name &i:1 Load) Load) (Constant i1 None) Store))\n              (BinOp\n                (Name &n:0 Load)\n                Sub\n                (Subscript (Subscript (Name &arr2:1 Load) (Name &i:1 Load) Load) (Constant i1 None) Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &arr2:1 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                  (Subscript (Name &x:2 Load) (Constant i1 None) Load)\n                )\n              )\n            )\n          )\n        )\n        (Assign (list (Name &res:1 Store)) (List nil Load) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &arr2:1 Load)) nil)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &res:1 Load) s_append Load)\n                (list (Subscript (Subscript (Name &arr2:1 Load) (Name &i:1 Load) Load) (Constant i0 None) Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &res:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &q:0 Load)\n      (/seq\n        (Assign\n          (list (Name &x:0 Store))\n          (Call (Name &f:0 Load) (list (Name &arr:0 Load) (Subscript (Name &i:0 Load) (Constant i0 None) Load)) nil)\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Name &x:0 Load)\n                (BinOp (Subscript (Name &i:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (Assign\n      (list (Name &mx:0 Store))\n      (BinOp (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None))) Add (Constant i1 None))\n      None\n    )\n    (Assign (list (Name &bit:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &mx:0 Load)) None)\n    (FunctionDef\n      &add:0\n      (arguments nil (list (arg &idx:1 None None)) None nil nil None nil)\n      (/seq\n        (AugAssign (Name &idx:1 Store) Add (Constant i1 None))\n        (While\n          (Compare (Name &idx:1 Load) (list Lt) (list (Name &mx:0 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &bit:0 Load) (Name &idx:1 Load) Store) Add (Constant i1 None))\n            (AugAssign (Name &idx:1 Store) Add (BinOp (Name &idx:1 Load) BitAnd (UnaryOp USub (Name &idx:1 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lower_bound:0\n      (arguments nil (list (arg &val:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &pos:2 Store)) (Constant i0 None) None)\n        (Assign (list (Name &tot:2 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:2 Store)\n          (Call\n            (Name g_range Load)\n            (list (Constant i20 None) (UnaryOp USub (Constant i1 None)) (UnaryOp USub (Constant i1 None)))\n            nil\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (BinOp (Name &pos:2 Load) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load)))\n                    (list Lt)\n                    (list (Name &mx:0 Load))\n                  )\n                  (Compare\n                    (BinOp\n                      (Name &tot:2 Load)\n                      Add\n                      (Subscript\n                        (Name &bit:0 Load)\n                        (BinOp (Name &pos:2 Load) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load)))\n                        Load\n                      )\n                    )\n                    (list Lt)\n                    (list (Name &val:2 Load))\n                  )\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Name &tot:2 Store)\n                  Add\n                  (Subscript\n                    (Name &bit:0 Load)\n                    (BinOp (Name &pos:2 Load) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load)))\n                    Load\n                  )\n                )\n                (AugAssign (Name &pos:2 Store) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load)))\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &pos:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &new_el:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:0 Load)) nil)) nil))\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &i:3 None None)) None nil nil None nil)\n              (Tuple (list (UnaryOp USub (Subscript (Name &a:0 Load) (Name &i:3 Load) Load)) (Name &i:3 Load)) Load)\n            )\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign (list (Name &queries:0 Store)) (List nil Load) None)\n    (Assign (list (Name &answers:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &m:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &p:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &queries:0 Load) s_append Load)\n            (list (List (list (Name &k:0 Load) (Name &p:0 Load) (Name &i:0 Load)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &queries:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &curr_len:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store) (Name &query_idx:0 Store)) Store))\n          (Subscript (Name &queries:0 Load) (Name &i:0 Load) Load)\n          None\n        )\n        (While\n          (Compare (Name &curr_len:0 Load) (list Lt) (list (Name &k:0 Load)))\n          (/seq\n            (Expr (Call (Name &add:0 Load) (list (Subscript (Name &new_el:0 Load) (Name &curr_len:0 Load) Load)) nil))\n            (AugAssign (Name &curr_len:0 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Assign\n          (list (Subscript (Name &answers:0 Load) (Name &query_idx:0 Load) Store))\n          (Subscript (Name &a:0 Load) (Call (Name &lower_bound:0 Load) (list (Name &pos:0 Load)) nil) Load)\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &answers:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &al:1 Store))\n          (ListComp\n            (List\n              (list (Call (Name g_int Load) (list (Name &x:3 Load)) nil) (BinOp (Name &n:1 Load) Sub (Name &i:3 Load)))\n              Load\n            )\n            (list\n              (comprehension\n                (Tuple (list (Name &i:3 Store) (Name &x:3 Store)) Store)\n                (Call\n                  (Name g_enumerate Load)\n                  (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &al:1 Load) s_sort Load) nil nil))\n        (Expr (Call (Attribute (Name &al:1 Load) s_reverse Load) nil nil))\n        (Assign\n          (list (Name &arr:1 Store))\n          (ListComp\n            (ListComp\n              (List nil Load)\n              (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (Name &n:1 Load)) nil) nil i0))\n            )\n            (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:1 Load)) nil) nil i0))\n          )\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:1 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (For\n              (Name &j:1 Store)\n              (Call (Name g_range Load) (list (BinOp (Name &i:1 Load) Sub (Constant i1 None)) (Name &n:1 Load)) nil)\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Subscript (Name &arr:1 Load) (Name &j:1 Load) Load)\n                      (BinOp\n                        (Name &n:1 Load)\n                        Sub\n                        (Subscript\n                          (Subscript (Name &al:1 Load) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) Load)\n                          (Constant i1 None)\n                          Load\n                        )\n                      )\n                      Store\n                    )\n                  )\n                  (Subscript\n                    (Subscript (Name &al:1 Load) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) Load)\n                    (Constant i0 None)\n                    Load\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Name &n:1 Load)) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &arr:1 Load) (Name &i:1 Load) Store))\n              (Call\n                (Name g_list Load)\n                (list\n                  (Call\n                    (Name g_filter Load)\n                    (list (Constant None None) (Subscript (Name &arr:1 Load) (Name &i:1 Load) Load))\n                    nil\n                  )\n                )\n                nil\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (For\n          (Name &_:1 Store)\n          (Call (Name g_range Load) (list (Name &q:1 Load)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &k:1 Store) (Name &ind:1 Store)) Store))\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Subscript\n                    (Subscript (Name &arr:1 Load) (BinOp (Name &k:1 Load) Sub (Constant i1 None)) Load)\n                    (BinOp (Name &ind:1 Load) Sub (Constant i1 None))\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i2 None))\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Store))\n          (Subscript (Name &b:0 Load) (Name &i:0 Load) Load)\n          None\n        )\n        (Assign\n          (list (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Store))\n          (Name &i:0 Load)\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) (Constant i0 None) Load)\n                (list Gt)\n                (list\n                  (Subscript\n                    (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Load)\n                    (Constant i0 None)\n                    Load\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Tuple\n                      (list\n                        (Subscript (Name &a:0 Load) (Name &j:0 Load) Store)\n                        (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Store)\n                      )\n                      Store\n                    )\n                  )\n                  (Tuple\n                    (list\n                      (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Load)\n                      (Subscript (Name &a:0 Load) (Name &j:0 Load) Load)\n                    )\n                    Load\n                  )\n                  None\n                )\n              )\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Subscript (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) (Constant i0 None) Load)\n                        (list Eq)\n                        (list\n                          (Subscript\n                            (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Load)\n                            (Constant i0 None)\n                            Load\n                          )\n                        )\n                      )\n                      (Compare\n                        (Subscript (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) (Constant i1 None) Load)\n                        (list Lt)\n                        (list\n                          (Subscript\n                            (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Load)\n                            (Constant i1 None)\n                            Load\n                          )\n                        )\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list\n                        (Tuple\n                          (list\n                            (Subscript (Name &a:0 Load) (Name &j:0 Load) Store)\n                            (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Store)\n                          )\n                          Store\n                        )\n                      )\n                      (Tuple\n                        (list\n                          (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Load)\n                          (Subscript (Name &a:0 Load) (Name &j:0 Load) Load)\n                        )\n                        Load\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &k:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &ind:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &ans:0 Store))\n          (ListComp\n            (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i2 None))\n            (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) nil i0))\n          )\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &k:0 Load)) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Subscript (Name &ans:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Store))\n              (Subscript\n                (Subscript\n                  (Name &a:0 Load)\n                  (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))\n                  Load\n                )\n                (Constant i1 None)\n                Load\n              )\n              None\n            )\n            (Assign\n              (list (Subscript (Subscript (Name &ans:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Store))\n              (Subscript\n                (Subscript\n                  (Name &a:0 Load)\n                  (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))\n                  Load\n                )\n                (Constant i0 None)\n                Load\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &ans:0 Load) s_sort Load) nil nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &ans:0 Load) (BinOp (Name &ind:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i1 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &save:0 Store)) (List nil Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &save:0 Load) s_append Load)\n                (list (Subscript (Name &a:0 Load) (Name &j:0 Load) Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n        (For\n          (Name &x:0 Store)\n          (Call (Name g_range Load) (list (Name &k:0 Load)) nil)\n          (/seq\n            (Assign (list (Name &maximum:0 Store)) (Constant i0 None) None)\n            (Assign (list (Name &pr:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n            (For\n              (Name &j:0 Store)\n              (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &save:0 Load)) nil)) nil)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &save:0 Load) (Name &j:0 Load) Load)\n                    (list Gt)\n                    (list (Name &maximum:0 Load))\n                  )\n                  (/seq\n                    (Assign (list (Name &maximum:0 Store)) (Subscript (Name &save:0 Load) (Name &j:0 Load) Load) None)\n                    (Assign (list (Name &pr:0 Store)) (Name &j:0 Load) None)\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &maximum:0 Load)) nil))\n            (Expr (Call (Attribute (Name &save:0 Load) s_pop Load) (list (Name &pr:0 Load)) nil))\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &ans:0 Load) s_sort Load) nil nil))\n        (Assign (list (Name &answer:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil)\n          (/seq\n            (If\n              (Compare (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (list In) (list (Name &ans:0 Load)))\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &answer:0 Load) s_append Load)\n                    (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &ans:0 Load) s_pop Load)\n                    (list\n                      (Call\n                        (Attribute (Name &ans:0 Load) s_index Load)\n                        (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Subscript (Name &answer:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &s:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (ListComp\n            (List (list (Name &v:1 Load) (UnaryOp USub (Name &i:1 Load))) Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &i:1 Store) (Name &v:1 Store)) Store)\n                (Call\n                  (Name g_enumerate Load)\n                  (list\n                    (Call\n                      (Name g_map Load)\n                      (list\n                        (Name g_int Load)\n                        (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                      )\n                      nil\n                    )\n                  )\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &i:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &ans:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list (Subscript (Name &s:0 Load) (Slice (UnaryOp USub (Name &k:0 Load)) None None) Load))\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                  (UnaryOp USub (Subscript (Name &x:2 Load) (Constant i1 None) Load))\n                )\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &ans:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None)\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &b:0 Store)) (BinOp (Name &a:0 Load) Add (List nil Load)) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &k:0 Load)) nil)\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Name &d:0 Load)\n                  (Call\n                    (Attribute (Name &b:0 Load) s_index Load)\n                    (list (Call (Name g_max Load) (list (Name &b:0 Load)) nil))\n                    nil\n                  )\n                  Store\n                )\n              )\n              (Call (Name g_max Load) (list (Name &b:0 Load)) nil)\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Name &b:0 Load)\n                  (Call\n                    (Attribute (Name &b:0 Load) s_index Load)\n                    (list (Call (Name g_max Load) (list (Name &b:0 Load)) nil))\n                    nil\n                  )\n                  Store\n                )\n              )\n              (Constant i0 None)\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Name &d:0 Load)\n                (Subscript\n                  (Call (Name g_sorted Load) (list (Call (Attribute (Name &d:0 Load) s_keys Load) nil nil)) nil)\n                  (BinOp (Name &pos:0 Load) Sub (Constant i1 None))\n                  Load\n                )\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &mergesort:0\n      (arguments\n        nil\n        (list (arg &l:1 None None) (arg &r:1 None None) (arg &arr:1 None None) (arg &pos:1 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (If\n          (Compare (BinOp (Name &r:1 Load) Sub (Name &l:1 Load)) (list Eq) (list (Constant i1 None)))\n          (/seq (Return (Tuple (list (Name &arr:1 Load) (Name &pos:1 Load)) Load)))\n          nil\n        )\n        (Assign\n          (list (Name &m:1 Store))\n          (BinOp (BinOp (Name &l:1 Load) Add (Name &r:1 Load)) FloorDiv (Constant i2 None))\n          None\n        )\n        (Assign\n          (list (Tuple (list (Name &arr:1 Store) (Name &pos:1 Store)) Store))\n          (Call\n            (Name &mergesort:0 Load)\n            (list (Name &l:1 Load) (Name &m:1 Load) (Name &arr:1 Load) (Name &pos:1 Load))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (Name &arr:1 Store) (Name &pos:1 Store)) Store))\n          (Call\n            (Name &mergesort:0 Load)\n            (list (Name &m:1 Load) (Name &r:1 Load) (Name &arr:1 Load) (Name &pos:1 Load))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &c:1 Store))\n          (ListComp\n            (Constant i0 None)\n            (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (Name &r:1 Load)) nil) nil i0))\n          )\n          None\n        )\n        (Assign\n          (list (Name &d:1 Store))\n          (ListComp\n            (Constant i0 None)\n            (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (Name &r:1 Load)) nil) nil i0))\n          )\n          None\n        )\n        (Assign (list (Name &poi_a:1 Store)) (Name &l:1 Load) None)\n        (Assign (list (Name &poi_b:1 Store)) (Name &m:1 Load) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Name &l:1 Load) (Name &r:1 Load)) nil)\n          (/seq\n            (If\n              (Compare (Name &poi_a:1 Load) (list Eq) (list (Name &m:1 Load)))\n              (/seq\n                (Assign\n                  (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store))\n                  (Subscript (Name &arr:1 Load) (Name &poi_b:1 Load) Load)\n                  None\n                )\n                (Assign\n                  (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store))\n                  (Subscript (Name &pos:1 Load) (Name &poi_b:1 Load) Load)\n                  None\n                )\n                (AugAssign (Name &poi_b:1 Store) Add (Constant i1 None))\n              )\n              (/seq\n                (If\n                  (Compare (Name &poi_b:1 Load) (list Eq) (list (Name &r:1 Load)))\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store))\n                      (Subscript (Name &arr:1 Load) (Name &poi_a:1 Load) Load)\n                      None\n                    )\n                    (Assign\n                      (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store))\n                      (Subscript (Name &pos:1 Load) (Name &poi_a:1 Load) Load)\n                      None\n                    )\n                    (AugAssign (Name &poi_a:1 Store) Add (Constant i1 None))\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &a:0 Load) (Name &poi_a:1 Load) Load)\n                        (list Gt)\n                        (list (Subscript (Name &arr:1 Load) (Name &poi_b:1 Load) Load))\n                      )\n                      (/seq\n                        (Assign\n                          (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store))\n                          (Subscript (Name &arr:1 Load) (Name &poi_a:1 Load) Load)\n                          None\n                        )\n                        (Assign\n                          (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store))\n                          (Subscript (Name &pos:1 Load) (Name &poi_a:1 Load) Load)\n                          None\n                        )\n                        (AugAssign (Name &poi_a:1 Store) Add (Constant i1 None))\n                      )\n                      (/seq\n                        (Assign\n                          (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store))\n                          (Subscript (Name &arr:1 Load) (Name &poi_b:1 Load) Load)\n                          None\n                        )\n                        (Assign\n                          (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store))\n                          (Subscript (Name &pos:1 Load) (Name &poi_b:1 Load) Load)\n                          None\n                        )\n                        (AugAssign (Name &poi_b:1 Store) Add (Constant i1 None))\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Name &l:1 Load) (Name &r:1 Load)) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &arr:1 Load) (Name &i:1 Load) Store))\n              (Subscript (Name &c:1 Load) (Name &i:1 Load) Load)\n              None\n            )\n            (Assign\n              (list (Subscript (Name &pos:1 Load) (Name &i:1 Load) Store))\n              (Subscript (Name &d:1 Load) (Name &i:1 Load) Load)\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return (Tuple (list (Name &arr:1 Load) (Name &pos:1 Load)) Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp\n        (Name &i:2 Load)\n        (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign (list (Name &temp:0 Store)) (Subscript (Name &a:0 Load) (Slice None None None) Load) None)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &p:0 Store)) Store))\n      (Call (Name &mergesort:0 Load) (list (Constant i0 None) (Name &n:0 Load) (Name &a:0 Load) (Name &p:0 Load)) nil)\n      None\n    )\n    (For\n      (Name &m:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &j:0 Store)) (Name &k:0 Load) None)\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &j:0 Load) (list Lt) (list (Name &n:0 Load)))\n              (Compare\n                (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Sub (Constant i1 None)) Load)\n                (list Eq)\n                (list (Subscript (Name &a:0 Load) (Name &j:0 Load) Load))\n              )\n            )\n          )\n          (/seq (AugAssign (Name &j:0 Store) Add (Constant i1 None)))\n          nil\n        )\n        (Assign (list (Name &i:0 Store)) (BinOp (Name &k:0 Load) Sub (Constant i1 None)) None)\n        (Assign (list (Name &l:0 Store)) (Constant i1 None) None)\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &i:0 Load) (list Gt) (list (Constant i0 None)))\n              (Compare\n                (Subscript (Name &a:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                (list Eq)\n                (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))\n              )\n            )\n          )\n          (/seq\n            (AugAssign (Name &i:0 Store) Sub (Constant i1 None))\n            (AugAssign (Name &l:0 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Assign\n          (list (Name &m:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list (Subscript (Name &p:0 Load) (Slice (Name &i:0 Load) (Name &j:0 Load) None) Load))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &res:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (BinOp\n                (Subscript (Name &m:0 Load) (Slice None (Name &l:0 Load) None) Load)\n                Add\n                (Subscript (Name &p:0 Load) (Slice None (Name &i:0 Load) None) Load)\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Name &temp:0 Load)\n                (Subscript (Name &res:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &z:0 Store)) (Subscript (Name &a:0 Load) (Slice None None None) Load) None)\n    (Expr (Call (Attribute (Name &z:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (Assign\n      (list (Name &an:0 Store))\n      (ListComp\n        (List nil Load)\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Subscript (Name &an:0 Load) (Constant i0 None) Store))\n      (Subscript (Name &a:0 Load) (Slice None None None) Load)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (BinOp (Call (Name g_len Load) (list (Name &a:0 Load)) nil) Sub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &a:0 Load) (Name &j:0 Load) Load)\n                (list Eq)\n                (list (Subscript (Name &z:0 Load) (UnaryOp USub (Constant i1 None)) Load))\n              )\n              (/seq\n                (Delete (list (Subscript (Name &a:0 Load) (Name &j:0 Load) Del)))\n                (Expr (Call (Attribute (Name &z:0 Load) s_pop Load) nil nil))\n                Break\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list (Subscript (Name &an:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store))\n          (Subscript (Name &a:0 Load) (Slice None None None) Load)\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &an:0 Store))\n      (Subscript (Name &an:0 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load)\n      None\n    )\n    (For\n      (Name &j:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &an:0 Load) (Name &x:0 Load) Load)\n                (BinOp (Name &y:0 Load) Sub (Constant i1 None))\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &copy1:0 Store)) (Subscript (Name &a:0 Load) (Slice None None None) Load) None)\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (List (list (UnaryOp USub (Constant i1 None))) Load) None)\n        (Assign\n          (list (Name &copy:0 Store))\n          (Subscript (Name &a:0 Load) (Slice (UnaryOp USub (Name &k:0 Load)) None None) Load)\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Name &copy1:0 Load)\n          (/seq\n            (If\n              (Compare (Name &i:0 Load) (list In) (list (Name &copy:0 Load)))\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &copy:0 Load) s_pop Load)\n                    (list (Call (Attribute (Name &copy:0 Load) s_index Load) (list (Name &i:0 Load)) nil))\n                    nil\n                  )\n                )\n                (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Subscript (Name &ans:0 Load) (Name &pos:0 Load) Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) nil) None)\n    (Expr (Call (Attribute (Name &b:0 Load) s_reverse Load) nil nil))\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &x:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &j:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Subscript (Name &b:0 Load) (Slice None (Name &k:0 Load) None) Load)\n          (/seq\n            (Assign\n              (list (Subscript (Name &d:0 Load) (Name &i:0 Load) Store))\n              (BinOp\n                (Call (Attribute (Name &d:0 Load) s_get Load) (list (Name &i:0 Load) (Constant i0 None)) nil)\n                Add\n                (Constant i1 None)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (While\n          (Compare (Name &x:0 Load) (list NotEq) (list (Name &pos:0 Load)))\n          (/seq\n            (Assign (list (Name &u:0 Store)) (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) None)\n            (If\n              (Compare (Name &u:0 Load) (list In) (list (Name &d:0 Load)))\n              (/seq\n                (AugAssign (Subscript (Name &d:0 Load) (Name &u:0 Load) Store) Sub (Constant i1 None))\n                (AugAssign (Name &x:0 Store) Add (Constant i1 None))\n                (If\n                  (Compare (Subscript (Name &d:0 Load) (Name &u:0 Load) Load) (list Eq) (list (Constant i0 None)))\n                  (/seq (Delete (list (Subscript (Name &d:0 Load) (Name &u:0 Load) Del))))\n                  nil\n                )\n              )\n              nil\n            )\n            (AugAssign (Name &j:0 Store) Add (Constant i1 None))\n            (Assign (list (Name &ans:0 Store)) (Name &u:0 Load) None)\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &d:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &d:0 Load) s_append Load)\n            (list (List (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Name &i:0 Load))) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &d:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (Assign (list (Name &e:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &e:0 Load) s_append Load)\n            (list\n              (List\n                (list\n                  (UnaryOp USub (Subscript (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load))\n                  (Subscript (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n                )\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &f:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &b:0 Store) (Name &c:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &f:0 Store)) (Subscript (Name &e:0 Load) (Slice None (Name &b:0 Load) None) Load) None)\n        (Expr (Call (Attribute (Name &f:0 Load) s_sort Load) nil nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &f:0 Load) (BinOp (Name &c:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i1 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Import (list (alias &copy:0 None)))\n    (Assign (list (Name &mins:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign (list (Name &f:0 Store)) (Call (Attribute (Name &a:0 Load) s_copy Load) nil nil) None)\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (For\n          (Name &l:0 Store)\n          (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Name &k:0 Load))) nil)\n          (/seq\n            (If\n              (Compare (Subscript (Name &mins:0 Load) (Name &l:0 Load) Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Subscript (Name &mins:0 Load) (Name &l:0 Load) Store))\n                  (Call (Name g_min Load) (list (Name &f:0 Load)) nil)\n                  None\n                )\n              )\n              nil\n            )\n            (For\n              (Name &j:0 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (BinOp (Call (Name g_len Load) (list (Name &f:0 Load)) nil) Sub (Constant i1 None))\n                  (UnaryOp USub (Constant i1 None))\n                  (UnaryOp USub (Constant i1 None))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &f:0 Load) (Name &j:0 Load) Load)\n                    (list Eq)\n                    (list (Subscript (Name &mins:0 Load) (Name &l:0 Load) Load))\n                  )\n                  (/seq (Expr (Call (Attribute (Name &f:0 Load) s_pop Load) (list (Name &j:0 Load)) nil)) Break)\n                  nil\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Subscript (Name &f:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &a:0 Load) s_append Load)\n            (list\n              (List\n                (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)))\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &a:0 Load) s_reverse Load) nil nil))\n    (Assign (list (Name &p:0 Store)) (List nil Load) None)\n    (Assign (list (Name &t:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &t:0 Load) s_append Load)\n            (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n        )\n        (Assign (list (Name &d:0 Store)) (Call (Attribute (Name &t:0 Load) s_copy Load) nil nil) None)\n        (Expr\n          (Call\n            (Attribute (Name &d:0 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n                  (UnaryOp USub (Subscript (Name &x:1 Load) (Constant i1 None) Load))\n                )\n              )\n            )\n          )\n        )\n        (Expr (Call (Attribute (Name &p:0 Load) s_append Load) (list (Name &d:0 Load)) nil))\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &d:0 Store))\n          (Call\n            (Attribute (Subscript (Name &p:0 Load) (BinOp (Name &k:0 Load) Sub (Constant i1 None)) Load) s_copy Load)\n            nil\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &d:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &a_sorted:0 Store))\n      (Call (Name g_sorted Load) (list (Name &a:0 Load)) (list (keyword s_reverse (Constant True None))))\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:2 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:2 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &vals:0 Store))\n          (Subscript (Name &a_sorted:0 Load) (Slice (Constant i0 None) (Name &k:0 Load) None) Load)\n          None\n        )\n        (Assign (list (Name &result:0 Store)) (List nil Load) None)\n        (For\n          (Name &val:0 Store)\n          (Name &a:0 Load)\n          (/seq\n            (If\n              (Compare (Name &val:0 Load) (list In) (list (Name &vals:0 Load)))\n              (/seq\n                (Expr (Call (Attribute (Name &result:0 Load) s_append Load) (list (Name &val:0 Load)) nil))\n                (Expr (Call (Attribute (Name &vals:0 Load) s_remove Load) (list (Name &val:0 Load)) nil))\n              )\n              nil\n            )\n            (If\n              (Compare (Call (Name g_len Load) (list (Name &vals:0 Load)) nil) (list Eq) (list (Constant i0 None)))\n              (/seq Break)\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Subscript (Name &result:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Store))\n          (Tuple (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Name &i:0 Load))) Load)\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &j:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &t:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &k:0 Store)) (Subscript (Name &t:0 Load) (Constant i0 None) Load) None)\n        (Assign (list (Name &p:0 Store)) (Subscript (Name &t:0 Load) (Constant i1 None) Load) None)\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript\n                  (Call\n                    (Name g_sorted Load)\n                    (list (Subscript (Name &a:0 Load) (Slice (UnaryOp USub (Name &k:0 Load)) None None) Load))\n                    (list\n                      (keyword\n                        s_key\n                        (Lambda\n                          (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n                          (UnaryOp USub (Subscript (Name &x:1 Load) (Constant i1 None) Load))\n                        )\n                      )\n                    )\n                  )\n                  (BinOp (Name &p:0 Load) Sub (Constant i1 None))\n                  Load\n                )\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &j:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &j:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) (list In) (list (Name &d:0 Load)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute\n                  (Subscript (Name &d:0 Load) (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) Load)\n                  s_append\n                  Load\n                )\n                (list (Name &i:0 Load))\n                nil\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &d:0 Load) (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) Store))\n              (List (list (Name &i:0 Load)) Load)\n              None\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Call (Attribute (Name &d:0 Load) s_items Load) nil nil))\n        (list (keyword s_reverse (Constant True None)))\n      )\n      None\n    )\n    (For\n      (Name &que:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &j:2 Load)) nil)\n            (list\n              (comprehension\n                (Name &j:2 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &min_:0 Store)) (List nil Load) None)\n        (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &j:0 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &k:0 Store) Sub (Constant i1 None))\n            (Expr\n              (Call\n                (Attribute (Name &min_:0 Load) s_append Load)\n                (list\n                  (Subscript\n                    (Subscript (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n                    (Name &j:0 Load)\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n            (AugAssign (Name &j:0 Store) Add (Constant i1 None))\n            (If\n              (Compare\n                (Name &j:0 Load)\n                (list Eq)\n                (list\n                  (Call\n                    (Name g_len Load)\n                    (list (Subscript (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n                (Assign (list (Name &j:0 Store)) (Constant i0 None) None)\n              )\n              nil\n            )\n          )\n          nil\n        )\n        (Expr (Call (Attribute (Name &min_:0 Load) s_sort Load) nil nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Name &l:0 Load)\n                (Subscript (Name &min_:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &s_a:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) nil) None)\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &req:0 Store)) (List nil Load) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &req:0 Load) s_append Load)\n            (list\n              (Call\n                (Name g_list Load)\n                (list\n                  (Call\n                    (Name g_map Load)\n                    (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None)\n    (For\n      (Name &r:0 Store)\n      (Name &req:0 Load)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &r:0 Load) (Constant i0 None) Load)\n            (list In)\n            (list (Call (Attribute (Name &d:0 Load) s_keys Load) nil nil))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Subscript\n                    (Subscript (Name &d:0 Load) (Subscript (Name &r:0 Load) (Constant i0 None) Load) Load)\n                    (BinOp (Subscript (Name &r:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Assign (list (Name &del_indx:0 Store)) (List nil Load) None)\n            (For\n              (Name &e:0 Store)\n              (Subscript\n                (Name &s_a:0 Load)\n                (Slice None (BinOp (Name &n:0 Load) Sub (Subscript (Name &r:0 Load) (Constant i0 None) Load)) None)\n                Load\n              )\n              (/seq\n                (For\n                  (Name &i:0 Store)\n                  (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &n:0 Load)) nil)) nil)\n                  (/seq\n                    (If\n                      (Compare (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Name &e:0 Load)))\n                      (/seq\n                        (If\n                          (Compare (Name &i:0 Load) (list NotIn) (list (Name &del_indx:0 Load)))\n                          (/seq\n                            (Expr (Call (Attribute (Name &del_indx:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n                            Break\n                          )\n                          nil\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  nil\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (Assign (list (Name &new_a:0 Store)) (List nil Load) None)\n            (For\n              (Name &i:0 Store)\n              (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n              (/seq\n                (If\n                  (Compare (Name &i:0 Load) (list NotIn) (list (Name &del_indx:0 Load)))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &new_a:0 Load) s_append Load)\n                        (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Assign\n              (list (Subscript (Name &d:0 Load) (Subscript (Name &r:0 Load) (Constant i0 None) Load) Store))\n              (Name &new_a:0 Load)\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Subscript\n                    (Subscript (Name &d:0 Load) (Subscript (Name &r:0 Load) (Constant i0 None) Load) Load)\n                    (BinOp (Subscript (Name &r:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &b:0 Load) s_append Load)\n            (list (List (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Name &i:0 Load))) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &z:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &k:0 Load)) nil)\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (Subscript (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n            )\n            (Expr\n              (Call\n                (Attribute (Name &z:0 Load) s_append Load)\n                (list\n                  (List\n                    (list\n                      (UnaryOp\n                        USub\n                        (Subscript (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n                      )\n                      (Subscript (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n                    )\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &z:0 Load) s_sort Load) nil nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &z:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i1 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &data:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (Assign (list (Name &data1:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &data1:0 Load) s_append Load)\n            (list\n              (Tuple\n                (list\n                  (Call (Name g_int Load) (list (Subscript (Name &data:0 Load) (Name &i:0 Load) Load)) nil)\n                  (Name &i:0 Load)\n                )\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &data1:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n              (Tuple\n                (list\n                  (Subscript (Name &x:1 Load) (Constant i0 None) Load)\n                  (UnaryOp USub (Subscript (Name &x:1 Load) (Constant i1 None) Load))\n                )\n                Load\n              )\n            )\n          )\n        )\n      )\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &temp:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (Subscript\n                (Name &data1:0 Load)\n                (Slice (BinOp (Call (Name g_len Load) (list (Name &data1:0 Load)) nil) Sub (Name &k:0 Load)) None None)\n                Load\n              )\n            )\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                  (Subscript (Name &x:2 Load) (Constant i1 None) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &temp:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &arr:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &sor:0 Store))\n      (ListComp\n        (List\n          (list (Subscript (Name &arr:0 Load) (Name &i:2 Load) Load) (BinOp (Name &n:0 Load) Sub (Name &i:2 Load)))\n          Load\n        )\n        (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &sor:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign (list (Name &op:0 Store)) (List nil Load) None)\n        (Assign\n          (list (List (list (Name &q:0 Store) (Name &index:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &i:3 Load)) nil)\n            (list\n              (comprehension\n                (Name &i:3 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (Name &q:0 Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &op:0 Load) s_append Load)\n                (list\n                  (BinOp\n                    (Name &n:0 Load)\n                    Sub\n                    (Subscript\n                      (Subscript (Name &sor:0 Load) (BinOp (UnaryOp USub (Constant i1 None)) Sub (Name &j:0 Load)) Load)\n                      (Constant i1 None)\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &op:0 Load) s_sort Load) nil nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Name &arr:0 Load)\n                (Subscript (Name &op:0 Load) (BinOp (Name &index:0 Load) Sub (Constant i1 None)) Load)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_* None)) i0)\n    (Import (list (alias g_os None) (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None)) i0)\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute\n        (Call\n          (Name g_BytesIO Load)\n          (list\n            (Call\n              (Attribute (Name g_os Load) s_read Load)\n              (list\n                (Constant i0 None)\n                (Attribute\n                  (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil)\n                  s_st_size\n                  Load\n                )\n              )\n              nil\n            )\n          )\n          nil\n        )\n        s_readline\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &b:0 Load) s_append Load)\n            (list\n              (Tuple (list (UnaryOp USub (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) (Name &i:0 Load)) Load)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil nil))\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &tmp:0 Store)) (List nil Load) None)\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (Name &k:0 Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &tmp:0 Load) s_append Load)\n                (list (Subscript (Subscript (Name &b:0 Load) (Name &j:0 Load) Load) (Constant i1 None) Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &tmp:0 Load) s_sort Load) nil nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Name &a:0 Load)\n                (Subscript (Name &tmp:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &arr_sorted:0 Store))\n      (ListComp\n        (Tuple (list (Subscript (Name &arr:0 Load) (Name &i:1 Load) Load) (Name &i:1 Load)) Load)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &arr_sorted:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &el:2 None None)) None nil nil None nil)\n              (Tuple\n                (list\n                  (Subscript (Name &el:2 Load) (Constant i0 None) Load)\n                  (UnaryOp USub (Subscript (Name &el:2 Load) (Constant i1 None) Load))\n                )\n                Load\n              )\n            )\n          )\n          (keyword s_reverse (Constant True None))\n        )\n      )\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &req_i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &pos:0 Store) Sub (Constant i1 None))\n        (Assign\n          (list (Name &cur_arr:0 Store))\n          (Subscript (Name &arr_sorted:0 Load) (Slice None (Name &k:0 Load) None) Load)\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &cur_arr:0 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &el:3 None None)) None nil nil None nil)\n                  (Subscript (Name &el:3 Load) (Constant i1 None) Load)\n                )\n              )\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Subscript (Subscript (Name &cur_arr:0 Load) (Name &pos:0 Load) Load) (Constant i0 None) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &f:0\n      (arguments nil (list (arg &a:1 None None)) None nil nil None nil)\n      (/seq (Return (UnaryOp USub (Subscript (Name &a:1 Load) (Constant i1 None) Load))))\n      nil\n      None\n      None\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign (list (Name &fin:0 Store)) (Attribute (Name &sys:0 Load) s_stdin Load) None)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Attribute (Name &fin:0 Load) s_readline Load) nil nil) s_split Load) nil nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &arr_ind:0 Store)) (Call (Name g_list Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &arr_ind:0 Load) s_append Load)\n            (list\n              (List (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Name &i:0 Load))) Load)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &arr_ind:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &arr_ind:0 Load) s_reverse Load) nil nil))\n    (Assign (list (Name &ans_array:0 Store)) (Call (Name g_list Load) nil nil) None)\n    (For\n      (Name &k:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &ans:0 Store))\n          (Subscript (Name &arr_ind:0 Load) (Slice None (Name &k:0 Load) None) Load)\n          None\n        )\n        (Expr (Call (Attribute (Name &ans:0 Load) s_sort Load) nil (list (keyword s_key (Name &f:0 Load)))))\n        (Expr (Call (Attribute (Name &ans_array:0 Load) s_append Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &tests:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &test:0 Store)\n      (Call (Name g_range Load) (list (Name &tests:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript\n                  (Subscript (Name &ans_array:0 Load) (BinOp (Name &k:0 Load) Sub (Constant i1 None)) Load)\n                  (BinOp (Name &pos:0 Load) Sub (Constant i1 None))\n                  Load\n                )\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &nar:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &q:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &p:0 Store)) Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &mar:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &k:0 Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &mar:0 Load) s_append Load)\n                (list (Subscript (Name &nar:0 Load) (Name &i:0 Load) Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &k:0 Load) (Name &n:0 Load)) nil)\n          (/seq\n            (Assign (list (Name &minItem:0 Store)) (Constant i0 None) None)\n            (For\n              (Name &j:0 Store)\n              (Call (Name g_range Load) (list (Constant i1 None) (Name &k:0 Load)) nil)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &mar:0 Load) (Name &j:0 Load) Load)\n                    (list LtE)\n                    (list (Subscript (Name &mar:0 Load) (Name &minItem:0 Load) Load))\n                  )\n                  (/seq (Assign (list (Name &minItem:0 Store)) (Name &j:0 Load) None))\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (If\n              (Compare\n                (Subscript (Name &nar:0 Load) (Name &i:0 Load) Load)\n                (list Gt)\n                (list (Subscript (Name &mar:0 Load) (Name &minItem:0 Load) Load))\n              )\n              (/seq\n                (Expr (Call (Attribute (Name &mar:0 Load) s_pop Load) (list (Name &minItem:0 Load)) nil))\n                (Expr\n                  (Call\n                    (Attribute (Name &mar:0 Load) s_append Load)\n                    (list (Subscript (Name &nar:0 Load) (Name &i:0 Load) Load))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Subscript (Name &mar:0 Load) (BinOp (Name &p:0 Load) Sub (Constant i1 None)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_bisect None)))\n    (Import (list (alias g_heapq None)))\n    (Assign\n      (list (Name &Ri:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (ListComp\n          (Call (Name g_int Load) (list (Name &x:7 Load)) nil)\n          (list\n            (comprehension\n              (Name &x:7 Store)\n              (Call\n                (Attribute\n                  (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n              nil\n              i0\n            )\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &ri:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load)\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &input:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n              s_strip\n              Load\n            )\n            nil\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &list2d:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (BinOp (List (list (Name &c:1 Load)) Load) Mult (Name &b:1 Load))\n            (list (comprehension (Name &i:8 Store) (Call (Name g_range Load) (list (Name &a:1 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &list3d:0\n      (arguments\n        nil\n        (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None) (arg &d:2 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Return\n          (ListComp\n            (ListComp\n              (BinOp (List (list (Name &d:2 Load)) Load) Mult (Name &c:2 Load))\n              (list (comprehension (Name &j:11 Store) (Call (Name g_range Load) (list (Name &b:2 Load)) nil) nil i0))\n            )\n            (list (comprehension (Name &i:9 Store) (Call (Name g_range Load) (list (Name &a:2 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &list4d:0\n      (arguments\n        nil\n        (list (arg &a:3 None None) (arg &b:3 None None) (arg &c:3 None None) (arg &d:3 None None) (arg &e:3 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Return\n          (ListComp\n            (ListComp\n              (ListComp\n                (BinOp (List (list (Name &e:3 Load)) Load) Mult (Name &d:3 Load))\n                (list (comprehension (Name &j:15 Store) (Call (Name g_range Load) (list (Name &c:3 Load)) nil) nil i0))\n              )\n              (list (comprehension (Name &j:12 Store) (Call (Name g_range Load) (list (Name &b:3 Load)) nil) nil i0))\n            )\n            (list (comprehension (Name &i:10 Store) (Call (Name g_range Load) (list (Name &a:3 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ceil:0\n      (arguments nil (list (arg &x:4 None None) (arg &y:4 None None)) None nil nil None (list (Constant i1 None)))\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list (UnaryOp USub (BinOp (UnaryOp USub (Name &x:4 Load)) FloorDiv (Name &y:4 Load))))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &INT:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &MAP:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LIST:0\n      (arguments nil (list (arg &N:5 None None)) None nil nil None (list (Constant None None)))\n      (/seq\n        (Return\n          (IfExp\n            (Compare (Name &N:5 Load) (list Is) (list (Constant None None)))\n            (Call (Name g_list Load) (list (Call (Name &MAP:0 Load) nil nil)) nil)\n            (ListComp\n              (Call (Name &INT:0 Load) nil nil)\n              (list (comprehension (Name &i:13 Store) (Call (Name g_range Load) (list (Name &N:5 Load)) nil) nil i0))\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &Yes:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_Yes None)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &No:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_No None)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &YES:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &NO:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &INF:0 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None)\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &ri:0 Load) nil nil)) nil) None)\n    (Assign (list (Name &ar:0 Store)) (Call (Name &Ri:0 Load) nil nil) None)\n    (Assign\n      (list (Name &arr:0 Store))\n      (ListComp\n        (Tuple (list (Subscript (Name &ar:0 Load) (Name &i:6 Load) Load) (Name &i:6 Load)) Load)\n        (list (comprehension (Name &i:6 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &arr:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:14 None None)) None nil nil None nil)\n              (UnaryOp USub (Subscript (Name &x:14 Load) (Constant i0 None) Load))\n            )\n          )\n        )\n      )\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &ri:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (Call (Name &Ri:0 Load) nil nil) None)\n        (Assign (list (Name &temp:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &a:0 Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &temp:0 Load) s_append Load)\n                (list (Subscript (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &temp:0 Load) s_sort Load) nil nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Name &ar:0 Load)\n                (Subscript (Name &temp:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Load)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &s:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &s:0 Load) (Name &i:0 Load) Store))\n          (Tuple (list (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) (Name &i:0 Load)) Load)\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &mx:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Name &s:0 Load))\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &y:1 None None)) None nil nil None nil)\n              (Subscript (Name &y:1 Load) (Constant i0 None) Load)\n            )\n          )\n          (keyword s_reverse (Constant True None))\n        )\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &pos:0 Store) Sub (Constant i1 None))\n        (Assign (list (Name &a:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &last:0 Store))\n          (Subscript (Subscript (Name &mx:0 Load) (Constant i0 None) Load) (Constant i0 None) Load)\n          None\n        )\n        (Assign (list (Name &res:0 Store)) (List nil Load) None)\n        (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None)\n        (Assign (list (Name &d2:0 Store)) (Call (Name g_dict Load) nil nil) None)\n        (For\n          (Name &x:0 Store)\n          (Call (Name g_range Load) (list (Name &k:0 Load)) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load)\n                (list NotIn)\n                (list (Name &d:0 Load))\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &d:0 Load)\n                      (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load)\n                      Store\n                    )\n                  )\n                  (Constant i1 None)\n                  None\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Subscript\n                    (Name &d:0 Load)\n                    (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load)\n                    Store\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &x:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load)\n                (list NotEq)\n                (list (Name &last:0 Load))\n              )\n              (/seq\n                (AugAssign (Name &a:0 Store) Add (Constant i1 None))\n                (Assign\n                  (list (Name &last:0 Store))\n                  (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (If (Compare (Name &a:0 Load) (list Eq) (list (Name &k:0 Load))) (/seq Break) nil)\n            (If\n              (Compare\n                (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load)\n                (list NotIn)\n                (list (Name &d2:0 Load))\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &d2:0 Load)\n                      (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load)\n                      Store\n                    )\n                  )\n                  (List\n                    (list (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i1 None) Load))\n                    Load\n                  )\n                  None\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript\n                        (Name &d2:0 Load)\n                        (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load)\n                        Load\n                      )\n                      s_append\n                      Load\n                    )\n                    (list (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i1 None) Load))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &a:0 Store)\n          (Call (Name g_list Load) (list (Call (Attribute (Name &d:0 Load) s_keys Load) nil nil)) nil)\n          (/seq\n            (Expr (Call (Attribute (Subscript (Name &d2:0 Load) (Name &a:0 Load) Load) s_sort Load) nil nil))\n            (For\n              (Name &j:0 Store)\n              (Call (Name g_range Load) (list (Subscript (Name &d:0 Load) (Name &a:0 Load) Load)) nil)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &res:0 Load) s_append Load)\n                    (list\n                      (Tuple\n                        (list\n                          (Name &a:0 Load)\n                          (Subscript (Subscript (Name &d2:0 Load) (Name &a:0 Load) Load) (Name &j:0 Load) Load)\n                        )\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list (Name &res:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list (Name &res:0 Load))\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &y:2 None None)) None nil nil None nil)\n                  (Subscript (Name &y:2 Load) (Constant i1 None) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Subscript (Subscript (Name &res:0 Load) (Name &pos:0 Load) Load) (Constant i0 None) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Lambda\n                (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n                (Tuple\n                  (list\n                    (Call (Name g_int Load) (list (Subscript (Name &x:1 Load) (Constant i1 None) Load)) nil)\n                    (UnaryOp USub (Subscript (Name &x:1 Load) (Constant i0 None) Load))\n                  )\n                  Load\n                )\n              )\n              (Call\n                (Name g_enumerate Load)\n                (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &so:0 Store)) (Call (Name g_sorted Load) (list (Name &c:0 Load)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &r:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &now:0 Store))\n          (Subscript (Name &so:0 Load) (Slice (UnaryOp USub (Name &k:0 Load)) None None) Load)\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &now:0 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                  (UnaryOp USub (Subscript (Name &x:2 Load) (Constant i1 None) Load))\n                )\n              )\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &now:0 Load) (BinOp (Name &r:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (Call\n            (Name g_zip Load)\n            (list\n              (Call\n                (Name g_list Load)\n                (list\n                  (Call\n                    (Name g_map Load)\n                    (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                    nil\n                  )\n                )\n                nil\n              )\n              (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n            )\n            nil\n          )\n        )\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n              (Tuple\n                (list\n                  (Subscript (Name &x:1 Load) (Constant i0 None) Load)\n                  (UnaryOp USub (Subscript (Name &x:1 Load) (Constant i1 None) Load))\n                )\n                Load\n              )\n            )\n          )\n          (keyword s_reverse (Constant True None))\n        )\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list (Subscript (Name &a:0 Load) (Slice None (Name &k:0 Load) None) Load))\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                  (Subscript (Name &x:2 Load) (Constant i1 None) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &b:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None)) i0)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil)\n      None\n    )\n    (Assign\n      (list (Name &alist:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &aindlist:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (ListComp\n            (Tuple (list (Name &elem:1 Load) (Name &i:1 Load)) Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &i:1 Store) (Name &elem:1 Store)) Store)\n                (Call (Name g_enumerate Load) (list (Name &alist:0 Load)) nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n              (Tuple\n                (list\n                  (UnaryOp USub (Subscript (Name &x:3 Load) (Constant i0 None) Load))\n                  (Subscript (Name &x:3 Load) (Constant i1 None) Load)\n                )\n                Load\n              )\n            )\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &m:0 Store))\n      (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &temp:0 Store))\n          (ListComp\n            (Subscript (Name &x:2 Load) (Constant i1 None) Load)\n            (list\n              (comprehension\n                (Name &x:2 Store)\n                (Subscript (Name &aindlist:0 Load) (Slice None (Name &k:0 Load) None) Load)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &temp:0 Load) s_sort Load) nil nil))\n        (Expr\n          (Call\n            (Attribute (Name &ans:0 Load) s_append Load)\n            (list\n              (Subscript\n                (Name &alist:0 Load)\n                (Subscript (Name &temp:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Starred (Name &ans:0 Load) Load))\n        (list (keyword s_sep (Constant s-WzEwXQ== None)))\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_itertools None)))\n    (Import (list (alias g_functools None)))\n    (ImportFrom s_operator (list (alias g_itemgetter None)) i0)\n    (FunctionDef\n      &cmp:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &a:1 Load) (Constant i0 None) Load)\n            (list Gt)\n            (list (Subscript (Name &b:1 Load) (Constant i0 None) Load))\n          )\n          (/seq (Return (UnaryOp USub (Constant i1 None))))\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &a:1 Load) (Constant i0 None) Load)\n                (list Lt)\n                (list (Subscript (Name &b:1 Load) (Constant i0 None) Load))\n              )\n              (/seq (Return (Constant i1 None)))\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &a:1 Load) (Constant i1 None) Load)\n                    (list Lt)\n                    (list (Subscript (Name &b:1 Load) (Constant i1 None) Load))\n                  )\n                  (/seq (Return (UnaryOp USub (Constant i1 None))))\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &a:1 Load) (Constant i1 None) Load)\n                        (list Gt)\n                        (list (Subscript (Name &b:1 Load) (Constant i1 None) Load))\n                      )\n                      (/seq (Return (Constant i1 None)))\n                      (/seq (Return (Constant i0 None)))\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &c:0 Store)) (Subscript (Name &a:0 Load) (Slice None None None) Load) None)\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_zip Load)\n            (list\n              (Name &a:0 Load)\n              (Call (Attribute (Name g_itertools Load) s_count Load) (list (Constant i0 None)) nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Name &c:0 Load))\n        (list\n          (keyword s_key (Call (Attribute (Name g_functools Load) s_cmp_to_key Load) (list (Name &cmp:0 Load)) nil))\n        )\n      )\n      None\n    )\n    (Assign (list (Name &h:0 Store)) (Subscript (Name &c:0 Load) (Slice None None None) Load) None)\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &h:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list (Subscript (Name &c:0 Load) (Slice None (Name &k:0 Load) None) Load))\n            (list (keyword s_key (Call (Name g_itemgetter Load) (list (Constant i1 None)) nil)))\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &h:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &sequence:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &array:0 Store)) (Call (Name g_list Load) (list (Name &sequence:0 Load)) nil) None)\n    (Expr (Call (Attribute (Name &array:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &D:0 Store)) (Call (Name g_dict Load) nil nil) None)\n        (For\n          (Name &elem:0 Store)\n          (Subscript (Name &array:0 Load) (Slice None (Name &k:0 Load) None) Load)\n          (/seq\n            (If\n              (Compare (Name &elem:0 Load) (list In) (list (Name &D:0 Load)))\n              (/seq (AugAssign (Subscript (Name &D:0 Load) (Name &elem:0 Load) Store) Add (Constant i1 None)))\n              (/seq (Assign (list (Subscript (Name &D:0 Load) (Name &elem:0 Load) Store)) (Constant i1 None) None))\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &elem:0 Store)\n          (Name &sequence:0 Load)\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &elem:0 Load) (list In) (list (Name &D:0 Load)))\n                  (Compare (Subscript (Name &D:0 Load) (Name &elem:0 Load) Load) (list NotEq) (list (Constant i0 None)))\n                )\n              )\n              (/seq\n                (AugAssign (Subscript (Name &D:0 Load) (Name &elem:0 Load) Store) Sub (Constant i1 None))\n                (If\n                  (Compare (Name &pos:0 Load) (list Eq) (list (Constant i1 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Name &elem:0 Load)) nil)) Break)\n                  (/seq (AugAssign (Name &pos:0 Store) Sub (Constant i1 None)))\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &p:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Call (Name g_list Load) (list (Call (Name g_enumerate Load) (list (Name &p:0 Load)) nil)) nil))\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n              (UnaryOp USub (Subscript (Name &x:1 Load) (Constant i1 None) Load))\n            )\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (List (list (List nil Load)) Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &a:0 Load) s_append Load)\n            (list\n              (Call\n                (Name g_sorted Load)\n                (list\n                  (BinOp\n                    (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Load)\n                    Add\n                    (List (list (Subscript (Name &p:0 Load) (Name &i:0 Load) Load)) Load)\n                  )\n                )\n                (list\n                  (keyword\n                    s_key\n                    (Lambda\n                      (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                      (Subscript (Name &x:2 Load) (Constant i0 None) Load)\n                    )\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript\n                  (Subscript (Name &a:0 Load) (Name &x:0 Load) Load)\n                  (BinOp (Name &y:0 Load) Sub (Constant i1 None))\n                  Load\n                )\n                (Constant i1 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &L:0 Store)) (Call (Attribute (Name &A:0 Load) s_copy Load) nil nil) None)\n    (Assign (list (Name &L2:0 Store)) (Call (Attribute (Name &L:0 Load) s_copy Load) nil nil) None)\n    (Expr (Call (Attribute (Name &A:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &r:0 Store)) (List nil Load) None)\n    (FunctionDef\n      &S:0\n      (arguments nil (list (arg &x:1 None None) (arg &L:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &idx:1 Store))\n          (Call (Attribute (Name &L:1 Load) s_index Load) (list (Name &x:1 Load)) nil)\n          None\n        )\n        (Assign (list (Subscript (Name &L:1 Load) (Name &idx:1 Load) Store)) (UnaryOp USub (Constant i1 None)) None)\n        (Return (List (list (Name &idx:1 Load) (Name &x:1 Load)) Load))\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &c:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &B:0 Store))\n          (Subscript\n            (Name &A:0 Load)\n            (Slice\n              None\n              (BinOp (BinOp (Constant i0 None) Sub (Name &k:0 Load)) Sub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n            )\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Name &H:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Lambda\n                    (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                    (Call (Name &S:0 Load) (list (Name &x:2 Load) (Name &L:0 Load)) nil)\n                  )\n                  (Name &B:0 Load)\n                )\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &H:0 Load) s_sort Load) nil nil))\n        (Assign\n          (list (Name &N:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Lambda\n                    (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n                    (Subscript (Name &x:3 Load) (Constant i1 None) Load)\n                  )\n                  (Name &H:0 Load)\n                )\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Name &r:0 Store)\n          Add\n          (List (list (Subscript (Name &N:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)) Load)\n        )\n        (Assign (list (Name &L:0 Store)) (Call (Attribute (Name &L2:0 Load) s_copy Load) nil nil) None)\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Attribute (Constant s-WzEwXQ== None) s_join Load)\n            (list (Call (Name g_map Load) (list (Name g_str Load) (Name &r:0 Load)) nil))\n            nil\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &get_index:0\n      (arguments nil (list (arg &lt:1 None None) (arg &vec:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &max_el:1 Store)) (Constant i0 None) None)\n        (Assign (list (Name &pos:1 Store)) (Constant None None) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &vec:1 Load)) nil)) nil)\n          (/seq\n            (If\n              (Compare (Name &i:1 Load) (list NotIn) (list (Name &lt:1 Load)))\n              (/seq\n                (If\n                  (Compare (Name &max_el:1 Load) (list Lt) (list (Subscript (Name &vec:1 Load) (Name &i:1 Load) Load)))\n                  (/seq\n                    (Assign (list (Name &max_el:1 Store)) (Subscript (Name &vec:1 Load) (Name &i:1 Load) Load) None)\n                    (Assign (list (Name &pos:1 Store)) (Name &i:1 Load) None)\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &pos:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &vec:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:2 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &lst:0 Store))\n      (List\n        (list\n          (List\n            (list\n              (Call\n                (Attribute (Name &vec:0 Load) s_index Load)\n                (list (Call (Name g_max Load) (list (Name &vec:0 Load)) nil))\n                nil\n              )\n            )\n            Load\n          )\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &lt:0 Store))\n          (Call (Name g_list Load) (list (Subscript (Name &lst:0 Load) (Name &i:0 Load) Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &ind:0 Store))\n          (Call (Name &get_index:0 Load) (list (Name &lt:0 Load) (Name &vec:0 Load)) nil)\n          None\n        )\n        (Expr (Call (Attribute (Name &lt:0 Load) s_append Load) (list (Name &ind:0 Load)) nil))\n        (Expr (Call (Attribute (Name &lst:0 Load) s_append Load) (list (Name &lt:0 Load)) nil))\n      )\n      nil\n      None\n    )\n    (For\n      (Name &l:0 Store)\n      (Name &lst:0 Load)\n      (/seq (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil)))\n      nil\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:3 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:3 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Name &vec:0 Load)\n                (Subscript\n                  (Subscript (Name &lst:0 Load) (BinOp (Name &k:0 Load) Sub (Constant i1 None)) Load)\n                  (BinOp (Name &pos:0 Load) Sub (Constant i1 None))\n                  Load\n                )\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (ImportFrom s_math (list (alias g_gcd None) (alias g_sqrt None) (alias g_factorial None) (alias g_pi None)) i0)\n    (ImportFrom s_collections (list (alias g_deque None) (alias g_defaultdict None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &R:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &I:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &S:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call (Attribute (Call (Name &input:0 Load) nil nil) s_rstrip Load) (list (Constant s-WzEwXQ== None)) nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &L:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call (Name g_list Load) (list (Call (Name &R:0 Load) nil nil)) nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &P:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n        (Call (Attribute (Name g_stdout Load) s_write Load) (list (Name &x:1 Load)) nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &lcm:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:2 None None) (arg &y:2 None None)) None nil nil None nil)\n        (BinOp\n          (BinOp (Name &x:2 Load) Mult (Name &y:2 Load))\n          FloorDiv\n          (Call (Name g_gcd Load) (list (Name &x:2 Load) (Name &y:2 Load)) nil)\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &hg:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:3 None None) (arg &y:3 None None)) None nil nil None nil)\n        (BinOp\n          (BinOp (BinOp (BinOp (Name &y:3 Load) Add (Name &x:3 Load)) Sub (Constant i1 None)) FloorDiv (Name &x:3 Load))\n          Mult\n          (Name &x:3 Load)\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &pw:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:4 None None)) None nil nil None nil)\n        (IfExp\n          (Compare (Name &x:4 Load) (list Eq) (list (Constant i1 None)))\n          (Constant i1 None)\n          (BinOp\n            (Constant i1 None)\n            Add\n            (Call (Name &pw:0 Load) (list (BinOp (Name &x:4 Load) FloorDiv (Constant i2 None))) nil)\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &chk:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:5 None None)) None nil nil None nil)\n        (IfExp\n          (UnaryOp Not (BinOp (Name &x:5 Load) Mod (Constant i2 None)))\n          (Call (Name &chk:0 Load) (list (BinOp (Name &x:5 Load) FloorDiv (Constant i2 None))) nil)\n          (IfExp\n            (Compare (Name &x:5 Load) (list Eq) (list (Constant i1 None)))\n            (Constant True None)\n            (Constant False None)\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &sm:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:6 None None)) None nil nil None nil)\n        (BinOp (BinOp (BinOp (Name &x:6 Load) Pow (Constant i2 None)) Add (Name &x:6 Load)) FloorDiv (Constant i2 None))\n      )\n      None\n    )\n    (Assign\n      (list (Name &N:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name &I:0 Load) nil nil) None)\n    (Assign (list (Name &d:0 Store)) (Dict nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_sorted Load)\n        (list (Call (Name g_enumerate Load) (list (Call (Name &R:0 Load) nil nil)) nil))\n        (list\n          (keyword s_reverse (Constant True None))\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:7 None None)) None nil nil None nil)\n              (Subscript (Name &x:7 Load) (Constant i1 None) Load)\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Subscript (Name &i:0 Load) (Constant i1 None) Load) (list NotIn) (list (Name &d:0 Load)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &d:0 Load) (Subscript (Name &i:0 Load) (Constant i1 None) Load) Store))\n              (List nil Load)\n              None\n            )\n          )\n          nil\n        )\n        (AugAssign\n          (Subscript (Name &d:0 Load) (Subscript (Name &i:0 Load) (Constant i1 None) Load) Store)\n          Add\n          (Tuple (list (Name &i:0 Load)) Load)\n        )\n        (Expr\n          (Call\n            (Attribute\n              (Subscript (Name &d:0 Load) (Subscript (Name &i:0 Load) (Constant i1 None) Load) Load)\n              s_sort\n              Load\n            )\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:8 None None)) None nil nil None nil)\n                  (Subscript (Name &x:8 Load) (Constant i0 None) Load)\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Name &d:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &a:0 Load) s_extend Load)\n            (list (Subscript (Name &d:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (List nil Load) None)\n    (Assign (list (Name &x:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (AugAssign (Name &x:0 Store) Add (Tuple (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) Load))\n        (Expr\n          (Call\n            (Attribute (Name &x:0 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:9 None None)) None nil nil None nil)\n                  (Subscript (Name &x:9 Load) (Constant i0 None) Load)\n                )\n              )\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &m:0 Load) s_append Load)\n            (list (Call (Attribute (Name &x:0 Load) s_copy Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Call (Name &I:0 Load) nil nil)) nil)\n      (/seq\n        (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (Call (Name &R:0 Load) nil nil) None)\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript\n                  (Subscript (Name &m:0 Load) (BinOp (Name &k:0 Load) Sub (Constant i1 None)) Load)\n                  (BinOp (Name &pos:0 Load) Sub (Constant i1 None))\n                  Load\n                )\n                (Constant i1 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &line:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign (list (Name &false_line:0 Store)) (Call (Name g_list Load) (list (Name &line:0 Load)) nil) None)\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (While\n          (Compare (Call (Name g_len Load) (list (Name &false_line:0 Load)) nil) (list Gt) (list (Name &k:0 Load)))\n          (/seq\n            (Assign (list (Name &x:0 Store)) (Call (Name g_min Load) (list (Name &false_line:0 Load)) nil) None)\n            (Assign\n              (list (Name &rang:0 Store))\n              (Call\n                (Name g_iter Load)\n                (list\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (UnaryOp USub (Constant i1 None))\n                      (BinOp\n                        (UnaryOp USub (Call (Name g_len Load) (list (Name &false_line:0 Load)) nil))\n                        Sub\n                        (Constant i1 None)\n                      )\n                      (UnaryOp USub (Constant i1 None))\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &j:0 Store)) (Call (Name g_next Load) (list (Name &rang:0 Load)) nil) None)\n            (While\n              (Compare\n                (Name &j:0 Load)\n                (list Gt)\n                (list\n                  (BinOp\n                    (UnaryOp USub (Call (Name g_len Load) (list (Name &false_line:0 Load)) nil))\n                    Sub\n                    (Constant i1 None)\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &false_line:0 Load) (Name &j:0 Load) Load)\n                    (list Eq)\n                    (list (Name &x:0 Load))\n                  )\n                  (/seq\n                    (Delete (list (Subscript (Name &false_line:0 Load) (Name &j:0 Load) Del)))\n                    (If\n                      (Compare\n                        (Call (Name g_len Load) (list (Name &false_line:0 Load)) nil)\n                        (list Eq)\n                        (list (Name &k:0 Load))\n                      )\n                      (/seq Break)\n                      nil\n                    )\n                  )\n                  (/seq\n                    (Try\n                      (/seq\n                        (Assign (list (Name &j:0 Store)) (Call (Name g_next Load) (list (Name &rang:0 Load)) nil) None)\n                      )\n                      (list (ExceptHandler (Name g_StopIteration Load) None (/seq Break)))\n                      nil\n                      nil\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Subscript (Name &false_line:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_copy None)))\n    (Assign (list (Name &b:0 Store)) (List nil Load) None)\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (Assign (list (Name &rezult:0 Store)) (Constant s_ None) None)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (Call (Attribute (Name g_copy Load) s_deepcopy Load) (list (Name &a:0 Load)) nil)\n          None\n        )\n        (Expr (Call (Attribute (Name &b:0 Load) s_reverse Load) nil nil))\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (Constant i1 None) (BinOp (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) Add (Constant i1 None)))\n            nil\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &b:0 Load) s_remove Load)\n                (list (Call (Name g_min Load) (list (Name &b:0 Load)) nil))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &b:0 Load) s_reverse Load) nil nil))\n        (Assign\n          (list (Name &rezult:0 Store))\n          (BinOp\n            (BinOp (Name &rezult:0 Load) Add (Constant s-WzEwXQ== None))\n            Add\n            (Call\n              (Name g_str Load)\n              (list (Subscript (Name &b:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load))\n              nil\n            )\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &rezult:0 Load)) nil))\n  )\n  nil\n)"]