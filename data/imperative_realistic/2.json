["(Module\n  (/seq\n    (Assign\n      (list (Name &m:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &l:0 Load) (_slice_content (Name &a:0 Load)) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &l:0 Load) (_slice_content (Name &b:0 Load)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Constant i2 None) (list In) (list (Name &l:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (ClassDef\n      &D1AddOnATree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &dfs:1\n          (arguments nil (list (arg &self:2 None None) (arg &start:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Subscript (Attribute (Name &self:2 Load) s_done Load) (_slice_content (Name &start:2 Load)) Store))\n              (Constant i1 None)\n              None\n            )\n            (For\n              (Name &x:2 Store)\n              (Subscript (Attribute (Name &self:2 Load) s_adj Load) (_slice_content (Name &start:2 Load)) Load)\n              (/seq\n                (If\n                  (Subscript (Attribute (Name &self:2 Load) s_done Load) (_slice_content (Name &x:2 Load)) Load)\n                  (/seq Continue)\n                  (/seq)\n                )\n                (Assign\n                  (list (Subscript (Attribute (Name &self:2 Load) s_par Load) (_slice_content (Name &x:2 Load)) Store))\n                  (Name &start:2 Load)\n                  None\n                )\n                (Expr (Call (Attribute (Name &self:2 Load) s_dfs Load) (list (_starred_content (Name &x:2 Load))) nil))\n              )\n              (/seq)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &solve:1\n          (arguments nil (list (arg &self:3 None None)) None nil nil None nil)\n          (/seq\n            (ImportFrom s_collections (list (alias &defaultdict:3 None)) i0)\n            (Import (list (alias &sys:3 None)))\n            (Expr\n              (Call\n                (Attribute (Name &sys:3 Load) s_setrecursionlimit Load)\n                (list\n                  (_starred_content (BinOp (BinOp (Constant i10 None) Pow (Constant i5 None)) Add (Constant i5 None)))\n                )\n                nil\n              )\n            )\n            (Assign\n              (list (Name &n:3 Store))\n              (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_adj Store))\n              (Call (Name &defaultdict:3 Load) (list (_starred_content (Name g_list Load))) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_par Store))\n              (Call (Name &defaultdict:3 Load) (list (_starred_content (Name g_int Load))) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_done Store))\n              (BinOp\n                (List (list (_starred_content (Constant i0 None))) Load)\n                Mult\n                (BinOp (Name &n:3 Load) Add (Constant i1 None))\n              )\n              None\n            )\n            (For\n              (Name &i:3 Store)\n              (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) nil)\n              (/seq\n                (Assign\n                  (list (Tuple (list (_starred_content (Name &u:3 Store)) (_starred_content (Name &v:3 Store))) Store))\n                  (ListComp\n                    (Call (Name g_int Load) (list (_starred_content (Name &_:4 Load))) nil)\n                    (list\n                      (comprehension\n                        (Name &_:4 Store)\n                        (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &u:3 Load)) Load)\n                      s_append\n                      Load\n                    )\n                    (list (_starred_content (Name &v:3 Load)))\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &v:3 Load)) Load)\n                      s_append\n                      Load\n                    )\n                    (list (_starred_content (Name &u:3 Load)))\n                    nil\n                  )\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &u:3 Load)) Store)\n                  Add\n                  (Constant i1 None)\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &v:3 Load)) Store)\n                  Add\n                  (Constant i1 None)\n                )\n              )\n              (/seq)\n              None\n            )\n            (For\n              (Name &i:3 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (BinOp (Name &n:3 Load) Add (Constant i1 None)))\n                )\n                nil\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &i:3 Load)) Load)\n                    (list Eq)\n                    (list (Constant i2 None))\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break)\n                  (/seq)\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n              None\n            )\n            (Return None)\n            (Assign\n              (list (Name &v:3 Store))\n              (Call\n                (Name g_max Load)\n                (list\n                  (_starred_content\n                    (GeneratorExp\n                      (Call\n                        (Name g_len Load)\n                        (list\n                          (_starred_content\n                            (Subscript\n                              (Attribute (Name &self:3 Load) s_adj Load)\n                              (_slice_content (Name &p:5 Load))\n                              Load\n                            )\n                          )\n                        )\n                        nil\n                      )\n                      (list (comprehension (Name &p:5 Store) (Attribute (Name &self:3 Load) s_adj Load) nil i0))\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &start:3 Store)) (UnaryOp USub (Constant i1 None)) None)\n            (For\n              (Name &p:3 Store)\n              (Attribute (Name &self:3 Load) s_adj Load)\n              (/seq\n                (If\n                  (Compare\n                    (Call\n                      (Name g_len Load)\n                      (list\n                        (_starred_content\n                          (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &p:3 Load)) Load)\n                        )\n                      )\n                      nil\n                    )\n                    (list Eq)\n                    (list (Name &v:3 Load))\n                  )\n                  (/seq (Assign (list (Name &start:3 Store)) (Name &p:3 Load) None) Break)\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (Assert (Compare (Name &start:3 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) None)\n            (Expr (Call (Attribute (Name &self:3 Load) s_dfs Load) (list (_starred_content (Name &start:3 Load))) nil))\n            (Assign\n              (list (Name &cnt:3 Store))\n              (BinOp\n                (List (list (_starred_content (Constant i0 None))) Load)\n                Mult\n                (BinOp (Name &n:3 Load) Add (Constant i1 None))\n              )\n              None\n            )\n            (For\n              (Name &k:3 Store)\n              (Attribute (Name &self:3 Load) s_adj Load)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Attribute (Name &self:3 Load) s_par Load) (_slice_content (Name &k:3 Load)) Load)\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq Continue)\n                  (/seq)\n                )\n                (If\n                  (Compare\n                    (Call\n                      (Name g_len Load)\n                      (list\n                        (_starred_content\n                          (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &k:3 Load)) Load)\n                        )\n                      )\n                      nil\n                    )\n                    (list Eq)\n                    (list (Constant i1 None))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript\n                        (Name &cnt:3 Load)\n                        (_slice_content\n                          (Subscript (Attribute (Name &self:3 Load) s_par Load) (_slice_content (Name &k:3 Load)) Load)\n                        )\n                        Store\n                      )\n                      Add\n                      (Constant i1 None)\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (Assign (list (Name &ans:3 Store)) (Constant i0 None) None)\n            (For\n              (Name &x:3 Store)\n              (Name &cnt:3 Load)\n              (/seq\n                (If\n                  (Compare (Name &x:3 Load) (list Eq) (list (Constant i1 None)))\n                  (/seq (AugAssign (Name &ans:3 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (If\n              (Compare (Name &ans:3 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &solver:0 Store)) (Call (Name &D1AddOnATree:0 Load) nil nil) None)\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Expr (Call (Attribute (Name &solver:0 Load) s_solve Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &deg:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &u:0 Store) Sub (Constant i1 None))\n        (AugAssign (Name &v:0 Store) Sub (Constant i1 None))\n        (AugAssign (Subscript (Name &deg:0 Load) (_slice_content (Name &u:0 Load)) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &deg:0 Load) (_slice_content (Name &v:0 Load)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &d:0 Store)\n      (Name &deg:0 Load)\n      (/seq\n        (If\n          (Compare (Name &d:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n            (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0)\n    (ImportFrom s_heapq (list (alias g_heappush None) (alias g_heappop None)) i0)\n    (ImportFrom s_math (list (alias g_inf None)) i0)\n    (Assign\n      (list (Name &ri:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list\n            (_starred_content (Name g_int Load))\n            (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n          )\n          nil\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &n:1 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &cnt:1 Store))\n          (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil)\n          None\n        )\n        (For\n          (Name &_:1 Store)\n          (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None)))) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store))\n              (Call (Name &ri:0 Load) nil nil)\n              None\n            )\n            (AugAssign (Subscript (Name &cnt:1 Load) (_slice_content (Name &x:1 Load)) Store) Add (Constant i1 None))\n            (AugAssign (Subscript (Name &cnt:1 Load) (_slice_content (Name &y:1 Load)) Store) Add (Constant i1 None))\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &valid:1 Store)) (Constant True None) None)\n        (For\n          (Name &x:1 Store)\n          (Name &cnt:1 Load)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &cnt:1 Load) (_slice_content (Name &x:1 Load)) Load)\n                (list Eq)\n                (list (Constant i2 None))\n              )\n              (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Name &valid:1 Load)\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Constant i1 None) None)\n    (While\n      (Name &t:0 Load)\n      (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Expr (Call (Name &solve:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &tree_nums:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a1:0 Store)) (_starred_content (Name &a2:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &tree_nums:0 Load) (_slice_content (BinOp (Name &a1:0 Load) Sub (Constant i1 None))) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &tree_nums:0 Load) (_slice_content (BinOp (Name &a2:0 Load) Sub (Constant i1 None))) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n          (/seq\n            (Assign (list (Name &ans_is_no:0 Store)) (Constant False None) None)\n            (For\n              (Name &i:0 Store)\n              (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &tree_nums:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                    (list Eq)\n                    (list (Constant i2 None))\n                  )\n                  (/seq\n                    (Assign (list (Name &ans_is_no:0 Store)) (Constant True None) None)\n                    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n                    Break\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (If\n              (UnaryOp Not (Name &ans_is_no:0 Load))\n              (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n              (/seq)\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &gr:0 Store))\n      (DictComp\n        (Name &i:1 Load)\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call\n              (Name g_range Load)\n              (list\n                (_starred_content (Constant i1 None))\n                (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n              )\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &gr:0 Load) (_slice_content (Name &a:0 Load)) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &gr:0 Load) (_slice_content (Name &b:0 Load)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &gr:0 Load)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &gr:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n            (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (BinOp\n        (List (list (_starred_content (Constant i0 None))) Load)\n        Mult\n        (BinOp (Name &n:0 Load) Add (Constant i1 None))\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &arr:0 Load) (_slice_content (Name &a:0 Load)) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &arr:0 Load) (_slice_content (Name &b:0 Load)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None))))\n        nil\n      )\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &g:0 Store))\n      (ListComp\n        (List nil Load)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i100001 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil)\n            (list\n              (comprehension\n                (Name &i:2 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &g:0 Load) (_slice_content (Name &u:0 Load)) Load) s_append Load)\n            (list (_starred_content (Name &v:0 Load)))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &g:0 Load) (_slice_content (Name &v:0 Load)) Load) s_append Load)\n            (list (_starred_content (Name &u:0 Load)))\n            nil\n          )\n        )\n        (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &u:0 Load)) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &v:0 Load)) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &d:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &edges:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &edges:0 Load) (_slice_content (BinOp (Name &a:0 Load) Sub (Constant i1 None))) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &edges:0 Load) (_slice_content (BinOp (Name &b:0 Load) Sub (Constant i1 None))) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Constant i2 None) (list In) (list (Name &edges:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (Assign\n      (list (Name &l:0 Store))\n      (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (_starred_content (Name g_int Load))\n              (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &u:0 Load) Sub (Constant i1 None))) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &v:0 Load) Sub (Constant i1 None))) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &l:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))\n  )\n  nil\n)"]