["(Module\n  (/seq\n    (Import (list (alias g_bisect None)))\n    (FunctionDef\n      &getsum:0\n      (arguments nil (list (arg &tree:1 None None) (arg &i:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:1 Store)) (Constant i0 None) None)\n        (AugAssign (Name &i:1 Store) Add (Constant i1 None))\n        (While\n          (Compare (Name &i:1 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &s:1 Store) Add (Subscript (Name &tree:1 Load) (Name &i:1 Load) Load))\n            (AugAssign (Name &i:1 Store) Sub (BinOp (Name &i:1 Load) BitAnd (UnaryOp USub (Name &i:1 Load))))\n          )\n          nil\n        )\n        (Return (Name &s:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &updatebit:0\n      (arguments\n        nil\n        (list (arg &tree:2 None None) (arg &n:2 None None) (arg &i:2 None None) (arg &v:2 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (AugAssign (Name &i:2 Store) Add (Constant i1 None))\n        (While\n          (Compare (Name &i:2 Load) (list LtE) (list (Name &n:2 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &tree:2 Load) (Name &i:2 Load) Store) Add (Name &v:2 Load))\n            (AugAssign (Name &i:2 Store) Add (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp\n        (List\n          (list (Subscript (Name &x:0 Load) (Name &i:3 Load) Load) (Subscript (Name &v:0 Load) (Name &i:3 Load) Load))\n          Load\n        )\n        (list\n          (comprehension\n            (Name &i:3 Store)\n            (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &x:0 Load)) nil)) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &vs:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Name &v:0 Load)) nil)) nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &p:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Name &p:0 Load))\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &i:4 None None)) None nil nil None nil)\n              (Subscript (Name &i:4 Load) (Constant i0 None) Load)\n            )\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &l:0 Store)) (Call (Name g_len Load) (list (Name &vs:0 Load)) nil) None)\n    (Assign\n      (list (Name &cnt:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &l:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign\n      (list (Name &xs:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &l:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &pnt:0 Store)\n      (Name &p:0 Load)\n      (/seq\n        (Assign\n          (list (Name &pos:0 Store))\n          (Call\n            (Attribute (Name g_bisect Load) s_bisect_left Load)\n            (list (Name &vs:0 Load) (Subscript (Name &pnt:0 Load) (Constant i1 None) Load))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp\n            (BinOp\n              (Call (Name &getsum:0 Load) (list (Name &cnt:0 Load) (Name &pos:0 Load)) nil)\n              Mult\n              (Subscript (Name &pnt:0 Load) (Constant i0 None) Load)\n            )\n            Sub\n            (Call (Name &getsum:0 Load) (list (Name &xs:0 Load) (Name &pos:0 Load)) nil)\n          )\n        )\n        (Expr\n          (Call\n            (Name &updatebit:0 Load)\n            (list (Name &cnt:0 Load) (Name &l:0 Load) (Name &pos:0 Load) (Constant i1 None))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name &updatebit:0 Load)\n            (list\n              (Name &xs:0 Load)\n              (Name &l:0 Load)\n              (Name &pos:0 Load)\n              (Subscript (Name &pnt:0 Load) (Constant i0 None) Load)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_io None)))\n    (Import (list (alias g_os None)))\n    (ImportFrom\n      s_collections\n      (list (alias g_Counter None) (alias g_defaultdict None) (alias g_deque None) (alias g_namedtuple None))\n      i0\n    )\n    (ClassDef\n      &SegmentTree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments\n            nil\n            (list (arg &self:4 None None) (arg &data:4 None None) (arg &default:4 None None) (arg &func:4 None None))\n            None\n            nil\n            nil\n            None\n            (list (Constant i0 None) (Name g_max Load))\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd\n                None\n              )\n            )\n            (Assign (list (Attribute (Name &self:4 Load) s__default Store)) (Name &default:4 Load) None)\n            (Assign (list (Attribute (Name &self:4 Load) s__func Store)) (Name &func:4 Load) None)\n            (Assign\n              (list (Attribute (Name &self:4 Load) s__len Store))\n              (Call (Name g_len Load) (list (Name &data:4 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:4 Load) s__size Store) (Name &_size:4 Store))\n              (BinOp\n                (Constant i1 None)\n                LShift\n                (Call\n                  (Attribute\n                    (BinOp (Attribute (Name &self:4 Load) s__len Load) Sub (Constant i1 None))\n                    s_bit_length\n                    Load\n                  )\n                  nil\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_data Store))\n              (BinOp\n                (List (list (Name &default:4 Load)) Load)\n                Mult\n                (BinOp (Constant i2 None) Mult (Name &_size:4 Load))\n              )\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:4 Load) s_data Load)\n                  (Slice\n                    (Name &_size:4 Load)\n                    (BinOp (Name &_size:4 Load) Add (Attribute (Name &self:4 Load) s__len Load))\n                    None\n                  )\n                  Store\n                )\n              )\n              (Name &data:4 Load)\n              None\n            )\n            (For\n              (Name &i:4 Store)\n              (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:4 Load)) nil)) nil)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:4 Load) s_data Load) (Name &i:4 Load) Store))\n                  (Call\n                    (Name &func:4 Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:4 Load) s_data Load)\n                        (BinOp (Name &i:4 Load) Add (Name &i:4 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:4 Load) s_data Load)\n                        (BinOp (BinOp (Name &i:4 Load) Add (Name &i:4 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__delitem__:1\n          (arguments nil (list (arg &self:5 None None) (arg &idx:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &self:5 Load) (Name &idx:5 Load) Store))\n              (Attribute (Name &self:5 Load) s__default Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__getitem__:1\n          (arguments nil (list (arg &self:6 None None) (arg &idx:6 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:6 Load) s_data Load)\n                (BinOp (Name &idx:6 Load) Add (Attribute (Name &self:6 Load) s__size Load))\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__setitem__:1\n          (arguments\n            nil\n            (list (arg &self:7 None None) (arg &idx:7 None None) (arg &value:7 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &idx:7 Store) Add (Attribute (Name &self:7 Load) s__size Load))\n            (Assign\n              (list (Subscript (Attribute (Name &self:7 Load) s_data Load) (Name &idx:7 Load) Store))\n              (Name &value:7 Load)\n              None\n            )\n            (AugAssign (Name &idx:7 Store) RShift (Constant i1 None))\n            (While\n              (Name &idx:7 Load)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:7 Load) s_data Load) (Name &idx:7 Load) Store))\n                  (Call\n                    (Attribute (Name &self:7 Load) s__func Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:7 Load) s_data Load)\n                        (BinOp (Constant i2 None) Mult (Name &idx:7 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:7 Load) s_data Load)\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &idx:7 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (AugAssign (Name &idx:7 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__len__:1\n          (arguments nil (list (arg &self:8 None None)) None nil nil None nil)\n          (/seq (Return (Attribute (Name &self:8 Load) s__len Load)))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:1\n          (arguments\n            nil\n            (list (arg &self:9 None None) (arg &start:9 None None) (arg &stop:9 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzEwMiwgMTE3LCAxMTAsIDk5LCAzMiwgMTExLCAxMDIsIDMyLCAxMDAsIDk3LCAxMTYsIDk3LCA5MSwgMTE1LCAxMTYsIDk3LCAxMTQsIDExNiwgNDQsIDMyLCAxMTUsIDExNiwgMTExLCAxMTIsIDQxXQ==\n                None\n              )\n            )\n            (AugAssign (Name &start:9 Store) Add (Attribute (Name &self:9 Load) s__size Load))\n            (AugAssign (Name &stop:9 Store) Add (Attribute (Name &self:9 Load) s__size Load))\n            (Assign (list (Name &res:9 Store)) (Attribute (Name &self:9 Load) s__default Load) None)\n            (While\n              (Compare (Name &start:9 Load) (list Lt) (list (Name &stop:9 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &start:9 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (Assign\n                      (list (Name &res:9 Store))\n                      (Call\n                        (Attribute (Name &self:9 Load) s__func Load)\n                        (list\n                          (Name &res:9 Load)\n                          (Subscript (Attribute (Name &self:9 Load) s_data Load) (Name &start:9 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign (Name &start:9 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (If\n                  (BinOp (Name &stop:9 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign (Name &stop:9 Store) Sub (Constant i1 None))\n                    (Assign\n                      (list (Name &res:9 Store))\n                      (Call\n                        (Attribute (Name &self:9 Load) s__func Load)\n                        (list\n                          (Name &res:9 Load)\n                          (Subscript (Attribute (Name &self:9 Load) s_data Load) (Name &stop:9 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n                (AugAssign (Name &start:9 Store) RShift (Constant i1 None))\n                (AugAssign (Name &stop:9 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n            (Return (Name &res:9 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__repr__:1\n          (arguments nil (list (arg &self:10 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Call\n                (Attribute\n                  (Constant\n                    s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd\n                    None\n                  )\n                  s_format\n                  Load\n                )\n                (list (Attribute (Name &self:10 Load) s_data Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &N:2 None None) (arg &X:2 None None) (arg &V:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &indices:2 Store))\n          (Call\n            (Name g_sorted Load)\n            (list (Call (Name g_range Load) (list (Name &N:2 Load)) nil))\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &i:25 None None)) None nil nil None nil)\n                  (Subscript (Name &X:2 Load) (Name &i:25 Load) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &X:2 Store))\n          (ListComp\n            (Subscript (Name &X:2 Load) (Name &i:12 Load) Load)\n            (list (comprehension (Name &i:12 Store) (Name &indices:2 Load) nil i0))\n          )\n          None\n        )\n        (Assign\n          (list (Name &V:2 Store))\n          (ListComp\n            (Subscript (Name &V:2 Load) (Name &i:13 Load) Load)\n            (list (comprehension (Name &i:13 Store) (Name &indices:2 Load) nil i0))\n          )\n          None\n        )\n        (Assign (list (Name &BIL:2 Store)) (BinOp (Constant i10 None) Pow (Constant i9 None)) None)\n        (Assign\n          (list (Name &vIndices:2 Store))\n          (Call\n            (Name g_sorted Load)\n            (list (Call (Name g_range Load) (list (Name &N:2 Load)) nil))\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &i:26 None None)) None nil nil None nil)\n                  (BinOp\n                    (BinOp (Subscript (Name &V:2 Load) (Name &i:26 Load) Load) Mult (Name &BIL:2 Load))\n                    Add\n                    (Subscript (Name &X:2 Load) (Name &i:26 Load) Load)\n                  )\n                )\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &indicesByV:2 Store))\n          (DictComp\n            (Name &originalIndex:11 Load)\n            (Name &sortedIndex:11 Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &sortedIndex:11 Store) (Name &originalIndex:11 Store)) Store)\n                (Call (Name g_enumerate Load) (list (Name &vIndices:2 Load)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &segTreeTotal:2 Store))\n          (Call\n            (Name &SegmentTree:0 Load)\n            (list\n              (ListComp\n                (Constant i0 None)\n                (list (comprehension (Name &i:19 Store) (Call (Name g_range Load) (list (Name &N:2 Load)) nil) nil i0))\n              )\n              (Constant i0 None)\n              (Lambda\n                (arguments nil (list (arg &a:20 None None) (arg &b:20 None None)) None nil nil None nil)\n                (BinOp (Name &a:20 Load) Add (Name &b:20 Load))\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &segTreeCount:2 Store))\n          (Call\n            (Name &SegmentTree:0 Load)\n            (list\n              (ListComp\n                (Constant i0 None)\n                (list (comprehension (Name &i:21 Store) (Call (Name g_range Load) (list (Name &N:2 Load)) nil) nil i0))\n              )\n              (Constant i0 None)\n              (Lambda\n                (arguments nil (list (arg &a:22 None None) (arg &b:22 None None)) None nil nil None nil)\n                (BinOp (Name &a:22 Load) Add (Name &b:22 Load))\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:2 Store)) (Constant i0 None) None)\n        (For\n          (Name &j:2 Store)\n          (Call (Name g_range Load) (list (Name &N:2 Load)) nil)\n          (/seq\n            (Assign (list (Name &index:2 Store)) (Subscript (Name &indicesByV:2 Load) (Name &j:2 Load) Load) None)\n            (Assign\n              (list (Name &count:2 Store))\n              (Call\n                (Attribute (Name &segTreeCount:2 Load) s_query Load)\n                (list (Constant i0 None) (Name &index:2 Load))\n                nil\n              )\n              None\n            )\n            (Assign\n              (list (Name &totalXi:2 Store))\n              (Call\n                (Attribute (Name &segTreeTotal:2 Load) s_query Load)\n                (list (Constant i0 None) (Name &index:2 Load))\n                nil\n              )\n              None\n            )\n            (AugAssign\n              (Name &ans:2 Store)\n              Add\n              (BinOp\n                (BinOp (Subscript (Name &X:2 Load) (Name &j:2 Load) Load) Mult (Name &count:2 Load))\n                Sub\n                (Name &totalXi:2 Load)\n              )\n            )\n            (Assign (list (Subscript (Name &segTreeCount:2 Load) (Name &index:2 Load) Store)) (Constant i1 None) None)\n            (Assign\n              (list (Subscript (Name &segTreeTotal:2 Load) (Name &index:2 Load) Store))\n              (Subscript (Name &X:2 Load) (Name &j:2 Load) Load)\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &ans:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &solveBrute:0\n      (arguments nil (list (arg &N:3 None None) (arg &X:3 None None) (arg &V:3 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &indices:3 Store))\n          (Call\n            (Name g_sorted Load)\n            (list (Call (Name g_range Load) (list (Name &N:3 Load)) nil))\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &i:27 None None)) None nil nil None nil)\n                  (Subscript (Name &X:3 Load) (Name &i:27 Load) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &X:3 Store))\n          (ListComp\n            (Subscript (Name &X:3 Load) (Name &i:14 Load) Load)\n            (list (comprehension (Name &i:14 Store) (Name &indices:3 Load) nil i0))\n          )\n          None\n        )\n        (Assign\n          (list (Name &V:3 Store))\n          (ListComp\n            (Subscript (Name &V:3 Load) (Name &i:15 Load) Load)\n            (list (comprehension (Name &i:15 Store) (Name &indices:3 Load) nil i0))\n          )\n          None\n        )\n        (Assign (list (Name &ans:3 Store)) (Constant i0 None) None)\n        (For\n          (Name &j:3 Store)\n          (Call (Name g_range Load) (list (Name &N:3 Load)) nil)\n          (/seq\n            (Assign (list (Name &xj:3 Store)) (Subscript (Name &X:3 Load) (Name &j:3 Load) Load) None)\n            (Assign (list (Name &vj:3 Store)) (Subscript (Name &V:3 Load) (Name &j:3 Load) Load) None)\n            (Assign (list (Name &total:3 Store)) (Constant i0 None) None)\n            (Assign (list (Name &totalXi:3 Store)) (Constant i0 None) None)\n            (Assign (list (Name &count:3 Store)) (Constant i0 None) None)\n            (For\n              (Name &i:3 Store)\n              (Call (Name g_range Load) (list (Name &j:3 Load)) nil)\n              (/seq\n                (Assign (list (Name &xi:3 Store)) (Subscript (Name &X:3 Load) (Name &i:3 Load) Load) None)\n                (Assign (list (Name &vi:3 Store)) (Subscript (Name &V:3 Load) (Name &i:3 Load) Load) None)\n                (Assert (Compare (Name &xi:3 Load) (list LtE) (list (Name &xj:3 Load))) None)\n                (If\n                  (Compare (Name &vi:3 Load) (list LtE) (list (Name &vj:3 Load)))\n                  (/seq\n                    (AugAssign (Name &total:3 Store) Add (BinOp (Name &xj:3 Load) Sub (Name &xi:3 Load)))\n                    (AugAssign (Name &totalXi:3 Store) Add (Name &xi:3 Load))\n                    (AugAssign (Name &count:3 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Name &j:3 Load)\n                  (Subscript (Name &X:3 Load) (Name &j:3 Load) Load)\n                  (Name &count:3 Load)\n                  (Name &totalXi:3 Load)\n                )\n                nil\n              )\n            )\n            (Assert\n              (Compare\n                (Name &total:3 Load)\n                (list Eq)\n                (list\n                  (BinOp\n                    (BinOp (Subscript (Name &X:3 Load) (Name &j:3 Load) Load) Mult (Name &count:3 Load))\n                    Sub\n                    (Name &totalXi:3 Load)\n                  )\n                )\n              )\n              None\n            )\n            (AugAssign (Name &ans:3 Store) Add (Name &total:3 Load))\n          )\n          nil\n          None\n        )\n        (Return (Name &ans:3 Load))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Constant False None)\n      (/seq\n        (Import (list (alias &random:0 None)))\n        (Expr (Call (Attribute (Name &random:0 Load) s_seed Load) (list (Constant i0 None)) nil))\n        (Assign (list (Name &N:0 Store)) (Constant i200000 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Constant i1 None)) nil)\n          (/seq\n            (Assign\n              (list (Name &X:0 Store))\n              (ListComp\n                (Call\n                  (Attribute (Name &random:0 Load) s_randint Load)\n                  (list (Constant i0 None) (Constant i10 None))\n                  nil\n                )\n                (list (comprehension (Name &i:23 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) nil i0))\n              )\n              None\n            )\n            (Assign\n              (list (Name &V:0 Store))\n              (ListComp\n                (Call\n                  (Attribute (Name &random:0 Load) s_randint Load)\n                  (list (Constant i0 None) (Constant i10 None))\n                  nil\n                )\n                (list (comprehension (Name &i:24 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) nil i0))\n              )\n              None\n            )\n            (Assign\n              (list (Name &ans:0 Store))\n              (Call (Name &solve:0 Load) (list (Name &N:0 Load) (Name &X:0 Load) (Name &V:0 Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Assign\n          (list (Name &input:0 Store))\n          (Attribute\n            (Call\n              (Attribute (Name g_io Load) s_BytesIO Load)\n              (list\n                (Call\n                  (Attribute (Name g_os Load) s_read Load)\n                  (list\n                    (Constant i0 None)\n                    (Attribute\n                      (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil)\n                      s_st_size\n                      Load\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n            s_readline\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (Name &N:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:16 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:16 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &X:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:17 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:17 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &V:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:18 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:18 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &ans:0 Store))\n          (Call (Name &solve:0 Load) (list (Name &N:0 Load) (Name &X:0 Load) (Name &V:0 Load)) nil)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None) (alias g_math None) (alias g_itertools None)))\n    (ImportFrom s_collections (list (alias g_Counter None) (alias g_deque None) (alias g_defaultdict None)) i0)\n    (ImportFrom s_bisect (list (alias g_bisect_left None) (alias g_bisect_right None)) i0)\n    (ImportFrom\n      s_heapq\n      (list (alias g_heappop None) (alias g_heappush None) (alias g_heapify None) (alias g_nlargest None))\n      i0\n    )\n    (ImportFrom s_copy (list (alias g_deepcopy None)) i0)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &INF:0 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None)\n    (FunctionDef\n      &inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &inpl:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Name g_int Load)\n                  (Call\n                    (Attribute\n                      (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                      s_split\n                      Load\n                    )\n                    nil\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &inpl_1:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Lambda\n                    (arguments nil (list (arg &x:11 None None)) None nil nil None nil)\n                    (BinOp (Call (Name g_int Load) (list (Name &x:11 Load)) nil) Sub (Constant i1 None))\n                  )\n                  (Call\n                    (Attribute\n                      (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                      s_split\n                      Load\n                    )\n                    nil\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &inps:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &inpsl:0\n      (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &tmp:2 Store))\n          (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n          None\n        )\n        (Return\n          (Call (Name g_list Load) (list (Subscript (Name &tmp:2 Load) (Slice None (Name &x:2 Load) None) Load)) nil)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &err:0\n      (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Name &x:3 Load)) nil)) (Expr (Call (Name g_exit Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (ClassDef\n      &BIT:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:4 None None) (arg &n:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:4 Load) s_n Store)) (Name &n:4 Load) None)\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_data Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:4 Load) Add (Constant i1 None)))\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_el Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:4 Load) Add (Constant i1 None)))\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &sum:1\n          (arguments nil (list (arg &self:5 None None) (arg &i:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &s:5 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &i:5 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &s:5 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:5 Load) s_data Load) (Name &i:5 Load) Load)\n                )\n                (AugAssign (Name &i:5 Store) Sub (BinOp (Name &i:5 Load) BitAnd (UnaryOp USub (Name &i:5 Load))))\n              )\n              nil\n            )\n            (Return (Name &s:5 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:1\n          (arguments nil (list (arg &self:6 None None) (arg &i:6 None None) (arg &x:6 None None)) None nil nil None nil)\n          (/seq\n            (AugAssign\n              (Subscript (Attribute (Name &self:6 Load) s_el Load) (Name &i:6 Load) Store)\n              Add\n              (Name &x:6 Load)\n            )\n            (While\n              (Compare (Name &i:6 Load) (list LtE) (list (Attribute (Name &self:6 Load) s_n Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:6 Load) s_data Load) (Name &i:6 Load) Store)\n                  Add\n                  (Name &x:6 Load)\n                )\n                (AugAssign (Name &i:6 Store) Add (BinOp (Name &i:6 Load) BitAnd (UnaryOp USub (Name &i:6 Load))))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get:1\n          (arguments\n            nil\n            (list (arg &self:7 None None) (arg &i:7 None None) (arg &j:7 None None))\n            None\n            nil\n            nil\n            None\n            (list (Constant None None))\n          )\n          (/seq\n            (If\n              (Compare (Name &j:7 Load) (list Is) (list (Constant None None)))\n              (/seq (Return (Subscript (Attribute (Name &self:7 Load) s_el Load) (Name &i:7 Load) Load)))\n              nil\n            )\n            (Return\n              (BinOp\n                (Call (Attribute (Name &self:7 Load) s_sum Load) (list (Name &j:7 Load)) nil)\n                Sub\n                (Call (Attribute (Name &self:7 Load) s_sum Load) (list (Name &i:7 Load)) nil)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name &inp:0 Load) nil nil) None)\n    (Assign (list (Name &X:0 Store)) (Call (Name &inpl:0 Load) nil nil) None)\n    (Assign (list (Name &V:0 Store)) (Call (Name &inpl:0 Load) nil nil) None)\n    (Assign (list (Name &d:0 Store)) (Dict nil nil) None)\n    (Assign (list (Name &dd:0 Store)) (Dict nil nil) None)\n    (For\n      (Tuple (list (Name &i:0 Store) (Name &x:0 Store)) Store)\n      (Call (Name g_enumerate Load) (list (Call (Name g_sorted Load) (list (Name &X:0 Load)) nil)) nil)\n      (/seq\n        (Assign (list (Subscript (Name &d:0 Load) (Name &x:0 Load) Store)) (Name &i:0 Load) None)\n        (Assign (list (Subscript (Name &dd:0 Load) (Name &i:0 Load) Store)) (Name &x:0 Load) None)\n      )\n      nil\n      None\n    )\n    (For\n      (Tuple (list (Name &i:0 Store) (Name &x:0 Store)) Store)\n      (Call (Name g_enumerate Load) (list (Name &X:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &X:0 Load) (Name &i:0 Load) Store))\n          (Subscript (Name &d:0 Load) (Name &x:0 Load) Load)\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &xv:0 Store))\n      (ListComp\n        (Tuple (list (Name &x:8 Load) (Name &v:8 Load)) Load)\n        (list\n          (comprehension\n            (Tuple (list (Name &x:8 Store) (Name &v:8 Store)) Store)\n            (Call (Name g_zip Load) (list (Name &X:0 Load) (Name &V:0 Load)) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &xv:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:9 None None)) None nil nil None nil)\n              (Subscript (Name &x:9 Load) (Constant i0 None) Load)\n            )\n          )\n          (keyword s_reverse (Constant True None))\n        )\n      )\n    )\n    (Expr\n      (Call\n        (Attribute (Name &xv:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:10 None None)) None nil nil None nil)\n              (Subscript (Name &x:10 Load) (Constant i1 None) Load)\n            )\n          )\n          (keyword s_reverse (Constant True None))\n        )\n      )\n    )\n    (Assign\n      (list (Name &cnt_bit:0 Store))\n      (Call (Name &BIT:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i10 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &sum_bit:0 Store))\n      (Call (Name &BIT:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i10 None))) nil)\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n    (For\n      (Tuple (list (Name &x:0 Store) (Name &_:0 Store)) Store)\n      (Name &xv:0 Load)\n      (/seq\n        (AugAssign\n          (Name &res:0 Store)\n          Add\n          (BinOp\n            (Call\n              (Attribute (Name &sum_bit:0 Load) s_get Load)\n              (list (Name &x:0 Load) (BinOp (Name &n:0 Load) Add (Constant i5 None)))\n              nil\n            )\n            Sub\n            (BinOp\n              (Call\n                (Attribute (Name &cnt_bit:0 Load) s_get Load)\n                (list (Name &x:0 Load) (BinOp (Name &n:0 Load) Add (Constant i5 None)))\n                nil\n              )\n              Mult\n              (Subscript (Name &dd:0 Load) (Name &x:0 Load) Load)\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &sum_bit:0 Load) s_add Load)\n            (list (BinOp (Name &x:0 Load) Add (Constant i1 None)) (Subscript (Name &dd:0 Load) (Name &x:0 Load) Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &cnt_bit:0 Load) s_add Load)\n            (list (BinOp (Name &x:0 Load) Add (Constant i1 None)) (Constant i1 None))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (ImportFrom s_heapq (list (alias &heappush:0 None) (alias &heappop:0 None) (alias &heapify:0 None)) i0)\n    (FunctionDef\n      &query:0\n      (arguments nil (list (arg &f:1 None None) (arg &i:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ret:1 Store)) (Constant i0 None) None)\n        (While\n          (Name &i:1 Load)\n          (/seq\n            (AugAssign (Name &ret:1 Store) Add (Subscript (Name &f:1 Load) (Name &i:1 Load) Load))\n            (AugAssign (Name &i:1 Store) Sub (BinOp (Name &i:1 Load) BitAnd (UnaryOp USub (Name &i:1 Load))))\n          )\n          nil\n        )\n        (Return (Name &ret:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &update:0\n      (arguments nil (list (arg &f:2 None None) (arg &i:2 None None) (arg &d:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (Name &f:2 Load)) nil) None)\n        (While\n          (Compare (Name &i:2 Load) (list Lt) (list (Name &n:2 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &f:2 Load) (Name &i:2 Load) Store) Add (Name &d:2 Load))\n            (AugAssign (Name &i:2 Store) Add (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (BinOp (List (list (Tuple nil Load)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Store))\n          (Tuple\n            (list\n              (Subscript (Name &x:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n              (Subscript (Name &v:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n            )\n            Load\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &f:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign\n      (list (Name &f2:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list\n              (Name &f:0 Load)\n              (Name &i:0 Load)\n              (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name &update:0 Load) (list (Name &f2:0 Load) (Name &i:0 Load) (Constant i1 None)) nil))\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &b:0 Load) s_append Load)\n            (list\n              (Tuple\n                (list\n                  (UnaryOp USub (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load))\n                  (UnaryOp USub (Name &i:0 Load))\n                )\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name &heapify:0 Load) (list (Name &b:0 Load)) nil))\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (While\n      (Name &b:0 Load)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &v:0 Store) (Name &i:0 Store)) Store))\n          (Call (Name &heappop:0 Load) (list (Name &b:0 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Tuple (list (Name &v:0 Store) (Name &i:0 Store)) Store))\n          (Tuple (list (UnaryOp USub (Name &v:0 Load)) (UnaryOp USub (Name &i:0 Load))) Load)\n          None\n        )\n        (Assign\n          (list (Name &x:0 Store))\n          (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None)))\n          (/seq\n            (Assign\n              (list (Name &sum:0 Store))\n              (Call (Name &query:0 Load) (list (Name &f:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None))) nil)\n              None\n            )\n            (Assign\n              (list (Name &cnt:0 Store))\n              (Call (Name &query:0 Load) (list (Name &f2:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None))) nil)\n              None\n            )\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (BinOp (BinOp (Name &x:0 Load) Mult (Name &cnt:0 Load)) Sub (Name &sum:0 Load))\n            )\n          )\n          nil\n        )\n        (Expr (Call (Name &update:0 Load) (list (Name &f:0 Load) (Name &i:0 Load) (UnaryOp USub (Name &x:0 Load))) nil))\n        (Expr\n          (Call (Name &update:0 Load) (list (Name &f2:0 Load) (Name &i:0 Load) (UnaryOp USub (Constant i1 None))) nil)\n        )\n      )\n      nil\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (ImportFrom s_heapq (list (alias &heappush:0 None) (alias &heappop:0 None) (alias &heapify:0 None)) i0)\n    (FunctionDef\n      &query:0\n      (arguments nil (list (arg &f:1 None None) (arg &i:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ret:1 Store)) (Constant i0 None) None)\n        (While\n          (Name &i:1 Load)\n          (/seq\n            (AugAssign (Name &ret:1 Store) Add (Subscript (Name &f:1 Load) (Name &i:1 Load) Load))\n            (AugAssign (Name &i:1 Store) Sub (BinOp (Name &i:1 Load) BitAnd (UnaryOp USub (Name &i:1 Load))))\n          )\n          nil\n        )\n        (Return (Name &ret:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &update:0\n      (arguments nil (list (arg &f:2 None None) (arg &i:2 None None) (arg &d:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (Name &f:2 Load)) nil) None)\n        (While\n          (Compare (Name &i:2 Load) (list Lt) (list (Name &n:2 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &f:2 Load) (Name &i:2 Load) Store) Add (Name &d:2 Load))\n            (AugAssign (Name &i:2 Store) Add (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &X:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &V:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &r:0 Store))\n      (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:0 Load)) nil)) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &r:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &i:3 None None)) None nil nil None nil)\n              (Subscript (Name &X:0 Load) (Name &i:3 Load) Load)\n            )\n          )\n        )\n      )\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign\n      (list (Name &f2:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (List nil Load) None)\n    (For\n      (Tuple (list (Name &i:0 Store) (Name &k:0 Store)) Store)\n      (Call (Name g_enumerate Load) (list (Name &r:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &b:0 Load) s_append Load)\n            (list (Tuple (list (Subscript (Name &V:0 Load) (Name &k:0 Load) Load) (Name &i:0 Load)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name &heapify:0 Load) (list (Name &b:0 Load)) nil))\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (While\n      (Name &b:0 Load)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &v:0 Store) (Name &i:0 Store)) Store))\n          (Call (Name &heappop:0 Load) (list (Name &b:0 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &x:0 Store))\n          (Subscript (Name &X:0 Load) (Subscript (Name &r:0 Load) (Name &i:0 Load) Load) Load)\n          None\n        )\n        (Assign\n          (list (Name &sum:0 Store))\n          (Call (Name &query:0 Load) (list (Name &f:0 Load) (Name &i:0 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &cnt:0 Store))\n          (Call (Name &query:0 Load) (list (Name &f2:0 Load) (Name &i:0 Load)) nil)\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp (BinOp (Name &x:0 Load) Mult (Name &cnt:0 Load)) Sub (Name &sum:0 Load))\n        )\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list (Name &f:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) (Name &x:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list (Name &f2:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) (Constant i1 None))\n            nil\n          )\n        )\n      )\n      nil\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None) (alias g_math None)))\n    (Import (list (alias g_io None) (alias g_os None)))\n    (ImportFrom s_collections (list (alias s_defaultdict g_dd) (alias g_deque None) (alias g_Counter None)) i0)\n    (FunctionDef\n      &data:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n              s_strip\n              Load\n            )\n            nil\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &mdata:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &data:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &outl:0\n      (arguments nil (list (arg &var:1 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n            (list\n              (BinOp\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list (Call (Name g_map Load) (list (Name g_str Load) (Name &var:1 Load)) nil))\n                  nil\n                )\n                Add\n                (Constant s-WzEwXQ== None)\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &out:0\n      (arguments nil (list (arg &var:2 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n            (list (BinOp (Call (Name g_str Load) (list (Name &var:2 Load)) nil) Add (Constant s-WzEwXQ== None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (Call (Name g_int Load) (list (Constant f1000000000.0 None)) nil) Add (Constant i7 None))\n      None\n    )\n    (FunctionDef\n      &update:0\n      (arguments nil (list (arg &BIT:3 None None) (arg &v:3 None None) (arg &w:3 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &v:3 Load) (list LtE) (list (Name &n:0 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &BIT:3 Load) (Name &v:3 Load) Store) Add (Name &w:3 Load))\n            (AugAssign (Name &v:3 Store) Add (BinOp (Name &v:3 Load) BitAnd (UnaryOp USub (Name &v:3 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getvalue:0\n      (arguments nil (list (arg &BIT:4 None None) (arg &v:4 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ANS:4 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &v:4 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &ANS:4 Store) Add (Subscript (Name &BIT:4 Load) (Name &v:4 Load) Load))\n            (AugAssign (Name &v:4 Store) Sub (BinOp (Name &v:4 Load) BitAnd (UnaryOp USub (Name &v:4 Load))))\n          )\n          nil\n        )\n        (Return (Name &ANS:4 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &bisect_on_BIT:0\n      (arguments nil (list (arg &BIT:5 None None) (arg &x:5 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &x:5 Load) (list LtE) (list (Constant i0 None))) (/seq (Return (Constant i0 None))) nil)\n        (Assign (list (Name &ANS:5 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &h:5 Store))\n          (BinOp (Constant i1 None) LShift (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n          None\n        )\n        (While\n          (Compare (Name &h:5 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (BinOp (Name &ANS:5 Load) Add (Name &h:5 Load)) (list LtE) (list (Name &n:0 Load)))\n                  (Compare\n                    (Subscript (Name &BIT:5 Load) (BinOp (Name &ANS:5 Load) Add (Name &h:5 Load)) Load)\n                    (list Lt)\n                    (list (Name &x:5 Load))\n                  )\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Name &x:5 Store)\n                  Sub\n                  (Subscript (Name &BIT:5 Load) (BinOp (Name &ANS:5 Load) Add (Name &h:5 Load)) Load)\n                )\n                (AugAssign (Name &ANS:5 Store) Add (Name &h:5 Load))\n              )\n              nil\n            )\n            (AugAssign (Name &h:5 Store) FloorDiv (Constant i2 None))\n          )\n          nil\n        )\n        (Return (BinOp (Name &ANS:5 Load) Add (Constant i1 None)))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &data:0 Load) nil nil)) nil) None)\n    (Assign (list (Name &x:0 Store)) (Call (Name &mdata:0 Load) nil nil) None)\n    (Assign (list (Name &v:0 Store)) (Call (Name &mdata:0 Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (List\n          (list (Subscript (Name &v:0 Load) (Name &i:6 Load) Load) (Subscript (Name &x:0 Load) (Name &i:6 Load) Load))\n          Load\n        )\n        (list (comprehension (Name &i:6 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &s:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign\n      (list (Name &cnt:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign (list (Name &pos:0 Store)) (Call (Name g_dd Load) (list (Name g_int Load)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list\n            (Subscript\n              (Name &pos:0 Load)\n              (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n              Store\n            )\n          )\n          (BinOp (Name &i:0 Load) Add (Constant i1 None))\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list\n              (Name &s:0 Load)\n              (BinOp (Name &i:0 Load) Add (Constant i1 None))\n              (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list (Name &cnt:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) (Constant i1 None))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Expr (Call (Attribute (Name &x:0 Load) s_sort Load) nil nil))\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &ind:0 Store))\n          (Subscript (Name &pos:0 Load) (Subscript (Name &x:0 Load) (Name &i:0 Load) Load) Load)\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp\n            (BinOp\n              (Call (Name &getvalue:0 Load) (list (Name &s:0 Load) (Name &n:0 Load)) nil)\n              Sub\n              (Call (Name &getvalue:0 Load) (list (Name &s:0 Load) (Name &ind:0 Load)) nil)\n            )\n            Sub\n            (BinOp\n              (BinOp\n                (Call (Name &getvalue:0 Load) (list (Name &cnt:0 Load) (Name &n:0 Load)) nil)\n                Sub\n                (Call (Name &getvalue:0 Load) (list (Name &cnt:0 Load) (Name &ind:0 Load)) nil)\n              )\n              Mult\n              (Subscript (Name &x:0 Load) (Name &i:0 Load) Load)\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list (Name &s:0 Load) (Name &ind:0 Load) (UnaryOp USub (Subscript (Name &x:0 Load) (Name &i:0 Load) Load)))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list (Name &cnt:0 Load) (Name &ind:0 Load) (UnaryOp USub (Constant i1 None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name &out:0 Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_bisect (list (alias g_bisect_right None) (alias g_bisect_left None)) i0)\n    (ClassDef\n      &BITbisect:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:4 None None) (arg &InputProbNumbers:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_ind_to_co Store))\n              (List (list (UnaryOp USub (BinOp (Constant i10 None) Pow (Constant i18 None)))) Load)\n              None\n            )\n            (Assign (list (Attribute (Name &self:4 Load) s_co_to_ind Store)) (Dict nil nil) None)\n            (For\n              (Tuple (list (Name &ind:4 Store) (Name &num:4 Store)) Store)\n              (Call\n                (Name g_enumerate Load)\n                (list\n                  (Call\n                    (Name g_sorted Load)\n                    (list\n                      (Call\n                        (Name g_list Load)\n                        (list (Call (Name g_set Load) (list (Name &InputProbNumbers:4 Load)) nil))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Attribute (Name &self:4 Load) s_ind_to_co Load) s_append Load)\n                    (list (Name &num:4 Load))\n                    nil\n                  )\n                )\n                (Assign\n                  (list (Subscript (Attribute (Name &self:4 Load) s_co_to_ind Load) (Name &num:4 Load) Store))\n                  (BinOp (Name &ind:4 Load) Add (Constant i1 None))\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_max Store))\n              (Call (Name g_len Load) (list (Attribute (Name &self:4 Load) s_co_to_ind Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_data Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp (Attribute (Name &self:4 Load) s_max Load) Add (Constant i1 None))\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__str__:1\n          (arguments nil (list (arg &self:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &retList:5 Store)) (List nil Load) None)\n            (For\n              (Name &i:5 Store)\n              (Call\n                (Name g_range Load)\n                (list (Constant i1 None) (BinOp (Attribute (Name &self:5 Load) s_max Load) Add (Constant i1 None)))\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Name &x:5 Store))\n                  (Subscript (Attribute (Name &self:5 Load) s_ind_to_co Load) (Name &i:5 Load) Load)\n                  None\n                )\n                (If\n                  (Call (Attribute (Name &self:5 Load) s_count Load) (list (Name &x:5 Load)) nil)\n                  (/seq\n                    (Assign\n                      (list (Name &c:5 Store))\n                      (Call (Attribute (Name &self:5 Load) s_count Load) (list (Name &x:5 Load)) nil)\n                      None\n                    )\n                    (For\n                      (Name &_:5 Store)\n                      (Call (Name g_range Load) (list (Name &c:5 Load)) nil)\n                      (/seq (Expr (Call (Attribute (Name &retList:5 Load) s_append Load) (list (Name &x:5 Load)) nil)))\n                      nil\n                      None\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Return\n              (BinOp\n                (BinOp\n                  (Constant s-WzkxXQ== None)\n                  Add\n                  (Call\n                    (Attribute (Constant s-WzQ0LCAzMl0= None) s_join Load)\n                    (list\n                      (ListComp\n                        (Call (Name g_str Load) (list (Name &a:22 Load)) nil)\n                        (list (comprehension (Name &a:22 Store) (Name &retList:5 Load) nil i0))\n                      )\n                    )\n                    nil\n                  )\n                )\n                Add\n                (Constant s-WzkzXQ== None)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__getitem__:1\n          (arguments nil (list (arg &self:6 None None) (arg &key:6 None None)) None nil nil None nil)\n          (/seq\n            (AugAssign (Name &key:6 Store) Add (Constant i1 None))\n            (Assign (list (Name &s:6 Store)) (Constant i0 None) None)\n            (Assign (list (Name &ind:6 Store)) (Constant i0 None) None)\n            (Assign\n              (list (Name &l:6 Store))\n              (Call (Attribute (Attribute (Name &self:6 Load) s_max Load) s_bit_length Load) nil nil)\n              None\n            )\n            (For\n              (Name &i:6 Store)\n              (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &l:6 Load)) nil)) nil)\n              (/seq\n                (If\n                  (Compare\n                    (BinOp (Name &ind:6 Load) Add (BinOp (Constant i1 None) LShift (Name &i:6 Load)))\n                    (list LtE)\n                    (list (Attribute (Name &self:6 Load) s_max Load))\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (BinOp\n                          (Name &s:6 Load)\n                          Add\n                          (Subscript\n                            (Attribute (Name &self:6 Load) s_data Load)\n                            (BinOp (Name &ind:6 Load) Add (BinOp (Constant i1 None) LShift (Name &i:6 Load)))\n                            Load\n                          )\n                        )\n                        (list Lt)\n                        (list (Name &key:6 Load))\n                      )\n                      (/seq\n                        (AugAssign\n                          (Name &s:6 Store)\n                          Add\n                          (Subscript\n                            (Attribute (Name &self:6 Load) s_data Load)\n                            (BinOp (Name &ind:6 Load) Add (BinOp (Constant i1 None) LShift (Name &i:6 Load)))\n                            Load\n                          )\n                        )\n                        (AugAssign (Name &ind:6 Store) Add (BinOp (Constant i1 None) LShift (Name &i:6 Load)))\n                      )\n                      nil\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare (Name &ind:6 Load) (list Eq) (list (Attribute (Name &self:6 Load) s_max Load)))\n                  (Compare (Name &key:6 Load) (list Lt) (list (Constant i0 None)))\n                )\n              )\n              (/seq\n                (Raise\n                  (Call\n                    (Name g_IndexError Load)\n                    (list\n                      (Constant\n                        s-WzY2LCA3MywgODQsIDMyLCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgMzIsIDExMSwgMTE3LCAxMTYsIDMyLCAxMTEsIDEwMiwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDFd\n                        None\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return\n              (Subscript\n                (Attribute (Name &self:6 Load) s_ind_to_co Load)\n                (BinOp (Name &ind:6 Load) Add (Constant i1 None))\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__len__:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Call\n                (Attribute (Name &self:7 Load) s__query_sum Load)\n                (list (Attribute (Name &self:7 Load) s_max Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__contains__:1\n          (arguments nil (list (arg &self:8 None None) (arg &num:8 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (UnaryOp\n                Not\n                (Compare (Name &num:8 Load) (list In) (list (Attribute (Name &self:8 Load) s_co_to_ind Load)))\n              )\n              (/seq (Return (Constant False None)))\n              nil\n            )\n            (Return\n              (Compare\n                (Call (Attribute (Name &self:8 Load) s_count Load) (list (Name &num:8 Load)) nil)\n                (list Gt)\n                (list (Constant i0 None))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_query_sum:1\n          (arguments nil (list (arg &self:9 None None) (arg &i:9 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &s:9 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &i:9 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &s:9 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:9 Load) s_data Load) (Name &i:9 Load) Load)\n                )\n                (AugAssign (Name &i:9 Store) Sub (BinOp (Name &i:9 Load) BitAnd (UnaryOp USub (Name &i:9 Load))))\n              )\n              nil\n            )\n            (Return (Name &s:9 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_add:1\n          (arguments\n            nil\n            (list (arg &self:10 None None) (arg &i:10 None None) (arg &x:10 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (While\n              (Compare (Name &i:10 Load) (list LtE) (list (Attribute (Name &self:10 Load) s_max Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:10 Load) s_data Load) (Name &i:10 Load) Store)\n                  Add\n                  (Name &x:10 Load)\n                )\n                (AugAssign (Name &i:10 Store) Add (BinOp (Name &i:10 Load) BitAnd (UnaryOp USub (Name &i:10 Load))))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &push:1\n          (arguments nil (list (arg &self:11 None None) (arg &x:11 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (UnaryOp\n                Not\n                (Compare (Name &x:11 Load) (list In) (list (Attribute (Name &self:11 Load) s_co_to_ind Load)))\n              )\n              (/seq\n                (Raise\n                  (Call\n                    (Name g_KeyError Load)\n                    (list\n                      (Constant\n                        s-Wzg0LCAxMDQsIDEwMSwgMzIsIDExMiwgMTE3LCAxMTUsIDEwNCwgMTA1LCAxMTAsIDEwMywgMzIsIDExMCwgMTE3LCAxMDksIDk4LCAxMDEsIDExNCwgMzIsIDEwMCwgMTA1LCAxMDAsIDExMCwgMTE2LCAzMiwgMTA1LCAxMTAsIDEwNSwgMTE2LCAxMDUsIDk3LCAxMDgsIDEwNSwgMTIyLCAxMDEsIDEwMF0=\n                        None\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Expr\n              (Call\n                (Attribute (Name &self:11 Load) s__add Load)\n                (list\n                  (Subscript (Attribute (Name &self:11 Load) s_co_to_ind Load) (Name &x:11 Load) Load)\n                  (Constant i1 None)\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &delete:1\n          (arguments nil (list (arg &self:12 None None) (arg &x:12 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (UnaryOp\n                Not\n                (Compare (Name &x:12 Load) (list In) (list (Attribute (Name &self:12 Load) s_co_to_ind Load)))\n              )\n              (/seq\n                (Raise\n                  (Call\n                    (Name g_KeyError Load)\n                    (list\n                      (Constant\n                        s-Wzg0LCAxMDQsIDEwMSwgMzIsIDEwMCwgMTAxLCAxMDgsIDEwMSwgMTE2LCAxMDUsIDExMCwgMTAzLCAzMiwgMTEwLCAxMTcsIDEwOSwgOTgsIDEwMSwgMTE0LCAzMiwgMTAwLCAxMDUsIDEwMCwgMTEwLCAxMTYsIDMyLCAxMDUsIDExMCwgMTA1LCAxMTYsIDEwNSwgOTcsIDEwOCwgMTA1LCAxMjIsIDEwMSwgMTAwXQ==\n                        None\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (If\n              (Compare\n                (Call (Attribute (Name &self:12 Load) s_count Load) (list (Name &x:12 Load)) nil)\n                (list LtE)\n                (list (Constant i0 None))\n              )\n              (/seq\n                (Raise\n                  (Call\n                    (Name g_ValueError Load)\n                    (list\n                      (Constant\n                        s-Wzg0LCAxMDQsIDEwMSwgMzIsIDEwMCwgMTAxLCAxMDgsIDEwMSwgMTE2LCAxMDUsIDExMCwgMTAzLCAzMiwgMTEwLCAxMTcsIDEwOSwgOTgsIDEwMSwgMTE0LCAzMiwgMTAwLCAxMTEsIDEwMSwgMTE1LCAxMTAsIDExNiwgMzIsIDEwMSwgMTIwLCAxMDUsIDExNSwgMTE2XQ==\n                        None\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Expr\n              (Call\n                (Attribute (Name &self:12 Load) s__add Load)\n                (list\n                  (Subscript (Attribute (Name &self:12 Load) s_co_to_ind Load) (Name &x:12 Load) Load)\n                  (UnaryOp USub (Constant i1 None))\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &count:1\n          (arguments nil (list (arg &self:13 None None) (arg &x:13 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (BinOp\n                (Call\n                  (Attribute (Name &self:13 Load) s__query_sum Load)\n                  (list (Subscript (Attribute (Name &self:13 Load) s_co_to_ind Load) (Name &x:13 Load) Load))\n                  nil\n                )\n                Sub\n                (Call\n                  (Attribute (Name &self:13 Load) s__query_sum Load)\n                  (list\n                    (BinOp\n                      (Subscript (Attribute (Name &self:13 Load) s_co_to_ind Load) (Name &x:13 Load) Load)\n                      Sub\n                      (Constant i1 None)\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &bisect_right:1\n          (arguments nil (list (arg &self:14 None None) (arg &x:14 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &x:14 Load) (list In) (list (Attribute (Name &self:14 Load) s_co_to_ind Load)))\n              (/seq\n                (Assign\n                  (list (Name &i:14 Store))\n                  (Subscript (Attribute (Name &self:14 Load) s_co_to_ind Load) (Name &x:14 Load) Load)\n                  None\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &i:14 Store))\n                  (BinOp\n                    (Call\n                      (Name g_bisect_right Load)\n                      (list (Attribute (Name &self:14 Load) s_ind_to_co Load) (Name &x:14 Load))\n                      nil\n                    )\n                    Sub\n                    (Constant i1 None)\n                  )\n                  None\n                )\n              )\n            )\n            (Return (Call (Attribute (Name &self:14 Load) s__query_sum Load) (list (Name &i:14 Load)) nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &bisect_left:1\n          (arguments nil (list (arg &self:15 None None) (arg &x:15 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &x:15 Load) (list In) (list (Attribute (Name &self:15 Load) s_co_to_ind Load)))\n              (/seq\n                (Assign\n                  (list (Name &i:15 Store))\n                  (Subscript (Attribute (Name &self:15 Load) s_co_to_ind Load) (Name &x:15 Load) Load)\n                  None\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &i:15 Store))\n                  (Call\n                    (Name g_bisect_left Load)\n                    (list (Attribute (Name &self:15 Load) s_ind_to_co Load) (Name &x:15 Load))\n                    nil\n                  )\n                  None\n                )\n              )\n            )\n            (If (Compare (Name &i:15 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant i0 None))) nil)\n            (Return\n              (Call\n                (Attribute (Name &self:15 Load) s__query_sum Load)\n                (list (BinOp (Name &i:15 Load) Sub (Constant i1 None)))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &sumBIT:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:16 None None) (arg &N:16 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:16 Load) s_N Store)) (Name &N:16 Load) None)\n            (Assign\n              (list (Attribute (Name &self:16 Load) s_bit Store))\n              (ListComp\n                (Constant i0 None)\n                (list\n                  (comprehension\n                    (Name &_:21 Store)\n                    (Call\n                      (Name g_range Load)\n                      (list (BinOp (Attribute (Name &self:16 Load) s_N Load) Add (Constant i1 None)))\n                      nil\n                    )\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__str__:2\n          (arguments nil (list (arg &self:17 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &ret:17 Store)) (List nil Load) None)\n            (For\n              (Name &i:17 Store)\n              (Call\n                (Name g_range Load)\n                (list (Constant i1 None) (BinOp (Attribute (Name &self:17 Load) s_N Load) Add (Constant i1 None)))\n                nil\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &ret:17 Load) s_append Load)\n                    (list (Call (Attribute (Name &self:17 Load) s___getitem__ Load) (list (Name &i:17 Load)) nil))\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n            (Return\n              (BinOp\n                (BinOp\n                  (Constant s-WzkxXQ== None)\n                  Add\n                  (Call\n                    (Attribute (Constant s-WzQ0LCAzMl0= None) s_join Load)\n                    (list\n                      (ListComp\n                        (Call (Name g_str Load) (list (Name &a:23 Load)) nil)\n                        (list (comprehension (Name &a:23 Store) (Name &ret:17 Load) nil i0))\n                      )\n                    )\n                    nil\n                  )\n                )\n                Add\n                (Constant s-WzkzXQ== None)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__getitem__:2\n          (arguments nil (list (arg &self:18 None None) (arg &i:18 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &s:18 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &i:18 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &s:18 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:18 Load) s_bit Load) (Name &i:18 Load) Load)\n                )\n                (AugAssign (Name &i:18 Store) Sub (BinOp (Name &i:18 Load) BitAnd (UnaryOp USub (Name &i:18 Load))))\n              )\n              nil\n            )\n            (Return (Name &s:18 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:2\n          (arguments\n            nil\n            (list (arg &self:19 None None) (arg &i:19 None None) (arg &x:19 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (While\n              (Compare (Name &i:19 Load) (list LtE) (list (Attribute (Name &self:19 Load) s_N Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:19 Load) s_bit Load) (Name &i:19 Load) Store)\n                  Add\n                  (Name &x:19 Load)\n                )\n                (AugAssign (Name &i:19 Store) Add (BinOp (Name &i:19 Load) BitAnd (UnaryOp USub (Name &i:19 Load))))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (ImportFrom s_operator (list (alias &itemgetter:0 None)) i0)\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &N:3 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &X:3 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &V:3 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &XV:3 Store))\n          (ListComp\n            (Tuple (list (Name &x:20 Load) (Name &v:20 Load)) Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &x:20 Store) (Name &v:20 Store)) Store)\n                (Call (Name g_zip Load) (list (Name &X:3 Load) (Name &V:3 Load)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &XV:3 Load) s_sort Load) nil nil))\n        (Expr\n          (Call\n            (Attribute (Name &XV:3 Load) s_sort Load)\n            nil\n            (list (keyword s_key (Call (Name &itemgetter:0 Load) (list (Constant i1 None)) nil)))\n          )\n        )\n        (Assign (list (Name &co_to_ind1:3 Store)) (Dict nil nil) None)\n        (For\n          (Tuple (list (Name &i:3 Store) (Tuple (list (Name &x:3 Store) (Name &v:3 Store)) Store)) Store)\n          (Call (Name g_enumerate Load) (list (Name &XV:3 Load)) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &co_to_ind1:3 Load) (Name &x:3 Load) Store))\n              (BinOp (Name &i:3 Load) Add (Constant i1 None))\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &XV:3 Load) s_sort Load) nil nil))\n        (Assign\n          (list (Name &sumbit:3 Store))\n          (Call (Name &sumBIT:0 Load) (list (BinOp (Name &N:3 Load) Add (Constant i1 None))) nil)\n          None\n        )\n        (Assign\n          (list (Name &bit:3 Store))\n          (Call (Name &sumBIT:0 Load) (list (BinOp (Name &N:3 Load) Add (Constant i1 None))) nil)\n          None\n        )\n        (Assign (list (Name &ans:3 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (Name &x:3 Store) (Name &v:3 Store)) Store)\n          (Name &XV:3 Load)\n          (/seq\n            (Assign (list (Name &ind1:3 Store)) (Subscript (Name &co_to_ind1:3 Load) (Name &x:3 Load) Load) None)\n            (Assign (list (Name &count:3 Store)) (Subscript (Name &bit:3 Load) (Name &ind1:3 Load) Load) None)\n            (Assign (list (Name &s:3 Store)) (Subscript (Name &sumbit:3 Load) (Name &ind1:3 Load) Load) None)\n            (AugAssign\n              (Name &ans:3 Store)\n              Add\n              (BinOp (BinOp (Name &count:3 Load) Mult (Name &x:3 Load)) Sub (Name &s:3 Load))\n            )\n            (Expr (Call (Attribute (Name &bit:3 Load) s_add Load) (list (Name &ind1:3 Load) (Constant i1 None)) nil))\n            (Expr (Call (Attribute (Name &sumbit:3 Load) s_add Load) (list (Name &ind1:3 Load) (Name &x:3 Load)) nil))\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:3 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Import (list (alias &bisect:0 None)))\n    (FunctionDef\n      &query:0\n      (arguments nil (list (arg &f:1 None None) (arg &i:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ret:1 Store)) (Constant i0 None) None)\n        (While\n          (Name &i:1 Load)\n          (/seq\n            (AugAssign (Name &ret:1 Store) Add (Subscript (Name &f:1 Load) (Name &i:1 Load) Load))\n            (AugAssign (Name &i:1 Store) Sub (BinOp (Name &i:1 Load) BitAnd (UnaryOp USub (Name &i:1 Load))))\n          )\n          nil\n        )\n        (Return (Name &ret:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &update:0\n      (arguments nil (list (arg &f:2 None None) (arg &i:2 None None) (arg &d:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (Name &f:2 Load)) nil) None)\n        (While\n          (Compare (Name &i:2 Load) (list Lt) (list (Name &n:2 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &f:2 Load) (Name &i:2 Load) Store) Add (Name &d:2 Load))\n            (AugAssign (Name &i:2 Store) Add (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &X:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &V:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Tuple\n          (list (Subscript (Name &X:0 Load) (Name &i:3 Load) Load) (Subscript (Name &V:0 Load) (Name &i:3 Load) Load))\n          Load\n        )\n        (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &vlist:0 Store))\n      (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &V:0 Load)) nil)) nil)\n      None\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (BinOp\n        (List (list (Constant i0 None)) Load)\n        Mult\n        (BinOp (Call (Name g_len Load) (list (Name &vlist:0 Load)) nil) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign\n      (list (Name &f2:0 Store))\n      (BinOp\n        (List (list (Constant i0 None)) Load)\n        Mult\n        (BinOp (Call (Name g_len Load) (list (Name &vlist:0 Load)) nil) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Tuple (list (Name &x:0 Store) (Name &v:0 Store)) Store)\n      (Name &a:0 Load)\n      (/seq\n        (Assign\n          (list (Name &ii:0 Store))\n          (Call (Attribute (Name &bisect:0 Load) s_bisect_left Load) (list (Name &vlist:0 Load) (Name &v:0 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &sm:0 Store))\n          (Call (Name &query:0 Load) (list (Name &f:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None))) nil)\n          None\n        )\n        (Assign\n          (list (Name &cnt:0 Store))\n          (Call (Name &query:0 Load) (list (Name &f2:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None))) nil)\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp (BinOp (Name &x:0 Load) Mult (Name &cnt:0 Load)) Sub (Name &sm:0 Load))\n        )\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list (Name &f:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None)) (Name &x:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list (Name &f2:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None)) (Constant i1 None))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Import (list (alias &bisect:0 None)))\n    (FunctionDef\n      &query:0\n      (arguments nil (list (arg &f:1 None None) (arg &i:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ret:1 Store)) (Constant i0 None) None)\n        (While\n          (Name &i:1 Load)\n          (/seq\n            (AugAssign (Name &ret:1 Store) Add (Subscript (Name &f:1 Load) (Name &i:1 Load) Load))\n            (AugAssign (Name &i:1 Store) Sub (BinOp (Name &i:1 Load) BitAnd (UnaryOp USub (Name &i:1 Load))))\n          )\n          nil\n        )\n        (Return (Name &ret:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &update:0\n      (arguments nil (list (arg &f:2 None None) (arg &i:2 None None) (arg &d:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (Name &f:2 Load)) nil) None)\n        (While\n          (Compare (Name &i:2 Load) (list Lt) (list (Name &n:2 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &f:2 Load) (Name &i:2 Load) Store) Add (Name &d:2 Load))\n            (AugAssign (Name &i:2 Store) Add (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &X:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &V:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &r:0 Store))\n      (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:0 Load)) nil)) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &r:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &i:3 None None)) None nil nil None nil)\n              (Subscript (Name &X:0 Load) (Name &i:3 Load) Load)\n            )\n          )\n        )\n      )\n    )\n    (Assign\n      (list (Name &vlist:0 Store))\n      (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &V:0 Load)) nil)) nil)\n      None\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (BinOp\n        (List (list (Constant i0 None)) Load)\n        Mult\n        (BinOp (Call (Name g_len Load) (list (Name &vlist:0 Load)) nil) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign\n      (list (Name &f2:0 Store))\n      (BinOp\n        (List (list (Constant i0 None)) Load)\n        Mult\n        (BinOp (Call (Name g_len Load) (list (Name &vlist:0 Load)) nil) Add (Constant i1 None))\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &r:0 Load)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &x:0 Store) (Name &v:0 Store)) Store))\n          (Tuple\n            (list (Subscript (Name &X:0 Load) (Name &i:0 Load) Load) (Subscript (Name &V:0 Load) (Name &i:0 Load) Load))\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Name &ii:0 Store))\n          (Call (Attribute (Name &bisect:0 Load) s_bisect_left Load) (list (Name &vlist:0 Load) (Name &v:0 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &sm:0 Store))\n          (Call (Name &query:0 Load) (list (Name &f:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None))) nil)\n          None\n        )\n        (Assign\n          (list (Name &cnt:0 Store))\n          (Call (Name &query:0 Load) (list (Name &f2:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None))) nil)\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp (BinOp (Name &x:0 Load) Mult (Name &cnt:0 Load)) Sub (Name &sm:0 Load))\n        )\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list (Name &f:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None)) (Name &x:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list (Name &f2:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None)) (Constant i1 None))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ClassDef\n      &BIT:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &array:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_n Store))\n              (Call (Name g_len Load) (list (Name &array:3 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_bit Store))\n              (BinOp (List (list (Constant i0 None)) Load) Add (Name &array:3 Load))\n              None\n            )\n            (Expr (Call (Attribute (Name &self:3 Load) s_build Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &build:1\n          (arguments nil (list (arg &self:4 None None)) None nil nil None nil)\n          (/seq\n            (For\n              (Name &i:4 Store)\n              (Call (Name g_range Load) (list (Constant i1 None) (Attribute (Name &self:4 Load) s_n Load)) nil)\n              (/seq\n                (If\n                  (Compare\n                    (BinOp (Name &i:4 Load) Add (BinOp (Name &i:4 Load) BitAnd (UnaryOp USub (Name &i:4 Load))))\n                    (list Gt)\n                    (list (Attribute (Name &self:4 Load) s_n Load))\n                  )\n                  (/seq Continue)\n                  nil\n                )\n                (AugAssign\n                  (Subscript\n                    (Attribute (Name &self:4 Load) s_bit Load)\n                    (BinOp (Name &i:4 Load) Add (BinOp (Name &i:4 Load) BitAnd (UnaryOp USub (Name &i:4 Load))))\n                    Store\n                  )\n                  Add\n                  (Subscript (Attribute (Name &self:4 Load) s_bit Load) (Name &i:4 Load) Load)\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_sum:1\n          (arguments nil (list (arg &self:5 None None) (arg &i:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &s:5 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &i:5 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &s:5 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:5 Load) s_bit Load) (Name &i:5 Load) Load)\n                )\n                (AugAssign (Name &i:5 Store) Sub (BinOp (Name &i:5 Load) BitAnd (UnaryOp USub (Name &i:5 Load))))\n              )\n              nil\n            )\n            (Return (Name &s:5 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:1\n          (arguments\n            nil\n            (list (arg &self:6 None None) (arg &i:6 None None) (arg &val:6 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &i:6 Store) Add (Constant i1 None))\n            (While\n              (Compare (Name &i:6 Load) (list LtE) (list (Attribute (Name &self:6 Load) s_n Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:6 Load) s_bit Load) (Name &i:6 Load) Store)\n                  Add\n                  (Name &val:6 Load)\n                )\n                (AugAssign (Name &i:6 Store) Add (BinOp (Name &i:6 Load) BitAnd (UnaryOp USub (Name &i:6 Load))))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get_sum:1\n          (arguments nil (list (arg &self:7 None None) (arg &l:7 None None) (arg &r:7 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (BinOp\n                (Call (Attribute (Name &self:7 Load) s__sum Load) (list (Name &r:7 Load)) nil)\n                Sub\n                (Call (Attribute (Name &self:7 Load) s__sum Load) (list (Name &l:7 Load)) nil)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ImportFrom s_operator (list (alias &itemgetter:0 None)) i0)\n    (Import (list (alias &sys:0 None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &sorted_x:0 Store)) (Call (Name g_sorted Load) (list (Name &x:0 Load)) nil) None)\n    (Assign (list (Name &bit:0 Store)) (Call (Name &BIT:0 Load) (list (Name &sorted_x:0 Load)) nil) None)\n    (Assign\n      (list (Name &bit_ind:0 Store))\n      (Call (Name &BIT:0 Load) (list (BinOp (List (list (Constant i1 None)) Load) Mult (Name &n:0 Load))) nil)\n      None\n    )\n    (Assign\n      (list (Name &to_ind:0 Store))\n      (DictComp\n        (Name &v:2 Load)\n        (Name &i:2 Load)\n        (list\n          (comprehension\n            (Tuple (list (Name &i:2 Store) (Name &v:2 Store)) Store)\n            (Call (Name g_enumerate Load) (list (Name &sorted_x:0 Load)) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &info:0 Store)) (BinOp (List (list (Constant None None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &info:0 Load) (Name &i:0 Load) Store))\n          (Tuple\n            (list\n              (BinOp\n                (Subscript (Name &v:0 Load) (Name &i:0 Load) Load)\n                Add\n                (BinOp (Constant i10 None) Pow (Constant i18 None))\n              )\n              (Subscript (Name &x:0 Load) (Name &i:0 Load) Load)\n            )\n            Load\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &info:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Name &info:0 Load))\n        (list\n          (keyword s_key (Call (Name &itemgetter:0 Load) (list (Constant i1 None)) nil))\n          (keyword s_reverse (Constant True None))\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &info:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Name &info:0 Load))\n        (list\n          (keyword s_key (Call (Name &itemgetter:0 Load) (list (Constant i0 None)) nil))\n          (keyword s_reverse (Constant True None))\n        )\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &_:0 Store) (Name &pos:0 Store)) Store))\n          (Subscript (Name &info:0 Load) (Name &i:0 Load) Load)\n          None\n        )\n        (Assign (list (Name &ind:0 Store)) (Subscript (Name &to_ind:0 Load) (Name &pos:0 Load) Load) None)\n        (Assign\n          (list (Name &sum_:0 Store))\n          (Call (Attribute (Name &bit:0 Load) s_get_sum Load) (list (Constant i0 None) (Name &ind:0 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &num:0 Store))\n          (Call (Attribute (Name &bit_ind:0 Load) s_get_sum Load) (list (Constant i0 None) (Name &ind:0 Load)) nil)\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp (BinOp (Name &num:0 Load) Mult (Name &pos:0 Load)) Sub (Name &sum_:0 Load))\n        )\n        (Expr\n          (Call\n            (Attribute (Name &bit:0 Load) s_add Load)\n            (list (Name &ind:0 Load) (UnaryOp USub (Name &pos:0 Load)))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &bit_ind:0 Load) s_add Load)\n            (list (Name &ind:0 Load) (UnaryOp USub (Constant i1 None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_operator None)))\n    (Import (list (alias g_collections None)))\n    (ImportFrom s_sys (list (alias g_stdin None)) i0)\n    (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &pos:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &speed:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &A:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &N:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &A:0 Load) s_append Load)\n            (list\n              (Tuple\n                (list\n                  (Subscript (Name &pos:0 Load) (Name &i:0 Load) Load)\n                  (Subscript (Name &speed:0 Load) (Name &i:0 Load) Load)\n                )\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &dist:0 Store)) (Dict nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Name &pos:0 Load)\n      (/seq (Assign (list (Subscript (Name &dist:0 Load) (Name &i:0 Load) Store)) (Constant i0 None) None))\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &A:0 Load) s_sort Load)\n        nil\n        (list (keyword s_key (Call (Attribute (Name g_operator Load) s_itemgetter Load) (list (Constant i0 None)) nil)))\n      )\n    )\n    (Assign (list (Name &count:0 Store)) (List (list (Constant i0 None)) Load) None)\n    (FunctionDef\n      &merge_compare:0\n      (arguments nil (list (arg &p:1 None None) (arg &r:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &p:1 Load) (list Lt) (list (Name &r:1 Load)))\n          (/seq\n            (Assign\n              (list (Name &q:1 Store))\n              (BinOp (BinOp (Name &r:1 Load) Add (Name &p:1 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (Expr (Call (Name &merge_compare:0 Load) (list (Name &p:1 Load) (Name &q:1 Load)) nil))\n            (Expr\n              (Call\n                (Name &merge_compare:0 Load)\n                (list (BinOp (Name &q:1 Load) Add (Constant i1 None)) (Name &r:1 Load))\n                nil\n              )\n            )\n            (Expr (Call (Name &merge:0 Load) (list (Name &p:1 Load) (Name &q:1 Load) (Name &r:1 Load)) nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &merge:0\n      (arguments nil (list (arg &p:2 None None) (arg &q:2 None None) (arg &r:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &n_1:2 Store))\n          (BinOp (BinOp (Name &q:2 Load) Sub (Name &p:2 Load)) Add (Constant i1 None))\n          None\n        )\n        (Assign (list (Name &n_2:2 Store)) (BinOp (Name &r:2 Load) Sub (Name &q:2 Load)) None)\n        (Assign (list (Name &temp:2 Store)) (List nil Load) None)\n        (Assign\n          (list (Name &L:2 Store))\n          (Subscript\n            (Name &A:0 Load)\n            (Slice (Name &p:2 Load) (BinOp (Name &q:2 Load) Add (Constant i1 None)) None)\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Name &R:2 Store))\n          (Subscript\n            (Name &A:0 Load)\n            (Slice (BinOp (Name &q:2 Load) Add (Constant i1 None)) (BinOp (Name &r:2 Load) Add (Constant i1 None)) None)\n            Load\n          )\n          None\n        )\n        (Assign (list (Name &i:2 Store)) (Constant i0 None) None)\n        (Assign (list (Name &j:2 Store)) (Constant i0 None) None)\n        (Assign (list (Name &sum_pos_right:2 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (Name &e:2 Store) (Name &f:2 Store)) Store)\n          (Name &R:2 Load)\n          (/seq (AugAssign (Name &sum_pos_right:2 Store) Add (Name &e:2 Load)))\n          nil\n          None\n        )\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &i:2 Load) (list Lt) (list (Name &n_1:2 Load)))\n              (Compare (Name &j:2 Load) (list Lt) (list (Name &n_2:2 Load)))\n            )\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Subscript (Name &L:2 Load) (Name &i:2 Load) Load) (Constant i1 None) Load)\n                (list LtE)\n                (list (Subscript (Subscript (Name &R:2 Load) (Name &j:2 Load) Load) (Constant i1 None) Load))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &temp:2 Load) s_append Load)\n                    (list (Subscript (Name &L:2 Load) (Name &i:2 Load) Load))\n                    nil\n                  )\n                )\n                (AugAssign\n                  (Subscript (Name &count:0 Load) (Constant i0 None) Store)\n                  Add\n                  (BinOp\n                    (Name &sum_pos_right:2 Load)\n                    Sub\n                    (BinOp\n                      (Subscript (Subscript (Name &L:2 Load) (Name &i:2 Load) Load) (Constant i0 None) Load)\n                      Mult\n                      (BinOp (Name &n_2:2 Load) Sub (Name &j:2 Load))\n                    )\n                  )\n                )\n                (AugAssign (Name &i:2 Store) Add (Constant i1 None))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &temp:2 Load) s_append Load)\n                    (list (Subscript (Name &R:2 Load) (Name &j:2 Load) Load))\n                    nil\n                  )\n                )\n                (AugAssign\n                  (Name &sum_pos_right:2 Store)\n                  Sub\n                  (Subscript (Subscript (Name &R:2 Load) (Name &j:2 Load) Load) (Constant i0 None) Load)\n                )\n                (AugAssign (Name &j:2 Store) Add (Constant i1 None))\n              )\n            )\n          )\n          nil\n        )\n        (If\n          (Compare (Name &i:2 Load) (list Eq) (list (Name &n_1:2 Load)))\n          (/seq\n            (AugAssign (Name &temp:2 Store) Add (Subscript (Name &R:2 Load) (Slice (Name &j:2 Load) None None) Load))\n          )\n          (/seq\n            (AugAssign (Name &temp:2 Store) Add (Subscript (Name &L:2 Load) (Slice (Name &i:2 Load) None None) Load))\n          )\n        )\n        (Assign\n          (list\n            (Subscript\n              (Name &A:0 Load)\n              (Slice (Name &p:2 Load) (BinOp (Name &r:2 Load) Add (Constant i1 None)) None)\n              Store\n            )\n          )\n          (Name &temp:2 Load)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Call (Name &merge_compare:0 Load) (list (Constant i0 None) (BinOp (Name &N:0 Load) Sub (Constant i1 None))) nil)\n    )\n    (Expr (Call (Name g_print Load) (list (Subscript (Name &count:0 Load) (Constant i0 None) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Import (list (alias &sys:1 None)))\n        (Assign\n          (list (Name &input:1 Store))\n          (Attribute (Attribute (Name &sys:1 Load) s_stdin Load) s_readline Load)\n          None\n        )\n        (ClassDef\n          &Bit:1\n          nil\n          nil\n          (/seq\n            (FunctionDef\n              &__init__:2\n              (arguments nil (list (arg &self:4 None None) (arg &n:4 None None)) None nil nil None nil)\n              (/seq\n                (Assign (list (Attribute (Name &self:4 Load) s_size Store)) (Name &n:4 Load) None)\n                (Assign\n                  (list (Attribute (Name &self:4 Load) s_tree Store))\n                  (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:4 Load) Add (Constant i1 None)))\n                  None\n                )\n              )\n              nil\n              None\n              None\n            )\n            (FunctionDef\n              &sum:2\n              (arguments nil (list (arg &self:5 None None) (arg &i:5 None None)) None nil nil None nil)\n              (/seq\n                (Assign (list (Name &s:5 Store)) (Constant i0 None) None)\n                (While\n                  (Compare (Name &i:5 Load) (list Gt) (list (Constant i0 None)))\n                  (/seq\n                    (AugAssign\n                      (Name &s:5 Store)\n                      Add\n                      (Subscript (Attribute (Name &self:5 Load) s_tree Load) (Name &i:5 Load) Load)\n                    )\n                    (AugAssign (Name &i:5 Store) Sub (BinOp (Name &i:5 Load) BitAnd (UnaryOp USub (Name &i:5 Load))))\n                  )\n                  nil\n                )\n                (Return (Name &s:5 Load))\n              )\n              nil\n              None\n              None\n            )\n            (FunctionDef\n              &add:2\n              (arguments\n                nil\n                (list (arg &self:6 None None) (arg &i:6 None None) (arg &x:6 None None))\n                None\n                nil\n                nil\n                None\n                nil\n              )\n              (/seq\n                (While\n                  (Compare (Name &i:6 Load) (list LtE) (list (Attribute (Name &self:6 Load) s_size Load)))\n                  (/seq\n                    (AugAssign\n                      (Subscript (Attribute (Name &self:6 Load) s_tree Load) (Name &i:6 Load) Store)\n                      Add\n                      (Name &x:6 Load)\n                    )\n                    (AugAssign (Name &i:6 Store) Add (BinOp (Name &i:6 Load) BitAnd (UnaryOp USub (Name &i:6 Load))))\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n              None\n            )\n          )\n          nil\n        )\n        (Assign (list (Name &N:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:1 Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &X:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:1 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &V:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:1 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &info:1 Store))\n          (ListComp\n            (Tuple (list (Name &x:7 Load) (Name &v:7 Load)) Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &x:7 Store) (Name &v:7 Store)) Store)\n                (Call (Name g_zip Load) (list (Name &X:1 Load) (Name &V:1 Load)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &info:1 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &p:8 None None)) None nil nil None nil)\n                  (Subscript (Name &p:8 Load) (Constant i0 None) Load)\n                )\n              )\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &info:1 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &p:9 None None)) None nil nil None nil)\n                  (Subscript (Name &p:9 Load) (Constant i1 None) Load)\n                )\n              )\n            )\n          )\n        )\n        (Expr (Call (Attribute (Name &X:1 Load) s_sort Load) nil nil))\n        (Assign\n          (list (Name &x2i:1 Store))\n          (DictComp\n            (Name &x:3 Load)\n            (BinOp (Name &i:3 Load) Add (Constant i1 None))\n            (list\n              (comprehension\n                (Tuple (list (Name &i:3 Store) (Name &x:3 Store)) Store)\n                (Call (Name g_enumerate Load) (list (Name &X:1 Load)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &bit_x:1 Store))\n          (Call (Name &Bit:1 Load) (list (BinOp (Name &N:1 Load) Add (Constant i1 None))) nil)\n          None\n        )\n        (Assign\n          (list (Name &bit_cnt:1 Store))\n          (Call (Name &Bit:1 Load) (list (BinOp (Name &N:1 Load) Add (Constant i1 None))) nil)\n          None\n        )\n        (Assign (list (Name &ans:1 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (Name &x:1 Store) (Name &_:1 Store)) Store)\n          (Name &info:1 Load)\n          (/seq\n            (Assign (list (Name &i:1 Store)) (Subscript (Name &x2i:1 Load) (Name &x:1 Load) Load) None)\n            (AugAssign\n              (Name &ans:1 Store)\n              Add\n              (BinOp\n                (BinOp\n                  (Call (Attribute (Name &bit_cnt:1 Load) s_sum Load) (list (Name &i:1 Load)) nil)\n                  Mult\n                  (Name &x:1 Load)\n                )\n                Sub\n                (Call (Attribute (Name &bit_x:1 Load) s_sum Load) (list (Name &i:1 Load)) nil)\n              )\n            )\n            (Expr (Call (Attribute (Name &bit_x:1 Load) s_add Load) (list (Name &i:1 Load) (Name &x:1 Load)) nil))\n            (Expr (Call (Attribute (Name &bit_cnt:1 Load) s_add Load) (list (Name &i:1 Load) (Constant i1 None)) nil))\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:1 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_bisect None)))\n    (ClassDef\n      &ft:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_a Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i200000 None))\n              None\n            )\n            (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Name &n:2 Load) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &qry:1\n          (arguments nil (list (arg &self:3 None None) (arg &r:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &ret:3 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &r:3 Load) (list GtE) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &ret:3 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:3 Load) s_a Load) (Name &r:3 Load) Load)\n                )\n                (Assign\n                  (list (Name &r:3 Store))\n                  (BinOp\n                    (BinOp (Name &r:3 Load) BitAnd (BinOp (Name &r:3 Load) Add (Constant i1 None)))\n                    Sub\n                    (Constant i1 None)\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &ret:3 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &upd:1\n          (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &v:4 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Name &i:4 Load) (list Lt) (list (Attribute (Name &self:4 Load) s_n Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:4 Load) s_a Load) (Name &i:4 Load) Store)\n                  Add\n                  (Name &v:4 Load)\n                )\n                (Assign\n                  (list (Name &i:4 Store))\n                  (BinOp (Name &i:4 Load) BitOr (BinOp (Name &i:4 Load) Add (Constant i1 None)))\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &f0:0 Store)) (Call (Name &ft:0 Load) (list (Name &n:0 Load)) nil) None)\n    (Assign (list (Name &f1:0 Store)) (Call (Name &ft:0 Load) (list (Name &n:0 Load)) nil) None)\n    (Assign\n      (list (Name &a1:0 Store))\n      (ListComp\n        (List nil Load)\n        (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) s_append Load)\n            (list (Subscript (Name &x:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) s_append Load)\n            (list (Subscript (Name &v:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &a1:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &v:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &p:0 Store))\n          (Call\n            (Attribute (Name g_bisect Load) s_bisect_left Load)\n            (list\n              (Name &v:0 Load)\n              (Subscript (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp\n            (BinOp\n              (Call (Attribute (Name &f0:0 Load) s_qry Load) (list (Name &p:0 Load)) nil)\n              Mult\n              (Subscript (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n            )\n            Sub\n            (Call (Attribute (Name &f1:0 Load) s_qry Load) (list (Name &p:0 Load)) nil)\n          )\n        )\n        (Expr (Call (Attribute (Name &f0:0 Load) s_upd Load) (list (Name &p:0 Load) (Constant i1 None)) nil))\n        (Expr\n          (Call\n            (Attribute (Name &f1:0 Load) s_upd Load)\n            (list\n              (Name &p:0 Load)\n              (Subscript (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_operator (list (alias g_itemgetter None)) i0)\n    (ClassDef\n      &BIT:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &size:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_table Store))\n              (ListComp\n                (Constant i0 None)\n                (list\n                  (comprehension\n                    (Name &_:6 Store)\n                    (Call (Name g_range Load) (list (BinOp (Name &size:2 Load) Add (Constant i2 None))) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (Assign (list (Attribute (Name &self:2 Load) s_size Store)) (Name &size:2 Load) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &Sum:1\n          (arguments nil (list (arg &self:3 None None) (arg &i:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &s:3 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &i:3 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &s:3 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:3 Load) s_table Load) (Name &i:3 Load) Load)\n                )\n                (AugAssign (Name &i:3 Store) Sub (BinOp (Name &i:3 Load) BitAnd (UnaryOp USub (Name &i:3 Load))))\n              )\n              nil\n            )\n            (Return (Name &s:3 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &PointAdd:1\n          (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &x:4 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Name &i:4 Load) (list LtE) (list (Attribute (Name &self:4 Load) s_size Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:4 Load) s_table Load) (Name &i:4 Load) Store)\n                  Add\n                  (Name &x:4 Load)\n                )\n                (AugAssign (Name &i:4 Store) Add (BinOp (Name &i:4 Load) BitAnd (UnaryOp USub (Name &i:4 Load))))\n              )\n              nil\n            )\n            (Return None)\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &y:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (ListComp\n            (Tuple (list (Name &xx:5 Load) (Name &vv:5 Load)) Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &xx:5 Store) (Name &vv:5 Store)) Store)\n                (Call (Name g_zip Load) (list (Name &x:0 Load) (Name &v:0 Load)) nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n        (list (keyword s_key (Call (Name g_itemgetter Load) (list (Constant i1 None)) nil)))\n      )\n      None\n    )\n    (Assign\n      (list (Name &z:0 Store))\n      (List\n        (list\n          (List\n            (list\n              (Subscript (Subscript (Name &y:0 Load) (Constant i0 None) Load) (Constant i0 None) Load)\n              (Constant i1 None)\n            )\n            Load\n          )\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Subscript (Name &y:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n            (list Eq)\n            (list\n              (Subscript\n                (Subscript (Name &y:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i1 None)\n                Load\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &z:0 Load) s_append Load)\n                (list\n                  (List\n                    (list\n                      (Subscript (Subscript (Name &y:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n                      (Subscript\n                        (Subscript (Name &z:0 Load) (UnaryOp USub (Constant i1 None)) Load)\n                        (Constant i1 None)\n                        Load\n                      )\n                    )\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &z:0 Load) s_append Load)\n                (list\n                  (List\n                    (list\n                      (Subscript (Subscript (Name &y:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n                      (BinOp\n                        (Subscript\n                          (Subscript (Name &z:0 Load) (UnaryOp USub (Constant i1 None)) Load)\n                          (Constant i1 None)\n                          Load\n                        )\n                        Add\n                        (Constant i1 None)\n                      )\n                    )\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &z:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Tuple (list (Name &b_sigma:0 Store) (Name &b_num:0 Store)) Store))\n      (Tuple\n        (list\n          (Call (Name &BIT:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i2 None))) nil)\n          (Call (Name &BIT:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i2 None))) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Tuple (list (Name &x:0 Store) (Name &v:0 Store)) Store)\n      (Name &z:0 Load)\n      (/seq\n        (Assign\n          (list (Name &num:0 Store))\n          (Call (Attribute (Name &b_num:0 Load) s_Sum Load) (list (Name &v:0 Load)) nil)\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp\n            (BinOp (Name &x:0 Load) Mult (Name &num:0 Load))\n            Sub\n            (Call (Attribute (Name &b_sigma:0 Load) s_Sum Load) (list (Name &v:0 Load)) nil)\n          )\n        )\n        (Expr (Call (Attribute (Name &b_num:0 Load) s_PointAdd Load) (list (Name &v:0 Load) (Constant i1 None)) nil))\n        (Expr (Call (Attribute (Name &b_sigma:0 Load) s_PointAdd Load) (list (Name &v:0 Load) (Name &x:0 Load)) nil))\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &X:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &V:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &XV:0 Store))\n      (ListComp\n        (Tuple\n          (list (Subscript (Name &X:0 Load) (Name &i:6 Load) Load) (Subscript (Name &V:0 Load) (Name &i:6 Load) Load))\n          Load\n        )\n        (list (comprehension (Name &i:6 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Name &compression_dict_v:0 Store))\n      (DictComp\n        (Name &a:1 Load)\n        (BinOp (Name &ind:1 Load) Add (Constant i2 None))\n        (list\n          (comprehension\n            (Tuple (list (Name &ind:1 Store) (Name &a:1 Store)) Store)\n            (Call\n              (Name g_enumerate Load)\n              (list (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &V:0 Load)) nil)) nil))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &XV:0 Store))\n      (ListComp\n        (Tuple\n          (list\n            (Subscript (Subscript (Name &XV:0 Load) (Name &i:7 Load) Load) (Constant i0 None) Load)\n            (Subscript\n              (Name &compression_dict_v:0 Load)\n              (Subscript (Subscript (Name &XV:0 Load) (Name &i:7 Load) Load) (Constant i1 None) Load)\n              Load\n            )\n          )\n          Load\n        )\n        (list (comprehension (Name &i:7 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &XV:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (Assign\n      (list (Name &LEN:0 Store))\n      (BinOp (Call (Name g_len Load) (list (Name &compression_dict_v:0 Load)) nil) Add (Constant i3 None))\n      None\n    )\n    (Assign\n      (list (Name &BIT1:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &LEN:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (FunctionDef\n      &update1:0\n      (arguments nil (list (arg &v:2 None None) (arg &w:2 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &v:2 Load) (list LtE) (list (Name &LEN:0 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &BIT1:0 Load) (Name &v:2 Load) Store) Add (Name &w:2 Load))\n            (AugAssign (Name &v:2 Store) Add (BinOp (Name &v:2 Load) BitAnd (UnaryOp USub (Name &v:2 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getvalue1:0\n      (arguments nil (list (arg &v:3 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ANS:3 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &v:3 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &ANS:3 Store) Add (Subscript (Name &BIT1:0 Load) (Name &v:3 Load) Load))\n            (AugAssign (Name &v:3 Store) Sub (BinOp (Name &v:3 Load) BitAnd (UnaryOp USub (Name &v:3 Load))))\n          )\n          nil\n        )\n        (Return (Name &ANS:3 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &BIT2:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &LEN:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (FunctionDef\n      &update2:0\n      (arguments nil (list (arg &v:4 None None) (arg &w:4 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &v:4 Load) (list LtE) (list (Name &LEN:0 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &BIT2:0 Load) (Name &v:4 Load) Store) Add (Name &w:4 Load))\n            (AugAssign (Name &v:4 Store) Add (BinOp (Name &v:4 Load) BitAnd (UnaryOp USub (Name &v:4 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getvalue2:0\n      (arguments nil (list (arg &v:5 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ANS:5 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &v:5 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &ANS:5 Store) Add (Subscript (Name &BIT2:0 Load) (Name &v:5 Load) Load))\n            (AugAssign (Name &v:5 Store) Sub (BinOp (Name &v:5 Load) BitAnd (UnaryOp USub (Name &v:5 Load))))\n          )\n          nil\n        )\n        (Return (Name &ANS:5 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &ANS:0 Store)) (Constant i0 None) None)\n    (For\n      (Tuple (list (Name &x:0 Store) (Name &v:0 Store)) Store)\n      (Name &XV:0 Load)\n      (/seq\n        (AugAssign\n          (Name &ANS:0 Store)\n          Add\n          (BinOp\n            (BinOp\n              (Call (Name &getvalue2:0 Load) (list (Name &LEN:0 Load)) nil)\n              Sub\n              (Call (Name &getvalue2:0 Load) (list (BinOp (Name &v:0 Load) Sub (Constant i1 None))) nil)\n            )\n            Sub\n            (BinOp\n              (BinOp\n                (Call (Name &getvalue1:0 Load) (list (Name &LEN:0 Load)) nil)\n                Sub\n                (Call (Name &getvalue1:0 Load) (list (BinOp (Name &v:0 Load) Sub (Constant i1 None))) nil)\n              )\n              Mult\n              (Name &x:0 Load)\n            )\n          )\n        )\n        (Expr (Call (Name &update1:0 Load) (list (Name &v:0 Load) (Constant i1 None)) nil))\n        (Expr (Call (Name &update2:0 Load) (list (Name &v:0 Load) (Name &x:0 Load)) nil))\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ANS:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_Counter None)) i0)\n    (ImportFrom s_itertools (list (alias g_groupby None)) i0)\n    (Assign\n      (list (Name &rt:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &ri:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &rl:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_list Load)\n          (list\n            (Call\n              (Name g_map Load)\n              (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              nil\n            )\n          )\n          nil\n        )\n      )\n      None\n    )\n    (ClassDef\n      &Bit:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:3 Load) s_size Store)) (Name &n:3 Load) None)\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_tree Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None)))\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &sum:1\n          (arguments nil (list (arg &self:4 None None) (arg &i:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &s:4 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &i:4 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &s:4 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:4 Load) s_tree Load) (Name &i:4 Load) Load)\n                )\n                (AugAssign (Name &i:4 Store) Sub (BinOp (Name &i:4 Load) BitAnd (UnaryOp USub (Name &i:4 Load))))\n              )\n              nil\n            )\n            (Return (Name &s:4 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:1\n          (arguments\n            nil\n            (list (arg &self:5 None None) (arg &i:5 None None) (arg &val:5 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (While\n              (Compare (Name &i:5 Load) (list LtE) (list (Attribute (Name &self:5 Load) s_size Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:5 Load) s_tree Load) (Name &i:5 Load) Store)\n                  Add\n                  (Name &val:5 Load)\n                )\n                (AugAssign (Name &i:5 Store) Add (BinOp (Name &i:5 Load) BitAnd (UnaryOp USub (Name &i:5 Load))))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:2 Store)) (Call (Name &ri:0 Load) nil nil) None)\n        (Assign (list (Name &x:2 Store)) (Call (Name &rl:0 Load) nil nil) None)\n        (Assign (list (Name &v:2 Store)) (Call (Name &rl:0 Load) nil nil) None)\n        (Assign\n          (list (Name &pts:2 Store))\n          (ListComp\n            (Tuple (list (Name &xi:7 Load) (Name &vi:7 Load)) Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &xi:7 Store) (Name &vi:7 Store)) Store)\n                (Call (Name g_zip Load) (list (Name &x:2 Load) (Name &v:2 Load)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &pts:2 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &a:8 None None)) None nil nil None nil)\n                  (Tuple\n                    (list\n                      (Subscript (Name &a:8 Load) (Constant i1 None) Load)\n                      (Subscript (Name &a:8 Load) (Constant i0 None) Load)\n                    )\n                    Load\n                  )\n                )\n              )\n            )\n          )\n        )\n        (Assign\n          (list (Name &comprX:2 Store))\n          (DictComp\n            (Name &val:6 Load)\n            (BinOp (Name &i:6 Load) Add (Constant i1 None))\n            (list\n              (comprehension\n                (Tuple (list (Name &i:6 Store) (Name &val:6 Store)) Store)\n                (Call (Name g_enumerate Load) (list (Call (Name g_sorted Load) (list (Name &x:2 Load)) nil)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &bit_x:2 Store))\n          (Call (Name &Bit:0 Load) (list (BinOp (Name &n:2 Load) Add (Constant i1 None))) nil)\n          None\n        )\n        (Assign\n          (list (Name &bit_cnt:2 Store))\n          (Call (Name &Bit:0 Load) (list (BinOp (Name &n:2 Load) Add (Constant i1 None))) nil)\n          None\n        )\n        (Assign (list (Name &res:2 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (Name &xi:2 Store) (Name &vi:2 Store)) Store)\n          (Name &pts:2 Load)\n          (/seq\n            (Assign (list (Name &compr:2 Store)) (Subscript (Name &comprX:2 Load) (Name &xi:2 Load) Load) None)\n            (AugAssign\n              (Name &res:2 Store)\n              Add\n              (BinOp\n                (BinOp\n                  (Call (Attribute (Name &bit_cnt:2 Load) s_sum Load) (list (Name &compr:2 Load)) nil)\n                  Mult\n                  (Name &xi:2 Load)\n                )\n                Sub\n                (Call (Attribute (Name &bit_x:2 Load) s_sum Load) (list (Name &compr:2 Load)) nil)\n              )\n            )\n            (Expr (Call (Attribute (Name &bit_x:2 Load) s_add Load) (list (Name &compr:2 Load) (Name &xi:2 Load)) nil))\n            (Expr\n              (Call (Attribute (Name &bit_cnt:2 Load) s_add Load) (list (Name &compr:2 Load) (Constant i1 None)) nil)\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &res:2 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_collections (list (alias g_Counter None)) i0)\n    (FunctionDef\n      &input:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n              s_strip\n              Load\n            )\n            nil\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &list2d:0\n      (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (BinOp (List (list (Name &c:2 Load)) Load) Mult (Name &b:2 Load))\n            (list (comprehension (Name &i:13 Store) (Call (Name g_range Load) (list (Name &a:2 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &list3d:0\n      (arguments\n        nil\n        (list (arg &a:3 None None) (arg &b:3 None None) (arg &c:3 None None) (arg &d:3 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Return\n          (ListComp\n            (ListComp\n              (BinOp (List (list (Name &d:3 Load)) Load) Mult (Name &c:3 Load))\n              (list (comprehension (Name &j:16 Store) (Call (Name g_range Load) (list (Name &b:3 Load)) nil) nil i0))\n            )\n            (list (comprehension (Name &i:14 Store) (Call (Name g_range Load) (list (Name &a:3 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &list4d:0\n      (arguments\n        nil\n        (list (arg &a:4 None None) (arg &b:4 None None) (arg &c:4 None None) (arg &d:4 None None) (arg &e:4 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Return\n          (ListComp\n            (ListComp\n              (ListComp\n                (BinOp (List (list (Name &e:4 Load)) Load) Mult (Name &d:4 Load))\n                (list (comprehension (Name &j:19 Store) (Call (Name g_range Load) (list (Name &c:4 Load)) nil) nil i0))\n              )\n              (list (comprehension (Name &j:17 Store) (Call (Name g_range Load) (list (Name &b:4 Load)) nil) nil i0))\n            )\n            (list (comprehension (Name &i:15 Store) (Call (Name g_range Load) (list (Name &a:4 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ceil:0\n      (arguments nil (list (arg &x:5 None None) (arg &y:5 None None)) None nil nil None (list (Constant i1 None)))\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list (UnaryOp USub (BinOp (UnaryOp USub (Name &x:5 Load)) FloorDiv (Name &y:5 Load))))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &INT:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &MAP:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LIST:0\n      (arguments nil (list (arg &N:6 None None)) None nil nil None (list (Constant None None)))\n      (/seq\n        (Return\n          (IfExp\n            (Compare (Name &N:6 Load) (list Is) (list (Constant None None)))\n            (Call (Name g_list Load) (list (Call (Name &MAP:0 Load) nil nil)) nil)\n            (ListComp\n              (Call (Name &INT:0 Load) nil nil)\n              (list (comprehension (Name &i:18 Store) (Call (Name g_range Load) (list (Name &N:6 Load)) nil) nil i0))\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &Yes:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_Yes None)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &No:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_No None)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &YES:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &NO:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &INF:0 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None)\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (ClassDef\n      &BIT:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:8 None None) (arg &n:8 None None)) None nil nil None nil)\n          (/seq\n            (AugAssign (Name &n:8 Store) Add (Constant i1 None))\n            (Assign (list (Name &nv:8 Store)) (Constant i1 None) None)\n            (While\n              (Compare (Name &nv:8 Load) (list Lt) (list (Name &n:8 Load)))\n              (/seq (AugAssign (Name &nv:8 Store) Mult (Constant i2 None)))\n              nil\n            )\n            (Assign (list (Attribute (Name &self:8 Load) s_size Store)) (Name &nv:8 Load) None)\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_tree Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (Name &nv:8 Load))\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &sum:1\n          (arguments nil (list (arg &self:9 None None) (arg &i:9 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &s:9 Store)) (Constant i0 None) None)\n            (AugAssign (Name &i:9 Store) Add (Constant i1 None))\n            (While\n              (Compare (Name &i:9 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &s:9 Store)\n                  Add\n                  (Subscript\n                    (Attribute (Name &self:9 Load) s_tree Load)\n                    (BinOp (Name &i:9 Load) Sub (Constant i1 None))\n                    Load\n                  )\n                )\n                (AugAssign (Name &i:9 Store) Sub (BinOp (Name &i:9 Load) BitAnd (UnaryOp USub (Name &i:9 Load))))\n              )\n              nil\n            )\n            (Return (Name &s:9 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:1\n          (arguments\n            nil\n            (list (arg &self:10 None None) (arg &i:10 None None) (arg &x:10 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &i:10 Store) Add (Constant i1 None))\n            (While\n              (Compare (Name &i:10 Load) (list LtE) (list (Attribute (Name &self:10 Load) s_size Load)))\n              (/seq\n                (AugAssign\n                  (Subscript\n                    (Attribute (Name &self:10 Load) s_tree Load)\n                    (BinOp (Name &i:10 Load) Sub (Constant i1 None))\n                    Store\n                  )\n                  Add\n                  (Name &x:10 Load)\n                )\n                (AugAssign (Name &i:10 Store) Add (BinOp (Name &i:10 Load) BitAnd (UnaryOp USub (Name &i:10 Load))))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get:1\n          (arguments\n            nil\n            (list (arg &self:11 None None) (arg &l:11 None None) (arg &r:11 None None))\n            None\n            nil\n            nil\n            None\n            (list (Constant None None))\n          )\n          (/seq\n            (If\n              (Compare (Name &r:11 Load) (list Is) (list (Constant None None)))\n              (/seq (Assign (list (Name &r:11 Store)) (BinOp (Name &l:11 Load) Add (Constant i1 None)) None))\n              nil\n            )\n            (Assign (list (Name &res:11 Store)) (Constant i0 None) None)\n            (If\n              (Name &r:11 Load)\n              (/seq\n                (AugAssign\n                  (Name &res:11 Store)\n                  Add\n                  (Call\n                    (Attribute (Name &self:11 Load) s_sum Load)\n                    (list (BinOp (Name &r:11 Load) Sub (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (If\n              (Name &l:11 Load)\n              (/seq\n                (AugAssign\n                  (Name &res:11 Store)\n                  Sub\n                  (Call\n                    (Attribute (Name &self:11 Load) s_sum Load)\n                    (list (BinOp (Name &l:11 Load) Sub (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (Return (Name &res:11 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:1\n          (arguments\n            nil\n            (list (arg &self:12 None None) (arg &i:12 None None) (arg &x:12 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &self:12 Load) s_add Load)\n                (list\n                  (Name &i:12 Load)\n                  (BinOp\n                    (Name &x:12 Load)\n                    Sub\n                    (Call (Attribute (Name &self:12 Load) s_get Load) (list (Name &i:12 Load)) nil)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &compress:0\n      (arguments nil (list (arg &S:7 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &zipped:7 Store) (Name &unzipped:7 Store)) Store))\n          (Tuple (list (Dict nil nil) (Dict nil nil)) Load)\n          None\n        )\n        (For\n          (Tuple (list (Name &i:7 Store) (Name &a:7 Store)) Store)\n          (Call (Name g_enumerate Load) (list (Call (Name g_sorted Load) (list (Name &S:7 Load)) nil)) nil)\n          (/seq\n            (Assign (list (Subscript (Name &zipped:7 Load) (Name &a:7 Load) Store)) (Name &i:7 Load) None)\n            (Assign (list (Subscript (Name &unzipped:7 Load) (Name &i:7 Load) Store)) (Name &a:7 Load) None)\n          )\n          nil\n          None\n        )\n        (Return (Tuple (list (Name &zipped:7 Load) (Name &unzipped:7 Load)) Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &N:0 Store)) (Call (Name &INT:0 Load) nil nil) None)\n    (Assign (list (Name &A:0 Store)) (Call (Name &LIST:0 Load) nil nil) None)\n    (Assign (list (Name &B:0 Store)) (Call (Name &LIST:0 Load) nil nil) None)\n    (Assign\n      (list (Name &BA:0 Store))\n      (Call (Name g_list Load) (list (Call (Name g_zip Load) (list (Name &B:0 Load) (Name &A:0 Load)) nil)) nil)\n      None\n    )\n    (Expr (Call (Attribute (Name &BA:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Tuple (list (Name &zipped:0 Store) (Name &_:0 Store)) Store))\n      (Call (Name &compress:0 Load) (list (Call (Name g_set Load) (list (Name &A:0 Load)) nil)) nil)\n      None\n    )\n    (Assign (list (Name &bit1:0 Store)) (Call (Name &BIT:0 Load) (list (Name &N:0 Load)) nil) None)\n    (Assign (list (Name &bit2:0 Store)) (Call (Name &BIT:0 Load) (list (Name &N:0 Load)) nil) None)\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Tuple (list (Name &b:0 Store) (Name &a:0 Store)) Store)\n      (Name &BA:0 Load)\n      (/seq\n        (Assign\n          (list (Name &sm:0 Store))\n          (Call\n            (Attribute (Name &bit1:0 Load) s_sum Load)\n            (list (Subscript (Name &zipped:0 Load) (Name &a:0 Load) Load))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &cnt:0 Store))\n          (Call\n            (Attribute (Name &bit2:0 Load) s_sum Load)\n            (list (Subscript (Name &zipped:0 Load) (Name &a:0 Load) Load))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp (BinOp (Name &cnt:0 Load) Mult (Name &a:0 Load)) Sub (Name &sm:0 Load))\n        )\n        (Expr\n          (Call\n            (Attribute (Name &bit1:0 Load) s_add Load)\n            (list (Subscript (Name &zipped:0 Load) (Name &a:0 Load) Load) (Name &a:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &bit2:0 Load) s_add Load)\n            (list (Subscript (Name &zipped:0 Load) (Name &a:0 Load) Load) (Constant i1 None))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ClassDef\n      &Fenwick:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &size:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_tree Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (Name &size:2 Load))\n              None\n            )\n            (Assign (list (Attribute (Name &self:2 Load) s_size Store)) (Name &size:2 Load) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:1\n          (arguments\n            nil\n            (list (arg &self:3 None None) (arg &idx:3 None None) (arg &delta:3 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (While\n              (Compare (Name &idx:3 Load) (list Lt) (list (Attribute (Name &self:3 Load) s_size Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:3 Load) s_tree Load) (Name &idx:3 Load) Store)\n                  Add\n                  (Name &delta:3 Load)\n                )\n                (Assign\n                  (list (Name &idx:3 Store))\n                  (BinOp (BinOp (Name &idx:3 Load) Add (Constant i1 None)) BitOr (Name &idx:3 Load))\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &getp:1\n          (arguments nil (list (arg &self:4 None None) (arg &right:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &res:4 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &right:4 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (AugAssign\n                  (Name &res:4 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:4 Load) s_tree Load) (Name &right:4 Load) Load)\n                )\n                (Assign\n                  (list (Name &right:4 Store))\n                  (BinOp\n                    (BinOp (BinOp (Name &right:4 Load) Add (Constant i1 None)) BitAnd (Name &right:4 Load))\n                    Sub\n                    (Constant i1 None)\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &res:4 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get:1\n          (arguments\n            nil\n            (list (arg &self:5 None None) (arg &left:5 None None) (arg &right:5 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &left:5 Load) (list Gt) (list (Name &right:5 Load)))\n              (/seq (Return (Constant i0 None)))\n              nil\n            )\n            (Return\n              (BinOp\n                (Call (Attribute (Name &self:5 Load) s_getp Load) (list (Name &right:5 Load)) nil)\n                Sub\n                (Call\n                  (Attribute (Name &self:5 Load) s_getp Load)\n                  (list (BinOp (Name &left:5 Load) Sub (Constant i1 None)))\n                  nil\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &X:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &V:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &XV:0 Store))\n      (Call (Name g_list Load) (list (Call (Name g_zip Load) (list (Name &X:0 Load) (Name &V:0 Load)) nil)) nil)\n      None\n    )\n    (Expr (Call (Attribute (Name &XV:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &order:0 Store))\n      (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:0 Load)) nil)) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &order:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &i:6 None None)) None nil nil None nil)\n              (Subscript (Subscript (Name &XV:0 Load) (Name &i:6 Load) Load) (Constant i1 None) Load)\n            )\n          )\n        )\n      )\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp\n            (Subscript\n              (Subscript\n                (Name &XV:0 Load)\n                (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Sub (Name &i:0 Load))\n                Load\n              )\n              (Constant i0 None)\n              Load\n            )\n            Mult\n            (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Sub (BinOp (Constant i2 None) Mult (Name &i:0 Load)))\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &fw:0 Store)) (Call (Name &Fenwick:0 Load) (list (Name &n:0 Load)) nil) None)\n    (Assign (list (Name &fwcount:0 Store)) (Call (Name &Fenwick:0 Load) (list (Name &n:0 Load)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Name &order:0 Load)\n      (/seq\n        (AugAssign\n          (Name &ans:0 Store)\n          Sub\n          (BinOp\n            (Call\n              (Attribute (Name &fw:0 Load) s_get Load)\n              (list (BinOp (Name &i:0 Load) Add (Constant i1 None)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n              nil\n            )\n            Sub\n            (BinOp\n              (Call\n                (Attribute (Name &fwcount:0 Load) s_get Load)\n                (list (BinOp (Name &i:0 Load) Add (Constant i1 None)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                nil\n              )\n              Mult\n              (Subscript (Subscript (Name &XV:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &fw:0 Load) s_add Load)\n            (list\n              (Name &i:0 Load)\n              (Subscript (Subscript (Name &XV:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n            )\n            nil\n          )\n        )\n        (Expr (Call (Attribute (Name &fwcount:0 Load) s_add Load) (list (Name &i:0 Load) (Constant i1 None)) nil))\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &add:0\n      (arguments\n        nil\n        (list\n          (arg &sms:1 None None)\n          (arg &cns:1 None None)\n          (arg &n:1 None None)\n          (arg &v:1 None None)\n          (arg &x:1 None None)\n        )\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (While\n          (Compare (Name &v:1 Load) (list Lt) (list (Name &n:1 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &sms:1 Load) (Name &v:1 Load) Store) Add (Name &x:1 Load))\n            (AugAssign (Subscript (Name &cns:1 Load) (Name &v:1 Load) Store) Add (Constant i1 None))\n            (AugAssign\n              (Name &v:1 Store)\n              Add\n              (BinOp (Name &v:1 Load) BitAnd (UnaryOp Invert (BinOp (Name &v:1 Load) Sub (Constant i1 None))))\n            )\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sumtoo:0\n      (arguments nil (list (arg &sms:2 None None) (arg &cns:2 None None) (arg &v:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &sm:2 Store)) (Constant i0 None) None)\n        (Assign (list (Name &cn:2 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &v:2 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &sm:2 Store) Add (Subscript (Name &sms:2 Load) (Name &v:2 Load) Load))\n            (AugAssign (Name &cn:2 Store) Add (Subscript (Name &cns:2 Load) (Name &v:2 Load) Load))\n            (AugAssign\n              (Name &v:2 Store)\n              Sub\n              (BinOp (Name &v:2 Load) BitAnd (UnaryOp Invert (BinOp (Name &v:2 Load) Sub (Constant i1 None))))\n            )\n          )\n          nil\n        )\n        (Return (Tuple (list (Name &sm:2 Load) (Name &cn:2 Load)) Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &go:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:3 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &x:3 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &v:3 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &sv:3 Store))\n          (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &v:3 Load)) nil)) nil)\n          None\n        )\n        (Assign\n          (list (Name &sv:3 Store))\n          (DictComp\n            (Name &v:4 Load)\n            (Name &k:4 Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &k:4 Store) (Name &v:4 Store)) Store)\n                (Call (Name g_enumerate Load) (list (Name &sv:3 Load) (Constant i1 None)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &v:3 Store))\n          (ListComp\n            (Subscript (Name &sv:3 Load) (Name &v:5 Load) Load)\n            (list (comprehension (Name &v:5 Store) (Name &v:3 Load) nil i0))\n          )\n          None\n        )\n        (Assign\n          (list (Name &a:3 Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (GeneratorExp\n                (Tuple (list (Name &xx:6 Load) (Name &vv:6 Load)) Load)\n                (list\n                  (comprehension\n                    (Tuple (list (Name &xx:6 Store) (Name &vv:6 Store)) Store)\n                    (Call (Name g_zip Load) (list (Name &x:3 Load) (Name &v:3 Load)) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n            )\n            (list (keyword s_reverse (Constant True None)))\n          )\n          None\n        )\n        (Assign\n          (list (Name &len_sv:3 Store))\n          (BinOp (Call (Name g_len Load) (list (Name &sv:3 Load)) nil) Add (Constant i1 None))\n          None\n        )\n        (Assign\n          (list (Name &sms:3 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (Name &len_sv:3 Load))\n          None\n        )\n        (Assign\n          (list (Name &cns:3 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (Name &len_sv:3 Load))\n          None\n        )\n        (Assign (list (Name &res:3 Store)) (Constant i0 None) None)\n        (Assign (list (Name &sx:3 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (Name &cnt:3 Store) (Tuple (list (Name &xx:3 Store) (Name &vv:3 Store)) Store)) Store)\n          (Call (Name g_enumerate Load) (list (Name &a:3 Load)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &sm:3 Store) (Name &cn:3 Store)) Store))\n              (Call\n                (Name &sumtoo:0 Load)\n                (list (Name &sms:3 Load) (Name &cns:3 Load) (BinOp (Name &vv:3 Load) Sub (Constant i1 None)))\n                nil\n              )\n              None\n            )\n            (Assign\n              (list (Tuple (list (Name &sm:3 Store) (Name &cn:3 Store)) Store))\n              (Tuple\n                (list (BinOp (Name &sx:3 Load) Sub (Name &sm:3 Load)) (BinOp (Name &cnt:3 Load) Sub (Name &cn:3 Load)))\n                Load\n              )\n              None\n            )\n            (AugAssign\n              (Name &res:3 Store)\n              Add\n              (BinOp (Name &sm:3 Load) Sub (BinOp (Name &xx:3 Load) Mult (Name &cn:3 Load)))\n            )\n            (Expr\n              (Call\n                (Name &add:0 Load)\n                (list (Name &sms:3 Load) (Name &cns:3 Load) (Name &len_sv:3 Load) (Name &vv:3 Load) (Name &xx:3 Load))\n                nil\n              )\n            )\n            (AugAssign (Name &sx:3 Store) Add (Name &xx:3 Load))\n          )\n          nil\n          None\n        )\n        (Return (Name &res:3 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Call (Name &go:0 Load) nil nil)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &int1:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:4 None None)) None nil nil None nil)\n        (BinOp (Call (Name g_int Load) (list (Name &x:4 Load)) nil) Sub (Constant i1 None))\n      )\n      None\n    )\n    (Assign\n      (list (Name &p2D:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:5 None None)) None nil nil None nil)\n        (Call\n          (Name g_print Load)\n          (list (Starred (Name &x:5 Load) Load))\n          (list (keyword s_sep (Constant s-WzEwXQ== None)))\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &II:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &MI:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute\n                  (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LI:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Name g_int Load)\n                  (Call\n                    (Attribute\n                      (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                      s_split\n                      Load\n                    )\n                    nil\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LLI:0\n      (arguments nil (list (arg &rows_number:2 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name &LI:0 Load) nil nil)\n            (list\n              (comprehension (Name &_:10 Store) (Call (Name g_range Load) (list (Name &rows_number:2 Load)) nil) nil i0)\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &SI:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Subscript\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            (Slice None (UnaryOp USub (Constant i1 None)) None)\n            Load\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (ClassDef\n      &BitSum:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:6 None None) (arg &n:6 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:6 Load) s_n Store))\n              (BinOp (Name &n:6 Load) Add (Constant i3 None))\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:6 Load) s_table Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp (Attribute (Name &self:6 Load) s_n Load) Add (Constant i1 None))\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:1\n          (arguments nil (list (arg &self:7 None None) (arg &i:7 None None) (arg &x:7 None None)) None nil nil None nil)\n          (/seq\n            (AugAssign (Name &i:7 Store) Add (Constant i1 None))\n            (While\n              (Compare (Name &i:7 Load) (list LtE) (list (Attribute (Name &self:7 Load) s_n Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:7 Load) s_table Load) (Name &i:7 Load) Store)\n                  Add\n                  (Name &x:7 Load)\n                )\n                (AugAssign (Name &i:7 Store) Add (BinOp (Name &i:7 Load) BitAnd (UnaryOp USub (Name &i:7 Load))))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &sum:1\n          (arguments nil (list (arg &self:8 None None) (arg &i:8 None None)) None nil nil None nil)\n          (/seq\n            (AugAssign (Name &i:8 Store) Add (Constant i1 None))\n            (Assign (list (Name &res:8 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &i:8 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &res:8 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:8 Load) s_table Load) (Name &i:8 Load) Load)\n                )\n                (AugAssign (Name &i:8 Store) Sub (BinOp (Name &i:8 Load) BitAnd (UnaryOp USub (Name &i:8 Load))))\n              )\n              nil\n            )\n            (Return (Name &res:8 Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:3 Store)) (Call (Name &II:0 Load) nil nil) None)\n        (Assign (list (Name &xx:3 Store)) (Call (Name &LI:0 Load) nil nil) None)\n        (Assign (list (Name &vv:3 Store)) (Call (Name &LI:0 Load) nil nil) None)\n        (Assign\n          (list (Name &itox:3 Store))\n          (Call\n            (Name g_list Load)\n            (list (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &xx:3 Load)) nil)) nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &xtoi:3 Store))\n          (DictComp\n            (Name &x:9 Load)\n            (Name &i:9 Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &i:9 Store) (Name &x:9 Store)) Store)\n                (Call (Name g_enumerate Load) (list (Name &itox:3 Load)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &vx:3 Store))\n          (ListComp\n            (Tuple (list (Name &v:11 Load) (Name &x:11 Load)) Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &x:11 Store) (Name &v:11 Store)) Store)\n                (Call (Name g_zip Load) (list (Name &xx:3 Load) (Name &vv:3 Load)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &cnt:3 Store))\n          (Call (Name &BitSum:0 Load) (list (Call (Name g_len Load) (list (Name &itox:3 Load)) nil)) nil)\n          None\n        )\n        (Assign\n          (list (Name &val:3 Store))\n          (Call (Name &BitSum:0 Load) (list (Call (Name g_len Load) (list (Name &itox:3 Load)) nil)) nil)\n          None\n        )\n        (Assign (list (Name &ans:3 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (Name &v:3 Store) (Name &x:3 Store)) Store)\n          (Call (Name g_sorted Load) (list (Name &vx:3 Load)) nil)\n          (/seq\n            (Assign (list (Name &i:3 Store)) (Subscript (Name &xtoi:3 Load) (Name &x:3 Load) Load) None)\n            (If\n              (Name &i:3 Load)\n              (/seq\n                (AugAssign\n                  (Name &ans:3 Store)\n                  Add\n                  (BinOp\n                    (BinOp\n                      (Call\n                        (Attribute (Name &cnt:3 Load) s_sum Load)\n                        (list (BinOp (Name &i:3 Load) Sub (Constant i1 None)))\n                        nil\n                      )\n                      Mult\n                      (Name &x:3 Load)\n                    )\n                    Sub\n                    (Call\n                      (Attribute (Name &val:3 Load) s_sum Load)\n                      (list (BinOp (Name &i:3 Load) Sub (Constant i1 None)))\n                      nil\n                    )\n                  )\n                )\n              )\n              nil\n            )\n            (Expr (Call (Attribute (Name &cnt:3 Load) s_add Load) (list (Name &i:3 Load) (Constant i1 None)) nil))\n            (Expr (Call (Attribute (Name &val:3 Load) s_add Load) (list (Name &i:3 Load) (Name &x:3 Load)) nil))\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:3 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (FunctionDef\n      &getsum:0\n      (arguments nil (list (arg &BITTree:1 None None) (arg &i:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:1 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &i:1 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &s:1 Store) Add (Subscript (Name &BITTree:1 Load) (Name &i:1 Load) Load))\n            (AugAssign (Name &i:1 Store) Sub (BinOp (Name &i:1 Load) BitAnd (UnaryOp USub (Name &i:1 Load))))\n          )\n          nil\n        )\n        (Return (Name &s:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &updatebit:0\n      (arguments nil (list (arg &BITTree:2 None None) (arg &i:2 None None) (arg &v:2 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &i:2 Load) (list LtE) (list (Call (Name g_len Load) (list (Name &BITTree:2 Load)) nil)))\n          (/seq\n            (AugAssign (Subscript (Name &BITTree:2 Load) (Name &i:2 Load) Store) Add (Name &v:2 Load))\n            (AugAssign (Name &i:2 Store) Add (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:3 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:3 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            (list (Compare (Name &i:3 Load) (list NotEq) (list (Constant s-WzEwXQ== None))))\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:4 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:4 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            (list (Compare (Name &i:4 Load) (list NotEq) (list (Constant s-WzEwXQ== None))))\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &v:0 Load) (Name &i:0 Load) Store))\n          (List (list (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Name &i:0 Load)) Load)\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &v:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &pos:0 Store)) (Call (Name g_dict Load) nil nil) None)\n    (Assign\n      (list (Tuple (list (Name &store:0 Store) (Name &prev:0 Store)) Store))\n      (Tuple\n        (list\n          (Constant i1 None)\n          (Subscript (Subscript (Name &v:0 Load) (Constant i0 None) Load) (Constant i0 None) Load)\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare\n                (Name &prev:0 Load)\n                (list Eq)\n                (list (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load))\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &pos:0 Load)\n                      (Subscript\n                        (Name &x:0 Load)\n                        (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n                        Load\n                      )\n                      Store\n                    )\n                  )\n                  (Name &store:0 Load)\n                  None\n                )\n              )\n              (/seq\n                (AugAssign (Name &store:0 Store) Add (Constant i1 None))\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &pos:0 Load)\n                      (Subscript\n                        (Name &x:0 Load)\n                        (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n                        Load\n                      )\n                      Store\n                    )\n                  )\n                  (Name &store:0 Load)\n                  None\n                )\n                (Assign\n                  (list (Name &prev:0 Store))\n                  (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n                  None\n                )\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Name &pos:0 Load)\n                  (Subscript\n                    (Name &x:0 Load)\n                    (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n                    Load\n                  )\n                  Store\n                )\n              )\n              (Name &store:0 Load)\n              None\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &sorte:0 Store))\n      (Call (Name g_sorted Load) (list (Call (Attribute (Name &pos:0 Load) s_keys Load) nil nil)) nil)\n      None\n    )\n    (Assign\n      (list (Name &bit:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i10 None)))\n      None\n    )\n    (Assign\n      (list (Name &ind:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i10 None)))\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &ans:0 Store) (Name &count:0 Store) (Name &diff:0 Store)) Store))\n      (Tuple (list (Constant i0 None) (Constant i0 None) (Constant i0 None)) Load)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &sorte:0 Load)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Name &count:0 Store))\n          (Call\n            (Name &getsum:0 Load)\n            (list\n              (Name &bit:0 Load)\n              (Subscript (Name &pos:0 Load) (Subscript (Name &sorte:0 Load) (Name &i:0 Load) Load) Load)\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &diff:0 Store))\n          (Call\n            (Name &getsum:0 Load)\n            (list\n              (Name &ind:0 Load)\n              (Subscript (Name &pos:0 Load) (Subscript (Name &sorte:0 Load) (Name &i:0 Load) Load) Load)\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp\n            (BinOp (Name &count:0 Load) Mult (Subscript (Name &sorte:0 Load) (Name &i:0 Load) Load))\n            Sub\n            (Name &diff:0 Load)\n          )\n        )\n        (Expr\n          (Call\n            (Name &updatebit:0 Load)\n            (list\n              (Name &bit:0 Load)\n              (Subscript (Name &pos:0 Load) (Subscript (Name &sorte:0 Load) (Name &i:0 Load) Load) Load)\n              (Constant i1 None)\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name &updatebit:0 Load)\n            (list\n              (Name &ind:0 Load)\n              (Subscript (Name &pos:0 Load) (Subscript (Name &sorte:0 Load) (Name &i:0 Load) Load) Load)\n              (Subscript (Name &sorte:0 Load) (Name &i:0 Load) Load)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &ans:0 Load)) nil)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_bisect None)))\n    (ClassDef\n      &Fenwick:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_data Store))\n              (ListComp\n                (List (list (Constant i0 None) (Constant i0 None)) Load)\n                (list (comprehension (Name &i:5 Store) (Call (Name g_range Load) (list (Name &n:2 Load)) nil) nil i0))\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:1\n          (arguments\n            nil\n            (list (arg &self:3 None None) (arg &pos:3 None None) (arg &dist:3 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (While\n              (Compare\n                (Name &pos:3 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:3 Load) s_data Load)) nil))\n              )\n              (/seq\n                (AugAssign\n                  (Subscript\n                    (Subscript (Attribute (Name &self:3 Load) s_data Load) (Name &pos:3 Load) Load)\n                    (Constant i0 None)\n                    Store\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n                (AugAssign\n                  (Subscript\n                    (Subscript (Attribute (Name &self:3 Load) s_data Load) (Name &pos:3 Load) Load)\n                    (Constant i1 None)\n                    Store\n                  )\n                  Add\n                  (Name &dist:3 Load)\n                )\n                (Assign\n                  (list (Name &pos:3 Store))\n                  (BinOp (Name &pos:3 Load) BitOr (BinOp (Name &pos:3 Load) Add (Constant i1 None)))\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:1\n          (arguments nil (list (arg &self:4 None None) (arg &pos:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &ans:4 Store)) (List (list (Constant i0 None) (Constant i0 None)) Load) None)\n            (While\n              (Compare (Name &pos:4 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Subscript (Name &ans:4 Load) (Constant i0 None) Store)\n                  Add\n                  (Subscript\n                    (Subscript\n                      (Attribute (Name &self:4 Load) s_data Load)\n                      (BinOp (Name &pos:4 Load) Sub (Constant i1 None))\n                      Load\n                    )\n                    (Constant i0 None)\n                    Load\n                  )\n                )\n                (AugAssign\n                  (Subscript (Name &ans:4 Load) (Constant i1 None) Store)\n                  Add\n                  (Subscript\n                    (Subscript\n                      (Attribute (Name &self:4 Load) s_data Load)\n                      (BinOp (Name &pos:4 Load) Sub (Constant i1 None))\n                      Load\n                    )\n                    (Constant i1 None)\n                    Load\n                  )\n                )\n                (Assign\n                  (list (Name &pos:4 Store))\n                  (BinOp (Name &pos:4 Load) BitAnd (BinOp (Name &pos:4 Load) Sub (Constant i1 None)))\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &ans:4 Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &rints:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &x:0 Store)) (Call (Name &rints:0 Load) nil nil) None)\n    (Assign (list (Name &v:0 Store)) (Call (Name &rints:0 Load) nil nil) None)\n    (Assign\n      (list (Name &ascDist:0 Store))\n      (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:0 Load)) nil)) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &ascDist:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &i:6 None None)) None nil nil None nil)\n              (Subscript (Name &x:0 Load) (Name &i:6 Load) Load)\n            )\n          )\n        )\n      )\n    )\n    (Assign\n      (list (Name &uniqueSpeeds:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Name &v:0 Load)) nil)) nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &tree:0 Store))\n      (Call (Name &Fenwick:0 Load) (list (Call (Name g_len Load) (list (Name &uniqueSpeeds:0 Load)) nil)) nil)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &ascDist:0 Load)\n      (/seq\n        (Assign\n          (list (Name &speedId:0 Store))\n          (Call\n            (Attribute (Name g_bisect Load) s_bisect_left Load)\n            (list (Name &uniqueSpeeds:0 Load) (Subscript (Name &v:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (Name &count:0 Store) (Name &dsum:0 Store)) Store))\n          (Call\n            (Attribute (Name &tree:0 Load) s_query Load)\n            (list (BinOp (Name &speedId:0 Load) Add (Constant i1 None)))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp\n            (BinOp (Name &count:0 Load) Mult (Subscript (Name &x:0 Load) (Name &i:0 Load) Load))\n            Sub\n            (Name &dsum:0 Load)\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &tree:0 Load) s_update Load)\n            (list (Name &speedId:0 Load) (Subscript (Name &x:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Expr\n      (Constant s-WzMyLCA3MiwgMTAxLCAxMjEsIDMyLCAxMTUsIDExNiwgOTcsIDEwOCwgMTA3LCAxMDEsIDExNCwgMzIsIDU4LCA0MSwgMzJd None)\n    )\n    (Assign (list (Name &INF:0 Store)) (BinOp (Constant i10 None) Pow (Constant i10 None)) None)\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Expr\n          (Constant\n            s-WzMyLCA2NywgMTExLCAxMTEsIDEwNywgMzIsIDEyMSwgMTExLCAxMTcsIDExNCwgMzIsIDEwMCwgMTA1LCAxMTUsIDEwNCwgMzIsIDEwNCwgMTAxLCAxMTQsIDEwMSwgMzMsIDMyXQ==\n            None\n          )\n        )\n        (Assign (list (Name &n:2 Store)) (Call (Name &get_int:0 Load) nil nil) None)\n        (Assign (list (Name &points:2 Store)) (Call (Name &get_list:0 Load) nil nil) None)\n        (Assign (list (Name &speeds:2 Store)) (Call (Name &get_list:0 Load) nil nil) None)\n        (Assign (list (Name &point_indexes:2 Store)) (Call (Name g_dict Load) nil nil) None)\n        (Assign (list (Name &sorted_indexes:2 Store)) (Call (Name g_dict Load) nil nil) None)\n        (For\n          (Tuple (list (Name &i:2 Store) (Name &ele:2 Store)) Store)\n          (Call (Name g_enumerate Load) (list (Name &points:2 Load)) nil)\n          (/seq (Assign (list (Subscript (Name &point_indexes:2 Load) (Name &ele:2 Load) Store)) (Name &i:2 Load) None))\n          nil\n          None\n        )\n        (For\n          (Tuple (list (Name &i:2 Store) (Name &ele:2 Store)) Store)\n          (Call (Name g_enumerate Load) (list (Call (Name g_sorted Load) (list (Name &points:2 Load)) nil)) nil)\n          (/seq\n            (Assign (list (Subscript (Name &sorted_indexes:2 Load) (Name &ele:2 Load) Store)) (Name &i:2 Load) None)\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &points:2 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n        (Expr\n          (Call\n            (Attribute (Name &points:2 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:7 None None)) None nil nil None nil)\n                  (Subscript (Name &speeds:2 Load) (Subscript (Name &point_indexes:2 Load) (Name &x:7 Load) Load) Load)\n                )\n              )\n              (keyword s_reverse (Constant True None))\n            )\n          )\n        )\n        (Assign (list (Name &stree:2 Store)) (Call (Name &SegTreeSum:0 Load) (list (Name &n:2 Load)) nil) None)\n        (Assign (list (Name &scount:2 Store)) (Call (Name &SegTreeSum:0 Load) (list (Name &n:2 Load)) nil) None)\n        (Assign (list (Name &res:2 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:2 Store)\n          (Name &points:2 Load)\n          (/seq\n            (Assign (list (Name &index:2 Store)) (Subscript (Name &sorted_indexes:2 Load) (Name &i:2 Load) Load) None)\n            (AugAssign\n              (Name &res:2 Store)\n              Add\n              (BinOp\n                (Call\n                  (Attribute (Name &stree:2 Load) s_query Load)\n                  (list (Name &index:2 Load) (BinOp (Name &n:2 Load) Sub (Constant i1 None)))\n                  nil\n                )\n                Sub\n                (BinOp\n                  (Name &i:2 Load)\n                  Mult\n                  (Call\n                    (Attribute (Name &scount:2 Load) s_query Load)\n                    (list (Name &index:2 Load) (BinOp (Name &n:2 Load) Sub (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n            )\n            (Expr\n              (Call (Attribute (Name &stree:2 Load) s_modify Load) (list (Name &index:2 Load) (Name &i:2 Load)) nil)\n            )\n            (Expr\n              (Call (Attribute (Name &scount:2 Load) s_modify Load) (list (Name &index:2 Load) (Constant i1 None)) nil)\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &res:2 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (ClassDef\n      &SegTreeSum:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &size:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_n Store))\n              (BinOp (Constant i1 None) LShift (Call (Attribute (Name &size:3 Load) s_bit_length Load) nil nil))\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_li Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp (Attribute (Name &self:3 Load) s_n Load) LShift (Constant i1 None))\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &modify:1\n          (arguments\n            nil\n            (list (arg &self:4 None None) (arg &index:4 None None) (arg &ele:4 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &index:4 Store) Add (Attribute (Name &self:4 Load) s_n Load))\n            (Assign\n              (list (Subscript (Attribute (Name &self:4 Load) s_li Load) (Name &index:4 Load) Store))\n              (Name &ele:4 Load)\n              None\n            )\n            (While\n              (Compare (Name &index:4 Load) (list Gt) (list (Constant i1 None)))\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Attribute (Name &self:4 Load) s_li Load)\n                      (BinOp (Name &index:4 Load) RShift (Constant i1 None))\n                      Store\n                    )\n                  )\n                  (BinOp\n                    (Subscript (Attribute (Name &self:4 Load) s_li Load) (Name &index:4 Load) Load)\n                    Add\n                    (Subscript\n                      (Attribute (Name &self:4 Load) s_li Load)\n                      (BinOp (Name &index:4 Load) BitXor (Constant i1 None))\n                      Load\n                    )\n                  )\n                  None\n                )\n                (AugAssign (Name &index:4 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get:1\n          (arguments nil (list (arg &self:5 None None) (arg &index:5 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:5 Load) s_li Load)\n                (BinOp (Attribute (Name &self:5 Load) s_n Load) Add (Name &index:5 Load))\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:1\n          (arguments nil (list (arg &self:6 None None) (arg &l:6 None None) (arg &r:6 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &res:6 Store)) (Constant i0 None) None)\n            (Assign\n              (list (Tuple (list (Name &l:6 Store) (Name &r:6 Store)) Store))\n              (Tuple\n                (list\n                  (BinOp (Name &l:6 Load) Add (Attribute (Name &self:6 Load) s_n Load))\n                  (BinOp (Name &r:6 Load) Add (Attribute (Name &self:6 Load) s_n Load))\n                )\n                Load\n              )\n              None\n            )\n            (While\n              (Compare (Name &l:6 Load) (list LtE) (list (Name &r:6 Load)))\n              (/seq\n                (If\n                  (Compare (BinOp (Name &l:6 Load) BitAnd (Constant i1 None)) (list Eq) (list (Constant i1 None)))\n                  (/seq\n                    (AugAssign\n                      (Name &res:6 Store)\n                      Add\n                      (Subscript (Attribute (Name &self:6 Load) s_li Load) (Name &l:6 Load) Load)\n                    )\n                  )\n                  nil\n                )\n                (If\n                  (Compare (BinOp (Name &r:6 Load) BitAnd (Constant i1 None)) (list NotEq) (list (Constant i1 None)))\n                  (/seq\n                    (AugAssign\n                      (Name &res:6 Store)\n                      Add\n                      (Subscript (Attribute (Name &self:6 Load) s_li Load) (Name &r:6 Load) Load)\n                    )\n                  )\n                  nil\n                )\n                (Assign\n                  (list (Name &l:6 Store))\n                  (BinOp (BinOp (Name &l:6 Load) Add (Constant i1 None)) RShift (Constant i1 None))\n                  None\n                )\n                (Assign\n                  (list (Name &r:6 Store))\n                  (BinOp (BinOp (Name &r:6 Load) Sub (Constant i1 None)) RShift (Constant i1 None))\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &res:6 Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Expr\n      (Constant\n        s-WzMyLCA4MCwgMTIxLCAxMTYsIDEwNCwgMTExLCAxMTAsIDEwNSwgMTE1LCAxMTYsIDk3LCAzMiwgMTAyLCA3NiwgMTA1LCAxMTYsIDEwMSwgMzIsIDQ5LCA0NiwgNDksIDMyXQ==\n        None\n      )\n    )\n    (Import (list (alias &sys:0 None)))\n    (ImportFrom s_collections (list (alias &defaultdict:0 None) (alias &Counter:0 None) (alias &deque:0 None)) i0)\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute\n        (Call\n          (Name g_iter Load)\n          (list\n            (Call\n              (Attribute\n                (Call\n                  (Attribute\n                    (Call\n                      (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_read Load)\n                      nil\n                      nil\n                    )\n                    s_decode\n                    Load\n                  )\n                  nil\n                  nil\n                )\n                s_splitlines\n                Load\n              )\n              nil\n              nil\n            )\n          )\n          nil\n        )\n        s___next__\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &out:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &get_int:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &get_list:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_list Load)\n          (list\n            (Call\n              (Name g_map Load)\n              (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n              nil\n            )\n          )\n          nil\n        )\n      )\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Starred (Name &out:0 Load) Load))\n        (list (keyword s_sep (Constant s-WzEwXQ== None)))\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (ImportFrom s_heapq (list (alias &heappush:0 None) (alias &heappop:0 None) (alias &heapify:0 None)) i0)\n    (FunctionDef\n      &query:0\n      (arguments nil (list (arg &f:1 None None) (arg &i:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ret:1 Store)) (List (list (Constant i0 None) (Constant i0 None)) Load) None)\n        (While\n          (Name &i:1 Load)\n          (/seq\n            (AugAssign\n              (Subscript (Name &ret:1 Load) (Constant i0 None) Store)\n              Add\n              (Subscript (Subscript (Name &f:1 Load) (Name &i:1 Load) Load) (Constant i0 None) Load)\n            )\n            (AugAssign\n              (Subscript (Name &ret:1 Load) (Constant i1 None) Store)\n              Add\n              (Subscript (Subscript (Name &f:1 Load) (Name &i:1 Load) Load) (Constant i1 None) Load)\n            )\n            (AugAssign (Name &i:1 Store) Sub (BinOp (Name &i:1 Load) BitAnd (UnaryOp USub (Name &i:1 Load))))\n          )\n          nil\n        )\n        (Return (Name &ret:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &update:0\n      (arguments nil (list (arg &f:2 None None) (arg &i:2 None None) (arg &d:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (Name &f:2 Load)) nil) None)\n        (While\n          (Compare (Name &i:2 Load) (list Lt) (list (Name &n:2 Load)))\n          (/seq\n            (AugAssign\n              (Subscript (Subscript (Name &f:2 Load) (Name &i:2 Load) Load) (Constant i0 None) Store)\n              Add\n              (Subscript (Name &d:2 Load) (Constant i0 None) Load)\n            )\n            (AugAssign\n              (Subscript (Subscript (Name &f:2 Load) (Name &i:2 Load) Load) (Constant i1 None) Store)\n              Add\n              (Subscript (Name &d:2 Load) (Constant i1 None) Load)\n            )\n            (AugAssign (Name &i:2 Store) Add (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (BinOp (List (list (Tuple nil Load)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Store))\n          (Tuple\n            (list\n              (Subscript (Name &x:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n              (Subscript (Name &v:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n            )\n            Load\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &f:0 Store))\n      (ListComp\n        (List (list (Constant i0 None) (Constant i0 None)) Load)\n        (list\n          (comprehension\n            (Name &i:3 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list\n              (Name &f:0 Load)\n              (Name &i:0 Load)\n              (List\n                (list\n                  (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n                  (Constant i1 None)\n                )\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &b:0 Load) s_append Load)\n            (list\n              (Tuple\n                (list\n                  (UnaryOp USub (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load))\n                  (UnaryOp USub (Name &i:0 Load))\n                )\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name &heapify:0 Load) (list (Name &b:0 Load)) nil))\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (While\n      (Name &b:0 Load)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &v:0 Store) (Name &i:0 Store)) Store))\n          (Call (Name &heappop:0 Load) (list (Name &b:0 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Tuple (list (Name &v:0 Store) (Name &i:0 Store)) Store))\n          (Tuple (list (UnaryOp USub (Name &v:0 Load)) (UnaryOp USub (Name &i:0 Load))) Load)\n          None\n        )\n        (Assign\n          (list (Name &x:0 Store))\n          (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None)))\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &sum:0 Store) (Name &cnt:0 Store)) Store))\n              (Call (Name &query:0 Load) (list (Name &f:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None))) nil)\n              None\n            )\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (BinOp (BinOp (Name &x:0 Load) Mult (Name &cnt:0 Load)) Sub (Name &sum:0 Load))\n            )\n          )\n          nil\n        )\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list\n              (Name &f:0 Load)\n              (Name &i:0 Load)\n              (List (list (UnaryOp USub (Name &x:0 Load)) (UnaryOp USub (Constant i1 None))) Load)\n            )\n            nil\n          )\n        )\n      )\n      nil\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_bisect None)))\n    (Import (list (alias g_sys None)))\n    (ClassDef\n      &ft:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_a Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i200000 None))\n              None\n            )\n            (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Name &n:2 Load) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &qry:1\n          (arguments nil (list (arg &self:3 None None) (arg &r:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &ret:3 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &r:3 Load) (list GtE) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &ret:3 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:3 Load) s_a Load) (Name &r:3 Load) Load)\n                )\n                (Assign\n                  (list (Name &r:3 Store))\n                  (BinOp\n                    (BinOp (Name &r:3 Load) BitAnd (BinOp (Name &r:3 Load) Add (Constant i1 None)))\n                    Sub\n                    (Constant i1 None)\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &ret:3 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &upd:1\n          (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &v:4 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Name &i:4 Load) (list Lt) (list (Attribute (Name &self:4 Load) s_n Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:4 Load) s_a Load) (Name &i:4 Load) Store)\n                  Add\n                  (Name &v:4 Load)\n                )\n                (Assign\n                  (list (Name &i:4 Store))\n                  (BinOp (Name &i:4 Load) BitOr (BinOp (Name &i:4 Load) Add (Constant i1 None)))\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute\n        (Call\n          (Name g_iter Load)\n          (list\n            (Call\n              (Attribute\n                (Call\n                  (Attribute\n                    (Call\n                      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_read Load)\n                      nil\n                      nil\n                    )\n                    s_decode\n                    Load\n                  )\n                  nil\n                  nil\n                )\n                s_splitlines\n                Load\n              )\n              nil\n              nil\n            )\n          )\n          nil\n        )\n        s___next__\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &f0:0 Store)) (Call (Name &ft:0 Load) (list (Name &n:0 Load)) nil) None)\n    (Assign (list (Name &f1:0 Store)) (Call (Name &ft:0 Load) (list (Name &n:0 Load)) nil) None)\n    (Assign\n      (list (Name &a1:0 Store))\n      (ListComp\n        (List nil Load)\n        (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) s_append Load)\n            (list (Subscript (Name &x:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) s_append Load)\n            (list (Subscript (Name &v:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &a1:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &v:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &p:0 Store))\n          (Call\n            (Attribute (Name g_bisect Load) s_bisect_left Load)\n            (list\n              (Name &v:0 Load)\n              (Subscript (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp\n            (BinOp\n              (Call (Attribute (Name &f0:0 Load) s_qry Load) (list (Name &p:0 Load)) nil)\n              Mult\n              (Subscript (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n            )\n            Sub\n            (Call (Attribute (Name &f1:0 Load) s_qry Load) (list (Name &p:0 Load)) nil)\n          )\n        )\n        (Expr (Call (Attribute (Name &f0:0 Load) s_upd Load) (list (Name &p:0 Load) (Constant i1 None)) nil))\n        (Expr\n          (Call\n            (Attribute (Name &f1:0 Load) s_upd Load)\n            (list\n              (Name &p:0 Load)\n              (Subscript (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_heapq None) (alias g_bisect None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_collections (list (alias g_deque None) (alias g_defaultdict None)) i0)\n    (ImportFrom s_fractions (list (alias g_Fraction None)) i0)\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &mod1:0 Store)) (Constant i998244353 None) None)\n    (Import (list (alias &os:0 None)))\n    (Import (list (alias &sys:0 None)))\n    (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name &IOBase:0 Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:16 None None) (arg &file:16 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:16 Load) s__fd Store))\n              (Call (Attribute (Name &file:16 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:16 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:16 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:16 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:16 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:16 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:16 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:17 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:17 Store))\n                  (Call\n                    (Attribute (Name &os:0 Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:17 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name &os:0 Load) s_fstat Load)\n                              (list (Attribute (Name &self:17 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:17 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:17 Store))\n                  (Call (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:17 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:17 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:17 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:18 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:18 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:18 Store))\n                  (Call\n                    (Attribute (Name &os:0 Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:18 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name &os:0 Load) s_fstat Load)\n                              (list (Attribute (Name &self:18 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:18 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:18 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:18 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:18 Store))\n                  (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:18 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:18 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:18 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:19 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:19 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &os:0 Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:19 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name &IOBase:0 Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:20 None None) (arg &file:20 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:20 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:20 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:20 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:20 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:20 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:60 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:60 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:20 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:20 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (ClassDef\n      &TreeNode:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:3\n          (arguments\n            nil\n            (list (arg &self:21 None None) (arg &k:21 None None) (arg &v:21 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign (list (Attribute (Name &self:21 Load) s_key Store)) (Name &k:21 Load) None)\n            (Assign (list (Attribute (Name &self:21 Load) s_value Store)) (Name &v:21 Load) None)\n            (Assign (list (Attribute (Name &self:21 Load) s_left Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &self:21 Load) s_right Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &self:21 Load) s_parent Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &self:21 Load) s_height Store)) (Constant i1 None) None)\n            (Assign (list (Attribute (Name &self:21 Load) s_num_left Store)) (Constant i1 None) None)\n            (Assign (list (Attribute (Name &self:21 Load) s_num_total Store)) (Constant i1 None) None)\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &AvlTree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:4\n          (arguments nil (list (arg &self:22 None None)) None nil nil None nil)\n          (/seq (Assign (list (Attribute (Name &self:22 Load) s__tree Store)) (Constant None None) None))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:4\n          (arguments\n            nil\n            (list (arg &self:23 None None) (arg &k:23 None None) (arg &v:23 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (UnaryOp Not (Attribute (Name &self:23 Load) s__tree Load))\n              (/seq\n                (Assign\n                  (list (Attribute (Name &self:23 Load) s__tree Store))\n                  (Call (Name &TreeNode:0 Load) (list (Name &k:23 Load) (Name &v:23 Load)) nil)\n                  None\n                )\n                (Return None)\n              )\n              nil\n            )\n            (Assign\n              (list (Name &node:23 Store))\n              (Call (Attribute (Name &self:23 Load) s__add Load) (list (Name &k:23 Load) (Name &v:23 Load)) nil)\n              None\n            )\n            (If\n              (Name &node:23 Load)\n              (/seq (Expr (Call (Attribute (Name &self:23 Load) s__rebalance Load) (list (Name &node:23 Load)) nil)))\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_add:4\n          (arguments\n            nil\n            (list (arg &self:24 None None) (arg &k:24 None None) (arg &v:24 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign (list (Name &node:24 Store)) (Attribute (Name &self:24 Load) s__tree Load) None)\n            (While\n              (Name &node:24 Load)\n              (/seq\n                (If\n                  (Compare (Name &k:24 Load) (list Lt) (list (Attribute (Name &node:24 Load) s_key Load)))\n                  (/seq\n                    (If\n                      (Attribute (Name &node:24 Load) s_left Load)\n                      (/seq (Assign (list (Name &node:24 Store)) (Attribute (Name &node:24 Load) s_left Load) None))\n                      (/seq\n                        (Assign\n                          (list (Attribute (Name &node:24 Load) s_left Store))\n                          (Call (Name &TreeNode:0 Load) (list (Name &k:24 Load) (Name &v:24 Load)) nil)\n                          None\n                        )\n                        (Assign\n                          (list (Attribute (Attribute (Name &node:24 Load) s_left Load) s_parent Store))\n                          (Name &node:24 Load)\n                          None\n                        )\n                        (Return (Attribute (Name &node:24 Load) s_left Load))\n                      )\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare (Attribute (Name &node:24 Load) s_key Load) (list Lt) (list (Name &k:24 Load)))\n                      (/seq\n                        (If\n                          (Attribute (Name &node:24 Load) s_right Load)\n                          (/seq\n                            (Assign (list (Name &node:24 Store)) (Attribute (Name &node:24 Load) s_right Load) None)\n                          )\n                          (/seq\n                            (Assign\n                              (list (Attribute (Name &node:24 Load) s_right Store))\n                              (Call (Name &TreeNode:0 Load) (list (Name &k:24 Load) (Name &v:24 Load)) nil)\n                              None\n                            )\n                            (Assign\n                              (list (Attribute (Attribute (Name &node:24 Load) s_right Load) s_parent Store))\n                              (Name &node:24 Load)\n                              None\n                            )\n                            (Return (Attribute (Name &node:24 Load) s_right Load))\n                          )\n                        )\n                      )\n                      (/seq\n                        (Assign (list (Attribute (Name &node:24 Load) s_value Store)) (Name &v:24 Load) None)\n                        (Return None)\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get_height:4\n          (arguments nil (list (arg &x:25 None None)) None nil nil None nil)\n          (/seq (Return (IfExp (Name &x:25 Load) (Attribute (Name &x:25 Load) s_height Load) (Constant i0 None))))\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n        (FunctionDef\n          &get_num_total:4\n          (arguments nil (list (arg &x:26 None None)) None nil nil None nil)\n          (/seq (Return (IfExp (Name &x:26 Load) (Attribute (Name &x:26 Load) s_num_total Load) (Constant i0 None))))\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n        (FunctionDef\n          &_rebalance:4\n          (arguments nil (list (arg &self:27 None None) (arg &node:27 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &n:27 Store)) (Name &node:27 Load) None)\n            (While\n              (Name &n:27 Load)\n              (/seq\n                (Assign\n                  (list (Name &lh:27 Store))\n                  (Call\n                    (Attribute (Name &self:27 Load) s_get_height Load)\n                    (list (Attribute (Name &n:27 Load) s_left Load))\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &rh:27 Store))\n                  (Call\n                    (Attribute (Name &self:27 Load) s_get_height Load)\n                    (list (Attribute (Name &n:27 Load) s_right Load))\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &n:27 Load) s_height Store))\n                  (BinOp\n                    (Call (Name g_max Load) (list (Name &lh:27 Load) (Name &rh:27 Load)) nil)\n                    Add\n                    (Constant i1 None)\n                  )\n                  None\n                )\n                (Assign (list (Name &balance_factor:27 Store)) (BinOp (Name &lh:27 Load) Sub (Name &rh:27 Load)) None)\n                (Assign\n                  (list (Attribute (Name &n:27 Load) s_num_total Store))\n                  (BinOp\n                    (BinOp\n                      (Constant i1 None)\n                      Add\n                      (Call\n                        (Attribute (Name &self:27 Load) s_get_num_total Load)\n                        (list (Attribute (Name &n:27 Load) s_left Load))\n                        nil\n                      )\n                    )\n                    Add\n                    (Call\n                      (Attribute (Name &self:27 Load) s_get_num_total Load)\n                      (list (Attribute (Name &n:27 Load) s_right Load))\n                      nil\n                    )\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &n:27 Load) s_num_left Store))\n                  (BinOp\n                    (Constant i1 None)\n                    Add\n                    (Call\n                      (Attribute (Name &self:27 Load) s_get_num_total Load)\n                      (list (Attribute (Name &n:27 Load) s_left Load))\n                      nil\n                    )\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &balance_factor:27 Load) (list Gt) (list (Constant i1 None)))\n                  (/seq\n                    (If\n                      (Compare\n                        (Call\n                          (Attribute (Name &self:27 Load) s_get_height Load)\n                          (list (Attribute (Attribute (Name &n:27 Load) s_left Load) s_left Load))\n                          nil\n                        )\n                        (list Lt)\n                        (list\n                          (Call\n                            (Attribute (Name &self:27 Load) s_get_height Load)\n                            (list (Attribute (Attribute (Name &n:27 Load) s_left Load) s_right Load))\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr\n                          (Call\n                            (Attribute (Name &self:27 Load) s__rotate_left Load)\n                            (list (Attribute (Name &n:27 Load) s_left Load))\n                            nil\n                          )\n                        )\n                      )\n                      nil\n                    )\n                    (Expr (Call (Attribute (Name &self:27 Load) s__rotate_right Load) (list (Name &n:27 Load)) nil))\n                  )\n                  (/seq\n                    (If\n                      (Compare (Name &balance_factor:27 Load) (list Lt) (list (UnaryOp USub (Constant i1 None))))\n                      (/seq\n                        (If\n                          (Compare\n                            (Call\n                              (Attribute (Name &self:27 Load) s_get_height Load)\n                              (list (Attribute (Attribute (Name &n:27 Load) s_right Load) s_right Load))\n                              nil\n                            )\n                            (list Lt)\n                            (list\n                              (Call\n                                (Attribute (Name &self:27 Load) s_get_height Load)\n                                (list (Attribute (Attribute (Name &n:27 Load) s_right Load) s_left Load))\n                                nil\n                              )\n                            )\n                          )\n                          (/seq\n                            (Expr\n                              (Call\n                                (Attribute (Name &self:27 Load) s__rotate_right Load)\n                                (list (Attribute (Name &n:27 Load) s_right Load))\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                        )\n                        (Expr (Call (Attribute (Name &self:27 Load) s__rotate_left Load) (list (Name &n:27 Load)) nil))\n                      )\n                      (/seq (Assign (list (Name &n:27 Store)) (Attribute (Name &n:27 Load) s_parent Load) None))\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_remove_one:4\n          (arguments nil (list (arg &self:28 None None) (arg &node:28 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDgzLCAxMDUsIDEwMCwgMTAxLCAzMiwgMTAxLCAxMDIsIDEwMiwgMTAxLCA5OSwgMTE2LCAzMywgMzMsIDMzLCAzMiwgNjcsIDEwNCwgOTcsIDExMCwgMTAzLCAxMDEsIDExNSwgMzIsIDExMCwgMTExLCAxMDAsIDEwMSwgNDYsIDMyLCA3OCwgMTExLCAxMDAsIDEwMSwgMzIsIDExNSwgMTA0LCAxMTEsIDExNywgMTA4LCAxMDAsIDMyLCAxMDQsIDk3LCAxMTgsIDEwMSwgMzIsIDEwMSwgMTIwLCA5NywgOTksIDExNiwgMTA4LCAxMjEsIDMyLCAxMTEsIDExMCwgMTAxLCAzMiwgOTksIDEwNCwgMTA1LCAxMDgsIDEwMCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMl0=\n                None\n              )\n            )\n            (Assign\n              (list (Name &replacement:28 Store))\n              (BoolOp\n                Or\n                (list (Attribute (Name &node:28 Load) s_left Load) (Attribute (Name &node:28 Load) s_right Load))\n              )\n              None\n            )\n            (If\n              (Attribute (Name &node:28 Load) s_parent Load)\n              (/seq\n                (If\n                  (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:28 Load)) nil)\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:28 Load) s_parent Load) s_left Store))\n                      (Name &replacement:28 Load)\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:28 Load) s_parent Load) s_right Store))\n                      (Name &replacement:28 Load)\n                      None\n                    )\n                  )\n                )\n                (Assign\n                  (list (Attribute (Name &replacement:28 Load) s_parent Store))\n                  (Attribute (Name &node:28 Load) s_parent Load)\n                  None\n                )\n                (Assign (list (Attribute (Name &node:28 Load) s_parent Store)) (Constant None None) None)\n              )\n              (/seq\n                (Assign (list (Attribute (Name &self:28 Load) s__tree Store)) (Name &replacement:28 Load) None)\n                (Assign (list (Attribute (Name &replacement:28 Load) s_parent Store)) (Constant None None) None)\n              )\n            )\n            (Assign (list (Attribute (Name &node:28 Load) s_left Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &node:28 Load) s_right Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &node:28 Load) s_parent Store)) (Constant None None) None)\n            (Expr (Call (Attribute (Name &self:28 Load) s__rebalance Load) (list (Name &replacement:28 Load)) nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_remove_leaf:4\n          (arguments nil (list (arg &self:29 None None) (arg &node:29 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &node:29 Load) s_parent Load)\n              (/seq\n                (If\n                  (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:29 Load)) nil)\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:29 Load) s_parent Load) s_left Store))\n                      (Constant None None)\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:29 Load) s_parent Load) s_right Store))\n                      (Constant None None)\n                      None\n                    )\n                  )\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &self:29 Load) s__rebalance Load)\n                    (list (Attribute (Name &node:29 Load) s_parent Load))\n                    nil\n                  )\n                )\n              )\n              (/seq (Assign (list (Attribute (Name &self:29 Load) s__tree Store)) (Constant None None) None))\n            )\n            (Assign (list (Attribute (Name &node:29 Load) s_parent Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &node:29 Load) s_left Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &node:29 Load) s_right Store)) (Constant None None) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &remove:4\n          (arguments nil (list (arg &self:30 None None) (arg &k:30 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &node:30 Store))\n              (Call (Attribute (Name &self:30 Load) s__get_node Load) (list (Name &k:30 Load)) nil)\n              None\n            )\n            (If (UnaryOp Not (Name &node:30 Load)) (/seq (Return None)) nil)\n            (If\n              (Call (Attribute (Name &AvlTree:0 Load) s__is_leaf Load) (list (Name &node:30 Load)) nil)\n              (/seq\n                (Expr (Call (Attribute (Name &self:30 Load) s__remove_leaf Load) (list (Name &node:30 Load)) nil))\n                (Return None)\n              )\n              nil\n            )\n            (If\n              (BoolOp\n                And\n                (list (Attribute (Name &node:30 Load) s_left Load) (Attribute (Name &node:30 Load) s_right Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &nxt:30 Store))\n                  (Call (Attribute (Name &AvlTree:0 Load) s__get_next Load) (list (Name &node:30 Load)) nil)\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &node:30 Load) s_key Store))\n                  (Attribute (Name &nxt:30 Load) s_key Load)\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &node:30 Load) s_value Store))\n                  (Attribute (Name &nxt:30 Load) s_value Load)\n                  None\n                )\n                (If\n                  (Call (Attribute (Name &self:30 Load) s__is_leaf Load) (list (Name &nxt:30 Load)) nil)\n                  (/seq\n                    (Expr (Call (Attribute (Name &self:30 Load) s__remove_leaf Load) (list (Name &nxt:30 Load)) nil))\n                  )\n                  (/seq\n                    (Expr (Call (Attribute (Name &self:30 Load) s__remove_one Load) (list (Name &nxt:30 Load)) nil))\n                  )\n                )\n                (Expr (Call (Attribute (Name &self:30 Load) s__rebalance Load) (list (Name &node:30 Load)) nil))\n              )\n              (/seq (Expr (Call (Attribute (Name &self:30 Load) s__remove_one Load) (list (Name &node:30 Load)) nil)))\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get:4\n          (arguments nil (list (arg &self:31 None None) (arg &k:31 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &node:31 Store))\n              (Call (Attribute (Name &self:31 Load) s__get_node Load) (list (Name &k:31 Load)) nil)\n              None\n            )\n            (Return\n              (IfExp\n                (Name &node:31 Load)\n                (Attribute (Name &node:31 Load) s_value Load)\n                (UnaryOp USub (Constant i1 None))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_get_node:4\n          (arguments nil (list (arg &self:32 None None) (arg &k:32 None None)) None nil nil None nil)\n          (/seq\n            (If (UnaryOp Not (Attribute (Name &self:32 Load) s__tree Load)) (/seq (Return (Constant None None))) nil)\n            (Assign (list (Name &node:32 Store)) (Attribute (Name &self:32 Load) s__tree Load) None)\n            (While\n              (Name &node:32 Load)\n              (/seq\n                (If\n                  (Compare (Name &k:32 Load) (list Lt) (list (Attribute (Name &node:32 Load) s_key Load)))\n                  (/seq (Assign (list (Name &node:32 Store)) (Attribute (Name &node:32 Load) s_left Load) None))\n                  (/seq\n                    (If\n                      (Compare (Attribute (Name &node:32 Load) s_key Load) (list Lt) (list (Name &k:32 Load)))\n                      (/seq (Assign (list (Name &node:32 Store)) (Attribute (Name &node:32 Load) s_right Load) None))\n                      (/seq (Return (Name &node:32 Load)))\n                    )\n                  )\n                )\n              )\n              nil\n            )\n            (Return (Constant None None))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get_at:4\n          (arguments nil (list (arg &self:33 None None) (arg &pos:33 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &x:33 Store)) (BinOp (Name &pos:33 Load) Add (Constant i1 None)) None)\n            (Assign (list (Name &node:33 Store)) (Attribute (Name &self:33 Load) s__tree Load) None)\n            (While\n              (Name &node:33 Load)\n              (/seq\n                (If\n                  (Compare (Name &x:33 Load) (list Lt) (list (Attribute (Name &node:33 Load) s_num_left Load)))\n                  (/seq (Assign (list (Name &node:33 Store)) (Attribute (Name &node:33 Load) s_left Load) None))\n                  (/seq\n                    (If\n                      (Compare (Attribute (Name &node:33 Load) s_num_left Load) (list Lt) (list (Name &x:33 Load)))\n                      (/seq\n                        (AugAssign (Name &x:33 Store) Sub (Attribute (Name &node:33 Load) s_num_left Load))\n                        (Assign (list (Name &node:33 Store)) (Attribute (Name &node:33 Load) s_right Load) None)\n                      )\n                      (/seq\n                        (Return\n                          (Tuple\n                            (list\n                              (Attribute (Name &node:33 Load) s_key Load)\n                              (Attribute (Name &node:33 Load) s_value Load)\n                            )\n                            Load\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n            (Raise\n              (Call\n                (Name g_IndexError Load)\n                (list\n                  (Constant s-Wzc5LCAxMTcsIDExNiwgMzIsIDExMSwgMTAyLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgMTE1XQ== None)\n                )\n                nil\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_is_left:4\n          (arguments nil (list (arg &node:34 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (BoolOp\n                And\n                (list\n                  (Attribute (Attribute (Name &node:34 Load) s_parent Load) s_left Load)\n                  (Compare\n                    (Attribute (Attribute (Name &node:34 Load) s_parent Load) s_left Load)\n                    (list Eq)\n                    (list (Name &node:34 Load))\n                  )\n                )\n              )\n            )\n          )\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n        (FunctionDef\n          &_is_leaf:4\n          (arguments nil (list (arg &node:35 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (BoolOp\n                And\n                (list\n                  (Compare (Attribute (Name &node:35 Load) s_left Load) (list Is) (list (Constant None None)))\n                  (Compare (Attribute (Name &node:35 Load) s_right Load) (list Is) (list (Constant None None)))\n                )\n              )\n            )\n          )\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n        (FunctionDef\n          &_rotate_right:4\n          (arguments nil (list (arg &self:36 None None) (arg &node:36 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (UnaryOp Not (Attribute (Name &node:36 Load) s_parent Load))\n              (/seq\n                (Assign\n                  (list (Attribute (Name &self:36 Load) s__tree Store))\n                  (Attribute (Name &node:36 Load) s_left Load)\n                  None\n                )\n                (Assign\n                  (list (Attribute (Attribute (Name &node:36 Load) s_left Load) s_parent Store))\n                  (Constant None None)\n                  None\n                )\n              )\n              (/seq\n                (If\n                  (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:36 Load)) nil)\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:36 Load) s_parent Load) s_left Store))\n                      (Attribute (Name &node:36 Load) s_left Load)\n                      None\n                    )\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:36 Load) s_left Load) s_parent Store))\n                      (Attribute (Name &node:36 Load) s_parent Load)\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:36 Load) s_parent Load) s_right Store))\n                      (Attribute (Name &node:36 Load) s_left Load)\n                      None\n                    )\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:36 Load) s_left Load) s_parent Store))\n                      (Attribute (Name &node:36 Load) s_parent Load)\n                      None\n                    )\n                  )\n                )\n              )\n            )\n            (Assign\n              (list (Name &bk:36 Store))\n              (Attribute (Attribute (Name &node:36 Load) s_left Load) s_right Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Attribute (Name &node:36 Load) s_left Load) s_right Store))\n              (Name &node:36 Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:36 Load) s_parent Store))\n              (Attribute (Name &node:36 Load) s_left Load)\n              None\n            )\n            (Assign (list (Attribute (Name &node:36 Load) s_left Store)) (Name &bk:36 Load) None)\n            (If\n              (Name &bk:36 Load)\n              (/seq (Assign (list (Attribute (Name &bk:36 Load) s_parent Store)) (Name &node:36 Load) None))\n              nil\n            )\n            (Assign\n              (list (Attribute (Name &node:36 Load) s_height Store))\n              (BinOp\n                (Call\n                  (Name g_max Load)\n                  (list\n                    (Call\n                      (Attribute (Name &self:36 Load) s_get_height Load)\n                      (list (Attribute (Name &node:36 Load) s_left Load))\n                      nil\n                    )\n                    (Call\n                      (Attribute (Name &self:36 Load) s_get_height Load)\n                      (list (Attribute (Name &node:36 Load) s_right Load))\n                      nil\n                    )\n                  )\n                  nil\n                )\n                Add\n                (Constant i1 None)\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:36 Load) s_num_total Store))\n              (BinOp\n                (BinOp\n                  (Constant i1 None)\n                  Add\n                  (Call\n                    (Attribute (Name &self:36 Load) s_get_num_total Load)\n                    (list (Attribute (Name &node:36 Load) s_left Load))\n                    nil\n                  )\n                )\n                Add\n                (Call\n                  (Attribute (Name &self:36 Load) s_get_num_total Load)\n                  (list (Attribute (Name &node:36 Load) s_right Load))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:36 Load) s_num_left Store))\n              (BinOp\n                (Constant i1 None)\n                Add\n                (Call\n                  (Attribute (Name &self:36 Load) s_get_num_total Load)\n                  (list (Attribute (Name &node:36 Load) s_left Load))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_rotate_left:4\n          (arguments nil (list (arg &self:37 None None) (arg &node:37 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (UnaryOp Not (Attribute (Name &node:37 Load) s_parent Load))\n              (/seq\n                (Assign\n                  (list (Attribute (Name &self:37 Load) s__tree Store))\n                  (Attribute (Name &node:37 Load) s_right Load)\n                  None\n                )\n                (Assign\n                  (list (Attribute (Attribute (Name &node:37 Load) s_right Load) s_parent Store))\n                  (Constant None None)\n                  None\n                )\n              )\n              (/seq\n                (If\n                  (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:37 Load)) nil)\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:37 Load) s_parent Load) s_left Store))\n                      (Attribute (Name &node:37 Load) s_right Load)\n                      None\n                    )\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:37 Load) s_right Load) s_parent Store))\n                      (Attribute (Name &node:37 Load) s_parent Load)\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:37 Load) s_parent Load) s_right Store))\n                      (Attribute (Name &node:37 Load) s_right Load)\n                      None\n                    )\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:37 Load) s_right Load) s_parent Store))\n                      (Attribute (Name &node:37 Load) s_parent Load)\n                      None\n                    )\n                  )\n                )\n              )\n            )\n            (Assign\n              (list (Name &bk:37 Store))\n              (Attribute (Attribute (Name &node:37 Load) s_right Load) s_left Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Attribute (Name &node:37 Load) s_right Load) s_left Store))\n              (Name &node:37 Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:37 Load) s_parent Store))\n              (Attribute (Name &node:37 Load) s_right Load)\n              None\n            )\n            (Assign (list (Attribute (Name &node:37 Load) s_right Store)) (Name &bk:37 Load) None)\n            (If\n              (Name &bk:37 Load)\n              (/seq (Assign (list (Attribute (Name &bk:37 Load) s_parent Store)) (Name &node:37 Load) None))\n              nil\n            )\n            (Assign\n              (list (Attribute (Name &node:37 Load) s_height Store))\n              (BinOp\n                (Call\n                  (Name g_max Load)\n                  (list\n                    (Call\n                      (Attribute (Name &self:37 Load) s_get_height Load)\n                      (list (Attribute (Name &node:37 Load) s_left Load))\n                      nil\n                    )\n                    (Call\n                      (Attribute (Name &self:37 Load) s_get_height Load)\n                      (list (Attribute (Name &node:37 Load) s_right Load))\n                      nil\n                    )\n                  )\n                  nil\n                )\n                Add\n                (Constant i1 None)\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:37 Load) s_num_total Store))\n              (BinOp\n                (BinOp\n                  (Constant i1 None)\n                  Add\n                  (Call\n                    (Attribute (Name &self:37 Load) s_get_num_total Load)\n                    (list (Attribute (Name &node:37 Load) s_left Load))\n                    nil\n                  )\n                )\n                Add\n                (Call\n                  (Attribute (Name &self:37 Load) s_get_num_total Load)\n                  (list (Attribute (Name &node:37 Load) s_right Load))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:37 Load) s_num_left Store))\n              (BinOp\n                (Constant i1 None)\n                Add\n                (Call\n                  (Attribute (Name &self:37 Load) s_get_num_total Load)\n                  (list (Attribute (Name &node:37 Load) s_left Load))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_get_next:4\n          (arguments nil (list (arg &node:38 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (UnaryOp Not (Attribute (Name &node:38 Load) s_right Load))\n              (/seq (Return (Attribute (Name &node:38 Load) s_parent Load)))\n              nil\n            )\n            (Assign (list (Name &n:38 Store)) (Attribute (Name &node:38 Load) s_right Load) None)\n            (While\n              (Attribute (Name &n:38 Load) s_left Load)\n              (/seq (Assign (list (Name &n:38 Store)) (Attribute (Name &n:38 Load) s_left Load) None))\n              nil\n            )\n            (Return (Name &n:38 Load))\n          )\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &SegmentTree1:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:5\n          (arguments\n            nil\n            (list\n              (arg &self:39 None None)\n              (arg &data:39 None None)\n              (arg &default:39 None None)\n              (arg &func:39 None None)\n            )\n            None\n            nil\n            nil\n            None\n            (list\n              (Constant s_z None)\n              (Lambda\n                (arguments nil (list (arg &a:61 None None) (arg &b:61 None None)) None nil nil None nil)\n                (Call (Name g_min Load) (list (Name &a:61 Load) (Name &b:61 Load)) nil)\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd\n                None\n              )\n            )\n            (Assign (list (Attribute (Name &self:39 Load) s__default Store)) (Name &default:39 Load) None)\n            (Assign (list (Attribute (Name &self:39 Load) s__func Store)) (Name &func:39 Load) None)\n            (Assign\n              (list (Attribute (Name &self:39 Load) s__len Store))\n              (Call (Name g_len Load) (list (Name &data:39 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:39 Load) s__size Store) (Name &_size:39 Store))\n              (BinOp\n                (Constant i1 None)\n                LShift\n                (Call\n                  (Attribute\n                    (BinOp (Attribute (Name &self:39 Load) s__len Load) Sub (Constant i1 None))\n                    s_bit_length\n                    Load\n                  )\n                  nil\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:39 Load) s_data Store))\n              (BinOp\n                (List (list (Name &default:39 Load)) Load)\n                Mult\n                (BinOp (Constant i2 None) Mult (Name &_size:39 Load))\n              )\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:39 Load) s_data Load)\n                  (Slice\n                    (Name &_size:39 Load)\n                    (BinOp (Name &_size:39 Load) Add (Attribute (Name &self:39 Load) s__len Load))\n                    None\n                  )\n                  Store\n                )\n              )\n              (Name &data:39 Load)\n              None\n            )\n            (For\n              (Name &i:39 Store)\n              (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:39 Load)) nil)) nil)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:39 Load) s_data Load) (Name &i:39 Load) Store))\n                  (Call\n                    (Name &func:39 Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:39 Load) s_data Load)\n                        (BinOp (Name &i:39 Load) Add (Name &i:39 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:39 Load) s_data Load)\n                        (BinOp (BinOp (Name &i:39 Load) Add (Name &i:39 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__delitem__:5\n          (arguments nil (list (arg &self:40 None None) (arg &idx:40 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &self:40 Load) (Name &idx:40 Load) Store))\n              (Attribute (Name &self:40 Load) s__default Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__getitem__:5\n          (arguments nil (list (arg &self:41 None None) (arg &idx:41 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:41 Load) s_data Load)\n                (BinOp (Name &idx:41 Load) Add (Attribute (Name &self:41 Load) s__size Load))\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__setitem__:5\n          (arguments\n            nil\n            (list (arg &self:42 None None) (arg &idx:42 None None) (arg &value:42 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &idx:42 Store) Add (Attribute (Name &self:42 Load) s__size Load))\n            (Assign\n              (list (Subscript (Attribute (Name &self:42 Load) s_data Load) (Name &idx:42 Load) Store))\n              (Name &value:42 Load)\n              None\n            )\n            (AugAssign (Name &idx:42 Store) RShift (Constant i1 None))\n            (While\n              (Name &idx:42 Load)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:42 Load) s_data Load) (Name &idx:42 Load) Store))\n                  (Call\n                    (Attribute (Name &self:42 Load) s__func Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:42 Load) s_data Load)\n                        (BinOp (Constant i2 None) Mult (Name &idx:42 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:42 Load) s_data Load)\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &idx:42 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (AugAssign (Name &idx:42 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__len__:5\n          (arguments nil (list (arg &self:43 None None)) None nil nil None nil)\n          (/seq (Return (Attribute (Name &self:43 Load) s__len Load)))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:5\n          (arguments\n            nil\n            (list (arg &self:44 None None) (arg &start:44 None None) (arg &stop:44 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &start:44 Load) (list Eq) (list (Name &stop:44 Load)))\n              (/seq\n                (Return (Call (Attribute (Name &self:44 Load) s___getitem__ Load) (list (Name &start:44 Load)) nil))\n              )\n              nil\n            )\n            (AugAssign (Name &stop:44 Store) Add (Constant i1 None))\n            (AugAssign (Name &start:44 Store) Add (Attribute (Name &self:44 Load) s__size Load))\n            (AugAssign (Name &stop:44 Store) Add (Attribute (Name &self:44 Load) s__size Load))\n            (Assign (list (Name &res:44 Store)) (Attribute (Name &self:44 Load) s__default Load) None)\n            (While\n              (Compare (Name &start:44 Load) (list Lt) (list (Name &stop:44 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &start:44 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (Assign\n                      (list (Name &res:44 Store))\n                      (Call\n                        (Attribute (Name &self:44 Load) s__func Load)\n                        (list\n                          (Name &res:44 Load)\n                          (Subscript (Attribute (Name &self:44 Load) s_data Load) (Name &start:44 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign (Name &start:44 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (If\n                  (BinOp (Name &stop:44 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign (Name &stop:44 Store) Sub (Constant i1 None))\n                    (Assign\n                      (list (Name &res:44 Store))\n                      (Call\n                        (Attribute (Name &self:44 Load) s__func Load)\n                        (list\n                          (Name &res:44 Load)\n                          (Subscript (Attribute (Name &self:44 Load) s_data Load) (Name &stop:44 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n                (AugAssign (Name &start:44 Store) RShift (Constant i1 None))\n                (AugAssign (Name &stop:44 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n            (Return (Name &res:44 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__repr__:5\n          (arguments nil (list (arg &self:45 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Call\n                (Attribute\n                  (Constant\n                    s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd\n                    None\n                  )\n                  s_format\n                  Load\n                )\n                (list (Attribute (Name &self:45 Load) s_data Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &SegmentTree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:6\n          (arguments\n            nil\n            (list\n              (arg &self:46 None None)\n              (arg &data:46 None None)\n              (arg &default:46 None None)\n              (arg &func:46 None None)\n            )\n            None\n            nil\n            nil\n            None\n            (list\n              (Constant i0 None)\n              (Lambda\n                (arguments nil (list (arg &a:62 None None) (arg &b:62 None None)) None nil nil None nil)\n                (BinOp (Name &a:62 Load) Add (Name &b:62 Load))\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd\n                None\n              )\n            )\n            (Assign (list (Attribute (Name &self:46 Load) s__default Store)) (Name &default:46 Load) None)\n            (Assign (list (Attribute (Name &self:46 Load) s__func Store)) (Name &func:46 Load) None)\n            (Assign\n              (list (Attribute (Name &self:46 Load) s__len Store))\n              (Call (Name g_len Load) (list (Name &data:46 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:46 Load) s__size Store) (Name &_size:46 Store))\n              (BinOp\n                (Constant i1 None)\n                LShift\n                (Call\n                  (Attribute\n                    (BinOp (Attribute (Name &self:46 Load) s__len Load) Sub (Constant i1 None))\n                    s_bit_length\n                    Load\n                  )\n                  nil\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:46 Load) s_data Store))\n              (BinOp\n                (List (list (Name &default:46 Load)) Load)\n                Mult\n                (BinOp (Constant i2 None) Mult (Name &_size:46 Load))\n              )\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:46 Load) s_data Load)\n                  (Slice\n                    (Name &_size:46 Load)\n                    (BinOp (Name &_size:46 Load) Add (Attribute (Name &self:46 Load) s__len Load))\n                    None\n                  )\n                  Store\n                )\n              )\n              (Name &data:46 Load)\n              None\n            )\n            (For\n              (Name &i:46 Store)\n              (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:46 Load)) nil)) nil)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:46 Load) s_data Load) (Name &i:46 Load) Store))\n                  (Call\n                    (Name &func:46 Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:46 Load) s_data Load)\n                        (BinOp (Name &i:46 Load) Add (Name &i:46 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:46 Load) s_data Load)\n                        (BinOp (BinOp (Name &i:46 Load) Add (Name &i:46 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__delitem__:6\n          (arguments nil (list (arg &self:47 None None) (arg &idx:47 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &self:47 Load) (Name &idx:47 Load) Store))\n              (Attribute (Name &self:47 Load) s__default Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__getitem__:6\n          (arguments nil (list (arg &self:48 None None) (arg &idx:48 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:48 Load) s_data Load)\n                (BinOp (Name &idx:48 Load) Add (Attribute (Name &self:48 Load) s__size Load))\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__setitem__:6\n          (arguments\n            nil\n            (list (arg &self:49 None None) (arg &idx:49 None None) (arg &value:49 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &idx:49 Store) Add (Attribute (Name &self:49 Load) s__size Load))\n            (Assign\n              (list (Subscript (Attribute (Name &self:49 Load) s_data Load) (Name &idx:49 Load) Store))\n              (Name &value:49 Load)\n              None\n            )\n            (AugAssign (Name &idx:49 Store) RShift (Constant i1 None))\n            (While\n              (Name &idx:49 Load)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:49 Load) s_data Load) (Name &idx:49 Load) Store))\n                  (Call\n                    (Attribute (Name &self:49 Load) s__func Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:49 Load) s_data Load)\n                        (BinOp (Constant i2 None) Mult (Name &idx:49 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:49 Load) s_data Load)\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &idx:49 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (AugAssign (Name &idx:49 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__len__:6\n          (arguments nil (list (arg &self:50 None None)) None nil nil None nil)\n          (/seq (Return (Attribute (Name &self:50 Load) s__len Load)))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:6\n          (arguments\n            nil\n            (list (arg &self:51 None None) (arg &start:51 None None) (arg &stop:51 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &start:51 Load) (list Eq) (list (Name &stop:51 Load)))\n              (/seq\n                (Return (Call (Attribute (Name &self:51 Load) s___getitem__ Load) (list (Name &start:51 Load)) nil))\n              )\n              nil\n            )\n            (AugAssign (Name &stop:51 Store) Add (Constant i1 None))\n            (AugAssign (Name &start:51 Store) Add (Attribute (Name &self:51 Load) s__size Load))\n            (AugAssign (Name &stop:51 Store) Add (Attribute (Name &self:51 Load) s__size Load))\n            (Assign (list (Name &res:51 Store)) (Attribute (Name &self:51 Load) s__default Load) None)\n            (While\n              (Compare (Name &start:51 Load) (list Lt) (list (Name &stop:51 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &start:51 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (Assign\n                      (list (Name &res:51 Store))\n                      (Call\n                        (Attribute (Name &self:51 Load) s__func Load)\n                        (list\n                          (Name &res:51 Load)\n                          (Subscript (Attribute (Name &self:51 Load) s_data Load) (Name &start:51 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign (Name &start:51 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (If\n                  (BinOp (Name &stop:51 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign (Name &stop:51 Store) Sub (Constant i1 None))\n                    (Assign\n                      (list (Name &res:51 Store))\n                      (Call\n                        (Attribute (Name &self:51 Load) s__func Load)\n                        (list\n                          (Name &res:51 Load)\n                          (Subscript (Attribute (Name &self:51 Load) s_data Load) (Name &stop:51 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n                (AugAssign (Name &start:51 Store) RShift (Constant i1 None))\n                (AugAssign (Name &stop:51 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n            (Return (Name &res:51 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__repr__:6\n          (arguments nil (list (arg &self:52 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Call\n                (Attribute\n                  (Constant\n                    s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd\n                    None\n                  )\n                  s_format\n                  Load\n                )\n                (list (Attribute (Name &self:52 Load) s_data Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &Factorial:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:7\n          (arguments nil (list (arg &self:53 None None) (arg &MOD:53 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:53 Load) s_MOD Store)) (Name &MOD:53 Load) None)\n            (Assign\n              (list (Attribute (Name &self:53 Load) s_factorials Store))\n              (List (list (Constant i1 None) (Constant i1 None)) Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:53 Load) s_invModulos Store))\n              (List (list (Constant i0 None) (Constant i1 None)) Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:53 Load) s_invFactorial_ Store))\n              (List (list (Constant i1 None) (Constant i1 None)) Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &calc:7\n          (arguments nil (list (arg &self:54 None None) (arg &n:54 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &n:54 Load) (list LtE) (list (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant\n                        s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTAsIDMzXQ==\n                        None\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant\n                          s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ==\n                          None\n                        )\n                        Add\n                        (Call (Name g_str Load) (list (Name &n:54 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              nil\n            )\n            (If\n              (Compare\n                (Name &n:54 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:54 Load) s_factorials Load)) nil))\n              )\n              (/seq (Return (Subscript (Attribute (Name &self:54 Load) s_factorials Load) (Name &n:54 Load) Load)))\n              nil\n            )\n            (Assign\n              (list (Name &nextArr:54 Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp\n                  (BinOp (Name &n:54 Load) Add (Constant i1 None))\n                  Sub\n                  (Call (Name g_len Load) (list (Attribute (Name &self:54 Load) s_factorials Load)) nil)\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &initialI:54 Store))\n              (Call (Name g_len Load) (list (Attribute (Name &self:54 Load) s_factorials Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &prev:54 Store))\n              (Subscript (Attribute (Name &self:54 Load) s_factorials Load) (UnaryOp USub (Constant i1 None)) Load)\n              None\n            )\n            (Assign (list (Name &m:54 Store)) (Attribute (Name &self:54 Load) s_MOD Load) None)\n            (For\n              (Name &i:54 Store)\n              (Call\n                (Name g_range Load)\n                (list (Name &initialI:54 Load) (BinOp (Name &n:54 Load) Add (Constant i1 None)))\n                nil\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Name &prev:54 Store)\n                    (Subscript (Name &nextArr:54 Load) (BinOp (Name &i:54 Load) Sub (Name &initialI:54 Load)) Store)\n                  )\n                  (BinOp (BinOp (Name &prev:54 Load) Mult (Name &i:54 Load)) Mod (Name &m:54 Load))\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (AugAssign (Attribute (Name &self:54 Load) s_factorials Store) Add (Name &nextArr:54 Load))\n            (Return (Subscript (Attribute (Name &self:54 Load) s_factorials Load) (Name &n:54 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &inv:7\n          (arguments nil (list (arg &self:55 None None) (arg &n:55 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &n:55 Load) (list LtE) (list (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant\n                        s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTAsIDk0LCA0MCwgNDUsIDQ5LCA0MV0=\n                        None\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant\n                          s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ==\n                          None\n                        )\n                        Add\n                        (Call (Name g_str Load) (list (Name &n:55 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              nil\n            )\n            (Assign (list (Name &p:55 Store)) (Attribute (Name &self:55 Load) s_MOD Load) None)\n            (Assign (list (Name &pi:55 Store)) (BinOp (Name &n:55 Load) Mod (Name &p:55 Load)) None)\n            (If\n              (Compare\n                (Name &pi:55 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_invModulos Load)) nil))\n              )\n              (/seq (Return (Subscript (Attribute (Name &self:55 Load) s_invModulos Load) (Name &pi:55 Load) Load)))\n              nil\n            )\n            (Assign\n              (list (Name &nextArr:55 Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp\n                  (BinOp (Name &n:55 Load) Add (Constant i1 None))\n                  Sub\n                  (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_invModulos Load)) nil)\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &initialI:55 Store))\n              (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_invModulos Load)) nil)\n              None\n            )\n            (For\n              (Name &i:55 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (Name &initialI:55 Load)\n                  (Call (Name g_min Load) (list (Name &p:55 Load) (BinOp (Name &n:55 Load) Add (Constant i1 None))) nil)\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Name &next:55 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp\n                        USub\n                        (Subscript\n                          (Attribute (Name &self:55 Load) s_invModulos Load)\n                          (BinOp (Name &p:55 Load) Mod (Name &i:55 Load))\n                          Load\n                        )\n                      )\n                      Mult\n                      (BinOp (Name &p:55 Load) FloorDiv (Name &i:55 Load))\n                    )\n                    Mod\n                    (Name &p:55 Load)\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute (Attribute (Name &self:55 Load) s_invModulos Load) s_append Load)\n                    (list (Name &next:55 Load))\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n            (Return (Subscript (Attribute (Name &self:55 Load) s_invModulos Load) (Name &pi:55 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &invFactorial:7\n          (arguments nil (list (arg &self:56 None None) (arg &n:56 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &n:56 Load) (list LtE) (list (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant\n                        s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCA0MCwgMTEwLCA5NCwgNDAsIDQ1LCA0OSwgNDEsIDQxLCAzM10=\n                        None\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant\n                          s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ==\n                          None\n                        )\n                        Add\n                        (Call (Name g_str Load) (list (Name &n:56 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              nil\n            )\n            (If\n              (Compare\n                (Name &n:56 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invFactorial_ Load)) nil))\n              )\n              (/seq (Return (Subscript (Attribute (Name &self:56 Load) s_invFactorial_ Load) (Name &n:56 Load) Load)))\n              nil\n            )\n            (Expr (Call (Attribute (Name &self:56 Load) s_inv Load) (list (Name &n:56 Load)) nil))\n            (Assign\n              (list (Name &nextArr:56 Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp\n                  (BinOp (Name &n:56 Load) Add (Constant i1 None))\n                  Sub\n                  (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invFactorial_ Load)) nil)\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &initialI:56 Store))\n              (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invFactorial_ Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &prev:56 Store))\n              (Subscript (Attribute (Name &self:56 Load) s_invFactorial_ Load) (UnaryOp USub (Constant i1 None)) Load)\n              None\n            )\n            (Assign (list (Name &p:56 Store)) (Attribute (Name &self:56 Load) s_MOD Load) None)\n            (For\n              (Name &i:56 Store)\n              (Call\n                (Name g_range Load)\n                (list (Name &initialI:56 Load) (BinOp (Name &n:56 Load) Add (Constant i1 None)))\n                nil\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Name &prev:56 Store)\n                    (Subscript (Name &nextArr:56 Load) (BinOp (Name &i:56 Load) Sub (Name &initialI:56 Load)) Store)\n                  )\n                  (BinOp\n                    (BinOp\n                      (Name &prev:56 Load)\n                      Mult\n                      (Subscript\n                        (Attribute (Name &self:56 Load) s_invModulos Load)\n                        (BinOp (Name &i:56 Load) Mod (Name &p:56 Load))\n                        Load\n                      )\n                    )\n                    Mod\n                    (Name &p:56 Load)\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (AugAssign (Attribute (Name &self:56 Load) s_invFactorial_ Store) Add (Name &nextArr:56 Load))\n            (Return (Subscript (Attribute (Name &self:56 Load) s_invFactorial_ Load) (Name &n:56 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &Combination:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:8\n          (arguments nil (list (arg &self:57 None None) (arg &MOD:57 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:57 Load) s_MOD Store)) (Name &MOD:57 Load) None)\n            (Assign\n              (list (Attribute (Name &self:57 Load) s_factorial Store))\n              (Call (Name &Factorial:0 Load) (list (Name &MOD:57 Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &ncr:8\n          (arguments\n            nil\n            (list (arg &self:58 None None) (arg &n:58 None None) (arg &k:58 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare (Name &k:58 Load) (list Lt) (list (Constant i0 None)))\n                  (Compare (Name &n:58 Load) (list Lt) (list (Name &k:58 Load)))\n                )\n              )\n              (/seq (Return (Constant i0 None)))\n              nil\n            )\n            (Assign\n              (list (Name &k:58 Store))\n              (Call (Name g_min Load) (list (Name &k:58 Load) (BinOp (Name &n:58 Load) Sub (Name &k:58 Load))) nil)\n              None\n            )\n            (Assign (list (Name &f:58 Store)) (Attribute (Name &self:58 Load) s_factorial Load) None)\n            (Return\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (Call (Attribute (Name &f:58 Load) s_calc Load) (list (Name &n:58 Load)) nil)\n                    Mult\n                    (Call\n                      (Attribute (Name &f:58 Load) s_invFactorial Load)\n                      (list\n                        (Call\n                          (Name g_max Load)\n                          (list (BinOp (Name &n:58 Load) Sub (Name &k:58 Load)) (Name &k:58 Load))\n                          nil\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  Mult\n                  (Call\n                    (Attribute (Name &f:58 Load) s_invFactorial Load)\n                    (list\n                      (Call\n                        (Name g_min Load)\n                        (list (Name &k:58 Load) (BinOp (Name &n:58 Load) Sub (Name &k:58 Load)))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                Mod\n                (Attribute (Name &self:58 Load) s_MOD Load)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &powm:0\n      (arguments nil (list (arg &a:9 None None) (arg &n:9 None None) (arg &m:9 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &a:9 Load) (list Eq) (list (Constant i1 None)))\n              (Compare (Name &n:9 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Return (Constant i1 None)))\n          nil\n        )\n        (If\n          (Compare (BinOp (Name &n:9 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &s:9 Store))\n              (Call\n                (Name &powm:0 Load)\n                (list (Name &a:9 Load) (BinOp (Name &n:9 Load) FloorDiv (Constant i2 None)) (Name &m:9 Load))\n                nil\n              )\n              None\n            )\n            (Return (BinOp (BinOp (Name &s:9 Load) Mult (Name &s:9 Load)) Mod (Name &m:9 Load)))\n          )\n          (/seq\n            (Return\n              (BinOp\n                (BinOp\n                  (Name &a:9 Load)\n                  Mult\n                  (Call\n                    (Name &powm:0 Load)\n                    (list (Name &a:9 Load) (BinOp (Name &n:9 Load) Sub (Constant i1 None)) (Name &m:9 Load))\n                    nil\n                  )\n                )\n                Mod\n                (Name &m:9 Load)\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sort_list:0\n      (arguments nil (list (arg &list1:10 None None) (arg &list2:10 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &zipped_pairs:10 Store))\n          (Call (Name g_zip Load) (list (Name &list2:10 Load) (Name &list1:10 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &z:10 Store))\n          (ListComp\n            (Name &x:59 Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &_:59 Store) (Name &x:59 Store)) Store)\n                (Call (Name g_sorted Load) (list (Name &zipped_pairs:10 Load)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Return (Name &z:10 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &product:0\n      (arguments nil (list (arg &l:11 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &por:11 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:11 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &l:11 Load)) nil)) nil)\n          (/seq (AugAssign (Name &por:11 Store) Mult (Subscript (Name &l:11 Load) (Name &i:11 Load) Load)))\n          nil\n          None\n        )\n        (Return (Name &por:11 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &binarySearchCount:0\n      (arguments nil (list (arg &arr:12 None None) (arg &n:12 None None) (arg &key:12 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &left:12 Store)) (Constant i0 None) None)\n        (Assign (list (Name &right:12 Store)) (BinOp (Name &n:12 Load) Sub (Constant i1 None)) None)\n        (Assign (list (Name &count:12 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &left:12 Load) (list LtE) (list (Name &right:12 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:12 Store))\n              (Call\n                (Name g_int Load)\n                (list (BinOp (BinOp (Name &right:12 Load) Add (Name &left:12 Load)) Div (Constant i2 None)))\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Subscript (Name &arr:12 Load) (Name &mid:12 Load) Load) (list Lt) (list (Name &key:12 Load)))\n              (/seq\n                (Assign (list (Name &count:12 Store)) (BinOp (Name &mid:12 Load) Add (Constant i1 None)) None)\n                (Assign (list (Name &left:12 Store)) (BinOp (Name &mid:12 Load) Add (Constant i1 None)) None)\n              )\n              (/seq (Assign (list (Name &right:12 Store)) (BinOp (Name &mid:12 Load) Sub (Constant i1 None)) None))\n            )\n          )\n          nil\n        )\n        (Return (Name &count:12 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &countdig:0\n      (arguments nil (list (arg &n:13 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &c:13 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &n:13 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &n:13 Store) FloorDiv (Constant i10 None))\n            (AugAssign (Name &c:13 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Return (Name &c:13 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &binary:0\n      (arguments nil (list (arg &x:14 None None) (arg &length:14 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &y:14 Store))\n          (Subscript (Call (Name g_bin Load) (list (Name &x:14 Load)) nil) (Slice (Constant i2 None) None None) Load)\n          None\n        )\n        (Return\n          (IfExp\n            (Compare (Call (Name g_len Load) (list (Name &y:14 Load)) nil) (list GtE) (list (Name &length:14 Load)))\n            (Name &y:14 Load)\n            (BinOp\n              (BinOp\n                (Constant s_0 None)\n                Mult\n                (BinOp (Name &length:14 Load) Sub (Call (Name g_len Load) (list (Name &y:14 Load)) nil))\n              )\n              Add\n              (Name &y:14 Load)\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &countGreater:0\n      (arguments nil (list (arg &arr:15 None None) (arg &n:15 None None) (arg &k:15 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &l:15 Store)) (Constant i0 None) None)\n        (Assign (list (Name &r:15 Store)) (BinOp (Name &n:15 Load) Sub (Constant i1 None)) None)\n        (Assign (list (Name &leftGreater:15 Store)) (Name &n:15 Load) None)\n        (While\n          (Compare (Name &l:15 Load) (list LtE) (list (Name &r:15 Load)))\n          (/seq\n            (Assign\n              (list (Name &m:15 Store))\n              (Call\n                (Name g_int Load)\n                (list\n                  (BinOp\n                    (Name &l:15 Load)\n                    Add\n                    (BinOp (BinOp (Name &r:15 Load) Sub (Name &l:15 Load)) Div (Constant i2 None))\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Subscript (Name &arr:15 Load) (Name &m:15 Load) Load) (list GtE) (list (Name &k:15 Load)))\n              (/seq\n                (Assign (list (Name &leftGreater:15 Store)) (Name &m:15 Load) None)\n                (Assign (list (Name &r:15 Store)) (BinOp (Name &m:15 Load) Sub (Constant i1 None)) None)\n              )\n              (/seq (Assign (list (Name &l:15 Store)) (BinOp (Name &m:15 Load) Add (Constant i1 None)) None))\n            )\n          )\n          nil\n        )\n        (Return (BinOp (Name &n:15 Load) Sub (Name &leftGreater:15 Load)))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &s:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &d1:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_list Load)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute\n              (Subscript (Name &d1:0 Load) (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) Load)\n              s_append\n              Load\n            )\n            (list (Subscript (Name &s:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &s:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &d:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_list Load)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute\n              (Subscript (Name &d:0 Load) (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) Load)\n              s_append\n              Load\n            )\n            (list (Name &i:0 Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &d:0 Load)\n      (/seq\n        (Expr (Call (Attribute (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) s_sort Load) nil nil))\n        (Assign\n          (list (Subscript (Name &d:0 Load) (Name &i:0 Load) Store))\n          (Call (Name g_deque Load) (list (Subscript (Name &d:0 Load) (Name &i:0 Load) Load)) nil)\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &u:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (Assign (list (Name &u1:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name &SegmentTree:0 Load) (list (Name &u:0 Load)) nil) None)\n    (Assign (list (Name &s1:0 Store)) (Call (Name &SegmentTree:0 Load) (list (Name &u1:0 Load)) nil) None)\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &sp:0 Store))\n          (Subscript\n            (Subscript (Name &d1:0 Load) (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) Load)\n            (UnaryOp USub (Constant i1 None))\n            Load\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &d1:0 Load) (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) Load) s_pop Load)\n            nil\n            nil\n          )\n        )\n        (Assign\n          (list (Name &pos:0 Store))\n          (Subscript (Subscript (Name &d:0 Load) (Name &sp:0 Load) Load) (Constant i0 None) Load)\n          None\n        )\n        (Expr (Call (Attribute (Subscript (Name &d:0 Load) (Name &sp:0 Load) Load) s_popleft Load) nil nil))\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp\n            (BinOp\n              (Call\n                (Attribute (Name &s:0 Load) s_query Load)\n                (list (Constant i0 None) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)))\n                nil\n              )\n              Mult\n              (Subscript (Name &l:0 Load) (Name &i:0 Load) Load)\n            )\n            Sub\n            (Call\n              (Attribute (Name &s1:0 Load) s_query Load)\n              (list (Constant i0 None) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)))\n              nil\n            )\n          )\n        )\n        (Expr (Call (Attribute (Name &s:0 Load) s___setitem__ Load) (list (Name &pos:0 Load) (Constant i1 None)) nil))\n        (Expr\n          (Call\n            (Attribute (Name &s1:0 Load) s___setitem__ Load)\n            (list (Name &pos:0 Load) (Subscript (Name &l:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (ImportFrom s_collections (list (alias &defaultdict:0 None)) i0)\n    (FunctionDef\n      &compress:0\n      (arguments nil (list (arg &l:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &l:2 Store))\n          (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Name &l:2 Load)) nil)) nil)\n          None\n        )\n        (Expr (Call (Attribute (Name &l:2 Load) s_sort Load) nil nil))\n        (Assign (list (Name &idx:2 Store)) (Call (Name &defaultdict:0 Load) (list (Name g_int Load)) nil) None)\n        (Assign (list (Name &c:2 Store)) (Constant i0 None) None)\n        (For\n          (Name &li:2 Store)\n          (Name &l:2 Load)\n          (/seq\n            (Assign (list (Subscript (Name &idx:2 Load) (Name &li:2 Load) Store)) (Name &c:2 Load) None)\n            (AugAssign (Name &c:2 Store) Add (Constant i1 None))\n          )\n          nil\n          None\n        )\n        (Return (Name &idx:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (ClassDef\n      &BIT:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:3 Load) s_n Store)) (Name &n:3 Load) None)\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_bit Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None)))\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:1\n          (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &x:4 None None)) None nil nil None nil)\n          (/seq\n            (AugAssign (Name &i:4 Store) Add (Constant i1 None))\n            (While\n              (Compare (Name &i:4 Load) (list LtE) (list (Attribute (Name &self:4 Load) s_n Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:4 Load) s_bit Load) (Name &i:4 Load) Store)\n                  Add\n                  (Name &x:4 Load)\n                )\n                (AugAssign (Name &i:4 Store) Add (BinOp (Name &i:4 Load) BitAnd (UnaryOp USub (Name &i:4 Load))))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &acc:1\n          (arguments nil (list (arg &self:5 None None) (arg &i:5 None None)) None nil nil None nil)\n          (/seq\n            (AugAssign (Name &i:5 Store) Add (Constant i1 None))\n            (Assign (list (Name &s:5 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &i:5 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &s:5 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:5 Load) s_bit Load) (Name &i:5 Load) Load)\n                )\n                (AugAssign (Name &i:5 Store) Sub (BinOp (Name &i:5 Load) BitAnd (UnaryOp USub (Name &i:5 Load))))\n              )\n              nil\n            )\n            (Return (Name &s:5 Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &xv:0 Store))\n      (ListComp\n        (Tuple (list (Name &xi:6 Load) (Name &vi:6 Load)) Load)\n        (list\n          (comprehension\n            (Tuple (list (Name &xi:6 Store) (Name &vi:6 Store)) Store)\n            (Call (Name g_zip Load) (list (Name &x:0 Load) (Name &v:0 Load)) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &xv:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &t:7 None None)) None nil nil None nil)\n              (Subscript (Name &t:7 Load) (Constant i0 None) Load)\n            )\n          )\n        )\n      )\n    )\n    (Assign (list (Name &idx:0 Store)) (Call (Name &compress:0 Load) (list (Name &v:0 Load)) nil) None)\n    (Assign\n      (list (Name &sum_bit:0 Store))\n      (Call (Name &BIT:0 Load) (list (Call (Name g_len Load) (list (Name &idx:0 Load)) nil)) nil)\n      None\n    )\n    (Assign\n      (list (Name &cnt_bit:0 Store))\n      (Call (Name &BIT:0 Load) (list (Call (Name g_len Load) (list (Name &idx:0 Load)) nil)) nil)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Tuple (list (Name &xi:0 Store) (Name &vi:0 Store)) Store)\n      (Name &xv:0 Load)\n      (/seq\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp\n            (BinOp\n              (Call\n                (Attribute (Name &cnt_bit:0 Load) s_acc Load)\n                (list (Subscript (Name &idx:0 Load) (Name &vi:0 Load) Load))\n                nil\n              )\n              Mult\n              (Name &xi:0 Load)\n            )\n            Sub\n            (Call\n              (Attribute (Name &sum_bit:0 Load) s_acc Load)\n              (list (Subscript (Name &idx:0 Load) (Name &vi:0 Load) Load))\n              nil\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &sum_bit:0 Load) s_add Load)\n            (list (Subscript (Name &idx:0 Load) (Name &vi:0 Load) Load) (Name &xi:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &cnt_bit:0 Load) s_add Load)\n            (list (Subscript (Name &idx:0 Load) (Name &vi:0 Load) Load) (Constant i1 None))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &bitadd:0\n      (arguments nil (list (arg &a:1 None None) (arg &w:1 None None) (arg &bit:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &x:1 Store)) (Name &a:1 Load) None)\n        (While\n          (Compare\n            (Name &x:1 Load)\n            (list LtE)\n            (list (BinOp (Call (Name g_len Load) (list (Name &bit:1 Load)) nil) Sub (Constant i1 None)))\n          )\n          (/seq\n            (AugAssign (Subscript (Name &bit:1 Load) (Name &x:1 Load) Store) Add (Name &w:1 Load))\n            (AugAssign\n              (Name &x:1 Store)\n              Add\n              (BinOp (Name &x:1 Load) BitAnd (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &x:1 Load)))\n            )\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &bitsum:0\n      (arguments nil (list (arg &a:2 None None) (arg &bit:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ret:2 Store)) (Constant i0 None) None)\n        (Assign (list (Name &x:2 Store)) (Name &a:2 Load) None)\n        (While\n          (Compare (Name &x:2 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &ret:2 Store) Add (Subscript (Name &bit:2 Load) (Name &x:2 Load) Load))\n            (AugAssign\n              (Name &x:2 Store)\n              Sub\n              (BinOp (Name &x:2 Load) BitAnd (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &x:2 Load)))\n            )\n          )\n          nil\n        )\n        (Return (Name &ret:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &vlis:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Name &v:0 Load)\n      (/seq (Expr (Call (Attribute (Name &vlis:0 Load) s_append Load) (list (Name &i:0 Load)) nil)))\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &vlis:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &vdic:0 Store)) (Dict nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &vdic:0 Load) (Subscript (Name &vlis:0 Load) (Name &i:0 Load) Load) Store))\n          (BinOp (Name &i:0 Load) Add (Constant i1 None))\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &xv:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &xv:0 Load) s_append Load)\n            (list\n              (List\n                (list\n                  (Subscript (Name &x:0 Load) (Name &i:0 Load) Load)\n                  (Subscript (Name &v:0 Load) (Name &i:0 Load) Load)\n                )\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &xv:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &BIT:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign\n      (list (Name &BIT2:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &x:0 Store) (Name &v:0 Store)) Store))\n          (Subscript (Name &xv:0 Load) (Name &i:0 Load) Load)\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp\n            (BinOp\n              (Name &x:0 Load)\n              Mult\n              (Call\n                (Name &bitsum:0 Load)\n                (list (Subscript (Name &vdic:0 Load) (Name &v:0 Load) Load) (Name &BIT2:0 Load))\n                nil\n              )\n            )\n            Sub\n            (Call\n              (Name &bitsum:0 Load)\n              (list (Subscript (Name &vdic:0 Load) (Name &v:0 Load) Load) (Name &BIT:0 Load))\n              nil\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Name &bitadd:0 Load)\n            (list (Subscript (Name &vdic:0 Load) (Name &v:0 Load) Load) (Name &x:0 Load) (Name &BIT:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name &bitadd:0 Load)\n            (list (Subscript (Name &vdic:0 Load) (Name &v:0 Load) Load) (Constant i1 None) (Name &BIT2:0 Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ClassDef\n      &Points:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments\n            nil\n            (list (arg &self:3 None None) (arg &x:3 None None) (arg &v:3 None None))\n            None\n            nil\n            nil\n            None\n            (list (Constant i0 None) (Constant i0 None))\n          )\n          (/seq\n            (Assign\n              (list\n                (Tuple (list (Attribute (Name &self:3 Load) s_x Store) (Attribute (Name &self:3 Load) s_v Store)) Store)\n              )\n              (Tuple (list (Name &x:3 Load) (Name &v:3 Load)) Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &Fenwick_tree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments\n            nil\n            (list (arg &self:4 None None) (arg &n:4 None None))\n            None\n            nil\n            nil\n            None\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Assign (list (Attribute (Name &self:4 Load) s_n Store)) (Name &n:4 Load) None)\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_bit Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:4 Load) Add (Constant i1 None)))\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:2\n          (arguments\n            nil\n            (list (arg &self:5 None None) (arg &x:5 None None) (arg &value:5 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (While\n              (Compare (Name &x:5 Load) (list LtE) (list (Attribute (Name &self:5 Load) s_n Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:5 Load) s_bit Load) (Name &x:5 Load) Store)\n                  Add\n                  (Name &value:5 Load)\n                )\n                (AugAssign (Name &x:5 Store) Add (BinOp (Name &x:5 Load) BitAnd (UnaryOp USub (Name &x:5 Load))))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get:2\n          (arguments nil (list (arg &self:6 None None) (arg &x:6 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &sum:6 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &x:6 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &sum:6 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:6 Load) s_bit Load) (Name &x:6 Load) Load)\n                )\n                (AugAssign (Name &x:6 Store) Sub (BinOp (Name &x:6 Load) BitAnd (UnaryOp USub (Name &x:6 Load))))\n              )\n              nil\n            )\n            (Return (Name &sum:6 Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &v:0 Store)) Store))\n      (Tuple\n        (list\n          (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call\n          (Name &Points:0 Load)\n          (list (Subscript (Name &x:0 Load) (Name &i:7 Load) Load) (Subscript (Name &v:0 Load) (Name &i:7 Load) Load))\n          nil\n        )\n        (list (comprehension (Name &i:7 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &a:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &value:9 None None)) None nil nil None nil)\n              (Attribute (Name &value:9 Load) s_x Load)\n            )\n          )\n        )\n      )\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (ListComp\n        (Attribute (Subscript (Name &a:0 Load) (Name &i:8 Load) Load) s_v Load)\n        (list (comprehension (Name &i:8 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &v:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &data:0 Store)) (Dict nil nil) None)\n    (Assign (list (Name &cnt:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (UnaryOp\n            Not\n            (Call\n              (Attribute (Name &data:0 Load) s___contains__ Load)\n              (list (Subscript (Name &v:0 Load) (Name &i:0 Load) Load))\n              nil\n            )\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &data:0 Load) (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) Store))\n              (Name &cnt:0 Load)\n              None\n            )\n            (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &cnt:0 Store)) (Call (Name &Fenwick_tree:0 Load) (list (Name &n:0 Load)) nil) None)\n    (Assign (list (Name &sum:0 Store)) (Call (Name &Fenwick_tree:0 Load) (list (Name &n:0 Load)) nil) None)\n    (Assign\n      (list (Tuple (list (Name &res:0 Store) (Name &i:0 Store)) Store))\n      (Tuple (list (Constant i0 None) (Constant i0 None)) Load)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Store))\n          (Subscript (Name &data:0 Load) (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load) Load)\n          None\n        )\n        (AugAssign\n          (Name &res:0 Store)\n          Add\n          (BinOp\n            (BinOp\n              (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_x Load)\n              Mult\n              (Call\n                (Attribute (Name &cnt:0 Load) s_get Load)\n                (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load))\n                nil\n              )\n            )\n            Sub\n            (Call\n              (Attribute (Name &sum:0 Load) s_get Load)\n              (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load))\n              nil\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &cnt:0 Load) s_update Load)\n            (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load) (Constant i1 None))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &sum:0 Load) s_update Load)\n            (list\n              (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load)\n              (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_x Load)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ClassDef\n      &SegmentTree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments\n            nil\n            (list (arg &self:9 None None) (arg &arr:9 None None) (arg &func:9 None None) (arg &initialRes:9 None None))\n            None\n            nil\n            nil\n            None\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Assign (list (Attribute (Name &self:9 Load) s_f Store)) (Name &func:9 Load) None)\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_N Store))\n              (Call (Name g_len Load) (list (Name &arr:9 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_tree Store))\n              (ListComp\n                (Constant i0 None)\n                (list\n                  (comprehension\n                    (Name &_:14 Store)\n                    (Call\n                      (Name g_range Load)\n                      (list (BinOp (Constant i4 None) Mult (Attribute (Name &self:9 Load) s_N Load)))\n                      nil\n                    )\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (Assign (list (Attribute (Name &self:9 Load) s_initialRes Store)) (Name &initialRes:9 Load) None)\n            (For\n              (Name &i:9 Store)\n              (Call (Name g_range Load) (list (Attribute (Name &self:9 Load) s_N Load)) nil)\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Attribute (Name &self:9 Load) s_tree Load)\n                      (BinOp (Attribute (Name &self:9 Load) s_N Load) Add (Name &i:9 Load))\n                      Store\n                    )\n                  )\n                  (Subscript (Name &arr:9 Load) (Name &i:9 Load) Load)\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (For\n              (Name &i:9 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (BinOp (Attribute (Name &self:9 Load) s_N Load) Sub (Constant i1 None))\n                  (Constant i0 None)\n                  (UnaryOp USub (Constant i1 None))\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:9 Load) s_tree Load) (Name &i:9 Load) Store))\n                  (Call\n                    (Attribute (Name &self:9 Load) s_f Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:9 Load) s_tree Load)\n                        (BinOp (Name &i:9 Load) LShift (Constant i1 None))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:9 Load) s_tree Load)\n                        (BinOp (BinOp (Name &i:9 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &updateTreeNode:1\n          (arguments\n            nil\n            (list (arg &self:10 None None) (arg &idx:10 None None) (arg &value:10 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:10 Load) s_tree Load)\n                  (BinOp (Name &idx:10 Load) Add (Attribute (Name &self:10 Load) s_N Load))\n                  Store\n                )\n              )\n              (Name &value:10 Load)\n              None\n            )\n            (AugAssign (Name &idx:10 Store) Add (Attribute (Name &self:10 Load) s_N Load))\n            (Assign (list (Name &i:10 Store)) (Name &idx:10 Load) None)\n            (While\n              (Compare (Name &i:10 Load) (list Gt) (list (Constant i1 None)))\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Attribute (Name &self:10 Load) s_tree Load)\n                      (BinOp (Name &i:10 Load) RShift (Constant i1 None))\n                      Store\n                    )\n                  )\n                  (Call\n                    (Attribute (Name &self:10 Load) s_f Load)\n                    (list\n                      (Subscript (Attribute (Name &self:10 Load) s_tree Load) (Name &i:10 Load) Load)\n                      (Subscript\n                        (Attribute (Name &self:10 Load) s_tree Load)\n                        (BinOp (Name &i:10 Load) BitXor (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (AugAssign (Name &i:10 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:1\n          (arguments\n            nil\n            (list (arg &self:11 None None) (arg &l:11 None None) (arg &r:11 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &r:11 Store) Add (Constant i1 None))\n            (Assign (list (Name &res:11 Store)) (Attribute (Name &self:11 Load) s_initialRes Load) None)\n            (AugAssign (Name &l:11 Store) Add (Attribute (Name &self:11 Load) s_N Load))\n            (AugAssign (Name &r:11 Store) Add (Attribute (Name &self:11 Load) s_N Load))\n            (While\n              (Compare (Name &l:11 Load) (list Lt) (list (Name &r:11 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &l:11 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (Assign\n                      (list (Name &res:11 Store))\n                      (Call\n                        (Attribute (Name &self:11 Load) s_f Load)\n                        (list\n                          (Name &res:11 Load)\n                          (Subscript (Attribute (Name &self:11 Load) s_tree Load) (Name &l:11 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign (Name &l:11 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (If\n                  (BinOp (Name &r:11 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign (Name &r:11 Store) Sub (Constant i1 None))\n                    (Assign\n                      (list (Name &res:11 Store))\n                      (Call\n                        (Attribute (Name &self:11 Load) s_f Load)\n                        (list\n                          (Name &res:11 Load)\n                          (Subscript (Attribute (Name &self:11 Load) s_tree Load) (Name &r:11 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n                (AugAssign (Name &l:11 Store) RShift (Constant i1 None))\n                (AugAssign (Name &r:11 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n            (Return (Name &res:11 Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &getMaxSegTree:0\n      (arguments nil (list (arg &arr:2 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name &SegmentTree:0 Load)\n            (list\n              (Name &arr:2 Load)\n              (Lambda\n                (arguments nil (list (arg &a:15 None None) (arg &b:15 None None)) None nil nil None nil)\n                (Call (Name g_max Load) (list (Name &a:15 Load) (Name &b:15 Load)) nil)\n              )\n            )\n            (list (keyword s_initialRes (UnaryOp USub (Call (Name g_float Load) (list (Constant s_inf None)) nil))))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getMinSegTree:0\n      (arguments nil (list (arg &arr:3 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name &SegmentTree:0 Load)\n            (list\n              (Name &arr:3 Load)\n              (Lambda\n                (arguments nil (list (arg &a:16 None None) (arg &b:16 None None)) None nil nil None nil)\n                (Call (Name g_min Load) (list (Name &a:16 Load) (Name &b:16 Load)) nil)\n              )\n            )\n            (list (keyword s_initialRes (Call (Name g_float Load) (list (Constant s_inf None)) nil)))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getSumSegTree:0\n      (arguments nil (list (arg &arr:4 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name &SegmentTree:0 Load)\n            (list\n              (Name &arr:4 Load)\n              (Lambda\n                (arguments nil (list (arg &a:17 None None) (arg &b:17 None None)) None nil nil None nil)\n                (BinOp (Name &a:17 Load) Add (Name &b:17 Load))\n              )\n            )\n            (list (keyword s_initialRes (Constant i0 None)))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:5 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (Assign (list (Name &xes:5 Store)) (Call (Name &readIntArr:0 Load) nil nil) None)\n        (Assign (list (Name &ves:5 Store)) (Call (Name &readIntArr:0 Load) nil nil) None)\n        (Assign\n          (list (Name &xes2:5 Store))\n          (Call (Name g_list Load) (list (Call (Name g_sorted Load) (list (Name &xes:5 Load)) nil)) nil)\n          None\n        )\n        (Assign (list (Name &xTox2Map:5 Store)) (Call (Name g_dict Load) nil nil) None)\n        (For\n          (Tuple (list (Name &i:5 Store) (Name &x:5 Store)) Store)\n          (Call (Name g_enumerate Load) (list (Name &xes2:5 Load)) nil)\n          (/seq (Assign (list (Subscript (Name &xTox2Map:5 Load) (Name &x:5 Load) Store)) (Name &i:5 Load) None))\n          nil\n          None\n        )\n        (Assign (list (Name &arr:5 Store)) (List nil Load) None)\n        (For\n          (Name &i:5 Store)\n          (Call (Name g_range Load) (list (Name &n:5 Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &arr:5 Load) s_append Load)\n                (list\n                  (List\n                    (list\n                      (Subscript (Name &xes:5 Load) (Name &i:5 Load) Load)\n                      (Subscript (Name &xTox2Map:5 Load) (Subscript (Name &xes:5 Load) (Name &i:5 Load) Load) Load)\n                      (Subscript (Name &ves:5 Load) (Name &i:5 Load) Load)\n                    )\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &arr:5 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:18 None None)) None nil nil None nil)\n                  (Tuple\n                    (list\n                      (Subscript (Name &x:18 Load) (Constant i2 None) Load)\n                      (Subscript (Name &x:18 Load) (Constant i0 None) Load)\n                    )\n                    Load\n                  )\n                )\n              )\n            )\n          )\n        )\n        (Assign\n          (list (Name &segArray:5 Store))\n          (ListComp\n            (Constant i0 None)\n            (list (comprehension (Name &_:12 Store) (Call (Name g_range Load) (list (Name &n:5 Load)) nil) nil i0))\n          )\n          None\n        )\n        (Assign (list (Name &st:5 Store)) (Call (Name &getSumSegTree:0 Load) (list (Name &segArray:5 Load)) nil) None)\n        (Assign\n          (list (Name &stCnts:5 Store))\n          (Call (Name &getSumSegTree:0 Load) (list (Call (Attribute (Name &segArray:5 Load) s_copy Load) nil nil)) nil)\n          None\n        )\n        (Assign (list (Name &ans:5 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (Name &originalX:5 Store) (Name &compressedX:5 Store) (Name &v:5 Store)) Store)\n          (Name &arr:5 Load)\n          (/seq\n            (Assign\n              (list (Name &smallerSums:5 Store))\n              (Call (Attribute (Name &st:5 Load) s_query Load) (list (Constant i0 None) (Name &compressedX:5 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &smallerCounts:5 Store))\n              (Call\n                (Attribute (Name &stCnts:5 Load) s_query Load)\n                (list (Constant i0 None) (Name &compressedX:5 Load))\n                nil\n              )\n              None\n            )\n            (AugAssign\n              (Name &ans:5 Store)\n              Add\n              (BinOp (BinOp (Name &originalX:5 Load) Mult (Name &smallerCounts:5 Load)) Sub (Name &smallerSums:5 Load))\n            )\n            (Expr\n              (Call\n                (Attribute (Name &st:5 Load) s_updateTreeNode Load)\n                (list (Name &compressedX:5 Load) (Name &originalX:5 Load))\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Attribute (Name &stCnts:5 Load) s_updateTreeNode Load)\n                (list (Name &compressedX:5 Load) (Constant i1 None))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:5 Load)) nil))\n        (Return None)\n      )\n      nil\n      None\n      None\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (FunctionDef\n      &oneLineArrayPrint:0\n      (arguments nil (list (arg &arr:6 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call (Name g_str Load) (list (Name &x:19 Load)) nil)\n                    (list (comprehension (Name &x:19 Store) (Name &arr:6 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &multiLineArrayPrint:0\n      (arguments nil (list (arg &arr:7 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEwXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call (Name g_str Load) (list (Name &x:20 Load)) nil)\n                    (list (comprehension (Name &x:20 Store) (Name &arr:7 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &multiLineArrayOfArraysPrint:0\n      (arguments nil (list (arg &arr:8 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEwXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call\n                      (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                      (list\n                        (ListComp\n                          (Call (Name g_str Load) (list (Name &x:22 Load)) nil)\n                          (list (comprehension (Name &x:22 Store) (Name &y:21 Load) nil i0))\n                        )\n                      )\n                      nil\n                    )\n                    (list (comprehension (Name &y:21 Store) (Name &arr:8 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &readIntArr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:13 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:13 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &inf:0 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None)\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_collections (list (alias g_Counter None)) i0)\n    (ImportFrom s_bisect (list (alias g_bisect_left None)) i0)\n    (FunctionDef\n      &input:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n              s_strip\n              Load\n            )\n            nil\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &list2d:0\n      (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (BinOp (List (list (Name &c:2 Load)) Load) Mult (Name &b:2 Load))\n            (list (comprehension (Name &i:12 Store) (Call (Name g_range Load) (list (Name &a:2 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &list3d:0\n      (arguments\n        nil\n        (list (arg &a:3 None None) (arg &b:3 None None) (arg &c:3 None None) (arg &d:3 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Return\n          (ListComp\n            (ListComp\n              (BinOp (List (list (Name &d:3 Load)) Load) Mult (Name &c:3 Load))\n              (list (comprehension (Name &j:15 Store) (Call (Name g_range Load) (list (Name &b:3 Load)) nil) nil i0))\n            )\n            (list (comprehension (Name &i:13 Store) (Call (Name g_range Load) (list (Name &a:3 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &list4d:0\n      (arguments\n        nil\n        (list (arg &a:4 None None) (arg &b:4 None None) (arg &c:4 None None) (arg &d:4 None None) (arg &e:4 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Return\n          (ListComp\n            (ListComp\n              (ListComp\n                (BinOp (List (list (Name &e:4 Load)) Load) Mult (Name &d:4 Load))\n                (list (comprehension (Name &j:18 Store) (Call (Name g_range Load) (list (Name &c:4 Load)) nil) nil i0))\n              )\n              (list (comprehension (Name &j:16 Store) (Call (Name g_range Load) (list (Name &b:4 Load)) nil) nil i0))\n            )\n            (list (comprehension (Name &i:14 Store) (Call (Name g_range Load) (list (Name &a:4 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ceil:0\n      (arguments nil (list (arg &x:5 None None) (arg &y:5 None None)) None nil nil None (list (Constant i1 None)))\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list (UnaryOp USub (BinOp (UnaryOp USub (Name &x:5 Load)) FloorDiv (Name &y:5 Load))))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &INT:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &MAP:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LIST:0\n      (arguments nil (list (arg &N:6 None None)) None nil nil None (list (Constant None None)))\n      (/seq\n        (Return\n          (IfExp\n            (Compare (Name &N:6 Load) (list Is) (list (Constant None None)))\n            (Call (Name g_list Load) (list (Call (Name &MAP:0 Load) nil nil)) nil)\n            (ListComp\n              (Call (Name &INT:0 Load) nil nil)\n              (list (comprehension (Name &i:17 Store) (Call (Name g_range Load) (list (Name &N:6 Load)) nil) nil i0))\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &Yes:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_Yes None)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &No:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_No None)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &YES:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &NO:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &INF:0 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None)\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (ClassDef\n      &BIT:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:7 None None) (arg &n:7 None None)) None nil nil None nil)\n          (/seq\n            (AugAssign (Name &n:7 Store) Add (Constant i1 None))\n            (Assign (list (Name &nv:7 Store)) (Constant i1 None) None)\n            (While\n              (Compare (Name &nv:7 Load) (list Lt) (list (Name &n:7 Load)))\n              (/seq (AugAssign (Name &nv:7 Store) Mult (Constant i2 None)))\n              nil\n            )\n            (Assign (list (Attribute (Name &self:7 Load) s_size Store)) (Name &nv:7 Load) None)\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_tree Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (Name &nv:7 Load))\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &sum:1\n          (arguments nil (list (arg &self:8 None None) (arg &i:8 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &s:8 Store)) (Constant i0 None) None)\n            (AugAssign (Name &i:8 Store) Add (Constant i1 None))\n            (While\n              (Compare (Name &i:8 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &s:8 Store)\n                  Add\n                  (Subscript\n                    (Attribute (Name &self:8 Load) s_tree Load)\n                    (BinOp (Name &i:8 Load) Sub (Constant i1 None))\n                    Load\n                  )\n                )\n                (AugAssign (Name &i:8 Store) Sub (BinOp (Name &i:8 Load) BitAnd (UnaryOp USub (Name &i:8 Load))))\n              )\n              nil\n            )\n            (Return (Name &s:8 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:1\n          (arguments nil (list (arg &self:9 None None) (arg &i:9 None None) (arg &x:9 None None)) None nil nil None nil)\n          (/seq\n            (AugAssign (Name &i:9 Store) Add (Constant i1 None))\n            (While\n              (Compare (Name &i:9 Load) (list LtE) (list (Attribute (Name &self:9 Load) s_size Load)))\n              (/seq\n                (AugAssign\n                  (Subscript\n                    (Attribute (Name &self:9 Load) s_tree Load)\n                    (BinOp (Name &i:9 Load) Sub (Constant i1 None))\n                    Store\n                  )\n                  Add\n                  (Name &x:9 Load)\n                )\n                (AugAssign (Name &i:9 Store) Add (BinOp (Name &i:9 Load) BitAnd (UnaryOp USub (Name &i:9 Load))))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get:1\n          (arguments\n            nil\n            (list (arg &self:10 None None) (arg &l:10 None None) (arg &r:10 None None))\n            None\n            nil\n            nil\n            None\n            (list (Constant None None))\n          )\n          (/seq\n            (If\n              (Compare (Name &r:10 Load) (list Is) (list (Constant None None)))\n              (/seq (Assign (list (Name &r:10 Store)) (BinOp (Name &l:10 Load) Add (Constant i1 None)) None))\n              nil\n            )\n            (Assign (list (Name &res:10 Store)) (Constant i0 None) None)\n            (If\n              (Name &r:10 Load)\n              (/seq\n                (AugAssign\n                  (Name &res:10 Store)\n                  Add\n                  (Call\n                    (Attribute (Name &self:10 Load) s_sum Load)\n                    (list (BinOp (Name &r:10 Load) Sub (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (If\n              (Name &l:10 Load)\n              (/seq\n                (AugAssign\n                  (Name &res:10 Store)\n                  Sub\n                  (Call\n                    (Attribute (Name &self:10 Load) s_sum Load)\n                    (list (BinOp (Name &l:10 Load) Sub (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (Return (Name &res:10 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:1\n          (arguments\n            nil\n            (list (arg &self:11 None None) (arg &i:11 None None) (arg &x:11 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &self:11 Load) s_add Load)\n                (list\n                  (Name &i:11 Load)\n                  (BinOp\n                    (Name &x:11 Load)\n                    Sub\n                    (Call (Attribute (Name &self:11 Load) s_get Load) (list (Name &i:11 Load)) nil)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &N:0 Store)) (Call (Name &INT:0 Load) nil nil) None)\n    (Assign (list (Name &A:0 Store)) (Call (Name &LIST:0 Load) nil nil) None)\n    (Assign (list (Name &B:0 Store)) (Call (Name &LIST:0 Load) nil nil) None)\n    (Assign\n      (list (Name &AB:0 Store))\n      (Call (Name g_list Load) (list (Call (Name g_zip Load) (list (Name &A:0 Load) (Name &B:0 Load)) nil)) nil)\n      None\n    )\n    (Expr (Call (Attribute (Name &AB:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &B:0 Store))\n      (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &B:0 Load)) nil)) nil)\n      None\n    )\n    (Assign (list (Name &M:0 Store)) (Call (Name g_len Load) (list (Name &B:0 Load)) nil) None)\n    (Assign (list (Name &bit1:0 Store)) (Call (Name &BIT:0 Load) (list (Name &M:0 Load)) nil) None)\n    (Assign (list (Name &bit2:0 Store)) (Call (Name &BIT:0 Load) (list (Name &M:0 Load)) nil) None)\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)\n      (Name &AB:0 Load)\n      (/seq\n        (Assign\n          (list (Name &pos:0 Store))\n          (Call (Name g_bisect_left Load) (list (Name &B:0 Load) (Name &b:0 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &sm:0 Store))\n          (Call (Attribute (Name &bit1:0 Load) s_sum Load) (list (Name &pos:0 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &cnt:0 Store))\n          (Call (Attribute (Name &bit2:0 Load) s_sum Load) (list (Name &pos:0 Load)) nil)\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp (BinOp (Name &cnt:0 Load) Mult (Name &a:0 Load)) Sub (Name &sm:0 Load))\n        )\n        (Expr (Call (Attribute (Name &bit1:0 Load) s_add Load) (list (Name &pos:0 Load) (Name &a:0 Load)) nil))\n        (Expr (Call (Attribute (Name &bit2:0 Load) s_add Load) (list (Name &pos:0 Load) (Constant i1 None)) nil))\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (FunctionDef\n      &getsum:0\n      (arguments nil (list (arg &BITTree:1 None None) (arg &i:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:1 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &i:1 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &s:1 Store) Add (Subscript (Name &BITTree:1 Load) (Name &i:1 Load) Load))\n            (AugAssign (Name &i:1 Store) Sub (BinOp (Name &i:1 Load) BitAnd (UnaryOp USub (Name &i:1 Load))))\n          )\n          nil\n        )\n        (Return (Name &s:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &updatebit:0\n      (arguments\n        nil\n        (list (arg &BITTree:2 None None) (arg &n:2 None None) (arg &i:2 None None) (arg &v:2 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (While\n          (Compare (Name &i:2 Load) (list LtE) (list (Name &n:2 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &BITTree:2 Load) (Name &i:2 Load) Store) Add (Name &v:2 Load))\n            (AugAssign (Name &i:2 Store) Add (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:3 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:3 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            (list (Compare (Name &i:3 Load) (list NotEq) (list (Constant s-WzEwXQ== None))))\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:4 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:4 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            (list (Compare (Name &i:4 Load) (list NotEq) (list (Constant s-WzEwXQ== None))))\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &v:0 Load) (Name &i:0 Load) Store))\n          (List (list (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Name &i:0 Load)) Load)\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &v:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &pos:0 Store)) (Call (Name g_dict Load) nil nil) None)\n    (Assign\n      (list (Tuple (list (Name &store:0 Store) (Name &prev:0 Store)) Store))\n      (Tuple\n        (list\n          (Constant i1 None)\n          (Subscript (Subscript (Name &v:0 Load) (Constant i0 None) Load) (Constant i0 None) Load)\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare\n                (Name &prev:0 Load)\n                (list Eq)\n                (list (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load))\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &pos:0 Load)\n                      (Subscript\n                        (Name &x:0 Load)\n                        (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n                        Load\n                      )\n                      Store\n                    )\n                  )\n                  (Name &store:0 Load)\n                  None\n                )\n              )\n              (/seq\n                (AugAssign (Name &store:0 Store) Add (Constant i1 None))\n                (Assign\n                  (list\n                    (Subscript\n                      (Name &pos:0 Load)\n                      (Subscript\n                        (Name &x:0 Load)\n                        (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n                        Load\n                      )\n                      Store\n                    )\n                  )\n                  (Name &store:0 Load)\n                  None\n                )\n                (Assign\n                  (list (Name &prev:0 Store))\n                  (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n                  None\n                )\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Name &pos:0 Load)\n                  (Subscript\n                    (Name &x:0 Load)\n                    (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n                    Load\n                  )\n                  Store\n                )\n              )\n              (Name &store:0 Load)\n              None\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &sort:0 Store))\n      (Call (Name g_sorted Load) (list (Call (Attribute (Name &pos:0 Load) s_keys Load) nil nil)) nil)\n      None\n    )\n    (Assign\n      (list (Name &bit:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign\n      (list (Name &ind:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &ans:0 Store) (Name &count:0 Store) (Name &diff:0 Store)) Store))\n      (Tuple (list (Constant i0 None) (Constant i0 None) (Constant i0 None)) Load)\n      None\n    )\n    (Assign (list (Name &length:0 Store)) (Call (Name g_max Load) (list (Name &sort:0 Load)) nil) None)\n    (Assign (list (Name &total:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Call (Name g_len Load) (list (Name &sort:0 Load)) nil) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &count:0 Store))\n          (Call\n            (Name &getsum:0 Load)\n            (list\n              (Name &bit:0 Load)\n              (BinOp\n                (Subscript (Name &pos:0 Load) (Subscript (Name &sort:0 Load) (Name &i:0 Load) Load) Load)\n                Sub\n                (Constant i1 None)\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &diff:0 Store))\n          (Call\n            (Name &getsum:0 Load)\n            (list\n              (Name &ind:0 Load)\n              (BinOp\n                (Subscript (Name &pos:0 Load) (Subscript (Name &sort:0 Load) (Name &i:0 Load) Load) Load)\n                Sub\n                (Constant i1 None)\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n          (/seq\n            (AugAssign\n              (Name &total:0 Store)\n              Add\n              (BinOp\n                (BinOp\n                  (Subscript (Name &sort:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n                  Sub\n                  (Subscript (Name &sort:0 Load) (Name &i:0 Load) Load)\n                )\n                Mult\n                (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Sub (Name &i:0 Load))\n              )\n            )\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (BinOp\n                (Name &total:0 Load)\n                Sub\n                (BinOp\n                  (Name &diff:0 Load)\n                  Sub\n                  (BinOp (Name &count:0 Load) Mult (Subscript (Name &sort:0 Load) (Name &i:0 Load) Load))\n                )\n              )\n            )\n          )\n          nil\n        )\n        (Expr\n          (Call\n            (Name &updatebit:0 Load)\n            (list\n              (Name &bit:0 Load)\n              (BinOp (Call (Name g_len Load) (list (Name &bit:0 Load)) nil) Sub (Constant i1 None))\n              (Subscript (Name &pos:0 Load) (Subscript (Name &sort:0 Load) (Name &i:0 Load) Load) Load)\n              (Constant i1 None)\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name &updatebit:0 Load)\n            (list\n              (Name &ind:0 Load)\n              (BinOp (Call (Name g_len Load) (list (Name &ind:0 Load)) nil) Sub (Constant i1 None))\n              (Subscript (Name &pos:0 Load) (Subscript (Name &sort:0 Load) (Name &i:0 Load) Load) Load)\n              (Subscript (Name &sort:0 Load) (Name &i:0 Load) Load)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &ans:0 Load)) nil)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &add:0\n      (arguments nil (list (arg &bit:1 None None) (arg &x:1 None None) (arg &v:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &x:1 Load) (list Lt) (list (Call (Name g_len Load) (list (Name &bit:1 Load)) nil)))\n          (/seq\n            (AugAssign (Subscript (Name &bit:1 Load) (Name &x:1 Load) Store) Add (Name &v:1 Load))\n            (AugAssign (Name &x:1 Store) Add (BinOp (Name &x:1 Load) BitAnd (UnaryOp USub (Name &x:1 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &query:0\n      (arguments nil (list (arg &bit:2 None None) (arg &x:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ans:2 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &x:2 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &ans:2 Store) Add (Subscript (Name &bit:2 Load) (Name &x:2 Load) Load))\n            (AugAssign (Name &x:2 Store) Sub (BinOp (Name &x:2 Load) BitAnd (UnaryOp USub (Name &x:2 Load))))\n          )\n          nil\n        )\n        (Return (Name &ans:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &relabel:0\n      (arguments nil (list (arg &arr:3 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &srt:3 Store))\n          (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &arr:3 Load)) nil)) nil)\n          None\n        )\n        (Assign\n          (list (Name &mp:3 Store))\n          (DictComp\n            (Name &v:4 Load)\n            (Name &k:4 Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &k:4 Store) (Name &v:4 Store)) Store)\n                (Call (Name g_enumerate Load) (list (Name &srt:3 Load) (Constant i1 None)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &arr:3 Store))\n          (ListComp\n            (Subscript (Name &mp:3 Load) (Name &a:5 Load) Load)\n            (list (comprehension (Name &a:5 Store) (Name &arr:3 Load) nil i0))\n          )\n          None\n        )\n        (Return (Name &arr:3 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (Call\n        (Name &relabel:0 Load)\n        (list\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (Call (Name g_list Load) (list (Call (Name g_zip Load) (list (Name &x:0 Load) (Name &v:0 Load)) nil)) nil)\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &bitSum:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign\n      (list (Name &bitCnt:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (For\n      (Tuple (list (Name &x:0 Store) (Name &v:0 Store)) Store)\n      (Name &arr:0 Load)\n      (/seq\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp\n            (BinOp (Call (Name &query:0 Load) (list (Name &bitCnt:0 Load) (Name &v:0 Load)) nil) Mult (Name &x:0 Load))\n            Sub\n            (Call (Name &query:0 Load) (list (Name &bitSum:0 Load) (Name &v:0 Load)) nil)\n          )\n        )\n        (Expr (Call (Name &add:0 Load) (list (Name &bitSum:0 Load) (Name &v:0 Load) (Name &x:0 Load)) nil))\n        (Expr (Call (Name &add:0 Load) (list (Name &bitCnt:0 Load) (Name &v:0 Load) (Constant i1 None)) nil))\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ClassDef\n      &SegmentTree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments\n            nil\n            (list (arg &self:9 None None) (arg &N:9 None None) (arg &func:9 None None) (arg &initialRes:9 None None))\n            None\n            nil\n            nil\n            None\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Assign (list (Attribute (Name &self:9 Load) s_f Store)) (Name &func:9 Load) None)\n            (Assign (list (Attribute (Name &self:9 Load) s_N Store)) (Name &N:9 Load) None)\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_tree Store))\n              (ListComp\n                (Constant i0 None)\n                (list\n                  (comprehension\n                    (Name &_:13 Store)\n                    (Call\n                      (Name g_range Load)\n                      (list (BinOp (Constant i4 None) Mult (Attribute (Name &self:9 Load) s_N Load)))\n                      nil\n                    )\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (Assign (list (Attribute (Name &self:9 Load) s_initialRes Store)) (Name &initialRes:9 Load) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &updateTreeNode:1\n          (arguments\n            nil\n            (list (arg &self:10 None None) (arg &idx:10 None None) (arg &value:10 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:10 Load) s_tree Load)\n                  (BinOp (Name &idx:10 Load) Add (Attribute (Name &self:10 Load) s_N Load))\n                  Store\n                )\n              )\n              (Name &value:10 Load)\n              None\n            )\n            (AugAssign (Name &idx:10 Store) Add (Attribute (Name &self:10 Load) s_N Load))\n            (Assign (list (Name &i:10 Store)) (Name &idx:10 Load) None)\n            (While\n              (Compare (Name &i:10 Load) (list Gt) (list (Constant i1 None)))\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Attribute (Name &self:10 Load) s_tree Load)\n                      (BinOp (Name &i:10 Load) RShift (Constant i1 None))\n                      Store\n                    )\n                  )\n                  (Call\n                    (Attribute (Name &self:10 Load) s_f Load)\n                    (list\n                      (Subscript (Attribute (Name &self:10 Load) s_tree Load) (Name &i:10 Load) Load)\n                      (Subscript\n                        (Attribute (Name &self:10 Load) s_tree Load)\n                        (BinOp (Name &i:10 Load) BitXor (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (AugAssign (Name &i:10 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:1\n          (arguments\n            nil\n            (list (arg &self:11 None None) (arg &l:11 None None) (arg &r:11 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &r:11 Store) Add (Constant i1 None))\n            (Assign (list (Name &res:11 Store)) (Attribute (Name &self:11 Load) s_initialRes Load) None)\n            (AugAssign (Name &l:11 Store) Add (Attribute (Name &self:11 Load) s_N Load))\n            (AugAssign (Name &r:11 Store) Add (Attribute (Name &self:11 Load) s_N Load))\n            (While\n              (Compare (Name &l:11 Load) (list Lt) (list (Name &r:11 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &l:11 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (Assign\n                      (list (Name &res:11 Store))\n                      (Call\n                        (Attribute (Name &self:11 Load) s_f Load)\n                        (list\n                          (Name &res:11 Load)\n                          (Subscript (Attribute (Name &self:11 Load) s_tree Load) (Name &l:11 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign (Name &l:11 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (If\n                  (BinOp (Name &r:11 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign (Name &r:11 Store) Sub (Constant i1 None))\n                    (Assign\n                      (list (Name &res:11 Store))\n                      (Call\n                        (Attribute (Name &self:11 Load) s_f Load)\n                        (list\n                          (Name &res:11 Load)\n                          (Subscript (Attribute (Name &self:11 Load) s_tree Load) (Name &r:11 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n                (AugAssign (Name &l:11 Store) RShift (Constant i1 None))\n                (AugAssign (Name &r:11 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n            (Return (Name &res:11 Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &getMaxSegTree:0\n      (arguments nil (list (arg &arr:2 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name &SegmentTree:0 Load)\n            (list\n              (Name &arr:2 Load)\n              (Lambda\n                (arguments nil (list (arg &a:14 None None) (arg &b:14 None None)) None nil nil None nil)\n                (Call (Name g_max Load) (list (Name &a:14 Load) (Name &b:14 Load)) nil)\n              )\n            )\n            (list (keyword s_initialRes (UnaryOp USub (Call (Name g_float Load) (list (Constant s_inf None)) nil))))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getMinSegTree:0\n      (arguments nil (list (arg &arr:3 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name &SegmentTree:0 Load)\n            (list\n              (Name &arr:3 Load)\n              (Lambda\n                (arguments nil (list (arg &a:15 None None) (arg &b:15 None None)) None nil nil None nil)\n                (Call (Name g_min Load) (list (Name &a:15 Load) (Name &b:15 Load)) nil)\n              )\n            )\n            (list (keyword s_initialRes (Call (Name g_float Load) (list (Constant s_inf None)) nil)))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getSumSegTree:0\n      (arguments nil (list (arg &arr:4 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name &SegmentTree:0 Load)\n            (list\n              (Name &arr:4 Load)\n              (Lambda\n                (arguments nil (list (arg &a:16 None None) (arg &b:16 None None)) None nil nil None nil)\n                (BinOp (Name &a:16 Load) Add (Name &b:16 Load))\n              )\n            )\n            (list (keyword s_initialRes (Constant i0 None)))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:5 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (Assign (list (Name &xes:5 Store)) (Call (Name &readIntArr:0 Load) nil nil) None)\n        (Assign (list (Name &ves:5 Store)) (Call (Name &readIntArr:0 Load) nil nil) None)\n        (Assign\n          (list (Name &xes2:5 Store))\n          (Call (Name g_list Load) (list (Call (Name g_sorted Load) (list (Name &xes:5 Load)) nil)) nil)\n          None\n        )\n        (Assign (list (Name &xTox2Map:5 Store)) (Call (Name g_dict Load) nil nil) None)\n        (For\n          (Tuple (list (Name &i:5 Store) (Name &x:5 Store)) Store)\n          (Call (Name g_enumerate Load) (list (Name &xes2:5 Load)) nil)\n          (/seq (Assign (list (Subscript (Name &xTox2Map:5 Load) (Name &x:5 Load) Store)) (Name &i:5 Load) None))\n          nil\n          None\n        )\n        (Assign (list (Name &arr:5 Store)) (List nil Load) None)\n        (For\n          (Name &i:5 Store)\n          (Call (Name g_range Load) (list (Name &n:5 Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &arr:5 Load) s_append Load)\n                (list\n                  (List\n                    (list\n                      (Subscript (Name &xes:5 Load) (Name &i:5 Load) Load)\n                      (Subscript (Name &xTox2Map:5 Load) (Subscript (Name &xes:5 Load) (Name &i:5 Load) Load) Load)\n                      (Subscript (Name &ves:5 Load) (Name &i:5 Load) Load)\n                    )\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &arr:5 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:17 None None)) None nil nil None nil)\n                  (Tuple\n                    (list\n                      (Subscript (Name &x:17 Load) (Constant i2 None) Load)\n                      (Subscript (Name &x:17 Load) (Constant i0 None) Load)\n                    )\n                    Load\n                  )\n                )\n              )\n            )\n          )\n        )\n        (Assign (list (Name &st:5 Store)) (Call (Name &getSumSegTree:0 Load) (list (Name &n:5 Load)) nil) None)\n        (Assign (list (Name &stCnts:5 Store)) (Call (Name &getSumSegTree:0 Load) (list (Name &n:5 Load)) nil) None)\n        (Assign (list (Name &ans:5 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (Name &originalX:5 Store) (Name &compressedX:5 Store) (Name &v:5 Store)) Store)\n          (Name &arr:5 Load)\n          (/seq\n            (Assign\n              (list (Name &smallerSums:5 Store))\n              (Call (Attribute (Name &st:5 Load) s_query Load) (list (Constant i0 None) (Name &compressedX:5 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &smallerCounts:5 Store))\n              (Call\n                (Attribute (Name &stCnts:5 Load) s_query Load)\n                (list (Constant i0 None) (Name &compressedX:5 Load))\n                nil\n              )\n              None\n            )\n            (AugAssign\n              (Name &ans:5 Store)\n              Add\n              (BinOp (BinOp (Name &originalX:5 Load) Mult (Name &smallerCounts:5 Load)) Sub (Name &smallerSums:5 Load))\n            )\n            (Expr\n              (Call\n                (Attribute (Name &st:5 Load) s_updateTreeNode Load)\n                (list (Name &compressedX:5 Load) (Name &originalX:5 Load))\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Attribute (Name &stCnts:5 Load) s_updateTreeNode Load)\n                (list (Name &compressedX:5 Load) (Constant i1 None))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:5 Load)) nil))\n        (Return None)\n      )\n      nil\n      None\n      None\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (FunctionDef\n      &oneLineArrayPrint:0\n      (arguments nil (list (arg &arr:6 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call (Name g_str Load) (list (Name &x:18 Load)) nil)\n                    (list (comprehension (Name &x:18 Store) (Name &arr:6 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &multiLineArrayPrint:0\n      (arguments nil (list (arg &arr:7 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEwXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call (Name g_str Load) (list (Name &x:19 Load)) nil)\n                    (list (comprehension (Name &x:19 Store) (Name &arr:7 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &multiLineArrayOfArraysPrint:0\n      (arguments nil (list (arg &arr:8 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEwXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call\n                      (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                      (list\n                        (ListComp\n                          (Call (Name g_str Load) (list (Name &x:21 Load)) nil)\n                          (list (comprehension (Name &x:21 Store) (Name &y:20 Load) nil i0))\n                        )\n                      )\n                      nil\n                    )\n                    (list (comprehension (Name &y:20 Store) (Name &arr:8 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &readIntArr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:12 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:12 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &inf:0 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None)\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_os (list (alias g_path None)) i0)\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (ImportFrom s_bisect (list (alias g_bisect_left None)) i0)\n    (If\n      (Call (Attribute (Name g_path Load) s_exists Load) (list (Constant s_inp.txt None)) nil)\n      (/seq\n        (Assign\n          (list (Name &stdin:0 Store))\n          (Call (Name g_open Load) (list (Constant s_inp.txt None) (Constant s_r None)) nil)\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &maxn:0 Store)) (Constant i200005 None) None)\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (Assign (list (Name &b:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &fen:0 Store))\n      (ListComp\n        (Tuple (list (Constant i0 None) (Constant i0 None)) Load)\n        (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (Name &maxn:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &n:0 Store))\n      (Call (Name g_int Load) (list (Call (Attribute (Name &stdin:0 Load) s_readline Load) nil nil)) nil)\n      None\n    )\n    (FunctionDef\n      &update:0\n      (arguments nil (list (arg &x:1 None None) (arg &val:1 None None)) None nil nil None nil)\n      (/seq\n        (Global (list s_fen))\n        (While\n          (Compare (Name &x:1 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Subscript (Name g_fen Load) (Name &x:1 Load) Store))\n              (Tuple\n                (list\n                  (BinOp\n                    (Subscript (Subscript (Name g_fen Load) (Name &x:1 Load) Load) (Constant i0 None) Load)\n                    Add\n                    (Name &val:1 Load)\n                  )\n                  (BinOp\n                    (Subscript (Subscript (Name g_fen Load) (Name &x:1 Load) Load) (Constant i1 None) Load)\n                    Add\n                    (Constant i1 None)\n                  )\n                )\n                Load\n              )\n              None\n            )\n            (AugAssign (Name &x:1 Store) Sub (BinOp (Name &x:1 Load) BitAnd (UnaryOp USub (Name &x:1 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &get:0\n      (arguments nil (list (arg &x:2 None None) (arg &val:2 None None)) None nil nil None nil)\n      (/seq\n        (Global (list s_n s_fen))\n        (Assign (list (Name &A:2 Store)) (Constant i0 None) None)\n        (Assign (list (Name &B:2 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &x:2 Load) (list Lt) (list (BinOp (Name g_n Load) Add (Constant i2 None))))\n          (/seq\n            (AugAssign\n              (Name &A:2 Store)\n              Add\n              (Subscript (Subscript (Name g_fen Load) (Name &x:2 Load) Load) (Constant i0 None) Load)\n            )\n            (AugAssign\n              (Name &B:2 Store)\n              Add\n              (Subscript (Subscript (Name g_fen Load) (Name &x:2 Load) Load) (Constant i1 None) Load)\n            )\n            (AugAssign (Name &x:2 Store) Add (BinOp (Name &x:2 Load) BitAnd (UnaryOp USub (Name &x:2 Load))))\n          )\n          nil\n        )\n        (Return (BinOp (Name &A:2 Load) Sub (BinOp (Name &B:2 Load) Mult (Name &val:2 Load))))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &af:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Attribute (Name &stdin:0 Load) s_readline Load) nil nil) s_split Load) nil nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &ad:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Attribute (Name &stdin:0 Load) s_readline Load) nil nil) s_split Load) nil nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &a:0 Load) s_append Load)\n            (list\n              (Tuple\n                (list\n                  (Subscript (Name &af:0 Load) (Name &i:0 Load) Load)\n                  (Subscript (Name &ad:0 Load) (Name &i:0 Load) Load)\n                )\n                Load\n              )\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &b:0 Load) s_append Load)\n            (list (Subscript (Name &ad:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil nil))\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Store))\n          (Tuple\n            (list\n              (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n              (BinOp\n                (Call\n                  (Name g_bisect_left Load)\n                  (list\n                    (Name &b:0 Load)\n                    (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n                  )\n                  nil\n                )\n                Add\n                (Constant i1 None)\n              )\n            )\n            Load\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (AugAssign\n          (Name &res:0 Store)\n          Add\n          (Call\n            (Name &get:0 Load)\n            (list\n              (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n              (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list\n              (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n              (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &reader:0 Store))\n      (GeneratorExp\n        (Call (Attribute (Name &s:3 Load) s_rstrip Load) nil nil)\n        (list (comprehension (Name &s:3 Store) (Attribute (Name g_sys Load) s_stdin Load) nil i0))\n      )\n      None\n    )\n    (Assign (list (Name &input:0 Store)) (Attribute (Name &reader:0 Load) s___next__ Load) None)\n    (ClassDef\n      &RangeMinimumQuery:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments\n            nil\n            (list (arg &self:4 None None) (arg &n:4 None None) (arg &inf:4 None None))\n            None\n            nil\n            nil\n            None\n            (list (Call (Name g_float Load) (list (Constant s_inf None)) nil))\n          )\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_n0 Store))\n              (BinOp\n                (Constant i2 None)\n                Pow\n                (Call (Attribute (BinOp (Name &n:4 Load) Sub (Constant i1 None)) s_bit_length Load) nil nil)\n              )\n              None\n            )\n            (Assign (list (Attribute (Name &self:4 Load) s_inf Store)) (Name &inf:4 Load) None)\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_data Store))\n              (BinOp\n                (List (list (Attribute (Name &self:4 Load) s_inf Load)) Load)\n                Mult\n                (BinOp (Constant i2 None) Mult (Attribute (Name &self:4 Load) s_n0 Load))\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_cnt Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp (Constant i2 None) Mult (Attribute (Name &self:4 Load) s_n0 Load))\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:1\n          (arguments nil (list (arg &self:5 None None) (arg &l:5 None None) (arg &r:5 None None)) None nil nil None nil)\n          (/seq\n            (AugAssign (Name &l:5 Store) Add (Attribute (Name &self:5 Load) s_n0 Load))\n            (AugAssign (Name &r:5 Store) Add (Attribute (Name &self:5 Load) s_n0 Load))\n            (Assign (list (Name &res:5 Store)) (Constant i0 None) None)\n            (Assign (list (Name &cnt:5 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &l:5 Load) (list Lt) (list (Name &r:5 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &r:5 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign (Name &r:5 Store) Sub (Constant i1 None))\n                    (AugAssign\n                      (Name &res:5 Store)\n                      Add\n                      (Subscript\n                        (Attribute (Name &self:5 Load) s_data Load)\n                        (BinOp (Name &r:5 Load) Sub (Constant i1 None))\n                        Load\n                      )\n                    )\n                    (AugAssign\n                      (Name &cnt:5 Store)\n                      Add\n                      (Subscript\n                        (Attribute (Name &self:5 Load) s_cnt Load)\n                        (BinOp (Name &r:5 Load) Sub (Constant i1 None))\n                        Load\n                      )\n                    )\n                  )\n                  nil\n                )\n                (If\n                  (BinOp (Name &l:5 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign\n                      (Name &res:5 Store)\n                      Add\n                      (Subscript\n                        (Attribute (Name &self:5 Load) s_data Load)\n                        (BinOp (Name &l:5 Load) Sub (Constant i1 None))\n                        Load\n                      )\n                    )\n                    (AugAssign\n                      (Name &cnt:5 Store)\n                      Add\n                      (Subscript\n                        (Attribute (Name &self:5 Load) s_cnt Load)\n                        (BinOp (Name &l:5 Load) Sub (Constant i1 None))\n                        Load\n                      )\n                    )\n                    (AugAssign (Name &l:5 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (AugAssign (Name &l:5 Store) RShift (Constant i1 None))\n                (AugAssign (Name &r:5 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n            (Return (Tuple (list (Name &res:5 Load) (Name &cnt:5 Load)) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:1\n          (arguments nil (list (arg &self:6 None None) (arg &i:6 None None) (arg &x:6 None None)) None nil nil None nil)\n          (/seq\n            (AugAssign (Name &i:6 Store) Add (BinOp (Attribute (Name &self:6 Load) s_n0 Load) Sub (Constant i1 None)))\n            (AugAssign\n              (Subscript (Attribute (Name &self:6 Load) s_data Load) (Name &i:6 Load) Store)\n              Add\n              (Name &x:6 Load)\n            )\n            (AugAssign\n              (Subscript (Attribute (Name &self:6 Load) s_cnt Load) (Name &i:6 Load) Store)\n              Add\n              (Constant i1 None)\n            )\n            (While\n              (Name &i:6 Load)\n              (/seq\n                (Assign\n                  (list (Name &i:6 Store))\n                  (BinOp (UnaryOp Invert (UnaryOp USub (Name &i:6 Load))) FloorDiv (Constant i2 None))\n                  None\n                )\n                (Assign\n                  (list (Subscript (Attribute (Name &self:6 Load) s_data Load) (Name &i:6 Load) Store))\n                  (BinOp\n                    (Subscript\n                      (Attribute (Name &self:6 Load) s_data Load)\n                      (BinOp (BinOp (Constant i2 None) Mult (Name &i:6 Load)) Add (Constant i1 None))\n                      Load\n                    )\n                    Add\n                    (Subscript\n                      (Attribute (Name &self:6 Load) s_data Load)\n                      (BinOp (BinOp (Constant i2 None) Mult (Name &i:6 Load)) Add (Constant i2 None))\n                      Load\n                    )\n                  )\n                  None\n                )\n                (Assign\n                  (list (Subscript (Attribute (Name &self:6 Load) s_cnt Load) (Name &i:6 Load) Store))\n                  (BinOp\n                    (Subscript\n                      (Attribute (Name &self:6 Load) s_cnt Load)\n                      (BinOp (BinOp (Constant i2 None) Mult (Name &i:6 Load)) Add (Constant i1 None))\n                      Load\n                    )\n                    Add\n                    (Subscript\n                      (Attribute (Name &self:6 Load) s_cnt Load)\n                      (BinOp (BinOp (Constant i2 None) Mult (Name &i:6 Load)) Add (Constant i2 None))\n                      Load\n                    )\n                  )\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &xs:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &vs:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &xv:0 Store))\n      (ListComp\n        (List (list (Name &x:7 Load) (Name &v:7 Load)) Load)\n        (list\n          (comprehension\n            (Tuple (list (Name &x:7 Store) (Name &v:7 Store)) Store)\n            (Call (Name g_zip Load) (list (Name &xs:0 Load) (Name &vs:0 Load)) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr (Call (Attribute (Name &xv:0 Load) s_sort Load) nil nil))\n    (Assign\n      (list (Name &d:0 Store))\n      (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &vs:0 Load)) nil)) nil)\n      None\n    )\n    (Assign\n      (list (Name &dd:0 Store))\n      (DictComp\n        (Name &j:2 Load)\n        (Name &i:2 Load)\n        (list\n          (comprehension\n            (Tuple (list (Name &i:2 Store) (Name &j:2 Store)) Store)\n            (Call (Name g_enumerate Load) (list (Name &d:0 Load)) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_len Load) (list (Name &dd:0 Load)) nil) None)\n    (Assign\n      (list (Name &RSQ:0 Store))\n      (Call (Name &RangeMinimumQuery:0 Load) (list (Name &m:0 Load) (Constant i0 None)) nil)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Tuple (list (Name &x:0 Store) (Name &v:0 Store)) Store)\n      (Name &xv:0 Load)\n      (/seq\n        (Assign (list (Name &nv:0 Store)) (Subscript (Name &dd:0 Load) (Name &v:0 Load) Load) None)\n        (Assign\n          (list (Tuple (list (Name &su:0 Store) (Name &cnt:0 Store)) Store))\n          (Call\n            (Attribute (Name &RSQ:0 Load) s_query Load)\n            (list (Constant i0 None) (BinOp (Name &nv:0 Load) Add (Constant i1 None)))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp (BinOp (Name &cnt:0 Load) Mult (Name &x:0 Load)) Sub (Name &su:0 Load))\n        )\n        (Expr (Call (Attribute (Name &RSQ:0 Load) s_update Load) (list (Name &nv:0 Load) (Name &x:0 Load)) nil))\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ClassDef\n      &Points:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments\n            nil\n            (list (arg &self:4 None None) (arg &x:4 None None) (arg &v:4 None None))\n            None\n            nil\n            nil\n            None\n            (list (Constant i0 None) (Constant i0 None))\n          )\n          (/seq\n            (Assign\n              (list\n                (Tuple (list (Attribute (Name &self:4 Load) s_x Store) (Attribute (Name &self:4 Load) s_v Store)) Store)\n              )\n              (Tuple (list (Name &x:4 Load) (Name &v:4 Load)) Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &Fenwick_tree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments\n            nil\n            (list (arg &self:5 None None) (arg &n:5 None None))\n            None\n            nil\n            nil\n            None\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Assign (list (Attribute (Name &self:5 Load) s_n Store)) (Name &n:5 Load) None)\n            (Assign\n              (list (Attribute (Name &self:5 Load) s_bit Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:5 Load) Add (Constant i1 None)))\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:2\n          (arguments\n            nil\n            (list (arg &self:6 None None) (arg &x:6 None None) (arg &value:6 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (While\n              (Compare (Name &x:6 Load) (list LtE) (list (Attribute (Name &self:6 Load) s_n Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:6 Load) s_bit Load) (Name &x:6 Load) Store)\n                  Add\n                  (Name &value:6 Load)\n                )\n                (AugAssign (Name &x:6 Store) Add (BinOp (Name &x:6 Load) BitAnd (UnaryOp USub (Name &x:6 Load))))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get:2\n          (arguments nil (list (arg &self:7 None None) (arg &x:7 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &sum:7 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &x:7 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &sum:7 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:7 Load) s_bit Load) (Name &x:7 Load) Load)\n                )\n                (AugAssign (Name &x:7 Store) Sub (BinOp (Name &x:7 Load) BitAnd (UnaryOp USub (Name &x:7 Load))))\n              )\n              nil\n            )\n            (Return (Name &sum:7 Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &v:0 Store)) Store))\n      (Tuple\n        (list\n          (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call\n          (Name &Points:0 Load)\n          (list (Subscript (Name &x:0 Load) (Name &i:8 Load) Load) (Subscript (Name &v:0 Load) (Name &i:8 Load) Load))\n          nil\n        )\n        (list (comprehension (Name &i:8 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &a:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &value:9 None None)) None nil nil None nil)\n              (Attribute (Name &value:9 Load) s_x Load)\n            )\n          )\n        )\n      )\n    )\n    (Assign\n      (list (Name &temp:0 Store))\n      (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &v:0 Load)) nil)) nil)\n      None\n    )\n    (Assign\n      (list (Name &mp:0 Store))\n      (DictComp\n        (Name &v:3 Load)\n        (Name &k:3 Load)\n        (list\n          (comprehension\n            (Tuple (list (Name &k:3 Store) (Name &v:3 Store)) Store)\n            (Call (Name g_enumerate Load) (list (Name &temp:0 Load) (Constant i1 None)) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &cnt:0 Store)) (Call (Name &Fenwick_tree:0 Load) (list (Name &n:0 Load)) nil) None)\n    (Assign (list (Name &sum:0 Store)) (Call (Name &Fenwick_tree:0 Load) (list (Name &n:0 Load)) nil) None)\n    (Assign\n      (list (Tuple (list (Name &res:0 Store) (Name &i:0 Store)) Store))\n      (Tuple (list (Constant i0 None) (Constant i0 None)) Load)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Store))\n          (Subscript (Name &mp:0 Load) (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load) Load)\n          None\n        )\n        (AugAssign\n          (Name &res:0 Store)\n          Add\n          (BinOp\n            (BinOp\n              (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_x Load)\n              Mult\n              (Call\n                (Attribute (Name &cnt:0 Load) s_get Load)\n                (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load))\n                nil\n              )\n            )\n            Sub\n            (Call\n              (Attribute (Name &sum:0 Load) s_get Load)\n              (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load))\n              nil\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &cnt:0 Load) s_update Load)\n            (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load) (Constant i1 None))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &sum:0 Load) s_update Load)\n            (list\n              (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load)\n              (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_x Load)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCAxMCwgOTksIDExNCwgMTAxLCA5NywgMTE2LCAxMDEsIDEwMCwgMzIsIDk4LCAxMjEsIDMyLCAxMTUsIDEwNCwgMTE3LCA5NywgMTEwLCAxMDMsIDExMywgMTE3LCA5NywgMTEwLCA0NiwgMTA0LCAxMTcsIDk3LCAxMTAsIDEwMywgMzIsIDk3LCAxMTYsIDMyLCA1MCwgNDgsIDUwLCA0OCwgNDcsIDUxLCA0NywgNDksIDUxLCAxMCwgMTBd\n        None\n      )\n    )\n    (Import (list (alias &collections:0 None)))\n    (Import (list (alias &time:0 None)))\n    (Import (list (alias &os:0 None)))\n    (Import (list (alias &sys:0 None)))\n    (Import (list (alias &bisect:0 None)))\n    (Import (list (alias &heapq:0 None)))\n    (ImportFrom s_typing (list (alias &List:0 None)) i0)\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &N:1 None None) (arg &X:1 None None) (arg &S:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &si:1 Store)) (Dict nil nil) None)\n        (Assign\n          (list (Name &ss:1 Store))\n          (Call\n            (Name g_list Load)\n            (list (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &S:1 Load)) nil)) nil))\n            nil\n          )\n          None\n        )\n        (For\n          (Tuple (list (Name &i:1 Store) (Name &s:1 Store)) Store)\n          (Call (Name g_enumerate Load) (list (Name &ss:1 Load)) nil)\n          (/seq (Assign (list (Subscript (Name &si:1 Load) (Name &s:1 Load) Store)) (Name &i:1 Load) None))\n          nil\n          None\n        )\n        (Assign\n          (list (Name &xs:1 Store))\n          (ListComp\n            (Tuple (list (Name &x:6 Load) (Subscript (Name &si:1 Load) (Name &s:6 Load) Load)) Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &x:6 Store) (Name &s:6 Store)) Store)\n                (Call (Name g_zip Load) (list (Name &X:1 Load) (Name &S:1 Load)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &xs:1 Load) s_sort Load) nil nil))\n        (Assign\n          (list (Name &bitc:1 Store))\n          (ListComp\n            (Constant i0 None)\n            (list\n              (comprehension\n                (Name &_:7 Store)\n                (Call (Name g_range Load) (list (BinOp (Name &N:1 Load) Add (Constant i1 None))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &bitx:1 Store))\n          (ListComp\n            (Constant i0 None)\n            (list\n              (comprehension\n                (Name &_:8 Store)\n                (Call (Name g_range Load) (list (BinOp (Name &N:1 Load) Add (Constant i1 None))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (FunctionDef\n          &add:1\n          (arguments nil (list (arg &index:2 None None) (arg &val:2 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Name &index:2 Load) (list LtE) (list (Name &N:1 Load)))\n              (/seq\n                (AugAssign (Subscript (Name &bitc:1 Load) (Name &index:2 Load) Store) Add (Constant i1 None))\n                (AugAssign (Subscript (Name &bitx:1 Load) (Name &index:2 Load) Store) Add (Name &val:2 Load))\n                (AugAssign (Name &index:2 Store) BitOr (BinOp (Name &index:2 Load) Add (Constant i1 None)))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get:1\n          (arguments nil (list (arg &index:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &count:3 Store) (Name &xsum:3 Store)) Store))\n              (Tuple (list (Constant i0 None) (Constant i0 None)) Load)\n              None\n            )\n            (While\n              (Compare (Name &index:3 Load) (list GtE) (list (Constant i0 None)))\n              (/seq\n                (AugAssign (Name &count:3 Store) Add (Subscript (Name &bitc:1 Load) (Name &index:3 Load) Load))\n                (AugAssign (Name &xsum:3 Store) Add (Subscript (Name &bitx:1 Load) (Name &index:3 Load) Load))\n                (Assign\n                  (list (Name &index:3 Store))\n                  (BinOp\n                    (BinOp (Name &index:3 Load) BitAnd (BinOp (Name &index:3 Load) Add (Constant i1 None)))\n                    Sub\n                    (Constant i1 None)\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Tuple (list (Name &count:3 Load) (Name &xsum:3 Load)) Load))\n          )\n          nil\n          None\n          None\n        )\n        (Assign (list (Name &ans:1 Store)) (Constant i0 None) None)\n        (For\n          (Tuple (list (Name &x:1 Store) (Name &s:1 Store)) Store)\n          (Name &xs:1 Load)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &count:1 Store) (Name &xsum:1 Store)) Store))\n              (Call (Name &get:1 Load) (list (Name &s:1 Load)) nil)\n              None\n            )\n            (AugAssign\n              (Name &ans:1 Store)\n              Add\n              (BinOp (BinOp (Name &count:1 Load) Mult (Name &x:1 Load)) Sub (Name &xsum:1 Load))\n            )\n            (Expr (Call (Name &add:1 Load) (list (Name &s:1 Load) (Name &x:1 Load)) nil))\n          )\n          nil\n          None\n        )\n        (Return (Name &ans:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &X:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:4 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:4 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &S:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:5 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:5 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Call (Name &solve:0 Load) (list (Name &N:0 Load) (Name &X:0 Load) (Name &S:0 Load)) nil))\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_bisect None)))\n    (ClassDef\n      &Bit:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_bit Store))\n              (ListComp\n                (Constant i0 None)\n                (list\n                  (comprehension\n                    (Name &i:8 Store)\n                    (Call (Name g_range Load) (list (Constant i0 None) (Name &n:3 Load)) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:1\n          (arguments\n            nil\n            (list (arg &self:4 None None) (arg &pos:4 None None) (arg &x:4 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (While\n              (Compare\n                (Name &pos:4 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:4 Load) s_bit Load)) nil))\n              )\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:4 Load) s_bit Load) (Name &pos:4 Load) Store)\n                  Add\n                  (Name &x:4 Load)\n                )\n                (Assign\n                  (list (Name &pos:4 Store))\n                  (BinOp (Name &pos:4 Load) BitOr (BinOp (Name &pos:4 Load) Add (Constant i1 None)))\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:1\n          (arguments nil (list (arg &self:5 None None) (arg &pos:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &res:5 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &pos:5 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &res:5 Store)\n                  Add\n                  (Subscript\n                    (Attribute (Name &self:5 Load) s_bit Load)\n                    (BinOp (Name &pos:5 Load) Sub (Constant i1 None))\n                    Load\n                  )\n                )\n                (Assign\n                  (list (Name &pos:5 Store))\n                  (BinOp (Name &pos:5 Load) BitAnd (BinOp (Name &pos:5 Load) Sub (Constant i1 None)))\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &res:5 Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:6 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:6 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:7 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:7 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &r:0 Store))\n      (ListComp\n        (Name &i:2 Load)\n        (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &r:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &i:9 None None)) None nil nil None nil)\n              (Subscript (Name &x:0 Load) (Name &i:9 Load) Load)\n            )\n          )\n        )\n      )\n    )\n    (Assign\n      (list (Name &unique:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Name &v:0 Load)) nil)) nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &tree1:0 Store) (Name &tree2:0 Store)) Store))\n      (Tuple\n        (list\n          (Call (Name &Bit:0 Load) (list (Call (Name g_len Load) (list (Name &unique:0 Load)) nil)) nil)\n          (Call (Name &Bit:0 Load) (list (Call (Name g_len Load) (list (Name &unique:0 Load)) nil)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &r:0 Load)\n      (/seq\n        (Assign\n          (list (Name &ii:0 Store))\n          (Call\n            (Attribute (Name g_bisect Load) s_bisect_left Load)\n            (list (Name &unique:0 Load) (Subscript (Name &v:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &count:0 Store))\n          (Call\n            (Attribute (Name &tree1:0 Load) s_query Load)\n            (list (BinOp (Name &ii:0 Load) Add (Constant i1 None)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &dsum:0 Store))\n          (Call\n            (Attribute (Name &tree2:0 Load) s_query Load)\n            (list (BinOp (Name &ii:0 Load) Add (Constant i1 None)))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp\n            (BinOp (Name &count:0 Load) Mult (Subscript (Name &x:0 Load) (Name &i:0 Load) Load))\n            Sub\n            (Name &dsum:0 Load)\n          )\n        )\n        (Expr (Call (Attribute (Name &tree1:0 Load) s_add Load) (list (Name &ii:0 Load) (Constant i1 None)) nil))\n        (Expr\n          (Call\n            (Attribute (Name &tree2:0 Load) s_add Load)\n            (list (Name &ii:0 Load) (Subscript (Name &x:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_heapq None)))\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (FunctionDef\n      &make_tree:0\n      (arguments nil (list (arg &n:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &tree:1 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:1 Load) Add (Constant i1 None)))\n          None\n        )\n        (Return (Name &tree:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &get_sum:0\n      (arguments nil (list (arg &i:2 None None) (arg &tree:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:2 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &i:2 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &s:2 Store) Add (Subscript (Name &tree:2 Load) (Name &i:2 Load) Load))\n            (AugAssign (Name &i:2 Store) Sub (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))\n          )\n          nil\n        )\n        (Return (Name &s:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &add:0\n      (arguments nil (list (arg &i:3 None None) (arg &x:3 None None) (arg &tree:3 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &i:3 Load) (list LtE) (list (Name &n:0 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &tree:3 Load) (Name &i:3 Load) Store) Add (Name &x:3 Load))\n            (AugAssign (Name &i:3 Store) Add (BinOp (Name &i:3 Load) BitAnd (UnaryOp USub (Name &i:3 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &v:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &u:0 Store))\n      (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Name &v:0 Load)) nil)) nil)\n      None\n    )\n    (Expr (Call (Attribute (Name &u:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))\n    (Assign (list (Name &m:0 Store)) (Call (Name g_len Load) (list (Name &u:0 Load)) nil) None)\n    (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &d:0 Load) (Subscript (Name &u:0 Load) (Name &i:0 Load) Load) Store))\n          (BinOp (Name &i:0 Load) Add (Constant i2 None))\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &tree:0 Store))\n      (Call (Name &make_tree:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i5 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &cnt:0 Store))\n      (Call (Name &make_tree:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i5 None))) nil)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &h:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name g_heapq Load) s_heappush Load)\n            (list\n              (Name &h:0 Load)\n              (Tuple (list (Subscript (Name &x:0 Load) (Name &i:0 Load) Load) (Name &i:0 Load)) Load)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &sx:0 Store)) (List nil Load) None)\n    (While\n      (Name &h:0 Load)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &xi:0 Store) (Name &i:0 Store)) Store))\n          (Call (Attribute (Name g_heapq Load) s_heappop Load) (list (Name &h:0 Load)) nil)\n          None\n        )\n        (Expr (Call (Attribute (Name &sx:0 Load) s_append Load) (list (Name &xi:0 Load)) nil))\n        (Assign (list (Name &vi:0 Store)) (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) None)\n        (Assign (list (Name &di:0 Store)) (Subscript (Name &d:0 Load) (Name &vi:0 Load) Load) None)\n        (AugAssign\n          (Name &ans:0 Store)\n          Sub\n          (BinOp\n            (BinOp\n              (Call\n                (Name &get_sum:0 Load)\n                (list (BinOp (Name &di:0 Load) Sub (Constant i1 None)) (Name &cnt:0 Load))\n                nil\n              )\n              Mult\n              (Name &xi:0 Load)\n            )\n            Sub\n            (Call\n              (Name &get_sum:0 Load)\n              (list (BinOp (Name &di:0 Load) Sub (Constant i1 None)) (Name &tree:0 Load))\n              nil\n            )\n          )\n        )\n        (Expr (Call (Name &add:0 Load) (list (Name &di:0 Load) (Name &xi:0 Load) (Name &tree:0 Load)) nil))\n        (Expr (Call (Name &add:0 Load) (list (Name &di:0 Load) (Constant i1 None) (Name &cnt:0 Load)) nil))\n      )\n      nil\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (AugAssign\n          (Name &ans:0 Store)\n          Add\n          (BinOp\n            (BinOp\n              (BinOp (Name &i:0 Load) Add (Constant i1 None))\n              Mult\n              (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))\n            )\n            Mult\n            (BinOp\n              (Subscript (Name &sx:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n              Sub\n              (Subscript (Name &sx:0 Load) (Name &i:0 Load) Load)\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)"]