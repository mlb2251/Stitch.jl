["(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_Counter None)) i0)\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (Assign (list (Name &a:1 Store)) (Call (Name &readIntArr:0 Load) nil nil) None)\n        (Assign\n          (list (Name &b:1 Store))\n          (Call (Name g_sorted Load) (list (Name &a:1 Load)) (list (keyword s_reverse (Constant True None))))\n          None\n        )\n        (Assign (list (Name &m:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (Assign (list (Name &allans:1 Store)) (List nil Load) None)\n        (For\n          (Name &_:1 Store)\n          (Call (Name g_range Load) (list (Name &m:1 Load)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &k:1 Store) (Name &pos:1 Store)) Store))\n              (Call (Name &readIntArr:0 Load) nil nil)\n              None\n            )\n            (Assign\n              (list (Name &cnt:1 Store))\n              (Call\n                (Name g_Counter Load)\n                (list (Subscript (Name &b:1 Load) (Slice None (Name &k:1 Load) None) Load))\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &totalCnts:1 Store)) (Constant i0 None) None)\n            (For\n              (Name &x:1 Store)\n              (Name &a:1 Load)\n              (/seq\n                (If\n                  (Compare (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Load) (list Gt) (list (Constant i0 None)))\n                  (/seq\n                    (AugAssign (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Store) Sub (Constant i1 None))\n                    (AugAssign (Name &totalCnts:1 Store) Add (Constant i1 None))\n                    (If\n                      (Compare (Name &totalCnts:1 Load) (list Eq) (list (Name &pos:1 Load)))\n                      (/seq\n                        (Expr (Call (Attribute (Name &allans:1 Load) s_append Load) (list (Name &x:1 Load)) nil))\n                        Break\n                      )\n                      nil\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name &multiLineArrayPrint:0 Load) (list (Name &allans:1 Load)) nil))\n        (Return None)\n      )\n      nil\n      None\n      None\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (FunctionDef\n      &oneLineArrayPrint:0\n      (arguments nil (list (arg &arr:2 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call (Name g_str Load) (list (Name &x:11 Load)) nil)\n                    (list (comprehension (Name &x:11 Store) (Name &arr:2 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &multiLineArrayPrint:0\n      (arguments nil (list (arg &arr:3 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEwXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call (Name g_str Load) (list (Name &x:12 Load)) nil)\n                    (list (comprehension (Name &x:12 Store) (Name &arr:3 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &multiLineArrayOfArraysPrint:0\n      (arguments nil (list (arg &arr:4 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEwXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call\n                      (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                      (list\n                        (ListComp\n                          (Call (Name g_str Load) (list (Name &x:15 Load)) nil)\n                          (list (comprehension (Name &x:15 Store) (Name &y:13 Load) nil i0))\n                        )\n                      )\n                      nil\n                    )\n                    (list (comprehension (Name &y:13 Store) (Name &arr:4 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &readIntArr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:8 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:8 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &makeArr:0\n      (arguments nil (list (arg &defaultValFactory:5 None None) (arg &dimensionArr:5 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &dv:5 Store)) (Name &defaultValFactory:5 Load) None)\n        (Assign (list (Name &da:5 Store)) (Name &dimensionArr:5 Load) None)\n        (If\n          (Compare (Call (Name g_len Load) (list (Name &da:5 Load)) nil) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Return\n              (ListComp\n                (Call (Name &dv:5 Load) nil nil)\n                (list\n                  (comprehension\n                    (Name &_:9 Store)\n                    (Call (Name g_range Load) (list (Subscript (Name &da:5 Load) (Constant i0 None) Load)) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (Return\n              (ListComp\n                (Call\n                  (Name &makeArr:0 Load)\n                  (list (Name &dv:5 Load) (Subscript (Name &da:5 Load) (Slice (Constant i1 None) None None) Load))\n                  nil\n                )\n                (list\n                  (comprehension\n                    (Name &_:10 Store)\n                    (Call (Name g_range Load) (list (Subscript (Name &da:5 Load) (Constant i0 None) Load)) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &queryInteractive:0\n      (arguments nil (list (arg &i:6 None None) (arg &j:6 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzYzLCAzMiwgMTIzLCAxMjUsIDMyLCAxMjMsIDEyNV0= None) s_format Load)\n                (list (Name &i:6 Load) (Name &j:6 Load))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Attribute (Attribute (Name &sys:0 Load) s_stdout Load) s_flush Load) nil nil))\n        (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &answerInteractive:0\n      (arguments nil (list (arg &ans:7 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMzLCAzMiwgMTIzLCAxMjVd None) s_format Load)\n                (list\n                  (Call\n                    (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                    (list\n                      (ListComp\n                        (Call (Name g_str Load) (list (Name &x:14 Load)) nil)\n                        (list (comprehension (Name &x:14 Store) (Name &ans:7 Load) nil i0))\n                      )\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Attribute (Attribute (Name &sys:0 Load) s_stdout Load) s_flush Load) nil nil))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &inf:0 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None)\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (For\n      (Name &_abc:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None)) nil)\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &min_s:0\n      (arguments nil (list (arg &a:1 None None) (arg &k:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &res:1 Store)) (Call (Attribute (Name &a:1 Load) s_copy Load) nil nil) None)\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list (BinOp (Call (Name g_len Load) (list (Name &a:1 Load)) nil) Sub (Name &k:1 Load)))\n            nil\n          )\n          (/seq\n            (Assign (list (Name &m:1 Store)) (Call (Name g_min Load) (list (Name &res:1 Load)) nil) None)\n            (Expr (Call (Attribute (Name &res:1 Load) s_reverse Load) nil nil))\n            (Expr (Call (Attribute (Name &res:1 Load) s_remove Load) (list (Name &m:1 Load)) nil))\n            (Expr (Call (Attribute (Name &res:1 Load) s_reverse Load) nil nil))\n          )\n          nil\n          None\n        )\n        (Return (Name &res:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:2 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:3 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:3 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &l:0 Store)) (Call (Name &min_s:0 Load) (list (Name &a:0 Load) (Name &k:0 Load)) nil) None)\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Subscript (Name &l:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &qs:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &q:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &qs:0 Load) s_append Load)\n            (list (List (list (Name &a:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) (Name &i:0 Load)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &qs:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &ret:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &used:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (ListComp\n        (UnaryOp USub (Constant i1 None))\n        (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &z:0 Store)\n      (Call (Name g_range Load) (list (Name &q:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:0 Store) (Name &pos:0 Store) (Name &o:0 Store)) Store))\n          (Subscript (Name &qs:0 Load) (Name &z:0 Load) Load)\n          None\n        )\n        (While\n          (Compare (Call (Name g_len Load) (list (Name &ret:0 Load)) nil) (list Lt) (list (Name &l:0 Load)))\n          (/seq\n            (Assign (list (Name &mx:0 Store)) (Constant i0 None) None)\n            (Assign (list (Name &ind:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n            (For\n              (Name &i:0 Store)\n              (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n              (/seq\n                (If\n                  (UnaryOp Not (Subscript (Name &used:0 Load) (Name &i:0 Load) Load))\n                  (/seq\n                    (If\n                      (Compare (Name &mx:0 Load) (list Lt) (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load)))\n                      (/seq\n                        (Assign (list (Name &mx:0 Store)) (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) None)\n                        (Assign (list (Name &ind:0 Store)) (Name &i:0 Load) None)\n                      )\n                      nil\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Assign (list (Subscript (Name &used:0 Load) (Name &ind:0 Load) Store)) (Constant i1 None) None)\n            (Expr (Call (Attribute (Name &ret:0 Load) s_append Load) (list (Name &mx:0 Load)) nil))\n          )\n          nil\n        )\n        (Assign (list (Name &c:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (If\n              (Subscript (Name &used:0 Load) (Name &i:0 Load) Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &c:0 Load) s_append Load)\n                    (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list\n            (Subscript\n              (Name &ans:0 Load)\n              (Subscript (Subscript (Name &qs:0 Load) (Name &z:0 Load) Load) (Constant i2 None) Load)\n              Store\n            )\n          )\n          (Subscript (Name &c:0 Load) (Name &pos:0 Load) Load)\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &q:0 Load)) nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Load)) nil)))\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a1:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Name &a:0 Load))\n        (list\n          (keyword\n            s_key\n            (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (UnaryOp USub (Name &x:1 Load)))\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &q:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &pos:0 Store) Sub (Constant i1 None))\n        (Assign (list (Name &notused:0 Store)) (Dict nil nil) None)\n        (For\n          (Name &j:0 Store)\n          (Subscript (Name &a1:0 Load) (Slice None (Name &k:0 Load) None) Load)\n          (/seq\n            (If\n              (Compare (Name &j:0 Load) (list In) (list (Name &notused:0 Load)))\n              (/seq (AugAssign (Subscript (Name &notused:0 Load) (Name &j:0 Load) Store) Add (Constant i1 None)))\n              (/seq (Assign (list (Subscript (Name &notused:0 Load) (Name &j:0 Load) Store)) (Constant i1 None) None))\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Name &a:0 Load)\n          (/seq\n            (If\n              (Compare (Name &j:0 Load) (list In) (list (Name &notused:0 Load)))\n              (/seq\n                (If\n                  (Compare (Name &pos:0 Load) (list Gt) (list (Constant i0 None)))\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &notused:0 Load) (Name &j:0 Load) Load)\n                        (list Gt)\n                        (list (Constant i1 None))\n                      )\n                      (/seq\n                        (AugAssign (Subscript (Name &notused:0 Load) (Name &j:0 Load) Store) Sub (Constant i1 None))\n                      )\n                      (/seq (Expr (Call (Attribute (Name &notused:0 Load) s_pop Load) (list (Name &j:0 Load)) nil)))\n                    )\n                    (AugAssign (Name &pos:0 Store) Sub (Constant i1 None))\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Name &j:0 Load)) nil)) Break)\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &line:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &lf:0 Store)) (Subscript (Name &line:0 Load) (Slice None None None) Load) None)\n        (While\n          (Compare (Call (Name g_len Load) (list (Name &lf:0 Load)) nil) (list Gt) (list (Name &k:0 Load)))\n          (/seq\n            (Assign (list (Name &j:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n            (Assign (list (Name &x:0 Store)) (Call (Name g_min Load) (list (Name &lf:0 Load)) nil) None)\n            (While\n              (Compare\n                (Name &j:0 Load)\n                (list Gt)\n                (list\n                  (BinOp (UnaryOp USub (Call (Name g_len Load) (list (Name &lf:0 Load)) nil)) Sub (Constant i1 None))\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Subscript (Name &lf:0 Load) (Name &j:0 Load) Load) (list Eq) (list (Name &x:0 Load)))\n                  (/seq\n                    (Delete (list (Subscript (Name &lf:0 Load) (Name &j:0 Load) Del)))\n                    (If\n                      (Compare (Call (Name g_len Load) (list (Name &lf:0 Load)) nil) (list Eq) (list (Name &k:0 Load)))\n                      (/seq Break)\n                      nil\n                    )\n                  )\n                  (/seq (AugAssign (Name &j:0 Store) Sub (Constant i1 None)))\n                )\n              )\n              nil\n            )\n          )\n          nil\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Subscript (Name &lf:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (ListComp\n        (Tuple (list (Name &i:1 Load) (Name &num:1 Load)) Load)\n        (list\n          (comprehension\n            (Tuple (list (Name &num:1 Store) (Name &i:1 Store)) Store)\n            (Call (Name g_enumerate Load) (list (Name &arr:0 Load)) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &arr:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n              (Tuple\n                (list\n                  (UnaryOp USub (Subscript (Name &x:2 Load) (Constant i0 None) Load))\n                  (Subscript (Name &x:2 Load) (Constant i1 None) Load)\n                )\n                Load\n              )\n            )\n          )\n        )\n      )\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &q:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_tuple Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &now:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Name &arr:0 Load)\n          (/seq\n            (If\n              (Compare (Call (Name g_len Load) (list (Name &now:0 Load)) nil) (list Eq) (list (Name &k:0 Load)))\n              (/seq Break)\n              nil\n            )\n            (Expr (Call (Attribute (Name &now:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &now:0 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n                  (Subscript (Name &x:3 Load) (Constant i1 None) Load)\n                )\n              )\n            )\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &now:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (ListComp\n        (List (list (Subscript (Name &a:0 Load) (Name &i:1 Load) Load) (Name &i:1 Load)) Load)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &x:0 Load) s_sort Load)\n        nil\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n              (Subscript (Name &x:2 Load) (Constant i0 None) Load)\n            )\n          )\n          (keyword s_reverse (Constant True None))\n        )\n      )\n    )\n    (For\n      (Name &_i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &p:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript\n                  (Call\n                    (Name g_sorted Load)\n                    (list (Subscript (Name &x:0 Load) (Slice None (Name &k:0 Load) None) Load))\n                    (list\n                      (keyword\n                        s_key\n                        (Lambda\n                          (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n                          (Subscript (Name &x:3 Load) (Constant i1 None) Load)\n                        )\n                      )\n                    )\n                  )\n                  (BinOp (Name &p:0 Load) Sub (Constant i1 None))\n                  Load\n                )\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &data:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &s:0 Store)) (Subscript (Name &data:0 Load) (Slice None None None) Load) None)\n        (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &k:0 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &x:0 Store))\n              (Call\n                (Attribute (Name &s:0 Load) s_index Load)\n                (list (Call (Name g_max Load) (list (Name &s:0 Load)) nil))\n                nil\n              )\n              None\n            )\n            (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &x:0 Load)) nil))\n            (Assign (list (Subscript (Name &s:0 Load) (Name &x:0 Load) Store)) (UnaryOp USub (Constant i1 None)) None)\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &ans:0 Load) s_sort Load) nil nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Name &data:0 Load)\n                (Subscript (Name &ans:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) nil) None)\n    (Assign (list (Name &c:0 Store)) (List nil Load) None)\n    (Expr (Call (Attribute (Name &c:0 Load) s_append Load) (list (Name &a:0 Load)) nil))\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &k:0 Store))\n          (BinOp\n            (BinOp\n              (Call\n                (Name g_len Load)\n                (list (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load))\n                nil\n              )\n              Sub\n              (Constant i1 None)\n            )\n            Sub\n            (Call\n              (Attribute\n                (Subscript\n                  (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                  (Slice None None (UnaryOp USub (Constant i1 None)))\n                  Load\n                )\n                s_index\n                Load\n              )\n              (list (Subscript (Name &b:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load))\n              nil\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &c:0 Load) s_append Load)\n            (list\n              (BinOp\n                (Subscript\n                  (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                  (Slice (Constant i0 None) (Name &k:0 Load) None)\n                  Load\n                )\n                Add\n                (Subscript\n                  (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                  (Slice (BinOp (Name &k:0 Load) Add (Constant i1 None)) None None)\n                  Load\n                )\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript\n                  (Name &c:0 Load)\n                  (BinOp\n                    (BinOp (Call (Name g_len Load) (list (Name &c:0 Load)) nil) Sub (Name &k:0 Load))\n                    Sub\n                    (Constant i1 None)\n                  )\n                  Load\n                )\n                (BinOp (Name &pos:0 Load) Sub (Constant i1 None))\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (FunctionDef\n      &getFirstSetBitPos:0\n      (arguments nil (list (arg &n:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (Call\n              (Attribute (Name g_math Load) s_log2 Load)\n              (list (BinOp (Name &n:1 Load) BitAnd (UnaryOp USub (Name &n:1 Load))))\n              nil\n            )\n            Add\n            (Constant i1 None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &find_div:0\n      (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ls:2 Store)) (List nil Load) None)\n        (For\n          (Name &i:2 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Constant i2 None)\n              (BinOp\n                (Call (Name g_int Load) (list (BinOp (Name &x:2 Load) Pow (Constant f0.5 None))) nil)\n                Add\n                (Constant i1 None)\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &x:2 Load) Mod (Name &i:2 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Attribute (Name &ls:2 Load) s_append Load) (list (Name &i:2 Load)) nil))\n                (If\n                  (Compare (Name &i:2 Load) (list NotEq) (list (BinOp (Name &x:2 Load) FloorDiv (Name &i:2 Load))))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &ls:2 Load) s_append Load)\n                        (list (BinOp (Name &x:2 Load) FloorDiv (Name &i:2 Load)))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (Call (Name g_sorted Load) (list (Name &ls:2 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (ImportFrom s_collections (list (alias &Counter:0 None)) i0)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &ar:0 Store))\n      (ListComp\n        (Tuple (list (Call (Name g_int Load) (list (Name &x:3 Load)) nil) (Name &i:3 Load)) Load)\n        (list\n          (comprehension\n            (Tuple (list (Name &i:3 Store) (Name &x:3 Store)) Store)\n            (Call\n              (Name g_enumerate Load)\n              (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n              nil\n            )\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list (Name &ar:0 Load))\n        (list\n          (keyword\n            s_key\n            (Lambda\n              (arguments nil (list (arg &x:4 None None)) None nil nil None nil)\n              (Tuple\n                (list\n                  (Subscript (Name &x:4 Load) (Constant i0 None) Load)\n                  (BinOp (UnaryOp USub (Constant i1 None)) Mult (Subscript (Name &x:4 Load) (Constant i1 None) Load))\n                )\n                Load\n              )\n            )\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &ls:0 Store))\n          (Call\n            (Name g_sorted Load)\n            (list (Subscript (Name &arr:0 Load) (Slice (UnaryOp USub (Name &k:0 Load)) None None) Load))\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:5 None None)) None nil nil None nil)\n                  (Subscript (Name &x:5 Load) (Constant i1 None) Load)\n                )\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Subscript\n                (Subscript (Name &ls:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)\n                (Constant i0 None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)"]