[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                1,
                0,
                "(Call (Name g_range Load) (list (BinOp #0 Sub (Constant i1 None)) (UnaryOp USub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil)",
                "E",
                [
                    "E"
                ],
                []
            ],
            [
                2,
                2,
                "(Assign (list (Subscript (Attribute (Name %1 Load) s_data Load) (Name %2 Load) Store)) (Call #1 (list (Subscript (Attribute (Name %1 Load) s_data Load) #0 Load) (Subscript (Attribute (Name %1 Load) s_data Load) (BinOp #0 Add (Constant i1 None)) Load)) nil) None)",
                "S",
                [
                    "E",
                    "E"
                ],
                [
                    "X",
                    "X"
                ]
            ],
            [
                1,
                1,
                "(Assign (list (Subscript #0 (Name %1 Load) Store)) (BinOp (Subscript #0 (BinOp (Name %1 Load) LShift (Constant i1 None)) Load) Add (Subscript #0 (BinOp (BinOp (Name %1 Load) LShift (Constant i1 None)) BitOr (Constant i1 None)) Load)) None)",
                "S",
                [
                    "E"
                ],
                [
                    "X"
                ]
            ]
        ],
        "programs": [
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (ClassDef &Tree:0 (list (Name g_object Load)) nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_tree Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Constant i4 None) Mult (Name &n:2 Load)) Add (Constant i10 None))) None) (Assign (list (Attribute (Name &self:2 Load) s_b Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:2 Load) Add (Constant i10 None))) None) (Assign (list (Attribute (Name &self:2 Load) s_a Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Name &n:2 Load) None)) nil None None) (FunctionDef &update:1 (arguments nil (list (arg &self:3 None None) (arg &L:3 None None) (arg &C:3 None None) (arg &l:3 None None) (arg &r:3 None None) (arg &rt:3 None None)) None nil nil None nil) (/seq (If (Compare (Name &l:3 Load) (list Eq) (list (Name &r:3 Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:3 Load) s_tree Load) (Name &rt:3 Load) Store) Add (Name &C:3 Load)) (Return None)) nil) (Assign (list (Name &mid:3 Store)) (BinOp (BinOp (Name &l:3 Load) Add (Name &r:3 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (Name &L:3 Load) (list LtE) (list (Name &mid:3 Load))) (/seq (Expr (Call (Attribute (Name &self:3 Load) s_update Load) (list (Name &L:3 Load) (Name &C:3 Load) (Name &l:3 Load) (Name &mid:3 Load) (BinOp (Name &rt:3 Load) LShift (Constant i1 None))) nil))) (/seq (Expr (Call (Attribute (Name &self:3 Load) s_update Load) (list (Name &L:3 Load) (Name &C:3 Load) (BinOp (Name &mid:3 Load) Add (Constant i1 None)) (Name &r:3 Load) (BinOp (BinOp (Name &rt:3 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))) nil)))) (fn_3 (Attribute (Name &self:3 Load) s_tree Load) &rt:3)) nil None None) (FunctionDef &query:1 (arguments nil (list (arg &self:4 None None) (arg &s:4 None None) (arg &l:4 None None) (arg &r:4 None None) (arg &rt:4 None None)) None nil nil None nil) (/seq (If (Compare (Name &l:4 Load) (list Eq) (list (Name &r:4 Load))) (/seq (Return (Name &l:4 Load))) nil) (Assign (list (Name &mid:4 Store)) (BinOp (BinOp (Name &l:4 Load) Add (Name &r:4 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (Subscript (Attribute (Name &self:4 Load) s_tree Load) (BinOp (Name &rt:4 Load) LShift (Constant i1 None)) Load) (list Gt) (list (Name &s:4 Load))) (/seq (Return (Call (Attribute (Name &self:4 Load) s_query Load) (list (Name &s:4 Load) (Name &l:4 Load) (Name &mid:4 Load) (BinOp (Name &rt:4 Load) LShift (Constant i1 None))) nil))) (/seq (Return (Call (Attribute (Name &self:4 Load) s_query Load) (list (BinOp (Name &s:4 Load) Sub (Subscript (Attribute (Name &self:4 Load) s_tree Load) (BinOp (Name &rt:4 Load) LShift (Constant i1 None)) Load)) (BinOp (Name &mid:4 Load) Add (Constant i1 None)) (Name &r:4 Load) (BinOp (BinOp (Name &rt:4 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))) nil))))) nil None None) (FunctionDef &slove:1 (arguments nil (list (arg &self:5 None None)) None nil nil None nil) (/seq (For (Name &i:5 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &self:5 Load) s_update Load) (list (BinOp (Name &i:5 Load) Add (Constant i1 None)) (BinOp (Name &i:5 Load) Add (Constant i1 None)) (Constant i1 None) (Name &n:0 Load) (Constant i1 None)) nil))) nil None) (For (Name &i:5 Store) (Call (Name g_range Load) (list (Name &n:0 Load) (Constant i0 None) (UnaryOp USub (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Attribute (Name &self:5 Load) s_b Load) (Name &i:5 Load) Store)) (Call (Attribute (Name &self:5 Load) s_query Load) (list (Subscript (Attribute (Name &self:5 Load) s_a Load) (BinOp (Name &i:5 Load) Sub (Constant i1 None)) Load) (Constant i1 None) (Name &n:0 Load) (Constant i1 None)) nil) None) (Expr (Call (Attribute (Name &self:5 Load) s_update Load) (list (Subscript (Attribute (Name &self:5 Load) s_b Load) (Name &i:5 Load) Load) (UnaryOp USub (Subscript (Attribute (Name &self:5 Load) s_b Load) (Name &i:5 Load) Load)) (Constant i1 None) (Name &n:0 Load) (Constant i1 None)) nil))) nil None) (For (Name &i:5 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name g_stdout Load) s_write Load) (list (BinOp (Constant s-WzM3LCAxMDAsIDMyXQ== None) Mod (Subscript (Attribute (Name &self:5 Load) s_b Load) (BinOp (Name &i:5 Load) Add (Constant i1 None)) Load))) nil))) nil None)) nil None None)) nil) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil) None) (Assign (list (Name &seg:0 Store)) (Call (Name &Tree:0 Load) (list (Name &n:0 Load)) nil) None) (Expr (Call (Attribute (Name &seg:0 Load) s_slove Load) nil nil))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &A:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &BIT:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (FunctionDef &update:0 (arguments nil (list (arg &v:1 None None) (arg &w:1 None None)) None nil nil None nil) (/seq (While (Compare (Name &v:1 Load) (list LtE) (list (Name &n:0 Load))) (/seq (AugAssign (Subscript (Name &BIT:0 Load) (Name &v:1 Load) Store) Add (Name &w:1 Load)) (AugAssign (Name &v:1 Store) Add (BinOp (Name &v:1 Load) BitAnd (UnaryOp USub (Name &v:1 Load))))) nil)) nil None None) (FunctionDef &getvalue:0 (arguments nil (list (arg &v:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &ANS:2 Store)) (Constant i0 None) None) (While (Compare (Name &v:2 Load) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Name &ANS:2 Store) Add (Subscript (Name &BIT:0 Load) (Name &v:2 Load) Load)) (AugAssign (Name &v:2 Store) Sub (BinOp (Name &v:2 Load) BitAnd (UnaryOp USub (Name &v:2 Load))))) nil) (Return (Name &ANS:2 Load))) nil None None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Name &update:0 Load) (list (Name &i:0 Load) (Name &i:0 Load)) nil))) nil None) (Assign (list (Name &ANS:0 Store)) (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (fn_1 (Name &n:0 Load)) (/seq (Assign (list (Name &MIN:0 Store)) (Constant i0 None) None) (Assign (list (Name &MAX:0 Store)) (Name &n:0 Load) None) (Assign (list (Name &k:0 Store)) (Subscript (Name &A:0 Load) (Name &i:0 Load) Load) None) (While (Constant True None) (/seq (Assign (list (Name &x:0 Store)) (BinOp (BinOp (BinOp (Name &MIN:0 Load) Add (Name &MAX:0 Load)) Add (Constant i1 None)) FloorDiv (Constant i2 None)) None) (If (Compare (Call (Name &getvalue:0 Load) (list (Name &x:0 Load)) nil) (list Gt) (list (Name &k:0 Load))) (/seq (If (Compare (Call (Name &getvalue:0 Load) (list (BinOp (Name &x:0 Load) Sub (Constant i1 None))) nil) (list Eq) (list (Name &k:0 Load))) (/seq (Assign (list (Subscript (Name &ANS:0 Load) (Name &i:0 Load) Store)) (Name &x:0 Load) None) Break) (/seq (Assign (list (Name &MAX:0 Store)) (Name &x:0 Load) None)))) (/seq (Assign (list (Name &MIN:0 Store)) (Name &x:0 Load) None)))) nil) (Expr (Call (Name &update:0 Load) (list (Name &x:0 Load) (UnaryOp USub (Name &x:0 Load))) nil))) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &ANS:0 Load) Load)) nil))) nil)",
            "(Module (/seq (ClassDef &FTree:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &f:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Call (Name g_len Load) (list (Name &f:2 Load)) nil) None) (Assign (list (Attribute (Name &self:2 Load) s_ft Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Attribute (Name &self:2 Load) s_n Load) Add (Constant i1 None))) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Attribute (Name &self:2 Load) s_n Load) Add (Constant i1 None))) nil) (/seq (AugAssign (Subscript (Attribute (Name &self:2 Load) s_ft Load) (Name &i:2 Load) Store) Add (Subscript (Name &f:2 Load) (BinOp (Name &i:2 Load) Sub (Constant i1 None)) Load)) (If (Compare (BinOp (Name &i:2 Load) Add (Call (Attribute (Name &self:2 Load) s_lsone Load) (list (Name &i:2 Load)) nil)) (list LtE) (list (Attribute (Name &self:2 Load) s_n Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:2 Load) s_ft Load) (BinOp (Name &i:2 Load) Add (Call (Attribute (Name &self:2 Load) s_lsone Load) (list (Name &i:2 Load)) nil)) Store) Add (Subscript (Attribute (Name &self:2 Load) s_ft Load) (Name &i:2 Load) Load))) nil)) nil None)) nil None None) (FunctionDef &lsone:1 (arguments nil (list (arg &self:3 None None) (arg &s:3 None None)) None nil nil None nil) (/seq (Return (BinOp (Name &s:3 Load) BitAnd (UnaryOp USub (Name &s:3 Load))))) nil None None) (FunctionDef &query:1 (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &j:4 None None)) None nil nil None nil) (/seq (If (Compare (Name &i:4 Load) (list Gt) (list (Constant i1 None))) (/seq (Return (BinOp (Call (Attribute (Name &self:4 Load) s_query Load) (list (Constant i1 None) (Name &j:4 Load)) nil) Sub (Call (Attribute (Name &self:4 Load) s_query Load) (list (Constant i1 None) (BinOp (Name &i:4 Load) Sub (Constant i1 None))) nil)))) nil) (Assign (list (Name &s:4 Store)) (Constant i0 None) None) (While (Compare (Name &j:4 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:4 Store) Add (Subscript (Attribute (Name &self:4 Load) s_ft Load) (Name &j:4 Load) Load)) (AugAssign (Name &j:4 Store) Sub (Call (Attribute (Name &self:4 Load) s_lsone Load) (list (Name &j:4 Load)) nil))) nil) (Return (Name &s:4 Load))) nil None None) (FunctionDef &update:1 (arguments nil (list (arg &self:5 None None) (arg &i:5 None None) (arg &v:5 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:5 Load) (list LtE) (list (Attribute (Name &self:5 Load) s_n Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:5 Load) s_ft Load) (Name &i:5 Load) Store) Add (Name &v:5 Load)) (AugAssign (Name &i:5 Store) Add (Call (Attribute (Name &self:5 Load) s_lsone Load) (list (Name &i:5 Load)) nil))) nil)) nil None None) (FunctionDef &select:1 (arguments nil (list (arg &self:6 None None) (arg &k:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &lo:6 Store)) (Constant i1 None) None) (Assign (list (Name &hi:6 Store)) (Attribute (Name &self:6 Load) s_n Load) None) (For (Name &i:6 Store) (Call (Name g_range Load) (list (Constant i19 None)) nil) (/seq (Assign (list (Name &mid:6 Store)) (BinOp (BinOp (Name &lo:6 Load) Add (Name &hi:6 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (Call (Attribute (Name &self:6 Load) s_query Load) (list (Constant i1 None) (Name &mid:6 Load)) nil) (list Lt) (list (Name &k:6 Load))) (/seq (Assign (list (Name &lo:6 Store)) (Name &mid:6 Load) None)) (/seq (Assign (list (Name &hi:6 Store)) (Name &mid:6 Load) None)))) nil None) (Return (Name &hi:6 Load))) nil None None)) nil) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &data:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:7 Load)) nil) (list (comprehension (Name &i:7 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &ft:0 Store)) (Call (Name &FTree:0 Load) (list (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)) nil)) nil) None) (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant s_ None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (fn_1 (Name &n:0 Load)) (/seq (Assign (list (Name &val:0 Store)) (Subscript (Name &data:0 Load) (Name &i:0 Load) Load) None) (Assign (list (Name &ind:0 Store)) (Call (Attribute (Name &ft:0 Load) s_select Load) (list (BinOp (Name &val:0 Load) Add (Constant i1 None))) nil) None) (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Call (Name g_str Load) (list (Name &ind:0 Load)) nil) None) (Expr (Call (Attribute (Name &ft:0 Load) s_update Load) (list (Name &ind:0 Load) (UnaryOp USub (Name &ind:0 Load))) nil))) nil None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Name &ans:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None) (ClassDef &BIT:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &nums:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_nums Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Call (Name g_len Load) (list (Name &nums:2 Load)) nil)) None) (For (Tuple (list (Name &i:2 Store) (Name &x:2 Store)) Store) (Call (Name g_enumerate Load) (list (Name &nums:2 Load)) nil) (/seq (If (Compare (Name &i:2 Load) (list Eq) (list (Constant i0 None))) (/seq Continue) nil) (Expr (Call (Attribute (Name &self:2 Load) s_update Load) (list (Name &i:2 Load) (Name &x:2 Load)) nil))) nil None)) nil None None) (FunctionDef &low_bit:1 (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil) (/seq (Return (BinOp (Name &x:3 Load) BitAnd (UnaryOp USub (Name &x:3 Load))))) nil None None) (FunctionDef &update:1 (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &diff:4 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:4 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:4 Load) s_nums Load)) nil))) (/seq (AugAssign (Subscript (Attribute (Name &self:4 Load) s_nums Load) (Name &i:4 Load) Store) Add (Name &diff:4 Load)) (AugAssign (Name &i:4 Store) Add (Call (Attribute (Name &self:4 Load) s_low_bit Load) (list (Name &i:4 Load)) nil))) nil)) nil None None) (FunctionDef &prefix_sum:1 (arguments nil (list (arg &self:5 None None) (arg &i:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &ret:5 Store)) (Constant i0 None) None) (While (Compare (Name &i:5 Load) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Name &ret:5 Store) Add (Subscript (Attribute (Name &self:5 Load) s_nums Load) (Name &i:5 Load) Load)) (AugAssign (Name &i:5 Store) Sub (Call (Attribute (Name &self:5 Load) s_low_bit Load) (list (Name &i:5 Load)) nil))) nil) (Return (Name &ret:5 Load))) nil None None) (FunctionDef &search:1 (arguments nil (list (arg &self:6 None None) (arg &x:6 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &cur_index:6 Store) (Name &cur_sum:6 Store)) Store)) (Tuple (list (Constant i0 None) (Constant i0 None)) Load) None) (Assign (list (Name &delta:6 Store)) (BinOp (Call (Name g_len Load) (list (Attribute (Name &self:6 Load) s_nums Load)) nil) Sub (Constant i1 None)) None) (While (BinOp (Name &delta:6 Load) Sub (Call (Attribute (Name &self:6 Load) s_low_bit Load) (list (Name &delta:6 Load)) nil)) (/seq (AugAssign (Name &delta:6 Store) Sub (Call (Attribute (Name &self:6 Load) s_low_bit Load) (list (Name &delta:6 Load)) nil))) nil) (While (Name &delta:6 Load) (/seq (Assign (list (Name &m:6 Store)) (BinOp (Name &cur_index:6 Load) Add (Name &delta:6 Load)) None) (If (Compare (Name &m:6 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:6 Load) s_nums Load)) nil))) (/seq (Assign (list (Name &sm:6 Store)) (BinOp (Name &cur_sum:6 Load) Add (Subscript (Attribute (Name &self:6 Load) s_nums Load) (Name &m:6 Load) Load)) None) (If (Compare (Name &sm:6 Load) (list LtE) (list (Name &x:6 Load))) (/seq (Assign (list (Tuple (list (Name &cur_index:6 Store) (Name &cur_sum:6 Store)) Store)) (Tuple (list (Name &m:6 Load) (Name &sm:6 Load)) Load) None)) nil)) nil) (AugAssign (Name &delta:6 Store) FloorDiv (Constant i2 None))) nil) (Return (BinOp (Name &cur_index:6 Load) Add (Constant i1 None)))) nil None None)) nil) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &bit:0 Store)) (Call (Name &BIT:0 Load) (list (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)) nil) None) (Assign (list (Name &ans:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:7 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Assign (list (Name &nums:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (For (Name &i:0 Store) (fn_1 (Name &n:0 Load)) (/seq (Assign (list (Name &index:0 Store)) (Call (Attribute (Name &bit:0 Load) s_search Load) (list (Subscript (Name &nums:0 Load) (Name &i:0 Load) Load)) nil) None) (Expr (Call (Attribute (Name &bit:0 Load) s_update Load) (list (Name &index:0 Load) (UnaryOp USub (Name &index:0 Load))) nil)) (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &index:0 Load) None)) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (ImportFrom s_collections (list (alias g_deque None)) i0) (Import (list (alias g_math None))) (Import (list (alias g_copy None))) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &arr:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:4 Load)) nil) (list (comprehension (Name &x:4 Store) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &bit:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &N:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &series:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Add (ListComp (Name &x:5 Load) (list (comprehension (Name &x:5 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) nil i0)))) None) (FunctionDef &lowbit:0 (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (/seq (Return (BinOp (Name &x:1 Load) BitAnd (UnaryOp USub (Name &x:1 Load))))) nil None None) (FunctionDef &update:0 (arguments nil (list (arg &idx:2 None None) (arg &delta:2 None None)) None nil nil None nil) (/seq (While (Compare (Name &idx:2 Load) (list LtE) (list (Name &N:0 Load))) (/seq (AugAssign (Subscript (Name &bit:0 Load) (Name &idx:2 Load) Store) Add (Name &delta:2 Load)) (AugAssign (Name &idx:2 Store) Add (Call (Name &lowbit:0 Load) (list (Name &idx:2 Load)) nil))) nil)) nil None None) (FunctionDef &query:0 (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:3 Store)) (Constant i0 None) None) (While (Compare (Name &x:3 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:3 Store) Add (Subscript (Name &bit:0 Load) (Name &x:3 Load) Load)) (AugAssign (Name &x:3 Store) Sub (Call (Name &lowbit:0 Load) (list (Name &x:3 Load)) nil))) nil) (Return (Name &s:3 Load))) nil None None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &N:0 Load) Add (Constant i1 None))) nil) (/seq (AugAssign (Subscript (Name &bit:0 Load) (Name &i:0 Load) Store) Add (Subscript (Name &series:0 Load) (Name &i:0 Load) Load)) (Assign (list (Name &y:0 Store)) (BinOp (Name &i:0 Load) Add (Call (Name &lowbit:0 Load) (list (Name &i:0 Load)) nil)) None) (If (Compare (Name &y:0 Load) (list LtE) (list (Name &N:0 Load))) (/seq (AugAssign (Subscript (Name &series:0 Load) (Name &y:0 Load) Store) Add (Subscript (Name &series:0 Load) (Name &i:0 Load) Load))) nil)) nil None) (Assign (list (Name &visited:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &N:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None) (For (Name &i:0 Store) (fn_1 (Name &N:0 Load)) (/seq (Assign (list (Name &left:0 Store)) (Constant i1 None) None) (Assign (list (Name &right:0 Store)) (Name &N:0 Load) None) (Assign (list (Name &target:0 Store)) (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) None) (While (Compare (Name &left:0 Load) (list LtE) (list (Name &right:0 Load))) (/seq (Assign (list (Name &mid:0 Store)) (BinOp (BinOp (Name &left:0 Load) Add (Name &right:0 Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &q:0 Store)) (Call (Name &query:0 Load) (list (Name &mid:0 Load)) nil) None) (If (Compare (Name &q:0 Load) (list Lt) (list (Name &target:0 Load))) (/seq (Assign (list (Name &left:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None)) (/seq (If (Compare (Name &q:0 Load) (list Gt) (list (Name &target:0 Load))) (/seq (Assign (list (Name &right:0 Store)) (BinOp (Name &mid:0 Load) Sub (Constant i1 None)) None)) (/seq (If (Compare (Subscript (Name &visited:0 Load) (Name &mid:0 Load) Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &left:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Subscript (Name &visited:0 Load) (Name &mid:0 Load) Store)) (Constant i1 None) None) (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &mid:0 Load) None) Break))))))) nil) (Expr (Call (Name &update:0 Load) (list (BinOp (Name &mid:0 Load) Add (Constant i1 None)) (UnaryOp USub (Name &mid:0 Load))) nil))) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))) nil)",
            "(Module (/seq (FunctionDef &sum_number:0 (arguments nil (list (arg &n:1 None None) (arg &j:1 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &j:1 Load) (Constant i0 None) Store)) (Constant i0 None) None) (Assign (list (Subscript (Name &j:1 Load) (Constant i1 None) Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i2 None) (BinOp (Name &n:1 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Name &j:1 Load) (Name &i:1 Load) Store)) (BinOp (Subscript (Name &j:1 Load) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) Load) Add (BinOp (Name &i:1 Load) Sub (Constant i1 None))) None)) nil None) (Return (Name &j:1 Load))) nil None None) (Assign (list (Name &po:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &l:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &po:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &l1:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:4 Load)) nil) (list (comprehension (Name &i:4 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (FunctionDef &getsum:0 (arguments nil (list (arg &BITTree:2 None None) (arg &i:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:2 Store)) (Constant i0 None) None) (While (Compare (Name &i:2 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:2 Store) Add (Subscript (Name &BITTree:2 Load) (Name &i:2 Load) Load)) (AugAssign (Name &i:2 Store) Sub (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))) nil) (Return (Name &s:2 Load))) nil None None) (FunctionDef &updatebit:0 (arguments nil (list (arg &BITTree:3 None None) (arg &n:3 None None) (arg &i:3 None None) (arg &v:3 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:3 Load) (list LtE) (list (Name &n:3 Load))) (/seq (AugAssign (Subscript (Name &BITTree:3 Load) (Name &i:3 Load) Store) Add (Name &v:3 Load)) (AugAssign (Name &i:3 Store) Add (BinOp (Name &i:3 Load) BitAnd (UnaryOp USub (Name &i:3 Load))))) nil)) nil None None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &po:0 Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Name &updatebit:0 Load) (list (Name &l:0 Load) (Name &po:0 Load) (Name &i:0 Load) (Name &i:0 Load)) nil))) nil None) (Assign (list (Name &output:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &po:0 Load)) None) (For (Name &i:0 Store) (fn_1 (Name &po:0 Load)) (/seq (Assign (list (Name &min_:0 Store)) (Constant i0 None) None) (Assign (list (Name &max_:0 Store)) (Name &po:0 Load) None) (Assign (list (Name &k:0 Store)) (Subscript (Name &l1:0 Load) (Name &i:0 Load) Load) None) (While (Constant True None) (/seq (Assign (list (Name &x:0 Store)) (BinOp (BinOp (BinOp (Name &min_:0 Load) Add (Name &max_:0 Load)) Add (Constant i1 None)) FloorDiv (Constant i2 None)) None) (If (Compare (Call (Name &getsum:0 Load) (list (Name &l:0 Load) (Name &x:0 Load)) nil) (list Gt) (list (Name &k:0 Load))) (/seq (If (Compare (Call (Name &getsum:0 Load) (list (Name &l:0 Load) (BinOp (Name &x:0 Load) Sub (Constant i1 None))) nil) (list Eq) (list (Name &k:0 Load))) (/seq (Assign (list (Subscript (Name &output:0 Load) (Name &i:0 Load) Store)) (Name &x:0 Load) None) Break) (/seq (Assign (list (Name &max_:0 Store)) (Name &x:0 Load) None)))) (/seq (Assign (list (Name &min_:0 Store)) (Name &x:0 Load) None)))) nil) (Expr (Call (Name &updatebit:0 Load) (list (Name &l:0 Load) (Name &po:0 Load) (Name &x:0 Load) (UnaryOp USub (Name &x:0 Load))) nil))) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &output:0 Load) Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &nn:0 Store)) (Constant i18 None) None) (Assign (list (Name &bit:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Constant i2 None) Pow (Name &nn:0 Load)) Add (Constant i1 None))) None) (FunctionDef &addbit:0 (arguments nil (list (arg &i:1 None None) (arg &x:1 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:1 Load) (list LtE) (list (BinOp (Constant i2 None) Pow (Name &nn:0 Load)))) (/seq (AugAssign (Subscript (Name &bit:0 Load) (Name &i:1 Load) Store) Add (Name &x:1 Load)) (AugAssign (Name &i:1 Store) Add (BinOp (Name &i:1 Load) BitAnd (UnaryOp USub (Name &i:1 Load))))) nil)) nil None None) (FunctionDef &getsum:0 (arguments nil (list (arg &i:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &ret:2 Store)) (Constant i0 None) None) (While (Compare (Name &i:2 Load) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Name &ret:2 Store) Add (Subscript (Name &bit:0 Load) (Name &i:2 Load) Load)) (AugAssign (Name &i:2 Store) Sub (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))) nil) (Return (Name &ret:2 Load))) nil None None) (FunctionDef &searchbit:0 (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &l:3 Store) (Name &sl:3 Store)) Store)) (Tuple (list (Constant i0 None) (Constant i0 None)) Load) None) (Assign (list (Name &d:3 Store)) (BinOp (Constant i2 None) Pow (BinOp (Name &nn:0 Load) Sub (Constant i1 None))) None) (While (Name &d:3 Load) (/seq (Assign (list (Name &m:3 Store)) (BinOp (Name &l:3 Load) Add (Name &d:3 Load)) None) (Assign (list (Name &sm:3 Store)) (BinOp (Name &sl:3 Load) Add (Subscript (Name &bit:0 Load) (Name &m:3 Load) Load)) None) (If (Compare (Name &sm:3 Load) (list LtE) (list (Name &x:3 Load))) (/seq (Assign (list (Tuple (list (Name &l:3 Store) (Name &sl:3 Store)) Store)) (Tuple (list (Name &m:3 Load) (Name &sm:3 Load)) Load) None)) nil) (AugAssign (Name &d:3 Store) FloorDiv (Constant i2 None))) nil) (Return (BinOp (Name &l:3 Load) Add (Constant i1 None)))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Name &addbit:0 Load) (list (Name &i:0 Load) (Name &i:0 Load)) nil))) nil None) (Assign (list (Name &ans:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (fn_1 (Name &n:0 Load)) (/seq (Assign (list (Name &a:0 Store)) (Call (Name &searchbit:0 Load) (list (Subscript (Name &l:0 Load) (Name &i:0 Load) Load)) nil) None) (Expr (Call (Name &addbit:0 Load) (list (Name &a:0 Load) (UnaryOp USub (Name &a:0 Load))) nil)) (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &a:0 Load) None)) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))) nil)",
            "(Module (/seq (ClassDef &segTree:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_t Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) LShift (Constant i2 None))) None)) nil None None) (FunctionDef &update:1 (arguments nil (list (arg &self:4 None None) (arg &node:4 None None) (arg &l:4 None None) (arg &r:4 None None) (arg &index:4 None None) (arg &value:4 None None)) None nil nil None nil) (/seq (If (Compare (Name &l:4 Load) (list Eq) (list (Name &r:4 Load))) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s_t Load) (Name &node:4 Load) Store)) (Name &value:4 Load) None) (Return None)) nil) (Assign (list (Name &mid:4 Store)) (BinOp (BinOp (Name &l:4 Load) Add (Name &r:4 Load)) RShift (Constant i1 None)) None) (If (Compare (Name &index:4 Load) (list LtE) (list (Name &mid:4 Load))) (/seq (Expr (Call (Attribute (Name &self:4 Load) s_update Load) (list (BinOp (Name &node:4 Load) Mult (Constant i2 None)) (Name &l:4 Load) (Name &mid:4 Load) (Name &index:4 Load) (Name &value:4 Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:4 Load) s_update Load) (list (BinOp (BinOp (Name &node:4 Load) Mult (Constant i2 None)) Add (Constant i1 None)) (BinOp (Name &mid:4 Load) Add (Constant i1 None)) (Name &r:4 Load) (Name &index:4 Load) (Name &value:4 Load)) nil)))) (Assign (list (Subscript (Attribute (Name &self:4 Load) s_t Load) (Name &node:4 Load) Store)) (BinOp (Subscript (Attribute (Name &self:4 Load) s_t Load) (BinOp (Name &node:4 Load) Mult (Constant i2 None)) Load) Add (Subscript (Attribute (Name &self:4 Load) s_t Load) (BinOp (BinOp (Name &node:4 Load) Mult (Constant i2 None)) Add (Constant i1 None)) Load)) None)) nil None None) (FunctionDef &query:1 (arguments nil (list (arg &self:5 None None) (arg &node:5 None None) (arg &l:5 None None) (arg &r:5 None None) (arg &value:5 None None)) None nil nil None nil) (/seq (If (Compare (Name &l:5 Load) (list Eq) (list (Name &r:5 Load))) (/seq (Return (Subscript (Attribute (Name &self:5 Load) s_t Load) (Name &node:5 Load) Load))) nil) (Assign (list (Name &mid:5 Store)) (BinOp (BinOp (Name &l:5 Load) Add (Name &r:5 Load)) RShift (Constant i1 None)) None) (If (Compare (Subscript (Attribute (Name &self:5 Load) s_t Load) (BinOp (Name &node:5 Load) Mult (Constant i2 None)) Load) (list GtE) (list (Name &value:5 Load))) (/seq (Return (Call (Attribute (Name &self:5 Load) s_query Load) (list (BinOp (Name &node:5 Load) Mult (Constant i2 None)) (Name &l:5 Load) (Name &mid:5 Load) (Name &value:5 Load)) nil))) nil) (Return (Call (Attribute (Name &self:5 Load) s_query Load) (list (BinOp (BinOp (Name &node:5 Load) Mult (Constant i2 None)) Add (Constant i1 None)) (BinOp (Name &mid:5 Load) Add (Constant i1 None)) (Name &r:5 Load) (BinOp (Name &value:5 Load) Sub (Subscript (Attribute (Name &self:5 Load) s_t Load) (BinOp (Name &node:5 Load) Mult (Constant i2 None)) Load))) nil))) nil None None)) nil) (FunctionDef &do:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:2 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &nums:2 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:6 Load)) nil) (list (comprehension (Name &i:6 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil) nil i0))) None) (Assign (list (Name &res:2 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:2 Load)) None) (Assign (list (Name &weightTree:2 Store)) (Call (Name &segTree:0 Load) (list (Name &n:2 Load)) nil) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:2 Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Attribute (Name &weightTree:2 Load) s_update Load) (list (Constant i1 None) (Constant i1 None) (Name &n:2 Load) (Name &i:2 Load) (Name &i:2 Load)) nil))) nil None) (For (Name &i:2 Store) (fn_1 (Name &n:2 Load)) (/seq (Assign (list (Subscript (Name &res:2 Load) (Name &i:2 Load) Store)) (Call (Attribute (Name &weightTree:2 Load) s_query Load) (list (Constant i1 None) (Constant i1 None) (Name &n:2 Load) (BinOp (Subscript (Name &nums:2 Load) (Name &i:2 Load) Load) Add (Constant i1 None))) nil) None) (Expr (Call (Attribute (Name &weightTree:2 Load) s_update Load) (list (Constant i1 None) (Constant i1 None) (Name &n:2 Load) (Subscript (Name &res:2 Load) (Name &i:2 Load) Load) (Constant i0 None)) nil))) nil None) (Return (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &c:7 Load)) nil) (list (comprehension (Name &c:7 Store) (Name &res:2 Load) nil i0)))) nil))) nil None None) (Expr (Call (Name g_print Load) (list (Call (Name &do:0 Load) nil nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &BIT:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (FunctionDef &update:0 (arguments nil (list (arg &i:1 None None) (arg &w:1 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:1 Load) (list LtE) (list (Name &n:0 Load))) (/seq (AugAssign (Subscript (Name &BIT:0 Load) (Name &i:1 Load) Store) Add (Name &w:1 Load)) (AugAssign (Name &i:1 Store) Add (BinOp (Name &i:1 Load) BitAnd (UnaryOp USub (Name &i:1 Load))))) nil)) nil None None) (FunctionDef &get_sum:0 (arguments nil (list (arg &i:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &res:2 Store)) (Constant i0 None) None) (While (Compare (Name &i:2 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &res:2 Store) Add (Subscript (Name &BIT:0 Load) (Name &i:2 Load) Load)) (AugAssign (Name &i:2 Store) Sub (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))) nil) (Return (Name &res:2 Load))) nil None None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Name &update:0 Load) (list (Name &i:0 Load) (Name &i:0 Load)) nil))) nil None) (Assign (list (Name &ans:0 Store)) (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Subscript (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (Slice None None (UnaryOp USub (Constant i1 None))) Load) (/seq (Assign (list (Name &l:0 Store)) (Constant i0 None) None) (Assign (list (Name &r:0 Store)) (Name &n:0 Load) None) (Assign (list (Name &ss:0 Store)) (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) None) (While (Constant True None) (/seq (Assign (list (Name &mid:0 Store)) (BinOp (BinOp (BinOp (Name &l:0 Load) Add (Name &r:0 Load)) Add (Constant i1 None)) FloorDiv (Constant i2 None)) None) (If (Compare (Call (Name &get_sum:0 Load) (list (Name &mid:0 Load)) nil) (list Gt) (list (Name &ss:0 Load))) (/seq (If (Compare (Call (Name &get_sum:0 Load) (list (BinOp (Name &mid:0 Load) Sub (Constant i1 None))) nil) (list Eq) (list (Name &ss:0 Load))) (/seq (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &mid:0 Load) None) Break) (/seq (Assign (list (Name &r:0 Store)) (Name &mid:0 Load) None)))) (/seq (Assign (list (Name &l:0 Store)) (Name &mid:0 Load) None)))) nil) (Expr (Call (Name &update:0 Load) (list (Name &mid:0 Load) (UnaryOp USub (Name &mid:0 Load))) nil))) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (ImportFrom s_collections (list (alias g_deque None)) i0) (Import (list (alias g_math None))) (Import (list (alias g_copy None))) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &arr:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:4 Load)) nil) (list (comprehension (Name &x:4 Store) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &bit:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &N:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &series:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Add (ListComp (Name &x:5 Load) (list (comprehension (Name &x:5 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) nil i0)))) None) (FunctionDef &lowbit:0 (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (/seq (Return (BinOp (Name &x:1 Load) BitAnd (UnaryOp USub (Name &x:1 Load))))) nil None None) (FunctionDef &update:0 (arguments nil (list (arg &idx:2 None None) (arg &delta:2 None None)) None nil nil None nil) (/seq (While (Compare (Name &idx:2 Load) (list LtE) (list (Name &N:0 Load))) (/seq (AugAssign (Subscript (Name &bit:0 Load) (Name &idx:2 Load) Store) Add (Name &delta:2 Load)) (AugAssign (Name &idx:2 Store) Add (Call (Name &lowbit:0 Load) (list (Name &idx:2 Load)) nil))) nil)) nil None None) (FunctionDef &query:0 (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:3 Store)) (Constant i0 None) None) (While (Compare (Name &x:3 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:3 Store) Add (Subscript (Name &bit:0 Load) (Name &x:3 Load) Load)) (AugAssign (Name &x:3 Store) Sub (Call (Name &lowbit:0 Load) (list (Name &x:3 Load)) nil))) nil) (Return (Name &s:3 Load))) nil None None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &N:0 Load) Add (Constant i1 None))) nil) (/seq (AugAssign (Subscript (Name &bit:0 Load) (Name &i:0 Load) Store) Add (Subscript (Name &series:0 Load) (Name &i:0 Load) Load)) (Assign (list (Name &y:0 Store)) (BinOp (Name &i:0 Load) Add (Call (Name &lowbit:0 Load) (list (Name &i:0 Load)) nil)) None) (If (Compare (Name &y:0 Load) (list LtE) (list (Name &N:0 Load))) (/seq (AugAssign (Subscript (Name &series:0 Load) (Name &y:0 Load) Store) Add (Subscript (Name &series:0 Load) (Name &i:0 Load) Load))) nil)) nil None) (Assign (list (Name &visited:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &N:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None) (For (Name &i:0 Store) (fn_1 (Name &N:0 Load)) (/seq (Assign (list (Name &left:0 Store)) (Constant i1 None) None) (Assign (list (Name &right:0 Store)) (Name &N:0 Load) None) (Assign (list (Name &target:0 Store)) (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) None) (While (Constant True None) (/seq (Assign (list (Name &L:0 Store)) (BinOp (BinOp (Name &right:0 Load) Sub (Name &left:0 Load)) Add (Constant i1 None)) None) (Assign (list (Name &num:0 Store)) (BinOp (BinOp (Name &left:0 Load) Sub (Constant i1 None)) Add (BinOp (Constant i2 None) Pow (Call (Name g_int Load) (list (Call (Attribute (Name g_math Load) s_log Load) (list (Name &L:0 Load) (Constant i2 None)) nil)) nil))) None) (Assign (list (Name &q:0 Store)) (Subscript (Name &bit:0 Load) (Name &num:0 Load) Load) None) (If (Compare (Name &q:0 Load) (list Lt) (list (Name &target:0 Load))) (/seq (AugAssign (Name &target:0 Store) Sub (Name &q:0 Load)) (Assign (list (Name &left:0 Store)) (BinOp (Name &num:0 Load) Add (Constant i1 None)) None)) (/seq (If (Compare (Name &q:0 Load) (list Gt) (list (Name &target:0 Load))) (/seq (Assign (list (Name &right:0 Store)) (BinOp (Name &num:0 Load) Sub (Constant i1 None)) None)) (/seq (If (Compare (Subscript (Name &visited:0 Load) (Name &num:0 Load) Load) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &target:0 Store) Sub (Name &q:0 Load)) (Assign (list (Name &left:0 Store)) (BinOp (Name &num:0 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Subscript (Name &visited:0 Load) (Name &num:0 Load) Store)) (Constant i1 None) None) (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &num:0 Load) None) Break))))))) nil) (Expr (Call (Name &update:0 Load) (list (BinOp (Name &num:0 Load) Add (Constant i1 None)) (UnaryOp USub (Name &num:0 Load))) nil))) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Import (list (alias g_heapq None) (alias g_bisect None))) (Import (list (alias g_sys None))) (ImportFrom s_collections (list (alias g_deque None) (alias g_defaultdict None)) i0) (ImportFrom s_fractions (list (alias g_Fraction None)) i0) (Import (list (alias g_sys None))) (Assign (list (Name &mod:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &mod1:0 Store)) (Constant i998244353 None) None) (Import (list (alias &os:0 None))) (Import (list (alias &sys:0 None))) (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name &IOBase:0 Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:17 None None) (arg &file:17 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:17 Load) s__fd Store)) (Call (Attribute (Name &file:17 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:17 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None) (Assign (list (Attribute (Name &self:17 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:17 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:17 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:17 Load) s_write Store)) (IfExp (Attribute (Name &self:17 Load) s_writable Load) (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:18 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:18 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (Attribute (Name &self:18 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (Attribute (Name &self:18 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:18 Load)) (/seq Break) nil) (Assign (list (Name &ptr:18 Store)) (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_write Load) (list (Name &b:18 Load)) nil) (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_seek Load) (list (Name &ptr:18 Load)) nil)) Load))) nil) (Assign (list (Attribute (Name &self:18 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:19 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:19 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:19 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (Attribute (Name &self:19 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (Attribute (Name &self:19 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:19 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:19 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:19 Load))) None) (Assign (list (Name &ptr:19 Store)) (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_write Load) (list (Name &b:19 Load)) nil) (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_seek Load) (list (Name &ptr:19 Load)) nil)) Load))) nil) (AugAssign (Attribute (Name &self:19 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:20 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:20 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name &os:0 Load) s_write Load) (list (Attribute (Name &self:20 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name &IOBase:0 Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:21 None None) (arg &file:21 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:21 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:21 Load)) nil) None) (Assign (list (Attribute (Name &self:21 Load) s_flush Store)) (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:21 Load) s_writable Store)) (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:21 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:61 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:61 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:21 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:21 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil)) None) (ClassDef &TreeNode:0 nil nil (/seq (FunctionDef &__init__:3 (arguments nil (list (arg &self:22 None None) (arg &k:22 None None) (arg &v:22 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:22 Load) s_key Store)) (Name &k:22 Load) None) (Assign (list (Attribute (Name &self:22 Load) s_value Store)) (Name &v:22 Load) None) (Assign (list (Attribute (Name &self:22 Load) s_left Store)) (Constant None None) None) (Assign (list (Attribute (Name &self:22 Load) s_right Store)) (Constant None None) None) (Assign (list (Attribute (Name &self:22 Load) s_parent Store)) (Constant None None) None) (Assign (list (Attribute (Name &self:22 Load) s_height Store)) (Constant i1 None) None) (Assign (list (Attribute (Name &self:22 Load) s_num_left Store)) (Constant i1 None) None) (Assign (list (Attribute (Name &self:22 Load) s_num_total Store)) (Constant i1 None) None)) nil None None)) nil) (ClassDef &AvlTree:0 nil nil (/seq (FunctionDef &__init__:4 (arguments nil (list (arg &self:23 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:23 Load) s__tree Store)) (Constant None None) None)) nil None None) (FunctionDef &add:4 (arguments nil (list (arg &self:24 None None) (arg &k:24 None None) (arg &v:24 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &self:24 Load) s__tree Load)) (/seq (Assign (list (Attribute (Name &self:24 Load) s__tree Store)) (Call (Name &TreeNode:0 Load) (list (Name &k:24 Load) (Name &v:24 Load)) nil) None) (Return None)) nil) (Assign (list (Name &node:24 Store)) (Call (Attribute (Name &self:24 Load) s__add Load) (list (Name &k:24 Load) (Name &v:24 Load)) nil) None) (If (Name &node:24 Load) (/seq (Expr (Call (Attribute (Name &self:24 Load) s__rebalance Load) (list (Name &node:24 Load)) nil))) nil)) nil None None) (FunctionDef &_add:4 (arguments nil (list (arg &self:25 None None) (arg &k:25 None None) (arg &v:25 None None)) None nil nil None nil) (/seq (Assign (list (Name &node:25 Store)) (Attribute (Name &self:25 Load) s__tree Load) None) (While (Name &node:25 Load) (/seq (If (Compare (Name &k:25 Load) (list Lt) (list (Attribute (Name &node:25 Load) s_key Load))) (/seq (If (Attribute (Name &node:25 Load) s_left Load) (/seq (Assign (list (Name &node:25 Store)) (Attribute (Name &node:25 Load) s_left Load) None)) (/seq (Assign (list (Attribute (Name &node:25 Load) s_left Store)) (Call (Name &TreeNode:0 Load) (list (Name &k:25 Load) (Name &v:25 Load)) nil) None) (Assign (list (Attribute (Attribute (Name &node:25 Load) s_left Load) s_parent Store)) (Name &node:25 Load) None) (Return (Attribute (Name &node:25 Load) s_left Load))))) (/seq (If (Compare (Attribute (Name &node:25 Load) s_key Load) (list Lt) (list (Name &k:25 Load))) (/seq (If (Attribute (Name &node:25 Load) s_right Load) (/seq (Assign (list (Name &node:25 Store)) (Attribute (Name &node:25 Load) s_right Load) None)) (/seq (Assign (list (Attribute (Name &node:25 Load) s_right Store)) (Call (Name &TreeNode:0 Load) (list (Name &k:25 Load) (Name &v:25 Load)) nil) None) (Assign (list (Attribute (Attribute (Name &node:25 Load) s_right Load) s_parent Store)) (Name &node:25 Load) None) (Return (Attribute (Name &node:25 Load) s_right Load))))) (/seq (Assign (list (Attribute (Name &node:25 Load) s_value Store)) (Name &v:25 Load) None) (Return None)))))) nil)) nil None None) (FunctionDef &get_height:4 (arguments nil (list (arg &x:26 None None)) None nil nil None nil) (/seq (Return (IfExp (Name &x:26 Load) (Attribute (Name &x:26 Load) s_height Load) (Constant i0 None)))) (list (Name g_staticmethod Load)) None None) (FunctionDef &get_num_total:4 (arguments nil (list (arg &x:27 None None)) None nil nil None nil) (/seq (Return (IfExp (Name &x:27 Load) (Attribute (Name &x:27 Load) s_num_total Load) (Constant i0 None)))) (list (Name g_staticmethod Load)) None None) (FunctionDef &_rebalance:4 (arguments nil (list (arg &self:28 None None) (arg &node:28 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:28 Store)) (Name &node:28 Load) None) (While (Name &n:28 Load) (/seq (Assign (list (Name &lh:28 Store)) (Call (Attribute (Name &self:28 Load) s_get_height Load) (list (Attribute (Name &n:28 Load) s_left Load)) nil) None) (Assign (list (Name &rh:28 Store)) (Call (Attribute (Name &self:28 Load) s_get_height Load) (list (Attribute (Name &n:28 Load) s_right Load)) nil) None) (Assign (list (Attribute (Name &n:28 Load) s_height Store)) (BinOp (Call (Name g_max Load) (list (Name &lh:28 Load) (Name &rh:28 Load)) nil) Add (Constant i1 None)) None) (Assign (list (Name &balance_factor:28 Store)) (BinOp (Name &lh:28 Load) Sub (Name &rh:28 Load)) None) (Assign (list (Attribute (Name &n:28 Load) s_num_total Store)) (BinOp (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:28 Load) s_get_num_total Load) (list (Attribute (Name &n:28 Load) s_left Load)) nil)) Add (Call (Attribute (Name &self:28 Load) s_get_num_total Load) (list (Attribute (Name &n:28 Load) s_right Load)) nil)) None) (Assign (list (Attribute (Name &n:28 Load) s_num_left Store)) (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:28 Load) s_get_num_total Load) (list (Attribute (Name &n:28 Load) s_left Load)) nil)) None) (If (Compare (Name &balance_factor:28 Load) (list Gt) (list (Constant i1 None))) (/seq (If (Compare (Call (Attribute (Name &self:28 Load) s_get_height Load) (list (Attribute (Attribute (Name &n:28 Load) s_left Load) s_left Load)) nil) (list Lt) (list (Call (Attribute (Name &self:28 Load) s_get_height Load) (list (Attribute (Attribute (Name &n:28 Load) s_left Load) s_right Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:28 Load) s__rotate_left Load) (list (Attribute (Name &n:28 Load) s_left Load)) nil))) nil) (Expr (Call (Attribute (Name &self:28 Load) s__rotate_right Load) (list (Name &n:28 Load)) nil))) (/seq (If (Compare (Name &balance_factor:28 Load) (list Lt) (list (UnaryOp USub (Constant i1 None)))) (/seq (If (Compare (Call (Attribute (Name &self:28 Load) s_get_height Load) (list (Attribute (Attribute (Name &n:28 Load) s_right Load) s_right Load)) nil) (list Lt) (list (Call (Attribute (Name &self:28 Load) s_get_height Load) (list (Attribute (Attribute (Name &n:28 Load) s_right Load) s_left Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:28 Load) s__rotate_right Load) (list (Attribute (Name &n:28 Load) s_right Load)) nil))) nil) (Expr (Call (Attribute (Name &self:28 Load) s__rotate_left Load) (list (Name &n:28 Load)) nil))) (/seq (Assign (list (Name &n:28 Store)) (Attribute (Name &n:28 Load) s_parent Load) None)))))) nil)) nil None None) (FunctionDef &_remove_one:4 (arguments nil (list (arg &self:29 None None) (arg &node:29 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDgzLCAxMDUsIDEwMCwgMTAxLCAzMiwgMTAxLCAxMDIsIDEwMiwgMTAxLCA5OSwgMTE2LCAzMywgMzMsIDMzLCAzMiwgNjcsIDEwNCwgOTcsIDExMCwgMTAzLCAxMDEsIDExNSwgMzIsIDExMCwgMTExLCAxMDAsIDEwMSwgNDYsIDMyLCA3OCwgMTExLCAxMDAsIDEwMSwgMzIsIDExNSwgMTA0LCAxMTEsIDExNywgMTA4LCAxMDAsIDMyLCAxMDQsIDk3LCAxMTgsIDEwMSwgMzIsIDEwMSwgMTIwLCA5NywgOTksIDExNiwgMTA4LCAxMjEsIDMyLCAxMTEsIDExMCwgMTAxLCAzMiwgOTksIDEwNCwgMTA1LCAxMDgsIDEwMCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMl0= None)) (Assign (list (Name &replacement:29 Store)) (BoolOp Or (list (Attribute (Name &node:29 Load) s_left Load) (Attribute (Name &node:29 Load) s_right Load))) None) (If (Attribute (Name &node:29 Load) s_parent Load) (/seq (If (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:29 Load)) nil) (/seq (Assign (list (Attribute (Attribute (Name &node:29 Load) s_parent Load) s_left Store)) (Name &replacement:29 Load) None)) (/seq (Assign (list (Attribute (Attribute (Name &node:29 Load) s_parent Load) s_right Store)) (Name &replacement:29 Load) None))) (Assign (list (Attribute (Name &replacement:29 Load) s_parent Store)) (Attribute (Name &node:29 Load) s_parent Load) None) (Assign (list (Attribute (Name &node:29 Load) s_parent Store)) (Constant None None) None)) (/seq (Assign (list (Attribute (Name &self:29 Load) s__tree Store)) (Name &replacement:29 Load) None) (Assign (list (Attribute (Name &replacement:29 Load) s_parent Store)) (Constant None None) None))) (Assign (list (Attribute (Name &node:29 Load) s_left Store)) (Constant None None) None) (Assign (list (Attribute (Name &node:29 Load) s_right Store)) (Constant None None) None) (Assign (list (Attribute (Name &node:29 Load) s_parent Store)) (Constant None None) None) (Expr (Call (Attribute (Name &self:29 Load) s__rebalance Load) (list (Name &replacement:29 Load)) nil))) nil None None) (FunctionDef &_remove_leaf:4 (arguments nil (list (arg &self:30 None None) (arg &node:30 None None)) None nil nil None nil) (/seq (If (Attribute (Name &node:30 Load) s_parent Load) (/seq (If (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:30 Load)) nil) (/seq (Assign (list (Attribute (Attribute (Name &node:30 Load) s_parent Load) s_left Store)) (Constant None None) None)) (/seq (Assign (list (Attribute (Attribute (Name &node:30 Load) s_parent Load) s_right Store)) (Constant None None) None))) (Expr (Call (Attribute (Name &self:30 Load) s__rebalance Load) (list (Attribute (Name &node:30 Load) s_parent Load)) nil))) (/seq (Assign (list (Attribute (Name &self:30 Load) s__tree Store)) (Constant None None) None))) (Assign (list (Attribute (Name &node:30 Load) s_parent Store)) (Constant None None) None) (Assign (list (Attribute (Name &node:30 Load) s_left Store)) (Constant None None) None) (Assign (list (Attribute (Name &node:30 Load) s_right Store)) (Constant None None) None)) nil None None) (FunctionDef &remove:4 (arguments nil (list (arg &self:31 None None) (arg &k:31 None None)) None nil nil None nil) (/seq (Assign (list (Name &node:31 Store)) (Call (Attribute (Name &self:31 Load) s__get_node Load) (list (Name &k:31 Load)) nil) None) (If (UnaryOp Not (Name &node:31 Load)) (/seq (Return None)) nil) (If (Call (Attribute (Name &AvlTree:0 Load) s__is_leaf Load) (list (Name &node:31 Load)) nil) (/seq (Expr (Call (Attribute (Name &self:31 Load) s__remove_leaf Load) (list (Name &node:31 Load)) nil)) (Return None)) nil) (If (BoolOp And (list (Attribute (Name &node:31 Load) s_left Load) (Attribute (Name &node:31 Load) s_right Load))) (/seq (Assign (list (Name &nxt:31 Store)) (Call (Attribute (Name &AvlTree:0 Load) s__get_next Load) (list (Name &node:31 Load)) nil) None) (Assign (list (Attribute (Name &node:31 Load) s_key Store)) (Attribute (Name &nxt:31 Load) s_key Load) None) (Assign (list (Attribute (Name &node:31 Load) s_value Store)) (Attribute (Name &nxt:31 Load) s_value Load) None) (If (Call (Attribute (Name &self:31 Load) s__is_leaf Load) (list (Name &nxt:31 Load)) nil) (/seq (Expr (Call (Attribute (Name &self:31 Load) s__remove_leaf Load) (list (Name &nxt:31 Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:31 Load) s__remove_one Load) (list (Name &nxt:31 Load)) nil)))) (Expr (Call (Attribute (Name &self:31 Load) s__rebalance Load) (list (Name &node:31 Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:31 Load) s__remove_one Load) (list (Name &node:31 Load)) nil))))) nil None None) (FunctionDef &get:4 (arguments nil (list (arg &self:32 None None) (arg &k:32 None None)) None nil nil None nil) (/seq (Assign (list (Name &node:32 Store)) (Call (Attribute (Name &self:32 Load) s__get_node Load) (list (Name &k:32 Load)) nil) None) (Return (IfExp (Name &node:32 Load) (Attribute (Name &node:32 Load) s_value Load) (UnaryOp USub (Constant i1 None))))) nil None None) (FunctionDef &_get_node:4 (arguments nil (list (arg &self:33 None None) (arg &k:33 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &self:33 Load) s__tree Load)) (/seq (Return (Constant None None))) nil) (Assign (list (Name &node:33 Store)) (Attribute (Name &self:33 Load) s__tree Load) None) (While (Name &node:33 Load) (/seq (If (Compare (Name &k:33 Load) (list Lt) (list (Attribute (Name &node:33 Load) s_key Load))) (/seq (Assign (list (Name &node:33 Store)) (Attribute (Name &node:33 Load) s_left Load) None)) (/seq (If (Compare (Attribute (Name &node:33 Load) s_key Load) (list Lt) (list (Name &k:33 Load))) (/seq (Assign (list (Name &node:33 Store)) (Attribute (Name &node:33 Load) s_right Load) None)) (/seq (Return (Name &node:33 Load))))))) nil) (Return (Constant None None))) nil None None) (FunctionDef &get_at:4 (arguments nil (list (arg &self:34 None None) (arg &pos:34 None None)) None nil nil None nil) (/seq (Assign (list (Name &x:34 Store)) (BinOp (Name &pos:34 Load) Add (Constant i1 None)) None) (Assign (list (Name &node:34 Store)) (Attribute (Name &self:34 Load) s__tree Load) None) (While (Name &node:34 Load) (/seq (If (Compare (Name &x:34 Load) (list Lt) (list (Attribute (Name &node:34 Load) s_num_left Load))) (/seq (Assign (list (Name &node:34 Store)) (Attribute (Name &node:34 Load) s_left Load) None)) (/seq (If (Compare (Attribute (Name &node:34 Load) s_num_left Load) (list Lt) (list (Name &x:34 Load))) (/seq (AugAssign (Name &x:34 Store) Sub (Attribute (Name &node:34 Load) s_num_left Load)) (Assign (list (Name &node:34 Store)) (Attribute (Name &node:34 Load) s_right Load) None)) (/seq (Return (Tuple (list (Attribute (Name &node:34 Load) s_key Load) (Attribute (Name &node:34 Load) s_value Load)) Load))))))) nil) (Raise (Call (Name g_IndexError Load) (list (Constant s-Wzc5LCAxMTcsIDExNiwgMzIsIDExMSwgMTAyLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgMTE1XQ== None)) nil) None)) nil None None) (FunctionDef &_is_left:4 (arguments nil (list (arg &node:35 None None)) None nil nil None nil) (/seq (Return (BoolOp And (list (Attribute (Attribute (Name &node:35 Load) s_parent Load) s_left Load) (Compare (Attribute (Attribute (Name &node:35 Load) s_parent Load) s_left Load) (list Eq) (list (Name &node:35 Load))))))) (list (Name g_staticmethod Load)) None None) (FunctionDef &_is_leaf:4 (arguments nil (list (arg &node:36 None None)) None nil nil None nil) (/seq (Return (BoolOp And (list (Compare (Attribute (Name &node:36 Load) s_left Load) (list Is) (list (Constant None None))) (Compare (Attribute (Name &node:36 Load) s_right Load) (list Is) (list (Constant None None))))))) (list (Name g_staticmethod Load)) None None) (FunctionDef &_rotate_right:4 (arguments nil (list (arg &self:37 None None) (arg &node:37 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &node:37 Load) s_parent Load)) (/seq (Assign (list (Attribute (Name &self:37 Load) s__tree Store)) (Attribute (Name &node:37 Load) s_left Load) None) (Assign (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_parent Store)) (Constant None None) None)) (/seq (If (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:37 Load)) nil) (/seq (Assign (list (Attribute (Attribute (Name &node:37 Load) s_parent Load) s_left Store)) (Attribute (Name &node:37 Load) s_left Load) None) (Assign (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_parent Store)) (Attribute (Name &node:37 Load) s_parent Load) None)) (/seq (Assign (list (Attribute (Attribute (Name &node:37 Load) s_parent Load) s_right Store)) (Attribute (Name &node:37 Load) s_left Load) None) (Assign (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_parent Store)) (Attribute (Name &node:37 Load) s_parent Load) None))))) (Assign (list (Name &bk:37 Store)) (Attribute (Attribute (Name &node:37 Load) s_left Load) s_right Load) None) (Assign (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_right Store)) (Name &node:37 Load) None) (Assign (list (Attribute (Name &node:37 Load) s_parent Store)) (Attribute (Name &node:37 Load) s_left Load) None) (Assign (list (Attribute (Name &node:37 Load) s_left Store)) (Name &bk:37 Load) None) (If (Name &bk:37 Load) (/seq (Assign (list (Attribute (Name &bk:37 Load) s_parent Store)) (Name &node:37 Load) None)) nil) (Assign (list (Attribute (Name &node:37 Load) s_height Store)) (BinOp (Call (Name g_max Load) (list (Call (Attribute (Name &self:37 Load) s_get_height Load) (list (Attribute (Name &node:37 Load) s_left Load)) nil) (Call (Attribute (Name &self:37 Load) s_get_height Load) (list (Attribute (Name &node:37 Load) s_right Load)) nil)) nil) Add (Constant i1 None)) None) (Assign (list (Attribute (Name &node:37 Load) s_num_total Store)) (BinOp (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:37 Load) s_get_num_total Load) (list (Attribute (Name &node:37 Load) s_left Load)) nil)) Add (Call (Attribute (Name &self:37 Load) s_get_num_total Load) (list (Attribute (Name &node:37 Load) s_right Load)) nil)) None) (Assign (list (Attribute (Name &node:37 Load) s_num_left Store)) (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:37 Load) s_get_num_total Load) (list (Attribute (Name &node:37 Load) s_left Load)) nil)) None)) nil None None) (FunctionDef &_rotate_left:4 (arguments nil (list (arg &self:38 None None) (arg &node:38 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &node:38 Load) s_parent Load)) (/seq (Assign (list (Attribute (Name &self:38 Load) s__tree Store)) (Attribute (Name &node:38 Load) s_right Load) None) (Assign (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_parent Store)) (Constant None None) None)) (/seq (If (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:38 Load)) nil) (/seq (Assign (list (Attribute (Attribute (Name &node:38 Load) s_parent Load) s_left Store)) (Attribute (Name &node:38 Load) s_right Load) None) (Assign (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_parent Store)) (Attribute (Name &node:38 Load) s_parent Load) None)) (/seq (Assign (list (Attribute (Attribute (Name &node:38 Load) s_parent Load) s_right Store)) (Attribute (Name &node:38 Load) s_right Load) None) (Assign (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_parent Store)) (Attribute (Name &node:38 Load) s_parent Load) None))))) (Assign (list (Name &bk:38 Store)) (Attribute (Attribute (Name &node:38 Load) s_right Load) s_left Load) None) (Assign (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_left Store)) (Name &node:38 Load) None) (Assign (list (Attribute (Name &node:38 Load) s_parent Store)) (Attribute (Name &node:38 Load) s_right Load) None) (Assign (list (Attribute (Name &node:38 Load) s_right Store)) (Name &bk:38 Load) None) (If (Name &bk:38 Load) (/seq (Assign (list (Attribute (Name &bk:38 Load) s_parent Store)) (Name &node:38 Load) None)) nil) (Assign (list (Attribute (Name &node:38 Load) s_height Store)) (BinOp (Call (Name g_max Load) (list (Call (Attribute (Name &self:38 Load) s_get_height Load) (list (Attribute (Name &node:38 Load) s_left Load)) nil) (Call (Attribute (Name &self:38 Load) s_get_height Load) (list (Attribute (Name &node:38 Load) s_right Load)) nil)) nil) Add (Constant i1 None)) None) (Assign (list (Attribute (Name &node:38 Load) s_num_total Store)) (BinOp (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:38 Load) s_get_num_total Load) (list (Attribute (Name &node:38 Load) s_left Load)) nil)) Add (Call (Attribute (Name &self:38 Load) s_get_num_total Load) (list (Attribute (Name &node:38 Load) s_right Load)) nil)) None) (Assign (list (Attribute (Name &node:38 Load) s_num_left Store)) (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:38 Load) s_get_num_total Load) (list (Attribute (Name &node:38 Load) s_left Load)) nil)) None)) nil None None) (FunctionDef &_get_next:4 (arguments nil (list (arg &node:39 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &node:39 Load) s_right Load)) (/seq (Return (Attribute (Name &node:39 Load) s_parent Load))) nil) (Assign (list (Name &n:39 Store)) (Attribute (Name &node:39 Load) s_right Load) None) (While (Attribute (Name &n:39 Load) s_left Load) (/seq (Assign (list (Name &n:39 Store)) (Attribute (Name &n:39 Load) s_left Load) None)) nil) (Return (Name &n:39 Load))) (list (Name g_staticmethod Load)) None None)) nil) (ClassDef &SegmentTree1:0 nil nil (/seq (FunctionDef &__init__:5 (arguments nil (list (arg &self:40 None None) (arg &data:40 None None) (arg &default:40 None None) (arg &func:40 None None)) None nil nil None (list (Constant i0 None) (Lambda (arguments nil (list (arg &a:62 None None) (arg &b:62 None None)) None nil nil None nil) (Call (Name g_max Load) (list (Name &a:62 Load) (Name &b:62 Load)) nil)))) (/seq (Expr (Constant s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd None)) (Assign (list (Attribute (Name &self:40 Load) s__default Store)) (Name &default:40 Load) None) (Assign (list (Attribute (Name &self:40 Load) s__func Store)) (Name &func:40 Load) None) (Assign (list (Attribute (Name &self:40 Load) s__len Store)) (Call (Name g_len Load) (list (Name &data:40 Load)) nil) None) (Assign (list (Attribute (Name &self:40 Load) s__size Store) (Name &_size:40 Store)) (BinOp (Constant i1 None) LShift (Call (Attribute (BinOp (Attribute (Name &self:40 Load) s__len Load) Sub (Constant i1 None)) s_bit_length Load) nil nil)) None) (Assign (list (Attribute (Name &self:40 Load) s_data Store)) (BinOp (List (list (Name &default:40 Load)) Load) Mult (BinOp (Constant i2 None) Mult (Name &_size:40 Load))) None) (Assign (list (Subscript (Attribute (Name &self:40 Load) s_data Load) (Slice (Name &_size:40 Load) (BinOp (Name &_size:40 Load) Add (Attribute (Name &self:40 Load) s__len Load)) None) Store)) (Name &data:40 Load) None) (For (Name &i:40 Store) (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:40 Load)) nil)) nil) (/seq (fn_2 (BinOp (Name &i:40 Load) Add (Name &i:40 Load)) (Name &func:40 Load) &self:40 &i:40)) nil None)) nil None None) (FunctionDef &__delitem__:5 (arguments nil (list (arg &self:41 None None) (arg &idx:41 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &self:41 Load) (Name &idx:41 Load) Store)) (Attribute (Name &self:41 Load) s__default Load) None)) nil None None) (FunctionDef &__getitem__:5 (arguments nil (list (arg &self:42 None None) (arg &idx:42 None None)) None nil nil None nil) (/seq (Return (Subscript (Attribute (Name &self:42 Load) s_data Load) (BinOp (Name &idx:42 Load) Add (Attribute (Name &self:42 Load) s__size Load)) Load))) nil None None) (FunctionDef &__setitem__:5 (arguments nil (list (arg &self:43 None None) (arg &idx:43 None None) (arg &value:43 None None)) None nil nil None nil) (/seq (AugAssign (Name &idx:43 Store) Add (Attribute (Name &self:43 Load) s__size Load)) (Assign (list (Subscript (Attribute (Name &self:43 Load) s_data Load) (Name &idx:43 Load) Store)) (Name &value:43 Load) None) (AugAssign (Name &idx:43 Store) RShift (Constant i1 None)) (While (Name &idx:43 Load) (/seq (fn_2 (BinOp (Constant i2 None) Mult (Name &idx:43 Load)) (Attribute (Name &self:43 Load) s__func Load) &self:43 &idx:43) (AugAssign (Name &idx:43 Store) RShift (Constant i1 None))) nil)) nil None None) (FunctionDef &__len__:5 (arguments nil (list (arg &self:44 None None)) None nil nil None nil) (/seq (Return (Attribute (Name &self:44 Load) s__len Load))) nil None None) (FunctionDef &query:5 (arguments nil (list (arg &self:45 None None) (arg &start:45 None None) (arg &stop:45 None None)) None nil nil None nil) (/seq (If (Compare (Name &start:45 Load) (list Eq) (list (Name &stop:45 Load))) (/seq (Return (Call (Attribute (Name &self:45 Load) s___getitem__ Load) (list (Name &start:45 Load)) nil))) nil) (AugAssign (Name &stop:45 Store) Add (Constant i1 None)) (AugAssign (Name &start:45 Store) Add (Attribute (Name &self:45 Load) s__size Load)) (AugAssign (Name &stop:45 Store) Add (Attribute (Name &self:45 Load) s__size Load)) (Assign (list (Name &res:45 Store)) (Attribute (Name &self:45 Load) s__default Load) None) (While (Compare (Name &start:45 Load) (list Lt) (list (Name &stop:45 Load))) (/seq (If (BinOp (Name &start:45 Load) BitAnd (Constant i1 None)) (/seq (Assign (list (Name &res:45 Store)) (Call (Attribute (Name &self:45 Load) s__func Load) (list (Name &res:45 Load) (Subscript (Attribute (Name &self:45 Load) s_data Load) (Name &start:45 Load) Load)) nil) None) (AugAssign (Name &start:45 Store) Add (Constant i1 None))) nil) (If (BinOp (Name &stop:45 Load) BitAnd (Constant i1 None)) (/seq (AugAssign (Name &stop:45 Store) Sub (Constant i1 None)) (Assign (list (Name &res:45 Store)) (Call (Attribute (Name &self:45 Load) s__func Load) (list (Name &res:45 Load) (Subscript (Attribute (Name &self:45 Load) s_data Load) (Name &stop:45 Load) Load)) nil) None)) nil) (AugAssign (Name &start:45 Store) RShift (Constant i1 None)) (AugAssign (Name &stop:45 Store) RShift (Constant i1 None))) nil) (Return (Name &res:45 Load))) nil None None) (FunctionDef &__repr__:5 (arguments nil (list (arg &self:46 None None)) None nil nil None nil) (/seq (Return (Call (Attribute (Constant s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd None) s_format Load) (list (Attribute (Name &self:46 Load) s_data Load)) nil))) nil None None)) nil) (ClassDef &SegmentTree:0 nil nil (/seq (FunctionDef &__init__:6 (arguments nil (list (arg &self:47 None None) (arg &data:47 None None) (arg &default:47 None None) (arg &func:47 None None)) None nil nil None (list (Constant i0 None) (Lambda (arguments nil (list (arg &a:63 None None) (arg &b:63 None None)) None nil nil None nil) (BinOp (Name &a:63 Load) Add (Name &b:63 Load))))) (/seq (Expr (Constant s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd None)) (Assign (list (Attribute (Name &self:47 Load) s__default Store)) (Name &default:47 Load) None) (Assign (list (Attribute (Name &self:47 Load) s__func Store)) (Name &func:47 Load) None) (Assign (list (Attribute (Name &self:47 Load) s__len Store)) (Call (Name g_len Load) (list (Name &data:47 Load)) nil) None) (Assign (list (Attribute (Name &self:47 Load) s__size Store) (Name &_size:47 Store)) (BinOp (Constant i1 None) LShift (Call (Attribute (BinOp (Attribute (Name &self:47 Load) s__len Load) Sub (Constant i1 None)) s_bit_length Load) nil nil)) None) (Assign (list (Attribute (Name &self:47 Load) s_data Store)) (BinOp (List (list (Name &default:47 Load)) Load) Mult (BinOp (Constant i2 None) Mult (Name &_size:47 Load))) None) (Assign (list (Subscript (Attribute (Name &self:47 Load) s_data Load) (Slice (Name &_size:47 Load) (BinOp (Name &_size:47 Load) Add (Attribute (Name &self:47 Load) s__len Load)) None) Store)) (Name &data:47 Load) None) (For (Name &i:47 Store) (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:47 Load)) nil)) nil) (/seq (fn_2 (BinOp (Name &i:47 Load) Add (Name &i:47 Load)) (Name &func:47 Load) &self:47 &i:47)) nil None)) nil None None) (FunctionDef &__delitem__:6 (arguments nil (list (arg &self:48 None None) (arg &idx:48 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &self:48 Load) (Name &idx:48 Load) Store)) (Attribute (Name &self:48 Load) s__default Load) None)) nil None None) (FunctionDef &__getitem__:6 (arguments nil (list (arg &self:49 None None) (arg &idx:49 None None)) None nil nil None nil) (/seq (Return (Subscript (Attribute (Name &self:49 Load) s_data Load) (BinOp (Name &idx:49 Load) Add (Attribute (Name &self:49 Load) s__size Load)) Load))) nil None None) (FunctionDef &__setitem__:6 (arguments nil (list (arg &self:50 None None) (arg &idx:50 None None) (arg &value:50 None None)) None nil nil None nil) (/seq (AugAssign (Name &idx:50 Store) Add (Attribute (Name &self:50 Load) s__size Load)) (Assign (list (Subscript (Attribute (Name &self:50 Load) s_data Load) (Name &idx:50 Load) Store)) (Name &value:50 Load) None) (AugAssign (Name &idx:50 Store) RShift (Constant i1 None)) (While (Name &idx:50 Load) (/seq (fn_2 (BinOp (Constant i2 None) Mult (Name &idx:50 Load)) (Attribute (Name &self:50 Load) s__func Load) &self:50 &idx:50) (AugAssign (Name &idx:50 Store) RShift (Constant i1 None))) nil)) nil None None) (FunctionDef &__len__:6 (arguments nil (list (arg &self:51 None None)) None nil nil None nil) (/seq (Return (Attribute (Name &self:51 Load) s__len Load))) nil None None) (FunctionDef &query:6 (arguments nil (list (arg &self:52 None None) (arg &start:52 None None) (arg &stop:52 None None)) None nil nil None nil) (/seq (If (Compare (Name &start:52 Load) (list Eq) (list (Name &stop:52 Load))) (/seq (Return (Call (Attribute (Name &self:52 Load) s___getitem__ Load) (list (Name &start:52 Load)) nil))) nil) (AugAssign (Name &stop:52 Store) Add (Constant i1 None)) (AugAssign (Name &start:52 Store) Add (Attribute (Name &self:52 Load) s__size Load)) (AugAssign (Name &stop:52 Store) Add (Attribute (Name &self:52 Load) s__size Load)) (Assign (list (Name &res:52 Store)) (Attribute (Name &self:52 Load) s__default Load) None) (While (Compare (Name &start:52 Load) (list Lt) (list (Name &stop:52 Load))) (/seq (If (BinOp (Name &start:52 Load) BitAnd (Constant i1 None)) (/seq (Assign (list (Name &res:52 Store)) (Call (Attribute (Name &self:52 Load) s__func Load) (list (Name &res:52 Load) (Subscript (Attribute (Name &self:52 Load) s_data Load) (Name &start:52 Load) Load)) nil) None) (AugAssign (Name &start:52 Store) Add (Constant i1 None))) nil) (If (BinOp (Name &stop:52 Load) BitAnd (Constant i1 None)) (/seq (AugAssign (Name &stop:52 Store) Sub (Constant i1 None)) (Assign (list (Name &res:52 Store)) (Call (Attribute (Name &self:52 Load) s__func Load) (list (Name &res:52 Load) (Subscript (Attribute (Name &self:52 Load) s_data Load) (Name &stop:52 Load) Load)) nil) None)) nil) (AugAssign (Name &start:52 Store) RShift (Constant i1 None)) (AugAssign (Name &stop:52 Store) RShift (Constant i1 None))) nil) (Return (Name &res:52 Load))) nil None None) (FunctionDef &__repr__:6 (arguments nil (list (arg &self:53 None None)) None nil nil None nil) (/seq (Return (Call (Attribute (Constant s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd None) s_format Load) (list (Attribute (Name &self:53 Load) s_data Load)) nil))) nil None None)) nil) (ClassDef &Factorial:0 nil nil (/seq (FunctionDef &__init__:7 (arguments nil (list (arg &self:54 None None) (arg &MOD:54 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:54 Load) s_MOD Store)) (Name &MOD:54 Load) None) (Assign (list (Attribute (Name &self:54 Load) s_factorials Store)) (List (list (Constant i1 None) (Constant i1 None)) Load) None) (Assign (list (Attribute (Name &self:54 Load) s_invModulos Store)) (List (list (Constant i0 None) (Constant i1 None)) Load) None) (Assign (list (Attribute (Name &self:54 Load) s_invFactorial_ Store)) (List (list (Constant i1 None) (Constant i1 None)) Load) None)) nil None None) (FunctionDef &calc:7 (arguments nil (list (arg &self:55 None None) (arg &n:55 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:55 Load) (list LtE) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTAsIDMzXQ== None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ== None) Add (Call (Name g_str Load) (list (Name &n:55 Load)) nil))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (Compare (Name &n:55 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_factorials Load)) nil))) (/seq (Return (Subscript (Attribute (Name &self:55 Load) s_factorials Load) (Name &n:55 Load) Load))) nil) (Assign (list (Name &nextArr:55 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Name &n:55 Load) Add (Constant i1 None)) Sub (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_factorials Load)) nil))) None) (Assign (list (Name &initialI:55 Store)) (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_factorials Load)) nil) None) (Assign (list (Name &prev:55 Store)) (Subscript (Attribute (Name &self:55 Load) s_factorials Load) (UnaryOp USub (Constant i1 None)) Load) None) (Assign (list (Name &m:55 Store)) (Attribute (Name &self:55 Load) s_MOD Load) None) (For (Name &i:55 Store) (Call (Name g_range Load) (list (Name &initialI:55 Load) (BinOp (Name &n:55 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &prev:55 Store) (Subscript (Name &nextArr:55 Load) (BinOp (Name &i:55 Load) Sub (Name &initialI:55 Load)) Store)) (BinOp (BinOp (Name &prev:55 Load) Mult (Name &i:55 Load)) Mod (Name &m:55 Load)) None)) nil None) (AugAssign (Attribute (Name &self:55 Load) s_factorials Store) Add (Name &nextArr:55 Load)) (Return (Subscript (Attribute (Name &self:55 Load) s_factorials Load) (Name &n:55 Load) Load))) nil None None) (FunctionDef &inv:7 (arguments nil (list (arg &self:56 None None) (arg &n:56 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:56 Load) (list LtE) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTAsIDk0LCA0MCwgNDUsIDQ5LCA0MV0= None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ== None) Add (Call (Name g_str Load) (list (Name &n:56 Load)) nil))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (Assign (list (Name &p:56 Store)) (Attribute (Name &self:56 Load) s_MOD Load) None) (Assign (list (Name &pi:56 Store)) (BinOp (Name &n:56 Load) Mod (Name &p:56 Load)) None) (If (Compare (Name &pi:56 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invModulos Load)) nil))) (/seq (Return (Subscript (Attribute (Name &self:56 Load) s_invModulos Load) (Name &pi:56 Load) Load))) nil) (Assign (list (Name &nextArr:56 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Name &n:56 Load) Add (Constant i1 None)) Sub (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invModulos Load)) nil))) None) (Assign (list (Name &initialI:56 Store)) (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invModulos Load)) nil) None) (For (Name &i:56 Store) (Call (Name g_range Load) (list (Name &initialI:56 Load) (Call (Name g_min Load) (list (Name &p:56 Load) (BinOp (Name &n:56 Load) Add (Constant i1 None))) nil)) nil) (/seq (Assign (list (Name &next:56 Store)) (BinOp (BinOp (UnaryOp USub (Subscript (Attribute (Name &self:56 Load) s_invModulos Load) (BinOp (Name &p:56 Load) Mod (Name &i:56 Load)) Load)) Mult (BinOp (Name &p:56 Load) FloorDiv (Name &i:56 Load))) Mod (Name &p:56 Load)) None) (Expr (Call (Attribute (Attribute (Name &self:56 Load) s_invModulos Load) s_append Load) (list (Name &next:56 Load)) nil))) nil None) (Return (Subscript (Attribute (Name &self:56 Load) s_invModulos Load) (Name &pi:56 Load) Load))) nil None None) (FunctionDef &invFactorial:7 (arguments nil (list (arg &self:57 None None) (arg &n:57 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:57 Load) (list LtE) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCA0MCwgMTEwLCA5NCwgNDAsIDQ1LCA0OSwgNDEsIDQxLCAzM10= None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ== None) Add (Call (Name g_str Load) (list (Name &n:57 Load)) nil))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (Compare (Name &n:57 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:57 Load) s_invFactorial_ Load)) nil))) (/seq (Return (Subscript (Attribute (Name &self:57 Load) s_invFactorial_ Load) (Name &n:57 Load) Load))) nil) (Expr (Call (Attribute (Name &self:57 Load) s_inv Load) (list (Name &n:57 Load)) nil)) (Assign (list (Name &nextArr:57 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Name &n:57 Load) Add (Constant i1 None)) Sub (Call (Name g_len Load) (list (Attribute (Name &self:57 Load) s_invFactorial_ Load)) nil))) None) (Assign (list (Name &initialI:57 Store)) (Call (Name g_len Load) (list (Attribute (Name &self:57 Load) s_invFactorial_ Load)) nil) None) (Assign (list (Name &prev:57 Store)) (Subscript (Attribute (Name &self:57 Load) s_invFactorial_ Load) (UnaryOp USub (Constant i1 None)) Load) None) (Assign (list (Name &p:57 Store)) (Attribute (Name &self:57 Load) s_MOD Load) None) (For (Name &i:57 Store) (Call (Name g_range Load) (list (Name &initialI:57 Load) (BinOp (Name &n:57 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &prev:57 Store) (Subscript (Name &nextArr:57 Load) (BinOp (Name &i:57 Load) Sub (Name &initialI:57 Load)) Store)) (BinOp (BinOp (Name &prev:57 Load) Mult (Subscript (Attribute (Name &self:57 Load) s_invModulos Load) (BinOp (Name &i:57 Load) Mod (Name &p:57 Load)) Load)) Mod (Name &p:57 Load)) None)) nil None) (AugAssign (Attribute (Name &self:57 Load) s_invFactorial_ Store) Add (Name &nextArr:57 Load)) (Return (Subscript (Attribute (Name &self:57 Load) s_invFactorial_ Load) (Name &n:57 Load) Load))) nil None None)) nil) (ClassDef &Combination:0 nil nil (/seq (FunctionDef &__init__:8 (arguments nil (list (arg &self:58 None None) (arg &MOD:58 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:58 Load) s_MOD Store)) (Name &MOD:58 Load) None) (Assign (list (Attribute (Name &self:58 Load) s_factorial Store)) (Call (Name &Factorial:0 Load) (list (Name &MOD:58 Load)) nil) None)) nil None None) (FunctionDef &ncr:8 (arguments nil (list (arg &self:59 None None) (arg &n:59 None None) (arg &k:59 None None)) None nil nil None nil) (/seq (If (BoolOp Or (list (Compare (Name &k:59 Load) (list Lt) (list (Constant i0 None))) (Compare (Name &n:59 Load) (list Lt) (list (Name &k:59 Load))))) (/seq (Return (Constant i0 None))) nil) (Assign (list (Name &k:59 Store)) (Call (Name g_min Load) (list (Name &k:59 Load) (BinOp (Name &n:59 Load) Sub (Name &k:59 Load))) nil) None) (Assign (list (Name &f:59 Store)) (Attribute (Name &self:59 Load) s_factorial Load) None) (Return (BinOp (BinOp (BinOp (Call (Attribute (Name &f:59 Load) s_calc Load) (list (Name &n:59 Load)) nil) Mult (Call (Attribute (Name &f:59 Load) s_invFactorial Load) (list (Call (Name g_max Load) (list (BinOp (Name &n:59 Load) Sub (Name &k:59 Load)) (Name &k:59 Load)) nil)) nil)) Mult (Call (Attribute (Name &f:59 Load) s_invFactorial Load) (list (Call (Name g_min Load) (list (Name &k:59 Load) (BinOp (Name &n:59 Load) Sub (Name &k:59 Load))) nil)) nil)) Mod (Attribute (Name &self:59 Load) s_MOD Load)))) nil None None)) nil) (FunctionDef &powm:0 (arguments nil (list (arg &a:9 None None) (arg &n:9 None None) (arg &m:9 None None)) None nil nil None nil) (/seq (If (BoolOp Or (list (Compare (Name &a:9 Load) (list Eq) (list (Constant i1 None))) (Compare (Name &n:9 Load) (list Eq) (list (Constant i0 None))))) (/seq (Return (Constant i1 None))) nil) (If (Compare (BinOp (Name &n:9 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &s:9 Store)) (Call (Name &powm:0 Load) (list (Name &a:9 Load) (BinOp (Name &n:9 Load) FloorDiv (Constant i2 None)) (Name &m:9 Load)) nil) None) (Return (BinOp (BinOp (Name &s:9 Load) Mult (Name &s:9 Load)) Mod (Name &m:9 Load)))) (/seq (Return (BinOp (BinOp (Name &a:9 Load) Mult (Call (Name &powm:0 Load) (list (Name &a:9 Load) (BinOp (Name &n:9 Load) Sub (Constant i1 None)) (Name &m:9 Load)) nil)) Mod (Name &m:9 Load)))))) nil None None) (FunctionDef &sort_list:0 (arguments nil (list (arg &list1:10 None None) (arg &list2:10 None None)) None nil nil None nil) (/seq (Assign (list (Name &zipped_pairs:10 Store)) (Call (Name g_zip Load) (list (Name &list2:10 Load) (Name &list1:10 Load)) nil) None) (Assign (list (Name &z:10 Store)) (ListComp (Name &x:60 Load) (list (comprehension (Tuple (list (Name &_:60 Store) (Name &x:60 Store)) Store) (Call (Name g_sorted Load) (list (Name &zipped_pairs:10 Load)) nil) nil i0))) None) (Return (Name &z:10 Load))) nil None None) (FunctionDef &product:0 (arguments nil (list (arg &l:11 None None)) None nil nil None nil) (/seq (Assign (list (Name &por:11 Store)) (Constant i1 None) None) (For (Name &i:11 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &l:11 Load)) nil)) nil) (/seq (AugAssign (Name &por:11 Store) Mult (Subscript (Name &l:11 Load) (Name &i:11 Load) Load))) nil None) (Return (Name &por:11 Load))) nil None None) (FunctionDef &binarySearchCount:0 (arguments nil (list (arg &arr:12 None None) (arg &n:12 None None) (arg &key:12 None None)) None nil nil None nil) (/seq (Assign (list (Name &left:12 Store)) (Constant i0 None) None) (Assign (list (Name &right:12 Store)) (BinOp (Name &n:12 Load) Sub (Constant i1 None)) None) (Assign (list (Name &count:12 Store)) (Constant i0 None) None) (While (Compare (Name &left:12 Load) (list LtE) (list (Name &right:12 Load))) (/seq (Assign (list (Name &mid:12 Store)) (Call (Name g_int Load) (list (BinOp (BinOp (Name &right:12 Load) Add (Name &left:12 Load)) Div (Constant i2 None))) nil) None) (If (Compare (Subscript (Name &arr:12 Load) (Name &mid:12 Load) Load) (list Lt) (list (Name &key:12 Load))) (/seq (Assign (list (Name &count:12 Store)) (BinOp (Name &mid:12 Load) Add (Constant i1 None)) None) (Assign (list (Name &left:12 Store)) (BinOp (Name &mid:12 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &right:12 Store)) (BinOp (Name &mid:12 Load) Sub (Constant i1 None)) None)))) nil) (Return (Name &count:12 Load))) nil None None) (FunctionDef &countdig:0 (arguments nil (list (arg &n:13 None None)) None nil nil None nil) (/seq (Assign (list (Name &c:13 Store)) (Constant i0 None) None) (While (Compare (Name &n:13 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &n:13 Store) FloorDiv (Constant i10 None)) (AugAssign (Name &c:13 Store) Add (Constant i1 None))) nil) (Return (Name &c:13 Load))) nil None None) (FunctionDef &binary:0 (arguments nil (list (arg &x:14 None None) (arg &length:14 None None)) None nil nil None nil) (/seq (Assign (list (Name &y:14 Store)) (Subscript (Call (Name g_bin Load) (list (Name &x:14 Load)) nil) (Slice (Constant i2 None) None None) Load) None) (Return (IfExp (Compare (Call (Name g_len Load) (list (Name &y:14 Load)) nil) (list GtE) (list (Name &length:14 Load))) (Name &y:14 Load) (BinOp (BinOp (Constant s_0 None) Mult (BinOp (Name &length:14 Load) Sub (Call (Name g_len Load) (list (Name &y:14 Load)) nil))) Add (Name &y:14 Load))))) nil None None) (FunctionDef &countGreater:0 (arguments nil (list (arg &arr:15 None None) (arg &n:15 None None) (arg &k:15 None None)) None nil nil None nil) (/seq (Assign (list (Name &l:15 Store)) (Constant i0 None) None) (Assign (list (Name &r:15 Store)) (BinOp (Name &n:15 Load) Sub (Constant i1 None)) None) (Assign (list (Name &leftGreater:15 Store)) (Name &n:15 Load) None) (While (Compare (Name &l:15 Load) (list LtE) (list (Name &r:15 Load))) (/seq (Assign (list (Name &m:15 Store)) (Call (Name g_int Load) (list (BinOp (Name &l:15 Load) Add (BinOp (BinOp (Name &r:15 Load) Sub (Name &l:15 Load)) Div (Constant i2 None)))) nil) None) (If (Compare (Subscript (Name &arr:15 Load) (Name &m:15 Load) Load) (list GtE) (list (Name &k:15 Load))) (/seq (Assign (list (Name &leftGreater:15 Store)) (Name &m:15 Load) None) (Assign (list (Name &r:15 Store)) (BinOp (Name &m:15 Load) Sub (Constant i1 None)) None)) (/seq (Assign (list (Name &l:15 Store)) (BinOp (Name &m:15 Load) Add (Constant i1 None)) None)))) nil) (Return (BinOp (Name &n:15 Load) Sub (Name &leftGreater:15 Load)))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &f:0 Store)) (ListComp (Name &i:16 Load) (list (comprehension (Name &i:16 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (Assign (list (Name &s:0 Store)) (Call (Name &SegmentTree:0 Load) (list (Name &f:0 Load)) nil) None) (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (fn_1 (Name &n:0 Load)) (/seq (Assign (list (Name &st:0 Store)) (Constant i1 None) None) (Assign (list (Name &end:0 Store)) (Name &n:0 Load) None) (While (Compare (Name &st:0 Load) (list LtE) (list (Name &end:0 Load))) (/seq (Assign (list (Name &mid:0 Store)) (BinOp (BinOp (Name &st:0 Load) Add (Name &end:0 Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &su:0 Store)) (Call (Attribute (Name &s:0 Load) s_query Load) (list (Constant i0 None) (BinOp (Name &mid:0 Load) Sub (Constant i2 None))) nil) None) (If (Compare (Name &su:0 Load) (list Eq) (list (Subscript (Name &l:0 Load) (Name &i:0 Load) Load))) (/seq (Assign (list (Name &an:0 Store)) (Name &mid:0 Load) None) (Assign (list (Name &st:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None)) (/seq (If (Compare (Name &su:0 Load) (list Lt) (list (Subscript (Name &l:0 Load) (Name &i:0 Load) Load))) (/seq (Assign (list (Name &st:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &end:0 Store)) (BinOp (Name &mid:0 Load) Sub (Constant i1 None)) None)))))) nil) (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &an:0 Load) None) (Expr (Call (Attribute (Name &s:0 Load) s___setitem__ Load) (list (BinOp (Name &an:0 Load) Sub (Constant i1 None)) (Constant i0 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) (list (keyword s_sep (Constant s-WzMyXQ== None)))))) nil)",
            "(Module (/seq (FunctionDef &update:0 (arguments nil (list (arg &x:1 None None) (arg &val:1 None None)) None nil nil None nil) (/seq (While (Compare (Name &x:1 Load) (list LtE) (list (Name &n:0 Load))) (/seq (AugAssign (Subscript (Name &BIT:0 Load) (Name &x:1 Load) Store) Add (Name &val:1 Load)) (AugAssign (Name &x:1 Store) Add (BinOp (Name &x:1 Load) BitAnd (UnaryOp USub (Name &x:1 Load))))) nil)) nil None None) (FunctionDef &query:0 (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:2 Store)) (Constant i0 None) None) (While (Compare (Name &x:2 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &s:2 Store)) (BinOp (Name &s:2 Load) Add (Subscript (Name &BIT:0 Load) (Name &x:2 Load) Load)) None) (AugAssign (Name &x:2 Store) Sub (BinOp (Name &x:2 Load) BitAnd (UnaryOp USub (Name &x:2 Load))))) nil) (Return (Name &s:2 Load))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &BIT:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Name &update:0 Load) (list (Name &i:0 Load) (Name &i:0 Load)) nil))) nil None) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &answers:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (fn_1 (Name &n:0 Load)) (/seq (Assign (list (Name &lol:0 Store)) (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) None) (Assign (list (Name &low:0 Store)) (Constant i0 None) None) (Assign (list (Name &fjf:0 Store)) (Constant i0 None) None) (Assign (list (Name &high:0 Store)) (Name &n:0 Load) None) (While (Constant True None) (/seq (Assign (list (Name &mid:0 Store)) (BinOp (BinOp (BinOp (Name &high:0 Load) Add (Name &low:0 Load)) Add (Constant i1 None)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &j:0 Store)) (Call (Name &query:0 Load) (list (Name &mid:0 Load)) nil) None) (If (Compare (Name &j:0 Load) (list Gt) (list (Name &lol:0 Load))) (/seq (If (Compare (Call (Name &query:0 Load) (list (BinOp (Name &mid:0 Load) Sub (Constant i1 None))) nil) (list Eq) (list (Name &lol:0 Load))) (/seq (Assign (list (Subscript (Name &answers:0 Load) (Name &i:0 Load) Store)) (Name &mid:0 Load) None) (Expr (Call (Name &update:0 Load) (list (Name &mid:0 Load) (UnaryOp USub (Name &mid:0 Load))) nil)) Break) (/seq (Assign (list (Name &high:0 Store)) (Name &mid:0 Load) None)))) (/seq (Assign (list (Name &low:0 Store)) (Name &mid:0 Load) None)))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &answers:0 Load) Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias s_setrecursionlimit g_SRL) (alias g_stdin None)) i0) (Expr (Call (Name g_SRL Load) (list (BinOp (Constant i10 None) Pow (Constant i7 None))) nil)) (Assign (list (Name &rd:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None) (Assign (list (Name &rrd:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Name &rd:0 Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil)) nil)) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &rd:0 Load) nil nil)) nil) None) (Assign (list (Name &bit:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i200005 None)) None) (FunctionDef &add:0 (arguments nil (list (arg &x:1 None None) (arg &val:1 None None)) None nil nil None nil) (/seq (While (Compare (Name &x:1 Load) (list LtE) (list (Name &n:0 Load))) (/seq (AugAssign (Subscript (Name &bit:0 Load) (Name &x:1 Load) Store) Add (Name &val:1 Load)) (AugAssign (Name &x:1 Store) Add (BinOp (Name &x:1 Load) BitAnd (UnaryOp USub (Name &x:1 Load))))) nil)) nil None None) (FunctionDef &query:0 (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &num:2 Store)) (Constant i0 None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (Constant i30 None) (UnaryOp USub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (Name &num:2 Load) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load))) (list LtE) (list (Name &n:0 Load))) (Compare (Subscript (Name &bit:0 Load) (BinOp (Name &num:2 Load) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load))) Load) (list LtE) (list (Name &x:2 Load))))) (/seq (AugAssign (Name &x:2 Store) Sub (Subscript (Name &bit:0 Load) (BinOp (Name &num:2 Load) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load))) Load)) (AugAssign (Name &num:2 Store) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load)))) nil)) nil None) (Return (BinOp (Name &num:2 Load) Add (Constant i1 None)))) nil None None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Name &add:0 Load) (list (Name &i:0 Load) (Name &i:0 Load)) nil))) nil None) (Assign (list (Name &s:0 Store)) (Call (Name g_list Load) (list (Call (Name &rrd:0 Load) nil nil)) nil) None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (fn_1 (Call (Name g_len Load) (list (Name &s:0 Load)) nil)) (/seq (Assign (list (Name &q:0 Store)) (Call (Name &query:0 Load) (list (Subscript (Name &s:0 Load) (Name &i:0 Load) Load)) nil) None) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &q:0 Load)) nil)) (Expr (Call (Name &add:0 Load) (list (Name &q:0 Load) (UnaryOp USub (Name &q:0 Load))) nil))) nil None) (Assign (list (Name &ans:0 Store)) (Subscript (Name &ans:0 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load) None) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))) nil)",
            "(Module (/seq (FunctionDef &sumsegtree:0 (arguments nil (list (arg &l:1 None None) (arg &seg:1 None None) (arg &st:1 None None) (arg &en:1 None None) (arg &x:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &st:1 Load) (list Eq) (list (Name &en:1 Load))) (/seq (Assign (list (Subscript (Name &seg:1 Load) (Name &x:1 Load) Store)) (Subscript (Name &l:1 Load) (Name &st:1 Load) Load) None)) (/seq (Assign (list (Name &mid:1 Store)) (BinOp (BinOp (Name &st:1 Load) Add (Name &en:1 Load)) RShift (Constant i1 None)) None) (Expr (Call (Name &sumsegtree:0 Load) (list (Name &l:1 Load) (Name &seg:1 Load) (Name &st:1 Load) (Name &mid:1 Load) (BinOp (Constant i2 None) Mult (Name &x:1 Load))) nil)) (Expr (Call (Name &sumsegtree:0 Load) (list (Name &l:1 Load) (Name &seg:1 Load) (BinOp (Name &mid:1 Load) Add (Constant i1 None)) (Name &en:1 Load) (BinOp (BinOp (Constant i2 None) Mult (Name &x:1 Load)) Add (Constant i1 None))) nil)) (Assign (list (Subscript (Name &seg:1 Load) (Name &x:1 Load) Store)) (BinOp (Subscript (Name &seg:1 Load) (BinOp (Constant i2 None) Mult (Name &x:1 Load)) Load) Add (Subscript (Name &seg:1 Load) (BinOp (BinOp (Constant i2 None) Mult (Name &x:1 Load)) Add (Constant i1 None)) Load)) None)))) nil None None) (FunctionDef &query:0 (arguments nil (list (arg &seg:2 None None) (arg &st:2 None None) (arg &en:2 None None) (arg &val:2 None None) (arg &x:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &st:2 Load) (list Eq) (list (Name &en:2 Load))) (/seq (Return (Subscript (Name &seg:2 Load) (Name &x:2 Load) Load))) nil) (Assign (list (Name &mid:2 Store)) (BinOp (BinOp (Name &st:2 Load) Add (Name &en:2 Load)) RShift (Constant i1 None)) None) (If (Compare (Subscript (Name &seg:2 Load) (BinOp (Constant i2 None) Mult (Name &x:2 Load)) Load) (list GtE) (list (Name &val:2 Load))) (/seq (Return (Call (Name &query:0 Load) (list (Name &seg:2 Load) (Name &st:2 Load) (Name &mid:2 Load) (Name &val:2 Load) (BinOp (Constant i2 None) Mult (Name &x:2 Load))) nil))) nil) (Return (Call (Name &query:0 Load) (list (Name &seg:2 Load) (BinOp (Name &mid:2 Load) Add (Constant i1 None)) (Name &en:2 Load) (BinOp (Name &val:2 Load) Sub (Subscript (Name &seg:2 Load) (BinOp (Constant i2 None) Mult (Name &x:2 Load)) Load)) (BinOp (BinOp (Constant i2 None) Mult (Name &x:2 Load)) Add (Constant i1 None))) nil))) nil None None) (FunctionDef &upd:0 (arguments nil (list (arg &seg:3 None None) (arg &st:3 None None) (arg &en:3 None None) (arg &ind:3 None None) (arg &val:3 None None) (arg &x:3 None None)) None nil nil None nil) (/seq (If (Compare (Name &st:3 Load) (list Eq) (list (Name &en:3 Load))) (/seq (Assign (list (Subscript (Name &seg:3 Load) (Name &x:3 Load) Store)) (Name &val:3 Load) None) (Return None)) nil) (Assign (list (Name &mid:3 Store)) (BinOp (BinOp (Name &st:3 Load) Add (Name &en:3 Load)) RShift (Constant i1 None)) None) (If (Compare (Name &mid:3 Load) (list GtE) (list (Name &ind:3 Load))) (/seq (Expr (Call (Name &upd:0 Load) (list (Name &seg:3 Load) (Name &st:3 Load) (Name &mid:3 Load) (Name &ind:3 Load) (Name &val:3 Load) (BinOp (Constant i2 None) Mult (Name &x:3 Load))) nil))) (/seq (Expr (Call (Name &upd:0 Load) (list (Name &seg:3 Load) (BinOp (Name &mid:3 Load) Add (Constant i1 None)) (Name &en:3 Load) (Name &ind:3 Load) (Name &val:3 Load) (BinOp (BinOp (Constant i2 None) Mult (Name &x:3 Load)) Add (Constant i1 None))) nil)))) (Assign (list (Subscript (Name &seg:3 Load) (Name &x:3 Load) Store)) (BinOp (Subscript (Name &seg:3 Load) (BinOp (Constant i2 None) Mult (Name &x:3 Load)) Load) Add (Subscript (Name &seg:3 Load) (BinOp (BinOp (Constant i2 None) Mult (Name &x:3 Load)) Add (Constant i1 None)) Load)) None)) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)) nil)) nil) None) (Assign (list (Name &s:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &p:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &seg:0 Store)) (BinOp (List (list (Constant s-WzM1XQ== None)) Load) Mult (BinOp (Name &n:0 Load) LShift (Constant i2 None))) None) (Expr (Call (Name &sumsegtree:0 Load) (list (Name &l:0 Load) (Name &seg:0 Load) (Constant i0 None) (BinOp (Call (Name g_len Load) (list (Name &l:0 Load)) nil) Sub (Constant i1 None)) (Constant i1 None)) nil)) (For (Name &i:0 Store) (fn_1 (Call (Name g_len Load) (list (Name &p:0 Load)) nil)) (/seq (Assign (list (Subscript (Name &s:0 Load) (Name &i:0 Load) Store)) (Call (Name &query:0 Load) (list (Name &seg:0 Load) (Constant i1 None) (Name &n:0 Load) (BinOp (Subscript (Name &p:0 Load) (Name &i:0 Load) Load) Add (Constant i1 None)) (Constant i1 None)) nil) None) (Expr (Call (Name &upd:0 Load) (list (Name &seg:0 Load) (Constant i1 None) (Name &n:0 Load) (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) (Constant i0 None) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &s:0 Load) Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_operator (list (alias g_add None)) i0) (ClassDef &Stree:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:5 None None) (arg &f:5 None None) (arg &n:5 None None) (arg &default:5 None None) (arg &init_data:5 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:5 Load) s_ln Store)) (BinOp (Constant i2 None) Pow (Call (Attribute (BinOp (Name &n:5 Load) Sub (Constant i1 None)) s_bit_length Load) nil nil)) None) (Assign (list (Attribute (Name &self:5 Load) s_data Store)) (BinOp (List (list (Name &default:5 Load)) Load) Mult (BinOp (Attribute (Name &self:5 Load) s_ln Load) Mult (Constant i2 None))) None) (Assign (list (Attribute (Name &self:5 Load) s_f Store)) (Name &f:5 Load) None) (For (Tuple (list (Name &i:5 Store) (Name &d:5 Store)) Store) (Call (Attribute (Name &init_data:5 Load) s_items Load) nil nil) (/seq (Assign (list (Subscript (Attribute (Name &self:5 Load) s_data Load) (BinOp (Attribute (Name &self:5 Load) s_ln Load) Add (Name &i:5 Load)) Store)) (Name &d:5 Load) None)) nil None) (For (Name &j:5 Store) (Call (Name g_range Load) (list (BinOp (Attribute (Name &self:5 Load) s_ln Load) Sub (Constant i1 None)) (Constant i0 None) (UnaryOp USub (Constant i1 None))) nil) (/seq (fn_2 (BinOp (Name &j:5 Load) Mult (Constant i2 None)) (Name &f:5 Load) &self:5 &j:5)) nil None)) nil None None) (FunctionDef &update:1 (arguments nil (list (arg &self:6 None None) (arg &i:6 None None) (arg &a:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &p:6 Store)) (BinOp (Attribute (Name &self:6 Load) s_ln Load) Add (Name &i:6 Load)) None) (Assign (list (Subscript (Attribute (Name &self:6 Load) s_data Load) (Name &p:6 Load) Store)) (Name &a:6 Load) None) (While (Compare (Name &p:6 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &p:6 Store)) (BinOp (Name &p:6 Load) FloorDiv (Constant i2 None)) None) (fn_2 (BinOp (Name &p:6 Load) Mult (Constant i2 None)) (Attribute (Name &self:6 Load) s_f Load) &self:6 &p:6)) nil)) nil None None) (FunctionDef &get:1 (arguments nil (list (arg &self:2 None None) (arg &i:2 None None) (arg &j:2 None None)) None nil nil None nil) (/seq (FunctionDef &_get:2 (arguments nil (list (arg &l:8 None None) (arg &r:8 None None) (arg &p:8 None None)) None nil nil None nil) (/seq (If (BoolOp And (list (Compare (Name &i:2 Load) (list LtE) (list (Name &l:8 Load))) (Compare (Name &j:2 Load) (list GtE) (list (Name &r:8 Load))))) (/seq (Return (Subscript (Attribute (Name &self:2 Load) s_data Load) (Name &p:8 Load) Load))) (/seq (Assign (list (Name &m:8 Store)) (BinOp (BinOp (Name &l:8 Load) Add (Name &r:8 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (Name &j:2 Load) (list LtE) (list (Name &m:8 Load))) (/seq (Return (Call (Name &_get:2 Load) (list (Name &l:8 Load) (Name &m:8 Load) (BinOp (Name &p:8 Load) Mult (Constant i2 None))) nil))) (/seq (If (Compare (Name &i:2 Load) (list GtE) (list (Name &m:8 Load))) (/seq (Return (Call (Name &_get:2 Load) (list (Name &m:8 Load) (Name &r:8 Load) (BinOp (BinOp (Name &p:8 Load) Mult (Constant i2 None)) Add (Constant i1 None))) nil))) (/seq (Return (Call (Attribute (Name &self:2 Load) s_f Load) (list (Call (Name &_get:2 Load) (list (Name &l:8 Load) (Name &m:8 Load) (BinOp (Name &p:8 Load) Mult (Constant i2 None))) nil) (Call (Name &_get:2 Load) (list (Name &m:8 Load) (Name &r:8 Load) (BinOp (BinOp (Name &p:8 Load) Mult (Constant i2 None)) Add (Constant i1 None))) nil)) nil))))))))) nil None None) (Return (Call (Name &_get:2 Load) (list (Constant i0 None) (Attribute (Name &self:2 Load) s_ln Load) (Constant i1 None)) nil))) nil None None) (FunctionDef &find_value:1 (arguments nil (list (arg &self:3 None None) (arg &v:3 None None)) None nil nil None nil) (/seq (FunctionDef &_find_value:3 (arguments nil (list (arg &l:9 None None) (arg &r:9 None None) (arg &p:9 None None) (arg &v:9 None None)) None nil nil None nil) (/seq (If (Compare (Name &r:9 Load) (list Eq) (list (BinOp (Name &l:9 Load) Add (Constant i1 None)))) (/seq (Return (Name &l:9 Load))) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_data Load) (BinOp (Name &p:9 Load) Mult (Constant i2 None)) Load) (list LtE) (list (Name &v:9 Load))) (/seq (Return (Call (Name &_find_value:3 Load) (list (BinOp (BinOp (Name &l:9 Load) Add (Name &r:9 Load)) FloorDiv (Constant i2 None)) (Name &r:9 Load) (BinOp (BinOp (Name &p:9 Load) Mult (Constant i2 None)) Add (Constant i1 None)) (BinOp (Name &v:9 Load) Sub (Subscript (Attribute (Name &self:3 Load) s_data Load) (BinOp (Name &p:9 Load) Mult (Constant i2 None)) Load))) nil))) (/seq (Return (Call (Name &_find_value:3 Load) (list (Name &l:9 Load) (BinOp (BinOp (Name &l:9 Load) Add (Name &r:9 Load)) FloorDiv (Constant i2 None)) (BinOp (Name &p:9 Load) Mult (Constant i2 None)) (Name &v:9 Load)) nil))))))) nil None None) (Return (Call (Name &_find_value:3 Load) (list (Constant i0 None) (Attribute (Name &self:3 Load) s_ln Load) (Constant i1 None) (Name &v:3 Load)) nil))) nil None None)) nil) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:4 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &sums:4 Store)) (DictComp (Name &i:7 Load) (Name &i:7 Load) (list (comprehension (Name &i:7 Store) (Call (Name g_range Load) (list (BinOp (Name &n:4 Load) Add (Constant i1 None))) nil) nil i0))) None) (Assign (list (Name &stree:4 Store)) (Call (Name &Stree:0 Load) (list (Name g_add Load) (BinOp (Name &n:4 Load) Add (Constant i1 None)) (Constant i0 None) (Name &sums:4 Load)) nil) None) (Assign (list (Name &ss:4 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Expr (Call (Attribute (Name &ss:4 Load) s_reverse Load) nil nil)) (Assign (list (Name &pp:4 Store)) (List nil Load) None) (For (Name &s:4 Store) (Name &ss:4 Load) (/seq (Assign (list (Name &sval:4 Store)) (Call (Attribute (Name &stree:4 Load) s_find_value Load) (list (Name &s:4 Load)) nil) None) (Expr (Call (Attribute (Name &pp:4 Load) s_append Load) (list (Name &sval:4 Load)) nil)) (Expr (Call (Attribute (Name &stree:4 Load) s_update Load) (list (Name &sval:4 Load) (Constant i0 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Starred (Call (Name g_reversed Load) (list (Name &pp:4 Load)) nil) Load)) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Assign (list (Name &_:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &x:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:2 Load)) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &res:0 Store)) (List nil Load) None) (ImportFrom s_math (list (alias &log:0 None)) i0) (ClassDef &SegmentTree:0 (list (Name g_object Load)) nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &nums:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_arr Store)) (Name &nums:3 Load) None) (Assign (list (Attribute (Name &self:3 Load) s_l Store)) (Call (Name g_len Load) (list (Name &nums:3 Load)) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_tree Store)) (BinOp (BinOp (List (list (Constant i0 None)) Load) Mult (Attribute (Name &self:3 Load) s_l Load)) Add (Name &nums:3 Load)) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (BinOp (Attribute (Name &self:3 Load) s_l Load) Sub (Constant i1 None)) (Constant i0 None) (UnaryOp USub (Constant i1 None))) nil) (/seq (fn_3 (Attribute (Name &self:3 Load) s_tree Load) &i:3)) nil None)) nil None None) (FunctionDef &update:1 (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &val:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:4 Store)) (BinOp (Attribute (Name &self:4 Load) s_l Load) Add (Name &i:4 Load)) None) (Assign (list (Subscript (Attribute (Name &self:4 Load) s_tree Load) (Name &n:4 Load) Store)) (Name &val:4 Load) None) (While (Compare (Name &n:4 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s_tree Load) (BinOp (Name &n:4 Load) RShift (Constant i1 None)) Store)) (BinOp (Subscript (Attribute (Name &self:4 Load) s_tree Load) (Name &n:4 Load) Load) Add (Subscript (Attribute (Name &self:4 Load) s_tree Load) (BinOp (Name &n:4 Load) BitXor (Constant i1 None)) Load)) None) (AugAssign (Name &n:4 Store) RShift (Constant i1 None))) nil)) nil None None) (FunctionDef &query:1 (arguments nil (list (arg &self:5 None None) (arg &i:5 None None) (arg &j:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &m:5 Store)) (BinOp (Attribute (Name &self:5 Load) s_l Load) Add (Name &i:5 Load)) None) (Assign (list (Name &n:5 Store)) (BinOp (Attribute (Name &self:5 Load) s_l Load) Add (Name &j:5 Load)) None) (Assign (list (Name &res:5 Store)) (Constant i0 None) None) (While (Compare (Name &m:5 Load) (list LtE) (list (Name &n:5 Load))) (/seq (If (BinOp (Name &m:5 Load) BitAnd (Constant i1 None)) (/seq (AugAssign (Name &res:5 Store) Add (Subscript (Attribute (Name &self:5 Load) s_tree Load) (Name &m:5 Load) Load)) (AugAssign (Name &m:5 Store) Add (Constant i1 None))) nil) (AugAssign (Name &m:5 Store) RShift (Constant i1 None)) (If (Compare (BinOp (Name &n:5 Load) BitAnd (Constant i1 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &res:5 Store) Add (Subscript (Attribute (Name &self:5 Load) s_tree Load) (Name &n:5 Load) Load)) (AugAssign (Name &n:5 Store) Sub (Constant i1 None))) nil) (AugAssign (Name &n:5 Store) RShift (Constant i1 None))) nil) (Return (Name &res:5 Load))) nil None None)) nil) (Assign (list (Name &tree:0 Store)) (Call (Name &SegmentTree:0 Load) (list (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Call (Name g_len Load) (list (Name &x:0 Load)) nil) Add (Constant i1 None))) nil)) nil)) nil) None) (Assign (list (Name &org:0 Store)) (Call (Name g_len Load) (list (Name &x:0 Load)) nil) None) (While (Name &x:0 Load) (/seq (Assign (list (Name &q:0 Store)) (Call (Attribute (Name &x:0 Load) s_pop Load) nil nil) None) (Assign (list (Name &lo:0 Store)) (Constant i0 None) None) (Assign (list (Name &hi:0 Store)) (BinOp (Name &org:0 Load) Sub (Constant i1 None)) None) (While (Compare (Name &lo:0 Load) (list Lt) (list (Name &hi:0 Load))) (/seq (Assign (list (Name &mid:0 Store)) (BinOp (BinOp (Name &lo:0 Load) Add (Name &hi:0 Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &sm:0 Store)) (Call (Attribute (Name &tree:0 Load) s_query Load) (list (Constant i0 None) (Name &mid:0 Load)) nil) None) (If (Compare (Name &sm:0 Load) (list Gt) (list (Name &q:0 Load))) (/seq (Assign (list (Name &hi:0 Store)) (Name &mid:0 Load) None)) (/seq (Assign (list (Name &lo:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None)))) nil) (Assign (list (Name &idx:0 Store)) (Subscript (Attribute (Name &tree:0 Load) s_arr Load) (Name &lo:0 Load) Load) None) (Expr (Call (Attribute (Name &tree:0 Load) s_update Load) (list (Name &lo:0 Load) (Constant i0 None)) nil)) (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (Name &idx:0 Load)) nil))) nil) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (GeneratorExp (Call (Name g_str Load) (list (Name &i:6 Load)) nil) (list (comprehension (Name &i:6 Store) (Subscript (Name &res:0 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load) nil i0)))) nil)) nil))) nil)",
            "(Module (/seq (FunctionDef &sumsegtree:0 (arguments nil (list (arg &l:1 None None) (arg &seg:1 None None) (arg &st:1 None None) (arg &en:1 None None) (arg &x:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &st:1 Load) (list Eq) (list (Name &en:1 Load))) (/seq (Assign (list (Subscript (Name &seg:1 Load) (Name &x:1 Load) Store)) (Subscript (Name &l:1 Load) (Name &st:1 Load) Load) None)) (/seq (Assign (list (Name &mid:1 Store)) (BinOp (BinOp (Name &st:1 Load) Add (Name &en:1 Load)) RShift (Constant i1 None)) None) (Expr (Call (Name &sumsegtree:0 Load) (list (Name &l:1 Load) (Name &seg:1 Load) (Name &st:1 Load) (Name &mid:1 Load) (BinOp (Constant i2 None) Mult (Name &x:1 Load))) nil)) (Expr (Call (Name &sumsegtree:0 Load) (list (Name &l:1 Load) (Name &seg:1 Load) (BinOp (Name &mid:1 Load) Add (Constant i1 None)) (Name &en:1 Load) (BinOp (BinOp (Constant i2 None) Mult (Name &x:1 Load)) Add (Constant i1 None))) nil)) (Assign (list (Subscript (Name &seg:1 Load) (Name &x:1 Load) Store)) (BinOp (Subscript (Name &seg:1 Load) (BinOp (Constant i2 None) Mult (Name &x:1 Load)) Load) Add (Subscript (Name &seg:1 Load) (BinOp (BinOp (Constant i2 None) Mult (Name &x:1 Load)) Add (Constant i1 None)) Load)) None)))) nil None None) (FunctionDef &query:0 (arguments nil (list (arg &seg:2 None None) (arg &st:2 None None) (arg &en:2 None None) (arg &val:2 None None) (arg &x:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &st:2 Load) (list Eq) (list (Name &en:2 Load))) (/seq (Return (Subscript (Name &seg:2 Load) (Name &x:2 Load) Load))) nil) (Assign (list (Name &mid:2 Store)) (BinOp (BinOp (Name &st:2 Load) Add (Name &en:2 Load)) RShift (Constant i1 None)) None) (If (Compare (Subscript (Name &seg:2 Load) (BinOp (Constant i2 None) Mult (Name &x:2 Load)) Load) (list GtE) (list (Name &val:2 Load))) (/seq (Return (Call (Name &query:0 Load) (list (Name &seg:2 Load) (Name &st:2 Load) (Name &mid:2 Load) (Name &val:2 Load) (BinOp (Constant i2 None) Mult (Name &x:2 Load))) nil))) nil) (Return (Call (Name &query:0 Load) (list (Name &seg:2 Load) (BinOp (Name &mid:2 Load) Add (Constant i1 None)) (Name &en:2 Load) (BinOp (Name &val:2 Load) Sub (Subscript (Name &seg:2 Load) (BinOp (Constant i2 None) Mult (Name &x:2 Load)) Load)) (BinOp (BinOp (Constant i2 None) Mult (Name &x:2 Load)) Add (Constant i1 None))) nil))) nil None None) (FunctionDef &upd:0 (arguments nil (list (arg &seg:3 None None) (arg &st:3 None None) (arg &en:3 None None) (arg &ind:3 None None) (arg &val:3 None None) (arg &x:3 None None)) None nil nil None nil) (/seq (If (Compare (Name &st:3 Load) (list Eq) (list (Name &en:3 Load))) (/seq (Assign (list (Subscript (Name &seg:3 Load) (Name &x:3 Load) Store)) (Name &val:3 Load) None) (Return None)) nil) (Assign (list (Name &mid:3 Store)) (BinOp (BinOp (Name &st:3 Load) Add (Name &en:3 Load)) RShift (Constant i1 None)) None) (If (Compare (Name &mid:3 Load) (list GtE) (list (Name &ind:3 Load))) (/seq (Expr (Call (Name &upd:0 Load) (list (Name &seg:3 Load) (Name &st:3 Load) (Name &mid:3 Load) (Name &ind:3 Load) (Name &val:3 Load) (BinOp (Constant i2 None) Mult (Name &x:3 Load))) nil))) (/seq (Expr (Call (Name &upd:0 Load) (list (Name &seg:3 Load) (BinOp (Name &mid:3 Load) Add (Constant i1 None)) (Name &en:3 Load) (Name &ind:3 Load) (Name &val:3 Load) (BinOp (BinOp (Constant i2 None) Mult (Name &x:3 Load)) Add (Constant i1 None))) nil)))) (Assign (list (Subscript (Name &seg:3 Load) (Name &x:3 Load) Store)) (BinOp (Subscript (Name &seg:3 Load) (BinOp (Constant i2 None) Mult (Name &x:3 Load)) Load) Add (Subscript (Name &seg:3 Load) (BinOp (BinOp (Constant i2 None) Mult (Name &x:3 Load)) Add (Constant i1 None)) Load)) None)) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)) nil)) nil) None) (Assign (list (Name &s:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &p:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &seg:0 Store)) (BinOp (List (list (Constant s-WzM1XQ== None)) Load) Mult (BinOp (Name &n:0 Load) LShift (Constant i2 None))) None) (Expr (Call (Name &sumsegtree:0 Load) (list (Name &l:0 Load) (Name &seg:0 Load) (Constant i0 None) (BinOp (Call (Name g_len Load) (list (Name &l:0 Load)) nil) Sub (Constant i1 None)) (Constant i1 None)) nil)) (For (Name &i:0 Store) (fn_1 (Name &n:0 Load)) (/seq (Assign (list (Subscript (Name &s:0 Load) (Name &i:0 Load) Store)) (Call (Name &query:0 Load) (list (Name &seg:0 Load) (Constant i1 None) (Name &n:0 Load) (BinOp (Subscript (Name &p:0 Load) (Name &i:0 Load) Load) Add (Constant i1 None)) (Constant i1 None)) nil) None) (Expr (Call (Name &upd:0 Load) (list (Name &seg:0 Load) (Constant i1 None) (Name &n:0 Load) (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) (Constant i0 None) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &s:0 Load) Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None) (Assign (list (Name &print:0 Store)) (Attribute (Name g_stdout Load) s_write Load) None) (Assign (list (Name &_:0 Store)) (Call (Name &input:0 Load) nil nil) None) (Assign (list (Name &x:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:2 Load)) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &res:0 Store)) (List nil Load) None) (ImportFrom s_math (list (alias &log:0 None)) i0) (ClassDef &SegmentTree:0 (list (Name g_object Load)) nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &nums:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_arr Store)) (Name &nums:3 Load) None) (Assign (list (Attribute (Name &self:3 Load) s_l Store)) (Call (Name g_len Load) (list (Name &nums:3 Load)) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_tree Store)) (BinOp (BinOp (List (list (Constant i0 None)) Load) Mult (Attribute (Name &self:3 Load) s_l Load)) Add (Name &nums:3 Load)) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (BinOp (Attribute (Name &self:3 Load) s_l Load) Sub (Constant i1 None)) (Constant i0 None) (UnaryOp USub (Constant i1 None))) nil) (/seq (fn_3 (Attribute (Name &self:3 Load) s_tree Load) &i:3)) nil None)) nil None None) (FunctionDef &update:1 (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &val:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:4 Store)) (BinOp (Attribute (Name &self:4 Load) s_l Load) Add (Name &i:4 Load)) None) (Assign (list (Subscript (Attribute (Name &self:4 Load) s_tree Load) (Name &n:4 Load) Store)) (Name &val:4 Load) None) (While (Compare (Name &n:4 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s_tree Load) (BinOp (Name &n:4 Load) RShift (Constant i1 None)) Store)) (BinOp (Subscript (Attribute (Name &self:4 Load) s_tree Load) (Name &n:4 Load) Load) Add (Subscript (Attribute (Name &self:4 Load) s_tree Load) (BinOp (Name &n:4 Load) BitXor (Constant i1 None)) Load)) None) (AugAssign (Name &n:4 Store) RShift (Constant i1 None))) nil)) nil None None) (FunctionDef &query:1 (arguments nil (list (arg &self:5 None None) (arg &i:5 None None) (arg &j:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &m:5 Store)) (BinOp (Attribute (Name &self:5 Load) s_l Load) Add (Name &i:5 Load)) None) (Assign (list (Name &n:5 Store)) (BinOp (Attribute (Name &self:5 Load) s_l Load) Add (Name &j:5 Load)) None) (Assign (list (Name &res:5 Store)) (Constant i0 None) None) (While (Compare (Name &m:5 Load) (list LtE) (list (Name &n:5 Load))) (/seq (If (BinOp (Name &m:5 Load) BitAnd (Constant i1 None)) (/seq (AugAssign (Name &res:5 Store) Add (Subscript (Attribute (Name &self:5 Load) s_tree Load) (Name &m:5 Load) Load)) (AugAssign (Name &m:5 Store) Add (Constant i1 None))) nil) (AugAssign (Name &m:5 Store) RShift (Constant i1 None)) (If (Compare (BinOp (Name &n:5 Load) BitAnd (Constant i1 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &res:5 Store) Add (Subscript (Attribute (Name &self:5 Load) s_tree Load) (Name &n:5 Load) Load)) (AugAssign (Name &n:5 Store) Sub (Constant i1 None))) nil) (AugAssign (Name &n:5 Store) RShift (Constant i1 None))) nil) (Return (Name &res:5 Load))) nil None None)) nil) (Assign (list (Name &tree:0 Store)) (Call (Name &SegmentTree:0 Load) (list (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Call (Name g_len Load) (list (Name &x:0 Load)) nil) Add (Constant i1 None))) nil)) nil)) nil) None) (Assign (list (Name &org:0 Store)) (Call (Name g_len Load) (list (Name &x:0 Load)) nil) None) (While (Name &x:0 Load) (/seq (Assign (list (Name &q:0 Store)) (Call (Attribute (Name &x:0 Load) s_pop Load) nil nil) None) (Assign (list (Name &lo:0 Store)) (Constant i0 None) None) (Assign (list (Name &hi:0 Store)) (BinOp (Name &org:0 Load) Sub (Constant i1 None)) None) (While (Compare (Name &lo:0 Load) (list Lt) (list (Name &hi:0 Load))) (/seq (Assign (list (Name &mid:0 Store)) (BinOp (BinOp (Name &lo:0 Load) Add (Name &hi:0 Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &sm:0 Store)) (Call (Attribute (Name &tree:0 Load) s_query Load) (list (Constant i0 None) (Name &mid:0 Load)) nil) None) (If (Compare (Name &sm:0 Load) (list Gt) (list (Name &q:0 Load))) (/seq (Assign (list (Name &hi:0 Store)) (Name &mid:0 Load) None)) (/seq (Assign (list (Name &lo:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None)))) nil) (Assign (list (Name &idx:0 Store)) (Subscript (Attribute (Name &tree:0 Load) s_arr Load) (Name &lo:0 Load) Load) None) (Expr (Call (Attribute (Name &tree:0 Load) s_update Load) (list (Name &lo:0 Load) (Constant i0 None)) nil)) (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (Name &idx:0 Load)) nil))) nil) (Expr (Call (Name &print:0 Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (GeneratorExp (Call (Name g_str Load) (list (Name &i:6 Load)) nil) (list (comprehension (Name &i:6 Store) (Subscript (Name &res:0 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load) nil i0)))) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Name &NN:0 Store)) (Constant i18 None) None) (Assign (list (Name &BIT:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Constant i2 None) Pow (Name &NN:0 Load)) Add (Constant i1 None))) None) (FunctionDef &addbit:0 (arguments nil (list (arg &i:1 None None) (arg &x:1 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:1 Load) (list LtE) (list (BinOp (Constant i2 None) Pow (Name &NN:0 Load)))) (/seq (AugAssign (Subscript (Name &BIT:0 Load) (Name &i:1 Load) Store) Add (Name &x:1 Load)) (AugAssign (Name &i:1 Store) Add (BinOp (Name &i:1 Load) BitAnd (UnaryOp USub (Name &i:1 Load))))) nil)) nil None None) (FunctionDef &getsum:0 (arguments nil (list (arg &i:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &ret:2 Store)) (Constant i0 None) None) (While (Compare (Name &i:2 Load) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Name &ret:2 Store) Add (Subscript (Name &BIT:0 Load) (Name &i:2 Load) Load)) (AugAssign (Name &i:2 Store) Sub (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))) nil) (Return (Name &ret:2 Load))) nil None None) (FunctionDef &searchbit:0 (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &l:3 Store) (Name &sl:3 Store)) Store)) (Tuple (list (Constant i0 None) (Constant i0 None)) Load) None) (Assign (list (Name &d:3 Store)) (BinOp (Constant i2 None) Pow (BinOp (Name &NN:0 Load) Sub (Constant i1 None))) None) (While (Name &d:3 Load) (/seq (Assign (list (Name &m:3 Store)) (BinOp (Name &l:3 Load) Add (Name &d:3 Load)) None) (Assign (list (Name &sm:3 Store)) (BinOp (Name &sl:3 Load) Add (Subscript (Name &BIT:0 Load) (Name &m:3 Load) Load)) None) (If (Compare (Name &sm:3 Load) (list LtE) (list (Name &x:3 Load))) (/seq (Assign (list (Tuple (list (Name &l:3 Store) (Name &sl:3 Store)) Store)) (Tuple (list (Name &m:3 Load) (Name &sm:3 Load)) Load) None)) nil) (AugAssign (Name &d:3 Store) FloorDiv (Constant i2 None))) nil) (Return (Name &l:3 Load))) nil None None) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &A:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &a:4 Load)) nil) (list (comprehension (Name &a:4 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &N:0 Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Name &addbit:0 Load) (list (Name &i:0 Load) (Name &i:0 Load)) nil))) nil None) (Assign (list (Name &ANS:0 Store)) (List nil Load) None) (For (Name &s:0 Store) (Subscript (Name &A:0 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load) (/seq (Assign (list (Name &a:0 Store)) (BinOp (Call (Name &searchbit:0 Load) (list (Name &s:0 Load)) nil) Add (Constant i1 None)) None) (Expr (Call (Name &addbit:0 Load) (list (Name &a:0 Load) (UnaryOp USub (Name &a:0 Load))) nil)) (Expr (Call (Attribute (Name &ANS:0 Load) s_append Load) (list (Name &a:0 Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Starred (Subscript (Name &ANS:0 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load) Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Import (list (alias g_heapq None) (alias g_bisect None))) (Import (list (alias g_sys None))) (ImportFrom s_collections (list (alias g_deque None) (alias g_defaultdict None)) i0) (ImportFrom s_fractions (list (alias g_Fraction None)) i0) (Import (list (alias g_sys None))) (Assign (list (Name &mod:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &mod1:0 Store)) (Constant i998244353 None) None) (Import (list (alias &os:0 None))) (Import (list (alias &sys:0 None))) (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name &IOBase:0 Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:17 None None) (arg &file:17 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:17 Load) s__fd Store)) (Call (Attribute (Name &file:17 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:17 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None) (Assign (list (Attribute (Name &self:17 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:17 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:17 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:17 Load) s_write Store)) (IfExp (Attribute (Name &self:17 Load) s_writable Load) (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:18 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:18 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (Attribute (Name &self:18 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (Attribute (Name &self:18 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:18 Load)) (/seq Break) nil) (Assign (list (Name &ptr:18 Store)) (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_write Load) (list (Name &b:18 Load)) nil) (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_seek Load) (list (Name &ptr:18 Load)) nil)) Load))) nil) (Assign (list (Attribute (Name &self:18 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:19 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:19 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:19 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (Attribute (Name &self:19 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (Attribute (Name &self:19 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:19 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:19 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:19 Load))) None) (Assign (list (Name &ptr:19 Store)) (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_write Load) (list (Name &b:19 Load)) nil) (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_seek Load) (list (Name &ptr:19 Load)) nil)) Load))) nil) (AugAssign (Attribute (Name &self:19 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:20 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:20 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name &os:0 Load) s_write Load) (list (Attribute (Name &self:20 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name &IOBase:0 Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:21 None None) (arg &file:21 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:21 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:21 Load)) nil) None) (Assign (list (Attribute (Name &self:21 Load) s_flush Store)) (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:21 Load) s_writable Store)) (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:21 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:61 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:61 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:21 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:21 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil)) None) (ClassDef &TreeNode:0 nil nil (/seq (FunctionDef &__init__:3 (arguments nil (list (arg &self:22 None None) (arg &k:22 None None) (arg &v:22 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:22 Load) s_key Store)) (Name &k:22 Load) None) (Assign (list (Attribute (Name &self:22 Load) s_value Store)) (Name &v:22 Load) None) (Assign (list (Attribute (Name &self:22 Load) s_left Store)) (Constant None None) None) (Assign (list (Attribute (Name &self:22 Load) s_right Store)) (Constant None None) None) (Assign (list (Attribute (Name &self:22 Load) s_parent Store)) (Constant None None) None) (Assign (list (Attribute (Name &self:22 Load) s_height Store)) (Constant i1 None) None) (Assign (list (Attribute (Name &self:22 Load) s_num_left Store)) (Constant i1 None) None) (Assign (list (Attribute (Name &self:22 Load) s_num_total Store)) (Constant i1 None) None)) nil None None)) nil) (ClassDef &AvlTree:0 nil nil (/seq (FunctionDef &__init__:4 (arguments nil (list (arg &self:23 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:23 Load) s__tree Store)) (Constant None None) None)) nil None None) (FunctionDef &add:4 (arguments nil (list (arg &self:24 None None) (arg &k:24 None None) (arg &v:24 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &self:24 Load) s__tree Load)) (/seq (Assign (list (Attribute (Name &self:24 Load) s__tree Store)) (Call (Name &TreeNode:0 Load) (list (Name &k:24 Load) (Name &v:24 Load)) nil) None) (Return None)) nil) (Assign (list (Name &node:24 Store)) (Call (Attribute (Name &self:24 Load) s__add Load) (list (Name &k:24 Load) (Name &v:24 Load)) nil) None) (If (Name &node:24 Load) (/seq (Expr (Call (Attribute (Name &self:24 Load) s__rebalance Load) (list (Name &node:24 Load)) nil))) nil)) nil None None) (FunctionDef &_add:4 (arguments nil (list (arg &self:25 None None) (arg &k:25 None None) (arg &v:25 None None)) None nil nil None nil) (/seq (Assign (list (Name &node:25 Store)) (Attribute (Name &self:25 Load) s__tree Load) None) (While (Name &node:25 Load) (/seq (If (Compare (Name &k:25 Load) (list Lt) (list (Attribute (Name &node:25 Load) s_key Load))) (/seq (If (Attribute (Name &node:25 Load) s_left Load) (/seq (Assign (list (Name &node:25 Store)) (Attribute (Name &node:25 Load) s_left Load) None)) (/seq (Assign (list (Attribute (Name &node:25 Load) s_left Store)) (Call (Name &TreeNode:0 Load) (list (Name &k:25 Load) (Name &v:25 Load)) nil) None) (Assign (list (Attribute (Attribute (Name &node:25 Load) s_left Load) s_parent Store)) (Name &node:25 Load) None) (Return (Attribute (Name &node:25 Load) s_left Load))))) (/seq (If (Compare (Attribute (Name &node:25 Load) s_key Load) (list Lt) (list (Name &k:25 Load))) (/seq (If (Attribute (Name &node:25 Load) s_right Load) (/seq (Assign (list (Name &node:25 Store)) (Attribute (Name &node:25 Load) s_right Load) None)) (/seq (Assign (list (Attribute (Name &node:25 Load) s_right Store)) (Call (Name &TreeNode:0 Load) (list (Name &k:25 Load) (Name &v:25 Load)) nil) None) (Assign (list (Attribute (Attribute (Name &node:25 Load) s_right Load) s_parent Store)) (Name &node:25 Load) None) (Return (Attribute (Name &node:25 Load) s_right Load))))) (/seq (Assign (list (Attribute (Name &node:25 Load) s_value Store)) (Name &v:25 Load) None) (Return None)))))) nil)) nil None None) (FunctionDef &get_height:4 (arguments nil (list (arg &x:26 None None)) None nil nil None nil) (/seq (Return (IfExp (Name &x:26 Load) (Attribute (Name &x:26 Load) s_height Load) (Constant i0 None)))) (list (Name g_staticmethod Load)) None None) (FunctionDef &get_num_total:4 (arguments nil (list (arg &x:27 None None)) None nil nil None nil) (/seq (Return (IfExp (Name &x:27 Load) (Attribute (Name &x:27 Load) s_num_total Load) (Constant i0 None)))) (list (Name g_staticmethod Load)) None None) (FunctionDef &_rebalance:4 (arguments nil (list (arg &self:28 None None) (arg &node:28 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:28 Store)) (Name &node:28 Load) None) (While (Name &n:28 Load) (/seq (Assign (list (Name &lh:28 Store)) (Call (Attribute (Name &self:28 Load) s_get_height Load) (list (Attribute (Name &n:28 Load) s_left Load)) nil) None) (Assign (list (Name &rh:28 Store)) (Call (Attribute (Name &self:28 Load) s_get_height Load) (list (Attribute (Name &n:28 Load) s_right Load)) nil) None) (Assign (list (Attribute (Name &n:28 Load) s_height Store)) (BinOp (Call (Name g_max Load) (list (Name &lh:28 Load) (Name &rh:28 Load)) nil) Add (Constant i1 None)) None) (Assign (list (Name &balance_factor:28 Store)) (BinOp (Name &lh:28 Load) Sub (Name &rh:28 Load)) None) (Assign (list (Attribute (Name &n:28 Load) s_num_total Store)) (BinOp (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:28 Load) s_get_num_total Load) (list (Attribute (Name &n:28 Load) s_left Load)) nil)) Add (Call (Attribute (Name &self:28 Load) s_get_num_total Load) (list (Attribute (Name &n:28 Load) s_right Load)) nil)) None) (Assign (list (Attribute (Name &n:28 Load) s_num_left Store)) (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:28 Load) s_get_num_total Load) (list (Attribute (Name &n:28 Load) s_left Load)) nil)) None) (If (Compare (Name &balance_factor:28 Load) (list Gt) (list (Constant i1 None))) (/seq (If (Compare (Call (Attribute (Name &self:28 Load) s_get_height Load) (list (Attribute (Attribute (Name &n:28 Load) s_left Load) s_left Load)) nil) (list Lt) (list (Call (Attribute (Name &self:28 Load) s_get_height Load) (list (Attribute (Attribute (Name &n:28 Load) s_left Load) s_right Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:28 Load) s__rotate_left Load) (list (Attribute (Name &n:28 Load) s_left Load)) nil))) nil) (Expr (Call (Attribute (Name &self:28 Load) s__rotate_right Load) (list (Name &n:28 Load)) nil))) (/seq (If (Compare (Name &balance_factor:28 Load) (list Lt) (list (UnaryOp USub (Constant i1 None)))) (/seq (If (Compare (Call (Attribute (Name &self:28 Load) s_get_height Load) (list (Attribute (Attribute (Name &n:28 Load) s_right Load) s_right Load)) nil) (list Lt) (list (Call (Attribute (Name &self:28 Load) s_get_height Load) (list (Attribute (Attribute (Name &n:28 Load) s_right Load) s_left Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:28 Load) s__rotate_right Load) (list (Attribute (Name &n:28 Load) s_right Load)) nil))) nil) (Expr (Call (Attribute (Name &self:28 Load) s__rotate_left Load) (list (Name &n:28 Load)) nil))) (/seq (Assign (list (Name &n:28 Store)) (Attribute (Name &n:28 Load) s_parent Load) None)))))) nil)) nil None None) (FunctionDef &_remove_one:4 (arguments nil (list (arg &self:29 None None) (arg &node:29 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDgzLCAxMDUsIDEwMCwgMTAxLCAzMiwgMTAxLCAxMDIsIDEwMiwgMTAxLCA5OSwgMTE2LCAzMywgMzMsIDMzLCAzMiwgNjcsIDEwNCwgOTcsIDExMCwgMTAzLCAxMDEsIDExNSwgMzIsIDExMCwgMTExLCAxMDAsIDEwMSwgNDYsIDMyLCA3OCwgMTExLCAxMDAsIDEwMSwgMzIsIDExNSwgMTA0LCAxMTEsIDExNywgMTA4LCAxMDAsIDMyLCAxMDQsIDk3LCAxMTgsIDEwMSwgMzIsIDEwMSwgMTIwLCA5NywgOTksIDExNiwgMTA4LCAxMjEsIDMyLCAxMTEsIDExMCwgMTAxLCAzMiwgOTksIDEwNCwgMTA1LCAxMDgsIDEwMCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMl0= None)) (Assign (list (Name &replacement:29 Store)) (BoolOp Or (list (Attribute (Name &node:29 Load) s_left Load) (Attribute (Name &node:29 Load) s_right Load))) None) (If (Attribute (Name &node:29 Load) s_parent Load) (/seq (If (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:29 Load)) nil) (/seq (Assign (list (Attribute (Attribute (Name &node:29 Load) s_parent Load) s_left Store)) (Name &replacement:29 Load) None)) (/seq (Assign (list (Attribute (Attribute (Name &node:29 Load) s_parent Load) s_right Store)) (Name &replacement:29 Load) None))) (Assign (list (Attribute (Name &replacement:29 Load) s_parent Store)) (Attribute (Name &node:29 Load) s_parent Load) None) (Assign (list (Attribute (Name &node:29 Load) s_parent Store)) (Constant None None) None)) (/seq (Assign (list (Attribute (Name &self:29 Load) s__tree Store)) (Name &replacement:29 Load) None) (Assign (list (Attribute (Name &replacement:29 Load) s_parent Store)) (Constant None None) None))) (Assign (list (Attribute (Name &node:29 Load) s_left Store)) (Constant None None) None) (Assign (list (Attribute (Name &node:29 Load) s_right Store)) (Constant None None) None) (Assign (list (Attribute (Name &node:29 Load) s_parent Store)) (Constant None None) None) (Expr (Call (Attribute (Name &self:29 Load) s__rebalance Load) (list (Name &replacement:29 Load)) nil))) nil None None) (FunctionDef &_remove_leaf:4 (arguments nil (list (arg &self:30 None None) (arg &node:30 None None)) None nil nil None nil) (/seq (If (Attribute (Name &node:30 Load) s_parent Load) (/seq (If (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:30 Load)) nil) (/seq (Assign (list (Attribute (Attribute (Name &node:30 Load) s_parent Load) s_left Store)) (Constant None None) None)) (/seq (Assign (list (Attribute (Attribute (Name &node:30 Load) s_parent Load) s_right Store)) (Constant None None) None))) (Expr (Call (Attribute (Name &self:30 Load) s__rebalance Load) (list (Attribute (Name &node:30 Load) s_parent Load)) nil))) (/seq (Assign (list (Attribute (Name &self:30 Load) s__tree Store)) (Constant None None) None))) (Assign (list (Attribute (Name &node:30 Load) s_parent Store)) (Constant None None) None) (Assign (list (Attribute (Name &node:30 Load) s_left Store)) (Constant None None) None) (Assign (list (Attribute (Name &node:30 Load) s_right Store)) (Constant None None) None)) nil None None) (FunctionDef &remove:4 (arguments nil (list (arg &self:31 None None) (arg &k:31 None None)) None nil nil None nil) (/seq (Assign (list (Name &node:31 Store)) (Call (Attribute (Name &self:31 Load) s__get_node Load) (list (Name &k:31 Load)) nil) None) (If (UnaryOp Not (Name &node:31 Load)) (/seq (Return None)) nil) (If (Call (Attribute (Name &AvlTree:0 Load) s__is_leaf Load) (list (Name &node:31 Load)) nil) (/seq (Expr (Call (Attribute (Name &self:31 Load) s__remove_leaf Load) (list (Name &node:31 Load)) nil)) (Return None)) nil) (If (BoolOp And (list (Attribute (Name &node:31 Load) s_left Load) (Attribute (Name &node:31 Load) s_right Load))) (/seq (Assign (list (Name &nxt:31 Store)) (Call (Attribute (Name &AvlTree:0 Load) s__get_next Load) (list (Name &node:31 Load)) nil) None) (Assign (list (Attribute (Name &node:31 Load) s_key Store)) (Attribute (Name &nxt:31 Load) s_key Load) None) (Assign (list (Attribute (Name &node:31 Load) s_value Store)) (Attribute (Name &nxt:31 Load) s_value Load) None) (If (Call (Attribute (Name &self:31 Load) s__is_leaf Load) (list (Name &nxt:31 Load)) nil) (/seq (Expr (Call (Attribute (Name &self:31 Load) s__remove_leaf Load) (list (Name &nxt:31 Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:31 Load) s__remove_one Load) (list (Name &nxt:31 Load)) nil)))) (Expr (Call (Attribute (Name &self:31 Load) s__rebalance Load) (list (Name &node:31 Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:31 Load) s__remove_one Load) (list (Name &node:31 Load)) nil))))) nil None None) (FunctionDef &get:4 (arguments nil (list (arg &self:32 None None) (arg &k:32 None None)) None nil nil None nil) (/seq (Assign (list (Name &node:32 Store)) (Call (Attribute (Name &self:32 Load) s__get_node Load) (list (Name &k:32 Load)) nil) None) (Return (IfExp (Name &node:32 Load) (Attribute (Name &node:32 Load) s_value Load) (UnaryOp USub (Constant i1 None))))) nil None None) (FunctionDef &_get_node:4 (arguments nil (list (arg &self:33 None None) (arg &k:33 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &self:33 Load) s__tree Load)) (/seq (Return (Constant None None))) nil) (Assign (list (Name &node:33 Store)) (Attribute (Name &self:33 Load) s__tree Load) None) (While (Name &node:33 Load) (/seq (If (Compare (Name &k:33 Load) (list Lt) (list (Attribute (Name &node:33 Load) s_key Load))) (/seq (Assign (list (Name &node:33 Store)) (Attribute (Name &node:33 Load) s_left Load) None)) (/seq (If (Compare (Attribute (Name &node:33 Load) s_key Load) (list Lt) (list (Name &k:33 Load))) (/seq (Assign (list (Name &node:33 Store)) (Attribute (Name &node:33 Load) s_right Load) None)) (/seq (Return (Name &node:33 Load))))))) nil) (Return (Constant None None))) nil None None) (FunctionDef &get_at:4 (arguments nil (list (arg &self:34 None None) (arg &pos:34 None None)) None nil nil None nil) (/seq (Assign (list (Name &x:34 Store)) (BinOp (Name &pos:34 Load) Add (Constant i1 None)) None) (Assign (list (Name &node:34 Store)) (Attribute (Name &self:34 Load) s__tree Load) None) (While (Name &node:34 Load) (/seq (If (Compare (Name &x:34 Load) (list Lt) (list (Attribute (Name &node:34 Load) s_num_left Load))) (/seq (Assign (list (Name &node:34 Store)) (Attribute (Name &node:34 Load) s_left Load) None)) (/seq (If (Compare (Attribute (Name &node:34 Load) s_num_left Load) (list Lt) (list (Name &x:34 Load))) (/seq (AugAssign (Name &x:34 Store) Sub (Attribute (Name &node:34 Load) s_num_left Load)) (Assign (list (Name &node:34 Store)) (Attribute (Name &node:34 Load) s_right Load) None)) (/seq (Return (Tuple (list (Attribute (Name &node:34 Load) s_key Load) (Attribute (Name &node:34 Load) s_value Load)) Load))))))) nil) (Raise (Call (Name g_IndexError Load) (list (Constant s-Wzc5LCAxMTcsIDExNiwgMzIsIDExMSwgMTAyLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgMTE1XQ== None)) nil) None)) nil None None) (FunctionDef &_is_left:4 (arguments nil (list (arg &node:35 None None)) None nil nil None nil) (/seq (Return (BoolOp And (list (Attribute (Attribute (Name &node:35 Load) s_parent Load) s_left Load) (Compare (Attribute (Attribute (Name &node:35 Load) s_parent Load) s_left Load) (list Eq) (list (Name &node:35 Load))))))) (list (Name g_staticmethod Load)) None None) (FunctionDef &_is_leaf:4 (arguments nil (list (arg &node:36 None None)) None nil nil None nil) (/seq (Return (BoolOp And (list (Compare (Attribute (Name &node:36 Load) s_left Load) (list Is) (list (Constant None None))) (Compare (Attribute (Name &node:36 Load) s_right Load) (list Is) (list (Constant None None))))))) (list (Name g_staticmethod Load)) None None) (FunctionDef &_rotate_right:4 (arguments nil (list (arg &self:37 None None) (arg &node:37 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &node:37 Load) s_parent Load)) (/seq (Assign (list (Attribute (Name &self:37 Load) s__tree Store)) (Attribute (Name &node:37 Load) s_left Load) None) (Assign (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_parent Store)) (Constant None None) None)) (/seq (If (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:37 Load)) nil) (/seq (Assign (list (Attribute (Attribute (Name &node:37 Load) s_parent Load) s_left Store)) (Attribute (Name &node:37 Load) s_left Load) None) (Assign (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_parent Store)) (Attribute (Name &node:37 Load) s_parent Load) None)) (/seq (Assign (list (Attribute (Attribute (Name &node:37 Load) s_parent Load) s_right Store)) (Attribute (Name &node:37 Load) s_left Load) None) (Assign (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_parent Store)) (Attribute (Name &node:37 Load) s_parent Load) None))))) (Assign (list (Name &bk:37 Store)) (Attribute (Attribute (Name &node:37 Load) s_left Load) s_right Load) None) (Assign (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_right Store)) (Name &node:37 Load) None) (Assign (list (Attribute (Name &node:37 Load) s_parent Store)) (Attribute (Name &node:37 Load) s_left Load) None) (Assign (list (Attribute (Name &node:37 Load) s_left Store)) (Name &bk:37 Load) None) (If (Name &bk:37 Load) (/seq (Assign (list (Attribute (Name &bk:37 Load) s_parent Store)) (Name &node:37 Load) None)) nil) (Assign (list (Attribute (Name &node:37 Load) s_height Store)) (BinOp (Call (Name g_max Load) (list (Call (Attribute (Name &self:37 Load) s_get_height Load) (list (Attribute (Name &node:37 Load) s_left Load)) nil) (Call (Attribute (Name &self:37 Load) s_get_height Load) (list (Attribute (Name &node:37 Load) s_right Load)) nil)) nil) Add (Constant i1 None)) None) (Assign (list (Attribute (Name &node:37 Load) s_num_total Store)) (BinOp (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:37 Load) s_get_num_total Load) (list (Attribute (Name &node:37 Load) s_left Load)) nil)) Add (Call (Attribute (Name &self:37 Load) s_get_num_total Load) (list (Attribute (Name &node:37 Load) s_right Load)) nil)) None) (Assign (list (Attribute (Name &node:37 Load) s_num_left Store)) (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:37 Load) s_get_num_total Load) (list (Attribute (Name &node:37 Load) s_left Load)) nil)) None)) nil None None) (FunctionDef &_rotate_left:4 (arguments nil (list (arg &self:38 None None) (arg &node:38 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &node:38 Load) s_parent Load)) (/seq (Assign (list (Attribute (Name &self:38 Load) s__tree Store)) (Attribute (Name &node:38 Load) s_right Load) None) (Assign (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_parent Store)) (Constant None None) None)) (/seq (If (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:38 Load)) nil) (/seq (Assign (list (Attribute (Attribute (Name &node:38 Load) s_parent Load) s_left Store)) (Attribute (Name &node:38 Load) s_right Load) None) (Assign (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_parent Store)) (Attribute (Name &node:38 Load) s_parent Load) None)) (/seq (Assign (list (Attribute (Attribute (Name &node:38 Load) s_parent Load) s_right Store)) (Attribute (Name &node:38 Load) s_right Load) None) (Assign (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_parent Store)) (Attribute (Name &node:38 Load) s_parent Load) None))))) (Assign (list (Name &bk:38 Store)) (Attribute (Attribute (Name &node:38 Load) s_right Load) s_left Load) None) (Assign (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_left Store)) (Name &node:38 Load) None) (Assign (list (Attribute (Name &node:38 Load) s_parent Store)) (Attribute (Name &node:38 Load) s_right Load) None) (Assign (list (Attribute (Name &node:38 Load) s_right Store)) (Name &bk:38 Load) None) (If (Name &bk:38 Load) (/seq (Assign (list (Attribute (Name &bk:38 Load) s_parent Store)) (Name &node:38 Load) None)) nil) (Assign (list (Attribute (Name &node:38 Load) s_height Store)) (BinOp (Call (Name g_max Load) (list (Call (Attribute (Name &self:38 Load) s_get_height Load) (list (Attribute (Name &node:38 Load) s_left Load)) nil) (Call (Attribute (Name &self:38 Load) s_get_height Load) (list (Attribute (Name &node:38 Load) s_right Load)) nil)) nil) Add (Constant i1 None)) None) (Assign (list (Attribute (Name &node:38 Load) s_num_total Store)) (BinOp (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:38 Load) s_get_num_total Load) (list (Attribute (Name &node:38 Load) s_left Load)) nil)) Add (Call (Attribute (Name &self:38 Load) s_get_num_total Load) (list (Attribute (Name &node:38 Load) s_right Load)) nil)) None) (Assign (list (Attribute (Name &node:38 Load) s_num_left Store)) (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:38 Load) s_get_num_total Load) (list (Attribute (Name &node:38 Load) s_left Load)) nil)) None)) nil None None) (FunctionDef &_get_next:4 (arguments nil (list (arg &node:39 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &node:39 Load) s_right Load)) (/seq (Return (Attribute (Name &node:39 Load) s_parent Load))) nil) (Assign (list (Name &n:39 Store)) (Attribute (Name &node:39 Load) s_right Load) None) (While (Attribute (Name &n:39 Load) s_left Load) (/seq (Assign (list (Name &n:39 Store)) (Attribute (Name &n:39 Load) s_left Load) None)) nil) (Return (Name &n:39 Load))) (list (Name g_staticmethod Load)) None None)) nil) (ClassDef &SegmentTree1:0 nil nil (/seq (FunctionDef &__init__:5 (arguments nil (list (arg &self:40 None None) (arg &data:40 None None) (arg &default:40 None None) (arg &func:40 None None)) None nil nil None (list (Constant i0 None) (Lambda (arguments nil (list (arg &a:62 None None) (arg &b:62 None None)) None nil nil None nil) (Call (Name g_max Load) (list (Name &a:62 Load) (Name &b:62 Load)) nil)))) (/seq (Expr (Constant s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd None)) (Assign (list (Attribute (Name &self:40 Load) s__default Store)) (Name &default:40 Load) None) (Assign (list (Attribute (Name &self:40 Load) s__func Store)) (Name &func:40 Load) None) (Assign (list (Attribute (Name &self:40 Load) s__len Store)) (Call (Name g_len Load) (list (Name &data:40 Load)) nil) None) (Assign (list (Attribute (Name &self:40 Load) s__size Store) (Name &_size:40 Store)) (BinOp (Constant i1 None) LShift (Call (Attribute (BinOp (Attribute (Name &self:40 Load) s__len Load) Sub (Constant i1 None)) s_bit_length Load) nil nil)) None) (Assign (list (Attribute (Name &self:40 Load) s_data Store)) (BinOp (List (list (Name &default:40 Load)) Load) Mult (BinOp (Constant i2 None) Mult (Name &_size:40 Load))) None) (Assign (list (Subscript (Attribute (Name &self:40 Load) s_data Load) (Slice (Name &_size:40 Load) (BinOp (Name &_size:40 Load) Add (Attribute (Name &self:40 Load) s__len Load)) None) Store)) (Name &data:40 Load) None) (For (Name &i:40 Store) (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:40 Load)) nil)) nil) (/seq (fn_2 (BinOp (Name &i:40 Load) Add (Name &i:40 Load)) (Name &func:40 Load) &self:40 &i:40)) nil None)) nil None None) (FunctionDef &__delitem__:5 (arguments nil (list (arg &self:41 None None) (arg &idx:41 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &self:41 Load) (Name &idx:41 Load) Store)) (Attribute (Name &self:41 Load) s__default Load) None)) nil None None) (FunctionDef &__getitem__:5 (arguments nil (list (arg &self:42 None None) (arg &idx:42 None None)) None nil nil None nil) (/seq (Return (Subscript (Attribute (Name &self:42 Load) s_data Load) (BinOp (Name &idx:42 Load) Add (Attribute (Name &self:42 Load) s__size Load)) Load))) nil None None) (FunctionDef &__setitem__:5 (arguments nil (list (arg &self:43 None None) (arg &idx:43 None None) (arg &value:43 None None)) None nil nil None nil) (/seq (AugAssign (Name &idx:43 Store) Add (Attribute (Name &self:43 Load) s__size Load)) (Assign (list (Subscript (Attribute (Name &self:43 Load) s_data Load) (Name &idx:43 Load) Store)) (Name &value:43 Load) None) (AugAssign (Name &idx:43 Store) RShift (Constant i1 None)) (While (Name &idx:43 Load) (/seq (fn_2 (BinOp (Constant i2 None) Mult (Name &idx:43 Load)) (Attribute (Name &self:43 Load) s__func Load) &self:43 &idx:43) (AugAssign (Name &idx:43 Store) RShift (Constant i1 None))) nil)) nil None None) (FunctionDef &__len__:5 (arguments nil (list (arg &self:44 None None)) None nil nil None nil) (/seq (Return (Attribute (Name &self:44 Load) s__len Load))) nil None None) (FunctionDef &query:5 (arguments nil (list (arg &self:45 None None) (arg &start:45 None None) (arg &stop:45 None None)) None nil nil None nil) (/seq (If (Compare (Name &start:45 Load) (list Eq) (list (Name &stop:45 Load))) (/seq (Return (Call (Attribute (Name &self:45 Load) s___getitem__ Load) (list (Name &start:45 Load)) nil))) nil) (AugAssign (Name &stop:45 Store) Add (Constant i1 None)) (AugAssign (Name &start:45 Store) Add (Attribute (Name &self:45 Load) s__size Load)) (AugAssign (Name &stop:45 Store) Add (Attribute (Name &self:45 Load) s__size Load)) (Assign (list (Name &res:45 Store)) (Attribute (Name &self:45 Load) s__default Load) None) (While (Compare (Name &start:45 Load) (list Lt) (list (Name &stop:45 Load))) (/seq (If (BinOp (Name &start:45 Load) BitAnd (Constant i1 None)) (/seq (Assign (list (Name &res:45 Store)) (Call (Attribute (Name &self:45 Load) s__func Load) (list (Name &res:45 Load) (Subscript (Attribute (Name &self:45 Load) s_data Load) (Name &start:45 Load) Load)) nil) None) (AugAssign (Name &start:45 Store) Add (Constant i1 None))) nil) (If (BinOp (Name &stop:45 Load) BitAnd (Constant i1 None)) (/seq (AugAssign (Name &stop:45 Store) Sub (Constant i1 None)) (Assign (list (Name &res:45 Store)) (Call (Attribute (Name &self:45 Load) s__func Load) (list (Name &res:45 Load) (Subscript (Attribute (Name &self:45 Load) s_data Load) (Name &stop:45 Load) Load)) nil) None)) nil) (AugAssign (Name &start:45 Store) RShift (Constant i1 None)) (AugAssign (Name &stop:45 Store) RShift (Constant i1 None))) nil) (Return (Name &res:45 Load))) nil None None) (FunctionDef &__repr__:5 (arguments nil (list (arg &self:46 None None)) None nil nil None nil) (/seq (Return (Call (Attribute (Constant s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd None) s_format Load) (list (Attribute (Name &self:46 Load) s_data Load)) nil))) nil None None)) nil) (ClassDef &SegmentTree:0 nil nil (/seq (FunctionDef &__init__:6 (arguments nil (list (arg &self:47 None None) (arg &data:47 None None) (arg &default:47 None None) (arg &func:47 None None)) None nil nil None (list (Constant i0 None) (Lambda (arguments nil (list (arg &a:63 None None) (arg &b:63 None None)) None nil nil None nil) (BinOp (Name &a:63 Load) Add (Name &b:63 Load))))) (/seq (Expr (Constant s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd None)) (Assign (list (Attribute (Name &self:47 Load) s__default Store)) (Name &default:47 Load) None) (Assign (list (Attribute (Name &self:47 Load) s__func Store)) (Name &func:47 Load) None) (Assign (list (Attribute (Name &self:47 Load) s__len Store)) (Call (Name g_len Load) (list (Name &data:47 Load)) nil) None) (Assign (list (Attribute (Name &self:47 Load) s__size Store) (Name &_size:47 Store)) (BinOp (Constant i1 None) LShift (Call (Attribute (BinOp (Attribute (Name &self:47 Load) s__len Load) Sub (Constant i1 None)) s_bit_length Load) nil nil)) None) (Assign (list (Attribute (Name &self:47 Load) s_data Store)) (BinOp (List (list (Name &default:47 Load)) Load) Mult (BinOp (Constant i2 None) Mult (Name &_size:47 Load))) None) (Assign (list (Subscript (Attribute (Name &self:47 Load) s_data Load) (Slice (Name &_size:47 Load) (BinOp (Name &_size:47 Load) Add (Attribute (Name &self:47 Load) s__len Load)) None) Store)) (Name &data:47 Load) None) (For (Name &i:47 Store) (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:47 Load)) nil)) nil) (/seq (fn_2 (BinOp (Name &i:47 Load) Add (Name &i:47 Load)) (Name &func:47 Load) &self:47 &i:47)) nil None)) nil None None) (FunctionDef &__delitem__:6 (arguments nil (list (arg &self:48 None None) (arg &idx:48 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &self:48 Load) (Name &idx:48 Load) Store)) (Attribute (Name &self:48 Load) s__default Load) None)) nil None None) (FunctionDef &__getitem__:6 (arguments nil (list (arg &self:49 None None) (arg &idx:49 None None)) None nil nil None nil) (/seq (Return (Subscript (Attribute (Name &self:49 Load) s_data Load) (BinOp (Name &idx:49 Load) Add (Attribute (Name &self:49 Load) s__size Load)) Load))) nil None None) (FunctionDef &__setitem__:6 (arguments nil (list (arg &self:50 None None) (arg &idx:50 None None) (arg &value:50 None None)) None nil nil None nil) (/seq (AugAssign (Name &idx:50 Store) Add (Attribute (Name &self:50 Load) s__size Load)) (Assign (list (Subscript (Attribute (Name &self:50 Load) s_data Load) (Name &idx:50 Load) Store)) (Name &value:50 Load) None) (AugAssign (Name &idx:50 Store) RShift (Constant i1 None)) (While (Name &idx:50 Load) (/seq (fn_2 (BinOp (Constant i2 None) Mult (Name &idx:50 Load)) (Attribute (Name &self:50 Load) s__func Load) &self:50 &idx:50) (AugAssign (Name &idx:50 Store) RShift (Constant i1 None))) nil)) nil None None) (FunctionDef &__len__:6 (arguments nil (list (arg &self:51 None None)) None nil nil None nil) (/seq (Return (Attribute (Name &self:51 Load) s__len Load))) nil None None) (FunctionDef &query:6 (arguments nil (list (arg &self:52 None None) (arg &start:52 None None) (arg &stop:52 None None)) None nil nil None nil) (/seq (If (Compare (Name &start:52 Load) (list Eq) (list (Name &stop:52 Load))) (/seq (Return (Call (Attribute (Name &self:52 Load) s___getitem__ Load) (list (Name &start:52 Load)) nil))) nil) (AugAssign (Name &stop:52 Store) Add (Constant i1 None)) (AugAssign (Name &start:52 Store) Add (Attribute (Name &self:52 Load) s__size Load)) (AugAssign (Name &stop:52 Store) Add (Attribute (Name &self:52 Load) s__size Load)) (Assign (list (Name &res:52 Store)) (Attribute (Name &self:52 Load) s__default Load) None) (While (Compare (Name &start:52 Load) (list Lt) (list (Name &stop:52 Load))) (/seq (If (BinOp (Name &start:52 Load) BitAnd (Constant i1 None)) (/seq (Assign (list (Name &res:52 Store)) (Call (Attribute (Name &self:52 Load) s__func Load) (list (Name &res:52 Load) (Subscript (Attribute (Name &self:52 Load) s_data Load) (Name &start:52 Load) Load)) nil) None) (AugAssign (Name &start:52 Store) Add (Constant i1 None))) nil) (If (BinOp (Name &stop:52 Load) BitAnd (Constant i1 None)) (/seq (AugAssign (Name &stop:52 Store) Sub (Constant i1 None)) (Assign (list (Name &res:52 Store)) (Call (Attribute (Name &self:52 Load) s__func Load) (list (Name &res:52 Load) (Subscript (Attribute (Name &self:52 Load) s_data Load) (Name &stop:52 Load) Load)) nil) None)) nil) (AugAssign (Name &start:52 Store) RShift (Constant i1 None)) (AugAssign (Name &stop:52 Store) RShift (Constant i1 None))) nil) (Return (Name &res:52 Load))) nil None None) (FunctionDef &__repr__:6 (arguments nil (list (arg &self:53 None None)) None nil nil None nil) (/seq (Return (Call (Attribute (Constant s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd None) s_format Load) (list (Attribute (Name &self:53 Load) s_data Load)) nil))) nil None None)) nil) (ClassDef &Factorial:0 nil nil (/seq (FunctionDef &__init__:7 (arguments nil (list (arg &self:54 None None) (arg &MOD:54 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:54 Load) s_MOD Store)) (Name &MOD:54 Load) None) (Assign (list (Attribute (Name &self:54 Load) s_factorials Store)) (List (list (Constant i1 None) (Constant i1 None)) Load) None) (Assign (list (Attribute (Name &self:54 Load) s_invModulos Store)) (List (list (Constant i0 None) (Constant i1 None)) Load) None) (Assign (list (Attribute (Name &self:54 Load) s_invFactorial_ Store)) (List (list (Constant i1 None) (Constant i1 None)) Load) None)) nil None None) (FunctionDef &calc:7 (arguments nil (list (arg &self:55 None None) (arg &n:55 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:55 Load) (list LtE) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTAsIDMzXQ== None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ== None) Add (Call (Name g_str Load) (list (Name &n:55 Load)) nil))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (Compare (Name &n:55 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_factorials Load)) nil))) (/seq (Return (Subscript (Attribute (Name &self:55 Load) s_factorials Load) (Name &n:55 Load) Load))) nil) (Assign (list (Name &nextArr:55 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Name &n:55 Load) Add (Constant i1 None)) Sub (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_factorials Load)) nil))) None) (Assign (list (Name &initialI:55 Store)) (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_factorials Load)) nil) None) (Assign (list (Name &prev:55 Store)) (Subscript (Attribute (Name &self:55 Load) s_factorials Load) (UnaryOp USub (Constant i1 None)) Load) None) (Assign (list (Name &m:55 Store)) (Attribute (Name &self:55 Load) s_MOD Load) None) (For (Name &i:55 Store) (Call (Name g_range Load) (list (Name &initialI:55 Load) (BinOp (Name &n:55 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &prev:55 Store) (Subscript (Name &nextArr:55 Load) (BinOp (Name &i:55 Load) Sub (Name &initialI:55 Load)) Store)) (BinOp (BinOp (Name &prev:55 Load) Mult (Name &i:55 Load)) Mod (Name &m:55 Load)) None)) nil None) (AugAssign (Attribute (Name &self:55 Load) s_factorials Store) Add (Name &nextArr:55 Load)) (Return (Subscript (Attribute (Name &self:55 Load) s_factorials Load) (Name &n:55 Load) Load))) nil None None) (FunctionDef &inv:7 (arguments nil (list (arg &self:56 None None) (arg &n:56 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:56 Load) (list LtE) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTAsIDk0LCA0MCwgNDUsIDQ5LCA0MV0= None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ== None) Add (Call (Name g_str Load) (list (Name &n:56 Load)) nil))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (Assign (list (Name &p:56 Store)) (Attribute (Name &self:56 Load) s_MOD Load) None) (Assign (list (Name &pi:56 Store)) (BinOp (Name &n:56 Load) Mod (Name &p:56 Load)) None) (If (Compare (Name &pi:56 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invModulos Load)) nil))) (/seq (Return (Subscript (Attribute (Name &self:56 Load) s_invModulos Load) (Name &pi:56 Load) Load))) nil) (Assign (list (Name &nextArr:56 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Name &n:56 Load) Add (Constant i1 None)) Sub (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invModulos Load)) nil))) None) (Assign (list (Name &initialI:56 Store)) (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invModulos Load)) nil) None) (For (Name &i:56 Store) (Call (Name g_range Load) (list (Name &initialI:56 Load) (Call (Name g_min Load) (list (Name &p:56 Load) (BinOp (Name &n:56 Load) Add (Constant i1 None))) nil)) nil) (/seq (Assign (list (Name &next:56 Store)) (BinOp (BinOp (UnaryOp USub (Subscript (Attribute (Name &self:56 Load) s_invModulos Load) (BinOp (Name &p:56 Load) Mod (Name &i:56 Load)) Load)) Mult (BinOp (Name &p:56 Load) FloorDiv (Name &i:56 Load))) Mod (Name &p:56 Load)) None) (Expr (Call (Attribute (Attribute (Name &self:56 Load) s_invModulos Load) s_append Load) (list (Name &next:56 Load)) nil))) nil None) (Return (Subscript (Attribute (Name &self:56 Load) s_invModulos Load) (Name &pi:56 Load) Load))) nil None None) (FunctionDef &invFactorial:7 (arguments nil (list (arg &self:57 None None) (arg &n:57 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:57 Load) (list LtE) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCA0MCwgMTEwLCA5NCwgNDAsIDQ1LCA0OSwgNDEsIDQxLCAzM10= None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ== None) Add (Call (Name g_str Load) (list (Name &n:57 Load)) nil))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (Compare (Name &n:57 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:57 Load) s_invFactorial_ Load)) nil))) (/seq (Return (Subscript (Attribute (Name &self:57 Load) s_invFactorial_ Load) (Name &n:57 Load) Load))) nil) (Expr (Call (Attribute (Name &self:57 Load) s_inv Load) (list (Name &n:57 Load)) nil)) (Assign (list (Name &nextArr:57 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Name &n:57 Load) Add (Constant i1 None)) Sub (Call (Name g_len Load) (list (Attribute (Name &self:57 Load) s_invFactorial_ Load)) nil))) None) (Assign (list (Name &initialI:57 Store)) (Call (Name g_len Load) (list (Attribute (Name &self:57 Load) s_invFactorial_ Load)) nil) None) (Assign (list (Name &prev:57 Store)) (Subscript (Attribute (Name &self:57 Load) s_invFactorial_ Load) (UnaryOp USub (Constant i1 None)) Load) None) (Assign (list (Name &p:57 Store)) (Attribute (Name &self:57 Load) s_MOD Load) None) (For (Name &i:57 Store) (Call (Name g_range Load) (list (Name &initialI:57 Load) (BinOp (Name &n:57 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &prev:57 Store) (Subscript (Name &nextArr:57 Load) (BinOp (Name &i:57 Load) Sub (Name &initialI:57 Load)) Store)) (BinOp (BinOp (Name &prev:57 Load) Mult (Subscript (Attribute (Name &self:57 Load) s_invModulos Load) (BinOp (Name &i:57 Load) Mod (Name &p:57 Load)) Load)) Mod (Name &p:57 Load)) None)) nil None) (AugAssign (Attribute (Name &self:57 Load) s_invFactorial_ Store) Add (Name &nextArr:57 Load)) (Return (Subscript (Attribute (Name &self:57 Load) s_invFactorial_ Load) (Name &n:57 Load) Load))) nil None None)) nil) (ClassDef &Combination:0 nil nil (/seq (FunctionDef &__init__:8 (arguments nil (list (arg &self:58 None None) (arg &MOD:58 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:58 Load) s_MOD Store)) (Name &MOD:58 Load) None) (Assign (list (Attribute (Name &self:58 Load) s_factorial Store)) (Call (Name &Factorial:0 Load) (list (Name &MOD:58 Load)) nil) None)) nil None None) (FunctionDef &ncr:8 (arguments nil (list (arg &self:59 None None) (arg &n:59 None None) (arg &k:59 None None)) None nil nil None nil) (/seq (If (BoolOp Or (list (Compare (Name &k:59 Load) (list Lt) (list (Constant i0 None))) (Compare (Name &n:59 Load) (list Lt) (list (Name &k:59 Load))))) (/seq (Return (Constant i0 None))) nil) (Assign (list (Name &k:59 Store)) (Call (Name g_min Load) (list (Name &k:59 Load) (BinOp (Name &n:59 Load) Sub (Name &k:59 Load))) nil) None) (Assign (list (Name &f:59 Store)) (Attribute (Name &self:59 Load) s_factorial Load) None) (Return (BinOp (BinOp (BinOp (Call (Attribute (Name &f:59 Load) s_calc Load) (list (Name &n:59 Load)) nil) Mult (Call (Attribute (Name &f:59 Load) s_invFactorial Load) (list (Call (Name g_max Load) (list (BinOp (Name &n:59 Load) Sub (Name &k:59 Load)) (Name &k:59 Load)) nil)) nil)) Mult (Call (Attribute (Name &f:59 Load) s_invFactorial Load) (list (Call (Name g_min Load) (list (Name &k:59 Load) (BinOp (Name &n:59 Load) Sub (Name &k:59 Load))) nil)) nil)) Mod (Attribute (Name &self:59 Load) s_MOD Load)))) nil None None)) nil) (FunctionDef &powm:0 (arguments nil (list (arg &a:9 None None) (arg &n:9 None None) (arg &m:9 None None)) None nil nil None nil) (/seq (If (BoolOp Or (list (Compare (Name &a:9 Load) (list Eq) (list (Constant i1 None))) (Compare (Name &n:9 Load) (list Eq) (list (Constant i0 None))))) (/seq (Return (Constant i1 None))) nil) (If (Compare (BinOp (Name &n:9 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &s:9 Store)) (Call (Name &powm:0 Load) (list (Name &a:9 Load) (BinOp (Name &n:9 Load) FloorDiv (Constant i2 None)) (Name &m:9 Load)) nil) None) (Return (BinOp (BinOp (Name &s:9 Load) Mult (Name &s:9 Load)) Mod (Name &m:9 Load)))) (/seq (Return (BinOp (BinOp (Name &a:9 Load) Mult (Call (Name &powm:0 Load) (list (Name &a:9 Load) (BinOp (Name &n:9 Load) Sub (Constant i1 None)) (Name &m:9 Load)) nil)) Mod (Name &m:9 Load)))))) nil None None) (FunctionDef &sort_list:0 (arguments nil (list (arg &list1:10 None None) (arg &list2:10 None None)) None nil nil None nil) (/seq (Assign (list (Name &zipped_pairs:10 Store)) (Call (Name g_zip Load) (list (Name &list2:10 Load) (Name &list1:10 Load)) nil) None) (Assign (list (Name &z:10 Store)) (ListComp (Name &x:60 Load) (list (comprehension (Tuple (list (Name &_:60 Store) (Name &x:60 Store)) Store) (Call (Name g_sorted Load) (list (Name &zipped_pairs:10 Load)) nil) nil i0))) None) (Return (Name &z:10 Load))) nil None None) (FunctionDef &product:0 (arguments nil (list (arg &l:11 None None)) None nil nil None nil) (/seq (Assign (list (Name &por:11 Store)) (Constant i1 None) None) (For (Name &i:11 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &l:11 Load)) nil)) nil) (/seq (AugAssign (Name &por:11 Store) Mult (Subscript (Name &l:11 Load) (Name &i:11 Load) Load))) nil None) (Return (Name &por:11 Load))) nil None None) (FunctionDef &binarySearchCount:0 (arguments nil (list (arg &arr:12 None None) (arg &n:12 None None) (arg &key:12 None None)) None nil nil None nil) (/seq (Assign (list (Name &left:12 Store)) (Constant i0 None) None) (Assign (list (Name &right:12 Store)) (BinOp (Name &n:12 Load) Sub (Constant i1 None)) None) (Assign (list (Name &count:12 Store)) (Constant i0 None) None) (While (Compare (Name &left:12 Load) (list LtE) (list (Name &right:12 Load))) (/seq (Assign (list (Name &mid:12 Store)) (Call (Name g_int Load) (list (BinOp (BinOp (Name &right:12 Load) Add (Name &left:12 Load)) Div (Constant i2 None))) nil) None) (If (Compare (Subscript (Name &arr:12 Load) (Name &mid:12 Load) Load) (list Lt) (list (Name &key:12 Load))) (/seq (Assign (list (Name &count:12 Store)) (BinOp (Name &mid:12 Load) Add (Constant i1 None)) None) (Assign (list (Name &left:12 Store)) (BinOp (Name &mid:12 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &right:12 Store)) (BinOp (Name &mid:12 Load) Sub (Constant i1 None)) None)))) nil) (Return (Name &count:12 Load))) nil None None) (FunctionDef &countdig:0 (arguments nil (list (arg &n:13 None None)) None nil nil None nil) (/seq (Assign (list (Name &c:13 Store)) (Constant i0 None) None) (While (Compare (Name &n:13 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &n:13 Store) FloorDiv (Constant i10 None)) (AugAssign (Name &c:13 Store) Add (Constant i1 None))) nil) (Return (Name &c:13 Load))) nil None None) (FunctionDef &binary:0 (arguments nil (list (arg &x:14 None None) (arg &length:14 None None)) None nil nil None nil) (/seq (Assign (list (Name &y:14 Store)) (Subscript (Call (Name g_bin Load) (list (Name &x:14 Load)) nil) (Slice (Constant i2 None) None None) Load) None) (Return (IfExp (Compare (Call (Name g_len Load) (list (Name &y:14 Load)) nil) (list GtE) (list (Name &length:14 Load))) (Name &y:14 Load) (BinOp (BinOp (Constant s_0 None) Mult (BinOp (Name &length:14 Load) Sub (Call (Name g_len Load) (list (Name &y:14 Load)) nil))) Add (Name &y:14 Load))))) nil None None) (FunctionDef &countGreater:0 (arguments nil (list (arg &arr:15 None None) (arg &n:15 None None) (arg &k:15 None None)) None nil nil None nil) (/seq (Assign (list (Name &l:15 Store)) (Constant i0 None) None) (Assign (list (Name &r:15 Store)) (BinOp (Name &n:15 Load) Sub (Constant i1 None)) None) (Assign (list (Name &leftGreater:15 Store)) (Name &n:15 Load) None) (While (Compare (Name &l:15 Load) (list LtE) (list (Name &r:15 Load))) (/seq (Assign (list (Name &m:15 Store)) (Call (Name g_int Load) (list (BinOp (Name &l:15 Load) Add (BinOp (BinOp (Name &r:15 Load) Sub (Name &l:15 Load)) Div (Constant i2 None)))) nil) None) (If (Compare (Subscript (Name &arr:15 Load) (Name &m:15 Load) Load) (list GtE) (list (Name &k:15 Load))) (/seq (Assign (list (Name &leftGreater:15 Store)) (Name &m:15 Load) None) (Assign (list (Name &r:15 Store)) (BinOp (Name &m:15 Load) Sub (Constant i1 None)) None)) (/seq (Assign (list (Name &l:15 Store)) (BinOp (Name &m:15 Load) Add (Constant i1 None)) None)))) nil) (Return (BinOp (Name &n:15 Load) Sub (Name &leftGreater:15 Load)))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &f:0 Store)) (ListComp (Name &i:16 Load) (list (comprehension (Name &i:16 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (Assign (list (Name &s:0 Store)) (Call (Name &SegmentTree:0 Load) (list (Name &f:0 Load)) nil) None) (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (fn_1 (Name &n:0 Load)) (/seq (Assign (list (Name &st:0 Store)) (Constant i1 None) None) (Assign (list (Name &end:0 Store)) (Name &n:0 Load) None) (While (Compare (Name &st:0 Load) (list LtE) (list (Name &end:0 Load))) (/seq (Assign (list (Name &mid:0 Store)) (BinOp (BinOp (Name &st:0 Load) Add (Name &end:0 Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &su:0 Store)) (Call (Attribute (Name &s:0 Load) s_query Load) (list (Constant i0 None) (BinOp (Name &mid:0 Load) Sub (Constant i2 None))) nil) None) (If (Compare (Name &su:0 Load) (list Eq) (list (Subscript (Name &l:0 Load) (Name &i:0 Load) Load))) (/seq (Assign (list (Name &an:0 Store)) (Name &mid:0 Load) None) (Assign (list (Name &st:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None)) (/seq (If (Compare (Name &su:0 Load) (list Lt) (list (Subscript (Name &l:0 Load) (Name &i:0 Load) Load))) (/seq (Assign (list (Name &st:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &end:0 Store)) (BinOp (Name &mid:0 Load) Sub (Constant i1 None)) None)))))) nil) (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &an:0 Load) None) (Expr (Call (Attribute (Name &s:0 Load) s___setitem__ Load) (list (BinOp (Name &an:0 Load) Sub (Constant i1 None)) (Constant i0 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) (list (keyword s_sep (Constant s-WzMyXQ== None)))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (ClassDef &SegTree:0 (list (Name g_object Load)) nil (/seq (Expr (Constant s-WzEwMCwgMTExLCA5OSwgMTE1LCAxMTYsIDExNCwgMTA1LCAxMTAsIDEwMywgMzIsIDEwMiwgMTExLCAxMTQsIDMyLCA4MywgMTAxLCAxMDMsIDg0LCAxMTQsIDEwMSwgMTAxXQ== None)) (FunctionDef &__init__:1 (arguments nil (list (arg &self:4 None None) (arg &n:4 None None) (arg &arr:4 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:4 Load) s_n Store)) (Name &n:4 Load) None) (Assign (list (Attribute (Name &self:4 Load) s_arr Store)) (Name &arr:4 Load) None) (Assign (list (Attribute (Name &self:4 Load) s_tree Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:9 Store) (Call (Name g_range Load) (list (BinOp (Constant i2 None) Mult (Name &n:4 Load))) nil) nil i0))) None)) nil None None) (FunctionDef &construct:1 (arguments nil (list (arg &self:5 None None)) None nil nil None nil) (/seq (For (Name &i:5 Store) (Call (Name g_range Load) (list (Attribute (Name &self:5 Load) s_n Load)) nil) (/seq (Assign (list (Subscript (Attribute (Name &self:5 Load) s_tree Load) (BinOp (Name &n:0 Load) Add (Name &i:5 Load)) Store)) (Subscript (Attribute (Name &self:5 Load) s_arr Load) (Name &i:5 Load) Load) None)) nil None) (For (Name &i:5 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)) (Constant i0 None) (UnaryOp USub (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Attribute (Name &self:5 Load) s_tree Load) (Name &i:5 Load) Store)) (Call (Attribute (Name &self:5 Load) s_function Load) (list (Subscript (Attribute (Name &self:5 Load) s_tree Load) (BinOp (Constant i2 None) Mult (Name &i:5 Load)) Load) (Subscript (Attribute (Name &self:5 Load) s_tree Load) (BinOp (BinOp (Constant i2 None) Mult (Name &i:5 Load)) Add (Constant i1 None)) Load)) nil) None)) nil None)) nil None None) (FunctionDef &update:1 (arguments nil (list (arg &self:6 None None) (arg &index:6 None None) (arg &value:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &start:6 Store)) (BinOp (Name &index:6 Load) Add (Attribute (Name &self:6 Load) s_n Load)) None) (Assign (list (Subscript (Attribute (Name &self:6 Load) s_tree Load) (Name &start:6 Load) Store)) (Name &value:6 Load) None) (While (Compare (Name &start:6 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &start:6 Store)) (BinOp (Name &start:6 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Subscript (Attribute (Name &self:6 Load) s_tree Load) (Name &start:6 Load) Store)) (Call (Attribute (Name &self:6 Load) s_function Load) (list (Subscript (Attribute (Name &self:6 Load) s_tree Load) (BinOp (Constant i2 None) Mult (Name &start:6 Load)) Load) (Subscript (Attribute (Name &self:6 Load) s_tree Load) (BinOp (BinOp (Constant i2 None) Mult (Name &start:6 Load)) Add (Constant i1 None)) Load)) nil) None)) nil)) nil None None) (FunctionDef &calc:1 (arguments nil (list (arg &self:7 None None) (arg &low:7 None None) (arg &high:7 None None)) None nil nil None nil) (/seq (AugAssign (Name &low:7 Store) Add (Attribute (Name &self:7 Load) s_n Load)) (AugAssign (Name &high:7 Store) Add (Attribute (Name &self:7 Load) s_n Load)) (Assign (list (Name &ans:7 Store)) (Constant i0 None) None) (While (Compare (Name &low:7 Load) (list Lt) (list (Name &high:7 Load))) (/seq (If (BinOp (Name &low:7 Load) Mod (Constant i2 None)) (/seq (Assign (list (Name &ans:7 Store)) (Call (Attribute (Name &self:7 Load) s_function Load) (list (Name &ans:7 Load) (Subscript (Attribute (Name &self:7 Load) s_tree Load) (Name &low:7 Load) Load)) nil) None) (AugAssign (Name &low:7 Store) Add (Constant i1 None))) nil) (If (BinOp (Name &high:7 Load) Mod (Constant i2 None)) (/seq (AugAssign (Name &high:7 Store) Sub (Constant i1 None)) (Assign (list (Name &ans:7 Store)) (Call (Attribute (Name &self:7 Load) s_function Load) (list (Name &ans:7 Load) (Subscript (Attribute (Name &self:7 Load) s_tree Load) (Name &high:7 Load) Load)) nil) None)) nil) (Assign (list (Name &low:7 Store)) (BinOp (Name &low:7 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name &high:7 Store)) (BinOp (Name &high:7 Load) FloorDiv (Constant i2 None)) None)) nil) (Return (Name &ans:7 Load))) nil None None) (FunctionDef &function:1 (arguments nil (list (arg &self:8 None None) (arg &a:8 None None) (arg &b:8 None None)) None nil nil None nil) (/seq (Return (BinOp (Name &a:8 Load) Add (Name &b:8 Load)))) nil None None)) nil) (FunctionDef &find:0 (arguments nil (list (arg &num:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &low:2 Store)) (Constant i0 None) None) (Assign (list (Name &high:2 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (While (Compare (Name &low:2 Load) (list Lt) (list (Name &high:2 Load))) (/seq (Assign (list (Name &mid:2 Store)) (BinOp (BinOp (Name &low:2 Load) Add (Name &high:2 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (Call (Attribute (Name &st:0 Load) s_calc Load) (list (Constant i0 None) (BinOp (Name &mid:2 Load) Add (Constant i1 None))) nil) (list Gt) (list (Name &num:2 Load))) (/seq (Assign (list (Name &high:2 Store)) (BinOp (Name &mid:2 Load) Sub (Constant i1 None)) None)) (/seq (Assign (list (Name &low:2 Store)) (BinOp (Name &mid:2 Load) Add (Constant i1 None)) None)))) nil) (If (Compare (Call (Attribute (Name &st:0 Load) s_calc Load) (list (Constant i0 None) (BinOp (Name &low:2 Load) Add (Constant i1 None))) nil) (list Gt) (list (Name &num:2 Load))) (/seq (Return (Name &low:2 Load))) (/seq (Return (BinOp (Name &low:2 Load) Add (Constant i1 None)))))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &arr:0 Store)) (ListComp (Name &i:3 Load) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (Assign (list (Name &st:0 Store)) (Call (Name &SegTree:0 Load) (list (Name &n:0 Load) (Name &arr:0 Load)) nil) None) (Expr (Call (Attribute (Name &st:0 Load) s_construct Load) nil nil)) (Assign (list (Name &ans:0 Store)) (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (fn_1 (Name &n:0 Load)) (/seq (Assign (list (Name &ind:0 Store)) (Call (Name &find:0 Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil) None) (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Subscript (Name &arr:0 Load) (Name &ind:0 Load) Load) None) (Expr (Call (Attribute (Name &st:0 Load) s_update Load) (list (Name &ind:0 Load) (Constant i0 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (FunctionDef &update:0 (arguments nil (list (arg &L:1 None None) (arg &C:1 None None) (arg &l:1 None None) (arg &r:1 None None) (arg &rt:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &l:1 Load) (list Eq) (list (Name &r:1 Load))) (/seq (AugAssign (Subscript (Name &tree:0 Load) (Name &rt:1 Load) Store) Add (Name &C:1 Load)) (Return None)) nil) (Assign (list (Name &mid:1 Store)) (BinOp (BinOp (Name &l:1 Load) Add (Name &r:1 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (Name &L:1 Load) (list LtE) (list (Name &mid:1 Load))) (/seq (Expr (Call (Name &update:0 Load) (list (Name &L:1 Load) (Name &C:1 Load) (Name &l:1 Load) (Name &mid:1 Load) (BinOp (Name &rt:1 Load) LShift (Constant i1 None))) nil))) (/seq (Expr (Call (Name &update:0 Load) (list (Name &L:1 Load) (Name &C:1 Load) (BinOp (Name &mid:1 Load) Add (Constant i1 None)) (Name &r:1 Load) (BinOp (BinOp (Name &rt:1 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))) nil)))) (fn_3 (Name &tree:0 Load) &rt:1)) nil None None) (FunctionDef &query:0 (arguments nil (list (arg &s:2 None None) (arg &l:2 None None) (arg &r:2 None None) (arg &rt:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &l:2 Load) (list Eq) (list (Name &r:2 Load))) (/seq (Return (Name &l:2 Load))) nil) (Assign (list (Name &mid:2 Store)) (BinOp (BinOp (Name &l:2 Load) Add (Name &r:2 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (Subscript (Name &tree:0 Load) (BinOp (Name &rt:2 Load) LShift (Constant i1 None)) Load) (list Gt) (list (Name &s:2 Load))) (/seq (Return (Call (Name &query:0 Load) (list (Name &s:2 Load) (Name &l:2 Load) (Name &mid:2 Load) (BinOp (Name &rt:2 Load) LShift (Constant i1 None))) nil))) (/seq (Return (Call (Name &query:0 Load) (list (BinOp (Name &s:2 Load) Sub (Subscript (Name &tree:0 Load) (BinOp (Name &rt:2 Load) LShift (Constant i1 None)) Load)) (BinOp (Name &mid:2 Load) Add (Constant i1 None)) (Name &r:2 Load) (BinOp (BinOp (Name &rt:2 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))) nil))))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Name &tree:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i800005 None)) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Name &update:0 Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) (Constant i1 None) (Name &n:0 Load) (Constant i1 None)) nil))) nil None) (Assign (list (Name &b:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i200005 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load) (Constant i0 None) (UnaryOp USub (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Store)) (Call (Name &query:0 Load) (list (Subscript (Name &a:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load) (Constant i1 None) (Name &n:0 Load) (Constant i1 None)) nil) None) (Expr (Call (Name &update:0 Load) (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Subscript (Name &b:0 Load) (Name &i:0 Load) Load)) (Constant i1 None) (Name &n:0 Load) (Constant i1 None)) nil))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name g_stdout Load) s_write Load) (list (BinOp (Constant s-WzM3LCAxMDAsIDMyXQ== None) Mod (Subscript (Name &b:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load))) nil))) nil None)) nil)) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (ClassDef &Tree:0 (list (Name g_object Load)) nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_tree Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Constant i4 None) Mult (Name &n:2 Load)) Add (Constant i10 None))) None)) nil None None) (FunctionDef &update:1 (arguments nil (list (arg &self:3 None None) (arg &L:3 None None) (arg &C:3 None None) (arg &l:3 None None) (arg &r:3 None None) (arg &rt:3 None None)) None nil nil None nil) (/seq (If (Compare (Name &l:3 Load) (list Eq) (list (Name &r:3 Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:3 Load) s_tree Load) (Name &rt:3 Load) Store) Add (Name &C:3 Load)) (Return None)) nil) (Assign (list (Name &mid:3 Store)) (BinOp (BinOp (Name &l:3 Load) Add (Name &r:3 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (Name &L:3 Load) (list LtE) (list (Name &mid:3 Load))) (/seq (Expr (Call (Attribute (Name &self:3 Load) s_update Load) (list (Name &L:3 Load) (Name &C:3 Load) (Name &l:3 Load) (Name &mid:3 Load) (BinOp (Name &rt:3 Load) LShift (Constant i1 None))) nil))) (/seq (Expr (Call (Attribute (Name &self:3 Load) s_update Load) (list (Name &L:3 Load) (Name &C:3 Load) (BinOp (Name &mid:3 Load) Add (Constant i1 None)) (Name &r:3 Load) (BinOp (BinOp (Name &rt:3 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))) nil)))) (fn_3 (Attribute (Name &self:3 Load) s_tree Load) &rt:3)) nil None None) (FunctionDef &query:1 (arguments nil (list (arg &self:4 None None) (arg &s:4 None None) (arg &l:4 None None) (arg &r:4 None None) (arg &rt:4 None None)) None nil nil None nil) (/seq (If (Compare (Name &l:4 Load) (list Eq) (list (Name &r:4 Load))) (/seq (Return (Name &l:4 Load))) nil) (Assign (list (Name &mid:4 Store)) (BinOp (BinOp (Name &l:4 Load) Add (Name &r:4 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (Subscript (Attribute (Name &self:4 Load) s_tree Load) (BinOp (Name &rt:4 Load) LShift (Constant i1 None)) Load) (list Gt) (list (Name &s:4 Load))) (/seq (Return (Call (Attribute (Name &self:4 Load) s_query Load) (list (Name &s:4 Load) (Name &l:4 Load) (Name &mid:4 Load) (BinOp (Name &rt:4 Load) LShift (Constant i1 None))) nil))) (/seq (Return (Call (Attribute (Name &self:4 Load) s_query Load) (list (BinOp (Name &s:4 Load) Sub (Subscript (Attribute (Name &self:4 Load) s_tree Load) (BinOp (Name &rt:4 Load) LShift (Constant i1 None)) Load)) (BinOp (Name &mid:4 Load) Add (Constant i1 None)) (Name &r:4 Load) (BinOp (BinOp (Name &rt:4 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))) nil))))) nil None None)) nil) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &b:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i10 None))) None) (Assign (list (Name &seg:0 Store)) (Call (Name &Tree:0 Load) (list (Name &n:0 Load)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &seg:0 Load) s_update Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) (Constant i1 None) (Name &n:0 Load) (Constant i1 None)) nil))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load) (Constant i0 None) (UnaryOp USub (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Store)) (Call (Attribute (Name &seg:0 Load) s_query Load) (list (Subscript (Name &a:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load) (Constant i1 None) (Name &n:0 Load) (Constant i1 None)) nil) None) (Expr (Call (Attribute (Name &seg:0 Load) s_update Load) (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Subscript (Name &b:0 Load) (Name &i:0 Load) Load)) (Constant i1 None) (Name &n:0 Load) (Constant i1 None)) nil))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name g_stdout Load) s_write Load) (list (BinOp (Constant s-WzM3LCAxMDAsIDMyXQ== None) Mod (Subscript (Name &b:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load))) nil))) nil None)) nil)) nil)",
            "(Module (/seq (ClassDef &DualBIT:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Name &n:2 Load) None) (Assign (list (Attribute (Name &self:2 Load) s_bit Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:2 Load) Add (Constant i1 None))) None)) nil None None) (FunctionDef &get:1 (arguments nil (list (arg &self:3 None None) (arg &i:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwNSwgMzAwNTgsIDMwNDQ2LCAxMjM5OCwgMzUyMDEsIDMyMDMyLCAxMjQzNCwgMjE0NjIsIDI0NDcxXQ== None)) (Assign (list (Name &i:3 Store)) (BinOp (Name &i:3 Load) Add (Constant i1 None)) None) (Assign (list (Name &s:3 Store)) (Constant i0 None) None) (While (Compare (Name &i:3 Load) (list LtE) (list (Attribute (Name &self:3 Load) s_n Load))) (/seq (AugAssign (Name &s:3 Store) Add (Subscript (Attribute (Name &self:3 Load) s_bit Load) (Name &i:3 Load) Load)) (AugAssign (Name &i:3 Store) Add (BinOp (Name &i:3 Load) BitAnd (UnaryOp USub (Name &i:3 Load))))) nil) (Return (Name &s:3 Load))) nil None None) (FunctionDef &_add:1 (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &x:4 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:4 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Subscript (Attribute (Name &self:4 Load) s_bit Load) (Name &i:4 Load) Store) Add (Name &x:4 Load)) (AugAssign (Name &i:4 Store) Sub (BinOp (Name &i:4 Load) BitAnd (UnaryOp USub (Name &i:4 Load))))) nil)) nil None None) (FunctionDef &add:1 (arguments nil (list (arg &self:5 None None) (arg &i:5 None None) (arg &j:5 None None) (arg &x:5 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzkxLCAxMDUsIDQ0LCAzMiwgMTA2LCA0MSwgMTIzOTgsIDM1MjAxLCAzMjAzMiwgMTIzOTUsIDEyMCwgMTI0MzQsIDIxMTUyLCAzMTYzOSwgMTIzNzcsIDEyNDI3XQ== None)) (Expr (Call (Attribute (Name &self:5 Load) s__add Load) (list (Name &j:5 Load) (Name &x:5 Load)) nil)) (Expr (Call (Attribute (Name &self:5 Load) s__add Load) (list (Name &i:5 Load) (UnaryOp USub (Name &x:5 Load))) nil))) nil None None)) nil) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &bit:0 Store)) (Call (Name &DualBIT:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i3 None))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Attribute (Name &bit:0 Load) s_add Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)) (BinOp (Name &n:0 Load) Add (Constant i1 None)) (Name &i:0 Load)) nil))) nil None) (Assign (list (Name &li:0 Store)) (List nil Load) None) (Assign (list (Name &flag:0 Store)) (Constant False None) None) (While (Constant True None) (/seq (If (UnaryOp Not (Name &a:0 Load)) (/seq Break) nil) (Assign (list (Name &ok:0 Store)) (BinOp (Name &n:0 Load) Add (Constant i1 None)) None) (Assign (list (Name &ng:0 Store)) (Constant i0 None) None) (Assign (list (Name &num:0 Store)) (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Load) None) (If (BoolOp And (list (Compare (Name &num:0 Load) (list Eq) (list (Constant i0 None))) (UnaryOp Not (Name &flag:0 Load)))) (/seq (Assign (list (Name &flag:0 Store)) (Constant True None) None) (Expr (Call (Attribute (Name &bit:0 Load) s_add Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i2 None)) (UnaryOp USub (Constant i1 None))) nil)) (Expr (Call (Attribute (Name &li:0 Load) s_append Load) (list (Constant i1 None)) nil)) (Delete (list (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Del))) Continue) nil) (While (Compare (Call (Name g_abs Load) (list (BinOp (Name &ok:0 Load) Sub (Name &ng:0 Load))) nil) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &mid:0 Store)) (BinOp (BinOp (Name &ok:0 Load) Add (Name &ng:0 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (Call (Attribute (Name &bit:0 Load) s_get Load) (list (Name &mid:0 Load)) nil) (list Gt) (list (Name &num:0 Load))) (/seq (Assign (list (Name &ok:0 Store)) (Name &mid:0 Load) None)) (/seq (Assign (list (Name &ng:0 Store)) (Name &mid:0 Load) None)))) nil) (Assign (list (Name &tmp:0 Store)) (BinOp (Name &ok:0 Load) Sub (Constant i1 None)) None) (Expr (Call (Attribute (Name &bit:0 Load) s_add Load) (list (Name &ok:0 Load) (BinOp (Name &n:0 Load) Add (Constant i2 None)) (UnaryOp USub (Name &tmp:0 Load))) nil)) (Expr (Call (Attribute (Name &li:0 Load) s_append Load) (list (Name &tmp:0 Load)) nil)) (Delete (list (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Del)))) nil) (Expr (Call (Name g_print Load) (list (Starred (Subscript (Name &li:0 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load) Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (ImportFrom s_collections (list (alias g_deque None)) i0) (Import (list (alias g_math None))) (Import (list (alias g_copy None))) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &arr:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:5 Load)) nil) (list (comprehension (Name &x:5 Store) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &bit:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None) (Assign (list (Name &series:0 Store)) (ListComp (Name &x:1 Load) (list (comprehension (Name &x:1 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) nil i0))) None) (FunctionDef &lowbit:0 (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (/seq (Return (BinOp (Name &x:2 Load) BitAnd (UnaryOp USub (Name &x:2 Load))))) nil None None) (FunctionDef &update:0 (arguments nil (list (arg &idx:3 None None) (arg &delta:3 None None)) None nil nil None nil) (/seq (While (Compare (Name &idx:3 Load) (list Lt) (list (Name &N:0 Load))) (/seq (AugAssign (Subscript (Name &bit:0 Load) (Name &idx:3 Load) Store) Add (Name &delta:3 Load)) (AugAssign (Name &idx:3 Store) Add (Call (Name &lowbit:0 Load) (list (Name &idx:3 Load)) nil))) nil)) nil None None) (FunctionDef &query:0 (arguments nil (list (arg &x:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:4 Store)) (Constant i0 None) None) (While (Compare (Name &x:4 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:4 Store) Add (Subscript (Name &bit:0 Load) (Name &x:4 Load) Load)) (AugAssign (Name &x:4 Store) Sub (Call (Name &lowbit:0 Load) (list (Name &x:4 Load)) nil))) nil) (Return (Name &s:4 Load))) nil None None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) (/seq (AugAssign (Subscript (Name &bit:0 Load) (Name &i:0 Load) Store) Add (Subscript (Name &series:0 Load) (Name &i:0 Load) Load)) (Assign (list (Name &y:0 Store)) (BinOp (Name &i:0 Load) Add (Call (Name &lowbit:0 Load) (list (Name &i:0 Load)) nil)) None) (If (Compare (Name &y:0 Load) (list Lt) (list (Name &N:0 Load))) (/seq (AugAssign (Subscript (Name &series:0 Load) (Name &y:0 Load) Store) Add (Subscript (Name &series:0 Load) (Name &i:0 Load) Load))) nil)) nil None) (Assign (list (Name &visited:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None) (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None) (For (Name &i:0 Store) (fn_1 (Name &N:0 Load)) (/seq (Assign (list (Name &left:0 Store)) (Constant i0 None) None) (Assign (list (Name &right:0 Store)) (BinOp (Name &N:0 Load) Sub (Constant i1 None)) None) (Assign (list (Name &target:0 Store)) (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) None) (While (Compare (Name &left:0 Load) (list LtE) (list (Name &right:0 Load))) (/seq (Assign (list (Name &mid:0 Store)) (BinOp (BinOp (Name &left:0 Load) Add (Name &right:0 Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &q:0 Store)) (Call (Name &query:0 Load) (list (Name &mid:0 Load)) nil) None) (If (Compare (Name &q:0 Load) (list Lt) (list (Name &target:0 Load))) (/seq (Assign (list (Name &left:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None)) (/seq (If (Compare (Name &q:0 Load) (list Gt) (list (Name &target:0 Load))) (/seq (Assign (list (Name &right:0 Store)) (BinOp (Name &mid:0 Load) Sub (Constant i1 None)) None)) (/seq (If (Compare (Subscript (Name &visited:0 Load) (Name &mid:0 Load) Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &left:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Subscript (Name &visited:0 Load) (Name &mid:0 Load) Store)) (Constant i1 None) None) (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None) Break))))))) nil) (If (Compare (BinOp (Name &mid:0 Load) Add (Constant i1 None)) (list Lt) (list (Name &N:0 Load))) (/seq (Expr (Call (Name &update:0 Load) (list (BinOp (Name &mid:0 Load) Add (Constant i1 None)) (BinOp (UnaryOp USub (Name &mid:0 Load)) Sub (Constant i1 None))) nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))) nil)"
        ]
    }
]
