[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "match_sequences": true,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_choicevar": -1.01,
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                0,
                2,
                "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name %2 Load) FloorDiv (Name %1 Load)) Add (Constant i1 None)) Mult (Name %1 Load)))) nil)))",
                "seqS",
                [],
                [
                    "Name",
                    "Name"
                ]
            ],
            [
                1,
                4,
                "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content #0)) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %3 Store)) (_starred_content (Name %4 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) ?0) (/seq) None)",
                "S",
                [
                    "E"
                ],
                [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ]
            ],
            [
                0,
                0,
                "(Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)",
                "E",
                [],
                []
            ]
        ],
        "programs": [
            "(Module (/seq (Assign (list (Name &n:0 Store)) (fn_3) None) (Assign (list (Name &A:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &A:0 Store)) (BinOp (Name &A:0 Load) Add (List (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) Load)) None)) (/seq) None) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (If (BoolOp Or (list (Compare (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) (list Lt) (list (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))) nil))) (Compare (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) (list Gt) (list (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) Mult (BinOp (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil) FloorDiv (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil)) Add (Constant i1 None))))) nil))))) (/seq) None)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (fn_2 (fn_3) &_:0 &l:0 &r:0 &d:0 (/choiceseq (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (Compare (Name &r:0 Load) (list Lt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (Compare (Name &r:0 Load) (list Eq) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &d:0 Load) Mult (Constant i2 None)))) nil))) (/seq (If (Compare (BinOp (Name &r:0 Load) Mod (Name &d:0 Load)) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (Name &r:0 Load) Div (Name &d:0 Load)))) nil) Mult (Name &d:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &r:0 Load) Add (Name &d:0 Load)))) nil))))))))))))) nil)",
            "(Module (/seq (fn_2 (fn_3) &k:0 &l:0 &r:0 &d:0 (/choiceseq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i1 None))) (/seq (If (Compare (Name &l:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &r:0 Load) Add (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))))) (/seq (If (Compare (Name &l:0 Load) (list GtE) (list (Name &d:0 Load))) (/seq (If (Compare (BinOp (Name &l:0 Load) Mod (Name &d:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &l:0 Load) FloorDiv (Name &d:0 Load)) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (fn_1 &d:0 &r:0))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))))) (fn_1 &d:0 &r:0))))))) nil)",
            "(Module (/seq (Assign (list (Name &t:0 Store)) (fn_3) None) (fn_2 (Name &t:0 Load) &i:0 &l:0 &r:0 &d:0 (/choiceseq (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) FloorDiv (Name &d:0 Load)) Mult (Name &d:0 Load)))) nil))))))) nil)",
            "(Module (/seq (FunctionDef &func:0 (arguments nil (list (arg &l:1 None None) (arg &r:1 None None) (arg &d:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &l:1 Load) (list LtE) (list (Name &d:1 Load))) (fn_1 &d:1 &r:1) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:1 Load))) nil))))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &count:2 Store)) (fn_3) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &count:2 Load))) nil) (/seq (Assign (list (Name &arr:2 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Expr (Call (Name &func:0 Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i0 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i1 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i2 None)) Load))) nil))) nil))) (/seq) None)) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
            "(Module (/seq (Assign (list (Name &q:0 Store)) (fn_3) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil) (/seq (Assign (list (Name &inputs:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &r:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Name &d:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i2 None)) Load))) nil) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &d:0 Load) Mult (BinOp (Name &x:0 Load) Add (Constant i1 None))))) nil))))) (/seq) None)) nil)",
            "(Module (/seq (Assign (list (Name &n:0 Store)) (fn_3) None) (fn_2 (Name &n:0 Load) &i:0 &a:0 &b:0 &c:0 (/choiceseq (If (Compare (Name &c:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq (If (Compare (Name &c:0 Load) (list Lt) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (fn_1 &c:0 &b:0))))))) nil)",
            "(Module (/seq (Assign (list (Name &n:0 Store)) (fn_3) None) (fn_2 (Name &n:0 Load) &i:0 &l:0 &r:0 &d:0 (/choiceseq (Expr (Constant s-Wzk3LCAzMiwgNjEsIDMyLCAxMDgsIDMyLCA0NywgNDcsIDMyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTgsIDMyLCA2MSwgMzIsIDExNCwgMzIsIDQ3LCA0NywgMzIsIDEwMCwgMTAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYxLCAzMiwgOTcsIDQyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA1MCwgMzIsIDYxLCAzMiwgOTgsIDQyLCAxMDAsIDEwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYwLCAzMiwgMTA4LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDMzLCA2MSwgMzIsIDQ4LCA1OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDQ5LCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDUsIDEwMiwgMzIsIDk3LCAxMTAsIDExNSwgNTAsIDMyLCA2MiwgMzIsIDExNCwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMTIsIDExNCwgMTA1LCAxMTAsIDExNiwgNDAsIDk3LCAxMTAsIDExNSwgNTAsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDUwLCA0MywgMTAwLCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMl0= None)) (If (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (fn_1 &d:0 &r:0))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &q:0 Store)) (fn_3) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (Name &d:0 Load) None)) (/seq (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) Sub (BinOp (Name &r:0 Load) Mod (Name &d:0 Load))) None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq) None)) nil)",
            "(Module (/seq (fn_2 (fn_3) &u:0 &l:0 &r:0 &d:0 (/choiceseq (If (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (BoolOp And (list (Compare (Name &d:0 Load) (list GtE) (list (Name &l:0 Load))) (Compare (Name &d:0 Load) (list LtE) (list (Name &r:0 Load))))) (fn_1 &d:0 &r:0) (/seq (If (Compare (Name &d:0 Load) (list Gt) (list (Name &r:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq))))))))) nil)"
        ]
    },
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "match_sequences": true,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_choicevar": -1.01,
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json",
            "dfa_metavariable_allow_anything": true,
            "dfa_valid_root_states": "any"
        },
        "abstractions": [
            [
                0,
                2,
                "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name %2 Load) FloorDiv (Name %1 Load)) Add (Constant i1 None)) Mult (Name %1 Load)))) nil)))",
                "seqS",
                [],
                [
                    "Name",
                    "Name"
                ]
            ],
            [
                1,
                4,
                "(For (Name %1 Store) (Call (Name g_range Load) #0 nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %3 Store)) (_starred_content (Name %4 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) ?0) (/seq) None)",
                "S",
                [
                    "[StarredRoot]"
                ],
                [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ]
            ],
            [
                0,
                0,
                "(Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)",
                "E",
                [],
                []
            ]
        ],
        "programs": [
            "(Module (/seq (Assign (list (Name &n:0 Store)) (fn_3) None) (Assign (list (Name &A:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &A:0 Store)) (BinOp (Name &A:0 Load) Add (List (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) Load)) None)) (/seq) None) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (If (BoolOp Or (list (Compare (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) (list Lt) (list (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))) nil))) (Compare (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) (list Gt) (list (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) Mult (BinOp (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil) FloorDiv (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil)) Add (Constant i1 None))))) nil))))) (/seq) None)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (fn_2 (list (_starred_content (fn_3))) &_:0 &l:0 &r:0 &d:0 (/choiceseq (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (Compare (Name &r:0 Load) (list Lt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (Compare (Name &r:0 Load) (list Eq) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &d:0 Load) Mult (Constant i2 None)))) nil))) (/seq (If (Compare (BinOp (Name &r:0 Load) Mod (Name &d:0 Load)) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (Name &r:0 Load) Div (Name &d:0 Load)))) nil) Mult (Name &d:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &r:0 Load) Add (Name &d:0 Load)))) nil))))))))))))) nil)",
            "(Module (/seq (fn_2 (list (_starred_content (fn_3))) &k:0 &l:0 &r:0 &d:0 (/choiceseq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i1 None))) (/seq (If (Compare (Name &l:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &r:0 Load) Add (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))))) (/seq (If (Compare (Name &l:0 Load) (list GtE) (list (Name &d:0 Load))) (/seq (If (Compare (BinOp (Name &l:0 Load) Mod (Name &d:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &l:0 Load) FloorDiv (Name &d:0 Load)) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (fn_1 &d:0 &r:0))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))))) (fn_1 &d:0 &r:0))))))) nil)",
            "(Module (/seq (Assign (list (Name &t:0 Store)) (fn_3) None) (fn_2 (list (_starred_content (Name &t:0 Load))) &i:0 &l:0 &r:0 &d:0 (/choiceseq (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) FloorDiv (Name &d:0 Load)) Mult (Name &d:0 Load)))) nil))))))) nil)",
            "(Module (/seq (FunctionDef &func:0 (arguments nil (list (arg &l:1 None None) (arg &r:1 None None) (arg &d:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &l:1 Load) (list LtE) (list (Name &d:1 Load))) (fn_1 &d:1 &r:1) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:1 Load))) nil))))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &count:2 Store)) (fn_3) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &count:2 Load))) nil) (/seq (Assign (list (Name &arr:2 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Expr (Call (Name &func:0 Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i0 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i1 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i2 None)) Load))) nil))) nil))) (/seq) None)) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
            "(Module (/seq (Assign (list (Name &q:0 Store)) (fn_3) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil) (/seq (Assign (list (Name &inputs:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &r:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Name &d:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i2 None)) Load))) nil) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &d:0 Load) Mult (BinOp (Name &x:0 Load) Add (Constant i1 None))))) nil))))) (/seq) None)) nil)",
            "(Module (/seq (Assign (list (Name &n:0 Store)) (fn_3) None) (fn_2 (list (_starred_content (Name &n:0 Load))) &i:0 &a:0 &b:0 &c:0 (/choiceseq (If (Compare (Name &c:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq (If (Compare (Name &c:0 Load) (list Lt) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (fn_1 &c:0 &b:0))))))) nil)",
            "(Module (/seq (Assign (list (Name &n:0 Store)) (fn_3) None) (fn_2 (list (_starred_content (Name &n:0 Load))) &i:0 &l:0 &r:0 &d:0 (/choiceseq (Expr (Constant s-Wzk3LCAzMiwgNjEsIDMyLCAxMDgsIDMyLCA0NywgNDcsIDMyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTgsIDMyLCA2MSwgMzIsIDExNCwgMzIsIDQ3LCA0NywgMzIsIDEwMCwgMTAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYxLCAzMiwgOTcsIDQyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA1MCwgMzIsIDYxLCAzMiwgOTgsIDQyLCAxMDAsIDEwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYwLCAzMiwgMTA4LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDMzLCA2MSwgMzIsIDQ4LCA1OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDQ5LCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDUsIDEwMiwgMzIsIDk3LCAxMTAsIDExNSwgNTAsIDMyLCA2MiwgMzIsIDExNCwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMTIsIDExNCwgMTA1LCAxMTAsIDExNiwgNDAsIDk3LCAxMTAsIDExNSwgNTAsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDUwLCA0MywgMTAwLCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMl0= None)) (If (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (fn_1 &d:0 &r:0))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &q:0 Store)) (fn_3) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (Name &d:0 Load) None)) (/seq (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) Sub (BinOp (Name &r:0 Load) Mod (Name &d:0 Load))) None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq) None)) nil)",
            "(Module (/seq (fn_2 (list (_starred_content (fn_3))) &u:0 &l:0 &r:0 &d:0 (/choiceseq (If (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (BoolOp And (list (Compare (Name &d:0 Load) (list GtE) (list (Name &l:0 Load))) (Compare (Name &d:0 Load) (list LtE) (list (Name &r:0 Load))))) (fn_1 &d:0 &r:0) (/seq (If (Compare (Name &d:0 Load) (list Gt) (list (Name &r:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq))))))))) nil)"
        ]
    }
]
