[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                1,
                0,
                "(Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call #0 nil nil) s_split Load) nil nil)) nil)) nil)",
                "E",
                [
                    "E"
                ],
                []
            ],
            [
                0,
                1,
                "(AugAssign (Name %1 Store) Sub (BinOp (Name %1 Load) BitAnd (UnaryOp USub (Name %1 Load))))",
                "S",
                [],
                [
                    "X"
                ]
            ],
            [
                0,
                1,
                "(AugAssign (Name %1 Store) Add (BinOp (Name %1 Load) BitAnd (UnaryOp USub (Name %1 Load))))",
                "S",
                [],
                [
                    "X"
                ]
            ]
        ],
        "programs": [
            "(Module (/seq (Import (list (alias g_bisect None))) (FunctionDef &getsum:0 (arguments nil (list (arg &tree:1 None None) (arg &i:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:1 Store)) (Constant i0 None) None) (AugAssign (Name &i:1 Store) Add (Constant i1 None)) (While (Compare (Name &i:1 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:1 Store) Add (Subscript (Name &tree:1 Load) (Name &i:1 Load) Load)) (fn_2 &i:1)) nil) (Return (Name &s:1 Load))) nil None None) (FunctionDef &updatebit:0 (arguments nil (list (arg &tree:2 None None) (arg &n:2 None None) (arg &i:2 None None) (arg &v:2 None None)) None nil nil None nil) (/seq (AugAssign (Name &i:2 Store) Add (Constant i1 None)) (While (Compare (Name &i:2 Load) (list LtE) (list (Name &n:2 Load))) (/seq (AugAssign (Subscript (Name &tree:2 Load) (Name &i:2 Load) Store) Add (Name &v:2 Load)) (fn_3 &i:2)) nil)) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (fn_1 (Name g_input Load)) None) (Assign (list (Name &v:0 Store)) (fn_1 (Name g_input Load)) None) (Assign (list (Name &p:0 Store)) (ListComp (List (list (Subscript (Name &x:0 Load) (Name &i:3 Load) Load) (Subscript (Name &v:0 Load) (Name &i:3 Load) Load)) Load) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &x:0 Load)) nil)) nil) nil i0))) None) (Assign (list (Name &vs:0 Store)) (Call (Name g_sorted Load) (list (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Name &v:0 Load)) nil)) nil)) nil) None) (Assign (list (Name &p:0 Store)) (Call (Name g_sorted Load) (list (Name &p:0 Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &i:4 None None)) None nil nil None nil) (Subscript (Name &i:4 Load) (Constant i0 None) Load))))) None) (Assign (list (Name &l:0 Store)) (Call (Name g_len Load) (list (Name &vs:0 Load)) nil) None) (Assign (list (Name &cnt:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &l:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &xs:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &l:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &pnt:0 Store) (Name &p:0 Load) (/seq (Assign (list (Name &pos:0 Store)) (Call (Attribute (Name g_bisect Load) s_bisect_left Load) (list (Name &vs:0 Load) (Subscript (Name &pnt:0 Load) (Constant i1 None) Load)) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Call (Name &getsum:0 Load) (list (Name &cnt:0 Load) (Name &pos:0 Load)) nil) Mult (Subscript (Name &pnt:0 Load) (Constant i0 None) Load)) Sub (Call (Name &getsum:0 Load) (list (Name &xs:0 Load) (Name &pos:0 Load)) nil))) (Expr (Call (Name &updatebit:0 Load) (list (Name &cnt:0 Load) (Name &l:0 Load) (Name &pos:0 Load) (Constant i1 None)) nil)) (Expr (Call (Name &updatebit:0 Load) (list (Name &xs:0 Load) (Name &l:0 Load) (Name &pos:0 Load) (Subscript (Name &pnt:0 Load) (Constant i0 None) Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_io None))) (Import (list (alias g_os None))) (ImportFrom s_collections (list (alias g_Counter None) (alias g_defaultdict None) (alias g_deque None) (alias g_namedtuple None)) i0) (ClassDef &SegmentTree:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:4 None None) (arg &data:4 None None) (arg &default:4 None None) (arg &func:4 None None)) None nil nil None (list (Constant i0 None) (Name g_max Load))) (/seq (Expr (Constant s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd None)) (Assign (list (Attribute (Name &self:4 Load) s__default Store)) (Name &default:4 Load) None) (Assign (list (Attribute (Name &self:4 Load) s__func Store)) (Name &func:4 Load) None) (Assign (list (Attribute (Name &self:4 Load) s__len Store)) (Call (Name g_len Load) (list (Name &data:4 Load)) nil) None) (Assign (list (Attribute (Name &self:4 Load) s__size Store) (Name &_size:4 Store)) (BinOp (Constant i1 None) LShift (Call (Attribute (BinOp (Attribute (Name &self:4 Load) s__len Load) Sub (Constant i1 None)) s_bit_length Load) nil nil)) None) (Assign (list (Attribute (Name &self:4 Load) s_data Store)) (BinOp (List (list (Name &default:4 Load)) Load) Mult (BinOp (Constant i2 None) Mult (Name &_size:4 Load))) None) (Assign (list (Subscript (Attribute (Name &self:4 Load) s_data Load) (Slice (Name &_size:4 Load) (BinOp (Name &_size:4 Load) Add (Attribute (Name &self:4 Load) s__len Load)) None) Store)) (Name &data:4 Load) None) (For (Name &i:4 Store) (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:4 Load)) nil)) nil) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s_data Load) (Name &i:4 Load) Store)) (Call (Name &func:4 Load) (list (Subscript (Attribute (Name &self:4 Load) s_data Load) (BinOp (Name &i:4 Load) Add (Name &i:4 Load)) Load) (Subscript (Attribute (Name &self:4 Load) s_data Load) (BinOp (BinOp (Name &i:4 Load) Add (Name &i:4 Load)) Add (Constant i1 None)) Load)) nil) None)) nil None)) nil None None) (FunctionDef &__delitem__:1 (arguments nil (list (arg &self:5 None None) (arg &idx:5 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &self:5 Load) (Name &idx:5 Load) Store)) (Attribute (Name &self:5 Load) s__default Load) None)) nil None None) (FunctionDef &__getitem__:1 (arguments nil (list (arg &self:6 None None) (arg &idx:6 None None)) None nil nil None nil) (/seq (Return (Subscript (Attribute (Name &self:6 Load) s_data Load) (BinOp (Name &idx:6 Load) Add (Attribute (Name &self:6 Load) s__size Load)) Load))) nil None None) (FunctionDef &__setitem__:1 (arguments nil (list (arg &self:7 None None) (arg &idx:7 None None) (arg &value:7 None None)) None nil nil None nil) (/seq (AugAssign (Name &idx:7 Store) Add (Attribute (Name &self:7 Load) s__size Load)) (Assign (list (Subscript (Attribute (Name &self:7 Load) s_data Load) (Name &idx:7 Load) Store)) (Name &value:7 Load) None) (AugAssign (Name &idx:7 Store) RShift (Constant i1 None)) (While (Name &idx:7 Load) (/seq (Assign (list (Subscript (Attribute (Name &self:7 Load) s_data Load) (Name &idx:7 Load) Store)) (Call (Attribute (Name &self:7 Load) s__func Load) (list (Subscript (Attribute (Name &self:7 Load) s_data Load) (BinOp (Constant i2 None) Mult (Name &idx:7 Load)) Load) (Subscript (Attribute (Name &self:7 Load) s_data Load) (BinOp (BinOp (Constant i2 None) Mult (Name &idx:7 Load)) Add (Constant i1 None)) Load)) nil) None) (AugAssign (Name &idx:7 Store) RShift (Constant i1 None))) nil)) nil None None) (FunctionDef &__len__:1 (arguments nil (list (arg &self:8 None None)) None nil nil None nil) (/seq (Return (Attribute (Name &self:8 Load) s__len Load))) nil None None) (FunctionDef &query:1 (arguments nil (list (arg &self:9 None None) (arg &start:9 None None) (arg &stop:9 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwMiwgMTE3LCAxMTAsIDk5LCAzMiwgMTExLCAxMDIsIDMyLCAxMDAsIDk3LCAxMTYsIDk3LCA5MSwgMTE1LCAxMTYsIDk3LCAxMTQsIDExNiwgNDQsIDMyLCAxMTUsIDExNiwgMTExLCAxMTIsIDQxXQ== None)) (AugAssign (Name &start:9 Store) Add (Attribute (Name &self:9 Load) s__size Load)) (AugAssign (Name &stop:9 Store) Add (Attribute (Name &self:9 Load) s__size Load)) (Assign (list (Name &res:9 Store)) (Attribute (Name &self:9 Load) s__default Load) None) (While (Compare (Name &start:9 Load) (list Lt) (list (Name &stop:9 Load))) (/seq (If (BinOp (Name &start:9 Load) BitAnd (Constant i1 None)) (/seq (Assign (list (Name &res:9 Store)) (Call (Attribute (Name &self:9 Load) s__func Load) (list (Name &res:9 Load) (Subscript (Attribute (Name &self:9 Load) s_data Load) (Name &start:9 Load) Load)) nil) None) (AugAssign (Name &start:9 Store) Add (Constant i1 None))) nil) (If (BinOp (Name &stop:9 Load) BitAnd (Constant i1 None)) (/seq (AugAssign (Name &stop:9 Store) Sub (Constant i1 None)) (Assign (list (Name &res:9 Store)) (Call (Attribute (Name &self:9 Load) s__func Load) (list (Name &res:9 Load) (Subscript (Attribute (Name &self:9 Load) s_data Load) (Name &stop:9 Load) Load)) nil) None)) nil) (AugAssign (Name &start:9 Store) RShift (Constant i1 None)) (AugAssign (Name &stop:9 Store) RShift (Constant i1 None))) nil) (Return (Name &res:9 Load))) nil None None) (FunctionDef &__repr__:1 (arguments nil (list (arg &self:10 None None)) None nil nil None nil) (/seq (Return (Call (Attribute (Constant s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd None) s_format Load) (list (Attribute (Name &self:10 Load) s_data Load)) nil))) nil None None)) nil) (FunctionDef &solve:0 (arguments nil (list (arg &N:2 None None) (arg &X:2 None None) (arg &V:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &indices:2 Store)) (Call (Name g_sorted Load) (list (Call (Name g_range Load) (list (Name &N:2 Load)) nil)) (list (keyword s_key (Lambda (arguments nil (list (arg &i:25 None None)) None nil nil None nil) (Subscript (Name &X:2 Load) (Name &i:25 Load) Load))))) None) (Assign (list (Name &X:2 Store)) (ListComp (Subscript (Name &X:2 Load) (Name &i:12 Load) Load) (list (comprehension (Name &i:12 Store) (Name &indices:2 Load) nil i0))) None) (Assign (list (Name &V:2 Store)) (ListComp (Subscript (Name &V:2 Load) (Name &i:13 Load) Load) (list (comprehension (Name &i:13 Store) (Name &indices:2 Load) nil i0))) None) (Assign (list (Name &BIL:2 Store)) (BinOp (Constant i10 None) Pow (Constant i9 None)) None) (Assign (list (Name &vIndices:2 Store)) (Call (Name g_sorted Load) (list (Call (Name g_range Load) (list (Name &N:2 Load)) nil)) (list (keyword s_key (Lambda (arguments nil (list (arg &i:26 None None)) None nil nil None nil) (BinOp (BinOp (Subscript (Name &V:2 Load) (Name &i:26 Load) Load) Mult (Name &BIL:2 Load)) Add (Subscript (Name &X:2 Load) (Name &i:26 Load) Load)))))) None) (Assign (list (Name &indicesByV:2 Store)) (DictComp (Name &originalIndex:11 Load) (Name &sortedIndex:11 Load) (list (comprehension (Tuple (list (Name &sortedIndex:11 Store) (Name &originalIndex:11 Store)) Store) (Call (Name g_enumerate Load) (list (Name &vIndices:2 Load)) nil) nil i0))) None) (Assign (list (Name &segTreeTotal:2 Store)) (Call (Name &SegmentTree:0 Load) (list (ListComp (Constant i0 None) (list (comprehension (Name &i:19 Store) (Call (Name g_range Load) (list (Name &N:2 Load)) nil) nil i0))) (Constant i0 None) (Lambda (arguments nil (list (arg &a:20 None None) (arg &b:20 None None)) None nil nil None nil) (BinOp (Name &a:20 Load) Add (Name &b:20 Load)))) nil) None) (Assign (list (Name &segTreeCount:2 Store)) (Call (Name &SegmentTree:0 Load) (list (ListComp (Constant i0 None) (list (comprehension (Name &i:21 Store) (Call (Name g_range Load) (list (Name &N:2 Load)) nil) nil i0))) (Constant i0 None) (Lambda (arguments nil (list (arg &a:22 None None) (arg &b:22 None None)) None nil nil None nil) (BinOp (Name &a:22 Load) Add (Name &b:22 Load)))) nil) None) (Assign (list (Name &ans:2 Store)) (Constant i0 None) None) (For (Name &j:2 Store) (Call (Name g_range Load) (list (Name &N:2 Load)) nil) (/seq (Assign (list (Name &index:2 Store)) (Subscript (Name &indicesByV:2 Load) (Name &j:2 Load) Load) None) (Assign (list (Name &count:2 Store)) (Call (Attribute (Name &segTreeCount:2 Load) s_query Load) (list (Constant i0 None) (Name &index:2 Load)) nil) None) (Assign (list (Name &totalXi:2 Store)) (Call (Attribute (Name &segTreeTotal:2 Load) s_query Load) (list (Constant i0 None) (Name &index:2 Load)) nil) None) (AugAssign (Name &ans:2 Store) Add (BinOp (BinOp (Subscript (Name &X:2 Load) (Name &j:2 Load) Load) Mult (Name &count:2 Load)) Sub (Name &totalXi:2 Load))) (Assign (list (Subscript (Name &segTreeCount:2 Load) (Name &index:2 Load) Store)) (Constant i1 None) None) (Assign (list (Subscript (Name &segTreeTotal:2 Load) (Name &index:2 Load) Store)) (Subscript (Name &X:2 Load) (Name &j:2 Load) Load) None)) nil None) (Return (Name &ans:2 Load))) nil None None) (FunctionDef &solveBrute:0 (arguments nil (list (arg &N:3 None None) (arg &X:3 None None) (arg &V:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &indices:3 Store)) (Call (Name g_sorted Load) (list (Call (Name g_range Load) (list (Name &N:3 Load)) nil)) (list (keyword s_key (Lambda (arguments nil (list (arg &i:27 None None)) None nil nil None nil) (Subscript (Name &X:3 Load) (Name &i:27 Load) Load))))) None) (Assign (list (Name &X:3 Store)) (ListComp (Subscript (Name &X:3 Load) (Name &i:14 Load) Load) (list (comprehension (Name &i:14 Store) (Name &indices:3 Load) nil i0))) None) (Assign (list (Name &V:3 Store)) (ListComp (Subscript (Name &V:3 Load) (Name &i:15 Load) Load) (list (comprehension (Name &i:15 Store) (Name &indices:3 Load) nil i0))) None) (Assign (list (Name &ans:3 Store)) (Constant i0 None) None) (For (Name &j:3 Store) (Call (Name g_range Load) (list (Name &N:3 Load)) nil) (/seq (Assign (list (Name &xj:3 Store)) (Subscript (Name &X:3 Load) (Name &j:3 Load) Load) None) (Assign (list (Name &vj:3 Store)) (Subscript (Name &V:3 Load) (Name &j:3 Load) Load) None) (Assign (list (Name &total:3 Store)) (Constant i0 None) None) (Assign (list (Name &totalXi:3 Store)) (Constant i0 None) None) (Assign (list (Name &count:3 Store)) (Constant i0 None) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (Name &j:3 Load)) nil) (/seq (Assign (list (Name &xi:3 Store)) (Subscript (Name &X:3 Load) (Name &i:3 Load) Load) None) (Assign (list (Name &vi:3 Store)) (Subscript (Name &V:3 Load) (Name &i:3 Load) Load) None) (Assert (Compare (Name &xi:3 Load) (list LtE) (list (Name &xj:3 Load))) None) (If (Compare (Name &vi:3 Load) (list LtE) (list (Name &vj:3 Load))) (/seq (AugAssign (Name &total:3 Store) Add (BinOp (Name &xj:3 Load) Sub (Name &xi:3 Load))) (AugAssign (Name &totalXi:3 Store) Add (Name &xi:3 Load)) (AugAssign (Name &count:3 Store) Add (Constant i1 None))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Name &j:3 Load) (Subscript (Name &X:3 Load) (Name &j:3 Load) Load) (Name &count:3 Load) (Name &totalXi:3 Load)) nil)) (Assert (Compare (Name &total:3 Load) (list Eq) (list (BinOp (BinOp (Subscript (Name &X:3 Load) (Name &j:3 Load) Load) Mult (Name &count:3 Load)) Sub (Name &totalXi:3 Load)))) None) (AugAssign (Name &ans:3 Store) Add (Name &total:3 Load))) nil None) (Return (Name &ans:3 Load))) nil None None) (If (Constant False None) (/seq (Import (list (alias &random:0 None))) (Expr (Call (Attribute (Name &random:0 Load) s_seed Load) (list (Constant i0 None)) nil)) (Assign (list (Name &N:0 Store)) (Constant i200000 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None)) nil) (/seq (Assign (list (Name &X:0 Store)) (ListComp (Call (Attribute (Name &random:0 Load) s_randint Load) (list (Constant i0 None) (Constant i10 None)) nil) (list (comprehension (Name &i:23 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) nil i0))) None) (Assign (list (Name &V:0 Store)) (ListComp (Call (Attribute (Name &random:0 Load) s_randint Load) (list (Constant i0 None) (Constant i10 None)) nil) (list (comprehension (Name &i:24 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) nil i0))) None) (Assign (list (Name &ans:0 Store)) (Call (Name &solve:0 Load) (list (Name &N:0 Load) (Name &X:0 Load) (Name &V:0 Load)) nil) None)) nil None)) nil) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Name &input:0 Store)) (Attribute (Call (Attribute (Name g_io Load) s_BytesIO Load) (list (Call (Attribute (Name g_os Load) s_read Load) (list (Constant i0 None) (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil) s_st_size Load)) nil)) nil) s_readline Load) None) (Assign (list (Tuple (list (Name &N:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:16 Load)) nil) (list (comprehension (Name &x:16 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &X:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:17 Load)) nil) (list (comprehension (Name &x:17 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &V:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:18 Load)) nil) (list (comprehension (Name &x:18 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &ans:0 Store)) (Call (Name &solve:0 Load) (list (Name &N:0 Load) (Name &X:0 Load) (Name &V:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_sys None) (alias g_math None) (alias g_itertools None))) (ImportFrom s_collections (list (alias g_Counter None) (alias g_deque None) (alias g_defaultdict None)) i0) (ImportFrom s_bisect (list (alias g_bisect_left None) (alias g_bisect_right None)) i0) (ImportFrom s_heapq (list (alias g_heappop None) (alias g_heappush None) (alias g_heapify None) (alias g_nlargest None)) i0) (ImportFrom s_copy (list (alias g_deepcopy None)) i0) (Assign (list (Name &mod:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &INF:0 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None) (FunctionDef &inp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)) nil))) nil None None) (FunctionDef &inpl:0 (arguments nil nil None nil nil None nil) (/seq (Return (fn_1 (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load)))) nil None None) (FunctionDef &inpl_1:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Lambda (arguments nil (list (arg &x:11 None None)) None nil nil None nil) (BinOp (Call (Name g_int Load) (list (Name &x:11 Load)) nil) Sub (Constant i1 None))) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (FunctionDef &inps:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))) nil None None) (FunctionDef &inpsl:0 (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &tmp:2 Store)) (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) None) (Return (Call (Name g_list Load) (list (Subscript (Name &tmp:2 Load) (Slice None (Name &x:2 Load) None) Load)) nil))) nil None None) (FunctionDef &err:0 (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Name &x:3 Load)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil None None) (ClassDef &BIT:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:4 None None) (arg &n:4 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:4 Load) s_n Store)) (Name &n:4 Load) None) (Assign (list (Attribute (Name &self:4 Load) s_data Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:4 Load) Add (Constant i1 None))) None) (Assign (list (Attribute (Name &self:4 Load) s_el Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:4 Load) Add (Constant i1 None))) None)) nil None None) (FunctionDef &sum:1 (arguments nil (list (arg &self:5 None None) (arg &i:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:5 Store)) (Constant i0 None) None) (While (Compare (Name &i:5 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:5 Store) Add (Subscript (Attribute (Name &self:5 Load) s_data Load) (Name &i:5 Load) Load)) (fn_2 &i:5)) nil) (Return (Name &s:5 Load))) nil None None) (FunctionDef &add:1 (arguments nil (list (arg &self:6 None None) (arg &i:6 None None) (arg &x:6 None None)) None nil nil None nil) (/seq (AugAssign (Subscript (Attribute (Name &self:6 Load) s_el Load) (Name &i:6 Load) Store) Add (Name &x:6 Load)) (While (Compare (Name &i:6 Load) (list LtE) (list (Attribute (Name &self:6 Load) s_n Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:6 Load) s_data Load) (Name &i:6 Load) Store) Add (Name &x:6 Load)) (fn_3 &i:6)) nil)) nil None None) (FunctionDef &get:1 (arguments nil (list (arg &self:7 None None) (arg &i:7 None None) (arg &j:7 None None)) None nil nil None (list (Constant None None))) (/seq (If (Compare (Name &j:7 Load) (list Is) (list (Constant None None))) (/seq (Return (Subscript (Attribute (Name &self:7 Load) s_el Load) (Name &i:7 Load) Load))) nil) (Return (BinOp (Call (Attribute (Name &self:7 Load) s_sum Load) (list (Name &j:7 Load)) nil) Sub (Call (Attribute (Name &self:7 Load) s_sum Load) (list (Name &i:7 Load)) nil)))) nil None None)) nil) (Assign (list (Name &n:0 Store)) (Call (Name &inp:0 Load) nil nil) None) (Assign (list (Name &X:0 Store)) (Call (Name &inpl:0 Load) nil nil) None) (Assign (list (Name &V:0 Store)) (Call (Name &inpl:0 Load) nil nil) None) (Assign (list (Name &d:0 Store)) (Dict nil nil) None) (Assign (list (Name &dd:0 Store)) (Dict nil nil) None) (For (Tuple (list (Name &i:0 Store) (Name &x:0 Store)) Store) (Call (Name g_enumerate Load) (list (Call (Name g_sorted Load) (list (Name &X:0 Load)) nil)) nil) (/seq (Assign (list (Subscript (Name &d:0 Load) (Name &x:0 Load) Store)) (Name &i:0 Load) None) (Assign (list (Subscript (Name &dd:0 Load) (Name &i:0 Load) Store)) (Name &x:0 Load) None)) nil None) (For (Tuple (list (Name &i:0 Store) (Name &x:0 Store)) Store) (Call (Name g_enumerate Load) (list (Name &X:0 Load)) nil) (/seq (Assign (list (Subscript (Name &X:0 Load) (Name &i:0 Load) Store)) (Subscript (Name &d:0 Load) (Name &x:0 Load) Load) None)) nil None) (Assign (list (Name &xv:0 Store)) (ListComp (Tuple (list (Name &x:8 Load) (Name &v:8 Load)) Load) (list (comprehension (Tuple (list (Name &x:8 Store) (Name &v:8 Store)) Store) (Call (Name g_zip Load) (list (Name &X:0 Load) (Name &V:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &xv:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:9 None None)) None nil nil None nil) (Subscript (Name &x:9 Load) (Constant i0 None) Load))) (keyword s_reverse (Constant True None))))) (Expr (Call (Attribute (Name &xv:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:10 None None)) None nil nil None nil) (Subscript (Name &x:10 Load) (Constant i1 None) Load))) (keyword s_reverse (Constant True None))))) (Assign (list (Name &cnt_bit:0 Store)) (Call (Name &BIT:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i10 None))) nil) None) (Assign (list (Name &sum_bit:0 Store)) (Call (Name &BIT:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i10 None))) nil) None) (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (For (Tuple (list (Name &x:0 Store) (Name &_:0 Store)) Store) (Name &xv:0 Load) (/seq (AugAssign (Name &res:0 Store) Add (BinOp (Call (Attribute (Name &sum_bit:0 Load) s_get Load) (list (Name &x:0 Load) (BinOp (Name &n:0 Load) Add (Constant i5 None))) nil) Sub (BinOp (Call (Attribute (Name &cnt_bit:0 Load) s_get Load) (list (Name &x:0 Load) (BinOp (Name &n:0 Load) Add (Constant i5 None))) nil) Mult (Subscript (Name &dd:0 Load) (Name &x:0 Load) Load)))) (Expr (Call (Attribute (Name &sum_bit:0 Load) s_add Load) (list (BinOp (Name &x:0 Load) Add (Constant i1 None)) (Subscript (Name &dd:0 Load) (Name &x:0 Load) Load)) nil)) (Expr (Call (Attribute (Name &cnt_bit:0 Load) s_add Load) (list (BinOp (Name &x:0 Load) Add (Constant i1 None)) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (ImportFrom s_heapq (list (alias &heappush:0 None) (alias &heappop:0 None) (alias &heapify:0 None)) i0) (FunctionDef &query:0 (arguments nil (list (arg &f:1 None None) (arg &i:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &ret:1 Store)) (Constant i0 None) None) (While (Name &i:1 Load) (/seq (AugAssign (Name &ret:1 Store) Add (Subscript (Name &f:1 Load) (Name &i:1 Load) Load)) (fn_2 &i:1)) nil) (Return (Name &ret:1 Load))) nil None None) (FunctionDef &update:0 (arguments nil (list (arg &f:2 None None) (arg &i:2 None None) (arg &d:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (Name &f:2 Load)) nil) None) (While (Compare (Name &i:2 Load) (list Lt) (list (Name &n:2 Load))) (/seq (AugAssign (Subscript (Name &f:2 Load) (Name &i:2 Load) Store) Add (Name &d:2 Load)) (fn_3 &i:2)) nil)) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &v:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &a:0 Store)) (BinOp (List (list (Tuple nil Load)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Store)) (Tuple (list (Subscript (Name &x:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load) (Subscript (Name &v:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)) Load) None)) nil None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Assign (list (Name &f:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &f2:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Name &update:0 Load) (list (Name &f:0 Load) (Name &i:0 Load) (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)) nil)) (Expr (Call (Name &update:0 Load) (list (Name &f2:0 Load) (Name &i:0 Load) (Constant i1 None)) nil))) nil None) (Assign (list (Name &b:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Attribute (Name &b:0 Load) s_append Load) (list (Tuple (list (UnaryOp USub (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)) (UnaryOp USub (Name &i:0 Load))) Load)) nil))) nil None) (Expr (Call (Name &heapify:0 Load) (list (Name &b:0 Load)) nil)) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (While (Name &b:0 Load) (/seq (Assign (list (Tuple (list (Name &v:0 Store) (Name &i:0 Store)) Store)) (Call (Name &heappop:0 Load) (list (Name &b:0 Load)) nil) None) (Assign (list (Tuple (list (Name &v:0 Store) (Name &i:0 Store)) Store)) (Tuple (list (UnaryOp USub (Name &v:0 Load)) (UnaryOp USub (Name &i:0 Load))) Load) None) (Assign (list (Name &x:0 Store)) (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load) None) (If (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &sum:0 Store)) (Call (Name &query:0 Load) (list (Name &f:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None))) nil) None) (Assign (list (Name &cnt:0 Store)) (Call (Name &query:0 Load) (list (Name &f2:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None))) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &x:0 Load) Mult (Name &cnt:0 Load)) Sub (Name &sum:0 Load)))) nil) (Expr (Call (Name &update:0 Load) (list (Name &f:0 Load) (Name &i:0 Load) (UnaryOp USub (Name &x:0 Load))) nil)) (Expr (Call (Name &update:0 Load) (list (Name &f2:0 Load) (Name &i:0 Load) (UnaryOp USub (Constant i1 None))) nil))) nil) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (ImportFrom s_heapq (list (alias &heappush:0 None) (alias &heappop:0 None) (alias &heapify:0 None)) i0) (FunctionDef &query:0 (arguments nil (list (arg &f:1 None None) (arg &i:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &ret:1 Store)) (Constant i0 None) None) (While (Name &i:1 Load) (/seq (AugAssign (Name &ret:1 Store) Add (Subscript (Name &f:1 Load) (Name &i:1 Load) Load)) (fn_2 &i:1)) nil) (Return (Name &ret:1 Load))) nil None None) (FunctionDef &update:0 (arguments nil (list (arg &f:2 None None) (arg &i:2 None None) (arg &d:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (Name &f:2 Load)) nil) None) (While (Compare (Name &i:2 Load) (list Lt) (list (Name &n:2 Load))) (/seq (AugAssign (Subscript (Name &f:2 Load) (Name &i:2 Load) Store) Add (Name &d:2 Load)) (fn_3 &i:2)) nil)) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &X:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &V:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &r:0 Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:0 Load)) nil)) nil) None) (Expr (Call (Attribute (Name &r:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &i:3 None None)) None nil nil None nil) (Subscript (Name &X:0 Load) (Name &i:3 Load) Load)))))) (Assign (list (Name &f:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &f2:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &b:0 Store)) (List nil Load) None) (For (Tuple (list (Name &i:0 Store) (Name &k:0 Store)) Store) (Call (Name g_enumerate Load) (list (Name &r:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &b:0 Load) s_append Load) (list (Tuple (list (Subscript (Name &V:0 Load) (Name &k:0 Load) Load) (Name &i:0 Load)) Load)) nil))) nil None) (Expr (Call (Name &heapify:0 Load) (list (Name &b:0 Load)) nil)) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (While (Name &b:0 Load) (/seq (Assign (list (Tuple (list (Name &v:0 Store) (Name &i:0 Store)) Store)) (Call (Name &heappop:0 Load) (list (Name &b:0 Load)) nil) None) (Assign (list (Name &x:0 Store)) (Subscript (Name &X:0 Load) (Subscript (Name &r:0 Load) (Name &i:0 Load) Load) Load) None) (Assign (list (Name &sum:0 Store)) (Call (Name &query:0 Load) (list (Name &f:0 Load) (Name &i:0 Load)) nil) None) (Assign (list (Name &cnt:0 Store)) (Call (Name &query:0 Load) (list (Name &f2:0 Load) (Name &i:0 Load)) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &x:0 Load) Mult (Name &cnt:0 Load)) Sub (Name &sum:0 Load))) (Expr (Call (Name &update:0 Load) (list (Name &f:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) (Name &x:0 Load)) nil)) (Expr (Call (Name &update:0 Load) (list (Name &f2:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) (Constant i1 None)) nil))) nil) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None) (alias g_math None))) (Import (list (alias g_io None) (alias g_os None))) (ImportFrom s_collections (list (alias s_defaultdict g_dd) (alias g_deque None) (alias g_Counter None)) i0) (FunctionDef &data:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &mdata:0 (arguments nil nil None nil nil None nil) (/seq (Return (fn_1 (Name &data:0 Load)))) nil None None) (FunctionDef &outl:0 (arguments nil (list (arg &var:1 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) (list (BinOp (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &var:1 Load)) nil)) nil) Add (Constant s-WzEwXQ== None))) nil))) nil None None) (FunctionDef &out:0 (arguments nil (list (arg &var:2 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) (list (BinOp (Call (Name g_str Load) (list (Name &var:2 Load)) nil) Add (Constant s-WzEwXQ== None))) nil))) nil None None) (Assign (list (Name &mod:0 Store)) (BinOp (Call (Name g_int Load) (list (Constant f1000000000.0 None)) nil) Add (Constant i7 None)) None) (FunctionDef &update:0 (arguments nil (list (arg &BIT:3 None None) (arg &v:3 None None) (arg &w:3 None None)) None nil nil None nil) (/seq (While (Compare (Name &v:3 Load) (list LtE) (list (Name &n:0 Load))) (/seq (AugAssign (Subscript (Name &BIT:3 Load) (Name &v:3 Load) Store) Add (Name &w:3 Load)) (fn_3 &v:3)) nil)) nil None None) (FunctionDef &getvalue:0 (arguments nil (list (arg &BIT:4 None None) (arg &v:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &ANS:4 Store)) (Constant i0 None) None) (While (Compare (Name &v:4 Load) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Name &ANS:4 Store) Add (Subscript (Name &BIT:4 Load) (Name &v:4 Load) Load)) (fn_2 &v:4)) nil) (Return (Name &ANS:4 Load))) nil None None) (FunctionDef &bisect_on_BIT:0 (arguments nil (list (arg &BIT:5 None None) (arg &x:5 None None)) None nil nil None nil) (/seq (If (Compare (Name &x:5 Load) (list LtE) (list (Constant i0 None))) (/seq (Return (Constant i0 None))) nil) (Assign (list (Name &ANS:5 Store)) (Constant i0 None) None) (Assign (list (Name &h:5 Store)) (BinOp (Constant i1 None) LShift (BinOp (Name &n:0 Load) Sub (Constant i1 None))) None) (While (Compare (Name &h:5 Load) (list Gt) (list (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (BinOp (Name &ANS:5 Load) Add (Name &h:5 Load)) (list LtE) (list (Name &n:0 Load))) (Compare (Subscript (Name &BIT:5 Load) (BinOp (Name &ANS:5 Load) Add (Name &h:5 Load)) Load) (list Lt) (list (Name &x:5 Load))))) (/seq (AugAssign (Name &x:5 Store) Sub (Subscript (Name &BIT:5 Load) (BinOp (Name &ANS:5 Load) Add (Name &h:5 Load)) Load)) (AugAssign (Name &ANS:5 Store) Add (Name &h:5 Load))) nil) (AugAssign (Name &h:5 Store) FloorDiv (Constant i2 None))) nil) (Return (BinOp (Name &ANS:5 Load) Add (Constant i1 None)))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &data:0 Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name &mdata:0 Load) nil nil) None) (Assign (list (Name &v:0 Store)) (Call (Name &mdata:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (ListComp (List (list (Subscript (Name &v:0 Load) (Name &i:6 Load) Load) (Subscript (Name &x:0 Load) (Name &i:6 Load) Load)) Load) (list (comprehension (Name &i:6 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Assign (list (Name &s:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &cnt:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &pos:0 Store)) (Call (Name g_dd Load) (list (Name g_int Load)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Subscript (Name &pos:0 Load) (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load) Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None)) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Name &update:0 Load) (list (Name &s:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)) nil)) (Expr (Call (Name &update:0 Load) (list (Name &cnt:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) (Constant i1 None)) nil))) nil None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Expr (Call (Attribute (Name &x:0 Load) s_sort Load) nil nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &ind:0 Store)) (Subscript (Name &pos:0 Load) (Subscript (Name &x:0 Load) (Name &i:0 Load) Load) Load) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Call (Name &getvalue:0 Load) (list (Name &s:0 Load) (Name &n:0 Load)) nil) Sub (Call (Name &getvalue:0 Load) (list (Name &s:0 Load) (Name &ind:0 Load)) nil)) Sub (BinOp (BinOp (Call (Name &getvalue:0 Load) (list (Name &cnt:0 Load) (Name &n:0 Load)) nil) Sub (Call (Name &getvalue:0 Load) (list (Name &cnt:0 Load) (Name &ind:0 Load)) nil)) Mult (Subscript (Name &x:0 Load) (Name &i:0 Load) Load)))) (Expr (Call (Name &update:0 Load) (list (Name &s:0 Load) (Name &ind:0 Load) (UnaryOp USub (Subscript (Name &x:0 Load) (Name &i:0 Load) Load))) nil)) (Expr (Call (Name &update:0 Load) (list (Name &cnt:0 Load) (Name &ind:0 Load) (UnaryOp USub (Constant i1 None))) nil))) nil None) (Expr (Call (Name &out:0 Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_bisect (list (alias g_bisect_right None) (alias g_bisect_left None)) i0) (ClassDef &BITbisect:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:4 None None) (arg &InputProbNumbers:4 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:4 Load) s_ind_to_co Store)) (List (list (UnaryOp USub (BinOp (Constant i10 None) Pow (Constant i18 None)))) Load) None) (Assign (list (Attribute (Name &self:4 Load) s_co_to_ind Store)) (Dict nil nil) None) (For (Tuple (list (Name &ind:4 Store) (Name &num:4 Store)) Store) (Call (Name g_enumerate Load) (list (Call (Name g_sorted Load) (list (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Name &InputProbNumbers:4 Load)) nil)) nil)) nil)) nil) (/seq (Expr (Call (Attribute (Attribute (Name &self:4 Load) s_ind_to_co Load) s_append Load) (list (Name &num:4 Load)) nil)) (Assign (list (Subscript (Attribute (Name &self:4 Load) s_co_to_ind Load) (Name &num:4 Load) Store)) (BinOp (Name &ind:4 Load) Add (Constant i1 None)) None)) nil None) (Assign (list (Attribute (Name &self:4 Load) s_max Store)) (Call (Name g_len Load) (list (Attribute (Name &self:4 Load) s_co_to_ind Load)) nil) None) (Assign (list (Attribute (Name &self:4 Load) s_data Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Attribute (Name &self:4 Load) s_max Load) Add (Constant i1 None))) None)) nil None None) (FunctionDef &__str__:1 (arguments nil (list (arg &self:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &retList:5 Store)) (List nil Load) None) (For (Name &i:5 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Attribute (Name &self:5 Load) s_max Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &x:5 Store)) (Subscript (Attribute (Name &self:5 Load) s_ind_to_co Load) (Name &i:5 Load) Load) None) (If (Call (Attribute (Name &self:5 Load) s_count Load) (list (Name &x:5 Load)) nil) (/seq (Assign (list (Name &c:5 Store)) (Call (Attribute (Name &self:5 Load) s_count Load) (list (Name &x:5 Load)) nil) None) (For (Name &_:5 Store) (Call (Name g_range Load) (list (Name &c:5 Load)) nil) (/seq (Expr (Call (Attribute (Name &retList:5 Load) s_append Load) (list (Name &x:5 Load)) nil))) nil None)) nil)) nil None) (Return (BinOp (BinOp (Constant s-WzkxXQ== None) Add (Call (Attribute (Constant s-WzQ0LCAzMl0= None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &a:22 Load)) nil) (list (comprehension (Name &a:22 Store) (Name &retList:5 Load) nil i0)))) nil)) Add (Constant s-WzkzXQ== None)))) nil None None) (FunctionDef &__getitem__:1 (arguments nil (list (arg &self:6 None None) (arg &key:6 None None)) None nil nil None nil) (/seq (AugAssign (Name &key:6 Store) Add (Constant i1 None)) (Assign (list (Name &s:6 Store)) (Constant i0 None) None) (Assign (list (Name &ind:6 Store)) (Constant i0 None) None) (Assign (list (Name &l:6 Store)) (Call (Attribute (Attribute (Name &self:6 Load) s_max Load) s_bit_length Load) nil nil) None) (For (Name &i:6 Store) (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &l:6 Load)) nil)) nil) (/seq (If (Compare (BinOp (Name &ind:6 Load) Add (BinOp (Constant i1 None) LShift (Name &i:6 Load))) (list LtE) (list (Attribute (Name &self:6 Load) s_max Load))) (/seq (If (Compare (BinOp (Name &s:6 Load) Add (Subscript (Attribute (Name &self:6 Load) s_data Load) (BinOp (Name &ind:6 Load) Add (BinOp (Constant i1 None) LShift (Name &i:6 Load))) Load)) (list Lt) (list (Name &key:6 Load))) (/seq (AugAssign (Name &s:6 Store) Add (Subscript (Attribute (Name &self:6 Load) s_data Load) (BinOp (Name &ind:6 Load) Add (BinOp (Constant i1 None) LShift (Name &i:6 Load))) Load)) (AugAssign (Name &ind:6 Store) Add (BinOp (Constant i1 None) LShift (Name &i:6 Load)))) nil)) nil)) nil None) (If (BoolOp Or (list (Compare (Name &ind:6 Load) (list Eq) (list (Attribute (Name &self:6 Load) s_max Load))) (Compare (Name &key:6 Load) (list Lt) (list (Constant i0 None))))) (/seq (Raise (Call (Name g_IndexError Load) (list (Constant s-WzY2LCA3MywgODQsIDMyLCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgMzIsIDExMSwgMTE3LCAxMTYsIDMyLCAxMTEsIDEwMiwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDFd None)) nil) None)) nil) (Return (Subscript (Attribute (Name &self:6 Load) s_ind_to_co Load) (BinOp (Name &ind:6 Load) Add (Constant i1 None)) Load))) nil None None) (FunctionDef &__len__:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (Return (Call (Attribute (Name &self:7 Load) s__query_sum Load) (list (Attribute (Name &self:7 Load) s_max Load)) nil))) nil None None) (FunctionDef &__contains__:1 (arguments nil (list (arg &self:8 None None) (arg &num:8 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Compare (Name &num:8 Load) (list In) (list (Attribute (Name &self:8 Load) s_co_to_ind Load)))) (/seq (Return (Constant False None))) nil) (Return (Compare (Call (Attribute (Name &self:8 Load) s_count Load) (list (Name &num:8 Load)) nil) (list Gt) (list (Constant i0 None))))) nil None None) (FunctionDef &_query_sum:1 (arguments nil (list (arg &self:9 None None) (arg &i:9 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:9 Store)) (Constant i0 None) None) (While (Compare (Name &i:9 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:9 Store) Add (Subscript (Attribute (Name &self:9 Load) s_data Load) (Name &i:9 Load) Load)) (fn_2 &i:9)) nil) (Return (Name &s:9 Load))) nil None None) (FunctionDef &_add:1 (arguments nil (list (arg &self:10 None None) (arg &i:10 None None) (arg &x:10 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:10 Load) (list LtE) (list (Attribute (Name &self:10 Load) s_max Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:10 Load) s_data Load) (Name &i:10 Load) Store) Add (Name &x:10 Load)) (fn_3 &i:10)) nil)) nil None None) (FunctionDef &push:1 (arguments nil (list (arg &self:11 None None) (arg &x:11 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Compare (Name &x:11 Load) (list In) (list (Attribute (Name &self:11 Load) s_co_to_ind Load)))) (/seq (Raise (Call (Name g_KeyError Load) (list (Constant s-Wzg0LCAxMDQsIDEwMSwgMzIsIDExMiwgMTE3LCAxMTUsIDEwNCwgMTA1LCAxMTAsIDEwMywgMzIsIDExMCwgMTE3LCAxMDksIDk4LCAxMDEsIDExNCwgMzIsIDEwMCwgMTA1LCAxMDAsIDExMCwgMTE2LCAzMiwgMTA1LCAxMTAsIDEwNSwgMTE2LCAxMDUsIDk3LCAxMDgsIDEwNSwgMTIyLCAxMDEsIDEwMF0= None)) nil) None)) nil) (Expr (Call (Attribute (Name &self:11 Load) s__add Load) (list (Subscript (Attribute (Name &self:11 Load) s_co_to_ind Load) (Name &x:11 Load) Load) (Constant i1 None)) nil))) nil None None) (FunctionDef &delete:1 (arguments nil (list (arg &self:12 None None) (arg &x:12 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Compare (Name &x:12 Load) (list In) (list (Attribute (Name &self:12 Load) s_co_to_ind Load)))) (/seq (Raise (Call (Name g_KeyError Load) (list (Constant s-Wzg0LCAxMDQsIDEwMSwgMzIsIDEwMCwgMTAxLCAxMDgsIDEwMSwgMTE2LCAxMDUsIDExMCwgMTAzLCAzMiwgMTEwLCAxMTcsIDEwOSwgOTgsIDEwMSwgMTE0LCAzMiwgMTAwLCAxMDUsIDEwMCwgMTEwLCAxMTYsIDMyLCAxMDUsIDExMCwgMTA1LCAxMTYsIDEwNSwgOTcsIDEwOCwgMTA1LCAxMjIsIDEwMSwgMTAwXQ== None)) nil) None)) nil) (If (Compare (Call (Attribute (Name &self:12 Load) s_count Load) (list (Name &x:12 Load)) nil) (list LtE) (list (Constant i0 None))) (/seq (Raise (Call (Name g_ValueError Load) (list (Constant s-Wzg0LCAxMDQsIDEwMSwgMzIsIDEwMCwgMTAxLCAxMDgsIDEwMSwgMTE2LCAxMDUsIDExMCwgMTAzLCAzMiwgMTEwLCAxMTcsIDEwOSwgOTgsIDEwMSwgMTE0LCAzMiwgMTAwLCAxMTEsIDEwMSwgMTE1LCAxMTAsIDExNiwgMzIsIDEwMSwgMTIwLCAxMDUsIDExNSwgMTE2XQ== None)) nil) None)) nil) (Expr (Call (Attribute (Name &self:12 Load) s__add Load) (list (Subscript (Attribute (Name &self:12 Load) s_co_to_ind Load) (Name &x:12 Load) Load) (UnaryOp USub (Constant i1 None))) nil))) nil None None) (FunctionDef &count:1 (arguments nil (list (arg &self:13 None None) (arg &x:13 None None)) None nil nil None nil) (/seq (Return (BinOp (Call (Attribute (Name &self:13 Load) s__query_sum Load) (list (Subscript (Attribute (Name &self:13 Load) s_co_to_ind Load) (Name &x:13 Load) Load)) nil) Sub (Call (Attribute (Name &self:13 Load) s__query_sum Load) (list (BinOp (Subscript (Attribute (Name &self:13 Load) s_co_to_ind Load) (Name &x:13 Load) Load) Sub (Constant i1 None))) nil)))) nil None None) (FunctionDef &bisect_right:1 (arguments nil (list (arg &self:14 None None) (arg &x:14 None None)) None nil nil None nil) (/seq (If (Compare (Name &x:14 Load) (list In) (list (Attribute (Name &self:14 Load) s_co_to_ind Load))) (/seq (Assign (list (Name &i:14 Store)) (Subscript (Attribute (Name &self:14 Load) s_co_to_ind Load) (Name &x:14 Load) Load) None)) (/seq (Assign (list (Name &i:14 Store)) (BinOp (Call (Name g_bisect_right Load) (list (Attribute (Name &self:14 Load) s_ind_to_co Load) (Name &x:14 Load)) nil) Sub (Constant i1 None)) None))) (Return (Call (Attribute (Name &self:14 Load) s__query_sum Load) (list (Name &i:14 Load)) nil))) nil None None) (FunctionDef &bisect_left:1 (arguments nil (list (arg &self:15 None None) (arg &x:15 None None)) None nil nil None nil) (/seq (If (Compare (Name &x:15 Load) (list In) (list (Attribute (Name &self:15 Load) s_co_to_ind Load))) (/seq (Assign (list (Name &i:15 Store)) (Subscript (Attribute (Name &self:15 Load) s_co_to_ind Load) (Name &x:15 Load) Load) None)) (/seq (Assign (list (Name &i:15 Store)) (Call (Name g_bisect_left Load) (list (Attribute (Name &self:15 Load) s_ind_to_co Load) (Name &x:15 Load)) nil) None))) (If (Compare (Name &i:15 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant i0 None))) nil) (Return (Call (Attribute (Name &self:15 Load) s__query_sum Load) (list (BinOp (Name &i:15 Load) Sub (Constant i1 None))) nil))) nil None None)) nil) (ClassDef &sumBIT:0 nil nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:16 None None) (arg &N:16 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:16 Load) s_N Store)) (Name &N:16 Load) None) (Assign (list (Attribute (Name &self:16 Load) s_bit Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:21 Store) (Call (Name g_range Load) (list (BinOp (Attribute (Name &self:16 Load) s_N Load) Add (Constant i1 None))) nil) nil i0))) None)) nil None None) (FunctionDef &__str__:2 (arguments nil (list (arg &self:17 None None)) None nil nil None nil) (/seq (Assign (list (Name &ret:17 Store)) (List nil Load) None) (For (Name &i:17 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Attribute (Name &self:17 Load) s_N Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Attribute (Name &ret:17 Load) s_append Load) (list (Call (Attribute (Name &self:17 Load) s___getitem__ Load) (list (Name &i:17 Load)) nil)) nil))) nil None) (Return (BinOp (BinOp (Constant s-WzkxXQ== None) Add (Call (Attribute (Constant s-WzQ0LCAzMl0= None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &a:23 Load)) nil) (list (comprehension (Name &a:23 Store) (Name &ret:17 Load) nil i0)))) nil)) Add (Constant s-WzkzXQ== None)))) nil None None) (FunctionDef &__getitem__:2 (arguments nil (list (arg &self:18 None None) (arg &i:18 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:18 Store)) (Constant i0 None) None) (While (Compare (Name &i:18 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:18 Store) Add (Subscript (Attribute (Name &self:18 Load) s_bit Load) (Name &i:18 Load) Load)) (fn_2 &i:18)) nil) (Return (Name &s:18 Load))) nil None None) (FunctionDef &add:2 (arguments nil (list (arg &self:19 None None) (arg &i:19 None None) (arg &x:19 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:19 Load) (list LtE) (list (Attribute (Name &self:19 Load) s_N Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:19 Load) s_bit Load) (Name &i:19 Load) Store) Add (Name &x:19 Load)) (fn_3 &i:19)) nil)) nil None None)) nil) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load) None) (ImportFrom s_operator (list (alias &itemgetter:0 None)) i0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &N:3 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &X:3 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &V:3 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &XV:3 Store)) (ListComp (Tuple (list (Name &x:20 Load) (Name &v:20 Load)) Load) (list (comprehension (Tuple (list (Name &x:20 Store) (Name &v:20 Store)) Store) (Call (Name g_zip Load) (list (Name &X:3 Load) (Name &V:3 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &XV:3 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &XV:3 Load) s_sort Load) nil (list (keyword s_key (Call (Name &itemgetter:0 Load) (list (Constant i1 None)) nil))))) (Assign (list (Name &co_to_ind1:3 Store)) (Dict nil nil) None) (For (Tuple (list (Name &i:3 Store) (Tuple (list (Name &x:3 Store) (Name &v:3 Store)) Store)) Store) (Call (Name g_enumerate Load) (list (Name &XV:3 Load)) nil) (/seq (Assign (list (Subscript (Name &co_to_ind1:3 Load) (Name &x:3 Load) Store)) (BinOp (Name &i:3 Load) Add (Constant i1 None)) None)) nil None) (Expr (Call (Attribute (Name &XV:3 Load) s_sort Load) nil nil)) (Assign (list (Name &sumbit:3 Store)) (Call (Name &sumBIT:0 Load) (list (BinOp (Name &N:3 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &bit:3 Store)) (Call (Name &sumBIT:0 Load) (list (BinOp (Name &N:3 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &ans:3 Store)) (Constant i0 None) None) (For (Tuple (list (Name &x:3 Store) (Name &v:3 Store)) Store) (Name &XV:3 Load) (/seq (Assign (list (Name &ind1:3 Store)) (Subscript (Name &co_to_ind1:3 Load) (Name &x:3 Load) Load) None) (Assign (list (Name &count:3 Store)) (Subscript (Name &bit:3 Load) (Name &ind1:3 Load) Load) None) (Assign (list (Name &s:3 Store)) (Subscript (Name &sumbit:3 Load) (Name &ind1:3 Load) Load) None) (AugAssign (Name &ans:3 Store) Add (BinOp (BinOp (Name &count:3 Load) Mult (Name &x:3 Load)) Sub (Name &s:3 Load))) (Expr (Call (Attribute (Name &bit:3 Load) s_add Load) (list (Name &ind1:3 Load) (Constant i1 None)) nil)) (Expr (Call (Attribute (Name &sumbit:3 Load) s_add Load) (list (Name &ind1:3 Load) (Name &x:3 Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:3 Load)) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Import (list (alias &bisect:0 None))) (FunctionDef &query:0 (arguments nil (list (arg &f:1 None None) (arg &i:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &ret:1 Store)) (Constant i0 None) None) (While (Name &i:1 Load) (/seq (AugAssign (Name &ret:1 Store) Add (Subscript (Name &f:1 Load) (Name &i:1 Load) Load)) (fn_2 &i:1)) nil) (Return (Name &ret:1 Load))) nil None None) (FunctionDef &update:0 (arguments nil (list (arg &f:2 None None) (arg &i:2 None None) (arg &d:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (Name &f:2 Load)) nil) None) (While (Compare (Name &i:2 Load) (list Lt) (list (Name &n:2 Load))) (/seq (AugAssign (Subscript (Name &f:2 Load) (Name &i:2 Load) Store) Add (Name &d:2 Load)) (fn_3 &i:2)) nil)) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &X:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &V:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &a:0 Store)) (ListComp (Tuple (list (Subscript (Name &X:0 Load) (Name &i:3 Load) Load) (Subscript (Name &V:0 Load) (Name &i:3 Load) Load)) Load) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Assign (list (Name &vlist:0 Store)) (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &V:0 Load)) nil)) nil) None) (Assign (list (Name &f:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Call (Name g_len Load) (list (Name &vlist:0 Load)) nil) Add (Constant i1 None))) None) (Assign (list (Name &f2:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Call (Name g_len Load) (list (Name &vlist:0 Load)) nil) Add (Constant i1 None))) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Tuple (list (Name &x:0 Store) (Name &v:0 Store)) Store) (Name &a:0 Load) (/seq (Assign (list (Name &ii:0 Store)) (Call (Attribute (Name &bisect:0 Load) s_bisect_left Load) (list (Name &vlist:0 Load) (Name &v:0 Load)) nil) None) (Assign (list (Name &sm:0 Store)) (Call (Name &query:0 Load) (list (Name &f:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &cnt:0 Store)) (Call (Name &query:0 Load) (list (Name &f2:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None))) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &x:0 Load) Mult (Name &cnt:0 Load)) Sub (Name &sm:0 Load))) (Expr (Call (Name &update:0 Load) (list (Name &f:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None)) (Name &x:0 Load)) nil)) (Expr (Call (Name &update:0 Load) (list (Name &f2:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None)) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Import (list (alias &bisect:0 None))) (FunctionDef &query:0 (arguments nil (list (arg &f:1 None None) (arg &i:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &ret:1 Store)) (Constant i0 None) None) (While (Name &i:1 Load) (/seq (AugAssign (Name &ret:1 Store) Add (Subscript (Name &f:1 Load) (Name &i:1 Load) Load)) (fn_2 &i:1)) nil) (Return (Name &ret:1 Load))) nil None None) (FunctionDef &update:0 (arguments nil (list (arg &f:2 None None) (arg &i:2 None None) (arg &d:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (Name &f:2 Load)) nil) None) (While (Compare (Name &i:2 Load) (list Lt) (list (Name &n:2 Load))) (/seq (AugAssign (Subscript (Name &f:2 Load) (Name &i:2 Load) Store) Add (Name &d:2 Load)) (fn_3 &i:2)) nil)) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &X:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &V:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &r:0 Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:0 Load)) nil)) nil) None) (Expr (Call (Attribute (Name &r:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &i:3 None None)) None nil nil None nil) (Subscript (Name &X:0 Load) (Name &i:3 Load) Load)))))) (Assign (list (Name &vlist:0 Store)) (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &V:0 Load)) nil)) nil) None) (Assign (list (Name &f:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Call (Name g_len Load) (list (Name &vlist:0 Load)) nil) Add (Constant i1 None))) None) (Assign (list (Name &f2:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Call (Name g_len Load) (list (Name &vlist:0 Load)) nil) Add (Constant i1 None))) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &r:0 Load) (/seq (Assign (list (Tuple (list (Name &x:0 Store) (Name &v:0 Store)) Store)) (Tuple (list (Subscript (Name &X:0 Load) (Name &i:0 Load) Load) (Subscript (Name &V:0 Load) (Name &i:0 Load) Load)) Load) None) (Assign (list (Name &ii:0 Store)) (Call (Attribute (Name &bisect:0 Load) s_bisect_left Load) (list (Name &vlist:0 Load) (Name &v:0 Load)) nil) None) (Assign (list (Name &sm:0 Store)) (Call (Name &query:0 Load) (list (Name &f:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &cnt:0 Store)) (Call (Name &query:0 Load) (list (Name &f2:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None))) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &x:0 Load) Mult (Name &cnt:0 Load)) Sub (Name &sm:0 Load))) (Expr (Call (Name &update:0 Load) (list (Name &f:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None)) (Name &x:0 Load)) nil)) (Expr (Call (Name &update:0 Load) (list (Name &f2:0 Load) (BinOp (Name &ii:0 Load) Add (Constant i1 None)) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (ClassDef &BIT:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &array:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_n Store)) (Call (Name g_len Load) (list (Name &array:3 Load)) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_bit Store)) (BinOp (List (list (Constant i0 None)) Load) Add (Name &array:3 Load)) None) (Expr (Call (Attribute (Name &self:3 Load) s_build Load) nil nil))) nil None None) (FunctionDef &build:1 (arguments nil (list (arg &self:4 None None)) None nil nil None nil) (/seq (For (Name &i:4 Store) (Call (Name g_range Load) (list (Constant i1 None) (Attribute (Name &self:4 Load) s_n Load)) nil) (/seq (If (Compare (BinOp (Name &i:4 Load) Add (BinOp (Name &i:4 Load) BitAnd (UnaryOp USub (Name &i:4 Load)))) (list Gt) (list (Attribute (Name &self:4 Load) s_n Load))) (/seq Continue) nil) (AugAssign (Subscript (Attribute (Name &self:4 Load) s_bit Load) (BinOp (Name &i:4 Load) Add (BinOp (Name &i:4 Load) BitAnd (UnaryOp USub (Name &i:4 Load)))) Store) Add (Subscript (Attribute (Name &self:4 Load) s_bit Load) (Name &i:4 Load) Load))) nil None)) nil None None) (FunctionDef &_sum:1 (arguments nil (list (arg &self:5 None None) (arg &i:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:5 Store)) (Constant i0 None) None) (While (Compare (Name &i:5 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:5 Store) Add (Subscript (Attribute (Name &self:5 Load) s_bit Load) (Name &i:5 Load) Load)) (fn_2 &i:5)) nil) (Return (Name &s:5 Load))) nil None None) (FunctionDef &add:1 (arguments nil (list (arg &self:6 None None) (arg &i:6 None None) (arg &val:6 None None)) None nil nil None nil) (/seq (AugAssign (Name &i:6 Store) Add (Constant i1 None)) (While (Compare (Name &i:6 Load) (list LtE) (list (Attribute (Name &self:6 Load) s_n Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:6 Load) s_bit Load) (Name &i:6 Load) Store) Add (Name &val:6 Load)) (fn_3 &i:6)) nil)) nil None None) (FunctionDef &get_sum:1 (arguments nil (list (arg &self:7 None None) (arg &l:7 None None) (arg &r:7 None None)) None nil nil None nil) (/seq (Return (BinOp (Call (Attribute (Name &self:7 Load) s__sum Load) (list (Name &r:7 Load)) nil) Sub (Call (Attribute (Name &self:7 Load) s__sum Load) (list (Name &l:7 Load)) nil)))) nil None None)) nil) (ImportFrom s_operator (list (alias &itemgetter:0 None)) i0) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &v:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &sorted_x:0 Store)) (Call (Name g_sorted Load) (list (Name &x:0 Load)) nil) None) (Assign (list (Name &bit:0 Store)) (Call (Name &BIT:0 Load) (list (Name &sorted_x:0 Load)) nil) None) (Assign (list (Name &bit_ind:0 Store)) (Call (Name &BIT:0 Load) (list (BinOp (List (list (Constant i1 None)) Load) Mult (Name &n:0 Load))) nil) None) (Assign (list (Name &to_ind:0 Store)) (DictComp (Name &v:2 Load) (Name &i:2 Load) (list (comprehension (Tuple (list (Name &i:2 Store) (Name &v:2 Store)) Store) (Call (Name g_enumerate Load) (list (Name &sorted_x:0 Load)) nil) nil i0))) None) (Assign (list (Name &info:0 Store)) (BinOp (List (list (Constant None None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Subscript (Name &info:0 Load) (Name &i:0 Load) Store)) (Tuple (list (BinOp (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) Add (BinOp (Constant i10 None) Pow (Constant i18 None))) (Subscript (Name &x:0 Load) (Name &i:0 Load) Load)) Load) None)) nil None) (Assign (list (Name &info:0 Store)) (Call (Name g_sorted Load) (list (Name &info:0 Load)) (list (keyword s_key (Call (Name &itemgetter:0 Load) (list (Constant i1 None)) nil)) (keyword s_reverse (Constant True None)))) None) (Assign (list (Name &info:0 Store)) (Call (Name g_sorted Load) (list (Name &info:0 Load)) (list (keyword s_key (Call (Name &itemgetter:0 Load) (list (Constant i0 None)) nil)) (keyword s_reverse (Constant True None)))) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &_:0 Store) (Name &pos:0 Store)) Store)) (Subscript (Name &info:0 Load) (Name &i:0 Load) Load) None) (Assign (list (Name &ind:0 Store)) (Subscript (Name &to_ind:0 Load) (Name &pos:0 Load) Load) None) (Assign (list (Name &sum_:0 Store)) (Call (Attribute (Name &bit:0 Load) s_get_sum Load) (list (Constant i0 None) (Name &ind:0 Load)) nil) None) (Assign (list (Name &num:0 Store)) (Call (Attribute (Name &bit_ind:0 Load) s_get_sum Load) (list (Constant i0 None) (Name &ind:0 Load)) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &num:0 Load) Mult (Name &pos:0 Load)) Sub (Name &sum_:0 Load))) (Expr (Call (Attribute (Name &bit:0 Load) s_add Load) (list (Name &ind:0 Load) (UnaryOp USub (Name &pos:0 Load))) nil)) (Expr (Call (Attribute (Name &bit_ind:0 Load) s_add Load) (list (Name &ind:0 Load) (UnaryOp USub (Constant i1 None))) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_operator None))) (Import (list (alias g_collections None))) (ImportFrom s_sys (list (alias g_stdin None)) i0) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &pos:0 Store)) (fn_1 (Attribute (Name g_stdin Load) s_readline Load)) None) (Assign (list (Name &speed:0 Store)) (fn_1 (Attribute (Name g_stdin Load) s_readline Load)) None) (Assign (list (Name &A:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &A:0 Load) s_append Load) (list (Tuple (list (Subscript (Name &pos:0 Load) (Name &i:0 Load) Load) (Subscript (Name &speed:0 Load) (Name &i:0 Load) Load)) Load)) nil))) nil None) (Assign (list (Name &dist:0 Store)) (Dict nil nil) None) (For (Name &i:0 Store) (Name &pos:0 Load) (/seq (Assign (list (Subscript (Name &dist:0 Load) (Name &i:0 Load) Store)) (Constant i0 None) None)) nil None) (Expr (Call (Attribute (Name &A:0 Load) s_sort Load) nil (list (keyword s_key (Call (Attribute (Name g_operator Load) s_itemgetter Load) (list (Constant i0 None)) nil))))) (Assign (list (Name &count:0 Store)) (List (list (Constant i0 None)) Load) None) (FunctionDef &merge_compare:0 (arguments nil (list (arg &p:1 None None) (arg &r:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &p:1 Load) (list Lt) (list (Name &r:1 Load))) (/seq (Assign (list (Name &q:1 Store)) (BinOp (BinOp (Name &r:1 Load) Add (Name &p:1 Load)) FloorDiv (Constant i2 None)) None) (Expr (Call (Name &merge_compare:0 Load) (list (Name &p:1 Load) (Name &q:1 Load)) nil)) (Expr (Call (Name &merge_compare:0 Load) (list (BinOp (Name &q:1 Load) Add (Constant i1 None)) (Name &r:1 Load)) nil)) (Expr (Call (Name &merge:0 Load) (list (Name &p:1 Load) (Name &q:1 Load) (Name &r:1 Load)) nil))) nil)) nil None None) (FunctionDef &merge:0 (arguments nil (list (arg &p:2 None None) (arg &q:2 None None) (arg &r:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &n_1:2 Store)) (BinOp (BinOp (Name &q:2 Load) Sub (Name &p:2 Load)) Add (Constant i1 None)) None) (Assign (list (Name &n_2:2 Store)) (BinOp (Name &r:2 Load) Sub (Name &q:2 Load)) None) (Assign (list (Name &temp:2 Store)) (List nil Load) None) (Assign (list (Name &L:2 Store)) (Subscript (Name &A:0 Load) (Slice (Name &p:2 Load) (BinOp (Name &q:2 Load) Add (Constant i1 None)) None) Load) None) (Assign (list (Name &R:2 Store)) (Subscript (Name &A:0 Load) (Slice (BinOp (Name &q:2 Load) Add (Constant i1 None)) (BinOp (Name &r:2 Load) Add (Constant i1 None)) None) Load) None) (Assign (list (Name &i:2 Store)) (Constant i0 None) None) (Assign (list (Name &j:2 Store)) (Constant i0 None) None) (Assign (list (Name &sum_pos_right:2 Store)) (Constant i0 None) None) (For (Tuple (list (Name &e:2 Store) (Name &f:2 Store)) Store) (Name &R:2 Load) (/seq (AugAssign (Name &sum_pos_right:2 Store) Add (Name &e:2 Load))) nil None) (While (BoolOp And (list (Compare (Name &i:2 Load) (list Lt) (list (Name &n_1:2 Load))) (Compare (Name &j:2 Load) (list Lt) (list (Name &n_2:2 Load))))) (/seq (If (Compare (Subscript (Subscript (Name &L:2 Load) (Name &i:2 Load) Load) (Constant i1 None) Load) (list LtE) (list (Subscript (Subscript (Name &R:2 Load) (Name &j:2 Load) Load) (Constant i1 None) Load))) (/seq (Expr (Call (Attribute (Name &temp:2 Load) s_append Load) (list (Subscript (Name &L:2 Load) (Name &i:2 Load) Load)) nil)) (AugAssign (Subscript (Name &count:0 Load) (Constant i0 None) Store) Add (BinOp (Name &sum_pos_right:2 Load) Sub (BinOp (Subscript (Subscript (Name &L:2 Load) (Name &i:2 Load) Load) (Constant i0 None) Load) Mult (BinOp (Name &n_2:2 Load) Sub (Name &j:2 Load))))) (AugAssign (Name &i:2 Store) Add (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &temp:2 Load) s_append Load) (list (Subscript (Name &R:2 Load) (Name &j:2 Load) Load)) nil)) (AugAssign (Name &sum_pos_right:2 Store) Sub (Subscript (Subscript (Name &R:2 Load) (Name &j:2 Load) Load) (Constant i0 None) Load)) (AugAssign (Name &j:2 Store) Add (Constant i1 None))))) nil) (If (Compare (Name &i:2 Load) (list Eq) (list (Name &n_1:2 Load))) (/seq (AugAssign (Name &temp:2 Store) Add (Subscript (Name &R:2 Load) (Slice (Name &j:2 Load) None None) Load))) (/seq (AugAssign (Name &temp:2 Store) Add (Subscript (Name &L:2 Load) (Slice (Name &i:2 Load) None None) Load)))) (Assign (list (Subscript (Name &A:0 Load) (Slice (Name &p:2 Load) (BinOp (Name &r:2 Load) Add (Constant i1 None)) None) Store)) (Name &temp:2 Load) None)) nil None None) (Expr (Call (Name &merge_compare:0 Load) (list (Constant i0 None) (BinOp (Name &N:0 Load) Sub (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (Subscript (Name &count:0 Load) (Constant i0 None) Load)) nil))) nil)",
            "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Import (list (alias &sys:1 None))) (Assign (list (Name &input:1 Store)) (Attribute (Attribute (Name &sys:1 Load) s_stdin Load) s_readline Load) None) (ClassDef &Bit:1 nil nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:4 None None) (arg &n:4 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:4 Load) s_size Store)) (Name &n:4 Load) None) (Assign (list (Attribute (Name &self:4 Load) s_tree Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:4 Load) Add (Constant i1 None))) None)) nil None None) (FunctionDef &sum:2 (arguments nil (list (arg &self:5 None None) (arg &i:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:5 Store)) (Constant i0 None) None) (While (Compare (Name &i:5 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:5 Store) Add (Subscript (Attribute (Name &self:5 Load) s_tree Load) (Name &i:5 Load) Load)) (fn_2 &i:5)) nil) (Return (Name &s:5 Load))) nil None None) (FunctionDef &add:2 (arguments nil (list (arg &self:6 None None) (arg &i:6 None None) (arg &x:6 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:6 Load) (list LtE) (list (Attribute (Name &self:6 Load) s_size Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:6 Load) s_tree Load) (Name &i:6 Load) Store) Add (Name &x:6 Load)) (fn_3 &i:6)) nil)) nil None None)) nil) (Assign (list (Name &N:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:1 Load) nil nil)) nil) None) (Assign (list (Name &X:1 Store)) (fn_1 (Name &input:1 Load)) None) (Assign (list (Name &V:1 Store)) (fn_1 (Name &input:1 Load)) None) (Assign (list (Name &info:1 Store)) (ListComp (Tuple (list (Name &x:7 Load) (Name &v:7 Load)) Load) (list (comprehension (Tuple (list (Name &x:7 Store) (Name &v:7 Store)) Store) (Call (Name g_zip Load) (list (Name &X:1 Load) (Name &V:1 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &info:1 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &p:8 None None)) None nil nil None nil) (Subscript (Name &p:8 Load) (Constant i0 None) Load)))))) (Expr (Call (Attribute (Name &info:1 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &p:9 None None)) None nil nil None nil) (Subscript (Name &p:9 Load) (Constant i1 None) Load)))))) (Expr (Call (Attribute (Name &X:1 Load) s_sort Load) nil nil)) (Assign (list (Name &x2i:1 Store)) (DictComp (Name &x:3 Load) (BinOp (Name &i:3 Load) Add (Constant i1 None)) (list (comprehension (Tuple (list (Name &i:3 Store) (Name &x:3 Store)) Store) (Call (Name g_enumerate Load) (list (Name &X:1 Load)) nil) nil i0))) None) (Assign (list (Name &bit_x:1 Store)) (Call (Name &Bit:1 Load) (list (BinOp (Name &N:1 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &bit_cnt:1 Store)) (Call (Name &Bit:1 Load) (list (BinOp (Name &N:1 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &ans:1 Store)) (Constant i0 None) None) (For (Tuple (list (Name &x:1 Store) (Name &_:1 Store)) Store) (Name &info:1 Load) (/seq (Assign (list (Name &i:1 Store)) (Subscript (Name &x2i:1 Load) (Name &x:1 Load) Load) None) (AugAssign (Name &ans:1 Store) Add (BinOp (BinOp (Call (Attribute (Name &bit_cnt:1 Load) s_sum Load) (list (Name &i:1 Load)) nil) Mult (Name &x:1 Load)) Sub (Call (Attribute (Name &bit_x:1 Load) s_sum Load) (list (Name &i:1 Load)) nil))) (Expr (Call (Attribute (Name &bit_x:1 Load) s_add Load) (list (Name &i:1 Load) (Name &x:1 Load)) nil)) (Expr (Call (Attribute (Name &bit_cnt:1 Load) s_add Load) (list (Name &i:1 Load) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:1 Load)) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_bisect None))) (ClassDef &ft:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_a Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i200000 None)) None) (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Name &n:2 Load) None)) nil None None) (FunctionDef &qry:1 (arguments nil (list (arg &self:3 None None) (arg &r:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &ret:3 Store)) (Constant i0 None) None) (While (Compare (Name &r:3 Load) (list GtE) (list (Constant i0 None))) (/seq (AugAssign (Name &ret:3 Store) Add (Subscript (Attribute (Name &self:3 Load) s_a Load) (Name &r:3 Load) Load)) (Assign (list (Name &r:3 Store)) (BinOp (BinOp (Name &r:3 Load) BitAnd (BinOp (Name &r:3 Load) Add (Constant i1 None))) Sub (Constant i1 None)) None)) nil) (Return (Name &ret:3 Load))) nil None None) (FunctionDef &upd:1 (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &v:4 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:4 Load) (list Lt) (list (Attribute (Name &self:4 Load) s_n Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:4 Load) s_a Load) (Name &i:4 Load) Store) Add (Name &v:4 Load)) (Assign (list (Name &i:4 Store)) (BinOp (Name &i:4 Load) BitOr (BinOp (Name &i:4 Load) Add (Constant i1 None))) None)) nil)) nil None None)) nil) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (fn_1 (Name g_input Load)) None) (Assign (list (Name &v:0 Store)) (fn_1 (Name g_input Load)) None) (Assign (list (Name &f0:0 Store)) (Call (Name &ft:0 Load) (list (Name &n:0 Load)) nil) None) (Assign (list (Name &f1:0 Store)) (Call (Name &ft:0 Load) (list (Name &n:0 Load)) nil) None) (Assign (list (Name &a1:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) s_append Load) (list (Subscript (Name &x:0 Load) (Name &i:0 Load) Load)) nil)) (Expr (Call (Attribute (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) s_append Load) (list (Subscript (Name &v:0 Load) (Name &i:0 Load) Load)) nil))) nil None) (Expr (Call (Attribute (Name &a1:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &v:0 Load) s_sort Load) nil nil)) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &p:0 Store)) (Call (Attribute (Name g_bisect Load) s_bisect_left Load) (list (Name &v:0 Load) (Subscript (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Call (Attribute (Name &f0:0 Load) s_qry Load) (list (Name &p:0 Load)) nil) Mult (Subscript (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)) Sub (Call (Attribute (Name &f1:0 Load) s_qry Load) (list (Name &p:0 Load)) nil))) (Expr (Call (Attribute (Name &f0:0 Load) s_upd Load) (list (Name &p:0 Load) (Constant i1 None)) nil)) (Expr (Call (Attribute (Name &f1:0 Load) s_upd Load) (list (Name &p:0 Load) (Subscript (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_operator (list (alias g_itemgetter None)) i0) (ClassDef &BIT:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &size:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_table Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:6 Store) (Call (Name g_range Load) (list (BinOp (Name &size:2 Load) Add (Constant i2 None))) nil) nil i0))) None) (Assign (list (Attribute (Name &self:2 Load) s_size Store)) (Name &size:2 Load) None)) nil None None) (FunctionDef &Sum:1 (arguments nil (list (arg &self:3 None None) (arg &i:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:3 Store)) (Constant i0 None) None) (While (Compare (Name &i:3 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:3 Store) Add (Subscript (Attribute (Name &self:3 Load) s_table Load) (Name &i:3 Load) Load)) (fn_2 &i:3)) nil) (Return (Name &s:3 Load))) nil None None) (FunctionDef &PointAdd:1 (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &x:4 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:4 Load) (list LtE) (list (Attribute (Name &self:4 Load) s_size Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:4 Load) s_table Load) (Name &i:4 Load) Store) Add (Name &x:4 Load)) (fn_3 &i:4)) nil) (Return None)) nil None None)) nil) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (fn_1 (Name g_input Load)) None) (Assign (list (Name &v:0 Store)) (fn_1 (Name g_input Load)) None) (Assign (list (Name &y:0 Store)) (Call (Name g_sorted Load) (list (ListComp (Tuple (list (Name &xx:5 Load) (Name &vv:5 Load)) Load) (list (comprehension (Tuple (list (Name &xx:5 Store) (Name &vv:5 Store)) Store) (Call (Name g_zip Load) (list (Name &x:0 Load) (Name &v:0 Load)) nil) nil i0)))) (list (keyword s_key (Call (Name g_itemgetter Load) (list (Constant i1 None)) nil)))) None) (Assign (list (Name &z:0 Store)) (List (list (List (list (Subscript (Subscript (Name &y:0 Load) (Constant i0 None) Load) (Constant i0 None) Load) (Constant i1 None)) Load)) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &n:0 Load)) nil) (/seq (If (Compare (Subscript (Subscript (Name &y:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load) (list Eq) (list (Subscript (Subscript (Name &y:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load) (Constant i1 None) Load))) (/seq (Expr (Call (Attribute (Name &z:0 Load) s_append Load) (list (List (list (Subscript (Subscript (Name &y:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load) (Subscript (Subscript (Name &z:0 Load) (UnaryOp USub (Constant i1 None)) Load) (Constant i1 None) Load)) Load)) nil))) (/seq (Expr (Call (Attribute (Name &z:0 Load) s_append Load) (list (List (list (Subscript (Subscript (Name &y:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load) (BinOp (Subscript (Subscript (Name &z:0 Load) (UnaryOp USub (Constant i1 None)) Load) (Constant i1 None) Load) Add (Constant i1 None))) Load)) nil))))) nil None) (Expr (Call (Attribute (Name &z:0 Load) s_sort Load) nil nil)) (Assign (list (Tuple (list (Name &b_sigma:0 Store) (Name &b_num:0 Store)) Store)) (Tuple (list (Call (Name &BIT:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i2 None))) nil) (Call (Name &BIT:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i2 None))) nil)) Load) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Tuple (list (Name &x:0 Store) (Name &v:0 Store)) Store) (Name &z:0 Load) (/seq (Assign (list (Name &num:0 Store)) (Call (Attribute (Name &b_num:0 Load) s_Sum Load) (list (Name &v:0 Load)) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &x:0 Load) Mult (Name &num:0 Load)) Sub (Call (Attribute (Name &b_sigma:0 Load) s_Sum Load) (list (Name &v:0 Load)) nil))) (Expr (Call (Attribute (Name &b_num:0 Load) s_PointAdd Load) (list (Name &v:0 Load) (Constant i1 None)) nil)) (Expr (Call (Attribute (Name &b_sigma:0 Load) s_PointAdd Load) (list (Name &v:0 Load) (Name &x:0 Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &X:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &V:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &XV:0 Store)) (ListComp (Tuple (list (Subscript (Name &X:0 Load) (Name &i:6 Load) Load) (Subscript (Name &V:0 Load) (Name &i:6 Load) Load)) Load) (list (comprehension (Name &i:6 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Assign (list (Name &compression_dict_v:0 Store)) (DictComp (Name &a:1 Load) (BinOp (Name &ind:1 Load) Add (Constant i2 None)) (list (comprehension (Tuple (list (Name &ind:1 Store) (Name &a:1 Store)) Store) (Call (Name g_enumerate Load) (list (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &V:0 Load)) nil)) nil)) nil) nil i0))) None) (Assign (list (Name &XV:0 Store)) (ListComp (Tuple (list (Subscript (Subscript (Name &XV:0 Load) (Name &i:7 Load) Load) (Constant i0 None) Load) (Subscript (Name &compression_dict_v:0 Load) (Subscript (Subscript (Name &XV:0 Load) (Name &i:7 Load) Load) (Constant i1 None) Load) Load)) Load) (list (comprehension (Name &i:7 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &XV:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (Assign (list (Name &LEN:0 Store)) (BinOp (Call (Name g_len Load) (list (Name &compression_dict_v:0 Load)) nil) Add (Constant i3 None)) None) (Assign (list (Name &BIT1:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &LEN:0 Load) Add (Constant i1 None))) None) (FunctionDef &update1:0 (arguments nil (list (arg &v:2 None None) (arg &w:2 None None)) None nil nil None nil) (/seq (While (Compare (Name &v:2 Load) (list LtE) (list (Name &LEN:0 Load))) (/seq (AugAssign (Subscript (Name &BIT1:0 Load) (Name &v:2 Load) Store) Add (Name &w:2 Load)) (fn_3 &v:2)) nil)) nil None None) (FunctionDef &getvalue1:0 (arguments nil (list (arg &v:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &ANS:3 Store)) (Constant i0 None) None) (While (Compare (Name &v:3 Load) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Name &ANS:3 Store) Add (Subscript (Name &BIT1:0 Load) (Name &v:3 Load) Load)) (fn_2 &v:3)) nil) (Return (Name &ANS:3 Load))) nil None None) (Assign (list (Name &BIT2:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &LEN:0 Load) Add (Constant i1 None))) None) (FunctionDef &update2:0 (arguments nil (list (arg &v:4 None None) (arg &w:4 None None)) None nil nil None nil) (/seq (While (Compare (Name &v:4 Load) (list LtE) (list (Name &LEN:0 Load))) (/seq (AugAssign (Subscript (Name &BIT2:0 Load) (Name &v:4 Load) Store) Add (Name &w:4 Load)) (fn_3 &v:4)) nil)) nil None None) (FunctionDef &getvalue2:0 (arguments nil (list (arg &v:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &ANS:5 Store)) (Constant i0 None) None) (While (Compare (Name &v:5 Load) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Name &ANS:5 Store) Add (Subscript (Name &BIT2:0 Load) (Name &v:5 Load) Load)) (fn_2 &v:5)) nil) (Return (Name &ANS:5 Load))) nil None None) (Assign (list (Name &ANS:0 Store)) (Constant i0 None) None) (For (Tuple (list (Name &x:0 Store) (Name &v:0 Store)) Store) (Name &XV:0 Load) (/seq (AugAssign (Name &ANS:0 Store) Add (BinOp (BinOp (Call (Name &getvalue2:0 Load) (list (Name &LEN:0 Load)) nil) Sub (Call (Name &getvalue2:0 Load) (list (BinOp (Name &v:0 Load) Sub (Constant i1 None))) nil)) Sub (BinOp (BinOp (Call (Name &getvalue1:0 Load) (list (Name &LEN:0 Load)) nil) Sub (Call (Name &getvalue1:0 Load) (list (BinOp (Name &v:0 Load) Sub (Constant i1 None))) nil)) Mult (Name &x:0 Load)))) (Expr (Call (Name &update1:0 Load) (list (Name &v:0 Load) (Constant i1 None)) nil)) (Expr (Call (Name &update2:0 Load) (list (Name &v:0 Load) (Name &x:0 Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ANS:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Import (list (alias g_sys None))) (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_Counter None)) i0) (ImportFrom s_itertools (list (alias g_groupby None)) i0) (Assign (list (Name &rt:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) None) (Assign (list (Name &ri:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) None) (Assign (list (Name &rl:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (fn_1 (Name g_input Load))) None) (ClassDef &Bit:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_size Store)) (Name &n:3 Load) None) (Assign (list (Attribute (Name &self:3 Load) s_tree Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None)) nil None None) (FunctionDef &sum:1 (arguments nil (list (arg &self:4 None None) (arg &i:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:4 Store)) (Constant i0 None) None) (While (Compare (Name &i:4 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:4 Store) Add (Subscript (Attribute (Name &self:4 Load) s_tree Load) (Name &i:4 Load) Load)) (fn_2 &i:4)) nil) (Return (Name &s:4 Load))) nil None None) (FunctionDef &add:1 (arguments nil (list (arg &self:5 None None) (arg &i:5 None None) (arg &val:5 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:5 Load) (list LtE) (list (Attribute (Name &self:5 Load) s_size Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:5 Load) s_tree Load) (Name &i:5 Load) Store) Add (Name &val:5 Load)) (fn_3 &i:5)) nil)) nil None None)) nil) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:2 Store)) (Call (Name &ri:0 Load) nil nil) None) (Assign (list (Name &x:2 Store)) (Call (Name &rl:0 Load) nil nil) None) (Assign (list (Name &v:2 Store)) (Call (Name &rl:0 Load) nil nil) None) (Assign (list (Name &pts:2 Store)) (ListComp (Tuple (list (Name &xi:7 Load) (Name &vi:7 Load)) Load) (list (comprehension (Tuple (list (Name &xi:7 Store) (Name &vi:7 Store)) Store) (Call (Name g_zip Load) (list (Name &x:2 Load) (Name &v:2 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &pts:2 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &a:8 None None)) None nil nil None nil) (Tuple (list (Subscript (Name &a:8 Load) (Constant i1 None) Load) (Subscript (Name &a:8 Load) (Constant i0 None) Load)) Load)))))) (Assign (list (Name &comprX:2 Store)) (DictComp (Name &val:6 Load) (BinOp (Name &i:6 Load) Add (Constant i1 None)) (list (comprehension (Tuple (list (Name &i:6 Store) (Name &val:6 Store)) Store) (Call (Name g_enumerate Load) (list (Call (Name g_sorted Load) (list (Name &x:2 Load)) nil)) nil) nil i0))) None) (Assign (list (Name &bit_x:2 Store)) (Call (Name &Bit:0 Load) (list (BinOp (Name &n:2 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &bit_cnt:2 Store)) (Call (Name &Bit:0 Load) (list (BinOp (Name &n:2 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &res:2 Store)) (Constant i0 None) None) (For (Tuple (list (Name &xi:2 Store) (Name &vi:2 Store)) Store) (Name &pts:2 Load) (/seq (Assign (list (Name &compr:2 Store)) (Subscript (Name &comprX:2 Load) (Name &xi:2 Load) Load) None) (AugAssign (Name &res:2 Store) Add (BinOp (BinOp (Call (Attribute (Name &bit_cnt:2 Load) s_sum Load) (list (Name &compr:2 Load)) nil) Mult (Name &xi:2 Load)) Sub (Call (Attribute (Name &bit_x:2 Load) s_sum Load) (list (Name &compr:2 Load)) nil))) (Expr (Call (Attribute (Name &bit_x:2 Load) s_add Load) (list (Name &compr:2 Load) (Name &xi:2 Load)) nil)) (Expr (Call (Attribute (Name &bit_cnt:2 Load) s_add Load) (list (Name &compr:2 Load) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &res:2 Load)) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (ImportFrom s_collections (list (alias g_Counter None)) i0) (FunctionDef &input:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &list2d:0 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None)) None nil nil None nil) (/seq (Return (ListComp (BinOp (List (list (Name &c:2 Load)) Load) Mult (Name &b:2 Load)) (list (comprehension (Name &i:13 Store) (Call (Name g_range Load) (list (Name &a:2 Load)) nil) nil i0))))) nil None None) (FunctionDef &list3d:0 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None) (arg &c:3 None None) (arg &d:3 None None)) None nil nil None nil) (/seq (Return (ListComp (ListComp (BinOp (List (list (Name &d:3 Load)) Load) Mult (Name &c:3 Load)) (list (comprehension (Name &j:16 Store) (Call (Name g_range Load) (list (Name &b:3 Load)) nil) nil i0))) (list (comprehension (Name &i:14 Store) (Call (Name g_range Load) (list (Name &a:3 Load)) nil) nil i0))))) nil None None) (FunctionDef &list4d:0 (arguments nil (list (arg &a:4 None None) (arg &b:4 None None) (arg &c:4 None None) (arg &d:4 None None) (arg &e:4 None None)) None nil nil None nil) (/seq (Return (ListComp (ListComp (ListComp (BinOp (List (list (Name &e:4 Load)) Load) Mult (Name &d:4 Load)) (list (comprehension (Name &j:19 Store) (Call (Name g_range Load) (list (Name &c:4 Load)) nil) nil i0))) (list (comprehension (Name &j:17 Store) (Call (Name g_range Load) (list (Name &b:4 Load)) nil) nil i0))) (list (comprehension (Name &i:15 Store) (Call (Name g_range Load) (list (Name &a:4 Load)) nil) nil i0))))) nil None None) (FunctionDef &ceil:0 (arguments nil (list (arg &x:5 None None) (arg &y:5 None None)) None nil nil None (list (Constant i1 None))) (/seq (Return (Call (Name g_int Load) (list (UnaryOp USub (BinOp (UnaryOp USub (Name &x:5 Load)) FloorDiv (Name &y:5 Load)))) nil))) nil None None) (FunctionDef &INT:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))) nil None None) (FunctionDef &MAP:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &LIST:0 (arguments nil (list (arg &N:6 None None)) None nil nil None (list (Constant None None))) (/seq (Return (IfExp (Compare (Name &N:6 Load) (list Is) (list (Constant None None))) (Call (Name g_list Load) (list (Call (Name &MAP:0 Load) nil nil)) nil) (ListComp (Call (Name &INT:0 Load) nil nil) (list (comprehension (Name &i:18 Store) (Call (Name g_range Load) (list (Name &N:6 Load)) nil) nil i0)))))) nil None None) (FunctionDef &Yes:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_Yes None)) nil))) nil None None) (FunctionDef &No:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_No None)) nil))) nil None None) (FunctionDef &YES:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil None None) (FunctionDef &NO:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) nil None None) (Assign (list (Name &INF:0 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None) (Assign (list (Name &MOD:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (ClassDef &BIT:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:8 None None) (arg &n:8 None None)) None nil nil None nil) (/seq (AugAssign (Name &n:8 Store) Add (Constant i1 None)) (Assign (list (Name &nv:8 Store)) (Constant i1 None) None) (While (Compare (Name &nv:8 Load) (list Lt) (list (Name &n:8 Load))) (/seq (AugAssign (Name &nv:8 Store) Mult (Constant i2 None))) nil) (Assign (list (Attribute (Name &self:8 Load) s_size Store)) (Name &nv:8 Load) None) (Assign (list (Attribute (Name &self:8 Load) s_tree Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &nv:8 Load)) None)) nil None None) (FunctionDef &sum:1 (arguments nil (list (arg &self:9 None None) (arg &i:9 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:9 Store)) (Constant i0 None) None) (AugAssign (Name &i:9 Store) Add (Constant i1 None)) (While (Compare (Name &i:9 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:9 Store) Add (Subscript (Attribute (Name &self:9 Load) s_tree Load) (BinOp (Name &i:9 Load) Sub (Constant i1 None)) Load)) (fn_2 &i:9)) nil) (Return (Name &s:9 Load))) nil None None) (FunctionDef &add:1 (arguments nil (list (arg &self:10 None None) (arg &i:10 None None) (arg &x:10 None None)) None nil nil None nil) (/seq (AugAssign (Name &i:10 Store) Add (Constant i1 None)) (While (Compare (Name &i:10 Load) (list LtE) (list (Attribute (Name &self:10 Load) s_size Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:10 Load) s_tree Load) (BinOp (Name &i:10 Load) Sub (Constant i1 None)) Store) Add (Name &x:10 Load)) (fn_3 &i:10)) nil)) nil None None) (FunctionDef &get:1 (arguments nil (list (arg &self:11 None None) (arg &l:11 None None) (arg &r:11 None None)) None nil nil None (list (Constant None None))) (/seq (If (Compare (Name &r:11 Load) (list Is) (list (Constant None None))) (/seq (Assign (list (Name &r:11 Store)) (BinOp (Name &l:11 Load) Add (Constant i1 None)) None)) nil) (Assign (list (Name &res:11 Store)) (Constant i0 None) None) (If (Name &r:11 Load) (/seq (AugAssign (Name &res:11 Store) Add (Call (Attribute (Name &self:11 Load) s_sum Load) (list (BinOp (Name &r:11 Load) Sub (Constant i1 None))) nil))) nil) (If (Name &l:11 Load) (/seq (AugAssign (Name &res:11 Store) Sub (Call (Attribute (Name &self:11 Load) s_sum Load) (list (BinOp (Name &l:11 Load) Sub (Constant i1 None))) nil))) nil) (Return (Name &res:11 Load))) nil None None) (FunctionDef &update:1 (arguments nil (list (arg &self:12 None None) (arg &i:12 None None) (arg &x:12 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name &self:12 Load) s_add Load) (list (Name &i:12 Load) (BinOp (Name &x:12 Load) Sub (Call (Attribute (Name &self:12 Load) s_get Load) (list (Name &i:12 Load)) nil))) nil))) nil None None)) nil) (FunctionDef &compress:0 (arguments nil (list (arg &S:7 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &zipped:7 Store) (Name &unzipped:7 Store)) Store)) (Tuple (list (Dict nil nil) (Dict nil nil)) Load) None) (For (Tuple (list (Name &i:7 Store) (Name &a:7 Store)) Store) (Call (Name g_enumerate Load) (list (Call (Name g_sorted Load) (list (Name &S:7 Load)) nil)) nil) (/seq (Assign (list (Subscript (Name &zipped:7 Load) (Name &a:7 Load) Store)) (Name &i:7 Load) None) (Assign (list (Subscript (Name &unzipped:7 Load) (Name &i:7 Load) Store)) (Name &a:7 Load) None)) nil None) (Return (Tuple (list (Name &zipped:7 Load) (Name &unzipped:7 Load)) Load))) nil None None) (Assign (list (Name &N:0 Store)) (Call (Name &INT:0 Load) nil nil) None) (Assign (list (Name &A:0 Store)) (Call (Name &LIST:0 Load) nil nil) None) (Assign (list (Name &B:0 Store)) (Call (Name &LIST:0 Load) nil nil) None) (Assign (list (Name &BA:0 Store)) (Call (Name g_list Load) (list (Call (Name g_zip Load) (list (Name &B:0 Load) (Name &A:0 Load)) nil)) nil) None) (Expr (Call (Attribute (Name &BA:0 Load) s_sort Load) nil nil)) (Assign (list (Tuple (list (Name &zipped:0 Store) (Name &_:0 Store)) Store)) (Call (Name &compress:0 Load) (list (Call (Name g_set Load) (list (Name &A:0 Load)) nil)) nil) None) (Assign (list (Name &bit1:0 Store)) (Call (Name &BIT:0 Load) (list (Name &N:0 Load)) nil) None) (Assign (list (Name &bit2:0 Store)) (Call (Name &BIT:0 Load) (list (Name &N:0 Load)) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Tuple (list (Name &b:0 Store) (Name &a:0 Store)) Store) (Name &BA:0 Load) (/seq (Assign (list (Name &sm:0 Store)) (Call (Attribute (Name &bit1:0 Load) s_sum Load) (list (Subscript (Name &zipped:0 Load) (Name &a:0 Load) Load)) nil) None) (Assign (list (Name &cnt:0 Store)) (Call (Attribute (Name &bit2:0 Load) s_sum Load) (list (Subscript (Name &zipped:0 Load) (Name &a:0 Load) Load)) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &cnt:0 Load) Mult (Name &a:0 Load)) Sub (Name &sm:0 Load))) (Expr (Call (Attribute (Name &bit1:0 Load) s_add Load) (list (Subscript (Name &zipped:0 Load) (Name &a:0 Load) Load) (Name &a:0 Load)) nil)) (Expr (Call (Attribute (Name &bit2:0 Load) s_add Load) (list (Subscript (Name &zipped:0 Load) (Name &a:0 Load) Load) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (ClassDef &Fenwick:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &size:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_tree Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &size:2 Load)) None) (Assign (list (Attribute (Name &self:2 Load) s_size Store)) (Name &size:2 Load) None)) nil None None) (FunctionDef &add:1 (arguments nil (list (arg &self:3 None None) (arg &idx:3 None None) (arg &delta:3 None None)) None nil nil None nil) (/seq (While (Compare (Name &idx:3 Load) (list Lt) (list (Attribute (Name &self:3 Load) s_size Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:3 Load) s_tree Load) (Name &idx:3 Load) Store) Add (Name &delta:3 Load)) (Assign (list (Name &idx:3 Store)) (BinOp (BinOp (Name &idx:3 Load) Add (Constant i1 None)) BitOr (Name &idx:3 Load)) None)) nil)) nil None None) (FunctionDef &getp:1 (arguments nil (list (arg &self:4 None None) (arg &right:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &res:4 Store)) (Constant i0 None) None) (While (Compare (Name &right:4 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (AugAssign (Name &res:4 Store) Add (Subscript (Attribute (Name &self:4 Load) s_tree Load) (Name &right:4 Load) Load)) (Assign (list (Name &right:4 Store)) (BinOp (BinOp (BinOp (Name &right:4 Load) Add (Constant i1 None)) BitAnd (Name &right:4 Load)) Sub (Constant i1 None)) None)) nil) (Return (Name &res:4 Load))) nil None None) (FunctionDef &get:1 (arguments nil (list (arg &self:5 None None) (arg &left:5 None None) (arg &right:5 None None)) None nil nil None nil) (/seq (If (Compare (Name &left:5 Load) (list Gt) (list (Name &right:5 Load))) (/seq (Return (Constant i0 None))) nil) (Return (BinOp (Call (Attribute (Name &self:5 Load) s_getp Load) (list (Name &right:5 Load)) nil) Sub (Call (Attribute (Name &self:5 Load) s_getp Load) (list (BinOp (Name &left:5 Load) Sub (Constant i1 None))) nil)))) nil None None)) nil) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &X:0 Store)) (fn_1 (Name g_input Load)) None) (Assign (list (Name &V:0 Store)) (fn_1 (Name g_input Load)) None) (Assign (list (Name &XV:0 Store)) (Call (Name g_list Load) (list (Call (Name g_zip Load) (list (Name &X:0 Load) (Name &V:0 Load)) nil)) nil) None) (Expr (Call (Attribute (Name &XV:0 Load) s_sort Load) nil nil)) (Assign (list (Name &order:0 Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:0 Load)) nil)) nil) None) (Expr (Call (Attribute (Name &order:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &i:6 None None)) None nil nil None nil) (Subscript (Subscript (Name &XV:0 Load) (Name &i:6 Load) Load) (Constant i1 None) Load)))))) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (Subscript (Subscript (Name &XV:0 Load) (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Sub (Name &i:0 Load)) Load) (Constant i0 None) Load) Mult (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Sub (BinOp (Constant i2 None) Mult (Name &i:0 Load)))))) nil None) (Assign (list (Name &fw:0 Store)) (Call (Name &Fenwick:0 Load) (list (Name &n:0 Load)) nil) None) (Assign (list (Name &fwcount:0 Store)) (Call (Name &Fenwick:0 Load) (list (Name &n:0 Load)) nil) None) (For (Name &i:0 Store) (Name &order:0 Load) (/seq (AugAssign (Name &ans:0 Store) Sub (BinOp (Call (Attribute (Name &fw:0 Load) s_get Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)) (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) Sub (BinOp (Call (Attribute (Name &fwcount:0 Load) s_get Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)) (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) Mult (Subscript (Subscript (Name &XV:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)))) (Expr (Call (Attribute (Name &fw:0 Load) s_add Load) (list (Name &i:0 Load) (Subscript (Subscript (Name &XV:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)) nil)) (Expr (Call (Attribute (Name &fwcount:0 Load) s_add Load) (list (Name &i:0 Load) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (FunctionDef &add:0 (arguments nil (list (arg &sms:1 None None) (arg &cns:1 None None) (arg &n:1 None None) (arg &v:1 None None) (arg &x:1 None None)) None nil nil None nil) (/seq (While (Compare (Name &v:1 Load) (list Lt) (list (Name &n:1 Load))) (/seq (AugAssign (Subscript (Name &sms:1 Load) (Name &v:1 Load) Store) Add (Name &x:1 Load)) (AugAssign (Subscript (Name &cns:1 Load) (Name &v:1 Load) Store) Add (Constant i1 None)) (AugAssign (Name &v:1 Store) Add (BinOp (Name &v:1 Load) BitAnd (UnaryOp Invert (BinOp (Name &v:1 Load) Sub (Constant i1 None)))))) nil)) nil None None) (FunctionDef &sumtoo:0 (arguments nil (list (arg &sms:2 None None) (arg &cns:2 None None) (arg &v:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &sm:2 Store)) (Constant i0 None) None) (Assign (list (Name &cn:2 Store)) (Constant i0 None) None) (While (Compare (Name &v:2 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &sm:2 Store) Add (Subscript (Name &sms:2 Load) (Name &v:2 Load) Load)) (AugAssign (Name &cn:2 Store) Add (Subscript (Name &cns:2 Load) (Name &v:2 Load) Load)) (AugAssign (Name &v:2 Store) Sub (BinOp (Name &v:2 Load) BitAnd (UnaryOp Invert (BinOp (Name &v:2 Load) Sub (Constant i1 None)))))) nil) (Return (Tuple (list (Name &sm:2 Load) (Name &cn:2 Load)) Load))) nil None None) (FunctionDef &go:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:3 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &x:3 Store)) (fn_1 (Name g_input Load)) None) (Assign (list (Name &v:3 Store)) (fn_1 (Name g_input Load)) None) (Assign (list (Name &sv:3 Store)) (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &v:3 Load)) nil)) nil) None) (Assign (list (Name &sv:3 Store)) (DictComp (Name &v:4 Load) (Name &k:4 Load) (list (comprehension (Tuple (list (Name &k:4 Store) (Name &v:4 Store)) Store) (Call (Name g_enumerate Load) (list (Name &sv:3 Load) (Constant i1 None)) nil) nil i0))) None) (Assign (list (Name &v:3 Store)) (ListComp (Subscript (Name &sv:3 Load) (Name &v:5 Load) Load) (list (comprehension (Name &v:5 Store) (Name &v:3 Load) nil i0))) None) (Assign (list (Name &a:3 Store)) (Call (Name g_sorted Load) (list (GeneratorExp (Tuple (list (Name &xx:6 Load) (Name &vv:6 Load)) Load) (list (comprehension (Tuple (list (Name &xx:6 Store) (Name &vv:6 Store)) Store) (Call (Name g_zip Load) (list (Name &x:3 Load) (Name &v:3 Load)) nil) nil i0)))) (list (keyword s_reverse (Constant True None)))) None) (Assign (list (Name &len_sv:3 Store)) (BinOp (Call (Name g_len Load) (list (Name &sv:3 Load)) nil) Add (Constant i1 None)) None) (Assign (list (Name &sms:3 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &len_sv:3 Load)) None) (Assign (list (Name &cns:3 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &len_sv:3 Load)) None) (Assign (list (Name &res:3 Store)) (Constant i0 None) None) (Assign (list (Name &sx:3 Store)) (Constant i0 None) None) (For (Tuple (list (Name &cnt:3 Store) (Tuple (list (Name &xx:3 Store) (Name &vv:3 Store)) Store)) Store) (Call (Name g_enumerate Load) (list (Name &a:3 Load)) nil) (/seq (Assign (list (Tuple (list (Name &sm:3 Store) (Name &cn:3 Store)) Store)) (Call (Name &sumtoo:0 Load) (list (Name &sms:3 Load) (Name &cns:3 Load) (BinOp (Name &vv:3 Load) Sub (Constant i1 None))) nil) None) (Assign (list (Tuple (list (Name &sm:3 Store) (Name &cn:3 Store)) Store)) (Tuple (list (BinOp (Name &sx:3 Load) Sub (Name &sm:3 Load)) (BinOp (Name &cnt:3 Load) Sub (Name &cn:3 Load))) Load) None) (AugAssign (Name &res:3 Store) Add (BinOp (Name &sm:3 Load) Sub (BinOp (Name &xx:3 Load) Mult (Name &cn:3 Load)))) (Expr (Call (Name &add:0 Load) (list (Name &sms:3 Load) (Name &cns:3 Load) (Name &len_sv:3 Load) (Name &vv:3 Load) (Name &xx:3 Load)) nil)) (AugAssign (Name &sx:3 Store) Add (Name &xx:3 Load))) nil None) (Return (Name &res:3 Load))) nil None None) (Expr (Call (Name g_print Load) (list (Call (Name &go:0 Load) nil nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &int1:0 Store)) (Lambda (arguments nil (list (arg &x:4 None None)) None nil nil None nil) (BinOp (Call (Name g_int Load) (list (Name &x:4 Load)) nil) Sub (Constant i1 None))) None) (Assign (list (Name &p2D:0 Store)) (Lambda (arguments nil (list (arg &x:5 None None)) None nil nil None nil) (Call (Name g_print Load) (list (Starred (Name &x:5 Load) Load)) (list (keyword s_sep (Constant s-WzEwXQ== None))))) None) (FunctionDef &II:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)) nil))) nil None None) (FunctionDef &MI:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &LI:0 (arguments nil nil None nil nil None nil) (/seq (Return (fn_1 (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load)))) nil None None) (FunctionDef &LLI:0 (arguments nil (list (arg &rows_number:2 None None)) None nil nil None nil) (/seq (Return (ListComp (Call (Name &LI:0 Load) nil nil) (list (comprehension (Name &_:10 Store) (Call (Name g_range Load) (list (Name &rows_number:2 Load)) nil) nil i0))))) nil None None) (FunctionDef &SI:0 (arguments nil nil None nil nil None nil) (/seq (Return (Subscript (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) (Slice None (UnaryOp USub (Constant i1 None)) None) Load))) nil None None) (ClassDef &BitSum:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:6 None None) (arg &n:6 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:6 Load) s_n Store)) (BinOp (Name &n:6 Load) Add (Constant i3 None)) None) (Assign (list (Attribute (Name &self:6 Load) s_table Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Attribute (Name &self:6 Load) s_n Load) Add (Constant i1 None))) None)) nil None None) (FunctionDef &add:1 (arguments nil (list (arg &self:7 None None) (arg &i:7 None None) (arg &x:7 None None)) None nil nil None nil) (/seq (AugAssign (Name &i:7 Store) Add (Constant i1 None)) (While (Compare (Name &i:7 Load) (list LtE) (list (Attribute (Name &self:7 Load) s_n Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:7 Load) s_table Load) (Name &i:7 Load) Store) Add (Name &x:7 Load)) (fn_3 &i:7)) nil)) nil None None) (FunctionDef &sum:1 (arguments nil (list (arg &self:8 None None) (arg &i:8 None None)) None nil nil None nil) (/seq (AugAssign (Name &i:8 Store) Add (Constant i1 None)) (Assign (list (Name &res:8 Store)) (Constant i0 None) None) (While (Compare (Name &i:8 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &res:8 Store) Add (Subscript (Attribute (Name &self:8 Load) s_table Load) (Name &i:8 Load) Load)) (fn_2 &i:8)) nil) (Return (Name &res:8 Load))) nil None None)) nil) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:3 Store)) (Call (Name &II:0 Load) nil nil) None) (Assign (list (Name &xx:3 Store)) (Call (Name &LI:0 Load) nil nil) None) (Assign (list (Name &vv:3 Store)) (Call (Name &LI:0 Load) nil nil) None) (Assign (list (Name &itox:3 Store)) (Call (Name g_list Load) (list (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &xx:3 Load)) nil)) nil)) nil) None) (Assign (list (Name &xtoi:3 Store)) (DictComp (Name &x:9 Load) (Name &i:9 Load) (list (comprehension (Tuple (list (Name &i:9 Store) (Name &x:9 Store)) Store) (Call (Name g_enumerate Load) (list (Name &itox:3 Load)) nil) nil i0))) None) (Assign (list (Name &vx:3 Store)) (ListComp (Tuple (list (Name &v:11 Load) (Name &x:11 Load)) Load) (list (comprehension (Tuple (list (Name &x:11 Store) (Name &v:11 Store)) Store) (Call (Name g_zip Load) (list (Name &xx:3 Load) (Name &vv:3 Load)) nil) nil i0))) None) (Assign (list (Name &cnt:3 Store)) (Call (Name &BitSum:0 Load) (list (Call (Name g_len Load) (list (Name &itox:3 Load)) nil)) nil) None) (Assign (list (Name &val:3 Store)) (Call (Name &BitSum:0 Load) (list (Call (Name g_len Load) (list (Name &itox:3 Load)) nil)) nil) None) (Assign (list (Name &ans:3 Store)) (Constant i0 None) None) (For (Tuple (list (Name &v:3 Store) (Name &x:3 Store)) Store) (Call (Name g_sorted Load) (list (Name &vx:3 Load)) nil) (/seq (Assign (list (Name &i:3 Store)) (Subscript (Name &xtoi:3 Load) (Name &x:3 Load) Load) None) (If (Name &i:3 Load) (/seq (AugAssign (Name &ans:3 Store) Add (BinOp (BinOp (Call (Attribute (Name &cnt:3 Load) s_sum Load) (list (BinOp (Name &i:3 Load) Sub (Constant i1 None))) nil) Mult (Name &x:3 Load)) Sub (Call (Attribute (Name &val:3 Load) s_sum Load) (list (BinOp (Name &i:3 Load) Sub (Constant i1 None))) nil)))) nil) (Expr (Call (Attribute (Name &cnt:3 Load) s_add Load) (list (Name &i:3 Load) (Constant i1 None)) nil)) (Expr (Call (Attribute (Name &val:3 Load) s_add Load) (list (Name &i:3 Load) (Name &x:3 Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:3 Load)) nil))) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (FunctionDef &getsum:0 (arguments nil (list (arg &BITTree:1 None None) (arg &i:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:1 Store)) (Constant i0 None) None) (While (Compare (Name &i:1 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:1 Store) Add (Subscript (Name &BITTree:1 Load) (Name &i:1 Load) Load)) (fn_2 &i:1)) nil) (Return (Name &s:1 Load))) nil None None) (FunctionDef &updatebit:0 (arguments nil (list (arg &BITTree:2 None None) (arg &i:2 None None) (arg &v:2 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:2 Load) (list LtE) (list (Call (Name g_len Load) (list (Name &BITTree:2 Load)) nil))) (/seq (AugAssign (Subscript (Name &BITTree:2 Load) (Name &i:2 Load) Store) Add (Name &v:2 Load)) (fn_3 &i:2)) nil)) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:3 Load)) nil) (list (comprehension (Name &i:3 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) (list (Compare (Name &i:3 Load) (list NotEq) (list (Constant s-WzEwXQ== None)))) i0))) None) (Assign (list (Name &v:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:4 Load)) nil) (list (comprehension (Name &i:4 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) (list (Compare (Name &i:4 Load) (list NotEq) (list (Constant s-WzEwXQ== None)))) i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Subscript (Name &v:0 Load) (Name &i:0 Load) Store)) (List (list (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Name &i:0 Load)) Load) None)) nil None) (Expr (Call (Attribute (Name &v:0 Load) s_sort Load) nil nil)) (Assign (list (Name &pos:0 Store)) (Call (Name g_dict Load) nil nil) None) (Assign (list (Tuple (list (Name &store:0 Store) (Name &prev:0 Store)) Store)) (Tuple (list (Constant i1 None) (Subscript (Subscript (Name &v:0 Load) (Constant i0 None) Load) (Constant i0 None) Load)) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Name &i:0 Load) (list Gt) (list (Constant i0 None))) (/seq (If (Compare (Name &prev:0 Load) (list Eq) (list (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load))) (/seq (Assign (list (Subscript (Name &pos:0 Load) (Subscript (Name &x:0 Load) (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load) Load) Store)) (Name &store:0 Load) None)) (/seq (AugAssign (Name &store:0 Store) Add (Constant i1 None)) (Assign (list (Subscript (Name &pos:0 Load) (Subscript (Name &x:0 Load) (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load) Load) Store)) (Name &store:0 Load) None) (Assign (list (Name &prev:0 Store)) (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load) None)))) (/seq (Assign (list (Subscript (Name &pos:0 Load) (Subscript (Name &x:0 Load) (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load) Load) Store)) (Name &store:0 Load) None)))) nil None) (Assign (list (Name &sorte:0 Store)) (Call (Name g_sorted Load) (list (Call (Attribute (Name &pos:0 Load) s_keys Load) nil nil)) nil) None) (Assign (list (Name &bit:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i10 None))) None) (Assign (list (Name &ind:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i10 None))) None) (Assign (list (Tuple (list (Name &ans:0 Store) (Name &count:0 Store) (Name &diff:0 Store)) Store)) (Tuple (list (Constant i0 None) (Constant i0 None) (Constant i0 None)) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &sorte:0 Load)) nil)) nil) (/seq (Assign (list (Name &count:0 Store)) (Call (Name &getsum:0 Load) (list (Name &bit:0 Load) (Subscript (Name &pos:0 Load) (Subscript (Name &sorte:0 Load) (Name &i:0 Load) Load) Load)) nil) None) (Assign (list (Name &diff:0 Store)) (Call (Name &getsum:0 Load) (list (Name &ind:0 Load) (Subscript (Name &pos:0 Load) (Subscript (Name &sorte:0 Load) (Name &i:0 Load) Load) Load)) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &count:0 Load) Mult (Subscript (Name &sorte:0 Load) (Name &i:0 Load) Load)) Sub (Name &diff:0 Load))) (Expr (Call (Name &updatebit:0 Load) (list (Name &bit:0 Load) (Subscript (Name &pos:0 Load) (Subscript (Name &sorte:0 Load) (Name &i:0 Load) Load) Load) (Constant i1 None)) nil)) (Expr (Call (Name &updatebit:0 Load) (list (Name &ind:0 Load) (Subscript (Name &pos:0 Load) (Subscript (Name &sorte:0 Load) (Name &i:0 Load) Load) Load) (Subscript (Name &sorte:0 Load) (Name &i:0 Load) Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &ans:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Import (list (alias g_bisect None))) (ClassDef &Fenwick:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_data Store)) (ListComp (List (list (Constant i0 None) (Constant i0 None)) Load) (list (comprehension (Name &i:5 Store) (Call (Name g_range Load) (list (Name &n:2 Load)) nil) nil i0))) None)) nil None None) (FunctionDef &update:1 (arguments nil (list (arg &self:3 None None) (arg &pos:3 None None) (arg &dist:3 None None)) None nil nil None nil) (/seq (While (Compare (Name &pos:3 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:3 Load) s_data Load)) nil))) (/seq (AugAssign (Subscript (Subscript (Attribute (Name &self:3 Load) s_data Load) (Name &pos:3 Load) Load) (Constant i0 None) Store) Add (Constant i1 None)) (AugAssign (Subscript (Subscript (Attribute (Name &self:3 Load) s_data Load) (Name &pos:3 Load) Load) (Constant i1 None) Store) Add (Name &dist:3 Load)) (Assign (list (Name &pos:3 Store)) (BinOp (Name &pos:3 Load) BitOr (BinOp (Name &pos:3 Load) Add (Constant i1 None))) None)) nil)) nil None None) (FunctionDef &query:1 (arguments nil (list (arg &self:4 None None) (arg &pos:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &ans:4 Store)) (List (list (Constant i0 None) (Constant i0 None)) Load) None) (While (Compare (Name &pos:4 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Subscript (Name &ans:4 Load) (Constant i0 None) Store) Add (Subscript (Subscript (Attribute (Name &self:4 Load) s_data Load) (BinOp (Name &pos:4 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) (AugAssign (Subscript (Name &ans:4 Load) (Constant i1 None) Store) Add (Subscript (Subscript (Attribute (Name &self:4 Load) s_data Load) (BinOp (Name &pos:4 Load) Sub (Constant i1 None)) Load) (Constant i1 None) Load)) (Assign (list (Name &pos:4 Store)) (BinOp (Name &pos:4 Load) BitAnd (BinOp (Name &pos:4 Load) Sub (Constant i1 None))) None)) nil) (Return (Name &ans:4 Load))) nil None None)) nil) (FunctionDef &rints:0 (arguments nil nil None nil nil None nil) (/seq (Return (fn_1 (Name g_input Load)))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name &rints:0 Load) nil nil) None) (Assign (list (Name &v:0 Store)) (Call (Name &rints:0 Load) nil nil) None) (Assign (list (Name &ascDist:0 Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:0 Load)) nil)) nil) None) (Expr (Call (Attribute (Name &ascDist:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &i:6 None None)) None nil nil None nil) (Subscript (Name &x:0 Load) (Name &i:6 Load) Load)))))) (Assign (list (Name &uniqueSpeeds:0 Store)) (Call (Name g_sorted Load) (list (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Name &v:0 Load)) nil)) nil)) nil) None) (Assign (list (Name &tree:0 Store)) (Call (Name &Fenwick:0 Load) (list (Call (Name g_len Load) (list (Name &uniqueSpeeds:0 Load)) nil)) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &ascDist:0 Load) (/seq (Assign (list (Name &speedId:0 Store)) (Call (Attribute (Name g_bisect Load) s_bisect_left Load) (list (Name &uniqueSpeeds:0 Load) (Subscript (Name &v:0 Load) (Name &i:0 Load) Load)) nil) None) (Assign (list (Tuple (list (Name &count:0 Store) (Name &dsum:0 Store)) Store)) (Call (Attribute (Name &tree:0 Load) s_query Load) (list (BinOp (Name &speedId:0 Load) Add (Constant i1 None))) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &count:0 Load) Mult (Subscript (Name &x:0 Load) (Name &i:0 Load) Load)) Sub (Name &dsum:0 Load))) (Expr (Call (Attribute (Name &tree:0 Load) s_update Load) (list (Name &speedId:0 Load) (Subscript (Name &x:0 Load) (Name &i:0 Load) Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Expr (Constant s-WzMyLCA3MiwgMTAxLCAxMjEsIDMyLCAxMTUsIDExNiwgOTcsIDEwOCwgMTA3LCAxMDEsIDExNCwgMzIsIDU4LCA0MSwgMzJd None)) (Assign (list (Name &INF:0 Store)) (BinOp (Constant i10 None) Pow (Constant i10 None)) None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Constant s-WzMyLCA2NywgMTExLCAxMTEsIDEwNywgMzIsIDEyMSwgMTExLCAxMTcsIDExNCwgMzIsIDEwMCwgMTA1LCAxMTUsIDEwNCwgMzIsIDEwNCwgMTAxLCAxMTQsIDEwMSwgMzMsIDMyXQ== None)) (Assign (list (Name &n:2 Store)) (Call (Name &get_int:0 Load) nil nil) None) (Assign (list (Name &points:2 Store)) (Call (Name &get_list:0 Load) nil nil) None) (Assign (list (Name &speeds:2 Store)) (Call (Name &get_list:0 Load) nil nil) None) (Assign (list (Name &point_indexes:2 Store)) (Call (Name g_dict Load) nil nil) None) (Assign (list (Name &sorted_indexes:2 Store)) (Call (Name g_dict Load) nil nil) None) (For (Tuple (list (Name &i:2 Store) (Name &ele:2 Store)) Store) (Call (Name g_enumerate Load) (list (Name &points:2 Load)) nil) (/seq (Assign (list (Subscript (Name &point_indexes:2 Load) (Name &ele:2 Load) Store)) (Name &i:2 Load) None)) nil None) (For (Tuple (list (Name &i:2 Store) (Name &ele:2 Store)) Store) (Call (Name g_enumerate Load) (list (Call (Name g_sorted Load) (list (Name &points:2 Load)) nil)) nil) (/seq (Assign (list (Subscript (Name &sorted_indexes:2 Load) (Name &ele:2 Load) Store)) (Name &i:2 Load) None)) nil None) (Expr (Call (Attribute (Name &points:2 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (Expr (Call (Attribute (Name &points:2 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:7 None None)) None nil nil None nil) (Subscript (Name &speeds:2 Load) (Subscript (Name &point_indexes:2 Load) (Name &x:7 Load) Load) Load))) (keyword s_reverse (Constant True None))))) (Assign (list (Name &stree:2 Store)) (Call (Name &SegTreeSum:0 Load) (list (Name &n:2 Load)) nil) None) (Assign (list (Name &scount:2 Store)) (Call (Name &SegTreeSum:0 Load) (list (Name &n:2 Load)) nil) None) (Assign (list (Name &res:2 Store)) (Constant i0 None) None) (For (Name &i:2 Store) (Name &points:2 Load) (/seq (Assign (list (Name &index:2 Store)) (Subscript (Name &sorted_indexes:2 Load) (Name &i:2 Load) Load) None) (AugAssign (Name &res:2 Store) Add (BinOp (Call (Attribute (Name &stree:2 Load) s_query Load) (list (Name &index:2 Load) (BinOp (Name &n:2 Load) Sub (Constant i1 None))) nil) Sub (BinOp (Name &i:2 Load) Mult (Call (Attribute (Name &scount:2 Load) s_query Load) (list (Name &index:2 Load) (BinOp (Name &n:2 Load) Sub (Constant i1 None))) nil)))) (Expr (Call (Attribute (Name &stree:2 Load) s_modify Load) (list (Name &index:2 Load) (Name &i:2 Load)) nil)) (Expr (Call (Attribute (Name &scount:2 Load) s_modify Load) (list (Name &index:2 Load) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &res:2 Load)) nil))) nil None None) (ClassDef &SegTreeSum:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &size:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_n Store)) (BinOp (Constant i1 None) LShift (Call (Attribute (Name &size:3 Load) s_bit_length Load) nil nil)) None) (Assign (list (Attribute (Name &self:3 Load) s_li Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Attribute (Name &self:3 Load) s_n Load) LShift (Constant i1 None))) None)) nil None None) (FunctionDef &modify:1 (arguments nil (list (arg &self:4 None None) (arg &index:4 None None) (arg &ele:4 None None)) None nil nil None nil) (/seq (AugAssign (Name &index:4 Store) Add (Attribute (Name &self:4 Load) s_n Load)) (Assign (list (Subscript (Attribute (Name &self:4 Load) s_li Load) (Name &index:4 Load) Store)) (Name &ele:4 Load) None) (While (Compare (Name &index:4 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s_li Load) (BinOp (Name &index:4 Load) RShift (Constant i1 None)) Store)) (BinOp (Subscript (Attribute (Name &self:4 Load) s_li Load) (Name &index:4 Load) Load) Add (Subscript (Attribute (Name &self:4 Load) s_li Load) (BinOp (Name &index:4 Load) BitXor (Constant i1 None)) Load)) None) (AugAssign (Name &index:4 Store) RShift (Constant i1 None))) nil)) nil None None) (FunctionDef &get:1 (arguments nil (list (arg &self:5 None None) (arg &index:5 None None)) None nil nil None nil) (/seq (Return (Subscript (Attribute (Name &self:5 Load) s_li Load) (BinOp (Attribute (Name &self:5 Load) s_n Load) Add (Name &index:5 Load)) Load))) nil None None) (FunctionDef &query:1 (arguments nil (list (arg &self:6 None None) (arg &l:6 None None) (arg &r:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &res:6 Store)) (Constant i0 None) None) (Assign (list (Tuple (list (Name &l:6 Store) (Name &r:6 Store)) Store)) (Tuple (list (BinOp (Name &l:6 Load) Add (Attribute (Name &self:6 Load) s_n Load)) (BinOp (Name &r:6 Load) Add (Attribute (Name &self:6 Load) s_n Load))) Load) None) (While (Compare (Name &l:6 Load) (list LtE) (list (Name &r:6 Load))) (/seq (If (Compare (BinOp (Name &l:6 Load) BitAnd (Constant i1 None)) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &res:6 Store) Add (Subscript (Attribute (Name &self:6 Load) s_li Load) (Name &l:6 Load) Load))) nil) (If (Compare (BinOp (Name &r:6 Load) BitAnd (Constant i1 None)) (list NotEq) (list (Constant i1 None))) (/seq (AugAssign (Name &res:6 Store) Add (Subscript (Attribute (Name &self:6 Load) s_li Load) (Name &r:6 Load) Load))) nil) (Assign (list (Name &l:6 Store)) (BinOp (BinOp (Name &l:6 Load) Add (Constant i1 None)) RShift (Constant i1 None)) None) (Assign (list (Name &r:6 Store)) (BinOp (BinOp (Name &r:6 Load) Sub (Constant i1 None)) RShift (Constant i1 None)) None)) nil) (Return (Name &res:6 Load))) nil None None)) nil) (Expr (Constant s-WzMyLCA4MCwgMTIxLCAxMTYsIDEwNCwgMTExLCAxMTAsIDEwNSwgMTE1LCAxMTYsIDk3LCAzMiwgMTAyLCA3NiwgMTA1LCAxMTYsIDEwMSwgMzIsIDQ5LCA0NiwgNDksIDMyXQ== None)) (Import (list (alias &sys:0 None))) (ImportFrom s_collections (list (alias &defaultdict:0 None) (alias &Counter:0 None) (alias &deque:0 None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Call (Name g_iter Load) (list (Call (Attribute (Call (Attribute (Call (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_read Load) nil nil) s_decode Load) nil nil) s_splitlines Load) nil nil)) nil) s___next__ Load) None) (Assign (list (Name &out:0 Store)) (List nil Load) None) (Assign (list (Name &get_int:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) None) (Assign (list (Name &get_list:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (fn_1 (Name &input:0 Load))) None) (Expr (Call (Name &main:0 Load) nil nil)) (Expr (Call (Name g_print Load) (list (Starred (Name &out:0 Load) Load)) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (ImportFrom s_heapq (list (alias &heappush:0 None) (alias &heappop:0 None) (alias &heapify:0 None)) i0) (FunctionDef &query:0 (arguments nil (list (arg &f:1 None None) (arg &i:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &ret:1 Store)) (List (list (Constant i0 None) (Constant i0 None)) Load) None) (While (Name &i:1 Load) (/seq (AugAssign (Subscript (Name &ret:1 Load) (Constant i0 None) Store) Add (Subscript (Subscript (Name &f:1 Load) (Name &i:1 Load) Load) (Constant i0 None) Load)) (AugAssign (Subscript (Name &ret:1 Load) (Constant i1 None) Store) Add (Subscript (Subscript (Name &f:1 Load) (Name &i:1 Load) Load) (Constant i1 None) Load)) (fn_2 &i:1)) nil) (Return (Name &ret:1 Load))) nil None None) (FunctionDef &update:0 (arguments nil (list (arg &f:2 None None) (arg &i:2 None None) (arg &d:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (Name &f:2 Load)) nil) None) (While (Compare (Name &i:2 Load) (list Lt) (list (Name &n:2 Load))) (/seq (AugAssign (Subscript (Subscript (Name &f:2 Load) (Name &i:2 Load) Load) (Constant i0 None) Store) Add (Subscript (Name &d:2 Load) (Constant i0 None) Load)) (AugAssign (Subscript (Subscript (Name &f:2 Load) (Name &i:2 Load) Load) (Constant i1 None) Store) Add (Subscript (Name &d:2 Load) (Constant i1 None) Load)) (fn_3 &i:2)) nil)) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &v:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &a:0 Store)) (BinOp (List (list (Tuple nil Load)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Store)) (Tuple (list (Subscript (Name &x:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load) (Subscript (Name &v:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)) Load) None)) nil None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Assign (list (Name &f:0 Store)) (ListComp (List (list (Constant i0 None) (Constant i0 None)) Load) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Name &update:0 Load) (list (Name &f:0 Load) (Name &i:0 Load) (List (list (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load) (Constant i1 None)) Load)) nil))) nil None) (Assign (list (Name &b:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Attribute (Name &b:0 Load) s_append Load) (list (Tuple (list (UnaryOp USub (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)) (UnaryOp USub (Name &i:0 Load))) Load)) nil))) nil None) (Expr (Call (Name &heapify:0 Load) (list (Name &b:0 Load)) nil)) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (While (Name &b:0 Load) (/seq (Assign (list (Tuple (list (Name &v:0 Store) (Name &i:0 Store)) Store)) (Call (Name &heappop:0 Load) (list (Name &b:0 Load)) nil) None) (Assign (list (Tuple (list (Name &v:0 Store) (Name &i:0 Store)) Store)) (Tuple (list (UnaryOp USub (Name &v:0 Load)) (UnaryOp USub (Name &i:0 Load))) Load) None) (Assign (list (Name &x:0 Store)) (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load) None) (If (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Tuple (list (Name &sum:0 Store) (Name &cnt:0 Store)) Store)) (Call (Name &query:0 Load) (list (Name &f:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None))) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &x:0 Load) Mult (Name &cnt:0 Load)) Sub (Name &sum:0 Load)))) nil) (Expr (Call (Name &update:0 Load) (list (Name &f:0 Load) (Name &i:0 Load) (List (list (UnaryOp USub (Name &x:0 Load)) (UnaryOp USub (Constant i1 None))) Load)) nil))) nil) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_bisect None))) (Import (list (alias g_sys None))) (ClassDef &ft:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_a Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i200000 None)) None) (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Name &n:2 Load) None)) nil None None) (FunctionDef &qry:1 (arguments nil (list (arg &self:3 None None) (arg &r:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &ret:3 Store)) (Constant i0 None) None) (While (Compare (Name &r:3 Load) (list GtE) (list (Constant i0 None))) (/seq (AugAssign (Name &ret:3 Store) Add (Subscript (Attribute (Name &self:3 Load) s_a Load) (Name &r:3 Load) Load)) (Assign (list (Name &r:3 Store)) (BinOp (BinOp (Name &r:3 Load) BitAnd (BinOp (Name &r:3 Load) Add (Constant i1 None))) Sub (Constant i1 None)) None)) nil) (Return (Name &ret:3 Load))) nil None None) (FunctionDef &upd:1 (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &v:4 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:4 Load) (list Lt) (list (Attribute (Name &self:4 Load) s_n Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:4 Load) s_a Load) (Name &i:4 Load) Store) Add (Name &v:4 Load)) (Assign (list (Name &i:4 Store)) (BinOp (Name &i:4 Load) BitOr (BinOp (Name &i:4 Load) Add (Constant i1 None))) None)) nil)) nil None None)) nil) (Assign (list (Name &input:0 Store)) (Attribute (Call (Name g_iter Load) (list (Call (Attribute (Call (Attribute (Call (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_read Load) nil nil) s_decode Load) nil nil) s_splitlines Load) nil nil)) nil) s___next__ Load) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &v:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &f0:0 Store)) (Call (Name &ft:0 Load) (list (Name &n:0 Load)) nil) None) (Assign (list (Name &f1:0 Store)) (Call (Name &ft:0 Load) (list (Name &n:0 Load)) nil) None) (Assign (list (Name &a1:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) s_append Load) (list (Subscript (Name &x:0 Load) (Name &i:0 Load) Load)) nil)) (Expr (Call (Attribute (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) s_append Load) (list (Subscript (Name &v:0 Load) (Name &i:0 Load) Load)) nil))) nil None) (Expr (Call (Attribute (Name &a1:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &v:0 Load) s_sort Load) nil nil)) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &p:0 Store)) (Call (Attribute (Name g_bisect Load) s_bisect_left Load) (list (Name &v:0 Load) (Subscript (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Call (Attribute (Name &f0:0 Load) s_qry Load) (list (Name &p:0 Load)) nil) Mult (Subscript (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)) Sub (Call (Attribute (Name &f1:0 Load) s_qry Load) (list (Name &p:0 Load)) nil))) (Expr (Call (Attribute (Name &f0:0 Load) s_upd Load) (list (Name &p:0 Load) (Constant i1 None)) nil)) (Expr (Call (Attribute (Name &f1:0 Load) s_upd Load) (list (Name &p:0 Load) (Subscript (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Import (list (alias g_heapq None) (alias g_bisect None))) (Import (list (alias g_sys None))) (ImportFrom s_collections (list (alias g_deque None) (alias g_defaultdict None)) i0) (ImportFrom s_fractions (list (alias g_Fraction None)) i0) (Import (list (alias g_sys None))) (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (Assign (list (Name &mod:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &mod1:0 Store)) (Constant i998244353 None) None) (Import (list (alias &os:0 None))) (Import (list (alias &sys:0 None))) (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name &IOBase:0 Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:16 None None) (arg &file:16 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:16 Load) s__fd Store)) (Call (Attribute (Name &file:16 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:16 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None) (Assign (list (Attribute (Name &self:16 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:16 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:16 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:16 Load) s_write Store)) (IfExp (Attribute (Name &self:16 Load) s_writable Load) (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:17 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:17 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (Attribute (Name &self:17 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (Attribute (Name &self:17 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:17 Load)) (/seq Break) nil) (Assign (list (Name &ptr:17 Store)) (Call (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_write Load) (list (Name &b:17 Load)) nil) (Call (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_seek Load) (list (Name &ptr:17 Load)) nil)) Load))) nil) (Assign (list (Attribute (Name &self:17 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:18 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:18 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:18 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (Attribute (Name &self:18 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (Attribute (Name &self:18 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:18 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:18 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:18 Load))) None) (Assign (list (Name &ptr:18 Store)) (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_write Load) (list (Name &b:18 Load)) nil) (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_seek Load) (list (Name &ptr:18 Load)) nil)) Load))) nil) (AugAssign (Attribute (Name &self:18 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:19 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:19 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name &os:0 Load) s_write Load) (list (Attribute (Name &self:19 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name &IOBase:0 Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:20 None None) (arg &file:20 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:20 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:20 Load)) nil) None) (Assign (list (Attribute (Name &self:20 Load) s_flush Store)) (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:20 Load) s_writable Store)) (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:20 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:60 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:60 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:20 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:20 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil)) None) (ClassDef &TreeNode:0 nil nil (/seq (FunctionDef &__init__:3 (arguments nil (list (arg &self:21 None None) (arg &k:21 None None) (arg &v:21 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:21 Load) s_key Store)) (Name &k:21 Load) None) (Assign (list (Attribute (Name &self:21 Load) s_value Store)) (Name &v:21 Load) None) (Assign (list (Attribute (Name &self:21 Load) s_left Store)) (Constant None None) None) (Assign (list (Attribute (Name &self:21 Load) s_right Store)) (Constant None None) None) (Assign (list (Attribute (Name &self:21 Load) s_parent Store)) (Constant None None) None) (Assign (list (Attribute (Name &self:21 Load) s_height Store)) (Constant i1 None) None) (Assign (list (Attribute (Name &self:21 Load) s_num_left Store)) (Constant i1 None) None) (Assign (list (Attribute (Name &self:21 Load) s_num_total Store)) (Constant i1 None) None)) nil None None)) nil) (ClassDef &AvlTree:0 nil nil (/seq (FunctionDef &__init__:4 (arguments nil (list (arg &self:22 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:22 Load) s__tree Store)) (Constant None None) None)) nil None None) (FunctionDef &add:4 (arguments nil (list (arg &self:23 None None) (arg &k:23 None None) (arg &v:23 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &self:23 Load) s__tree Load)) (/seq (Assign (list (Attribute (Name &self:23 Load) s__tree Store)) (Call (Name &TreeNode:0 Load) (list (Name &k:23 Load) (Name &v:23 Load)) nil) None) (Return None)) nil) (Assign (list (Name &node:23 Store)) (Call (Attribute (Name &self:23 Load) s__add Load) (list (Name &k:23 Load) (Name &v:23 Load)) nil) None) (If (Name &node:23 Load) (/seq (Expr (Call (Attribute (Name &self:23 Load) s__rebalance Load) (list (Name &node:23 Load)) nil))) nil)) nil None None) (FunctionDef &_add:4 (arguments nil (list (arg &self:24 None None) (arg &k:24 None None) (arg &v:24 None None)) None nil nil None nil) (/seq (Assign (list (Name &node:24 Store)) (Attribute (Name &self:24 Load) s__tree Load) None) (While (Name &node:24 Load) (/seq (If (Compare (Name &k:24 Load) (list Lt) (list (Attribute (Name &node:24 Load) s_key Load))) (/seq (If (Attribute (Name &node:24 Load) s_left Load) (/seq (Assign (list (Name &node:24 Store)) (Attribute (Name &node:24 Load) s_left Load) None)) (/seq (Assign (list (Attribute (Name &node:24 Load) s_left Store)) (Call (Name &TreeNode:0 Load) (list (Name &k:24 Load) (Name &v:24 Load)) nil) None) (Assign (list (Attribute (Attribute (Name &node:24 Load) s_left Load) s_parent Store)) (Name &node:24 Load) None) (Return (Attribute (Name &node:24 Load) s_left Load))))) (/seq (If (Compare (Attribute (Name &node:24 Load) s_key Load) (list Lt) (list (Name &k:24 Load))) (/seq (If (Attribute (Name &node:24 Load) s_right Load) (/seq (Assign (list (Name &node:24 Store)) (Attribute (Name &node:24 Load) s_right Load) None)) (/seq (Assign (list (Attribute (Name &node:24 Load) s_right Store)) (Call (Name &TreeNode:0 Load) (list (Name &k:24 Load) (Name &v:24 Load)) nil) None) (Assign (list (Attribute (Attribute (Name &node:24 Load) s_right Load) s_parent Store)) (Name &node:24 Load) None) (Return (Attribute (Name &node:24 Load) s_right Load))))) (/seq (Assign (list (Attribute (Name &node:24 Load) s_value Store)) (Name &v:24 Load) None) (Return None)))))) nil)) nil None None) (FunctionDef &get_height:4 (arguments nil (list (arg &x:25 None None)) None nil nil None nil) (/seq (Return (IfExp (Name &x:25 Load) (Attribute (Name &x:25 Load) s_height Load) (Constant i0 None)))) (list (Name g_staticmethod Load)) None None) (FunctionDef &get_num_total:4 (arguments nil (list (arg &x:26 None None)) None nil nil None nil) (/seq (Return (IfExp (Name &x:26 Load) (Attribute (Name &x:26 Load) s_num_total Load) (Constant i0 None)))) (list (Name g_staticmethod Load)) None None) (FunctionDef &_rebalance:4 (arguments nil (list (arg &self:27 None None) (arg &node:27 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:27 Store)) (Name &node:27 Load) None) (While (Name &n:27 Load) (/seq (Assign (list (Name &lh:27 Store)) (Call (Attribute (Name &self:27 Load) s_get_height Load) (list (Attribute (Name &n:27 Load) s_left Load)) nil) None) (Assign (list (Name &rh:27 Store)) (Call (Attribute (Name &self:27 Load) s_get_height Load) (list (Attribute (Name &n:27 Load) s_right Load)) nil) None) (Assign (list (Attribute (Name &n:27 Load) s_height Store)) (BinOp (Call (Name g_max Load) (list (Name &lh:27 Load) (Name &rh:27 Load)) nil) Add (Constant i1 None)) None) (Assign (list (Name &balance_factor:27 Store)) (BinOp (Name &lh:27 Load) Sub (Name &rh:27 Load)) None) (Assign (list (Attribute (Name &n:27 Load) s_num_total Store)) (BinOp (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:27 Load) s_get_num_total Load) (list (Attribute (Name &n:27 Load) s_left Load)) nil)) Add (Call (Attribute (Name &self:27 Load) s_get_num_total Load) (list (Attribute (Name &n:27 Load) s_right Load)) nil)) None) (Assign (list (Attribute (Name &n:27 Load) s_num_left Store)) (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:27 Load) s_get_num_total Load) (list (Attribute (Name &n:27 Load) s_left Load)) nil)) None) (If (Compare (Name &balance_factor:27 Load) (list Gt) (list (Constant i1 None))) (/seq (If (Compare (Call (Attribute (Name &self:27 Load) s_get_height Load) (list (Attribute (Attribute (Name &n:27 Load) s_left Load) s_left Load)) nil) (list Lt) (list (Call (Attribute (Name &self:27 Load) s_get_height Load) (list (Attribute (Attribute (Name &n:27 Load) s_left Load) s_right Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:27 Load) s__rotate_left Load) (list (Attribute (Name &n:27 Load) s_left Load)) nil))) nil) (Expr (Call (Attribute (Name &self:27 Load) s__rotate_right Load) (list (Name &n:27 Load)) nil))) (/seq (If (Compare (Name &balance_factor:27 Load) (list Lt) (list (UnaryOp USub (Constant i1 None)))) (/seq (If (Compare (Call (Attribute (Name &self:27 Load) s_get_height Load) (list (Attribute (Attribute (Name &n:27 Load) s_right Load) s_right Load)) nil) (list Lt) (list (Call (Attribute (Name &self:27 Load) s_get_height Load) (list (Attribute (Attribute (Name &n:27 Load) s_right Load) s_left Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:27 Load) s__rotate_right Load) (list (Attribute (Name &n:27 Load) s_right Load)) nil))) nil) (Expr (Call (Attribute (Name &self:27 Load) s__rotate_left Load) (list (Name &n:27 Load)) nil))) (/seq (Assign (list (Name &n:27 Store)) (Attribute (Name &n:27 Load) s_parent Load) None)))))) nil)) nil None None) (FunctionDef &_remove_one:4 (arguments nil (list (arg &self:28 None None) (arg &node:28 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDgzLCAxMDUsIDEwMCwgMTAxLCAzMiwgMTAxLCAxMDIsIDEwMiwgMTAxLCA5OSwgMTE2LCAzMywgMzMsIDMzLCAzMiwgNjcsIDEwNCwgOTcsIDExMCwgMTAzLCAxMDEsIDExNSwgMzIsIDExMCwgMTExLCAxMDAsIDEwMSwgNDYsIDMyLCA3OCwgMTExLCAxMDAsIDEwMSwgMzIsIDExNSwgMTA0LCAxMTEsIDExNywgMTA4LCAxMDAsIDMyLCAxMDQsIDk3LCAxMTgsIDEwMSwgMzIsIDEwMSwgMTIwLCA5NywgOTksIDExNiwgMTA4LCAxMjEsIDMyLCAxMTEsIDExMCwgMTAxLCAzMiwgOTksIDEwNCwgMTA1LCAxMDgsIDEwMCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMl0= None)) (Assign (list (Name &replacement:28 Store)) (BoolOp Or (list (Attribute (Name &node:28 Load) s_left Load) (Attribute (Name &node:28 Load) s_right Load))) None) (If (Attribute (Name &node:28 Load) s_parent Load) (/seq (If (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:28 Load)) nil) (/seq (Assign (list (Attribute (Attribute (Name &node:28 Load) s_parent Load) s_left Store)) (Name &replacement:28 Load) None)) (/seq (Assign (list (Attribute (Attribute (Name &node:28 Load) s_parent Load) s_right Store)) (Name &replacement:28 Load) None))) (Assign (list (Attribute (Name &replacement:28 Load) s_parent Store)) (Attribute (Name &node:28 Load) s_parent Load) None) (Assign (list (Attribute (Name &node:28 Load) s_parent Store)) (Constant None None) None)) (/seq (Assign (list (Attribute (Name &self:28 Load) s__tree Store)) (Name &replacement:28 Load) None) (Assign (list (Attribute (Name &replacement:28 Load) s_parent Store)) (Constant None None) None))) (Assign (list (Attribute (Name &node:28 Load) s_left Store)) (Constant None None) None) (Assign (list (Attribute (Name &node:28 Load) s_right Store)) (Constant None None) None) (Assign (list (Attribute (Name &node:28 Load) s_parent Store)) (Constant None None) None) (Expr (Call (Attribute (Name &self:28 Load) s__rebalance Load) (list (Name &replacement:28 Load)) nil))) nil None None) (FunctionDef &_remove_leaf:4 (arguments nil (list (arg &self:29 None None) (arg &node:29 None None)) None nil nil None nil) (/seq (If (Attribute (Name &node:29 Load) s_parent Load) (/seq (If (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:29 Load)) nil) (/seq (Assign (list (Attribute (Attribute (Name &node:29 Load) s_parent Load) s_left Store)) (Constant None None) None)) (/seq (Assign (list (Attribute (Attribute (Name &node:29 Load) s_parent Load) s_right Store)) (Constant None None) None))) (Expr (Call (Attribute (Name &self:29 Load) s__rebalance Load) (list (Attribute (Name &node:29 Load) s_parent Load)) nil))) (/seq (Assign (list (Attribute (Name &self:29 Load) s__tree Store)) (Constant None None) None))) (Assign (list (Attribute (Name &node:29 Load) s_parent Store)) (Constant None None) None) (Assign (list (Attribute (Name &node:29 Load) s_left Store)) (Constant None None) None) (Assign (list (Attribute (Name &node:29 Load) s_right Store)) (Constant None None) None)) nil None None) (FunctionDef &remove:4 (arguments nil (list (arg &self:30 None None) (arg &k:30 None None)) None nil nil None nil) (/seq (Assign (list (Name &node:30 Store)) (Call (Attribute (Name &self:30 Load) s__get_node Load) (list (Name &k:30 Load)) nil) None) (If (UnaryOp Not (Name &node:30 Load)) (/seq (Return None)) nil) (If (Call (Attribute (Name &AvlTree:0 Load) s__is_leaf Load) (list (Name &node:30 Load)) nil) (/seq (Expr (Call (Attribute (Name &self:30 Load) s__remove_leaf Load) (list (Name &node:30 Load)) nil)) (Return None)) nil) (If (BoolOp And (list (Attribute (Name &node:30 Load) s_left Load) (Attribute (Name &node:30 Load) s_right Load))) (/seq (Assign (list (Name &nxt:30 Store)) (Call (Attribute (Name &AvlTree:0 Load) s__get_next Load) (list (Name &node:30 Load)) nil) None) (Assign (list (Attribute (Name &node:30 Load) s_key Store)) (Attribute (Name &nxt:30 Load) s_key Load) None) (Assign (list (Attribute (Name &node:30 Load) s_value Store)) (Attribute (Name &nxt:30 Load) s_value Load) None) (If (Call (Attribute (Name &self:30 Load) s__is_leaf Load) (list (Name &nxt:30 Load)) nil) (/seq (Expr (Call (Attribute (Name &self:30 Load) s__remove_leaf Load) (list (Name &nxt:30 Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:30 Load) s__remove_one Load) (list (Name &nxt:30 Load)) nil)))) (Expr (Call (Attribute (Name &self:30 Load) s__rebalance Load) (list (Name &node:30 Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:30 Load) s__remove_one Load) (list (Name &node:30 Load)) nil))))) nil None None) (FunctionDef &get:4 (arguments nil (list (arg &self:31 None None) (arg &k:31 None None)) None nil nil None nil) (/seq (Assign (list (Name &node:31 Store)) (Call (Attribute (Name &self:31 Load) s__get_node Load) (list (Name &k:31 Load)) nil) None) (Return (IfExp (Name &node:31 Load) (Attribute (Name &node:31 Load) s_value Load) (UnaryOp USub (Constant i1 None))))) nil None None) (FunctionDef &_get_node:4 (arguments nil (list (arg &self:32 None None) (arg &k:32 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &self:32 Load) s__tree Load)) (/seq (Return (Constant None None))) nil) (Assign (list (Name &node:32 Store)) (Attribute (Name &self:32 Load) s__tree Load) None) (While (Name &node:32 Load) (/seq (If (Compare (Name &k:32 Load) (list Lt) (list (Attribute (Name &node:32 Load) s_key Load))) (/seq (Assign (list (Name &node:32 Store)) (Attribute (Name &node:32 Load) s_left Load) None)) (/seq (If (Compare (Attribute (Name &node:32 Load) s_key Load) (list Lt) (list (Name &k:32 Load))) (/seq (Assign (list (Name &node:32 Store)) (Attribute (Name &node:32 Load) s_right Load) None)) (/seq (Return (Name &node:32 Load))))))) nil) (Return (Constant None None))) nil None None) (FunctionDef &get_at:4 (arguments nil (list (arg &self:33 None None) (arg &pos:33 None None)) None nil nil None nil) (/seq (Assign (list (Name &x:33 Store)) (BinOp (Name &pos:33 Load) Add (Constant i1 None)) None) (Assign (list (Name &node:33 Store)) (Attribute (Name &self:33 Load) s__tree Load) None) (While (Name &node:33 Load) (/seq (If (Compare (Name &x:33 Load) (list Lt) (list (Attribute (Name &node:33 Load) s_num_left Load))) (/seq (Assign (list (Name &node:33 Store)) (Attribute (Name &node:33 Load) s_left Load) None)) (/seq (If (Compare (Attribute (Name &node:33 Load) s_num_left Load) (list Lt) (list (Name &x:33 Load))) (/seq (AugAssign (Name &x:33 Store) Sub (Attribute (Name &node:33 Load) s_num_left Load)) (Assign (list (Name &node:33 Store)) (Attribute (Name &node:33 Load) s_right Load) None)) (/seq (Return (Tuple (list (Attribute (Name &node:33 Load) s_key Load) (Attribute (Name &node:33 Load) s_value Load)) Load))))))) nil) (Raise (Call (Name g_IndexError Load) (list (Constant s-Wzc5LCAxMTcsIDExNiwgMzIsIDExMSwgMTAyLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgMTE1XQ== None)) nil) None)) nil None None) (FunctionDef &_is_left:4 (arguments nil (list (arg &node:34 None None)) None nil nil None nil) (/seq (Return (BoolOp And (list (Attribute (Attribute (Name &node:34 Load) s_parent Load) s_left Load) (Compare (Attribute (Attribute (Name &node:34 Load) s_parent Load) s_left Load) (list Eq) (list (Name &node:34 Load))))))) (list (Name g_staticmethod Load)) None None) (FunctionDef &_is_leaf:4 (arguments nil (list (arg &node:35 None None)) None nil nil None nil) (/seq (Return (BoolOp And (list (Compare (Attribute (Name &node:35 Load) s_left Load) (list Is) (list (Constant None None))) (Compare (Attribute (Name &node:35 Load) s_right Load) (list Is) (list (Constant None None))))))) (list (Name g_staticmethod Load)) None None) (FunctionDef &_rotate_right:4 (arguments nil (list (arg &self:36 None None) (arg &node:36 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &node:36 Load) s_parent Load)) (/seq (Assign (list (Attribute (Name &self:36 Load) s__tree Store)) (Attribute (Name &node:36 Load) s_left Load) None) (Assign (list (Attribute (Attribute (Name &node:36 Load) s_left Load) s_parent Store)) (Constant None None) None)) (/seq (If (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:36 Load)) nil) (/seq (Assign (list (Attribute (Attribute (Name &node:36 Load) s_parent Load) s_left Store)) (Attribute (Name &node:36 Load) s_left Load) None) (Assign (list (Attribute (Attribute (Name &node:36 Load) s_left Load) s_parent Store)) (Attribute (Name &node:36 Load) s_parent Load) None)) (/seq (Assign (list (Attribute (Attribute (Name &node:36 Load) s_parent Load) s_right Store)) (Attribute (Name &node:36 Load) s_left Load) None) (Assign (list (Attribute (Attribute (Name &node:36 Load) s_left Load) s_parent Store)) (Attribute (Name &node:36 Load) s_parent Load) None))))) (Assign (list (Name &bk:36 Store)) (Attribute (Attribute (Name &node:36 Load) s_left Load) s_right Load) None) (Assign (list (Attribute (Attribute (Name &node:36 Load) s_left Load) s_right Store)) (Name &node:36 Load) None) (Assign (list (Attribute (Name &node:36 Load) s_parent Store)) (Attribute (Name &node:36 Load) s_left Load) None) (Assign (list (Attribute (Name &node:36 Load) s_left Store)) (Name &bk:36 Load) None) (If (Name &bk:36 Load) (/seq (Assign (list (Attribute (Name &bk:36 Load) s_parent Store)) (Name &node:36 Load) None)) nil) (Assign (list (Attribute (Name &node:36 Load) s_height Store)) (BinOp (Call (Name g_max Load) (list (Call (Attribute (Name &self:36 Load) s_get_height Load) (list (Attribute (Name &node:36 Load) s_left Load)) nil) (Call (Attribute (Name &self:36 Load) s_get_height Load) (list (Attribute (Name &node:36 Load) s_right Load)) nil)) nil) Add (Constant i1 None)) None) (Assign (list (Attribute (Name &node:36 Load) s_num_total Store)) (BinOp (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:36 Load) s_get_num_total Load) (list (Attribute (Name &node:36 Load) s_left Load)) nil)) Add (Call (Attribute (Name &self:36 Load) s_get_num_total Load) (list (Attribute (Name &node:36 Load) s_right Load)) nil)) None) (Assign (list (Attribute (Name &node:36 Load) s_num_left Store)) (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:36 Load) s_get_num_total Load) (list (Attribute (Name &node:36 Load) s_left Load)) nil)) None)) nil None None) (FunctionDef &_rotate_left:4 (arguments nil (list (arg &self:37 None None) (arg &node:37 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &node:37 Load) s_parent Load)) (/seq (Assign (list (Attribute (Name &self:37 Load) s__tree Store)) (Attribute (Name &node:37 Load) s_right Load) None) (Assign (list (Attribute (Attribute (Name &node:37 Load) s_right Load) s_parent Store)) (Constant None None) None)) (/seq (If (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:37 Load)) nil) (/seq (Assign (list (Attribute (Attribute (Name &node:37 Load) s_parent Load) s_left Store)) (Attribute (Name &node:37 Load) s_right Load) None) (Assign (list (Attribute (Attribute (Name &node:37 Load) s_right Load) s_parent Store)) (Attribute (Name &node:37 Load) s_parent Load) None)) (/seq (Assign (list (Attribute (Attribute (Name &node:37 Load) s_parent Load) s_right Store)) (Attribute (Name &node:37 Load) s_right Load) None) (Assign (list (Attribute (Attribute (Name &node:37 Load) s_right Load) s_parent Store)) (Attribute (Name &node:37 Load) s_parent Load) None))))) (Assign (list (Name &bk:37 Store)) (Attribute (Attribute (Name &node:37 Load) s_right Load) s_left Load) None) (Assign (list (Attribute (Attribute (Name &node:37 Load) s_right Load) s_left Store)) (Name &node:37 Load) None) (Assign (list (Attribute (Name &node:37 Load) s_parent Store)) (Attribute (Name &node:37 Load) s_right Load) None) (Assign (list (Attribute (Name &node:37 Load) s_right Store)) (Name &bk:37 Load) None) (If (Name &bk:37 Load) (/seq (Assign (list (Attribute (Name &bk:37 Load) s_parent Store)) (Name &node:37 Load) None)) nil) (Assign (list (Attribute (Name &node:37 Load) s_height Store)) (BinOp (Call (Name g_max Load) (list (Call (Attribute (Name &self:37 Load) s_get_height Load) (list (Attribute (Name &node:37 Load) s_left Load)) nil) (Call (Attribute (Name &self:37 Load) s_get_height Load) (list (Attribute (Name &node:37 Load) s_right Load)) nil)) nil) Add (Constant i1 None)) None) (Assign (list (Attribute (Name &node:37 Load) s_num_total Store)) (BinOp (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:37 Load) s_get_num_total Load) (list (Attribute (Name &node:37 Load) s_left Load)) nil)) Add (Call (Attribute (Name &self:37 Load) s_get_num_total Load) (list (Attribute (Name &node:37 Load) s_right Load)) nil)) None) (Assign (list (Attribute (Name &node:37 Load) s_num_left Store)) (BinOp (Constant i1 None) Add (Call (Attribute (Name &self:37 Load) s_get_num_total Load) (list (Attribute (Name &node:37 Load) s_left Load)) nil)) None)) nil None None) (FunctionDef &_get_next:4 (arguments nil (list (arg &node:38 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Attribute (Name &node:38 Load) s_right Load)) (/seq (Return (Attribute (Name &node:38 Load) s_parent Load))) nil) (Assign (list (Name &n:38 Store)) (Attribute (Name &node:38 Load) s_right Load) None) (While (Attribute (Name &n:38 Load) s_left Load) (/seq (Assign (list (Name &n:38 Store)) (Attribute (Name &n:38 Load) s_left Load) None)) nil) (Return (Name &n:38 Load))) (list (Name g_staticmethod Load)) None None)) nil) (ClassDef &SegmentTree1:0 nil nil (/seq (FunctionDef &__init__:5 (arguments nil (list (arg &self:39 None None) (arg &data:39 None None) (arg &default:39 None None) (arg &func:39 None None)) None nil nil None (list (Constant s_z None) (Lambda (arguments nil (list (arg &a:61 None None) (arg &b:61 None None)) None nil nil None nil) (Call (Name g_min Load) (list (Name &a:61 Load) (Name &b:61 Load)) nil)))) (/seq (Expr (Constant s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd None)) (Assign (list (Attribute (Name &self:39 Load) s__default Store)) (Name &default:39 Load) None) (Assign (list (Attribute (Name &self:39 Load) s__func Store)) (Name &func:39 Load) None) (Assign (list (Attribute (Name &self:39 Load) s__len Store)) (Call (Name g_len Load) (list (Name &data:39 Load)) nil) None) (Assign (list (Attribute (Name &self:39 Load) s__size Store) (Name &_size:39 Store)) (BinOp (Constant i1 None) LShift (Call (Attribute (BinOp (Attribute (Name &self:39 Load) s__len Load) Sub (Constant i1 None)) s_bit_length Load) nil nil)) None) (Assign (list (Attribute (Name &self:39 Load) s_data Store)) (BinOp (List (list (Name &default:39 Load)) Load) Mult (BinOp (Constant i2 None) Mult (Name &_size:39 Load))) None) (Assign (list (Subscript (Attribute (Name &self:39 Load) s_data Load) (Slice (Name &_size:39 Load) (BinOp (Name &_size:39 Load) Add (Attribute (Name &self:39 Load) s__len Load)) None) Store)) (Name &data:39 Load) None) (For (Name &i:39 Store) (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:39 Load)) nil)) nil) (/seq (Assign (list (Subscript (Attribute (Name &self:39 Load) s_data Load) (Name &i:39 Load) Store)) (Call (Name &func:39 Load) (list (Subscript (Attribute (Name &self:39 Load) s_data Load) (BinOp (Name &i:39 Load) Add (Name &i:39 Load)) Load) (Subscript (Attribute (Name &self:39 Load) s_data Load) (BinOp (BinOp (Name &i:39 Load) Add (Name &i:39 Load)) Add (Constant i1 None)) Load)) nil) None)) nil None)) nil None None) (FunctionDef &__delitem__:5 (arguments nil (list (arg &self:40 None None) (arg &idx:40 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &self:40 Load) (Name &idx:40 Load) Store)) (Attribute (Name &self:40 Load) s__default Load) None)) nil None None) (FunctionDef &__getitem__:5 (arguments nil (list (arg &self:41 None None) (arg &idx:41 None None)) None nil nil None nil) (/seq (Return (Subscript (Attribute (Name &self:41 Load) s_data Load) (BinOp (Name &idx:41 Load) Add (Attribute (Name &self:41 Load) s__size Load)) Load))) nil None None) (FunctionDef &__setitem__:5 (arguments nil (list (arg &self:42 None None) (arg &idx:42 None None) (arg &value:42 None None)) None nil nil None nil) (/seq (AugAssign (Name &idx:42 Store) Add (Attribute (Name &self:42 Load) s__size Load)) (Assign (list (Subscript (Attribute (Name &self:42 Load) s_data Load) (Name &idx:42 Load) Store)) (Name &value:42 Load) None) (AugAssign (Name &idx:42 Store) RShift (Constant i1 None)) (While (Name &idx:42 Load) (/seq (Assign (list (Subscript (Attribute (Name &self:42 Load) s_data Load) (Name &idx:42 Load) Store)) (Call (Attribute (Name &self:42 Load) s__func Load) (list (Subscript (Attribute (Name &self:42 Load) s_data Load) (BinOp (Constant i2 None) Mult (Name &idx:42 Load)) Load) (Subscript (Attribute (Name &self:42 Load) s_data Load) (BinOp (BinOp (Constant i2 None) Mult (Name &idx:42 Load)) Add (Constant i1 None)) Load)) nil) None) (AugAssign (Name &idx:42 Store) RShift (Constant i1 None))) nil)) nil None None) (FunctionDef &__len__:5 (arguments nil (list (arg &self:43 None None)) None nil nil None nil) (/seq (Return (Attribute (Name &self:43 Load) s__len Load))) nil None None) (FunctionDef &query:5 (arguments nil (list (arg &self:44 None None) (arg &start:44 None None) (arg &stop:44 None None)) None nil nil None nil) (/seq (If (Compare (Name &start:44 Load) (list Eq) (list (Name &stop:44 Load))) (/seq (Return (Call (Attribute (Name &self:44 Load) s___getitem__ Load) (list (Name &start:44 Load)) nil))) nil) (AugAssign (Name &stop:44 Store) Add (Constant i1 None)) (AugAssign (Name &start:44 Store) Add (Attribute (Name &self:44 Load) s__size Load)) (AugAssign (Name &stop:44 Store) Add (Attribute (Name &self:44 Load) s__size Load)) (Assign (list (Name &res:44 Store)) (Attribute (Name &self:44 Load) s__default Load) None) (While (Compare (Name &start:44 Load) (list Lt) (list (Name &stop:44 Load))) (/seq (If (BinOp (Name &start:44 Load) BitAnd (Constant i1 None)) (/seq (Assign (list (Name &res:44 Store)) (Call (Attribute (Name &self:44 Load) s__func Load) (list (Name &res:44 Load) (Subscript (Attribute (Name &self:44 Load) s_data Load) (Name &start:44 Load) Load)) nil) None) (AugAssign (Name &start:44 Store) Add (Constant i1 None))) nil) (If (BinOp (Name &stop:44 Load) BitAnd (Constant i1 None)) (/seq (AugAssign (Name &stop:44 Store) Sub (Constant i1 None)) (Assign (list (Name &res:44 Store)) (Call (Attribute (Name &self:44 Load) s__func Load) (list (Name &res:44 Load) (Subscript (Attribute (Name &self:44 Load) s_data Load) (Name &stop:44 Load) Load)) nil) None)) nil) (AugAssign (Name &start:44 Store) RShift (Constant i1 None)) (AugAssign (Name &stop:44 Store) RShift (Constant i1 None))) nil) (Return (Name &res:44 Load))) nil None None) (FunctionDef &__repr__:5 (arguments nil (list (arg &self:45 None None)) None nil nil None nil) (/seq (Return (Call (Attribute (Constant s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd None) s_format Load) (list (Attribute (Name &self:45 Load) s_data Load)) nil))) nil None None)) nil) (ClassDef &SegmentTree:0 nil nil (/seq (FunctionDef &__init__:6 (arguments nil (list (arg &self:46 None None) (arg &data:46 None None) (arg &default:46 None None) (arg &func:46 None None)) None nil nil None (list (Constant i0 None) (Lambda (arguments nil (list (arg &a:62 None None) (arg &b:62 None None)) None nil nil None nil) (BinOp (Name &a:62 Load) Add (Name &b:62 Load))))) (/seq (Expr (Constant s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd None)) (Assign (list (Attribute (Name &self:46 Load) s__default Store)) (Name &default:46 Load) None) (Assign (list (Attribute (Name &self:46 Load) s__func Store)) (Name &func:46 Load) None) (Assign (list (Attribute (Name &self:46 Load) s__len Store)) (Call (Name g_len Load) (list (Name &data:46 Load)) nil) None) (Assign (list (Attribute (Name &self:46 Load) s__size Store) (Name &_size:46 Store)) (BinOp (Constant i1 None) LShift (Call (Attribute (BinOp (Attribute (Name &self:46 Load) s__len Load) Sub (Constant i1 None)) s_bit_length Load) nil nil)) None) (Assign (list (Attribute (Name &self:46 Load) s_data Store)) (BinOp (List (list (Name &default:46 Load)) Load) Mult (BinOp (Constant i2 None) Mult (Name &_size:46 Load))) None) (Assign (list (Subscript (Attribute (Name &self:46 Load) s_data Load) (Slice (Name &_size:46 Load) (BinOp (Name &_size:46 Load) Add (Attribute (Name &self:46 Load) s__len Load)) None) Store)) (Name &data:46 Load) None) (For (Name &i:46 Store) (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:46 Load)) nil)) nil) (/seq (Assign (list (Subscript (Attribute (Name &self:46 Load) s_data Load) (Name &i:46 Load) Store)) (Call (Name &func:46 Load) (list (Subscript (Attribute (Name &self:46 Load) s_data Load) (BinOp (Name &i:46 Load) Add (Name &i:46 Load)) Load) (Subscript (Attribute (Name &self:46 Load) s_data Load) (BinOp (BinOp (Name &i:46 Load) Add (Name &i:46 Load)) Add (Constant i1 None)) Load)) nil) None)) nil None)) nil None None) (FunctionDef &__delitem__:6 (arguments nil (list (arg &self:47 None None) (arg &idx:47 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &self:47 Load) (Name &idx:47 Load) Store)) (Attribute (Name &self:47 Load) s__default Load) None)) nil None None) (FunctionDef &__getitem__:6 (arguments nil (list (arg &self:48 None None) (arg &idx:48 None None)) None nil nil None nil) (/seq (Return (Subscript (Attribute (Name &self:48 Load) s_data Load) (BinOp (Name &idx:48 Load) Add (Attribute (Name &self:48 Load) s__size Load)) Load))) nil None None) (FunctionDef &__setitem__:6 (arguments nil (list (arg &self:49 None None) (arg &idx:49 None None) (arg &value:49 None None)) None nil nil None nil) (/seq (AugAssign (Name &idx:49 Store) Add (Attribute (Name &self:49 Load) s__size Load)) (Assign (list (Subscript (Attribute (Name &self:49 Load) s_data Load) (Name &idx:49 Load) Store)) (Name &value:49 Load) None) (AugAssign (Name &idx:49 Store) RShift (Constant i1 None)) (While (Name &idx:49 Load) (/seq (Assign (list (Subscript (Attribute (Name &self:49 Load) s_data Load) (Name &idx:49 Load) Store)) (Call (Attribute (Name &self:49 Load) s__func Load) (list (Subscript (Attribute (Name &self:49 Load) s_data Load) (BinOp (Constant i2 None) Mult (Name &idx:49 Load)) Load) (Subscript (Attribute (Name &self:49 Load) s_data Load) (BinOp (BinOp (Constant i2 None) Mult (Name &idx:49 Load)) Add (Constant i1 None)) Load)) nil) None) (AugAssign (Name &idx:49 Store) RShift (Constant i1 None))) nil)) nil None None) (FunctionDef &__len__:6 (arguments nil (list (arg &self:50 None None)) None nil nil None nil) (/seq (Return (Attribute (Name &self:50 Load) s__len Load))) nil None None) (FunctionDef &query:6 (arguments nil (list (arg &self:51 None None) (arg &start:51 None None) (arg &stop:51 None None)) None nil nil None nil) (/seq (If (Compare (Name &start:51 Load) (list Eq) (list (Name &stop:51 Load))) (/seq (Return (Call (Attribute (Name &self:51 Load) s___getitem__ Load) (list (Name &start:51 Load)) nil))) nil) (AugAssign (Name &stop:51 Store) Add (Constant i1 None)) (AugAssign (Name &start:51 Store) Add (Attribute (Name &self:51 Load) s__size Load)) (AugAssign (Name &stop:51 Store) Add (Attribute (Name &self:51 Load) s__size Load)) (Assign (list (Name &res:51 Store)) (Attribute (Name &self:51 Load) s__default Load) None) (While (Compare (Name &start:51 Load) (list Lt) (list (Name &stop:51 Load))) (/seq (If (BinOp (Name &start:51 Load) BitAnd (Constant i1 None)) (/seq (Assign (list (Name &res:51 Store)) (Call (Attribute (Name &self:51 Load) s__func Load) (list (Name &res:51 Load) (Subscript (Attribute (Name &self:51 Load) s_data Load) (Name &start:51 Load) Load)) nil) None) (AugAssign (Name &start:51 Store) Add (Constant i1 None))) nil) (If (BinOp (Name &stop:51 Load) BitAnd (Constant i1 None)) (/seq (AugAssign (Name &stop:51 Store) Sub (Constant i1 None)) (Assign (list (Name &res:51 Store)) (Call (Attribute (Name &self:51 Load) s__func Load) (list (Name &res:51 Load) (Subscript (Attribute (Name &self:51 Load) s_data Load) (Name &stop:51 Load) Load)) nil) None)) nil) (AugAssign (Name &start:51 Store) RShift (Constant i1 None)) (AugAssign (Name &stop:51 Store) RShift (Constant i1 None))) nil) (Return (Name &res:51 Load))) nil None None) (FunctionDef &__repr__:6 (arguments nil (list (arg &self:52 None None)) None nil nil None nil) (/seq (Return (Call (Attribute (Constant s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd None) s_format Load) (list (Attribute (Name &self:52 Load) s_data Load)) nil))) nil None None)) nil) (ClassDef &Factorial:0 nil nil (/seq (FunctionDef &__init__:7 (arguments nil (list (arg &self:53 None None) (arg &MOD:53 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:53 Load) s_MOD Store)) (Name &MOD:53 Load) None) (Assign (list (Attribute (Name &self:53 Load) s_factorials Store)) (List (list (Constant i1 None) (Constant i1 None)) Load) None) (Assign (list (Attribute (Name &self:53 Load) s_invModulos Store)) (List (list (Constant i0 None) (Constant i1 None)) Load) None) (Assign (list (Attribute (Name &self:53 Load) s_invFactorial_ Store)) (List (list (Constant i1 None) (Constant i1 None)) Load) None)) nil None None) (FunctionDef &calc:7 (arguments nil (list (arg &self:54 None None) (arg &n:54 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:54 Load) (list LtE) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTAsIDMzXQ== None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ== None) Add (Call (Name g_str Load) (list (Name &n:54 Load)) nil))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (Compare (Name &n:54 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:54 Load) s_factorials Load)) nil))) (/seq (Return (Subscript (Attribute (Name &self:54 Load) s_factorials Load) (Name &n:54 Load) Load))) nil) (Assign (list (Name &nextArr:54 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Name &n:54 Load) Add (Constant i1 None)) Sub (Call (Name g_len Load) (list (Attribute (Name &self:54 Load) s_factorials Load)) nil))) None) (Assign (list (Name &initialI:54 Store)) (Call (Name g_len Load) (list (Attribute (Name &self:54 Load) s_factorials Load)) nil) None) (Assign (list (Name &prev:54 Store)) (Subscript (Attribute (Name &self:54 Load) s_factorials Load) (UnaryOp USub (Constant i1 None)) Load) None) (Assign (list (Name &m:54 Store)) (Attribute (Name &self:54 Load) s_MOD Load) None) (For (Name &i:54 Store) (Call (Name g_range Load) (list (Name &initialI:54 Load) (BinOp (Name &n:54 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &prev:54 Store) (Subscript (Name &nextArr:54 Load) (BinOp (Name &i:54 Load) Sub (Name &initialI:54 Load)) Store)) (BinOp (BinOp (Name &prev:54 Load) Mult (Name &i:54 Load)) Mod (Name &m:54 Load)) None)) nil None) (AugAssign (Attribute (Name &self:54 Load) s_factorials Store) Add (Name &nextArr:54 Load)) (Return (Subscript (Attribute (Name &self:54 Load) s_factorials Load) (Name &n:54 Load) Load))) nil None None) (FunctionDef &inv:7 (arguments nil (list (arg &self:55 None None) (arg &n:55 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:55 Load) (list LtE) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTAsIDk0LCA0MCwgNDUsIDQ5LCA0MV0= None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ== None) Add (Call (Name g_str Load) (list (Name &n:55 Load)) nil))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (Assign (list (Name &p:55 Store)) (Attribute (Name &self:55 Load) s_MOD Load) None) (Assign (list (Name &pi:55 Store)) (BinOp (Name &n:55 Load) Mod (Name &p:55 Load)) None) (If (Compare (Name &pi:55 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_invModulos Load)) nil))) (/seq (Return (Subscript (Attribute (Name &self:55 Load) s_invModulos Load) (Name &pi:55 Load) Load))) nil) (Assign (list (Name &nextArr:55 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Name &n:55 Load) Add (Constant i1 None)) Sub (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_invModulos Load)) nil))) None) (Assign (list (Name &initialI:55 Store)) (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_invModulos Load)) nil) None) (For (Name &i:55 Store) (Call (Name g_range Load) (list (Name &initialI:55 Load) (Call (Name g_min Load) (list (Name &p:55 Load) (BinOp (Name &n:55 Load) Add (Constant i1 None))) nil)) nil) (/seq (Assign (list (Name &next:55 Store)) (BinOp (BinOp (UnaryOp USub (Subscript (Attribute (Name &self:55 Load) s_invModulos Load) (BinOp (Name &p:55 Load) Mod (Name &i:55 Load)) Load)) Mult (BinOp (Name &p:55 Load) FloorDiv (Name &i:55 Load))) Mod (Name &p:55 Load)) None) (Expr (Call (Attribute (Attribute (Name &self:55 Load) s_invModulos Load) s_append Load) (list (Name &next:55 Load)) nil))) nil None) (Return (Subscript (Attribute (Name &self:55 Load) s_invModulos Load) (Name &pi:55 Load) Load))) nil None None) (FunctionDef &invFactorial:7 (arguments nil (list (arg &self:56 None None) (arg &n:56 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:56 Load) (list LtE) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCA0MCwgMTEwLCA5NCwgNDAsIDQ1LCA0OSwgNDEsIDQxLCAzM10= None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ== None) Add (Call (Name g_str Load) (list (Name &n:56 Load)) nil))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (Compare (Name &n:56 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invFactorial_ Load)) nil))) (/seq (Return (Subscript (Attribute (Name &self:56 Load) s_invFactorial_ Load) (Name &n:56 Load) Load))) nil) (Expr (Call (Attribute (Name &self:56 Load) s_inv Load) (list (Name &n:56 Load)) nil)) (Assign (list (Name &nextArr:56 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Name &n:56 Load) Add (Constant i1 None)) Sub (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invFactorial_ Load)) nil))) None) (Assign (list (Name &initialI:56 Store)) (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invFactorial_ Load)) nil) None) (Assign (list (Name &prev:56 Store)) (Subscript (Attribute (Name &self:56 Load) s_invFactorial_ Load) (UnaryOp USub (Constant i1 None)) Load) None) (Assign (list (Name &p:56 Store)) (Attribute (Name &self:56 Load) s_MOD Load) None) (For (Name &i:56 Store) (Call (Name g_range Load) (list (Name &initialI:56 Load) (BinOp (Name &n:56 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &prev:56 Store) (Subscript (Name &nextArr:56 Load) (BinOp (Name &i:56 Load) Sub (Name &initialI:56 Load)) Store)) (BinOp (BinOp (Name &prev:56 Load) Mult (Subscript (Attribute (Name &self:56 Load) s_invModulos Load) (BinOp (Name &i:56 Load) Mod (Name &p:56 Load)) Load)) Mod (Name &p:56 Load)) None)) nil None) (AugAssign (Attribute (Name &self:56 Load) s_invFactorial_ Store) Add (Name &nextArr:56 Load)) (Return (Subscript (Attribute (Name &self:56 Load) s_invFactorial_ Load) (Name &n:56 Load) Load))) nil None None)) nil) (ClassDef &Combination:0 nil nil (/seq (FunctionDef &__init__:8 (arguments nil (list (arg &self:57 None None) (arg &MOD:57 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:57 Load) s_MOD Store)) (Name &MOD:57 Load) None) (Assign (list (Attribute (Name &self:57 Load) s_factorial Store)) (Call (Name &Factorial:0 Load) (list (Name &MOD:57 Load)) nil) None)) nil None None) (FunctionDef &ncr:8 (arguments nil (list (arg &self:58 None None) (arg &n:58 None None) (arg &k:58 None None)) None nil nil None nil) (/seq (If (BoolOp Or (list (Compare (Name &k:58 Load) (list Lt) (list (Constant i0 None))) (Compare (Name &n:58 Load) (list Lt) (list (Name &k:58 Load))))) (/seq (Return (Constant i0 None))) nil) (Assign (list (Name &k:58 Store)) (Call (Name g_min Load) (list (Name &k:58 Load) (BinOp (Name &n:58 Load) Sub (Name &k:58 Load))) nil) None) (Assign (list (Name &f:58 Store)) (Attribute (Name &self:58 Load) s_factorial Load) None) (Return (BinOp (BinOp (BinOp (Call (Attribute (Name &f:58 Load) s_calc Load) (list (Name &n:58 Load)) nil) Mult (Call (Attribute (Name &f:58 Load) s_invFactorial Load) (list (Call (Name g_max Load) (list (BinOp (Name &n:58 Load) Sub (Name &k:58 Load)) (Name &k:58 Load)) nil)) nil)) Mult (Call (Attribute (Name &f:58 Load) s_invFactorial Load) (list (Call (Name g_min Load) (list (Name &k:58 Load) (BinOp (Name &n:58 Load) Sub (Name &k:58 Load))) nil)) nil)) Mod (Attribute (Name &self:58 Load) s_MOD Load)))) nil None None)) nil) (FunctionDef &powm:0 (arguments nil (list (arg &a:9 None None) (arg &n:9 None None) (arg &m:9 None None)) None nil nil None nil) (/seq (If (BoolOp Or (list (Compare (Name &a:9 Load) (list Eq) (list (Constant i1 None))) (Compare (Name &n:9 Load) (list Eq) (list (Constant i0 None))))) (/seq (Return (Constant i1 None))) nil) (If (Compare (BinOp (Name &n:9 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &s:9 Store)) (Call (Name &powm:0 Load) (list (Name &a:9 Load) (BinOp (Name &n:9 Load) FloorDiv (Constant i2 None)) (Name &m:9 Load)) nil) None) (Return (BinOp (BinOp (Name &s:9 Load) Mult (Name &s:9 Load)) Mod (Name &m:9 Load)))) (/seq (Return (BinOp (BinOp (Name &a:9 Load) Mult (Call (Name &powm:0 Load) (list (Name &a:9 Load) (BinOp (Name &n:9 Load) Sub (Constant i1 None)) (Name &m:9 Load)) nil)) Mod (Name &m:9 Load)))))) nil None None) (FunctionDef &sort_list:0 (arguments nil (list (arg &list1:10 None None) (arg &list2:10 None None)) None nil nil None nil) (/seq (Assign (list (Name &zipped_pairs:10 Store)) (Call (Name g_zip Load) (list (Name &list2:10 Load) (Name &list1:10 Load)) nil) None) (Assign (list (Name &z:10 Store)) (ListComp (Name &x:59 Load) (list (comprehension (Tuple (list (Name &_:59 Store) (Name &x:59 Store)) Store) (Call (Name g_sorted Load) (list (Name &zipped_pairs:10 Load)) nil) nil i0))) None) (Return (Name &z:10 Load))) nil None None) (FunctionDef &product:0 (arguments nil (list (arg &l:11 None None)) None nil nil None nil) (/seq (Assign (list (Name &por:11 Store)) (Constant i1 None) None) (For (Name &i:11 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &l:11 Load)) nil)) nil) (/seq (AugAssign (Name &por:11 Store) Mult (Subscript (Name &l:11 Load) (Name &i:11 Load) Load))) nil None) (Return (Name &por:11 Load))) nil None None) (FunctionDef &binarySearchCount:0 (arguments nil (list (arg &arr:12 None None) (arg &n:12 None None) (arg &key:12 None None)) None nil nil None nil) (/seq (Assign (list (Name &left:12 Store)) (Constant i0 None) None) (Assign (list (Name &right:12 Store)) (BinOp (Name &n:12 Load) Sub (Constant i1 None)) None) (Assign (list (Name &count:12 Store)) (Constant i0 None) None) (While (Compare (Name &left:12 Load) (list LtE) (list (Name &right:12 Load))) (/seq (Assign (list (Name &mid:12 Store)) (Call (Name g_int Load) (list (BinOp (BinOp (Name &right:12 Load) Add (Name &left:12 Load)) Div (Constant i2 None))) nil) None) (If (Compare (Subscript (Name &arr:12 Load) (Name &mid:12 Load) Load) (list Lt) (list (Name &key:12 Load))) (/seq (Assign (list (Name &count:12 Store)) (BinOp (Name &mid:12 Load) Add (Constant i1 None)) None) (Assign (list (Name &left:12 Store)) (BinOp (Name &mid:12 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &right:12 Store)) (BinOp (Name &mid:12 Load) Sub (Constant i1 None)) None)))) nil) (Return (Name &count:12 Load))) nil None None) (FunctionDef &countdig:0 (arguments nil (list (arg &n:13 None None)) None nil nil None nil) (/seq (Assign (list (Name &c:13 Store)) (Constant i0 None) None) (While (Compare (Name &n:13 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &n:13 Store) FloorDiv (Constant i10 None)) (AugAssign (Name &c:13 Store) Add (Constant i1 None))) nil) (Return (Name &c:13 Load))) nil None None) (FunctionDef &binary:0 (arguments nil (list (arg &x:14 None None) (arg &length:14 None None)) None nil nil None nil) (/seq (Assign (list (Name &y:14 Store)) (Subscript (Call (Name g_bin Load) (list (Name &x:14 Load)) nil) (Slice (Constant i2 None) None None) Load) None) (Return (IfExp (Compare (Call (Name g_len Load) (list (Name &y:14 Load)) nil) (list GtE) (list (Name &length:14 Load))) (Name &y:14 Load) (BinOp (BinOp (Constant s_0 None) Mult (BinOp (Name &length:14 Load) Sub (Call (Name g_len Load) (list (Name &y:14 Load)) nil))) Add (Name &y:14 Load))))) nil None None) (FunctionDef &countGreater:0 (arguments nil (list (arg &arr:15 None None) (arg &n:15 None None) (arg &k:15 None None)) None nil nil None nil) (/seq (Assign (list (Name &l:15 Store)) (Constant i0 None) None) (Assign (list (Name &r:15 Store)) (BinOp (Name &n:15 Load) Sub (Constant i1 None)) None) (Assign (list (Name &leftGreater:15 Store)) (Name &n:15 Load) None) (While (Compare (Name &l:15 Load) (list LtE) (list (Name &r:15 Load))) (/seq (Assign (list (Name &m:15 Store)) (Call (Name g_int Load) (list (BinOp (Name &l:15 Load) Add (BinOp (BinOp (Name &r:15 Load) Sub (Name &l:15 Load)) Div (Constant i2 None)))) nil) None) (If (Compare (Subscript (Name &arr:15 Load) (Name &m:15 Load) Load) (list GtE) (list (Name &k:15 Load))) (/seq (Assign (list (Name &leftGreater:15 Store)) (Name &m:15 Load) None) (Assign (list (Name &r:15 Store)) (BinOp (Name &m:15 Load) Sub (Constant i1 None)) None)) (/seq (Assign (list (Name &l:15 Store)) (BinOp (Name &m:15 Load) Add (Constant i1 None)) None)))) nil) (Return (BinOp (Name &n:15 Load) Sub (Name &leftGreater:15 Load)))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &l:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &s:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &d1:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_list Load)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Subscript (Name &d1:0 Load) (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) Load) s_append Load) (list (Subscript (Name &s:0 Load) (Name &i:0 Load) Load)) nil))) nil None) (Expr (Call (Attribute (Name &s:0 Load) s_sort Load) nil nil)) (Assign (list (Name &d:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_list Load)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Subscript (Name &d:0 Load) (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) Load) s_append Load) (list (Name &i:0 Load)) nil))) nil None) (For (Name &i:0 Store) (Name &d:0 Load) (/seq (Expr (Call (Attribute (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) s_sort Load) nil nil)) (Assign (list (Subscript (Name &d:0 Load) (Name &i:0 Load) Store)) (Call (Name g_deque Load) (list (Subscript (Name &d:0 Load) (Name &i:0 Load) Load)) nil) None)) nil None) (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil)) (Assign (list (Name &u:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &u1:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &s:0 Store)) (Call (Name &SegmentTree:0 Load) (list (Name &u:0 Load)) nil) None) (Assign (list (Name &s1:0 Store)) (Call (Name &SegmentTree:0 Load) (list (Name &u1:0 Load)) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &sp:0 Store)) (Subscript (Subscript (Name &d1:0 Load) (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) Load) (UnaryOp USub (Constant i1 None)) Load) None) (Expr (Call (Attribute (Subscript (Name &d1:0 Load) (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) Load) s_pop Load) nil nil)) (Assign (list (Name &pos:0 Store)) (Subscript (Subscript (Name &d:0 Load) (Name &sp:0 Load) Load) (Constant i0 None) Load) None) (Expr (Call (Attribute (Subscript (Name &d:0 Load) (Name &sp:0 Load) Load) s_popleft Load) nil nil)) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Call (Attribute (Name &s:0 Load) s_query Load) (list (Constant i0 None) (BinOp (Name &pos:0 Load) Sub (Constant i1 None))) nil) Mult (Subscript (Name &l:0 Load) (Name &i:0 Load) Load)) Sub (Call (Attribute (Name &s1:0 Load) s_query Load) (list (Constant i0 None) (BinOp (Name &pos:0 Load) Sub (Constant i1 None))) nil))) (Expr (Call (Attribute (Name &s:0 Load) s___setitem__ Load) (list (Name &pos:0 Load) (Constant i1 None)) nil)) (Expr (Call (Attribute (Name &s1:0 Load) s___setitem__ Load) (list (Name &pos:0 Load) (Subscript (Name &l:0 Load) (Name &i:0 Load) Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (ImportFrom s_collections (list (alias &defaultdict:0 None)) i0) (FunctionDef &compress:0 (arguments nil (list (arg &l:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &l:2 Store)) (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Name &l:2 Load)) nil)) nil) None) (Expr (Call (Attribute (Name &l:2 Load) s_sort Load) nil nil)) (Assign (list (Name &idx:2 Store)) (Call (Name &defaultdict:0 Load) (list (Name g_int Load)) nil) None) (Assign (list (Name &c:2 Store)) (Constant i0 None) None) (For (Name &li:2 Store) (Name &l:2 Load) (/seq (Assign (list (Subscript (Name &idx:2 Load) (Name &li:2 Load) Store)) (Name &c:2 Load) None) (AugAssign (Name &c:2 Store) Add (Constant i1 None))) nil None) (Return (Name &idx:2 Load))) nil None None) (ClassDef &BIT:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_n Store)) (Name &n:3 Load) None) (Assign (list (Attribute (Name &self:3 Load) s_bit Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None)) nil None None) (FunctionDef &add:1 (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &x:4 None None)) None nil nil None nil) (/seq (AugAssign (Name &i:4 Store) Add (Constant i1 None)) (While (Compare (Name &i:4 Load) (list LtE) (list (Attribute (Name &self:4 Load) s_n Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:4 Load) s_bit Load) (Name &i:4 Load) Store) Add (Name &x:4 Load)) (fn_3 &i:4)) nil)) nil None None) (FunctionDef &acc:1 (arguments nil (list (arg &self:5 None None) (arg &i:5 None None)) None nil nil None nil) (/seq (AugAssign (Name &i:5 Store) Add (Constant i1 None)) (Assign (list (Name &s:5 Store)) (Constant i0 None) None) (While (Compare (Name &i:5 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:5 Store) Add (Subscript (Attribute (Name &self:5 Load) s_bit Load) (Name &i:5 Load) Load)) (fn_2 &i:5)) nil) (Return (Name &s:5 Load))) nil None None)) nil) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &v:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &xv:0 Store)) (ListComp (Tuple (list (Name &xi:6 Load) (Name &vi:6 Load)) Load) (list (comprehension (Tuple (list (Name &xi:6 Store) (Name &vi:6 Store)) Store) (Call (Name g_zip Load) (list (Name &x:0 Load) (Name &v:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &xv:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &t:7 None None)) None nil nil None nil) (Subscript (Name &t:7 Load) (Constant i0 None) Load)))))) (Assign (list (Name &idx:0 Store)) (Call (Name &compress:0 Load) (list (Name &v:0 Load)) nil) None) (Assign (list (Name &sum_bit:0 Store)) (Call (Name &BIT:0 Load) (list (Call (Name g_len Load) (list (Name &idx:0 Load)) nil)) nil) None) (Assign (list (Name &cnt_bit:0 Store)) (Call (Name &BIT:0 Load) (list (Call (Name g_len Load) (list (Name &idx:0 Load)) nil)) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Tuple (list (Name &xi:0 Store) (Name &vi:0 Store)) Store) (Name &xv:0 Load) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Call (Attribute (Name &cnt_bit:0 Load) s_acc Load) (list (Subscript (Name &idx:0 Load) (Name &vi:0 Load) Load)) nil) Mult (Name &xi:0 Load)) Sub (Call (Attribute (Name &sum_bit:0 Load) s_acc Load) (list (Subscript (Name &idx:0 Load) (Name &vi:0 Load) Load)) nil))) (Expr (Call (Attribute (Name &sum_bit:0 Load) s_add Load) (list (Subscript (Name &idx:0 Load) (Name &vi:0 Load) Load) (Name &xi:0 Load)) nil)) (Expr (Call (Attribute (Name &cnt_bit:0 Load) s_add Load) (list (Subscript (Name &idx:0 Load) (Name &vi:0 Load) Load) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (FunctionDef &bitadd:0 (arguments nil (list (arg &a:1 None None) (arg &w:1 None None) (arg &bit:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &x:1 Store)) (Name &a:1 Load) None) (While (Compare (Name &x:1 Load) (list LtE) (list (BinOp (Call (Name g_len Load) (list (Name &bit:1 Load)) nil) Sub (Constant i1 None)))) (/seq (AugAssign (Subscript (Name &bit:1 Load) (Name &x:1 Load) Store) Add (Name &w:1 Load)) (AugAssign (Name &x:1 Store) Add (BinOp (Name &x:1 Load) BitAnd (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &x:1 Load))))) nil)) nil None None) (FunctionDef &bitsum:0 (arguments nil (list (arg &a:2 None None) (arg &bit:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &ret:2 Store)) (Constant i0 None) None) (Assign (list (Name &x:2 Store)) (Name &a:2 Load) None) (While (Compare (Name &x:2 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &ret:2 Store) Add (Subscript (Name &bit:2 Load) (Name &x:2 Load) Load)) (AugAssign (Name &x:2 Store) Sub (BinOp (Name &x:2 Load) BitAnd (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &x:2 Load))))) nil) (Return (Name &ret:2 Load))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (fn_1 (Name g_input Load)) None) (Assign (list (Name &v:0 Store)) (fn_1 (Name g_input Load)) None) (Assign (list (Name &vlis:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Name &v:0 Load) (/seq (Expr (Call (Attribute (Name &vlis:0 Load) s_append Load) (list (Name &i:0 Load)) nil))) nil None) (Expr (Call (Attribute (Name &vlis:0 Load) s_sort Load) nil nil)) (Assign (list (Name &vdic:0 Store)) (Dict nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Subscript (Name &vdic:0 Load) (Subscript (Name &vlis:0 Load) (Name &i:0 Load) Load) Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None)) nil None) (Assign (list (Name &xv:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &xv:0 Load) s_append Load) (list (List (list (Subscript (Name &x:0 Load) (Name &i:0 Load) Load) (Subscript (Name &v:0 Load) (Name &i:0 Load) Load)) Load)) nil))) nil None) (Expr (Call (Attribute (Name &xv:0 Load) s_sort Load) nil nil)) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &BIT:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &BIT2:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &x:0 Store) (Name &v:0 Store)) Store)) (Subscript (Name &xv:0 Load) (Name &i:0 Load) Load) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &x:0 Load) Mult (Call (Name &bitsum:0 Load) (list (Subscript (Name &vdic:0 Load) (Name &v:0 Load) Load) (Name &BIT2:0 Load)) nil)) Sub (Call (Name &bitsum:0 Load) (list (Subscript (Name &vdic:0 Load) (Name &v:0 Load) Load) (Name &BIT:0 Load)) nil))) (Expr (Call (Name &bitadd:0 Load) (list (Subscript (Name &vdic:0 Load) (Name &v:0 Load) Load) (Name &x:0 Load) (Name &BIT:0 Load)) nil)) (Expr (Call (Name &bitadd:0 Load) (list (Subscript (Name &vdic:0 Load) (Name &v:0 Load) Load) (Constant i1 None) (Name &BIT2:0 Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (ClassDef &Points:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &x:3 None None) (arg &v:3 None None)) None nil nil None (list (Constant i0 None) (Constant i0 None))) (/seq (Assign (list (Tuple (list (Attribute (Name &self:3 Load) s_x Store) (Attribute (Name &self:3 Load) s_v Store)) Store)) (Tuple (list (Name &x:3 Load) (Name &v:3 Load)) Load) None)) nil None None)) nil) (ClassDef &Fenwick_tree:0 nil nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:4 None None) (arg &n:4 None None)) None nil nil None (list (Constant i0 None))) (/seq (Assign (list (Attribute (Name &self:4 Load) s_n Store)) (Name &n:4 Load) None) (Assign (list (Attribute (Name &self:4 Load) s_bit Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:4 Load) Add (Constant i1 None))) None)) nil None None) (FunctionDef &update:2 (arguments nil (list (arg &self:5 None None) (arg &x:5 None None) (arg &value:5 None None)) None nil nil None nil) (/seq (While (Compare (Name &x:5 Load) (list LtE) (list (Attribute (Name &self:5 Load) s_n Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:5 Load) s_bit Load) (Name &x:5 Load) Store) Add (Name &value:5 Load)) (fn_3 &x:5)) nil)) nil None None) (FunctionDef &get:2 (arguments nil (list (arg &self:6 None None) (arg &x:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &sum:6 Store)) (Constant i0 None) None) (While (Compare (Name &x:6 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &sum:6 Store) Add (Subscript (Attribute (Name &self:6 Load) s_bit Load) (Name &x:6 Load) Load)) (fn_2 &x:6)) nil) (Return (Name &sum:6 Load))) nil None None)) nil) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &v:0 Store)) Store)) (Tuple (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) (fn_1 (Name g_input Load)) (fn_1 (Name g_input Load))) Load) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name &Points:0 Load) (list (Subscript (Name &x:0 Load) (Name &i:7 Load) Load) (Subscript (Name &v:0 Load) (Name &i:7 Load) Load)) nil) (list (comprehension (Name &i:7 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &value:9 None None)) None nil nil None nil) (Attribute (Name &value:9 Load) s_x Load)))))) (Assign (list (Name &v:0 Store)) (ListComp (Attribute (Subscript (Name &a:0 Load) (Name &i:8 Load) Load) s_v Load) (list (comprehension (Name &i:8 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &v:0 Load) s_sort Load) nil nil)) (Assign (list (Name &data:0 Store)) (Dict nil nil) None) (Assign (list (Name &cnt:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (UnaryOp Not (Call (Attribute (Name &data:0 Load) s___contains__ Load) (list (Subscript (Name &v:0 Load) (Name &i:0 Load) Load)) nil)) (/seq (Assign (list (Subscript (Name &data:0 Load) (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) Store)) (Name &cnt:0 Load) None) (AugAssign (Name &cnt:0 Store) Add (Constant i1 None))) nil)) nil None) (Assign (list (Name &cnt:0 Store)) (Call (Name &Fenwick_tree:0 Load) (list (Name &n:0 Load)) nil) None) (Assign (list (Name &sum:0 Store)) (Call (Name &Fenwick_tree:0 Load) (list (Name &n:0 Load)) nil) None) (Assign (list (Tuple (list (Name &res:0 Store) (Name &i:0 Store)) Store)) (Tuple (list (Constant i0 None) (Constant i0 None)) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Store)) (Subscript (Name &data:0 Load) (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load) Load) None) (AugAssign (Name &res:0 Store) Add (BinOp (BinOp (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_x Load) Mult (Call (Attribute (Name &cnt:0 Load) s_get Load) (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load)) nil)) Sub (Call (Attribute (Name &sum:0 Load) s_get Load) (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load)) nil))) (Expr (Call (Attribute (Name &cnt:0 Load) s_update Load) (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load) (Constant i1 None)) nil)) (Expr (Call (Attribute (Name &sum:0 Load) s_update Load) (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load) (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_x Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))) nil)",
            "(Module (/seq (ClassDef &SegmentTree:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:9 None None) (arg &arr:9 None None) (arg &func:9 None None) (arg &initialRes:9 None None)) None nil nil None (list (Constant i0 None))) (/seq (Assign (list (Attribute (Name &self:9 Load) s_f Store)) (Name &func:9 Load) None) (Assign (list (Attribute (Name &self:9 Load) s_N Store)) (Call (Name g_len Load) (list (Name &arr:9 Load)) nil) None) (Assign (list (Attribute (Name &self:9 Load) s_tree Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:14 Store) (Call (Name g_range Load) (list (BinOp (Constant i4 None) Mult (Attribute (Name &self:9 Load) s_N Load))) nil) nil i0))) None) (Assign (list (Attribute (Name &self:9 Load) s_initialRes Store)) (Name &initialRes:9 Load) None) (For (Name &i:9 Store) (Call (Name g_range Load) (list (Attribute (Name &self:9 Load) s_N Load)) nil) (/seq (Assign (list (Subscript (Attribute (Name &self:9 Load) s_tree Load) (BinOp (Attribute (Name &self:9 Load) s_N Load) Add (Name &i:9 Load)) Store)) (Subscript (Name &arr:9 Load) (Name &i:9 Load) Load) None)) nil None) (For (Name &i:9 Store) (Call (Name g_range Load) (list (BinOp (Attribute (Name &self:9 Load) s_N Load) Sub (Constant i1 None)) (Constant i0 None) (UnaryOp USub (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Attribute (Name &self:9 Load) s_tree Load) (Name &i:9 Load) Store)) (Call (Attribute (Name &self:9 Load) s_f Load) (list (Subscript (Attribute (Name &self:9 Load) s_tree Load) (BinOp (Name &i:9 Load) LShift (Constant i1 None)) Load) (Subscript (Attribute (Name &self:9 Load) s_tree Load) (BinOp (BinOp (Name &i:9 Load) LShift (Constant i1 None)) BitOr (Constant i1 None)) Load)) nil) None)) nil None)) nil None None) (FunctionDef &updateTreeNode:1 (arguments nil (list (arg &self:10 None None) (arg &idx:10 None None) (arg &value:10 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:10 Load) s_tree Load) (BinOp (Name &idx:10 Load) Add (Attribute (Name &self:10 Load) s_N Load)) Store)) (Name &value:10 Load) None) (AugAssign (Name &idx:10 Store) Add (Attribute (Name &self:10 Load) s_N Load)) (Assign (list (Name &i:10 Store)) (Name &idx:10 Load) None) (While (Compare (Name &i:10 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Subscript (Attribute (Name &self:10 Load) s_tree Load) (BinOp (Name &i:10 Load) RShift (Constant i1 None)) Store)) (Call (Attribute (Name &self:10 Load) s_f Load) (list (Subscript (Attribute (Name &self:10 Load) s_tree Load) (Name &i:10 Load) Load) (Subscript (Attribute (Name &self:10 Load) s_tree Load) (BinOp (Name &i:10 Load) BitXor (Constant i1 None)) Load)) nil) None) (AugAssign (Name &i:10 Store) RShift (Constant i1 None))) nil)) nil None None) (FunctionDef &query:1 (arguments nil (list (arg &self:11 None None) (arg &l:11 None None) (arg &r:11 None None)) None nil nil None nil) (/seq (AugAssign (Name &r:11 Store) Add (Constant i1 None)) (Assign (list (Name &res:11 Store)) (Attribute (Name &self:11 Load) s_initialRes Load) None) (AugAssign (Name &l:11 Store) Add (Attribute (Name &self:11 Load) s_N Load)) (AugAssign (Name &r:11 Store) Add (Attribute (Name &self:11 Load) s_N Load)) (While (Compare (Name &l:11 Load) (list Lt) (list (Name &r:11 Load))) (/seq (If (BinOp (Name &l:11 Load) BitAnd (Constant i1 None)) (/seq (Assign (list (Name &res:11 Store)) (Call (Attribute (Name &self:11 Load) s_f Load) (list (Name &res:11 Load) (Subscript (Attribute (Name &self:11 Load) s_tree Load) (Name &l:11 Load) Load)) nil) None) (AugAssign (Name &l:11 Store) Add (Constant i1 None))) nil) (If (BinOp (Name &r:11 Load) BitAnd (Constant i1 None)) (/seq (AugAssign (Name &r:11 Store) Sub (Constant i1 None)) (Assign (list (Name &res:11 Store)) (Call (Attribute (Name &self:11 Load) s_f Load) (list (Name &res:11 Load) (Subscript (Attribute (Name &self:11 Load) s_tree Load) (Name &r:11 Load) Load)) nil) None)) nil) (AugAssign (Name &l:11 Store) RShift (Constant i1 None)) (AugAssign (Name &r:11 Store) RShift (Constant i1 None))) nil) (Return (Name &res:11 Load))) nil None None)) nil) (FunctionDef &getMaxSegTree:0 (arguments nil (list (arg &arr:2 None None)) None nil nil None nil) (/seq (Return (Call (Name &SegmentTree:0 Load) (list (Name &arr:2 Load) (Lambda (arguments nil (list (arg &a:15 None None) (arg &b:15 None None)) None nil nil None nil) (Call (Name g_max Load) (list (Name &a:15 Load) (Name &b:15 Load)) nil))) (list (keyword s_initialRes (UnaryOp USub (Call (Name g_float Load) (list (Constant s_inf None)) nil))))))) nil None None) (FunctionDef &getMinSegTree:0 (arguments nil (list (arg &arr:3 None None)) None nil nil None nil) (/seq (Return (Call (Name &SegmentTree:0 Load) (list (Name &arr:3 Load) (Lambda (arguments nil (list (arg &a:16 None None) (arg &b:16 None None)) None nil nil None nil) (Call (Name g_min Load) (list (Name &a:16 Load) (Name &b:16 Load)) nil))) (list (keyword s_initialRes (Call (Name g_float Load) (list (Constant s_inf None)) nil)))))) nil None None) (FunctionDef &getSumSegTree:0 (arguments nil (list (arg &arr:4 None None)) None nil nil None nil) (/seq (Return (Call (Name &SegmentTree:0 Load) (list (Name &arr:4 Load) (Lambda (arguments nil (list (arg &a:17 None None) (arg &b:17 None None)) None nil nil None nil) (BinOp (Name &a:17 Load) Add (Name &b:17 Load)))) (list (keyword s_initialRes (Constant i0 None)))))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:5 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &xes:5 Store)) (Call (Name &readIntArr:0 Load) nil nil) None) (Assign (list (Name &ves:5 Store)) (Call (Name &readIntArr:0 Load) nil nil) None) (Assign (list (Name &xes2:5 Store)) (Call (Name g_list Load) (list (Call (Name g_sorted Load) (list (Name &xes:5 Load)) nil)) nil) None) (Assign (list (Name &xTox2Map:5 Store)) (Call (Name g_dict Load) nil nil) None) (For (Tuple (list (Name &i:5 Store) (Name &x:5 Store)) Store) (Call (Name g_enumerate Load) (list (Name &xes2:5 Load)) nil) (/seq (Assign (list (Subscript (Name &xTox2Map:5 Load) (Name &x:5 Load) Store)) (Name &i:5 Load) None)) nil None) (Assign (list (Name &arr:5 Store)) (List nil Load) None) (For (Name &i:5 Store) (Call (Name g_range Load) (list (Name &n:5 Load)) nil) (/seq (Expr (Call (Attribute (Name &arr:5 Load) s_append Load) (list (List (list (Subscript (Name &xes:5 Load) (Name &i:5 Load) Load) (Subscript (Name &xTox2Map:5 Load) (Subscript (Name &xes:5 Load) (Name &i:5 Load) Load) Load) (Subscript (Name &ves:5 Load) (Name &i:5 Load) Load)) Load)) nil))) nil None) (Expr (Call (Attribute (Name &arr:5 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:18 None None)) None nil nil None nil) (Tuple (list (Subscript (Name &x:18 Load) (Constant i2 None) Load) (Subscript (Name &x:18 Load) (Constant i0 None) Load)) Load)))))) (Assign (list (Name &segArray:5 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:12 Store) (Call (Name g_range Load) (list (Name &n:5 Load)) nil) nil i0))) None) (Assign (list (Name &st:5 Store)) (Call (Name &getSumSegTree:0 Load) (list (Name &segArray:5 Load)) nil) None) (Assign (list (Name &stCnts:5 Store)) (Call (Name &getSumSegTree:0 Load) (list (Call (Attribute (Name &segArray:5 Load) s_copy Load) nil nil)) nil) None) (Assign (list (Name &ans:5 Store)) (Constant i0 None) None) (For (Tuple (list (Name &originalX:5 Store) (Name &compressedX:5 Store) (Name &v:5 Store)) Store) (Name &arr:5 Load) (/seq (Assign (list (Name &smallerSums:5 Store)) (Call (Attribute (Name &st:5 Load) s_query Load) (list (Constant i0 None) (Name &compressedX:5 Load)) nil) None) (Assign (list (Name &smallerCounts:5 Store)) (Call (Attribute (Name &stCnts:5 Load) s_query Load) (list (Constant i0 None) (Name &compressedX:5 Load)) nil) None) (AugAssign (Name &ans:5 Store) Add (BinOp (BinOp (Name &originalX:5 Load) Mult (Name &smallerCounts:5 Load)) Sub (Name &smallerSums:5 Load))) (Expr (Call (Attribute (Name &st:5 Load) s_updateTreeNode Load) (list (Name &compressedX:5 Load) (Name &originalX:5 Load)) nil)) (Expr (Call (Attribute (Name &stCnts:5 Load) s_updateTreeNode Load) (list (Name &compressedX:5 Load) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:5 Load)) nil)) (Return None)) nil None None) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load) None) (FunctionDef &oneLineArrayPrint:0 (arguments nil (list (arg &arr:6 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:19 Load)) nil) (list (comprehension (Name &x:19 Store) (Name &arr:6 Load) nil i0)))) nil)) nil))) nil None None) (FunctionDef &multiLineArrayPrint:0 (arguments nil (list (arg &arr:7 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:20 Load)) nil) (list (comprehension (Name &x:20 Store) (Name &arr:7 Load) nil i0)))) nil)) nil))) nil None None) (FunctionDef &multiLineArrayOfArraysPrint:0 (arguments nil (list (arg &arr:8 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (ListComp (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:22 Load)) nil) (list (comprehension (Name &x:22 Store) (Name &y:21 Load) nil i0)))) nil) (list (comprehension (Name &y:21 Store) (Name &arr:8 Load) nil i0)))) nil)) nil))) nil None None) (FunctionDef &readIntArr:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (Name &x:13 Load)) nil) (list (comprehension (Name &x:13 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (Assign (list (Name &inf:0 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None) (Assign (list (Name &MOD:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (ImportFrom s_collections (list (alias g_Counter None)) i0) (ImportFrom s_bisect (list (alias g_bisect_left None)) i0) (FunctionDef &input:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &list2d:0 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None)) None nil nil None nil) (/seq (Return (ListComp (BinOp (List (list (Name &c:2 Load)) Load) Mult (Name &b:2 Load)) (list (comprehension (Name &i:12 Store) (Call (Name g_range Load) (list (Name &a:2 Load)) nil) nil i0))))) nil None None) (FunctionDef &list3d:0 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None) (arg &c:3 None None) (arg &d:3 None None)) None nil nil None nil) (/seq (Return (ListComp (ListComp (BinOp (List (list (Name &d:3 Load)) Load) Mult (Name &c:3 Load)) (list (comprehension (Name &j:15 Store) (Call (Name g_range Load) (list (Name &b:3 Load)) nil) nil i0))) (list (comprehension (Name &i:13 Store) (Call (Name g_range Load) (list (Name &a:3 Load)) nil) nil i0))))) nil None None) (FunctionDef &list4d:0 (arguments nil (list (arg &a:4 None None) (arg &b:4 None None) (arg &c:4 None None) (arg &d:4 None None) (arg &e:4 None None)) None nil nil None nil) (/seq (Return (ListComp (ListComp (ListComp (BinOp (List (list (Name &e:4 Load)) Load) Mult (Name &d:4 Load)) (list (comprehension (Name &j:18 Store) (Call (Name g_range Load) (list (Name &c:4 Load)) nil) nil i0))) (list (comprehension (Name &j:16 Store) (Call (Name g_range Load) (list (Name &b:4 Load)) nil) nil i0))) (list (comprehension (Name &i:14 Store) (Call (Name g_range Load) (list (Name &a:4 Load)) nil) nil i0))))) nil None None) (FunctionDef &ceil:0 (arguments nil (list (arg &x:5 None None) (arg &y:5 None None)) None nil nil None (list (Constant i1 None))) (/seq (Return (Call (Name g_int Load) (list (UnaryOp USub (BinOp (UnaryOp USub (Name &x:5 Load)) FloorDiv (Name &y:5 Load)))) nil))) nil None None) (FunctionDef &INT:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))) nil None None) (FunctionDef &MAP:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &LIST:0 (arguments nil (list (arg &N:6 None None)) None nil nil None (list (Constant None None))) (/seq (Return (IfExp (Compare (Name &N:6 Load) (list Is) (list (Constant None None))) (Call (Name g_list Load) (list (Call (Name &MAP:0 Load) nil nil)) nil) (ListComp (Call (Name &INT:0 Load) nil nil) (list (comprehension (Name &i:17 Store) (Call (Name g_range Load) (list (Name &N:6 Load)) nil) nil i0)))))) nil None None) (FunctionDef &Yes:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_Yes None)) nil))) nil None None) (FunctionDef &No:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_No None)) nil))) nil None None) (FunctionDef &YES:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil None None) (FunctionDef &NO:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) nil None None) (Assign (list (Name &INF:0 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None) (Assign (list (Name &MOD:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (ClassDef &BIT:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:7 None None) (arg &n:7 None None)) None nil nil None nil) (/seq (AugAssign (Name &n:7 Store) Add (Constant i1 None)) (Assign (list (Name &nv:7 Store)) (Constant i1 None) None) (While (Compare (Name &nv:7 Load) (list Lt) (list (Name &n:7 Load))) (/seq (AugAssign (Name &nv:7 Store) Mult (Constant i2 None))) nil) (Assign (list (Attribute (Name &self:7 Load) s_size Store)) (Name &nv:7 Load) None) (Assign (list (Attribute (Name &self:7 Load) s_tree Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &nv:7 Load)) None)) nil None None) (FunctionDef &sum:1 (arguments nil (list (arg &self:8 None None) (arg &i:8 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:8 Store)) (Constant i0 None) None) (AugAssign (Name &i:8 Store) Add (Constant i1 None)) (While (Compare (Name &i:8 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:8 Store) Add (Subscript (Attribute (Name &self:8 Load) s_tree Load) (BinOp (Name &i:8 Load) Sub (Constant i1 None)) Load)) (fn_2 &i:8)) nil) (Return (Name &s:8 Load))) nil None None) (FunctionDef &add:1 (arguments nil (list (arg &self:9 None None) (arg &i:9 None None) (arg &x:9 None None)) None nil nil None nil) (/seq (AugAssign (Name &i:9 Store) Add (Constant i1 None)) (While (Compare (Name &i:9 Load) (list LtE) (list (Attribute (Name &self:9 Load) s_size Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:9 Load) s_tree Load) (BinOp (Name &i:9 Load) Sub (Constant i1 None)) Store) Add (Name &x:9 Load)) (fn_3 &i:9)) nil)) nil None None) (FunctionDef &get:1 (arguments nil (list (arg &self:10 None None) (arg &l:10 None None) (arg &r:10 None None)) None nil nil None (list (Constant None None))) (/seq (If (Compare (Name &r:10 Load) (list Is) (list (Constant None None))) (/seq (Assign (list (Name &r:10 Store)) (BinOp (Name &l:10 Load) Add (Constant i1 None)) None)) nil) (Assign (list (Name &res:10 Store)) (Constant i0 None) None) (If (Name &r:10 Load) (/seq (AugAssign (Name &res:10 Store) Add (Call (Attribute (Name &self:10 Load) s_sum Load) (list (BinOp (Name &r:10 Load) Sub (Constant i1 None))) nil))) nil) (If (Name &l:10 Load) (/seq (AugAssign (Name &res:10 Store) Sub (Call (Attribute (Name &self:10 Load) s_sum Load) (list (BinOp (Name &l:10 Load) Sub (Constant i1 None))) nil))) nil) (Return (Name &res:10 Load))) nil None None) (FunctionDef &update:1 (arguments nil (list (arg &self:11 None None) (arg &i:11 None None) (arg &x:11 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name &self:11 Load) s_add Load) (list (Name &i:11 Load) (BinOp (Name &x:11 Load) Sub (Call (Attribute (Name &self:11 Load) s_get Load) (list (Name &i:11 Load)) nil))) nil))) nil None None)) nil) (Assign (list (Name &N:0 Store)) (Call (Name &INT:0 Load) nil nil) None) (Assign (list (Name &A:0 Store)) (Call (Name &LIST:0 Load) nil nil) None) (Assign (list (Name &B:0 Store)) (Call (Name &LIST:0 Load) nil nil) None) (Assign (list (Name &AB:0 Store)) (Call (Name g_list Load) (list (Call (Name g_zip Load) (list (Name &A:0 Load) (Name &B:0 Load)) nil)) nil) None) (Expr (Call (Attribute (Name &AB:0 Load) s_sort Load) nil nil)) (Assign (list (Name &B:0 Store)) (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &B:0 Load)) nil)) nil) None) (Assign (list (Name &M:0 Store)) (Call (Name g_len Load) (list (Name &B:0 Load)) nil) None) (Assign (list (Name &bit1:0 Store)) (Call (Name &BIT:0 Load) (list (Name &M:0 Load)) nil) None) (Assign (list (Name &bit2:0 Store)) (Call (Name &BIT:0 Load) (list (Name &M:0 Load)) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store) (Name &AB:0 Load) (/seq (Assign (list (Name &pos:0 Store)) (Call (Name g_bisect_left Load) (list (Name &B:0 Load) (Name &b:0 Load)) nil) None) (Assign (list (Name &sm:0 Store)) (Call (Attribute (Name &bit1:0 Load) s_sum Load) (list (Name &pos:0 Load)) nil) None) (Assign (list (Name &cnt:0 Store)) (Call (Attribute (Name &bit2:0 Load) s_sum Load) (list (Name &pos:0 Load)) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &cnt:0 Load) Mult (Name &a:0 Load)) Sub (Name &sm:0 Load))) (Expr (Call (Attribute (Name &bit1:0 Load) s_add Load) (list (Name &pos:0 Load) (Name &a:0 Load)) nil)) (Expr (Call (Attribute (Name &bit2:0 Load) s_add Load) (list (Name &pos:0 Load) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (FunctionDef &getsum:0 (arguments nil (list (arg &BITTree:1 None None) (arg &i:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:1 Store)) (Constant i0 None) None) (While (Compare (Name &i:1 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:1 Store) Add (Subscript (Name &BITTree:1 Load) (Name &i:1 Load) Load)) (fn_2 &i:1)) nil) (Return (Name &s:1 Load))) nil None None) (FunctionDef &updatebit:0 (arguments nil (list (arg &BITTree:2 None None) (arg &n:2 None None) (arg &i:2 None None) (arg &v:2 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:2 Load) (list LtE) (list (Name &n:2 Load))) (/seq (AugAssign (Subscript (Name &BITTree:2 Load) (Name &i:2 Load) Store) Add (Name &v:2 Load)) (fn_3 &i:2)) nil)) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:3 Load)) nil) (list (comprehension (Name &i:3 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) (list (Compare (Name &i:3 Load) (list NotEq) (list (Constant s-WzEwXQ== None)))) i0))) None) (Assign (list (Name &v:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:4 Load)) nil) (list (comprehension (Name &i:4 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) (list (Compare (Name &i:4 Load) (list NotEq) (list (Constant s-WzEwXQ== None)))) i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Subscript (Name &v:0 Load) (Name &i:0 Load) Store)) (List (list (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Name &i:0 Load)) Load) None)) nil None) (Expr (Call (Attribute (Name &v:0 Load) s_sort Load) nil nil)) (Assign (list (Name &pos:0 Store)) (Call (Name g_dict Load) nil nil) None) (Assign (list (Tuple (list (Name &store:0 Store) (Name &prev:0 Store)) Store)) (Tuple (list (Constant i1 None) (Subscript (Subscript (Name &v:0 Load) (Constant i0 None) Load) (Constant i0 None) Load)) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Name &i:0 Load) (list Gt) (list (Constant i0 None))) (/seq (If (Compare (Name &prev:0 Load) (list Eq) (list (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load))) (/seq (Assign (list (Subscript (Name &pos:0 Load) (Subscript (Name &x:0 Load) (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load) Load) Store)) (Name &store:0 Load) None)) (/seq (AugAssign (Name &store:0 Store) Add (Constant i1 None)) (Assign (list (Subscript (Name &pos:0 Load) (Subscript (Name &x:0 Load) (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load) Load) Store)) (Name &store:0 Load) None) (Assign (list (Name &prev:0 Store)) (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load) None)))) (/seq (Assign (list (Subscript (Name &pos:0 Load) (Subscript (Name &x:0 Load) (Subscript (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load) Load) Store)) (Name &store:0 Load) None)))) nil None) (Assign (list (Name &sort:0 Store)) (Call (Name g_sorted Load) (list (Call (Attribute (Name &pos:0 Load) s_keys Load) nil nil)) nil) None) (Assign (list (Name &bit:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &ind:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (Assign (list (Tuple (list (Name &ans:0 Store) (Name &count:0 Store) (Name &diff:0 Store)) Store)) (Tuple (list (Constant i0 None) (Constant i0 None) (Constant i0 None)) Load) None) (Assign (list (Name &length:0 Store)) (Call (Name g_max Load) (list (Name &sort:0 Load)) nil) None) (Assign (list (Name &total:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Call (Name g_len Load) (list (Name &sort:0 Load)) nil) Sub (Constant i1 None)) (UnaryOp USub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil) (/seq (Assign (list (Name &count:0 Store)) (Call (Name &getsum:0 Load) (list (Name &bit:0 Load) (BinOp (Subscript (Name &pos:0 Load) (Subscript (Name &sort:0 Load) (Name &i:0 Load) Load) Load) Sub (Constant i1 None))) nil) None) (Assign (list (Name &diff:0 Store)) (Call (Name &getsum:0 Load) (list (Name &ind:0 Load) (BinOp (Subscript (Name &pos:0 Load) (Subscript (Name &sort:0 Load) (Name &i:0 Load) Load) Load) Sub (Constant i1 None))) nil) None) (If (Compare (Name &i:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) (/seq (AugAssign (Name &total:0 Store) Add (BinOp (BinOp (Subscript (Name &sort:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load) Sub (Subscript (Name &sort:0 Load) (Name &i:0 Load) Load)) Mult (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Sub (Name &i:0 Load)))) (AugAssign (Name &ans:0 Store) Add (BinOp (Name &total:0 Load) Sub (BinOp (Name &diff:0 Load) Sub (BinOp (Name &count:0 Load) Mult (Subscript (Name &sort:0 Load) (Name &i:0 Load) Load)))))) nil) (Expr (Call (Name &updatebit:0 Load) (list (Name &bit:0 Load) (BinOp (Call (Name g_len Load) (list (Name &bit:0 Load)) nil) Sub (Constant i1 None)) (Subscript (Name &pos:0 Load) (Subscript (Name &sort:0 Load) (Name &i:0 Load) Load) Load) (Constant i1 None)) nil)) (Expr (Call (Name &updatebit:0 Load) (list (Name &ind:0 Load) (BinOp (Call (Name g_len Load) (list (Name &ind:0 Load)) nil) Sub (Constant i1 None)) (Subscript (Name &pos:0 Load) (Subscript (Name &sort:0 Load) (Name &i:0 Load) Load) Load) (Subscript (Name &sort:0 Load) (Name &i:0 Load) Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &ans:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (FunctionDef &add:0 (arguments nil (list (arg &bit:1 None None) (arg &x:1 None None) (arg &v:1 None None)) None nil nil None nil) (/seq (While (Compare (Name &x:1 Load) (list Lt) (list (Call (Name g_len Load) (list (Name &bit:1 Load)) nil))) (/seq (AugAssign (Subscript (Name &bit:1 Load) (Name &x:1 Load) Store) Add (Name &v:1 Load)) (fn_3 &x:1)) nil)) nil None None) (FunctionDef &query:0 (arguments nil (list (arg &bit:2 None None) (arg &x:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &ans:2 Store)) (Constant i0 None) None) (While (Compare (Name &x:2 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &ans:2 Store) Add (Subscript (Name &bit:2 Load) (Name &x:2 Load) Load)) (fn_2 &x:2)) nil) (Return (Name &ans:2 Load))) nil None None) (FunctionDef &relabel:0 (arguments nil (list (arg &arr:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &srt:3 Store)) (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &arr:3 Load)) nil)) nil) None) (Assign (list (Name &mp:3 Store)) (DictComp (Name &v:4 Load) (Name &k:4 Load) (list (comprehension (Tuple (list (Name &k:4 Store) (Name &v:4 Store)) Store) (Call (Name g_enumerate Load) (list (Name &srt:3 Load) (Constant i1 None)) nil) nil i0))) None) (Assign (list (Name &arr:3 Store)) (ListComp (Subscript (Name &mp:3 Load) (Name &a:5 Load) Load) (list (comprehension (Name &a:5 Store) (Name &arr:3 Load) nil i0))) None) (Return (Name &arr:3 Load))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (fn_1 (Name g_input Load)) None) (Assign (list (Name &v:0 Store)) (Call (Name &relabel:0 Load) (list (fn_1 (Name g_input Load))) nil) None) (Assign (list (Name &arr:0 Store)) (Call (Name g_sorted Load) (list (Call (Name g_list Load) (list (Call (Name g_zip Load) (list (Name &x:0 Load) (Name &v:0 Load)) nil)) nil)) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &bitSum:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &bitCnt:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (For (Tuple (list (Name &x:0 Store) (Name &v:0 Store)) Store) (Name &arr:0 Load) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Call (Name &query:0 Load) (list (Name &bitCnt:0 Load) (Name &v:0 Load)) nil) Mult (Name &x:0 Load)) Sub (Call (Name &query:0 Load) (list (Name &bitSum:0 Load) (Name &v:0 Load)) nil))) (Expr (Call (Name &add:0 Load) (list (Name &bitSum:0 Load) (Name &v:0 Load) (Name &x:0 Load)) nil)) (Expr (Call (Name &add:0 Load) (list (Name &bitCnt:0 Load) (Name &v:0 Load) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (ClassDef &SegmentTree:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:9 None None) (arg &N:9 None None) (arg &func:9 None None) (arg &initialRes:9 None None)) None nil nil None (list (Constant i0 None))) (/seq (Assign (list (Attribute (Name &self:9 Load) s_f Store)) (Name &func:9 Load) None) (Assign (list (Attribute (Name &self:9 Load) s_N Store)) (Name &N:9 Load) None) (Assign (list (Attribute (Name &self:9 Load) s_tree Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:13 Store) (Call (Name g_range Load) (list (BinOp (Constant i4 None) Mult (Attribute (Name &self:9 Load) s_N Load))) nil) nil i0))) None) (Assign (list (Attribute (Name &self:9 Load) s_initialRes Store)) (Name &initialRes:9 Load) None)) nil None None) (FunctionDef &updateTreeNode:1 (arguments nil (list (arg &self:10 None None) (arg &idx:10 None None) (arg &value:10 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:10 Load) s_tree Load) (BinOp (Name &idx:10 Load) Add (Attribute (Name &self:10 Load) s_N Load)) Store)) (Name &value:10 Load) None) (AugAssign (Name &idx:10 Store) Add (Attribute (Name &self:10 Load) s_N Load)) (Assign (list (Name &i:10 Store)) (Name &idx:10 Load) None) (While (Compare (Name &i:10 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Subscript (Attribute (Name &self:10 Load) s_tree Load) (BinOp (Name &i:10 Load) RShift (Constant i1 None)) Store)) (Call (Attribute (Name &self:10 Load) s_f Load) (list (Subscript (Attribute (Name &self:10 Load) s_tree Load) (Name &i:10 Load) Load) (Subscript (Attribute (Name &self:10 Load) s_tree Load) (BinOp (Name &i:10 Load) BitXor (Constant i1 None)) Load)) nil) None) (AugAssign (Name &i:10 Store) RShift (Constant i1 None))) nil)) nil None None) (FunctionDef &query:1 (arguments nil (list (arg &self:11 None None) (arg &l:11 None None) (arg &r:11 None None)) None nil nil None nil) (/seq (AugAssign (Name &r:11 Store) Add (Constant i1 None)) (Assign (list (Name &res:11 Store)) (Attribute (Name &self:11 Load) s_initialRes Load) None) (AugAssign (Name &l:11 Store) Add (Attribute (Name &self:11 Load) s_N Load)) (AugAssign (Name &r:11 Store) Add (Attribute (Name &self:11 Load) s_N Load)) (While (Compare (Name &l:11 Load) (list Lt) (list (Name &r:11 Load))) (/seq (If (BinOp (Name &l:11 Load) BitAnd (Constant i1 None)) (/seq (Assign (list (Name &res:11 Store)) (Call (Attribute (Name &self:11 Load) s_f Load) (list (Name &res:11 Load) (Subscript (Attribute (Name &self:11 Load) s_tree Load) (Name &l:11 Load) Load)) nil) None) (AugAssign (Name &l:11 Store) Add (Constant i1 None))) nil) (If (BinOp (Name &r:11 Load) BitAnd (Constant i1 None)) (/seq (AugAssign (Name &r:11 Store) Sub (Constant i1 None)) (Assign (list (Name &res:11 Store)) (Call (Attribute (Name &self:11 Load) s_f Load) (list (Name &res:11 Load) (Subscript (Attribute (Name &self:11 Load) s_tree Load) (Name &r:11 Load) Load)) nil) None)) nil) (AugAssign (Name &l:11 Store) RShift (Constant i1 None)) (AugAssign (Name &r:11 Store) RShift (Constant i1 None))) nil) (Return (Name &res:11 Load))) nil None None)) nil) (FunctionDef &getMaxSegTree:0 (arguments nil (list (arg &arr:2 None None)) None nil nil None nil) (/seq (Return (Call (Name &SegmentTree:0 Load) (list (Name &arr:2 Load) (Lambda (arguments nil (list (arg &a:14 None None) (arg &b:14 None None)) None nil nil None nil) (Call (Name g_max Load) (list (Name &a:14 Load) (Name &b:14 Load)) nil))) (list (keyword s_initialRes (UnaryOp USub (Call (Name g_float Load) (list (Constant s_inf None)) nil))))))) nil None None) (FunctionDef &getMinSegTree:0 (arguments nil (list (arg &arr:3 None None)) None nil nil None nil) (/seq (Return (Call (Name &SegmentTree:0 Load) (list (Name &arr:3 Load) (Lambda (arguments nil (list (arg &a:15 None None) (arg &b:15 None None)) None nil nil None nil) (Call (Name g_min Load) (list (Name &a:15 Load) (Name &b:15 Load)) nil))) (list (keyword s_initialRes (Call (Name g_float Load) (list (Constant s_inf None)) nil)))))) nil None None) (FunctionDef &getSumSegTree:0 (arguments nil (list (arg &arr:4 None None)) None nil nil None nil) (/seq (Return (Call (Name &SegmentTree:0 Load) (list (Name &arr:4 Load) (Lambda (arguments nil (list (arg &a:16 None None) (arg &b:16 None None)) None nil nil None nil) (BinOp (Name &a:16 Load) Add (Name &b:16 Load)))) (list (keyword s_initialRes (Constant i0 None)))))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:5 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &xes:5 Store)) (Call (Name &readIntArr:0 Load) nil nil) None) (Assign (list (Name &ves:5 Store)) (Call (Name &readIntArr:0 Load) nil nil) None) (Assign (list (Name &xes2:5 Store)) (Call (Name g_list Load) (list (Call (Name g_sorted Load) (list (Name &xes:5 Load)) nil)) nil) None) (Assign (list (Name &xTox2Map:5 Store)) (Call (Name g_dict Load) nil nil) None) (For (Tuple (list (Name &i:5 Store) (Name &x:5 Store)) Store) (Call (Name g_enumerate Load) (list (Name &xes2:5 Load)) nil) (/seq (Assign (list (Subscript (Name &xTox2Map:5 Load) (Name &x:5 Load) Store)) (Name &i:5 Load) None)) nil None) (Assign (list (Name &arr:5 Store)) (List nil Load) None) (For (Name &i:5 Store) (Call (Name g_range Load) (list (Name &n:5 Load)) nil) (/seq (Expr (Call (Attribute (Name &arr:5 Load) s_append Load) (list (List (list (Subscript (Name &xes:5 Load) (Name &i:5 Load) Load) (Subscript (Name &xTox2Map:5 Load) (Subscript (Name &xes:5 Load) (Name &i:5 Load) Load) Load) (Subscript (Name &ves:5 Load) (Name &i:5 Load) Load)) Load)) nil))) nil None) (Expr (Call (Attribute (Name &arr:5 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:17 None None)) None nil nil None nil) (Tuple (list (Subscript (Name &x:17 Load) (Constant i2 None) Load) (Subscript (Name &x:17 Load) (Constant i0 None) Load)) Load)))))) (Assign (list (Name &st:5 Store)) (Call (Name &getSumSegTree:0 Load) (list (Name &n:5 Load)) nil) None) (Assign (list (Name &stCnts:5 Store)) (Call (Name &getSumSegTree:0 Load) (list (Name &n:5 Load)) nil) None) (Assign (list (Name &ans:5 Store)) (Constant i0 None) None) (For (Tuple (list (Name &originalX:5 Store) (Name &compressedX:5 Store) (Name &v:5 Store)) Store) (Name &arr:5 Load) (/seq (Assign (list (Name &smallerSums:5 Store)) (Call (Attribute (Name &st:5 Load) s_query Load) (list (Constant i0 None) (Name &compressedX:5 Load)) nil) None) (Assign (list (Name &smallerCounts:5 Store)) (Call (Attribute (Name &stCnts:5 Load) s_query Load) (list (Constant i0 None) (Name &compressedX:5 Load)) nil) None) (AugAssign (Name &ans:5 Store) Add (BinOp (BinOp (Name &originalX:5 Load) Mult (Name &smallerCounts:5 Load)) Sub (Name &smallerSums:5 Load))) (Expr (Call (Attribute (Name &st:5 Load) s_updateTreeNode Load) (list (Name &compressedX:5 Load) (Name &originalX:5 Load)) nil)) (Expr (Call (Attribute (Name &stCnts:5 Load) s_updateTreeNode Load) (list (Name &compressedX:5 Load) (Constant i1 None)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:5 Load)) nil)) (Return None)) nil None None) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load) None) (FunctionDef &oneLineArrayPrint:0 (arguments nil (list (arg &arr:6 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:18 Load)) nil) (list (comprehension (Name &x:18 Store) (Name &arr:6 Load) nil i0)))) nil)) nil))) nil None None) (FunctionDef &multiLineArrayPrint:0 (arguments nil (list (arg &arr:7 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:19 Load)) nil) (list (comprehension (Name &x:19 Store) (Name &arr:7 Load) nil i0)))) nil)) nil))) nil None None) (FunctionDef &multiLineArrayOfArraysPrint:0 (arguments nil (list (arg &arr:8 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (ListComp (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:21 Load)) nil) (list (comprehension (Name &x:21 Store) (Name &y:20 Load) nil i0)))) nil) (list (comprehension (Name &y:20 Store) (Name &arr:8 Load) nil i0)))) nil)) nil))) nil None None) (FunctionDef &readIntArr:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (Name &x:12 Load)) nil) (list (comprehension (Name &x:12 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (Assign (list (Name &inf:0 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None) (Assign (list (Name &MOD:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
            "(Module (/seq (ImportFrom s_os (list (alias g_path None)) i0) (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (ImportFrom s_bisect (list (alias g_bisect_left None)) i0) (If (Call (Attribute (Name g_path Load) s_exists Load) (list (Constant s_inp.txt None)) nil) (/seq (Assign (list (Name &stdin:0 Store)) (Call (Name g_open Load) (list (Constant s_inp.txt None) (Constant s_r None)) nil) None)) nil) (Assign (list (Name &maxn:0 Store)) (Constant i200005 None) None) (Assign (list (Name &a:0 Store)) (List nil Load) None) (Assign (list (Name &b:0 Store)) (List nil Load) None) (Assign (list (Name &fen:0 Store)) (ListComp (Tuple (list (Constant i0 None) (Constant i0 None)) Load) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (Name &maxn:0 Load)) nil) nil i0))) None) (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Name &stdin:0 Load) s_readline Load) nil nil)) nil) None) (FunctionDef &update:0 (arguments nil (list (arg &x:1 None None) (arg &val:1 None None)) None nil nil None nil) (/seq (Global (list s_fen)) (While (Compare (Name &x:1 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Name g_fen Load) (Name &x:1 Load) Store)) (Tuple (list (BinOp (Subscript (Subscript (Name g_fen Load) (Name &x:1 Load) Load) (Constant i0 None) Load) Add (Name &val:1 Load)) (BinOp (Subscript (Subscript (Name g_fen Load) (Name &x:1 Load) Load) (Constant i1 None) Load) Add (Constant i1 None))) Load) None) (fn_2 &x:1)) nil)) nil None None) (FunctionDef &get:0 (arguments nil (list (arg &x:2 None None) (arg &val:2 None None)) None nil nil None nil) (/seq (Global (list s_n s_fen)) (Assign (list (Name &A:2 Store)) (Constant i0 None) None) (Assign (list (Name &B:2 Store)) (Constant i0 None) None) (While (Compare (Name &x:2 Load) (list Lt) (list (BinOp (Name g_n Load) Add (Constant i2 None)))) (/seq (AugAssign (Name &A:2 Store) Add (Subscript (Subscript (Name g_fen Load) (Name &x:2 Load) Load) (Constant i0 None) Load)) (AugAssign (Name &B:2 Store) Add (Subscript (Subscript (Name g_fen Load) (Name &x:2 Load) Load) (Constant i1 None) Load)) (fn_3 &x:2)) nil) (Return (BinOp (Name &A:2 Load) Sub (BinOp (Name &B:2 Load) Mult (Name &val:2 Load))))) nil None None) (Assign (list (Name &af:0 Store)) (fn_1 (Attribute (Name &stdin:0 Load) s_readline Load)) None) (Assign (list (Name &ad:0 Store)) (fn_1 (Attribute (Name &stdin:0 Load) s_readline Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (Tuple (list (Subscript (Name &af:0 Load) (Name &i:0 Load) Load) (Subscript (Name &ad:0 Load) (Name &i:0 Load) Load)) Load)) nil)) (Expr (Call (Attribute (Name &b:0 Load) s_append Load) (list (Subscript (Name &ad:0 Load) (Name &i:0 Load) Load)) nil))) nil None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Store)) (Tuple (list (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load) (BinOp (Call (Name g_bisect_left Load) (list (Name &b:0 Load) (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)) nil) Add (Constant i1 None))) Load) None)) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)) (UnaryOp USub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil) (/seq (AugAssign (Name &res:0 Store) Add (Call (Name &get:0 Load) (list (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load) (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)) nil)) (Expr (Call (Name &update:0 Load) (list (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load) (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &reader:0 Store)) (GeneratorExp (Call (Attribute (Name &s:3 Load) s_rstrip Load) nil nil) (list (comprehension (Name &s:3 Store) (Attribute (Name g_sys Load) s_stdin Load) nil i0))) None) (Assign (list (Name &input:0 Store)) (Attribute (Name &reader:0 Load) s___next__ Load) None) (ClassDef &RangeMinimumQuery:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:4 None None) (arg &n:4 None None) (arg &inf:4 None None)) None nil nil None (list (Call (Name g_float Load) (list (Constant s_inf None)) nil))) (/seq (Assign (list (Attribute (Name &self:4 Load) s_n0 Store)) (BinOp (Constant i2 None) Pow (Call (Attribute (BinOp (Name &n:4 Load) Sub (Constant i1 None)) s_bit_length Load) nil nil)) None) (Assign (list (Attribute (Name &self:4 Load) s_inf Store)) (Name &inf:4 Load) None) (Assign (list (Attribute (Name &self:4 Load) s_data Store)) (BinOp (List (list (Attribute (Name &self:4 Load) s_inf Load)) Load) Mult (BinOp (Constant i2 None) Mult (Attribute (Name &self:4 Load) s_n0 Load))) None) (Assign (list (Attribute (Name &self:4 Load) s_cnt Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Constant i2 None) Mult (Attribute (Name &self:4 Load) s_n0 Load))) None)) nil None None) (FunctionDef &query:1 (arguments nil (list (arg &self:5 None None) (arg &l:5 None None) (arg &r:5 None None)) None nil nil None nil) (/seq (AugAssign (Name &l:5 Store) Add (Attribute (Name &self:5 Load) s_n0 Load)) (AugAssign (Name &r:5 Store) Add (Attribute (Name &self:5 Load) s_n0 Load)) (Assign (list (Name &res:5 Store)) (Constant i0 None) None) (Assign (list (Name &cnt:5 Store)) (Constant i0 None) None) (While (Compare (Name &l:5 Load) (list Lt) (list (Name &r:5 Load))) (/seq (If (BinOp (Name &r:5 Load) BitAnd (Constant i1 None)) (/seq (AugAssign (Name &r:5 Store) Sub (Constant i1 None)) (AugAssign (Name &res:5 Store) Add (Subscript (Attribute (Name &self:5 Load) s_data Load) (BinOp (Name &r:5 Load) Sub (Constant i1 None)) Load)) (AugAssign (Name &cnt:5 Store) Add (Subscript (Attribute (Name &self:5 Load) s_cnt Load) (BinOp (Name &r:5 Load) Sub (Constant i1 None)) Load))) nil) (If (BinOp (Name &l:5 Load) BitAnd (Constant i1 None)) (/seq (AugAssign (Name &res:5 Store) Add (Subscript (Attribute (Name &self:5 Load) s_data Load) (BinOp (Name &l:5 Load) Sub (Constant i1 None)) Load)) (AugAssign (Name &cnt:5 Store) Add (Subscript (Attribute (Name &self:5 Load) s_cnt Load) (BinOp (Name &l:5 Load) Sub (Constant i1 None)) Load)) (AugAssign (Name &l:5 Store) Add (Constant i1 None))) nil) (AugAssign (Name &l:5 Store) RShift (Constant i1 None)) (AugAssign (Name &r:5 Store) RShift (Constant i1 None))) nil) (Return (Tuple (list (Name &res:5 Load) (Name &cnt:5 Load)) Load))) nil None None) (FunctionDef &update:1 (arguments nil (list (arg &self:6 None None) (arg &i:6 None None) (arg &x:6 None None)) None nil nil None nil) (/seq (AugAssign (Name &i:6 Store) Add (BinOp (Attribute (Name &self:6 Load) s_n0 Load) Sub (Constant i1 None))) (AugAssign (Subscript (Attribute (Name &self:6 Load) s_data Load) (Name &i:6 Load) Store) Add (Name &x:6 Load)) (AugAssign (Subscript (Attribute (Name &self:6 Load) s_cnt Load) (Name &i:6 Load) Store) Add (Constant i1 None)) (While (Name &i:6 Load) (/seq (Assign (list (Name &i:6 Store)) (BinOp (UnaryOp Invert (UnaryOp USub (Name &i:6 Load))) FloorDiv (Constant i2 None)) None) (Assign (list (Subscript (Attribute (Name &self:6 Load) s_data Load) (Name &i:6 Load) Store)) (BinOp (Subscript (Attribute (Name &self:6 Load) s_data Load) (BinOp (BinOp (Constant i2 None) Mult (Name &i:6 Load)) Add (Constant i1 None)) Load) Add (Subscript (Attribute (Name &self:6 Load) s_data Load) (BinOp (BinOp (Constant i2 None) Mult (Name &i:6 Load)) Add (Constant i2 None)) Load)) None) (Assign (list (Subscript (Attribute (Name &self:6 Load) s_cnt Load) (Name &i:6 Load) Store)) (BinOp (Subscript (Attribute (Name &self:6 Load) s_cnt Load) (BinOp (BinOp (Constant i2 None) Mult (Name &i:6 Load)) Add (Constant i1 None)) Load) Add (Subscript (Attribute (Name &self:6 Load) s_cnt Load) (BinOp (BinOp (Constant i2 None) Mult (Name &i:6 Load)) Add (Constant i2 None)) Load)) None)) nil)) nil None None)) nil) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &xs:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &vs:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &xv:0 Store)) (ListComp (List (list (Name &x:7 Load) (Name &v:7 Load)) Load) (list (comprehension (Tuple (list (Name &x:7 Store) (Name &v:7 Store)) Store) (Call (Name g_zip Load) (list (Name &xs:0 Load) (Name &vs:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &xv:0 Load) s_sort Load) nil nil)) (Assign (list (Name &d:0 Store)) (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &vs:0 Load)) nil)) nil) None) (Assign (list (Name &dd:0 Store)) (DictComp (Name &j:2 Load) (Name &i:2 Load) (list (comprehension (Tuple (list (Name &i:2 Store) (Name &j:2 Store)) Store) (Call (Name g_enumerate Load) (list (Name &d:0 Load)) nil) nil i0))) None) (Assign (list (Name &m:0 Store)) (Call (Name g_len Load) (list (Name &dd:0 Load)) nil) None) (Assign (list (Name &RSQ:0 Store)) (Call (Name &RangeMinimumQuery:0 Load) (list (Name &m:0 Load) (Constant i0 None)) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Tuple (list (Name &x:0 Store) (Name &v:0 Store)) Store) (Name &xv:0 Load) (/seq (Assign (list (Name &nv:0 Store)) (Subscript (Name &dd:0 Load) (Name &v:0 Load) Load) None) (Assign (list (Tuple (list (Name &su:0 Store) (Name &cnt:0 Store)) Store)) (Call (Attribute (Name &RSQ:0 Load) s_query Load) (list (Constant i0 None) (BinOp (Name &nv:0 Load) Add (Constant i1 None))) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &cnt:0 Load) Mult (Name &x:0 Load)) Sub (Name &su:0 Load))) (Expr (Call (Attribute (Name &RSQ:0 Load) s_update Load) (list (Name &nv:0 Load) (Name &x:0 Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (ClassDef &Points:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:4 None None) (arg &x:4 None None) (arg &v:4 None None)) None nil nil None (list (Constant i0 None) (Constant i0 None))) (/seq (Assign (list (Tuple (list (Attribute (Name &self:4 Load) s_x Store) (Attribute (Name &self:4 Load) s_v Store)) Store)) (Tuple (list (Name &x:4 Load) (Name &v:4 Load)) Load) None)) nil None None)) nil) (ClassDef &Fenwick_tree:0 nil nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:5 None None) (arg &n:5 None None)) None nil nil None (list (Constant i0 None))) (/seq (Assign (list (Attribute (Name &self:5 Load) s_n Store)) (Name &n:5 Load) None) (Assign (list (Attribute (Name &self:5 Load) s_bit Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:5 Load) Add (Constant i1 None))) None)) nil None None) (FunctionDef &update:2 (arguments nil (list (arg &self:6 None None) (arg &x:6 None None) (arg &value:6 None None)) None nil nil None nil) (/seq (While (Compare (Name &x:6 Load) (list LtE) (list (Attribute (Name &self:6 Load) s_n Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:6 Load) s_bit Load) (Name &x:6 Load) Store) Add (Name &value:6 Load)) (fn_3 &x:6)) nil)) nil None None) (FunctionDef &get:2 (arguments nil (list (arg &self:7 None None) (arg &x:7 None None)) None nil nil None nil) (/seq (Assign (list (Name &sum:7 Store)) (Constant i0 None) None) (While (Compare (Name &x:7 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &sum:7 Store) Add (Subscript (Attribute (Name &self:7 Load) s_bit Load) (Name &x:7 Load) Load)) (fn_2 &x:7)) nil) (Return (Name &sum:7 Load))) nil None None)) nil) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &v:0 Store)) Store)) (Tuple (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) (fn_1 (Name g_input Load)) (fn_1 (Name g_input Load))) Load) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name &Points:0 Load) (list (Subscript (Name &x:0 Load) (Name &i:8 Load) Load) (Subscript (Name &v:0 Load) (Name &i:8 Load) Load)) nil) (list (comprehension (Name &i:8 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &value:9 None None)) None nil nil None nil) (Attribute (Name &value:9 Load) s_x Load)))))) (Assign (list (Name &temp:0 Store)) (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &v:0 Load)) nil)) nil) None) (Assign (list (Name &mp:0 Store)) (DictComp (Name &v:3 Load) (Name &k:3 Load) (list (comprehension (Tuple (list (Name &k:3 Store) (Name &v:3 Store)) Store) (Call (Name g_enumerate Load) (list (Name &temp:0 Load) (Constant i1 None)) nil) nil i0))) None) (Assign (list (Name &cnt:0 Store)) (Call (Name &Fenwick_tree:0 Load) (list (Name &n:0 Load)) nil) None) (Assign (list (Name &sum:0 Store)) (Call (Name &Fenwick_tree:0 Load) (list (Name &n:0 Load)) nil) None) (Assign (list (Tuple (list (Name &res:0 Store) (Name &i:0 Store)) Store)) (Tuple (list (Constant i0 None) (Constant i0 None)) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Store)) (Subscript (Name &mp:0 Load) (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load) Load) None) (AugAssign (Name &res:0 Store) Add (BinOp (BinOp (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_x Load) Mult (Call (Attribute (Name &cnt:0 Load) s_get Load) (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load)) nil)) Sub (Call (Attribute (Name &sum:0 Load) s_get Load) (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load)) nil))) (Expr (Call (Attribute (Name &cnt:0 Load) s_update Load) (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load) (Constant i1 None)) nil)) (Expr (Call (Attribute (Name &sum:0 Load) s_update Load) (list (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_v Load) (Attribute (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) s_x Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))) nil)",
            "(Module (/seq (Expr (Constant s-WzEwLCAxMCwgOTksIDExNCwgMTAxLCA5NywgMTE2LCAxMDEsIDEwMCwgMzIsIDk4LCAxMjEsIDMyLCAxMTUsIDEwNCwgMTE3LCA5NywgMTEwLCAxMDMsIDExMywgMTE3LCA5NywgMTEwLCA0NiwgMTA0LCAxMTcsIDk3LCAxMTAsIDEwMywgMzIsIDk3LCAxMTYsIDMyLCA1MCwgNDgsIDUwLCA0OCwgNDcsIDUxLCA0NywgNDksIDUxLCAxMCwgMTBd None)) (Import (list (alias &collections:0 None))) (Import (list (alias &time:0 None))) (Import (list (alias &os:0 None))) (Import (list (alias &sys:0 None))) (Import (list (alias &bisect:0 None))) (Import (list (alias &heapq:0 None))) (ImportFrom s_typing (list (alias &List:0 None)) i0) (FunctionDef &solve:0 (arguments nil (list (arg &N:1 None None) (arg &X:1 None None) (arg &S:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &si:1 Store)) (Dict nil nil) None) (Assign (list (Name &ss:1 Store)) (Call (Name g_list Load) (list (Call (Name g_sorted Load) (list (Call (Name g_set Load) (list (Name &S:1 Load)) nil)) nil)) nil) None) (For (Tuple (list (Name &i:1 Store) (Name &s:1 Store)) Store) (Call (Name g_enumerate Load) (list (Name &ss:1 Load)) nil) (/seq (Assign (list (Subscript (Name &si:1 Load) (Name &s:1 Load) Store)) (Name &i:1 Load) None)) nil None) (Assign (list (Name &xs:1 Store)) (ListComp (Tuple (list (Name &x:6 Load) (Subscript (Name &si:1 Load) (Name &s:6 Load) Load)) Load) (list (comprehension (Tuple (list (Name &x:6 Store) (Name &s:6 Store)) Store) (Call (Name g_zip Load) (list (Name &X:1 Load) (Name &S:1 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &xs:1 Load) s_sort Load) nil nil)) (Assign (list (Name &bitc:1 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:7 Store) (Call (Name g_range Load) (list (BinOp (Name &N:1 Load) Add (Constant i1 None))) nil) nil i0))) None) (Assign (list (Name &bitx:1 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:8 Store) (Call (Name g_range Load) (list (BinOp (Name &N:1 Load) Add (Constant i1 None))) nil) nil i0))) None) (FunctionDef &add:1 (arguments nil (list (arg &index:2 None None) (arg &val:2 None None)) None nil nil None nil) (/seq (While (Compare (Name &index:2 Load) (list LtE) (list (Name &N:1 Load))) (/seq (AugAssign (Subscript (Name &bitc:1 Load) (Name &index:2 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &bitx:1 Load) (Name &index:2 Load) Store) Add (Name &val:2 Load)) (AugAssign (Name &index:2 Store) BitOr (BinOp (Name &index:2 Load) Add (Constant i1 None)))) nil)) nil None None) (FunctionDef &get:1 (arguments nil (list (arg &index:3 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &count:3 Store) (Name &xsum:3 Store)) Store)) (Tuple (list (Constant i0 None) (Constant i0 None)) Load) None) (While (Compare (Name &index:3 Load) (list GtE) (list (Constant i0 None))) (/seq (AugAssign (Name &count:3 Store) Add (Subscript (Name &bitc:1 Load) (Name &index:3 Load) Load)) (AugAssign (Name &xsum:3 Store) Add (Subscript (Name &bitx:1 Load) (Name &index:3 Load) Load)) (Assign (list (Name &index:3 Store)) (BinOp (BinOp (Name &index:3 Load) BitAnd (BinOp (Name &index:3 Load) Add (Constant i1 None))) Sub (Constant i1 None)) None)) nil) (Return (Tuple (list (Name &count:3 Load) (Name &xsum:3 Load)) Load))) nil None None) (Assign (list (Name &ans:1 Store)) (Constant i0 None) None) (For (Tuple (list (Name &x:1 Store) (Name &s:1 Store)) Store) (Name &xs:1 Load) (/seq (Assign (list (Tuple (list (Name &count:1 Store) (Name &xsum:1 Store)) Store)) (Call (Name &get:1 Load) (list (Name &s:1 Load)) nil) None) (AugAssign (Name &ans:1 Store) Add (BinOp (BinOp (Name &count:1 Load) Mult (Name &x:1 Load)) Sub (Name &xsum:1 Load))) (Expr (Call (Name &add:1 Load) (list (Name &s:1 Load) (Name &x:1 Load)) nil))) nil None) (Return (Name &ans:1 Load))) nil None None) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &X:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:4 Load)) nil) (list (comprehension (Name &x:4 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &S:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:5 Load)) nil) (list (comprehension (Name &x:5 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (Call (Name &solve:0 Load) (list (Name &N:0 Load) (Name &X:0 Load) (Name &S:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_bisect None))) (ClassDef &Bit:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_bit Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:8 Store) (Call (Name g_range Load) (list (Constant i0 None) (Name &n:3 Load)) nil) nil i0))) None)) nil None None) (FunctionDef &add:1 (arguments nil (list (arg &self:4 None None) (arg &pos:4 None None) (arg &x:4 None None)) None nil nil None nil) (/seq (While (Compare (Name &pos:4 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:4 Load) s_bit Load)) nil))) (/seq (AugAssign (Subscript (Attribute (Name &self:4 Load) s_bit Load) (Name &pos:4 Load) Store) Add (Name &x:4 Load)) (Assign (list (Name &pos:4 Store)) (BinOp (Name &pos:4 Load) BitOr (BinOp (Name &pos:4 Load) Add (Constant i1 None))) None)) nil)) nil None None) (FunctionDef &query:1 (arguments nil (list (arg &self:5 None None) (arg &pos:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &res:5 Store)) (Constant i0 None) None) (While (Compare (Name &pos:5 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &res:5 Store) Add (Subscript (Attribute (Name &self:5 Load) s_bit Load) (BinOp (Name &pos:5 Load) Sub (Constant i1 None)) Load)) (Assign (list (Name &pos:5 Store)) (BinOp (Name &pos:5 Load) BitAnd (BinOp (Name &pos:5 Load) Sub (Constant i1 None))) None)) nil) (Return (Name &res:5 Load))) nil None None)) nil) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:6 Load)) nil) (list (comprehension (Name &i:6 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &v:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:7 Load)) nil) (list (comprehension (Name &i:7 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &r:0 Store)) (ListComp (Name &i:2 Load) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &r:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &i:9 None None)) None nil nil None nil) (Subscript (Name &x:0 Load) (Name &i:9 Load) Load)))))) (Assign (list (Name &unique:0 Store)) (Call (Name g_sorted Load) (list (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Name &v:0 Load)) nil)) nil)) nil) None) (Assign (list (Tuple (list (Name &tree1:0 Store) (Name &tree2:0 Store)) Store)) (Tuple (list (Call (Name &Bit:0 Load) (list (Call (Name g_len Load) (list (Name &unique:0 Load)) nil)) nil) (Call (Name &Bit:0 Load) (list (Call (Name g_len Load) (list (Name &unique:0 Load)) nil)) nil)) Load) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &r:0 Load) (/seq (Assign (list (Name &ii:0 Store)) (Call (Attribute (Name g_bisect Load) s_bisect_left Load) (list (Name &unique:0 Load) (Subscript (Name &v:0 Load) (Name &i:0 Load) Load)) nil) None) (Assign (list (Name &count:0 Store)) (Call (Attribute (Name &tree1:0 Load) s_query Load) (list (BinOp (Name &ii:0 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &dsum:0 Store)) (Call (Attribute (Name &tree2:0 Load) s_query Load) (list (BinOp (Name &ii:0 Load) Add (Constant i1 None))) nil) None) (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (Name &count:0 Load) Mult (Subscript (Name &x:0 Load) (Name &i:0 Load) Load)) Sub (Name &dsum:0 Load))) (Expr (Call (Attribute (Name &tree1:0 Load) s_add Load) (list (Name &ii:0 Load) (Constant i1 None)) nil)) (Expr (Call (Attribute (Name &tree2:0 Load) s_add Load) (list (Name &ii:0 Load) (Subscript (Name &x:0 Load) (Name &i:0 Load) Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_heapq None))) (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (FunctionDef &make_tree:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &tree:1 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:1 Load) Add (Constant i1 None))) None) (Return (Name &tree:1 Load))) nil None None) (FunctionDef &get_sum:0 (arguments nil (list (arg &i:2 None None) (arg &tree:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:2 Store)) (Constant i0 None) None) (While (Compare (Name &i:2 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:2 Store) Add (Subscript (Name &tree:2 Load) (Name &i:2 Load) Load)) (fn_2 &i:2)) nil) (Return (Name &s:2 Load))) nil None None) (FunctionDef &add:0 (arguments nil (list (arg &i:3 None None) (arg &x:3 None None) (arg &tree:3 None None)) None nil nil None nil) (/seq (While (Compare (Name &i:3 Load) (list LtE) (list (Name &n:0 Load))) (/seq (AugAssign (Subscript (Name &tree:3 Load) (Name &i:3 Load) Store) Add (Name &x:3 Load)) (fn_3 &i:3)) nil)) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &v:0 Store)) (fn_1 (Name &input:0 Load)) None) (Assign (list (Name &u:0 Store)) (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Name &v:0 Load)) nil)) nil) None) (Expr (Call (Attribute (Name &u:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (Assign (list (Name &m:0 Store)) (Call (Name g_len Load) (list (Name &u:0 Load)) nil) None) (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Subscript (Name &d:0 Load) (Subscript (Name &u:0 Load) (Name &i:0 Load) Load) Store)) (BinOp (Name &i:0 Load) Add (Constant i2 None)) None)) nil None) (Assign (list (Name &tree:0 Store)) (Call (Name &make_tree:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i5 None))) nil) None) (Assign (list (Name &cnt:0 Store)) (Call (Name &make_tree:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i5 None))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &h:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name g_heapq Load) s_heappush Load) (list (Name &h:0 Load) (Tuple (list (Subscript (Name &x:0 Load) (Name &i:0 Load) Load) (Name &i:0 Load)) Load)) nil))) nil None) (Assign (list (Name &sx:0 Store)) (List nil Load) None) (While (Name &h:0 Load) (/seq (Assign (list (Tuple (list (Name &xi:0 Store) (Name &i:0 Store)) Store)) (Call (Attribute (Name g_heapq Load) s_heappop Load) (list (Name &h:0 Load)) nil) None) (Expr (Call (Attribute (Name &sx:0 Load) s_append Load) (list (Name &xi:0 Load)) nil)) (Assign (list (Name &vi:0 Store)) (Subscript (Name &v:0 Load) (Name &i:0 Load) Load) None) (Assign (list (Name &di:0 Store)) (Subscript (Name &d:0 Load) (Name &vi:0 Load) Load) None) (AugAssign (Name &ans:0 Store) Sub (BinOp (BinOp (Call (Name &get_sum:0 Load) (list (BinOp (Name &di:0 Load) Sub (Constant i1 None)) (Name &cnt:0 Load)) nil) Mult (Name &xi:0 Load)) Sub (Call (Name &get_sum:0 Load) (list (BinOp (Name &di:0 Load) Sub (Constant i1 None)) (Name &tree:0 Load)) nil))) (Expr (Call (Name &add:0 Load) (list (Name &di:0 Load) (Name &xi:0 Load) (Name &tree:0 Load)) nil)) (Expr (Call (Name &add:0 Load) (list (Name &di:0 Load) (Constant i1 None) (Name &cnt:0 Load)) nil))) nil) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) (/seq (AugAssign (Name &ans:0 Store) Add (BinOp (BinOp (BinOp (Name &i:0 Load) Add (Constant i1 None)) Mult (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))) Mult (BinOp (Subscript (Name &sx:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load) Sub (Subscript (Name &sx:0 Load) (Name &i:0 Load) Load))))) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)"
        ]
    }
]
