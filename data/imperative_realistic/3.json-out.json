[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "match_sequences": true,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_choicevar": -1.01,
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                0,
                0,
                "(Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)",
                "E",
                [],
                []
            ],
            [
                0,
                1,
                "(Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)",
                "S",
                [],
                [
                    "X"
                ]
            ],
            [
                0,
                1,
                "(ListComp (Call (Name g_int Load) (list (Name %1 Load)) nil) (list (comprehension (Name %1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0)))",
                "E",
                [],
                [
                    "X"
                ]
            ]
        ],
        "programs": [
            "(Module (/seq (ImportFrom s_collections (list (alias g_Counter None)) i0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &a:1 Store)) (Call (Name &readIntArr:0 Load) nil nil) None) (Assign (list (Name &b:1 Store)) (Call (Name g_sorted Load) (list (Name &a:1 Load)) (list (keyword s_reverse (Constant True None)))) None) (Assign (list (Name &m:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &allans:1 Store)) (List nil Load) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (Name &m:1 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:1 Store) (Name &pos:1 Store)) Store)) (Call (Name &readIntArr:0 Load) nil nil) None) (Assign (list (Name &cnt:1 Store)) (Call (Name g_Counter Load) (list (Subscript (Name &b:1 Load) (Slice None (Name &k:1 Load) None) Load)) nil) None) (Assign (list (Name &totalCnts:1 Store)) (Constant i0 None) None) (For (Name &x:1 Store) (Name &a:1 Load) (/seq (If (Compare (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Store) Sub (Constant i1 None)) (AugAssign (Name &totalCnts:1 Store) Add (Constant i1 None)) (If (Compare (Name &totalCnts:1 Load) (list Eq) (list (Name &pos:1 Load))) (/seq (Expr (Call (Attribute (Name &allans:1 Load) s_append Load) (list (Name &x:1 Load)) nil)) Break) nil)) nil)) nil None)) nil None) (Expr (Call (Name &multiLineArrayPrint:0 Load) (list (Name &allans:1 Load)) nil)) (Return None)) nil None None) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load) None) (FunctionDef &oneLineArrayPrint:0 (arguments nil (list (arg &arr:2 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:11 Load)) nil) (list (comprehension (Name &x:11 Store) (Name &arr:2 Load) nil i0)))) nil)) nil))) nil None None) (FunctionDef &multiLineArrayPrint:0 (arguments nil (list (arg &arr:3 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:12 Load)) nil) (list (comprehension (Name &x:12 Store) (Name &arr:3 Load) nil i0)))) nil)) nil))) nil None None) (FunctionDef &multiLineArrayOfArraysPrint:0 (arguments nil (list (arg &arr:4 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (ListComp (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:15 Load)) nil) (list (comprehension (Name &x:15 Store) (Name &y:13 Load) nil i0)))) nil) (list (comprehension (Name &y:13 Store) (Name &arr:4 Load) nil i0)))) nil)) nil))) nil None None) (FunctionDef &readIntArr:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (Name &x:8 Load)) nil) (list (comprehension (Name &x:8 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &makeArr:0 (arguments nil (list (arg &defaultValFactory:5 None None) (arg &dimensionArr:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &dv:5 Store)) (Name &defaultValFactory:5 Load) None) (Assign (list (Name &da:5 Store)) (Name &dimensionArr:5 Load) None) (If (Compare (Call (Name g_len Load) (list (Name &da:5 Load)) nil) (list Eq) (list (Constant i1 None))) (/seq (Return (ListComp (Call (Name &dv:5 Load) nil nil) (list (comprehension (Name &_:9 Store) (Call (Name g_range Load) (list (Subscript (Name &da:5 Load) (Constant i0 None) Load)) nil) nil i0))))) (/seq (Return (ListComp (Call (Name &makeArr:0 Load) (list (Name &dv:5 Load) (Subscript (Name &da:5 Load) (Slice (Constant i1 None) None None) Load)) nil) (list (comprehension (Name &_:10 Store) (Call (Name g_range Load) (list (Subscript (Name &da:5 Load) (Constant i0 None) Load)) nil) nil i0))))))) nil None None) (FunctionDef &queryInteractive:0 (arguments nil (list (arg &i:6 None None) (arg &j:6 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzYzLCAzMiwgMTIzLCAxMjUsIDMyLCAxMjMsIDEyNV0= None) s_format Load) (list (Name &i:6 Load) (Name &j:6 Load)) nil)) nil)) (Expr (Call (Attribute (Attribute (Name &sys:0 Load) s_stdout Load) s_flush Load) nil nil)) (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))) nil None None) (FunctionDef &answerInteractive:0 (arguments nil (list (arg &ans:7 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMzLCAzMiwgMTIzLCAxMjVd None) s_format Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:14 Load)) nil) (list (comprehension (Name &x:14 Store) (Name &ans:7 Load) nil i0)))) nil)) nil)) nil)) (Expr (Call (Attribute (Attribute (Name &sys:0 Load) s_stdout Load) s_flush Load) nil nil))) nil None None) (Assign (list (Name &inf:0 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None) (Assign (list (Name &MOD:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (For (Name &_abc:0 Store) (Call (Name g_range Load) (list (Constant i1 None)) nil) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil None)) nil)",
            "(Module (/seq (FunctionDef &min_s:0 (arguments nil (list (arg &a:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &res:1 Store)) (Call (Attribute (Name &a:1 Load) s_copy Load) nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (BinOp (Call (Name g_len Load) (list (Name &a:1 Load)) nil) Sub (Name &k:1 Load))) nil) (/seq (Assign (list (Name &m:1 Store)) (Call (Name g_min Load) (list (Name &res:1 Load)) nil) None) (Expr (Call (Attribute (Name &res:1 Load) s_reverse Load) nil nil)) (Expr (Call (Attribute (Name &res:1 Load) s_remove Load) (list (Name &m:1 Load)) nil)) (Expr (Call (Attribute (Name &res:1 Load) s_reverse Load) nil nil))) nil None) (Return (Name &res:1 Load))) nil None None) (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (fn_3 &x:2) None) (fn_2 &m:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_3 &x:3) None) (Assign (list (Name &l:0 Store)) (Call (Name &min_s:0 Load) (list (Name &a:0 Load) (Name &k:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Subscript (Name &l:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &q:0) (Assign (list (Name &qs:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (fn_1) None) (Expr (Call (Attribute (Name &qs:0 Load) s_append Load) (list (List (list (Name &a:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) (Name &i:0 Load)) Load)) nil))) nil None) (Expr (Call (Attribute (Name &qs:0 Load) s_sort Load) nil nil)) (Assign (list (Name &ret:0 Store)) (List nil Load) None) (Assign (list (Name &used:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Assign (list (Name &ans:0 Store)) (ListComp (UnaryOp USub (Constant i1 None)) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) nil i0))) None) (For (Name &z:0 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &l:0 Store) (Name &pos:0 Store) (Name &o:0 Store)) Store)) (Subscript (Name &qs:0 Load) (Name &z:0 Load) Load) None) (While (Compare (Call (Name g_len Load) (list (Name &ret:0 Load)) nil) (list Lt) (list (Name &l:0 Load))) (/seq (Assign (list (Name &mx:0 Store)) (Constant i0 None) None) (Assign (list (Name &ind:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (UnaryOp Not (Subscript (Name &used:0 Load) (Name &i:0 Load) Load)) (/seq (If (Compare (Name &mx:0 Load) (list Lt) (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load))) (/seq (Assign (list (Name &mx:0 Store)) (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) None) (Assign (list (Name &ind:0 Store)) (Name &i:0 Load) None)) nil)) nil)) nil None) (Assign (list (Subscript (Name &used:0 Load) (Name &ind:0 Load) Store)) (Constant i1 None) None) (Expr (Call (Attribute (Name &ret:0 Load) s_append Load) (list (Name &mx:0 Load)) nil))) nil) (Assign (list (Name &c:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Subscript (Name &used:0 Load) (Name &i:0 Load) Load) (/seq (Expr (Call (Attribute (Name &c:0 Load) s_append Load) (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load)) nil))) nil)) nil None) (Assign (list (Subscript (Name &ans:0 Load) (Subscript (Subscript (Name &qs:0 Load) (Name &z:0 Load) Load) (Constant i2 None) Load) Store)) (Subscript (Name &c:0 Load) (Name &pos:0 Load) Load) None)) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &a1:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (UnaryOp USub (Name &x:1 Load)))))) None) (fn_2 &q:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (AugAssign (Name &pos:0 Store) Sub (Constant i1 None)) (Assign (list (Name &notused:0 Store)) (Dict nil nil) None) (For (Name &j:0 Store) (Subscript (Name &a1:0 Load) (Slice None (Name &k:0 Load) None) Load) (/seq (If (Compare (Name &j:0 Load) (list In) (list (Name &notused:0 Load))) (/seq (AugAssign (Subscript (Name &notused:0 Load) (Name &j:0 Load) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &notused:0 Load) (Name &j:0 Load) Store)) (Constant i1 None) None)))) nil None) (For (Name &j:0 Store) (Name &a:0 Load) (/seq (If (Compare (Name &j:0 Load) (list In) (list (Name &notused:0 Load))) (/seq (If (Compare (Name &pos:0 Load) (list Gt) (list (Constant i0 None))) (/seq (If (Compare (Subscript (Name &notused:0 Load) (Name &j:0 Load) Load) (list Gt) (list (Constant i1 None))) (/seq (AugAssign (Subscript (Name &notused:0 Load) (Name &j:0 Load) Store) Sub (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &notused:0 Load) s_pop Load) (list (Name &j:0 Load)) nil)))) (AugAssign (Name &pos:0 Store) Sub (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &j:0 Load)) nil)) Break))) nil)) nil None)) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &line:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &m:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &lf:0 Store)) (Subscript (Name &line:0 Load) (Slice None None None) Load) None) (While (Compare (Call (Name g_len Load) (list (Name &lf:0 Load)) nil) (list Gt) (list (Name &k:0 Load))) (/seq (Assign (list (Name &j:0 Store)) (UnaryOp USub (Constant i1 None)) None) (Assign (list (Name &x:0 Store)) (Call (Name g_min Load) (list (Name &lf:0 Load)) nil) None) (While (Compare (Name &j:0 Load) (list Gt) (list (BinOp (UnaryOp USub (Call (Name g_len Load) (list (Name &lf:0 Load)) nil)) Sub (Constant i1 None)))) (/seq (If (Compare (Subscript (Name &lf:0 Load) (Name &j:0 Load) Load) (list Eq) (list (Name &x:0 Load))) (/seq (Delete (list (Subscript (Name &lf:0 Load) (Name &j:0 Load) Del))) (If (Compare (Call (Name g_len Load) (list (Name &lf:0 Load)) nil) (list Eq) (list (Name &k:0 Load))) (/seq Break) nil)) (/seq (AugAssign (Name &j:0 Store) Sub (Constant i1 None))))) nil)) nil) (Expr (Call (Name g_print Load) (list (Subscript (Name &lf:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &arr:0 Store)) (ListComp (Tuple (list (Name &i:1 Load) (Name &num:1 Load)) Load) (list (comprehension (Tuple (list (Name &num:1 Store) (Name &i:1 Store)) Store) (Call (Name g_enumerate Load) (list (Name &arr:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &arr:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Tuple (list (UnaryOp USub (Subscript (Name &x:2 Load) (Constant i0 None) Load)) (Subscript (Name &x:2 Load) (Constant i1 None) Load)) Load)))))) (fn_2 &m:0) (For (Name &q:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (Call (Name g_tuple Load) (list (fn_1)) nil) None) (Assign (list (Name &now:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Name &arr:0 Load) (/seq (If (Compare (Call (Name g_len Load) (list (Name &now:0 Load)) nil) (list Eq) (list (Name &k:0 Load))) (/seq Break) nil) (Expr (Call (Attribute (Name &now:0 Load) s_append Load) (list (Name &i:0 Load)) nil))) nil None) (Expr (Call (Attribute (Name &now:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (Subscript (Name &x:3 Load) (Constant i1 None) Load)))))) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &now:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &m:0) (Assign (list (Name &x:0 Store)) (ListComp (List (list (Subscript (Name &a:0 Load) (Name &i:1 Load) Load) (Name &i:1 Load)) Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &x:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Subscript (Name &x:2 Load) (Constant i0 None) Load))) (keyword s_reverse (Constant True None))))) (For (Name &_i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &p:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Call (Name g_sorted Load) (list (Subscript (Name &x:0 Load) (Slice None (Name &k:0 Load) None) Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (Subscript (Name &x:3 Load) (Constant i1 None) Load))))) (BinOp (Name &p:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &data:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &m:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &s:0 Store)) (Subscript (Name &data:0 Load) (Slice None None None) Load) None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) (/seq (Assign (list (Name &x:0 Store)) (Call (Attribute (Name &s:0 Load) s_index Load) (list (Call (Name g_max Load) (list (Name &s:0 Load)) nil)) nil) None) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &x:0 Load)) nil)) (Assign (list (Subscript (Name &s:0 Load) (Name &x:0 Load) Store)) (UnaryOp USub (Constant i1 None)) None)) nil None) (Expr (Call (Attribute (Name &ans:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Subscript (Name &data:0 Load) (Subscript (Name &ans:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (fn_3 &i:1) None) (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) nil) None) (Assign (list (Name &c:0 Store)) (List nil Load) None) (Expr (Call (Attribute (Name &c:0 Load) s_append Load) (list (Name &a:0 Load)) nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &k:0 Store)) (BinOp (BinOp (Call (Name g_len Load) (list (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)) nil) Sub (Constant i1 None)) Sub (Call (Attribute (Subscript (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load) s_index Load) (list (Subscript (Name &b:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)) nil)) None) (Expr (Call (Attribute (Name &c:0 Load) s_append Load) (list (BinOp (Subscript (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load) (Slice (Constant i0 None) (Name &k:0 Load) None) Load) Add (Subscript (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load) (Slice (BinOp (Name &k:0 Load) Add (Constant i1 None)) None None) Load))) nil))) nil None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &c:0 Load) (BinOp (BinOp (Call (Name g_len Load) (list (Name &c:0 Load)) nil) Sub (Name &k:0 Load)) Sub (Constant i1 None)) Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (FunctionDef &getFirstSetBitPos:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (Return (BinOp (Call (Attribute (Name g_math Load) s_log2 Load) (list (BinOp (Name &n:1 Load) BitAnd (UnaryOp USub (Name &n:1 Load)))) nil) Add (Constant i1 None)))) nil None None) (FunctionDef &find_div:0 (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &ls:2 Store)) (List nil Load) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (Constant i2 None) (BinOp (Call (Name g_int Load) (list (BinOp (Name &x:2 Load) Pow (Constant f0.5 None))) nil) Add (Constant i1 None))) nil) (/seq (If (Compare (BinOp (Name &x:2 Load) Mod (Name &i:2 Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &ls:2 Load) s_append Load) (list (Name &i:2 Load)) nil)) (If (Compare (Name &i:2 Load) (list NotEq) (list (BinOp (Name &x:2 Load) FloorDiv (Name &i:2 Load)))) (/seq (Expr (Call (Attribute (Name &ls:2 Load) s_append Load) (list (BinOp (Name &x:2 Load) FloorDiv (Name &i:2 Load))) nil))) nil)) nil)) nil None) (Return (Call (Name g_sorted Load) (list (Name &ls:2 Load)) nil))) nil None None) (ImportFrom s_collections (list (alias &Counter:0 None)) i0) (fn_2 &n:0) (Assign (list (Name &ar:0 Store)) (ListComp (Tuple (list (Call (Name g_int Load) (list (Name &x:3 Load)) nil) (Name &i:3 Load)) Load) (list (comprehension (Tuple (list (Name &i:3 Store) (Name &x:3 Store)) Store) (Call (Name g_enumerate Load) (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) nil i0))) None) (Assign (list (Name &arr:0 Store)) (Call (Name g_sorted Load) (list (Name &ar:0 Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:4 None None)) None nil nil None nil) (Tuple (list (Subscript (Name &x:4 Load) (Constant i0 None) Load) (BinOp (UnaryOp USub (Constant i1 None)) Mult (Subscript (Name &x:4 Load) (Constant i1 None) Load))) Load))))) None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &ls:0 Store)) (Call (Name g_sorted Load) (list (Subscript (Name &arr:0 Load) (Slice (UnaryOp USub (Name &k:0 Load)) None None) Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:5 None None)) None nil nil None nil) (Subscript (Name &x:5 Load) (Constant i1 None) Load))))) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &ls:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)"
        ]
    }
]
