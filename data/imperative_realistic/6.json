["(Module\n  (/seq\n    (ImportFrom s_os (list (alias g_path None)) i0)\n    (Import (list (alias g_sys None) (alias g_time None)))\n    (ImportFrom\n      s_math\n      (list\n        (alias g_ceil None)\n        (alias g_floor None)\n        (alias g_gcd None)\n        (alias g_log None)\n        (alias g_log2 None)\n        (alias g_factorial None)\n      )\n      i0\n    )\n    (ImportFrom\n      s_collections\n      (list (alias g_defaultdict None) (alias g_Counter None) (alias g_OrderedDict None) (alias g_deque None))\n      i0\n    )\n    (ImportFrom s_heapq (list (alias g_heapify None) (alias g_heappush None) (alias g_heappop None)) i0)\n    (ImportFrom s_bisect (list (alias g_* None)) i0)\n    (ImportFrom s_operator (list (alias g_mul None)) i0)\n    (ImportFrom s_itertools (list (alias g_permutations None)) i0)\n    (Assign\n      (list (Tuple (list (Name &maxx:0 Store) (Name &mod:0 Store)) Store))\n      (Tuple\n        (list\n          (Call (Name g_float Load) (list (Constant s_inf None)) nil)\n          (Call (Name g_int Load) (list (BinOp (Constant f1000000000.0 None) Add (Constant i7 None))) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &localsys:0 Store) (Name &start_time:0 Store)) Store))\n      (Tuple (list (Constant i0 None) (Call (Attribute (Name g_time Load) s_time Load) nil nil)) Load)\n      None\n    )\n    (If\n      (Call (Attribute (Name g_path Load) s_exists Load) (list (Constant s_input.txt None)) nil)\n      (/seq\n        (Assign (list (Name &localsys:0 Store)) (Constant i1 None) None)\n        (Assign\n          (list (Attribute (Name g_sys Load) s_stdin Store))\n          (Call (Name g_open Load) (list (Constant s_input.txt None) (Constant s_r None)) nil)\n          None\n        )\n        (Assign\n          (list (Attribute (Name g_sys Load) s_stdout Store))\n          (Call (Name g_open Load) (list (Constant s_output.txt None) (Constant s_w None)) nil)\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &N:0 Store))\n      (Call (Name g_int Load) (list (BinOp (Constant f200000.0 None) Add (Constant i10 None))) nil)\n      None\n    )\n    (Assign (list (Name &dp:0 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &N:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Name &N:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (Name &mod:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (While\n          (Name &n:0 Load)\n          (/seq\n            (Assign (list (Name &i:0 Store)) (BinOp (Name &n:0 Load) Mod (Constant i10 None)) None)\n            (AugAssign (Name &n:0 Store) FloorDiv (Constant i10 None))\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Add (Name &m:0 Load)) Load)\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n              None\n            )\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n    (If\n      (Name &localsys:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Constant\n                s-WzEwLCAxMCwgMTAsIDg0LCAxMDUsIDEwOSwgMTAxLCAzMiwgNjksIDEwOCwgOTcsIDExNSwgMTAxLCAxMDAsIDMyLCA1OF0=\n                None\n              )\n              (BinOp (Call (Attribute (Name g_time Load) s_time Load) nil nil) Sub (Name &start_time:0 Load))\n              (Constant s_seconds None)\n            )\n            nil\n          )\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (ImportFrom\n      s_math\n      (list\n        (alias g_floor None)\n        (alias g_gcd None)\n        (alias g_fabs None)\n        (alias g_factorial None)\n        (alias g_fmod None)\n        (alias g_sqrt None)\n        (alias g_inf None)\n        (alias g_log None)\n      )\n      i0\n    )\n    (ImportFrom s_collections (list (alias s_defaultdict g_dd) (alias g_deque None)) i0)\n    (ImportFrom\n      s_heapq\n      (list\n        (alias g_merge None)\n        (alias g_heapify None)\n        (alias g_heappop None)\n        (alias g_heappush None)\n        (alias g_nsmallest None)\n      )\n      i0\n    )\n    (ImportFrom s_bisect (list (alias s_bisect_left g_bl) (alias s_bisect_right g_br) (alias g_bisect None)) i0)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (Call (Name g_pow Load) (list (Constant i10 None) (Constant i9 None)) nil) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &mod2:0 Store)) (Constant i998244353 None) None)\n    (FunctionDef\n      &inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &iinp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &inp:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &out:0\n      (arguments\n        nil\n        (list (arg &var:1 None None) (arg &end:1 None None))\n        None\n        nil\n        nil\n        None\n        (list (Constant s-WzEwXQ== None))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name g_stdout Load) s_write Load)\n            (list (BinOp (Call (Name g_str Load) (list (Name &var:1 Load)) nil) Add (Constant s-WzEwXQ== None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &outa:0\n      (arguments\n        nil\n        nil\n        (arg &var:2 None None)\n        (list (arg &end:2 None None))\n        (list (Constant s-WzEwXQ== None))\n        None\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name g_stdout Load) s_write Load)\n            (list\n              (BinOp\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list (Call (Name g_map Load) (list (Name g_str Load) (Name &var:2 Load)) nil))\n                  nil\n                )\n                Add\n                (Name &end:2 Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lmp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_list Load) (list (Call (Name &mp:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &mp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &smp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_str Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &l1d:0\n      (arguments nil (list (arg &n:3 None None) (arg &val:3 None None)) None nil nil None (list (Constant i0 None)))\n      (/seq\n        (Return\n          (ListComp\n            (Name &val:3 Load)\n            (list (comprehension (Name &i:8 Store) (Call (Name g_range Load) (list (Name &n:3 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &l2d:0\n      (arguments\n        nil\n        (list (arg &n:4 None None) (arg &m:4 None None) (arg &val:4 None None))\n        None\n        nil\n        nil\n        None\n        (list (Constant i0 None))\n      )\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name &l1d:0 Load) (list (Name &m:4 Load) (Name &val:4 Load)) nil)\n            (list (comprehension (Name &j:9 Store) (Call (Name g_range Load) (list (Name &n:4 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &remadd:0\n      (arguments nil (list (arg &x:5 None None) (arg &y:5 None None)) None nil nil None nil)\n      (/seq (Return (IfExp (BinOp (Name &x:5 Load) Mod (Name &y:5 Load)) (Constant i1 None) (Constant i0 None))))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ceil:0\n      (arguments nil (list (arg &a:6 None None) (arg &b:6 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp (BinOp (BinOp (Name &a:6 Load) Add (Name &b:6 Load)) Sub (Constant i1 None)) FloorDiv (Name &b:6 Load))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &isprime:0\n      (arguments nil (list (arg &x:7 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &x:7 Load) (list LtE) (list (Constant i1 None))) (/seq (Return (Constant False None))) nil)\n        (If\n          (Compare (Name &x:7 Load) (list In) (list (Tuple (list (Constant i2 None) (Constant i3 None)) Load)))\n          (/seq (Return (Constant True None)))\n          nil\n        )\n        (If\n          (Compare (BinOp (Name &x:7 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq (Return (Constant False None)))\n          nil\n        )\n        (For\n          (Name &i:7 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Constant i3 None)\n              (BinOp\n                (Call (Name g_int Load) (list (Call (Name g_sqrt Load) (list (Name &x:7 Load)) nil)) nil)\n                Add\n                (Constant i1 None)\n              )\n              (Constant i2 None)\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &x:7 Load) Mod (Name &i:7 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq (Return (Constant False None)))\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (Constant True None))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &K:0 Store)) (Constant i200011 None) None)\n    (Assign\n      (list (Name &ml0:0 Store))\n      (Call (Name &l1d:0 Load) (list (Name &K:0 Load) (UnaryOp USub (Constant i1 None))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None)) nil)\n      (/seq (Assign (list (Subscript (Name &ml0:0 Load) (Name &i:0 Load) Store)) (Constant i1 None) None))\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Name &K:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &ml0:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &ml0:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &ml0:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (Name &mod:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &inp:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign (list (Tuple (list (Name &n:0 Store) (Name &k:0 Store)) Store)) (Call (Name &mp:0 Load) nil nil) None)\n        (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n        (While\n          (Name &n:0 Load)\n          (/seq\n            (Assign\n              (list (Name &c:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &c:0 Load)\n                  Add\n                  (Subscript\n                    (Name &ml0:0 Load)\n                    (BinOp (Name &k:0 Load) Add (BinOp (Name &n:0 Load) Mod (Constant i10 None)))\n                    Load\n                  )\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n              None\n            )\n            (AugAssign (Name &n:0 Store) FloorDiv (Constant i10 None))\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_os.path None)))\n    (ImportFrom s_collections (list (alias g_* None)) i0)\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_bisect None)))\n    (If\n      (Call (Attribute (Attribute (Name g_os Load) s_path Load) s_exists Load) (list (Constant s_input.txt None)) nil)\n      (/seq\n        (Assign\n          (list (Attribute (Name g_sys Load) s_stdin Store))\n          (Call (Name g_open Load) (list (Constant s_input.txt None) (Constant s_r None)) nil)\n          None\n        )\n        (Assign\n          (list (Attribute (Name g_sys Load) s_stdout Store))\n          (Call (Name g_open Load) (list (Constant s_output.txt None) (Constant s_w None)) nil)\n          None\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &input:0 Store))\n          (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load)\n          None\n        )\n      )\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (BinOp\n        (List (list (Constant i0 None)) Load)\n        Mult\n        (BinOp\n          (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n          Add\n          (Constant i10 None)\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None)) nil)\n      (/seq (Assign (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store)) (Constant i1 None) None))\n      nil\n      None\n    )\n    (Assign\n      (list (Name &N:0 Store))\n      (BinOp (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None))) Add (Constant i10 None))\n      None\n    )\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Name &N:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n            )\n            Mod\n            (Name &mod:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &tt:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (While\n      (Name &tt:0 Load)\n      (/seq\n        (AugAssign (Name &tt:0 Store) Sub (Constant i1 None))\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:1 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n        (While\n          (Name &n:0 Load)\n          (/seq\n            (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) Mod (Constant i10 None)) None)\n            (Assign\n              (list (Name &res:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &res:0 Load)\n                  Add\n                  (Subscript (Name &dp:0 Load) (BinOp (Name &x:0 Load) Add (Name &m:0 Load)) Load)\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n              None\n            )\n            (AugAssign (Name &n:0 Store) FloorDiv (Constant i10 None))\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &dp:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i200010 None)) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (Constant i10 None)))\n          (/seq (Expr (Call (Attribute (Name &dp:0 Load) s_append Load) (list (Constant i1 None)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &dp:0 Load) s_append Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n                      Add\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n                    )\n                    Mod\n                    (Name &M:0 Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Name &m:0 Load)) nil) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Name &n:0 Load)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &i:0 Load)) nil))\n                    Load\n                  )\n                )\n                Mod\n                (Name &M:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (FunctionDef\n      &add:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp (BinOp (Name &a:1 Load) Mod (Name &mod:0 Load)) Add (BinOp (Name &b:1 Load) Mod (Name &mod:0 Load)))\n            Mod\n            (Name &mod:0 Load)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (BinOp\n        (List (list (Constant i1 None)) Load)\n        Mult\n        (BinOp\n          (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n          Add\n          (Constant i10 None)\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (Constant i10 None)\n          (BinOp\n            (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n            Add\n            (Constant i10 None)\n          )\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (Call\n            (Name &add:0 Load)\n            (list\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            nil\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (FunctionDef\n      &answer:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ans:2 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_str Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &ans:2 Store))\n              (Call\n                (Name &add:0 Load)\n                (list\n                  (Name &ans:2 Load)\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &i:2 Load)) nil))\n                    Load\n                  )\n                )\n                nil\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &ans:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &T:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil) s_split Load)\n                nil\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Call (Name &answer:0 Load) nil nil)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None) (alias g_os None) (alias g_io None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute\n        (Call\n          (Attribute (Name g_io Load) s_BytesIO Load)\n          (list\n            (Call\n              (Attribute (Name g_os Load) s_read Load)\n              (list\n                (Constant i0 None)\n                (Attribute\n                  (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil)\n                  s_st_size\n                  Load\n                )\n              )\n              nil\n            )\n          )\n          nil\n        )\n        s_readline\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &maxn:0 Store))\n      (BinOp (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None))) Add (Constant i15 None))\n      None\n    )\n    (Assign (list (Name &dp:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &maxn:0 Load)) None)\n    (Assign (list (Subscript (Name &dp:0 Load) (Constant i0 None) Store)) (Constant i1 None) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &maxn:0 Load) Sub (Constant i13 None))) nil)\n      (/seq\n        (AugAssign (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store) Mod (Name &mod:0 Load))\n        (If\n          (Compare (Name &i:0 Load) (list GtE) (list (Constant i10 None)))\n          (/seq\n            (AugAssign\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Add (Constant i9 None)) Store)\n              Add\n              (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load)\n            )\n          )\n          nil\n        )\n        (AugAssign\n          (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Add (Constant i10 None)) Store)\n          Add\n          (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load)\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (Name &maxn:0 Load)) nil)\n      (/seq\n        (AugAssign\n          (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store)\n          Add\n          (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n            (list\n              (comprehension\n                (Name &i:1 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &i:2 Load)) nil)\n            (list (comprehension (Name &i:2 Store) (Call (Name g_str Load) (list (Name &n:0 Load)) nil) nil i0))\n          )\n          None\n        )\n        (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil)\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (Subscript\n                (Name &dp:0 Load)\n                (BinOp (Name &m:0 Load) Add (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))\n                Load\n              )\n            )\n            (AugAssign (Name &ans:0 Store) Mod (Name &mod:0 Load))\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &mxn:0 Store))\n      (BinOp (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None))) Add (Constant i10 None))\n      None\n    )\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &dp:0 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &mxn:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Name &mxn:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (Name &mod:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &test:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &k:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil) s_split Load)\n                nil\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (While\n          (Name &n:0 Load)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (Name &k:0 Load) Add (BinOp (Name &n:0 Load) Mod (Constant i10 None)))\n                    Load\n                  )\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n              None\n            )\n            (AugAssign (Name &n:0 Store) FloorDiv (Constant i10 None))\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_math None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (FunctionDef\n      &inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &inlt:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &insr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:3 Store)) (Call (Name &input:0 Load) nil nil) None)\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Subscript\n                (Name &s:3 Load)\n                (Slice None (BinOp (Call (Name g_len Load) (list (Name &s:3 Load)) nil) Sub (Constant i1 None)) None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &invr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &dijkstra:0\n      (arguments\n        nil\n        (list (arg &start:4 None None) (arg &distance:4 None None) (arg &path:4 None None) (arg &n:4 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &visited:4 Store))\n          (ListComp\n            (Constant False None)\n            (list (comprehension (Name &_:17 Store) (Call (Name g_range Load) (list (Name &n:4 Load)) nil) nil i0))\n          )\n          None\n        )\n        (Assign (list (Subscript (Name &distance:4 Load) (Name &start:4 Load) Store)) (Constant i0 None) None)\n        (For\n          (Name &i:4 Store)\n          (Call (Name g_range Load) (list (Name &n:4 Load)) nil)\n          (/seq\n            (Assign (list (Name &v:4 Store)) (UnaryOp USub (Constant i1 None)) None)\n            (For\n              (Name &j:4 Store)\n              (Call (Name g_range Load) (list (Name &n:4 Load)) nil)\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (UnaryOp Not (Subscript (Name &visited:4 Load) (Name &v:4 Load) Load))\n                      (BoolOp\n                        Or\n                        (list\n                          (Compare (Name &v:4 Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))\n                          (Compare\n                            (Subscript (Name &distance:4 Load) (Name &j:4 Load) Load)\n                            (list Lt)\n                            (list (Subscript (Name &distance:4 Load) (Name &v:4 Load) Load))\n                          )\n                        )\n                      )\n                    )\n                  )\n                  (/seq (Assign (list (Name &v:4 Store)) (Name &j:4 Load) None))\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (If\n              (Compare\n                (Subscript (Name &distance:4 Load) (Name &v:4 Load) Load)\n                (list Eq)\n                (list (Attribute (Name g_math Load) s_inf Load))\n              )\n              (/seq Break)\n              nil\n            )\n            (Assign (list (Subscript (Name &visited:4 Load) (Name &v:4 Load) Store)) (Constant True None) None)\n            (For\n              (Name &edge:4 Store)\n              (Subscript (Name g_adj Load) (Name &v:4 Load) Load)\n              (/seq\n                (Assign (list (Name &destination:4 Store)) (Subscript (Name &edge:4 Load) (Constant i0 None) Load) None)\n                (Assign (list (Name &weight:4 Store)) (Subscript (Name &edge:4 Load) (Constant i1 None) Load) None)\n                (If\n                  (Compare\n                    (BinOp (Subscript (Name &distance:4 Load) (Name &v:4 Load) Load) Add (Name &weight:4 Load))\n                    (list Lt)\n                    (list (Subscript (Name &distance:4 Load) (Name &destination:4 Load) Load))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &distance:4 Load) (Name &destination:4 Load) Store))\n                      (BinOp (Subscript (Name &distance:4 Load) (Name &v:4 Load) Load) Add (Name &weight:4 Load))\n                      None\n                    )\n                    (Assign\n                      (list (Subscript (Name &path:4 Load) (Name &destination:4 Load) Store))\n                      (Name &v:4 Load)\n                      None\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &gcd:0\n      (arguments nil (list (arg &a:5 None None) (arg &b:5 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &b:5 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Return (Name &a:5 Load)))\n          (/seq\n            (Return (Call (Name &gcd:0 Load) (list (Name &b:5 Load) (BinOp (Name &a:5 Load) Mod (Name &b:5 Load))) nil))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lcm:0\n      (arguments nil (list (arg &a:6 None None) (arg &b:6 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp (Name &a:6 Load) Mult (Name &b:6 Load))\n            FloorDiv\n            (Call (Name &gcd:0 Load) (list (Name &a:6 Load) (Name &b:6 Load)) nil)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ncr:0\n      (arguments nil (list (arg &n:7 None None) (arg &r:7 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (Call (Attribute (Name g_math Load) s_factorial Load) (list (Name &n:7 Load)) nil)\n            FloorDiv\n            (BinOp\n              (Call\n                (Attribute (Name g_math Load) s_factorial Load)\n                (list (BinOp (Name &n:7 Load) Sub (Name &r:7 Load)))\n                nil\n              )\n              Mult\n              (Call (Attribute (Name g_math Load) s_factorial Load) (list (Name &r:7 Load)) nil)\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &npr:0\n      (arguments nil (list (arg &n:8 None None) (arg &r:8 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (Call (Attribute (Name g_math Load) s_factorial Load) (list (Name &n:8 Load)) nil)\n            FloorDiv\n            (Call\n              (Attribute (Name g_math Load) s_factorial Load)\n              (list (BinOp (Name &n:8 Load) Sub (Name &r:8 Load)))\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &seive:0\n      (arguments nil (list (arg &n:9 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &primes:9 Store))\n          (BinOp (List (list (Constant True None)) Load) Mult (BinOp (Name &n:9 Load) Add (Constant i1 None)))\n          None\n        )\n        (Assign (list (Name &ans:9 Store)) (List nil Load) None)\n        (For\n          (Name &i:9 Store)\n          (Call (Name g_range Load) (list (Constant i2 None) (Name &n:9 Load)) nil)\n          (/seq\n            (If (UnaryOp Not (Subscript (Name &primes:9 Load) (Name &i:9 Load) Load)) (/seq Continue) nil)\n            (Assign (list (Name &j:9 Store)) (BinOp (Constant i2 None) Mult (Name &i:9 Load)) None)\n            (While\n              (Compare (Name &j:9 Load) (list LtE) (list (Name &n:9 Load)))\n              (/seq\n                (Assign (list (Subscript (Name &primes:9 Load) (Name &j:9 Load) Store)) (Constant False None) None)\n                (AugAssign (Name &j:9 Store) Add (Name &i:9 Load))\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &p:9 Store)\n          (Call (Name g_range Load) (list (Constant i2 None) (BinOp (Name &n:9 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (If\n              (Subscript (Name &primes:9 Load) (Name &p:9 Load) Load)\n              (/seq (AugAssign (Name &ans:9 Store) Add (List (list (Name &p:9 Load)) Load)))\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &ans:9 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &factors:0\n      (arguments nil (list (arg &n:10 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &factors:10 Store)) (List nil Load) None)\n        (Assign (list (Name &x:10 Store)) (Constant i1 None) None)\n        (While\n          (Compare (BinOp (Name &x:10 Load) Mult (Name &x:10 Load)) (list LtE) (list (Name &n:10 Load)))\n          (/seq\n            (If\n              (Compare (BinOp (Name &n:10 Load) Mod (Name &x:10 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (If\n                  (Compare (BinOp (Name &n:10 Load) FloorDiv (Name &x:10 Load)) (list Eq) (list (Name &x:10 Load)))\n                  (/seq (Expr (Call (Attribute (Name &factors:10 Load) s_append Load) (list (Name &x:10 Load)) nil)))\n                  (/seq\n                    (Expr (Call (Attribute (Name &factors:10 Load) s_append Load) (list (Name &x:10 Load)) nil))\n                    (Expr\n                      (Call\n                        (Attribute (Name &factors:10 Load) s_append Load)\n                        (list (BinOp (Name &n:10 Load) FloorDiv (Name &x:10 Load)))\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Name &x:10 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Return (Name &factors:10 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Try\n          (/seq\n            (Assign\n              (list (Name &max_n:11 Store))\n              (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n              None\n            )\n            (Assign\n              (list (Name &mod:11 Store))\n              (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n              None\n            )\n            (Assign\n              (list (Name &dp:11 Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (Name &max_n:11 Load))\n              None\n            )\n            (For\n              (Name &i:11 Store)\n              (Call (Name g_range Load) (list (Constant i0 None) (Constant i9 None)) nil)\n              (/seq (Assign (list (Subscript (Name &dp:11 Load) (Name &i:11 Load) Store)) (Constant i2 None) None))\n              nil\n              None\n            )\n            (Assign (list (Subscript (Name &dp:11 Load) (Constant i9 None) Store)) (Constant i3 None) None)\n            (For\n              (Name &i:11 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (Constant i10 None)\n                  (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Name &dp:11 Load) (Name &i:11 Load) Store))\n                  (BinOp\n                    (Subscript (Name &dp:11 Load) (BinOp (Name &i:11 Load) Sub (Constant i9 None)) Load)\n                    Add\n                    (Subscript (Name &dp:11 Load) (BinOp (Name &i:11 Load) Sub (Constant i10 None)) Load)\n                  )\n                  None\n                )\n                (AugAssign (Subscript (Name &dp:11 Load) (Name &i:11 Load) Store) Mod (Name &mod:11 Load))\n              )\n              nil\n              None\n            )\n            (For\n              (Name &_:11 Store)\n              (Call (Name g_range Load) (list (Call (Name &inp:0 Load) nil nil)) nil)\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &n:11 Store) (Name &m:11 Store)) Store))\n                  (Call (Name &invr:0 Load) nil nil)\n                  None\n                )\n                (Assign (list (Name &ans:11 Store)) (Constant i0 None) None)\n                (While\n                  (Compare (Name &n:11 Load) (list Gt) (list (Constant i0 None)))\n                  (/seq\n                    (Assign (list (Name &x:11 Store)) (BinOp (Name &n:11 Load) Mod (Constant i10 None)) None)\n                    (AugAssign\n                      (Name &ans:11 Store)\n                      Add\n                      (BinOp\n                        (BinOp\n                          (Constant i1 None)\n                          Mult\n                          (Call\n                            (Name g_int Load)\n                            (list\n                              (Compare\n                                (BinOp (Name &m:11 Load) Add (Name &x:11 Load))\n                                (list Lt)\n                                (list (Constant i10 None))\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        Add\n                        (BinOp\n                          (Subscript\n                            (Name &dp:11 Load)\n                            (BinOp (BinOp (Name &m:11 Load) Add (Name &x:11 Load)) Sub (Constant i10 None))\n                            Load\n                          )\n                          Mult\n                          (Call\n                            (Name g_int Load)\n                            (list\n                              (UnaryOp\n                                Not\n                                (Compare\n                                  (BinOp (Name &m:11 Load) Add (Name &x:11 Load))\n                                  (list Lt)\n                                  (list (Constant i10 None))\n                                )\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                    (AugAssign (Name &ans:11 Store) Mod (Name &mod:11 Load))\n                    (AugAssign (Name &n:11 Store) FloorDiv (Constant i10 None))\n                  )\n                  nil\n                )\n                (Expr (Call (Name g_print Load) (list (Name &ans:11 Load)) nil))\n              )\n              nil\n              None\n            )\n          )\n          (list\n            (ExceptHandler\n              (Name g_Exception Load)\n              &e:11\n              (/seq (Expr (Call (Name g_print Load) (list (Name &e:11 Load)) nil)))\n            )\n          )\n          nil\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:12 None None) (arg &file:12 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:12 Load) s__fd Store))\n              (Call (Attribute (Name &file:12 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:12 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:12 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:12 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:12 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:12 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:12 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:13 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:13 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:13 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:13 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:13 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:13 Store))\n                  (Call (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:13 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:13 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:13 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:14 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:14 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:14 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:14 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:14 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:14 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:14 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:14 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:14 Store))\n                  (Call (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:14 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:14 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:14 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:15 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:15 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:15 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:15 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:15 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:15 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:16 None None) (arg &file:16 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:16 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:16 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:16 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:16 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:16 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:18 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:18 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:16 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:16 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None)) i0)\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil)\n      None\n    )\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (BinOp\n        (List (list (Constant i0 None)) Load)\n        Mult\n        (BinOp\n          (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n          Add\n          (Constant i10 None)\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None)) nil)\n      (/seq (Assign (list (Subscript (Name &f:0 Load) (Name &i:0 Load) Store)) (Constant i1 None) None))\n      nil\n      None\n    )\n    (Assign (list (Subscript (Name &f:0 Load) (Constant i10 None) Store)) (Constant i2 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (Constant i11 None)\n          (BinOp\n            (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n            Add\n            (Constant i10 None)\n          )\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &f:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &f:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n              Add\n              (Subscript (Name &f:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n            )\n            Mod\n            (Name &mod:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &c:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i10 None)) None)\n        (Assign (list (Name &n:0 Store)) (Call (Name g_str Load) (list (Name &n:0 Load)) nil) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &n:0 Load)) nil)) nil)\n          (/seq\n            (AugAssign\n              (Subscript\n                (Name &c:0 Load)\n                (Call (Name g_int Load) (list (Subscript (Name &n:0 Load) (Name &i:0 Load) Load)) nil)\n                Store\n              )\n              Add\n              (Constant i1 None)\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Constant i10 None)) nil)\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (BinOp\n                (Subscript (Name &c:0 Load) (Name &i:0 Load) Load)\n                Mult\n                (Subscript (Name &f:0 Load) (BinOp (Name &m:0 Load) Add (Name &i:0 Load)) Load)\n              )\n            )\n            (AugAssign (Name &ans:0 Store) Mod (Name &mod:0 Load))\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (Call (Name g_pow Load) (list (Constant i10 None) (Constant i9 None)) nil) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &cnt:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (Constant i200020 None)) nil) nil i0))\n      )\n      None\n    )\n    (Assign (list (Name &cnt0:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i10 None)) None)\n    (Assign (list (Subscript (Name &cnt0:0 Load) (Constant i0 None) Store)) (Constant i1 None) None)\n    (Assign (list (Name &s:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &k:0 Store)\n      (Call (Name g_range Load) (list (Constant i200020 None)) nil)\n      (/seq\n        (Assign\n          (list (Name &x:0 Store))\n          (Subscript\n            (Name &cnt0:0 Load)\n            (BinOp (BinOp (Constant i9 None) Sub (Name &k:0 Load)) Mod (Constant i10 None))\n            Load\n          )\n          None\n        )\n        (AugAssign\n          (Subscript\n            (Name &cnt0:0 Load)\n            (BinOp (BinOp (Constant i10 None) Sub (Name &k:0 Load)) Mod (Constant i10 None))\n            Store\n          )\n          Add\n          (Name &x:0 Load)\n        )\n        (AugAssign\n          (Subscript\n            (Name &cnt0:0 Load)\n            (BinOp (BinOp (Constant i10 None) Sub (Name &k:0 Load)) Mod (Constant i10 None))\n            Store\n          )\n          Mod\n          (Name &mod:0 Load)\n        )\n        (AugAssign (Name &s:0 Store) Add (Name &x:0 Load))\n        (AugAssign (Name &s:0 Store) Mod (Name &mod:0 Load))\n        (Assign (list (Subscript (Name &cnt:0 Load) (Name &k:0 Load) Store)) (Name &s:0 Load) None)\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_str Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (Subscript\n                (Name &cnt:0 Load)\n                (BinOp\n                  (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &i:0 Load)) nil))\n                  Sub\n                  (Constant i1 None)\n                )\n                Load\n              )\n            )\n          )\n          nil\n          None\n        )\n        (AugAssign (Name &ans:0 Store) Mod (Name &mod:0 Load))\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &maxx:0 Store))\n      (BinOp (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None))) Add (Constant i20 None))\n      None\n    )\n    (ImportFrom s_collections (list (alias &Counter:0 None)) i0)\n    (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &maxx:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Name &maxx:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &ans:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &ans:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (Name &mod:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &nt:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &fans:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &n:0 Store)) (Call (Name g_str Load) (list (Name &n:0 Load)) nil) None)\n        (For\n          (Name &digit:0 Store)\n          (Name &n:0 Load)\n          (/seq\n            (AugAssign\n              (Name &fans:0 Store)\n              Add\n              (Subscript\n                (Name &ans:0 Load)\n                (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &digit:0 Load)) nil))\n                Load\n              )\n            )\n            (AugAssign (Name &fans:0 Store) Mod (Name &mod:0 Load))\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (BinOp (Name &fans:0 Load) Mod (Name &mod:0 Load))) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &mxi:0 Store)) (Constant i210000 None) None)\n    (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &mxi:0 Load)) None)\n    (Assign (list (Name &cts:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i10 None)) None)\n    (Assign (list (Subscript (Name &cts:0 Load) (Constant i0 None) Store)) (Constant i1 None) None)\n    (Assign (list (Name &s:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &mxi:0 Load)) nil)\n      (/seq\n        (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &s:0 Load) None)\n        (AugAssign (Name &s:0 Store) Add (Subscript (Name &cts:0 Load) (UnaryOp USub (Constant i1 None)) Load))\n        (AugAssign (Name &s:0 Store) Mod (Name &mod:0 Load))\n        (AugAssign\n          (Subscript (Name &cts:0 Load) (Constant i0 None) Store)\n          Add\n          (Subscript (Name &cts:0 Load) (UnaryOp USub (Constant i1 None)) Load)\n        )\n        (AugAssign (Subscript (Name &cts:0 Load) (Constant i0 None) Store) Mod (Name &mod:0 Load))\n        (Expr\n          (Call\n            (Attribute (Name &cts:0 Load) s_insert Load)\n            (list (Constant i0 None) (Call (Attribute (Name &cts:0 Load) s_pop Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &f:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &sol:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &x:0 Store)\n          (Call (Name g_str Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (AugAssign\n              (Name &sol:0 Store)\n              Add\n              (Subscript\n                (Name &ans:0 Load)\n                (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &x:0 Load)) nil))\n                Load\n              )\n            )\n            (AugAssign (Name &sol:0 Store) Mod (Name &mod:0 Load))\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &sol:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (Assign\n      (list (Name &z:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &dp:0 Store)) (Dict nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i200009 None)) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (Constant i9 None)))\n          (/seq (Assign (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store)) (Constant i2 None) None))\n          (/seq\n            (If\n              (Compare (Name &i:0 Load) (list Eq) (list (Constant i9 None)))\n              (/seq (Assign (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store)) (Constant i3 None) None))\n              (/seq\n                (Assign\n                  (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n                  (BinOp\n                    (BinOp\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n                      Add\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n                    )\n                    Mod\n                    (Name &z:0 Load)\n                  )\n                  None\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Name &n:0 Load)) nil) None)\n        (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Name &m:0 Load)) nil) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Assign (list (Name &i:0 Store)) (BinOp (Name &n:0 Load) Mod (Constant i10 None)) None)\n            (If\n              (Compare (BinOp (Name &m:0 Load) Add (Name &i:0 Load)) (list Lt) (list (Constant i10 None)))\n              (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n              (/seq\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Add\n                  (BinOp\n                    (Subscript\n                      (Name &dp:0 Load)\n                      (BinOp (BinOp (Name &m:0 Load) Add (Name &i:0 Load)) Sub (Constant i10 None))\n                      Load\n                    )\n                    Mod\n                    (Name &z:0 Load)\n                  )\n                )\n              )\n            )\n            (Assign (list (Name &ans:0 Store)) (BinOp (Name &ans:0 Load) Mod (Name &z:0 Load)) None)\n            (AugAssign (Name &n:0 Store) FloorDiv (Constant i10 None))\n          )\n          nil\n        )\n        (Expr\n          (Call\n            (Attribute (Name g_stdout Load) s_write Load)\n            (list (BinOp (Call (Name g_str Load) (list (Name &ans:0 Load)) nil) Add (Constant s-WzEwXQ== None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (Import (list (alias g_math None)))\n    (ImportFrom s_collections (list (alias g_Counter None)) i0)\n    (Assign (list (Name &CACHES:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None)) nil)\n      (/seq (Expr (Call (Attribute (Name &CACHES:0 Load) s_append Load) (list (Constant i1 None)) nil)))\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (Constant i10 None)\n          (BinOp\n            (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n            Add\n            (Constant i10 None)\n          )\n        )\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &CACHES:0 Load) s_append Load)\n            (list\n              (BinOp\n                (BinOp\n                  (Subscript (Name &CACHES:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n                  Add\n                  (Subscript (Name &CACHES:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n                )\n                Mod\n                (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (FunctionDef\n      &step:0\n      (arguments nil (list (arg &count:3 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &CACHES:0 Load) (Name &count:3 Load) Load) (list IsNot) (list (Constant None None)))\n          (/seq (Return (Subscript (Name &CACHES:0 Load) (Name &count:3 Load) Load)))\n          nil\n        )\n        (If\n          (Compare (Name &count:3 Load) (list Lt) (list (Constant i10 None)))\n          (/seq\n            (Assign (list (Subscript (Name &CACHES:0 Load) (Name &count:3 Load) Store)) (Constant i1 None) None)\n            (Return (Subscript (Name &CACHES:0 Load) (Name &count:3 Load) Load))\n          )\n          nil\n        )\n        (Assign\n          (list (Name &val:3 Store))\n          (BinOp\n            (Call (Name &step:0 Load) (list (BinOp (Name &count:3 Load) Sub (Constant i9 None))) nil)\n            Add\n            (Call (Name &step:0 Load) (list (BinOp (Name &count:3 Load) Sub (Constant i10 None))) nil)\n          )\n          None\n        )\n        (Return\n          (BinOp\n            (Name &val:3 Load)\n            Mod\n            (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &func:0\n      (arguments nil (list (arg &array:4 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Tuple (list (Name &n:4 Store) (Name &m:4 Store)) Store)) (Name &array:4 Load) None)\n        (Assign (list (Name &count:4 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &digits:4 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &i:11 Load)) nil)\n            (list (comprehension (Name &i:11 Store) (Call (Name g_str Load) (list (Name &n:4 Load)) nil) nil i0))\n          )\n          None\n        )\n        (For\n          (Name &digit:4 Store)\n          (Name &digits:4 Load)\n          (/seq\n            (AugAssign\n              (Name &count:4 Store)\n              Add\n              (BinOp\n                (Call (Name &step:0 Load) (list (BinOp (Name &digit:4 Load) Add (Name &m:4 Load))) nil)\n                Mod\n                (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Return\n          (BinOp\n            (Name &count:4 Load)\n            Mod\n            (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &num_test:5 Store))\n          (Call (Name g_int Load) (list (Call (Name &parse_input:0 Load) nil nil)) nil)\n          None\n        )\n        (Assign (list (Name &result:5 Store)) (List nil Load) None)\n        (For\n          (Name &_:5 Store)\n          (Call (Name g_range Load) (list (Name &num_test:5 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &array:5 Store))\n              (ListComp\n                (Call (Name g_int Load) (list (Name &i:12 Load)) nil)\n                (list\n                  (comprehension\n                    (Name &i:12 Store)\n                    (Call (Attribute (Call (Name &parse_input:0 Load) nil nil) s_split Load) nil nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Name &result:5 Load) s_append Load)\n                (list (Call (Name &func:0 Load) (list (Name &array:5 Load)) nil))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEwXQ== None) s_join Load)\n                (list (Call (Name g_map Load) (list (Name g_str Load) (Name &result:5 Load)) nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:6 None None) (arg &file:6 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:6 Load) s__fd Store))\n              (Call (Attribute (Name &file:6 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:6 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:6 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:6 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:6 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:6 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:6 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:7 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:7 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:7 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:7 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:7 Store))\n                  (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:7 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:7 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:7 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:8 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:8 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:8 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:8 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:8 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:8 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:8 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:8 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:8 Store))\n                  (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:8 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:8 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:8 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:9 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:9 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:9 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:10 None None) (arg &file:10 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:10 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:13 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:13 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &parse_input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None) (alias g_maxsize None)) i0)\n    (Assign\n      (list (Name &R:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &RL:0 Store))\n      (Lambda\n        (arguments nil (list (arg &f:1 None None)) None nil nil None (list (Constant None None)))\n        (IfExp\n          (Name &f:1 Load)\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Name &f:1 Load)\n                  (Call (Attribute (Call (Name &R:0 Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n                )\n                nil\n              )\n            )\n            nil\n          )\n          (Call\n            (Name g_list Load)\n            (list (Call (Attribute (Call (Name &R:0 Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil))\n            nil\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &output:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n        (Call\n          (Attribute (Name g_stdout Load) s_write Load)\n          (list (BinOp (Call (Name g_str Load) (list (Name &x:2 Load)) nil) Add (Constant s-WzEwXQ== None)))\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &output_list:0 Store))\n      (Lambda\n        (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n        (Call\n          (Name &output:0 Load)\n          (list\n            (Call\n              (Attribute (Constant s-WzMyXQ== None) s_join Load)\n              (list (Call (Name g_map Load) (list (Name g_str Load) (Name &x:3 Load)) nil))\n              nil\n            )\n          )\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (Call (Name g_int Load) (list (Constant f1000000000.0 None)) nil) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &mx:0 Store))\n      (BinOp (Call (Name g_int Load) (list (Constant f200000.0 None)) nil) Add (Constant i5 None))\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (BinOp\n        (BinOp\n          (BinOp\n            (List (list (Constant i0 None)) Load)\n            Add\n            (BinOp (Constant i9 None) Mult (List (list (Constant i1 None)) Load))\n          )\n          Add\n          (List (list (Constant i2 None)) Load)\n        )\n        Add\n        (BinOp (Name &mx:0 Load) Mult (List (list (Constant i0 None)) Load))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i11 None) (Call (Name g_len Load) (list (Name &dp:0 Load)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (Name &M:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &tc:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &R:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call (Name &RL:0 Load) (list (Name g_int Load)) nil)\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_list Load) (list (Call (Name g_str Load) (list (Name &n:0 Load)) nil)) nil)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (Call (Name g_int Load) (list (Name &i:0 Load)) nil) Add (Name &m:0 Load))\n                    Load\n                  )\n                )\n                Mod\n                (Name &M:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None) (alias g_math None)))\n    (Import (list (alias g_heapq None)))\n    (ImportFrom s_collections (list (alias g_deque None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (FunctionDef\n      &ip:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_str Load)\n            (list (Call (Attribute (Call (Name &input:0 Load) nil nil) s_rstrip Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &mip:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &mfp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_float Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &msp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_str Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lmip:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lmsp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_str Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &gcd:0\n      (arguments nil (list (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Name &y:1 Load)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &x:1 Store) (Name &y:1 Store)) Store))\n              (Tuple (list (Name &y:1 Load) (BinOp (Name &x:1 Load) Mod (Name &y:1 Load))) Load)\n              None\n            )\n          )\n          nil\n        )\n        (Return (Name &x:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lcm:0\n      (arguments nil (list (arg &x:2 None None) (arg &y:2 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp (Name &x:2 Load) Mult (Name &y:2 Load))\n            FloorDiv\n            (Call (Name &gcd:0 Load) (list (Name &x:2 Load) (Name &y:2 Load)) nil)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &isPrime:0\n      (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &x:3 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant False None))) nil)\n        (For\n          (Name &i:3 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Constant i2 None)\n              (BinOp\n                (Call (Name g_int Load) (list (BinOp (Name &x:3 Load) Pow (Constant f0.5 None))) nil)\n                Add\n                (Constant i1 None)\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &x:3 Load) Mod (Name &i:3 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq (Return (Constant False None)))\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (Constant True None))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &find:0\n      (arguments nil (list (arg &x:4 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &x:4 Load) (list Eq) (list (Subscript (Name g_p Load) (Name &x:4 Load) Load)))\n          (/seq (Return (Name &x:4 Load)))\n          nil\n        )\n        (Assign\n          (list (Name &q:4 Store))\n          (Call (Name &find:0 Load) (list (Subscript (Name g_p Load) (Name &x:4 Load) Load)) nil)\n          None\n        )\n        (Assign (list (Subscript (Name g_p Load) (Name &x:4 Load) Store)) (Name &q:4 Load) None)\n        (Return (Name &q:4 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &union:0\n      (arguments nil (list (arg &x:5 None None) (arg &y:5 None None)) None nil nil None nil)\n      (/seq\n        (Global (list s_n))\n        (Assign (list (Name &x:5 Store)) (Call (Name &find:0 Load) (list (Name &x:5 Load)) nil) None)\n        (Assign (list (Name &y:5 Store)) (Call (Name &find:0 Load) (list (Name &y:5 Load)) nil) None)\n        (If\n          (Compare (Name &x:5 Load) (list NotEq) (list (Name &y:5 Load)))\n          (/seq (Assign (list (Subscript (Name g_p Load) (Name &y:5 Load) Store)) (Name &x:5 Load) None))\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getPow:0\n      (arguments nil (list (arg &a:6 None None) (arg &x:6 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ret:6 Store)) (Constant i1 None) None)\n        (While\n          (Name &x:6 Load)\n          (/seq\n            (If\n              (BinOp (Name &x:6 Load) BitAnd (Constant i1 None))\n              (/seq\n                (Assign\n                  (list (Name &ret:6 Store))\n                  (BinOp (BinOp (Name &ret:6 Load) Mult (Name &a:6 Load)) Mod (Name &MOD:0 Load))\n                  None\n                )\n              )\n              nil\n            )\n            (Assign\n              (list (Name &a:6 Store))\n              (BinOp (BinOp (Name &a:6 Load) Mult (Name &a:6 Load)) Mod (Name &MOD:0 Load))\n              None\n            )\n            (AugAssign (Name &x:6 Store) RShift (Constant i1 None))\n          )\n          nil\n        )\n        (Return (Name &ret:6 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getInv:0\n      (arguments nil (list (arg &x:7 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call (Name &getPow:0 Load) (list (Name &x:7 Load) (BinOp (Name &MOD:0 Load) Sub (Constant i2 None))) nil)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list (comprehension (Name &_:8 Store) (Call (Name g_range Load) (list (Constant i202020 None)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i9 None)) nil)\n      (/seq (Assign (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store)) (Constant i2 None) None))\n      nil\n      None\n    )\n    (Assign (list (Subscript (Name &dp:0 Load) (Constant i9 None) Store)) (Constant i3 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Constant i202020 None)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (Name &MOD:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Call (Name &ip:0 Load) nil nil) None)\n    (While\n      (Name &t:0 Load)\n      (/seq\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n        (Assign (list (Tuple (list (Name &n:0 Store) (Name &k:0 Store)) Store)) (Call (Name &mip:0 Load) nil nil) None)\n        (While\n          (Name &n:0 Load)\n          (/seq\n            (If\n              (Compare\n                (BinOp (Name &k:0 Load) Add (BinOp (Name &n:0 Load) Mod (Constant i10 None)))\n                (list Lt)\n                (list (Constant i10 None))\n              )\n              (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n              (/seq\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp\n                      (BinOp (Name &k:0 Load) Add (BinOp (Name &n:0 Load) Mod (Constant i10 None)))\n                      Sub\n                      (Constant i10 None)\n                    )\n                    Load\n                  )\n                )\n              )\n            )\n            (AugAssign (Name &n:0 Store) FloorDiv (Constant i10 None))\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (BinOp (Name &ans:0 Load) Mod (Name &MOD:0 Load))) nil))\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (Assign (list (Name &dp:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i200011 None)) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (Constant i10 None)))\n          (/seq (Expr (Call (Attribute (Name &dp:0 Load) s_append Load) (list (Constant i1 None)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &dp:0 Load) s_append Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n                      Add\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n                    )\n                    Mod\n                    (Name &M:0 Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Name &m:0 Load)) nil) None)\n        (Assign\n          (list (Name &M:0 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Name &n:0 Load)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &i:0 Load)) nil))\n                    Load\n                  )\n                )\n                Mod\n                (Name &M:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name g_stdout Load) s_write Load)\n            (list (BinOp (Call (Name g_str Load) (list (Name &ans:0 Load)) nil) Add (Constant s-WzEwXQ== None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &MOD:0 Store)) (Constant i1000000007 None) None)\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (Constant i1 None)\n        (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (Constant i200010 None)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Constant i200010 None)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n            )\n            Mod\n            (Name &MOD:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (While\n          (Name &n:0 Load)\n          (/seq\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (Subscript\n                (Name &dp:0 Load)\n                (BinOp (Name &m:0 Load) Add (BinOp (Name &n:0 Load) Mod (Constant i10 None)))\n                Load\n              )\n            )\n            (AugAssign (Name &n:0 Store) FloorDiv (Constant i10 None))\n            (AugAssign (Name &ans:0 Store) Mod (Name &MOD:0 Load))\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &dp:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i200011 None)) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (Constant i10 None)))\n          (/seq (Expr (Call (Attribute (Name &dp:0 Load) s_append Load) (list (Constant i1 None)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &dp:0 Load) s_append Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n                      Add\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n                    )\n                    Mod\n                    (Name &M:0 Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Name &m:0 Load)) nil) None)\n        (Assign\n          (list (Name &M:0 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Name &n:0 Load)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &i:0 Load)) nil))\n                    Load\n                  )\n                )\n                Mod\n                (Name &M:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (FunctionDef\n      &get_ints:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute\n                  (Call\n                    (Attribute\n                      (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                      s_strip\n                      Load\n                    )\n                    nil\n                    nil\n                  )\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &LIMIT:0 Store)) (Constant i20011 None) None)\n    (Assign (list (Name &dp:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i200011 None)) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (Constant i10 None)))\n          (/seq (Expr (Call (Attribute (Name &dp:0 Load) s_append Load) (list (Constant i1 None)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &dp:0 Load) s_append Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n                      Add\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n                    )\n                    Mod\n                    (Name &MOD:0 Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &T:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &T:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &N:0 Store) (Name &M:0 Store)) Store))\n          (Call (Name &get_ints:0 Load) nil nil)\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (While\n          (Name &N:0 Load)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (BinOp (Name &N:0 Load) Mod (Constant i10 None)) Add (Name &M:0 Load))\n                    Load\n                  )\n                )\n                Mod\n                (Name &MOD:0 Load)\n              )\n              None\n            )\n            (AugAssign (Name &N:0 Store) FloorDiv (Constant i10 None))\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &L:0 Store)) (BinOp (Constant i8 None) Pow (Constant i6 None)) None)\n    (Assign (list (Name &d:0 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &L:0 Load)) None)\n    (Assign\n      (list (Subscript (Name &d:0 Load) (Slice None (Constant i10 None) None) Store))\n      (BinOp (List (list (Constant i1 None)) Load) Mult (Constant i10 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Name &L:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &d:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &d:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &d:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (Name &M:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &s:0 Store)\n      (Subscript\n        (List (list (Starred (Call (Name g_open Load) (list (Constant i0 None)) nil) Load)) Load)\n        (Slice (Constant i1 None) None None)\n        Load\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call (Attribute (Name &s:0 Load) s_split Load) nil nil)\n          None\n        )\n        (Assign (list (Name &o:0 Store)) (Call (Name g_int Load) (list (Name &m:0 Load)) nil) None)\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (BinOp\n                (Call\n                  (Name g_sum Load)\n                  (list\n                    (GeneratorExp\n                      (Subscript\n                        (Name &d:0 Load)\n                        (BinOp (Name &o:0 Load) Add (Call (Name g_int Load) (list (Name &c:1 Load)) nil))\n                        Load\n                      )\n                      (list (comprehension (Name &c:1 Store) (Name &n:0 Load) nil i0))\n                    )\n                  )\n                  nil\n                )\n                Mod\n                (Name &M:0 Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &dp:0 Store))\n      (BinOp\n        (BinOp\n          (BinOp (List (list (Constant i2 None)) Load) Mult (Constant i9 None))\n          Add\n          (List (list (Constant i3 None)) Load)\n        )\n        Add\n        (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i199991 None))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Constant i200001 None)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (While\n          (Name &n:0 Load)\n          (/seq\n            (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) Mod (Constant i10 None)) None)\n            (If\n              (Compare (BinOp (Name &m:0 Load) Add (Name &x:0 Load)) (list Lt) (list (Constant i10 None)))\n              (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n              (/seq\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (BinOp (Name &m:0 Load) Add (Name &x:0 Load)) Sub (Constant i10 None))\n                    Load\n                  )\n                )\n              )\n            )\n            (AugAssign (Name &n:0 Store) FloorDiv (Constant i10 None))\n          )\n          nil\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (BinOp\n                (Name &ans:0 Load)\n                Mod\n                (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import\n      (list\n        (alias g_sys None)\n        (alias g_functools None)\n        (alias g_collections None)\n        (alias g_bisect None)\n        (alias g_math None)\n        (alias g_heapq None)\n      )\n    )\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (Constant i300000 None)) nil))\n    (Assign (list (Name &N:0 Store)) (Constant i200001 None) None)\n    (Assign (list (Name &dp:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i9 None)) nil)\n      (/seq (Assign (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store)) (Constant i2 None) None))\n      nil\n      None\n    )\n    (Assign (list (Subscript (Name &dp:0 Load) (Constant i9 None) Store)) (Constant i3 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Name &N:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n            Add\n            (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store) Mod (Name &mod:0 Load))\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &s:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Attribute (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil) s_split Load)\n            nil\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Name &m:0 Load)) nil) None)\n        (Assign\n          (list (Name &s:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Name g_list Load) (list (Name &s:0 Load)) nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Name &s:0 Load)\n          (/seq\n            (If\n              (Compare\n                (BinOp (BinOp (Name &m:0 Load) Sub (Constant i10 None)) Add (Name &i:0 Load))\n                (list GtE)\n                (list (Constant i0 None))\n              )\n              (/seq\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (BinOp (Name &m:0 Load) Sub (Constant i10 None)) Add (Name &i:0 Load))\n                    Load\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n            )\n          )\n          nil\n          None\n        )\n        (AugAssign (Name &ans:0 Store) Mod (Name &mod:0 Load))\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (FunctionDef\n      &get_ints:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute\n                  (Call\n                    (Attribute\n                      (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                      s_strip\n                      Load\n                    )\n                    nil\n                    nil\n                  )\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &LIMIT:0 Store)) (Constant i200011 None) None)\n    (Assign (list (Name &dp:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &LIMIT:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None)) nil)\n      (/seq (Assign (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store)) (Constant i1 None) None))\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Name &LIMIT:0 Load) (Constant i1 None)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (Name &MOD:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &N:1 None None) (arg &M:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ans:1 Store)) (Constant i0 None) None)\n        (While\n          (Name &N:1 Load)\n          (/seq\n            (Assign\n              (list (Name &ans:1 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:1 Load)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (BinOp (Name &N:1 Load) Mod (Constant i10 None)) Add (Name &M:1 Load))\n                    Load\n                  )\n                )\n                Mod\n                (Name &MOD:0 Load)\n              )\n              None\n            )\n            (AugAssign (Name &N:1 Store) FloorDiv (Constant i10 None))\n          )\n          nil\n        )\n        (Return (BinOp (Name &ans:1 Load) Mod (Name &MOD:0 Load)))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &T:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &T:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &N:0 Store) (Name &M:0 Store)) Store))\n          (Call (Name &get_ints:0 Load) nil nil)\n          None\n        )\n        (Expr\n          (Call (Name g_print Load) (list (Call (Name &solve:0 Load) (list (Name &N:0 Load) (Name &M:0 Load)) nil)) nil)\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_math None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (ImportFrom s_fractions (list (alias g_Fraction None)) i0)\n    (Import (list (alias g_collections None)))\n    (ImportFrom s_itertools (list (alias g_permutations None)) i0)\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (ImportFrom s_collections (list (alias g_deque None)) i0)\n    (Import (list (alias g_threading None)))\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:9 None None) (arg &file:9 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:9 Load) s__fd Store))\n              (Call (Attribute (Name &file:9 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:9 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:9 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:9 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:9 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:10 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:10 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:10 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:10 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:10 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:10 Store))\n                  (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:10 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:10 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:10 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:11 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:11 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:11 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:11 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:11 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:11 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:11 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:11 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:11 Store))\n                  (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:11 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:11 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:11 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:12 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:12 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:12 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:13 None None) (arg &file:13 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:13 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:13 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:13 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:13 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:13 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:35 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:35 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:13 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:13 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (ClassDef\n      &SegmentTree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:3\n          (arguments\n            nil\n            (list\n              (arg &self:14 None None)\n              (arg &data:14 None None)\n              (arg &default:14 None None)\n              (arg &func:14 None None)\n            )\n            None\n            nil\n            nil\n            None\n            (list\n              (Constant i0 None)\n              (Lambda\n                (arguments nil (list (arg &a:36 None None) (arg &b:36 None None)) None nil nil None nil)\n                (Call (Name g_max Load) (list (Name &a:36 Load) (Name &b:36 Load)) nil)\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd\n                None\n              )\n            )\n            (Assign (list (Attribute (Name &self:14 Load) s__default Store)) (Name &default:14 Load) None)\n            (Assign (list (Attribute (Name &self:14 Load) s__func Store)) (Name &func:14 Load) None)\n            (Assign\n              (list (Attribute (Name &self:14 Load) s__len Store))\n              (Call (Name g_len Load) (list (Name &data:14 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:14 Load) s__size Store) (Name &_size:14 Store))\n              (BinOp\n                (Constant i1 None)\n                LShift\n                (Call\n                  (Attribute\n                    (BinOp (Attribute (Name &self:14 Load) s__len Load) Sub (Constant i1 None))\n                    s_bit_length\n                    Load\n                  )\n                  nil\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:14 Load) s_data Store))\n              (BinOp\n                (List (list (Name &default:14 Load)) Load)\n                Mult\n                (BinOp (Constant i2 None) Mult (Name &_size:14 Load))\n              )\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:14 Load) s_data Load)\n                  (Slice\n                    (Name &_size:14 Load)\n                    (BinOp (Name &_size:14 Load) Add (Attribute (Name &self:14 Load) s__len Load))\n                    None\n                  )\n                  Store\n                )\n              )\n              (Name &data:14 Load)\n              None\n            )\n            (For\n              (Name &i:14 Store)\n              (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:14 Load)) nil)) nil)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:14 Load) s_data Load) (Name &i:14 Load) Store))\n                  (Call\n                    (Name &func:14 Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:14 Load) s_data Load)\n                        (BinOp (Name &i:14 Load) Add (Name &i:14 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:14 Load) s_data Load)\n                        (BinOp (BinOp (Name &i:14 Load) Add (Name &i:14 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__delitem__:3\n          (arguments nil (list (arg &self:15 None None) (arg &idx:15 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &self:15 Load) (Name &idx:15 Load) Store))\n              (Attribute (Name &self:15 Load) s__default Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__getitem__:3\n          (arguments nil (list (arg &self:16 None None) (arg &idx:16 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:16 Load) s_data Load)\n                (BinOp (Name &idx:16 Load) Add (Attribute (Name &self:16 Load) s__size Load))\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__setitem__:3\n          (arguments\n            nil\n            (list (arg &self:17 None None) (arg &idx:17 None None) (arg &value:17 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &idx:17 Store) Add (Attribute (Name &self:17 Load) s__size Load))\n            (Assign\n              (list (Subscript (Attribute (Name &self:17 Load) s_data Load) (Name &idx:17 Load) Store))\n              (Name &value:17 Load)\n              None\n            )\n            (AugAssign (Name &idx:17 Store) RShift (Constant i1 None))\n            (While\n              (Name &idx:17 Load)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:17 Load) s_data Load) (Name &idx:17 Load) Store))\n                  (Call\n                    (Attribute (Name &self:17 Load) s__func Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:17 Load) s_data Load)\n                        (BinOp (Constant i2 None) Mult (Name &idx:17 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:17 Load) s_data Load)\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &idx:17 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (AugAssign (Name &idx:17 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__len__:3\n          (arguments nil (list (arg &self:18 None None)) None nil nil None nil)\n          (/seq (Return (Attribute (Name &self:18 Load) s__len Load)))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:3\n          (arguments\n            nil\n            (list (arg &self:19 None None) (arg &start:19 None None) (arg &stop:19 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &start:19 Load) (list Eq) (list (Name &stop:19 Load)))\n              (/seq\n                (Return (Call (Attribute (Name &self:19 Load) s___getitem__ Load) (list (Name &start:19 Load)) nil))\n              )\n              nil\n            )\n            (AugAssign (Name &stop:19 Store) Add (Constant i1 None))\n            (AugAssign (Name &start:19 Store) Add (Attribute (Name &self:19 Load) s__size Load))\n            (AugAssign (Name &stop:19 Store) Add (Attribute (Name &self:19 Load) s__size Load))\n            (Assign (list (Name &res:19 Store)) (Attribute (Name &self:19 Load) s__default Load) None)\n            (While\n              (Compare (Name &start:19 Load) (list Lt) (list (Name &stop:19 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &start:19 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (Assign\n                      (list (Name &res:19 Store))\n                      (Call\n                        (Attribute (Name &self:19 Load) s__func Load)\n                        (list\n                          (Name &res:19 Load)\n                          (Subscript (Attribute (Name &self:19 Load) s_data Load) (Name &start:19 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign (Name &start:19 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (If\n                  (BinOp (Name &stop:19 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign (Name &stop:19 Store) Sub (Constant i1 None))\n                    (Assign\n                      (list (Name &res:19 Store))\n                      (Call\n                        (Attribute (Name &self:19 Load) s__func Load)\n                        (list\n                          (Name &res:19 Load)\n                          (Subscript (Attribute (Name &self:19 Load) s_data Load) (Name &stop:19 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n                (AugAssign (Name &start:19 Store) RShift (Constant i1 None))\n                (AugAssign (Name &stop:19 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n            (Return (Name &res:19 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__repr__:3\n          (arguments nil (list (arg &self:20 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Call\n                (Attribute\n                  (Constant\n                    s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd\n                    None\n                  )\n                  s_format\n                  Load\n                )\n                (list (Attribute (Name &self:20 Load) s_data Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &SegmentTree1:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:4\n          (arguments\n            nil\n            (list\n              (arg &self:21 None None)\n              (arg &data:21 None None)\n              (arg &default:21 None None)\n              (arg &func:21 None None)\n            )\n            None\n            nil\n            nil\n            None\n            (list\n              (BinOp (Constant i10 None) Pow (Constant i6 None))\n              (Lambda\n                (arguments nil (list (arg &a:37 None None) (arg &b:37 None None)) None nil nil None nil)\n                (Call (Name g_min Load) (list (Name &a:37 Load) (Name &b:37 Load)) nil)\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd\n                None\n              )\n            )\n            (Assign (list (Attribute (Name &self:21 Load) s__default Store)) (Name &default:21 Load) None)\n            (Assign (list (Attribute (Name &self:21 Load) s__func Store)) (Name &func:21 Load) None)\n            (Assign\n              (list (Attribute (Name &self:21 Load) s__len Store))\n              (Call (Name g_len Load) (list (Name &data:21 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:21 Load) s__size Store) (Name &_size:21 Store))\n              (BinOp\n                (Constant i1 None)\n                LShift\n                (Call\n                  (Attribute\n                    (BinOp (Attribute (Name &self:21 Load) s__len Load) Sub (Constant i1 None))\n                    s_bit_length\n                    Load\n                  )\n                  nil\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:21 Load) s_data Store))\n              (BinOp\n                (List (list (Name &default:21 Load)) Load)\n                Mult\n                (BinOp (Constant i2 None) Mult (Name &_size:21 Load))\n              )\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:21 Load) s_data Load)\n                  (Slice\n                    (Name &_size:21 Load)\n                    (BinOp (Name &_size:21 Load) Add (Attribute (Name &self:21 Load) s__len Load))\n                    None\n                  )\n                  Store\n                )\n              )\n              (Name &data:21 Load)\n              None\n            )\n            (For\n              (Name &i:21 Store)\n              (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:21 Load)) nil)) nil)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:21 Load) s_data Load) (Name &i:21 Load) Store))\n                  (Call\n                    (Name &func:21 Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:21 Load) s_data Load)\n                        (BinOp (Name &i:21 Load) Add (Name &i:21 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:21 Load) s_data Load)\n                        (BinOp (BinOp (Name &i:21 Load) Add (Name &i:21 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__delitem__:4\n          (arguments nil (list (arg &self:22 None None) (arg &idx:22 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &self:22 Load) (Name &idx:22 Load) Store))\n              (Attribute (Name &self:22 Load) s__default Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__getitem__:4\n          (arguments nil (list (arg &self:23 None None) (arg &idx:23 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:23 Load) s_data Load)\n                (BinOp (Name &idx:23 Load) Add (Attribute (Name &self:23 Load) s__size Load))\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__setitem__:4\n          (arguments\n            nil\n            (list (arg &self:24 None None) (arg &idx:24 None None) (arg &value:24 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &idx:24 Store) Add (Attribute (Name &self:24 Load) s__size Load))\n            (Assign\n              (list (Subscript (Attribute (Name &self:24 Load) s_data Load) (Name &idx:24 Load) Store))\n              (Name &value:24 Load)\n              None\n            )\n            (AugAssign (Name &idx:24 Store) RShift (Constant i1 None))\n            (While\n              (Name &idx:24 Load)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:24 Load) s_data Load) (Name &idx:24 Load) Store))\n                  (Call\n                    (Attribute (Name &self:24 Load) s__func Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:24 Load) s_data Load)\n                        (BinOp (Constant i2 None) Mult (Name &idx:24 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:24 Load) s_data Load)\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &idx:24 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (AugAssign (Name &idx:24 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__len__:4\n          (arguments nil (list (arg &self:25 None None)) None nil nil None nil)\n          (/seq (Return (Attribute (Name &self:25 Load) s__len Load)))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:4\n          (arguments\n            nil\n            (list (arg &self:26 None None) (arg &start:26 None None) (arg &stop:26 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &start:26 Load) (list Eq) (list (Name &stop:26 Load)))\n              (/seq\n                (Return (Call (Attribute (Name &self:26 Load) s___getitem__ Load) (list (Name &start:26 Load)) nil))\n              )\n              nil\n            )\n            (AugAssign (Name &stop:26 Store) Add (Constant i1 None))\n            (AugAssign (Name &start:26 Store) Add (Attribute (Name &self:26 Load) s__size Load))\n            (AugAssign (Name &stop:26 Store) Add (Attribute (Name &self:26 Load) s__size Load))\n            (Assign (list (Name &res:26 Store)) (Attribute (Name &self:26 Load) s__default Load) None)\n            (While\n              (Compare (Name &start:26 Load) (list Lt) (list (Name &stop:26 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &start:26 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (Assign\n                      (list (Name &res:26 Store))\n                      (Call\n                        (Attribute (Name &self:26 Load) s__func Load)\n                        (list\n                          (Name &res:26 Load)\n                          (Subscript (Attribute (Name &self:26 Load) s_data Load) (Name &start:26 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign (Name &start:26 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (If\n                  (BinOp (Name &stop:26 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign (Name &stop:26 Store) Sub (Constant i1 None))\n                    (Assign\n                      (list (Name &res:26 Store))\n                      (Call\n                        (Attribute (Name &self:26 Load) s__func Load)\n                        (list\n                          (Name &res:26 Load)\n                          (Subscript (Attribute (Name &self:26 Load) s_data Load) (Name &stop:26 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n                (AugAssign (Name &start:26 Store) RShift (Constant i1 None))\n                (AugAssign (Name &stop:26 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n            (Return (Name &res:26 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__repr__:4\n          (arguments nil (list (arg &self:27 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Call\n                (Attribute\n                  (Constant\n                    s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd\n                    None\n                  )\n                  s_format\n                  Load\n                )\n                (list (Attribute (Name &self:27 Load) s_data Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (ClassDef\n      &Factorial:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:5\n          (arguments nil (list (arg &self:28 None None) (arg &MOD:28 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:28 Load) s_MOD Store)) (Name &MOD:28 Load) None)\n            (Assign\n              (list (Attribute (Name &self:28 Load) s_factorials Store))\n              (List (list (Constant i1 None) (Constant i1 None)) Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:28 Load) s_invModulos Store))\n              (List (list (Constant i0 None) (Constant i1 None)) Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:28 Load) s_invFactorial_ Store))\n              (List (list (Constant i1 None) (Constant i1 None)) Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &calc:5\n          (arguments nil (list (arg &self:29 None None) (arg &n:29 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &n:29 Load) (list LtE) (list (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant\n                        s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTAsIDMzXQ==\n                        None\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant\n                          s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ==\n                          None\n                        )\n                        Add\n                        (Call (Name g_str Load) (list (Name &n:29 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              nil\n            )\n            (If\n              (Compare\n                (Name &n:29 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:29 Load) s_factorials Load)) nil))\n              )\n              (/seq (Return (Subscript (Attribute (Name &self:29 Load) s_factorials Load) (Name &n:29 Load) Load)))\n              nil\n            )\n            (Assign\n              (list (Name &nextArr:29 Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp\n                  (BinOp (Name &n:29 Load) Add (Constant i1 None))\n                  Sub\n                  (Call (Name g_len Load) (list (Attribute (Name &self:29 Load) s_factorials Load)) nil)\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &initialI:29 Store))\n              (Call (Name g_len Load) (list (Attribute (Name &self:29 Load) s_factorials Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &prev:29 Store))\n              (Subscript (Attribute (Name &self:29 Load) s_factorials Load) (UnaryOp USub (Constant i1 None)) Load)\n              None\n            )\n            (Assign (list (Name &m:29 Store)) (Attribute (Name &self:29 Load) s_MOD Load) None)\n            (For\n              (Name &i:29 Store)\n              (Call\n                (Name g_range Load)\n                (list (Name &initialI:29 Load) (BinOp (Name &n:29 Load) Add (Constant i1 None)))\n                nil\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Name &prev:29 Store)\n                    (Subscript (Name &nextArr:29 Load) (BinOp (Name &i:29 Load) Sub (Name &initialI:29 Load)) Store)\n                  )\n                  (BinOp (BinOp (Name &prev:29 Load) Mult (Name &i:29 Load)) Mod (Name &m:29 Load))\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (AugAssign (Attribute (Name &self:29 Load) s_factorials Store) Add (Name &nextArr:29 Load))\n            (Return (Subscript (Attribute (Name &self:29 Load) s_factorials Load) (Name &n:29 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &inv:5\n          (arguments nil (list (arg &self:30 None None) (arg &n:30 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &n:30 Load) (list LtE) (list (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant\n                        s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTAsIDk0LCA0MCwgNDUsIDQ5LCA0MV0=\n                        None\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant\n                          s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ==\n                          None\n                        )\n                        Add\n                        (Call (Name g_str Load) (list (Name &n:30 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              nil\n            )\n            (Assign (list (Name &p:30 Store)) (Attribute (Name &self:30 Load) s_MOD Load) None)\n            (Assign (list (Name &pi:30 Store)) (BinOp (Name &n:30 Load) Mod (Name &p:30 Load)) None)\n            (If\n              (Compare\n                (Name &pi:30 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:30 Load) s_invModulos Load)) nil))\n              )\n              (/seq (Return (Subscript (Attribute (Name &self:30 Load) s_invModulos Load) (Name &pi:30 Load) Load)))\n              nil\n            )\n            (Assign\n              (list (Name &nextArr:30 Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp\n                  (BinOp (Name &n:30 Load) Add (Constant i1 None))\n                  Sub\n                  (Call (Name g_len Load) (list (Attribute (Name &self:30 Load) s_invModulos Load)) nil)\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &initialI:30 Store))\n              (Call (Name g_len Load) (list (Attribute (Name &self:30 Load) s_invModulos Load)) nil)\n              None\n            )\n            (For\n              (Name &i:30 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (Name &initialI:30 Load)\n                  (Call (Name g_min Load) (list (Name &p:30 Load) (BinOp (Name &n:30 Load) Add (Constant i1 None))) nil)\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Name &next:30 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp\n                        USub\n                        (Subscript\n                          (Attribute (Name &self:30 Load) s_invModulos Load)\n                          (BinOp (Name &p:30 Load) Mod (Name &i:30 Load))\n                          Load\n                        )\n                      )\n                      Mult\n                      (BinOp (Name &p:30 Load) FloorDiv (Name &i:30 Load))\n                    )\n                    Mod\n                    (Name &p:30 Load)\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute (Attribute (Name &self:30 Load) s_invModulos Load) s_append Load)\n                    (list (Name &next:30 Load))\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n            (Return (Subscript (Attribute (Name &self:30 Load) s_invModulos Load) (Name &pi:30 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &invFactorial:5\n          (arguments nil (list (arg &self:31 None None) (arg &n:31 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &n:31 Load) (list LtE) (list (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant\n                        s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCA0MCwgMTEwLCA5NCwgNDAsIDQ1LCA0OSwgNDEsIDQxLCAzM10=\n                        None\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant\n                          s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ==\n                          None\n                        )\n                        Add\n                        (Call (Name g_str Load) (list (Name &n:31 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              nil\n            )\n            (If\n              (Compare\n                (Name &n:31 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:31 Load) s_invFactorial_ Load)) nil))\n              )\n              (/seq (Return (Subscript (Attribute (Name &self:31 Load) s_invFactorial_ Load) (Name &n:31 Load) Load)))\n              nil\n            )\n            (Expr (Call (Attribute (Name &self:31 Load) s_inv Load) (list (Name &n:31 Load)) nil))\n            (Assign\n              (list (Name &nextArr:31 Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp\n                  (BinOp (Name &n:31 Load) Add (Constant i1 None))\n                  Sub\n                  (Call (Name g_len Load) (list (Attribute (Name &self:31 Load) s_invFactorial_ Load)) nil)\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &initialI:31 Store))\n              (Call (Name g_len Load) (list (Attribute (Name &self:31 Load) s_invFactorial_ Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &prev:31 Store))\n              (Subscript (Attribute (Name &self:31 Load) s_invFactorial_ Load) (UnaryOp USub (Constant i1 None)) Load)\n              None\n            )\n            (Assign (list (Name &p:31 Store)) (Attribute (Name &self:31 Load) s_MOD Load) None)\n            (For\n              (Name &i:31 Store)\n              (Call\n                (Name g_range Load)\n                (list (Name &initialI:31 Load) (BinOp (Name &n:31 Load) Add (Constant i1 None)))\n                nil\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Name &prev:31 Store)\n                    (Subscript (Name &nextArr:31 Load) (BinOp (Name &i:31 Load) Sub (Name &initialI:31 Load)) Store)\n                  )\n                  (BinOp\n                    (BinOp\n                      (Name &prev:31 Load)\n                      Mult\n                      (Subscript\n                        (Attribute (Name &self:31 Load) s_invModulos Load)\n                        (BinOp (Name &i:31 Load) Mod (Name &p:31 Load))\n                        Load\n                      )\n                    )\n                    Mod\n                    (Name &p:31 Load)\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (AugAssign (Attribute (Name &self:31 Load) s_invFactorial_ Store) Add (Name &nextArr:31 Load))\n            (Return (Subscript (Attribute (Name &self:31 Load) s_invFactorial_ Load) (Name &n:31 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &Combination:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:6\n          (arguments nil (list (arg &self:32 None None) (arg &MOD:32 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:32 Load) s_MOD Store)) (Name &MOD:32 Load) None)\n            (Assign\n              (list (Attribute (Name &self:32 Load) s_factorial Store))\n              (Call (Name &Factorial:0 Load) (list (Name &MOD:32 Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &ncr:6\n          (arguments\n            nil\n            (list (arg &self:33 None None) (arg &n:33 None None) (arg &k:33 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare (Name &k:33 Load) (list Lt) (list (Constant i0 None)))\n                  (Compare (Name &n:33 Load) (list Lt) (list (Name &k:33 Load)))\n                )\n              )\n              (/seq (Return (Constant i0 None)))\n              nil\n            )\n            (Assign\n              (list (Name &k:33 Store))\n              (Call (Name g_min Load) (list (Name &k:33 Load) (BinOp (Name &n:33 Load) Sub (Name &k:33 Load))) nil)\n              None\n            )\n            (Assign (list (Name &f:33 Store)) (Attribute (Name &self:33 Load) s_factorial Load) None)\n            (Return\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (Call (Attribute (Name &f:33 Load) s_calc Load) (list (Name &n:33 Load)) nil)\n                    Mult\n                    (Call\n                      (Attribute (Name &f:33 Load) s_invFactorial Load)\n                      (list\n                        (Call\n                          (Name g_max Load)\n                          (list (BinOp (Name &n:33 Load) Sub (Name &k:33 Load)) (Name &k:33 Load))\n                          nil\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  Mult\n                  (Call\n                    (Attribute (Name &f:33 Load) s_invFactorial Load)\n                    (list\n                      (Call\n                        (Name g_min Load)\n                        (list (Name &k:33 Load) (BinOp (Name &n:33 Load) Sub (Name &k:33 Load)))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                Mod\n                (Attribute (Name &self:33 Load) s_MOD Load)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &omod:0 Store)) (Constant i998244353 None) None)\n    (Assign\n      (list (Name &prime:0 Store))\n      (ListComp\n        (Constant True None)\n        (list (comprehension (Name &i:34 Store) (Call (Name g_range Load) (list (Constant i10 None)) nil) nil i0))\n      )\n      None\n    )\n    (Assign (list (Name &pp:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i10 None)) None)\n    (FunctionDef\n      &SieveOfEratosthenes:0\n      (arguments nil (list (arg &n:7 None None)) None nil nil None (list (Constant i10 None)))\n      (/seq\n        (Assign (list (Name &p:7 Store)) (Constant i2 None) None)\n        (Assign (list (Name &c:7 Store)) (Constant i0 None) None)\n        (While\n          (Compare (BinOp (Name &p:7 Load) Mult (Name &p:7 Load)) (list LtE) (list (Name &n:7 Load)))\n          (/seq\n            (If\n              (Compare (Subscript (Name &prime:0 Load) (Name &p:7 Load) Load) (list Eq) (list (Constant True None)))\n              (/seq\n                (AugAssign (Name &c:7 Store) Add (Constant i1 None))\n                (For\n                  (Name &i:7 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list (Name &p:7 Load) (BinOp (Name &n:7 Load) Add (Constant i1 None)) (Name &p:7 Load))\n                    nil\n                  )\n                  (/seq\n                    (AugAssign (Subscript (Name &pp:0 Load) (Name &i:7 Load) Store) Add (Constant i1 None))\n                    (Assign (list (Subscript (Name &prime:0 Load) (Name &i:7 Load) Store)) (Constant False None) None)\n                  )\n                  nil\n                  None\n                )\n              )\n              nil\n            )\n            (AugAssign (Name &p:7 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &binarySearch:0\n      (arguments nil (list (arg &arr:8 None None) (arg &n:8 None None) (arg &key:8 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &left:8 Store)) (Constant i0 None) None)\n        (Assign (list (Name &right:8 Store)) (BinOp (Name &n:8 Load) Sub (Constant i1 None)) None)\n        (Assign (list (Name &mid:8 Store)) (Constant i0 None) None)\n        (Assign (list (Name &res:8 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &left:8 Load) (list LtE) (list (Name &right:8 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:8 Store))\n              (BinOp (BinOp (Name &right:8 Load) Add (Name &left:8 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (If\n              (Compare\n                (Subscript (Subscript (Name &arr:8 Load) (Name &mid:8 Load) Load) (Constant i0 None) Load)\n                (list Gt)\n                (list (Name &key:8 Load))\n              )\n              (/seq (Assign (list (Name &right:8 Store)) (BinOp (Name &mid:8 Load) Sub (Constant i1 None)) None))\n              (/seq\n                (Assign (list (Name &res:8 Store)) (Name &mid:8 Load) None)\n                (Assign (list (Name &left:8 Store)) (BinOp (Name &mid:8 Load) Add (Constant i1 None)) None)\n              )\n            )\n          )\n          nil\n        )\n        (Return (Name &res:8 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &dp:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i200011 None)) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (Constant i10 None)))\n          (/seq (Expr (Call (Attribute (Name &dp:0 Load) s_append Load) (list (Constant i1 None)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &dp:0 Load) s_append Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n                      Add\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n                    )\n                    Mod\n                    (Name &M:0 Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &M:0 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_str Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &i:0 Load)) nil))\n                    Load\n                  )\n                )\n                Mod\n                (Name &M:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &cnt:0 Store))\n      (BinOp\n        (List (list (Constant i1 None)) Load)\n        Mult\n        (BinOp\n          (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n          Add\n          (Constant i15 None)\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &curr:0 Store))\n      (List\n        (list\n          (Constant i1 None)\n          (Constant i0 None)\n          (Constant i0 None)\n          (Constant i0 None)\n          (Constant i0 None)\n          (Constant i0 None)\n          (Constant i0 None)\n          (Constant i0 None)\n          (Constant i0 None)\n          (Constant i0 None)\n        )\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &curr_len:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp\n            (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n            Add\n            (Constant i15 None)\n          )\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Subscript (Name &cnt:0 Load) (Name &i:0 Load) Store)) (Name &curr_len:0 Load) None)\n        (Assign\n          (list (Name &curr_len:0 Store))\n          (BinOp\n            (BinOp (Name &curr_len:0 Load) Add (Subscript (Name &curr:0 Load) (UnaryOp USub (Constant i1 None)) Load))\n            Mod\n            (Name &mod:0 Load)\n          )\n          None\n        )\n        (Assign\n          (list (Subscript (Name &curr:0 Load) (Constant i0 None) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &curr:0 Load) (Constant i0 None) Load)\n              Add\n              (Subscript (Name &curr:0 Load) (UnaryOp USub (Constant i1 None)) Load)\n            )\n            Mod\n            (Name &mod:0 Load)\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &curr:0 Load) s_insert Load)\n            (list (Constant i0 None) (Call (Attribute (Name &curr:0 Load) s_pop Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_str Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript\n                    (Name &cnt:0 Load)\n                    (BinOp (Call (Name g_int Load) (list (Name &i:0 Load)) nil) Add (Name &m:0 Load))\n                    Load\n                  )\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &mod:3 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          None\n        )\n        (Assign (list (Name &mm:3 Store)) (Constant i200000 None) None)\n        (Assign\n          (list (Name &dp:3 Store))\n          (ListComp\n            (Constant i0 None)\n            (list\n              (comprehension\n                (Name &_:9 Store)\n                (Call (Name g_range Load) (list (BinOp (Name &mm:3 Load) Add (Constant i1 None))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Subscript (Name &dp:3 Load) (Constant i0 None) Store)) (Constant i2 None) None)\n        (Assign (list (Subscript (Name &dp:3 Load) (Constant i1 None) Store)) (Constant i2 None) None)\n        (For\n          (Name &i:3 Store)\n          (Call (Name g_range Load) (list (Constant i2 None) (Constant i9 None)) nil)\n          (/seq (Assign (list (Subscript (Name &dp:3 Load) (Name &i:3 Load) Store)) (Constant i2 None) None))\n          nil\n          None\n        )\n        (Assign (list (Subscript (Name &dp:3 Load) (Constant i9 None) Store)) (Constant i3 None) None)\n        (For\n          (Name &i:3 Store)\n          (Call (Name g_range Load) (list (Constant i10 None) (BinOp (Name &mm:3 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &dp:3 Load) (Name &i:3 Load) Store))\n              (BinOp\n                (BinOp\n                  (Subscript (Name &dp:3 Load) (BinOp (Name &i:3 Load) Sub (Constant i9 None)) Load)\n                  Add\n                  (Subscript (Name &dp:3 Load) (BinOp (Name &i:3 Load) Sub (Constant i10 None)) Load)\n                )\n                Mod\n                (Name &mod:3 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &_:3 Store)\n          (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &n:3 Store) (Name &m:3 Store)) Store))\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &ans:3 Store)) (Constant i0 None) None)\n            (While\n              (Name &n:3 Load)\n              (/seq\n                (Assign (list (Name &x:3 Store)) (BinOp (Name &n:3 Load) Mod (Constant i10 None)) None)\n                (Assign (list (Name &y:3 Store)) (BinOp (Constant i10 None) Sub (Name &x:3 Load)) None)\n                (If\n                  (Compare (Name &y:3 Load) (list LtE) (list (Name &m:3 Load)))\n                  (/seq\n                    (Assign\n                      (list (Name &ans:3 Store))\n                      (BinOp\n                        (BinOp\n                          (Name &ans:3 Load)\n                          Add\n                          (Subscript (Name &dp:3 Load) (BinOp (Name &m:3 Load) Sub (Name &y:3 Load)) Load)\n                        )\n                        Mod\n                        (Name &mod:3 Load)\n                      )\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &ans:3 Store))\n                      (BinOp (BinOp (Name &ans:3 Load) Add (Constant i1 None)) Mod (Name &mod:3 Load))\n                      None\n                    )\n                  )\n                )\n                (AugAssign (Name &n:3 Store) FloorDiv (Constant i10 None))\n              )\n              nil\n            )\n            (Expr (Call (Name g_print Load) (list (BinOp (Name &ans:3 Load) Mod (Name &mod:3 Load))) nil))\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:4 None None) (arg &file:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:4 Load) s__fd Store))\n              (Call (Attribute (Name &file:4 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:4 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:4 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:4 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:4 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:5 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:5 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:5 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:5 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:5 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:5 Store))\n                  (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:5 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:5 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:5 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:6 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:6 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:6 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:6 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:6 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:6 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:6 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:6 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:6 Store))\n                  (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:6 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:6 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:6 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:7 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:7 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:8 None None) (arg &file:8 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:8 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:10 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:10 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_io None) (alias g_os None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute\n        (Call\n          (Attribute (Name g_io Load) s_BytesIO Load)\n          (list\n            (Call\n              (Attribute (Name g_os Load) s_read Load)\n              (list\n                (Constant i0 None)\n                (Attribute\n                  (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil)\n                  s_st_size\n                  Load\n                )\n              )\n              nil\n            )\n          )\n          nil\n        )\n        s_readline\n        Load\n      )\n      None\n    )\n    (FunctionDef\n      &solve_tc:0\n      (arguments nil (list (arg &dp:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &mod:1 Store)) (BinOp (Constant i1000000000 None) Add (Constant i7 None)) None)\n        (Assign\n          (list (Tuple (list (Name &n:1 Store) (Name &m:1 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &cnt:1 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &n:1 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &x:1 Store))\n              (Call (Name g_int Load) (list (BinOp (Name &n:1 Load) Mod (Constant i10 None))) nil)\n              None\n            )\n            (If\n              (Compare (BinOp (Name &m:1 Load) Add (Name &x:1 Load)) (list Lt) (list (Constant i10 None)))\n              (/seq (AugAssign (Name &cnt:1 Store) Add (Constant i1 None)))\n              (/seq\n                (AugAssign\n                  (Name &cnt:1 Store)\n                  Add\n                  (Subscript\n                    (Name &dp:1 Load)\n                    (BinOp (BinOp (Name &m:1 Load) Add (Name &x:1 Load)) Sub (Constant i10 None))\n                    Load\n                  )\n                )\n              )\n            )\n            (Assign\n              (list (Name &cnt:1 Store))\n              (Call (Name g_int Load) (list (BinOp (Name &cnt:1 Load) Mod (Name &mod:1 Load))) nil)\n              None\n            )\n            (AugAssign (Name &n:1 Store) FloorDiv (Constant i10 None))\n          )\n          nil\n        )\n        (Return (Call (Name g_str Load) (list (Name &cnt:1 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &dp_maker:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &max_n:2 Store)) (Constant i200005 None) None)\n        (Assign (list (Name &mod:2 Store)) (Constant i1000000007 None) None)\n        (Assign (list (Name &dp:2 Store)) (Dict nil nil) None)\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (Constant i10 None)) nil)\n          (/seq (Assign (list (Subscript (Name &dp:2 Load) (Name &i:2 Load) Store)) (Constant i2 None) None))\n          nil\n          None\n        )\n        (Assign (list (Subscript (Name &dp:2 Load) (Constant i9 None) Store)) (Constant i3 None) None)\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (Constant i10 None) (Name &max_n:2 Load)) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &dp:2 Load) (Name &i:2 Load) Store))\n              (BinOp\n                (BinOp\n                  (Subscript (Name &dp:2 Load) (BinOp (Name &i:2 Load) Sub (Constant i9 None)) Load)\n                  Add\n                  (Subscript (Name &dp:2 Load) (BinOp (Name &i:2 Load) Sub (Constant i10 None)) Load)\n                )\n                Mod\n                (Name &mod:2 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &dp:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &dp:0 Store)) (Call (Name &dp_maker:0 Load) nil nil) None)\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (While\n      (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n        (Expr\n          (Call\n            (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n            (list (Call (Name &solve_tc:0 Load) (list (Name &dp:0 Load)) nil))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n            (list (Constant s-WzEwXQ== None))\n            nil\n          )\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (List (list (Constant i0 None) (Constant i0 None)) Load)\n        (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Constant i200001 None)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i200001 None)) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (Constant i10 None)))\n          (/seq\n            (Assign\n              (list (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Store))\n              (Constant i1 None)\n              None\n            )\n            (Assign\n              (list (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Store))\n              (Constant i1 None)\n              None\n            )\n            (If\n              (Compare (Name &i:0 Load) (list Eq) (list (Constant i9 None)))\n              (/seq\n                (Assign\n                  (list (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Store))\n                  (BinOp\n                    (Subscript (Subscript (Name &dp:0 Load) (Constant i1 None) Load) (Constant i1 None) Load)\n                    Add\n                    (Subscript (Subscript (Name &dp:0 Load) (Constant i1 None) Load) (Constant i0 None) Load)\n                  )\n                  None\n                )\n              )\n              nil\n            )\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Store))\n              (BinOp\n                (BinOp\n                  (Subscript\n                    (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n                    (Constant i1 None)\n                    Load\n                  )\n                  Add\n                  (Subscript\n                    (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n                    (Constant i0 None)\n                    Load\n                  )\n                )\n                Mod\n                (Name &M:0 Load)\n              )\n              None\n            )\n            (Assign\n              (list (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Store))\n              (BinOp\n                (BinOp\n                  (Subscript\n                    (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n                    (Constant i1 None)\n                    Load\n                  )\n                  Add\n                  (Subscript\n                    (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n                    (Constant i0 None)\n                    Load\n                  )\n                )\n                Mod\n                (Name &M:0 Load)\n              )\n              None\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &n:1 None None) (arg &m:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &s:1 Store))\n          (Call (Name g_list Load) (list (Call (Name g_str Load) (list (Name &n:1 Load)) nil)) nil)\n          None\n        )\n        (Assign (list (Name &z:1 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &s:1 Load)) nil)) nil)\n          (/seq\n            (Assign\n              (list (Name &x:1 Store))\n              (Call (Name g_int Load) (list (Subscript (Name &s:1 Load) (Name &i:1 Load) Load)) nil)\n              None\n            )\n            (If\n              (Compare (BinOp (Name &x:1 Load) Add (Name &m:1 Load)) (list Lt) (list (Constant i10 None)))\n              (/seq (AugAssign (Name &z:1 Store) Add (Constant i1 None)))\n              (/seq\n                (AugAssign\n                  (Name &z:1 Store)\n                  Add\n                  (BinOp\n                    (Subscript\n                      (Subscript\n                        (Name &dp:0 Load)\n                        (BinOp (Name &m:1 Load) Sub (BinOp (Constant i10 None) Sub (Name &x:1 Load)))\n                        Load\n                      )\n                      (Constant i1 None)\n                      Load\n                    )\n                    Add\n                    (Subscript\n                      (Subscript\n                        (Name &dp:0 Load)\n                        (BinOp (Name &m:1 Load) Sub (BinOp (Constant i10 None) Sub (Name &x:1 Load)))\n                        Load\n                      )\n                      (Constant i0 None)\n                      Load\n                    )\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Return (Call (Name g_str Load) (list (BinOp (Name &z:1 Load) Mod (Name &M:0 Load))) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign (list (Name &o:0 Store)) (List nil Load) None)\n    (While\n      (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &o:0 Load) s_append Load)\n            (list (Call (Name &solve:0 Load) (list (Name &n:0 Load) (Name &m:0 Load)) nil))\n            nil\n          )\n        )\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n      )\n      nil\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (Name &o:0 Load)) nil))\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Import (list (alias &sys:1 None)))\n        (Assign\n          (list (Name &input:1 Store))\n          (Attribute (Attribute (Name &sys:1 Load) s_stdin Load) s_readline Load)\n          None\n        )\n        (Assign\n          (list (Name &MOD:1 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          None\n        )\n        (Assign (list (Name &t:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:1 Load) nil nil)) nil) None)\n        (Assign (list (Name &x:1 Store)) (Constant i1 None) None)\n        (Assign\n          (list (Name &m:1 Store))\n          (Call\n            (Name g_int Load)\n            (list (BinOp (BinOp (Constant i2 None) Mult (Constant f100000.0 None)) Add (Constant i10 None)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &dp:1 Store))\n          (ListComp\n            (Constant i1 None)\n            (list\n              (comprehension\n                (Name &i:2 Store)\n                (Call (Name g_range Load) (list (BinOp (Name &m:1 Load) Add (Constant i1 None))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Constant i10 None) (BinOp (Name &m:1 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &dp:1 Load) (Name &i:1 Load) Store))\n              (BinOp\n                (BinOp\n                  (Subscript (Name &dp:1 Load) (BinOp (Name &i:1 Load) Sub (Constant i10 None)) Load)\n                  Add\n                  (Subscript (Name &dp:1 Load) (BinOp (Name &i:1 Load) Sub (Constant i9 None)) Load)\n                )\n                Mod\n                (Name &MOD:1 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &_:1 Store)\n          (Call (Name g_range Load) (list (Name &t:1 Load)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &n:1 Store) (Name &k:1 Store)) Store))\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:1 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &sums:1 Store)) (Constant i0 None) None)\n            (While\n              (Name &n:1 Load)\n              (/seq\n                (Assign\n                  (list (Name &sums:1 Store))\n                  (BinOp\n                    (Name &sums:1 Load)\n                    Add\n                    (Subscript\n                      (Name &dp:1 Load)\n                      (BinOp (Name &k:1 Load) Add (BinOp (Name &n:1 Load) Mod (Constant i10 None)))\n                      Load\n                    )\n                  )\n                  None\n                )\n                (Assign (list (Name &n:1 Store)) (BinOp (Name &n:1 Load) FloorDiv (Constant i10 None)) None)\n                (AugAssign (Name &sums:1 Store) Mod (Name &MOD:1 Load))\n              )\n              nil\n            )\n            (Expr (Call (Name g_print Load) (list (Name &sums:1 Load)) nil))\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &mxn:0 Store))\n      (BinOp (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None))) Add (Constant i15 None))\n      None\n    )\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &dp:0 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &mxn:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Name &mxn:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (Name &mod:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &test:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &k:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil) s_split Load)\n                nil\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_str Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (Name &k:0 Load) Add (Call (Name g_int Load) (list (Name &i:0 Load)) nil))\n                    Load\n                  )\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (Import (list (alias g_math None)))\n    (ImportFrom s_queue (list (alias g_Queue None)) i0)\n    (Import (list (alias g_itertools None)))\n    (Import (list (alias g_bisect None)))\n    (Import (list (alias g_heapq None)))\n    (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq Pass) nil None None)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:19 None None) (arg &file:19 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:19 Load) s__fd Store))\n              (Call (Attribute (Name &file:19 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:19 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:19 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:19 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:19 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:19 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:19 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:20 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:20 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:20 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:20 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:20 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:20 Store))\n                  (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:20 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:20 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:20 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:21 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:21 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:21 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:21 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:21 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:21 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:21 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:21 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:21 Store))\n                  (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:21 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:21 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:21 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:22 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:22 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:22 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:23 None None) (arg &file:23 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:23 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:23 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:23 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:23 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:23 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:24 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:24 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:23 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:23 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &binary:0\n      (arguments nil (list (arg &n:3 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute (Call (Name g_bin Load) (list (Name &n:3 Load)) nil) s_replace Load)\n            (list (Constant s_0b None) (Constant s_ None))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &decimal:0\n      (arguments nil (list (arg &s:4 None None)) None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Name &s:4 Load) (Constant i2 None)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &pow2:0\n      (arguments nil (list (arg &n:5 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &p:5 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &n:5 Load) (list Gt) (list (Constant i1 None)))\n          (/seq\n            (AugAssign (Name &n:5 Store) FloorDiv (Constant i2 None))\n            (AugAssign (Name &p:5 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Return (Name &p:5 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &primeFactors:0\n      (arguments nil (list (arg &n:6 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &l:6 Store)) (List nil Load) None)\n        (While\n          (Compare (BinOp (Name &n:6 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Attribute (Name &l:6 Load) s_append Load) (list (Constant i2 None)) nil))\n            (Assign (list (Name &n:6 Store)) (BinOp (Name &n:6 Load) Div (Constant i2 None)) None)\n          )\n          nil\n        )\n        (For\n          (Name &i:6 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Constant i3 None)\n              (BinOp\n                (Call\n                  (Name g_int Load)\n                  (list (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &n:6 Load)) nil))\n                  nil\n                )\n                Add\n                (Constant i1 None)\n              )\n              (Constant i2 None)\n            )\n            nil\n          )\n          (/seq\n            (While\n              (Compare (BinOp (Name &n:6 Load) Mod (Name &i:6 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Attribute (Name &l:6 Load) s_append Load) (list (Name &i:6 Load)) nil))\n                (Assign (list (Name &n:6 Store)) (BinOp (Name &n:6 Load) Div (Name &i:6 Load)) None)\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (If\n          (Compare (Name &n:6 Load) (list Gt) (list (Constant i2 None)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &l:6 Load) s_append Load)\n                (list (Call (Name g_int Load) (list (Name &n:6 Load)) nil))\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (Return (Name &l:6 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &isPrime:0\n      (arguments nil (list (arg &n:7 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &n:7 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Return (Constant False None)))\n          (/seq\n            (Assign\n              (list (Name &root:7 Store))\n              (Call (Name g_int Load) (list (BinOp (Name &n:7 Load) Pow (Constant f0.5 None))) nil)\n              None\n            )\n            (AugAssign (Name &root:7 Store) Add (Constant i1 None))\n            (For\n              (Name &i:7 Store)\n              (Call (Name g_range Load) (list (Constant i2 None) (Name &root:7 Load)) nil)\n              (/seq\n                (If\n                  (Compare (BinOp (Name &n:7 Load) Mod (Name &i:7 Load)) (list Eq) (list (Constant i0 None)))\n                  (/seq (Return (Constant False None)))\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Return (Constant True None))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &maxPrimeFactors:0\n      (arguments nil (list (arg &n:8 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &maxPrime:8 Store)) (UnaryOp USub (Constant i1 None)) None)\n        (While\n          (Compare (BinOp (Name &n:8 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Assign (list (Name &maxPrime:8 Store)) (Constant i2 None) None)\n            (AugAssign (Name &n:8 Store) RShift (Constant i1 None))\n          )\n          nil\n        )\n        (For\n          (Name &i:8 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Constant i3 None)\n              (BinOp\n                (Call\n                  (Name g_int Load)\n                  (list (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &n:8 Load)) nil))\n                  nil\n                )\n                Add\n                (Constant i1 None)\n              )\n              (Constant i2 None)\n            )\n            nil\n          )\n          (/seq\n            (While\n              (Compare (BinOp (Name &n:8 Load) Mod (Name &i:8 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &maxPrime:8 Store)) (Name &i:8 Load) None)\n                (Assign (list (Name &n:8 Store)) (BinOp (Name &n:8 Load) Div (Name &i:8 Load)) None)\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (If\n          (Compare (Name &n:8 Load) (list Gt) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &maxPrime:8 Store)) (Name &n:8 Load) None))\n          nil\n        )\n        (Return (Call (Name g_int Load) (list (Name &maxPrime:8 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &countcon:0\n      (arguments nil (list (arg &s:9 None None) (arg &i:9 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &c:9 Store)) (Constant i0 None) None)\n        (Assign (list (Name &ch:9 Store)) (Subscript (Name &s:9 Load) (Name &i:9 Load) Load) None)\n        (For\n          (Name &i:9 Store)\n          (Call (Name g_range Load) (list (Name &i:9 Load) (Call (Name g_len Load) (list (Name &s:9 Load)) nil)) nil)\n          (/seq\n            (If\n              (Compare (Subscript (Name &s:9 Load) (Name &i:9 Load) Load) (list Eq) (list (Name &ch:9 Load)))\n              (/seq (AugAssign (Name &c:9 Store) Add (Constant i1 None)))\n              (/seq Break)\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &c:9 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lis:0\n      (arguments nil (list (arg &arr:10 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:10 Store)) (Call (Name g_len Load) (list (Name &arr:10 Load)) nil) None)\n        (Assign (list (Name &lis:10 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &n:10 Load)) None)\n        (For\n          (Name &i:10 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (Name &n:10 Load)) nil)\n          (/seq\n            (For\n              (Name &j:10 Store)\n              (Call (Name g_range Load) (list (Constant i0 None) (Name &i:10 Load)) nil)\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Subscript (Name &arr:10 Load) (Name &i:10 Load) Load)\n                        (list Gt)\n                        (list (Subscript (Name &arr:10 Load) (Name &j:10 Load) Load))\n                      )\n                      (Compare\n                        (Subscript (Name &lis:10 Load) (Name &i:10 Load) Load)\n                        (list Lt)\n                        (list (BinOp (Subscript (Name &lis:10 Load) (Name &j:10 Load) Load) Add (Constant i1 None)))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &lis:10 Load) (Name &i:10 Load) Store))\n                      (BinOp (Subscript (Name &lis:10 Load) (Name &j:10 Load) Load) Add (Constant i1 None))\n                      None\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &maximum:10 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:10 Store)\n          (Call (Name g_range Load) (list (Name &n:10 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &maximum:10 Store))\n              (Call\n                (Name g_max Load)\n                (list (Name &maximum:10 Load) (Subscript (Name &lis:10 Load) (Name &i:10 Load) Load))\n                nil\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &maximum:10 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &isSubSequence:0\n      (arguments nil (list (arg &str1:11 None None) (arg &str2:11 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &m:11 Store)) (Call (Name g_len Load) (list (Name &str1:11 Load)) nil) None)\n        (Assign (list (Name &n:11 Store)) (Call (Name g_len Load) (list (Name &str2:11 Load)) nil) None)\n        (Assign (list (Name &j:11 Store)) (Constant i0 None) None)\n        (Assign (list (Name &i:11 Store)) (Constant i0 None) None)\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &j:11 Load) (list Lt) (list (Name &m:11 Load)))\n              (Compare (Name &i:11 Load) (list Lt) (list (Name &n:11 Load)))\n            )\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &str1:11 Load) (Name &j:11 Load) Load)\n                (list Eq)\n                (list (Subscript (Name &str2:11 Load) (Name &i:11 Load) Load))\n              )\n              (/seq (Assign (list (Name &j:11 Store)) (BinOp (Name &j:11 Load) Add (Constant i1 None)) None))\n              nil\n            )\n            (Assign (list (Name &i:11 Store)) (BinOp (Name &i:11 Load) Add (Constant i1 None)) None)\n          )\n          nil\n        )\n        (Return (Compare (Name &j:11 Load) (list Eq) (list (Name &m:11 Load))))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &maxfac:0\n      (arguments nil (list (arg &n:12 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &root:12 Store))\n          (Call (Name g_int Load) (list (BinOp (Name &n:12 Load) Pow (Constant f0.5 None))) nil)\n          None\n        )\n        (For\n          (Name &i:12 Store)\n          (Call (Name g_range Load) (list (Constant i2 None) (BinOp (Name &root:12 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (If\n              (Compare (BinOp (Name &n:12 Load) Mod (Name &i:12 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq (Return (BinOp (Name &n:12 Load) FloorDiv (Name &i:12 Load))))\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &n:12 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &p2:0\n      (arguments nil (list (arg &n:13 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &c:13 Store)) (Constant i0 None) None)\n        (While\n          (Compare (BinOp (Name &n:13 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &n:13 Store) FloorDiv (Constant i2 None))\n            (AugAssign (Name &c:13 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Return (Name &c:13 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &seive:0\n      (arguments nil (list (arg &n:14 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &primes:14 Store))\n          (BinOp (List (list (Constant True None)) Load) Mult (BinOp (Name &n:14 Load) Add (Constant i1 None)))\n          None\n        )\n        (Assign\n          (list\n            (Subscript (Name &primes:14 Load) (Constant i1 None) Store)\n            (Subscript (Name &primes:14 Load) (Constant i0 None) Store)\n          )\n          (Constant False None)\n          None\n        )\n        (For\n          (Name &i:14 Store)\n          (Call (Name g_range Load) (list (Constant i2 None) (BinOp (Name &n:14 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (If\n              (Subscript (Name &primes:14 Load) (Name &i:14 Load) Load)\n              (/seq\n                (For\n                  (Name &j:14 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (BinOp (Name &i:14 Load) Add (Name &i:14 Load))\n                      (BinOp (Name &n:14 Load) Add (Constant i1 None))\n                      (Name &i:14 Load)\n                    )\n                    nil\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &primes:14 Load) (Name &j:14 Load) Store))\n                      (Constant False None)\n                      None\n                    )\n                  )\n                  nil\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &p:14 Store)) (List nil Load) None)\n        (For\n          (Name &i:14 Store)\n          (Call (Name g_range Load) (list (Constant i0 None) (BinOp (Name &n:14 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (If\n              (Subscript (Name &primes:14 Load) (Name &i:14 Load) Load)\n              (/seq (Expr (Call (Attribute (Name &p:14 Load) s_append Load) (list (Name &i:14 Load)) nil)))\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &p:14 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ncr:0\n      (arguments nil (list (arg &n:15 None None) (arg &r:15 None None) (arg &p:15 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &num:15 Store) (Name &den:15 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:15 Store)\n          (Call (Name g_range Load) (list (Name &r:15 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &num:15 Store))\n              (BinOp\n                (BinOp (Name &num:15 Load) Mult (BinOp (Name &n:15 Load) Sub (Name &i:15 Load)))\n                Mod\n                (Name &p:15 Load)\n              )\n              None\n            )\n            (Assign\n              (list (Name &den:15 Store))\n              (BinOp\n                (BinOp (Name &den:15 Load) Mult (BinOp (Name &i:15 Load) Add (Constant i1 None)))\n                Mod\n                (Name &p:15 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return\n          (BinOp\n            (BinOp\n              (Name &num:15 Load)\n              Mult\n              (Call\n                (Name g_pow Load)\n                (list (Name &den:15 Load) (BinOp (Name &p:15 Load) Sub (Constant i2 None)) (Name &p:15 Load))\n                nil\n              )\n            )\n            Mod\n            (Name &p:15 Load)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &denofactinverse:0\n      (arguments nil (list (arg &n:16 None None) (arg &m:16 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &fac:16 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:16 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:16 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Name &fac:16 Store))\n              (BinOp (BinOp (Name &fac:16 Load) Mult (Name &i:16 Load)) Mod (Name &m:16 Load))\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return\n          (Call\n            (Name g_pow Load)\n            (list (Name &fac:16 Load) (BinOp (Name &m:16 Load) Sub (Constant i2 None)) (Name &m:16 Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &numofact:0\n      (arguments nil (list (arg &n:17 None None) (arg &m:17 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &fac:17 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:17 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:17 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Name &fac:17 Store))\n              (BinOp (BinOp (Name &fac:17 Load) Mult (Name &i:17 Load)) Mod (Name &m:17 Load))\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &fac:17 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sod:0\n      (arguments nil (list (arg &n:18 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:18 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &n:18 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &s:18 Store) Add (BinOp (Name &n:18 Load) Mod (Constant i10 None)))\n            (AugAssign (Name &n:18 Store) FloorDiv (Constant i10 None))\n          )\n          nil\n        )\n        (Return (Name &s:18 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &dp:0 Store)) (BinOp (List (list (Constant i2 None)) Load) Mult (Constant i9 None)) None)\n    (AugAssign (Name &dp:0 Store) Add (List (list (Constant i3 None)) Load))\n    (Assign (list (Name &mod:0 Store)) (Constant i1000000007 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (Constant i10 None)\n          (BinOp\n            (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n            Add\n            (Constant i1 None)\n          )\n        )\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &dp:0 Load) s_append Load)\n            (list\n              (BinOp\n                (BinOp\n                  (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n                  Add\n                  (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &xyz:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (Constant i0 None) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Assign (list (Name &num:0 Store)) (BinOp (Name &n:0 Load) Mod (Constant i10 None)) None)\n            (AugAssign (Name &n:0 Store) FloorDiv (Constant i10 None))\n            (If\n              (Compare (BinOp (Name &num:0 Load) Add (Name &m:0 Load)) (list Lt) (list (Constant i10 None)))\n              (/seq\n                (AugAssign (Name &ans:0 Store) Add (Constant i1 None))\n                (Assign (list (Name &ans:0 Store)) (BinOp (Name &ans:0 Load) Mod (Name &mod:0 Load)) None)\n              )\n              (/seq\n                (Assign\n                  (list (Name &tm:0 Store))\n                  (BinOp (Name &m:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &num:0 Load)))\n                  None\n                )\n                (AugAssign (Name &ans:0 Store) Add (Subscript (Name &dp:0 Load) (Name &tm:0 Load) Load))\n                (Assign (list (Name &ans:0 Store)) (BinOp (Name &ans:0 Load) Mod (Name &mod:0 Load)) None)\n              )\n            )\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (Assign (list (Name &dp:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i200011 None)) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (Constant i10 None)))\n          (/seq (Expr (Call (Attribute (Name &dp:0 Load) s_append Load) (list (Constant i1 None)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &dp:0 Load) s_append Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n                      Add\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n                    )\n                    Mod\n                    (Name &M:0 Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Name &m:0 Load)) nil) None)\n        (Assign\n          (list (Name &M:0 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Name &n:0 Load)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &i:0 Load)) nil))\n                    Load\n                  )\n                )\n                Mod\n                (Name &M:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (Assign (list (Name &dp:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i200005 None)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i0 None) (Constant i9 None)) nil)\n      (/seq (Assign (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store)) (Constant i2 None) None))\n      nil\n      None\n    )\n    (Assign (list (Subscript (Name &dp:0 Load) (Constant i9 None) Store)) (Constant i3 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Constant i200005 None)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n            )\n            Mod\n            (Constant i1000000007 None)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant s_ None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Name &m:0 Load)) nil) None)\n        (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &s:0 Store)\n          (Name &n:0 Load)\n          (/seq\n            (Assign (list (Name &s:0 Store)) (Call (Name g_int Load) (list (Name &s:0 Load)) nil) None)\n            (Assign\n              (list (Name &ind:0 Store))\n              (BinOp (Name &m:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &s:0 Load)))\n              None\n            )\n            (If\n              (Compare (Name &ind:0 Load) (list Lt) (list (Constant i0 None)))\n              (/seq (AugAssign (Name &res:0 Store) Add (Constant i1 None)) Continue)\n              nil\n            )\n            (Assign\n              (list (Name &res:0 Store))\n              (BinOp\n                (BinOp (Name &res:0 Load) Add (Subscript (Name &dp:0 Load) (Name &ind:0 Load) Load))\n                Mod\n                (Constant i1000000007 None)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name g_stdout Load) s_write Load)\n            (list (BinOp (Call (Name g_str Load) (list (Name &res:0 Load)) nil) Add (Constant s-WzEwXQ== None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &MOD:0 Store)) (BinOp (Constant f1000000000.0 None) Add (Constant i7 None)) None)\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &m:0 Store))\n      (Call\n        (Name g_int Load)\n        (list (BinOp (BinOp (Constant i2 None) Mult (Constant f100000.0 None)) Add (Constant i11 None)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (Constant i1 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n            )\n            Mod\n            (Name &MOD:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &k:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &sums:0 Store)) (Constant i0 None) None)\n        (While\n          (Name &n:0 Load)\n          (/seq\n            (Assign\n              (list (Name &sums:0 Store))\n              (BinOp\n                (Name &sums:0 Load)\n                Add\n                (Subscript\n                  (Name &dp:0 Load)\n                  (BinOp (Name &k:0 Load) Add (BinOp (Name &n:0 Load) Mod (Constant i10 None)))\n                  Load\n                )\n              )\n              None\n            )\n            (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i10 None)) None)\n            (AugAssign (Name &sums:0 Store) Mod (Name &MOD:0 Load))\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &sums:0 Load)) nil)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &dp:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i200011 None)) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (Constant i10 None)))\n          (/seq (Expr (Call (Attribute (Name &dp:0 Load) s_append Load) (list (Constant i1 None)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &dp:0 Load) s_append Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n                      Add\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n                    )\n                    Mod\n                    (Name &M:0 Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Name &m:0 Load)) nil) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Name &n:0 Load)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &i:0 Load)) nil))\n                    Load\n                  )\n                )\n                Mod\n                (Name &M:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &mod:3 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          None\n        )\n        (Assign (list (Name &mm:3 Store)) (Constant i200000 None) None)\n        (Assign\n          (list (Name &dp:3 Store))\n          (ListComp\n            (Constant i0 None)\n            (list\n              (comprehension\n                (Name &_:9 Store)\n                (Call (Name g_range Load) (list (BinOp (Name &mm:3 Load) Add (Constant i1 None))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Subscript (Name &dp:3 Load) (Constant i0 None) Store)) (Constant i2 None) None)\n        (Assign (list (Subscript (Name &dp:3 Load) (Constant i1 None) Store)) (Constant i2 None) None)\n        (For\n          (Name &i:3 Store)\n          (Call (Name g_range Load) (list (Constant i2 None) (Constant i9 None)) nil)\n          (/seq (Assign (list (Subscript (Name &dp:3 Load) (Name &i:3 Load) Store)) (Constant i2 None) None))\n          nil\n          None\n        )\n        (Assign (list (Subscript (Name &dp:3 Load) (Constant i9 None) Store)) (Constant i3 None) None)\n        (For\n          (Name &i:3 Store)\n          (Call (Name g_range Load) (list (Constant i10 None) (BinOp (Name &mm:3 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &dp:3 Load) (Name &i:3 Load) Store))\n              (BinOp\n                (BinOp\n                  (Subscript (Name &dp:3 Load) (BinOp (Name &i:3 Load) Sub (Constant i9 None)) Load)\n                  Add\n                  (Subscript (Name &dp:3 Load) (BinOp (Name &i:3 Load) Sub (Constant i10 None)) Load)\n                )\n                Mod\n                (Name &mod:3 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &_:3 Store)\n          (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &n:3 Store) (Name &m:3 Store)) Store))\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &ans:3 Store)) (Constant i0 None) None)\n            (While\n              (Name &n:3 Load)\n              (/seq\n                (Assign (list (Name &x:3 Store)) (BinOp (Name &n:3 Load) Mod (Constant i10 None)) None)\n                (Assign (list (Name &y:3 Store)) (BinOp (Constant i10 None) Sub (Name &x:3 Load)) None)\n                (If\n                  (Compare (Name &y:3 Load) (list LtE) (list (Name &m:3 Load)))\n                  (/seq\n                    (Assign\n                      (list (Name &ans:3 Store))\n                      (BinOp\n                        (BinOp\n                          (Name &ans:3 Load)\n                          Add\n                          (Subscript (Name &dp:3 Load) (BinOp (Name &m:3 Load) Sub (Name &y:3 Load)) Load)\n                        )\n                        Mod\n                        (Name &mod:3 Load)\n                      )\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &ans:3 Store))\n                      (BinOp (BinOp (Name &ans:3 Load) Add (Constant i1 None)) Mod (Name &mod:3 Load))\n                      None\n                    )\n                  )\n                )\n                (AugAssign (Name &n:3 Store) FloorDiv (Constant i10 None))\n              )\n              nil\n            )\n            (Expr (Call (Name g_print Load) (list (BinOp (Name &ans:3 Load) Mod (Name &mod:3 Load))) nil))\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:4 None None) (arg &file:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:4 Load) s__fd Store))\n              (Call (Attribute (Name &file:4 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:4 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:4 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:4 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:4 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:5 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:5 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:5 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:5 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:5 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:5 Store))\n                  (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:5 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:5 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:5 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:6 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:6 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:6 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:6 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:6 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:6 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:6 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:6 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:6 Store))\n                  (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:6 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:6 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:6 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:7 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:7 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:8 None None) (arg &file:8 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:8 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:10 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:10 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil)) nil)\n      None\n    )\n    (Assign (list (Name &M:0 Store)) (Constant i1000000007 None) None)\n    (Assign\n      (list (Name &dp:0 Store))\n      (BinOp\n        (List (list (Constant i0 None)) Load)\n        Mult\n        (BinOp (BinOp (Constant i2 None) Mult (Constant i100000 None)) Add (Constant i20 None))\n      )\n      None\n    )\n    (Assign\n      (list (Subscript (Name &dp:0 Load) (Slice None (Constant i10 None) None) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (GeneratorExp\n            (Constant i1 None)\n            (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i10 None)) nil) nil i0))\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (Constant i10 None)\n          (BinOp (BinOp (Constant i2 None) Mult (Constant i100000 None)) Add (Constant i20 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n            Add\n            (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store) Mod (Name &M:0 Load))\n      )\n      nil\n      None\n    )\n    (While\n      (Name &t:0 Load)\n      (/seq\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil) s_split Load)\n                nil\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &n:0 Store)) (Call (Name g_str Load) (list (Name &n:0 Load)) nil) None)\n        (Assign (list (Name &result:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Name &n:0 Load)\n          (/seq\n            (AugAssign\n              (Name &result:0 Store)\n              Add\n              (Subscript\n                (Name &dp:0 Load)\n                (BinOp (Call (Name g_int Load) (list (Name &i:0 Load)) nil) Add (Name &m:0 Load))\n                Load\n              )\n            )\n            (AugAssign (Name &result:0 Store) Mod (Name &M:0 Load))\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &result:0 Load)) nil))\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &c:0 Store))\n      (BinOp\n        (List (list (Constant i1 None)) Load)\n        Add\n        (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i9 None))\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp\n            (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n            Add\n            (Constant i50 None)\n          )\n        )\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &a:0 Load) s_append Load)\n            (list (Call (Name g_sum Load) (list (Name &c:0 Load)) nil))\n            nil\n          )\n        )\n        (Assign (list (Name &d:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i10 None)) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Constant i9 None)) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &d:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store))\n              (Subscript (Name &c:0 Load) (Name &i:0 Load) Load)\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list (Subscript (Name &d:0 Load) (Constant i0 None) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &d:0 Load) (Constant i0 None) Load)\n              Add\n              (Subscript (Name &c:0 Load) (Constant i9 None) Load)\n            )\n            Mod\n            (Name &MOD:0 Load)\n          )\n          None\n        )\n        (Assign\n          (list (Subscript (Name &d:0 Load) (Constant i1 None) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &d:0 Load) (Constant i1 None) Load)\n              Add\n              (Subscript (Name &c:0 Load) (Constant i9 None) Load)\n            )\n            Mod\n            (Name &MOD:0 Load)\n          )\n          None\n        )\n        (Assign (list (Name &c:0 Store)) (Name &d:0 Load) None)\n      )\n      nil\n      None\n    )\n    (Import (list (alias &sys:0 None) (alias &os:0 None) (alias &io:0 None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (Assign (list (Name &stdout:0 Store)) (Call (Attribute (Name &io:0 Load) s_BytesIO Load) nil nil) None)\n    (Assign\n      (list (Attribute (Attribute (Name &sys:0 Load) s_stdout Load) s_write Store))\n      (Lambda\n        (arguments nil (list (arg &s:1 None None)) None nil nil None nil)\n        (Call\n          (Attribute (Name &stdout:0 Load) s_write Load)\n          (list (Call (Attribute (Name &s:1 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n          nil\n        )\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &k:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &t:2 Load)) nil)\n            (list\n              (comprehension\n                (Name &t:2 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &s:0 Store)) (Call (Name g_str Load) (list (Name &n:0 Load)) nil) None)\n        (Assign\n          (list (Name &c:0 Store))\n          (ListComp\n            (Call\n              (Attribute (Name &s:0 Load) s_count Load)\n              (list (Call (Name g_str Load) (list (Name &i:3 Load)) nil))\n              nil\n            )\n            (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (Constant i10 None)) nil) nil i0))\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Constant i10 None)) nil)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (BinOp\n                    (Subscript (Name &c:0 Load) (Name &i:0 Load) Load)\n                    Mult\n                    (Subscript (Name &a:0 Load) (BinOp (Name &i:0 Load) Add (Name &k:0 Load)) Load)\n                  )\n                )\n                Mod\n                (Name &MOD:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name &os:0 Load) s_write Load)\n        (list (Constant i1 None) (Call (Attribute (Name &stdout:0 Load) s_getvalue Load) nil nil))\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (Call (Name g_pow Load) (list (Constant i10 None) (Constant i9 None)) nil) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &arr:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i200020 None)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None)) nil)\n      (/seq (Assign (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Store)) (Constant i1 None) None))\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Constant i200020 None)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &arr:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n              Add\n              (Subscript (Name &arr:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n            )\n            Mod\n            (Name &mod:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:1 Store) (Name &m:1 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:1 Store)) (Constant i0 None) None)\n        (While\n          (Constant True None)\n          (/seq\n            (Assign\n              (list (Name &k:1 Store))\n              (BinOp (Name &m:1 Load) Add (BinOp (Name &n:1 Load) Mod (Constant i10 None)))\n              None\n            )\n            (AugAssign (Name &ans:1 Store) Add (Subscript (Name &arr:0 Load) (Name &k:1 Load) Load))\n            (Assign (list (Name &n:1 Store)) (BinOp (Name &n:1 Load) FloorDiv (Constant i10 None)) None)\n            (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i0 None))) (/seq Break) nil)\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (BinOp (Name &ans:1 Load) Mod (Name &mod:0 Load))) nil))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (For\n          (Name &t:0 Store)\n          (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n          (/seq (Expr (Call (Name &solve:0 Load) nil nil)))\n          nil\n          None\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None) (alias g_io None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute\n        (Call\n          (Attribute (Name g_io Load) s_BytesIO Load)\n          (list\n            (Call\n              (Attribute (Name g_os Load) s_read Load)\n              (list\n                (Constant i0 None)\n                (Attribute\n                  (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil)\n                  s_st_size\n                  Load\n                )\n              )\n              nil\n            )\n          )\n          nil\n        )\n        s_readline\n        Load\n      )\n      None\n    )\n    (ClassDef\n      &Solution:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_mod Store))\n              (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n              None\n            )\n            (Assign\n              (list (Name &N:2 Store))\n              (BinOp\n                (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n                Add\n                (Constant i1 None)\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_dp Store))\n              (BinOp (List (list (Constant i1 None)) Load) Mult (Name &N:2 Load))\n              None\n            )\n            (For\n              (Name &i:2 Store)\n              (Call (Name g_range Load) (list (Constant i10 None) (Name &N:2 Load)) nil)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:2 Load) s_dp Load) (Name &i:2 Load) Store))\n                  (BinOp\n                    (BinOp\n                      (Subscript\n                        (Attribute (Name &self:2 Load) s_dp Load)\n                        (BinOp (Name &i:2 Load) Sub (Constant i10 None))\n                        Load\n                      )\n                      Add\n                      (Subscript\n                        (Attribute (Name &self:2 Load) s_dp Load)\n                        (BinOp (Name &i:2 Load) Sub (Constant i9 None))\n                        Load\n                      )\n                    )\n                    Mod\n                    (Attribute (Name &self:2 Load) s_mod Load)\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &getLen:1\n          (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare\n                (Name &x:3 Load)\n                (list GtE)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:3 Load) s_dp Load)) nil))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Attribute (Name &self:3 Load) s_dp Load) s_append Load)\n                    (list\n                      (BinOp\n                        (Subscript (Attribute (Name &self:3 Load) s_dp Load) (UnaryOp USub (Constant i10 None)) Load)\n                        Add\n                        (Subscript (Attribute (Name &self:3 Load) s_dp Load) (UnaryOp USub (Constant i9 None)) Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (Return (Subscript (Attribute (Name &self:3 Load) s_dp Load) (Name &x:3 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &solve:1\n          (arguments nil (list (arg &self:4 None None) (arg &n:4 None None) (arg &m:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &ans:4 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &n:4 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &dig:4 Store)) (BinOp (Name &n:4 Load) Mod (Constant i10 None)) None)\n                (AugAssign (Name &n:4 Store) FloorDiv (Constant i10 None))\n                (Assign\n                  (list (Name &ans:4 Store))\n                  (BinOp\n                    (BinOp\n                      (Name &ans:4 Load)\n                      Add\n                      (Call\n                        (Attribute (Name &self:4 Load) s_getLen Load)\n                        (list (BinOp (Name &dig:4 Load) Add (Name &m:4 Load)))\n                        nil\n                      )\n                    )\n                    Mod\n                    (Attribute (Name &self:4 Load) s_mod Load)\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &ans:4 Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name &Solution:0 Load) nil nil) None)\n    (Assign\n      (list (Name &numCases:0 Store))\n      (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &numCases:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &ans:0 Store))\n          (Call (Attribute (Name &s:0 Load) s_solve Load) (list (Name &n:0 Load) (Name &m:0 Load)) nil)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCAxMDBd None) Mod (Name &ans:0 Load))) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None)) i0)\n    (Assign\n      (list (Name &dp:0 Store))\n      (BinOp\n        (List (list (Constant i0 None)) Load)\n        Mult\n        (BinOp\n          (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n          Add\n          (Constant i1 None)\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i9 None)) nil)\n      (/seq (Assign (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store)) (Constant i2 None) None))\n      nil\n      None\n    )\n    (Assign (list (Subscript (Name &dp:0 Load) (Constant i9 None) Store)) (Constant i3 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (Constant i10 None)\n          (BinOp\n            (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n            Add\n            (Constant i1 None)\n          )\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &n:0 Store)) (Call (Name g_str Load) (list (Name &n:0 Load)) nil) None)\n        (Assign\n          (list (Name &a:0 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (Call (Name g_len Load) (list (Name &n:0 Load)) nil))\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Name &n:0 Load)\n          (/seq\n            (Assign\n              (list (Name &temp:0 Store))\n              (BinOp (Call (Name g_int Load) (list (Name &i:0 Load)) nil) Add (Name &m:0 Load))\n              None\n            )\n            (If\n              (Compare (Name &temp:0 Load) (list Lt) (list (Constant i10 None)))\n              (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n              (/seq\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Add\n                  (BinOp\n                    (Subscript\n                      (Name &dp:0 Load)\n                      (BinOp\n                        (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &i:0 Load)) nil))\n                        Sub\n                        (Constant i10 None)\n                      )\n                      Load\n                    )\n                    Mod\n                    (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (BinOp\n                (Name &ans:0 Load)\n                Mod\n                (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (Import (list (alias g_math None)))\n    (ImportFrom s_decimal (list (alias g_* None)) i0)\n    (Assign (list (Attribute (Call (Name g_getcontext Load) nil nil) s_prec Store)) (Constant i25 None) None)\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (Call (Name g_pow Load) (list (Constant i10 None) (Constant i9 None)) nil) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ImportFrom s_collections (list (alias &defaultdict:0 None)) i0)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &file:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:3 Load) s__fd Store))\n              (Call (Attribute (Name &file:3 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:3 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:3 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:3 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:3 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:3 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:4 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:4 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:4 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:4 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:4 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:4 Store))\n                  (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:4 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:4 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:4 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:5 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:5 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:5 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:5 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:5 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:5 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:5 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:5 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:5 Store))\n                  (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:5 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:5 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:5 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:6 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:6 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:6 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:7 None None) (arg &file:7 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:7 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:8 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:8 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (BinOp\n        (List (list (Constant i0 None)) Load)\n        Mult\n        (BinOp (Constant i2 None) Mult (Call (Name g_pow Load) (list (Constant i10 None) (Constant i5 None)) nil))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i9 None)) nil)\n      (/seq (Assign (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store)) (Constant i2 None) None))\n      nil\n      None\n    )\n    (Assign (list (Subscript (Name &dp:0 Load) (Constant i9 None) Store)) (Constant i3 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (Constant i10 None)\n          (BinOp (Constant i2 None) Mult (Call (Name g_pow Load) (list (Constant i10 None) (Constant i5 None)) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (Name &MOD:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (While\n          (Name &n:0 Load)\n          (/seq\n            (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) Mod (Constant i10 None)) None)\n            (If\n              (Compare (BinOp (Name &x:0 Load) Add (Name &m:0 Load)) (list Lt) (list (Constant i10 None)))\n              (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n              (/seq\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (BinOp (Name &x:0 Load) Add (Name &m:0 Load)) Sub (Constant i10 None))\n                    Load\n                  )\n                )\n              )\n            )\n            (AugAssign (Name &ans:0 Store) Mod (Name &MOD:0 Load))\n            (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i10 None)) None)\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (FunctionDef\n      &inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n              s_rstrip\n              Load\n            )\n            nil\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &p:0 Store)) (Constant i1000000007 None) None)\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name &inp:0 Load) nil nil)) nil) None)\n    (Assign (list (Name &rec:0 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Constant i200010 None)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None)) nil)\n      (/seq (Assign (list (Subscript (Name &rec:0 Load) (Name &i:0 Load) Store)) (Constant i1 None) None))\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Constant i200010 None)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &rec:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &rec:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &rec:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (Name &p:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &res_list:0 Store)) (List nil Load) None)\n    (For\n      (Name &z:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Name &m:0 Load)) nil) None)\n        (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &c:0 Store)\n          (Name &n:0 Load)\n          (/seq\n            (Assign\n              (list (Name &res:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &res:0 Load)\n                  Add\n                  (Subscript\n                    (Name &rec:0 Load)\n                    (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &c:0 Load)) nil))\n                    Load\n                  )\n                )\n                Mod\n                (Name &p:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &res_list:0 Load) s_append Load) (list (Name &res:0 Load)) nil))\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Attribute (Constant s-WzEwXQ== None) s_join Load)\n            (list (Call (Name g_map Load) (list (Name g_str Load) (Name &res_list:0 Load)) nil))\n            nil\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_OrderedDict None) (alias g_Counter None)) i0)\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (ImportFrom s_bisect (list (alias g_bisect_left None) (alias g_bisect_right None)) i0)\n    (ImportFrom s_queue (list (alias g_Queue None) (alias g_PriorityQueue None)) i0)\n    (ImportFrom s_heapq (list (alias g_* None)) i0)\n    (ImportFrom s_statistics (list (alias g_* None)) i0)\n    (ImportFrom s_math (list (alias g_* None)) i0)\n    (Import (list (alias g_fractions None)))\n    (Import (list (alias g_copy None)))\n    (ImportFrom s_copy (list (alias g_deepcopy None)) i0)\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_io None)))\n    (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (Constant i10000 None)) nil))\n    (Import (list (alias &math:0 None)))\n    (Import (list (alias &os:0 None)))\n    (Import (list (alias &bisect:0 None)))\n    (Import (list (alias &collections:0 None)))\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (Call (Name g_pow Load) (list (Constant i10 None) (Constant i9 None)) nil) Add (Constant i7 None))\n      None\n    )\n    (Import (list (alias &random:0 None)))\n    (ImportFrom s_random (list (alias &*:0 None)) i0)\n    (ImportFrom s_time (list (alias &time:0 None)) i0)\n    (FunctionDef\n      &ncr:0\n      (arguments\n        nil\n        (list (arg &n:1 None None) (arg &r:1 None None) (arg &p:1 None None))\n        None\n        nil\n        nil\n        None\n        (list (Name &mod:0 Load))\n      )\n      (/seq\n        (Assign (list (Name &num:1 Store) (Name &den:1 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Name &r:1 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &num:1 Store))\n              (BinOp (BinOp (Name &num:1 Load) Mult (BinOp (Name &n:1 Load) Sub (Name &i:1 Load))) Mod (Name &p:1 Load))\n              None\n            )\n            (Assign\n              (list (Name &den:1 Store))\n              (BinOp\n                (BinOp (Name &den:1 Load) Mult (BinOp (Name &i:1 Load) Add (Constant i1 None)))\n                Mod\n                (Name &p:1 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return\n          (BinOp\n            (BinOp\n              (Name &num:1 Load)\n              Mult\n              (Call\n                (Name g_pow Load)\n                (list (Name &den:1 Load) (BinOp (Name &p:1 Load) Sub (Constant i2 None)) (Name &p:1 Load))\n                nil\n              )\n            )\n            Mod\n            (Name &p:1 Load)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &normalncr:0\n      (arguments nil (list (arg &n:2 None None) (arg &r:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &r:2 Store))\n          (Call (Name g_min Load) (list (Name &r:2 Load) (BinOp (Name &n:2 Load) Sub (Name &r:2 Load))) nil)\n          None\n        )\n        (Assign (list (Name &count:2 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:2 Store)\n          (Call\n            (Name g_range Load)\n            (list (BinOp (Name &n:2 Load) Sub (Name &r:2 Load)) (BinOp (Name &n:2 Load) Add (Constant i1 None)))\n            nil\n          )\n          (/seq (AugAssign (Name &count:2 Store) Mult (Name &i:2 Load)))\n          nil\n          None\n        )\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &r:2 Load) Add (Constant i1 None))) nil)\n          (/seq (AugAssign (Name &count:2 Store) FloorDiv (Name &i:2 Load)))\n          nil\n          None\n        )\n        (Return (Name &count:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &inf:0 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None)\n    (Assign (list (Name &adj:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_set Load)) nil) None)\n    (Assign (list (Name &visited:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None)\n    (FunctionDef\n      &addedge:0\n      (arguments nil (list (arg &a:3 None None) (arg &b:3 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call (Attribute (Subscript (Name &adj:0 Load) (Name &a:3 Load) Load) s_add Load) (list (Name &b:3 Load)) nil)\n        )\n        (Expr\n          (Call (Attribute (Subscript (Name &adj:0 Load) (Name &b:3 Load) Load) s_add Load) (list (Name &a:3 Load)) nil)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &bfs:0\n      (arguments nil (list (arg &v:4 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &q:4 Store)) (Call (Name g_Queue Load) nil nil) None)\n        (Expr (Call (Attribute (Name &q:4 Load) s_put Load) (list (Name &v:4 Load)) nil))\n        (Assign (list (Subscript (Name &visited:0 Load) (Name &v:4 Load) Store)) (Constant i1 None) None)\n        (While\n          (Compare (Call (Attribute (Name &q:4 Load) s_qsize Load) nil nil) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Assign (list (Name &s:4 Store)) (Call (Attribute (Name &q:4 Load) s_get_nowait Load) nil nil) None)\n            (Expr (Call (Name &print:0 Load) (list (Name &s:4 Load)) nil))\n            (For\n              (Name &i:4 Store)\n              (Subscript (Name &adj:0 Load) (Name &s:4 Load) Load)\n              (/seq\n                (If\n                  (Compare (Subscript (Name &visited:0 Load) (Name &i:4 Load) Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr (Call (Attribute (Name &q:4 Load) s_put Load) (list (Name &i:4 Load)) nil))\n                    (Assign (list (Subscript (Name &visited:0 Load) (Name &i:4 Load) Store)) (Constant i1 None) None)\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &dfs:0\n      (arguments nil (list (arg &v:5 None None) (arg &visited:5 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &visited:5 Load) (Name &v:5 Load) Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Return None))\n          nil\n        )\n        (Assign (list (Subscript (Name &visited:5 Load) (Name &v:5 Load) Store)) (Constant i1 None) None)\n        (Expr (Call (Name &print:0 Load) (list (Name &v:5 Load)) nil))\n        (For\n          (Name &i:5 Store)\n          (Subscript (Name &adj:0 Load) (Name &v:5 Load) Load)\n          (/seq (Expr (Call (Name &dfs:0 Load) (list (Name &i:5 Load) (Name &visited:5 Load)) nil)))\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &reverse_bisect_right:0\n      (arguments\n        nil\n        (list (arg &a:6 None None) (arg &x:6 None None) (arg &lo:6 None None) (arg &hi:6 None None))\n        None\n        nil\n        nil\n        None\n        (list (Constant i0 None) (Constant None None))\n      )\n      (/seq\n        (If\n          (Compare (Name &lo:6 Load) (list Lt) (list (Constant i0 None)))\n          (/seq\n            (Raise\n              (Call\n                (Name g_ValueError Load)\n                (list\n                  (Constant\n                    s-WzEwOCwgMTExLCAzMiwgMTA5LCAxMTcsIDExNSwgMTE2LCAzMiwgOTgsIDEwMSwgMzIsIDExMCwgMTExLCAxMTAsIDQ1LCAxMTAsIDEwMSwgMTAzLCA5NywgMTE2LCAxMDUsIDExOCwgMTAxXQ==\n                    None\n                  )\n                )\n                nil\n              )\n              None\n            )\n          )\n          nil\n        )\n        (If\n          (Compare (Name &hi:6 Load) (list Is) (list (Constant None None)))\n          (/seq (Assign (list (Name &hi:6 Store)) (Call (Name g_len Load) (list (Name &a:6 Load)) nil) None))\n          nil\n        )\n        (While\n          (Compare (Name &lo:6 Load) (list Lt) (list (Name &hi:6 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:6 Store))\n              (BinOp (BinOp (Name &lo:6 Load) Add (Name &hi:6 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (If\n              (Compare (Name &x:6 Load) (list Gt) (list (Subscript (Name &a:6 Load) (Name &mid:6 Load) Load)))\n              (/seq (Assign (list (Name &hi:6 Store)) (Name &mid:6 Load) None))\n              (/seq (Assign (list (Name &lo:6 Store)) (BinOp (Name &mid:6 Load) Add (Constant i1 None)) None))\n            )\n          )\n          nil\n        )\n        (Return (Name &lo:6 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &reverse_bisect_left:0\n      (arguments\n        nil\n        (list (arg &a:7 None None) (arg &x:7 None None) (arg &lo:7 None None) (arg &hi:7 None None))\n        None\n        nil\n        nil\n        None\n        (list (Constant i0 None) (Constant None None))\n      )\n      (/seq\n        (If\n          (Compare (Name &lo:7 Load) (list Lt) (list (Constant i0 None)))\n          (/seq\n            (Raise\n              (Call\n                (Name g_ValueError Load)\n                (list\n                  (Constant\n                    s-WzEwOCwgMTExLCAzMiwgMTA5LCAxMTcsIDExNSwgMTE2LCAzMiwgOTgsIDEwMSwgMzIsIDExMCwgMTExLCAxMTAsIDQ1LCAxMTAsIDEwMSwgMTAzLCA5NywgMTE2LCAxMDUsIDExOCwgMTAxXQ==\n                    None\n                  )\n                )\n                nil\n              )\n              None\n            )\n          )\n          nil\n        )\n        (If\n          (Compare (Name &hi:7 Load) (list Is) (list (Constant None None)))\n          (/seq (Assign (list (Name &hi:7 Store)) (Call (Name g_len Load) (list (Name &a:7 Load)) nil) None))\n          nil\n        )\n        (While\n          (Compare (Name &lo:7 Load) (list Lt) (list (Name &hi:7 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:7 Store))\n              (BinOp (BinOp (Name &lo:7 Load) Add (Name &hi:7 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (If\n              (Compare (Name &x:7 Load) (list GtE) (list (Subscript (Name &a:7 Load) (Name &mid:7 Load) Load)))\n              (/seq (Assign (list (Name &hi:7 Store)) (Name &mid:7 Load) None))\n              (/seq (Assign (list (Name &lo:7 Store)) (BinOp (Name &mid:7 Load) Add (Constant i1 None)) None))\n            )\n          )\n          nil\n        )\n        (Return (Name &lo:7 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &get_list:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &get_str_list_in_int:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (Name &i:19 Load)) nil)\n            (list\n              (comprehension\n                (Name &i:19 Store)\n                (Call (Name g_list Load) (list (Call (Name &input:0 Load) nil nil)) nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &get_str_list:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_list Load) (list (Call (Name &input:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &get_map:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &input_int:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &matrix:0\n      (arguments nil (list (arg &a:8 None None) (arg &b:8 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (ListComp\n              (Constant i0 None)\n              (list (comprehension (Name &i:21 Store) (Call (Name g_range Load) (list (Name &b:8 Load)) nil) nil i0))\n            )\n            (list (comprehension (Name &j:20 Store) (Call (Name g_range Load) (list (Name &a:8 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &swap:0\n      (arguments nil (list (arg &a:9 None None) (arg &b:9 None None)) None nil nil None nil)\n      (/seq (Return (Tuple (list (Name &b:9 Load) (Name &a:9 Load)) Load)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &find_gcd:0\n      (arguments nil (list (arg &l:10 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &a:10 Store)) (Subscript (Name &l:10 Load) (Constant i0 None) Load) None)\n        (For\n          (Name &i:10 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &l:10 Load)) nil)) nil)\n          (/seq\n            (Assign\n              (list (Name &a:10 Store))\n              (Call (Name g_gcd Load) (list (Name &a:10 Load) (Subscript (Name &l:10 Load) (Name &i:10 Load) Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &a:10 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &is_prime:0\n      (arguments nil (list (arg &n:11 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &sqrta:11 Store))\n          (Call (Name g_int Load) (list (Call (Name g_sqrt Load) (list (Name &n:11 Load)) nil)) nil)\n          None\n        )\n        (For\n          (Name &i:11 Store)\n          (Call (Name g_range Load) (list (Constant i2 None) (BinOp (Name &sqrta:11 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (If\n              (Compare (BinOp (Name &n:11 Load) Mod (Name &i:11 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq (Return (Constant i0 None)))\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (Constant i1 None))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &prime_factors:0\n      (arguments nil (list (arg &n:12 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (BinOp (Name &n:12 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Return\n              (BinOp\n                (List (list (Constant i2 None)) Load)\n                Add\n                (Call (Name &prime_factors:0 Load) (list (BinOp (Name &n:12 Load) FloorDiv (Constant i2 None))) nil)\n              )\n            )\n          )\n          nil\n        )\n        (Assign\n          (list (Name &sqrta:12 Store))\n          (Call (Name g_int Load) (list (Call (Name g_sqrt Load) (list (Name &n:12 Load)) nil)) nil)\n          None\n        )\n        (For\n          (Name &i:12 Store)\n          (Call\n            (Name g_range Load)\n            (list (Constant i3 None) (BinOp (Name &sqrta:12 Load) Add (Constant i1 None)) (Constant i2 None))\n            nil\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &n:12 Load) Mod (Name &i:12 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Return\n                  (BinOp\n                    (List (list (Name &i:12 Load)) Load)\n                    Add\n                    (Call (Name &prime_factors:0 Load) (list (BinOp (Name &n:12 Load) FloorDiv (Name &i:12 Load))) nil)\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (List (list (Name &n:12 Load)) Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &p:0\n      (arguments nil (list (arg &a:13 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Call (Name g_type Load) (list (Name &a:13 Load)) nil) (list Eq) (list (Name g_str Load)))\n          (/seq (Expr (Call (Name &print:0 Load) (list (BinOp (Name &a:13 Load) Add (Constant s-WzEwXQ== None))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name &print:0 Load)\n                (list (BinOp (Call (Name g_str Load) (list (Name &a:13 Load)) nil) Add (Constant s-WzEwXQ== None)))\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ps:0\n      (arguments nil (list (arg &a:14 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Call (Name g_type Load) (list (Name &a:14 Load)) nil) (list Eq) (list (Name g_str Load)))\n          (/seq (Expr (Call (Name &print:0 Load) (list (Name &a:14 Load)) nil)))\n          (/seq (Expr (Call (Name &print:0 Load) (list (Call (Name g_str Load) (list (Name &a:14 Load)) nil)) nil)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &kth_no_not_div_by_n:0\n      (arguments nil (list (arg &n:15 None None) (arg &k:15 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (Name &k:15 Load)\n            Add\n            (BinOp\n              (BinOp (Name &k:15 Load) Sub (Constant i1 None))\n              FloorDiv\n              (BinOp (Name &n:15 Load) Sub (Constant i1 None))\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &forward_array:0\n      (arguments nil (list (arg &l:16 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:16 Store)) (Call (Name g_len Load) (list (Name &l:16 Load)) nil) None)\n        (Assign (list (Name &stack:16 Store)) (List nil Load) None)\n        (Assign\n          (list (Name &forward:16 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:16 Load))\n          None\n        )\n        (For\n          (Name &i:16 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (BinOp (Call (Name g_len Load) (list (Name &l:16 Load)) nil) Sub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n            )\n            nil\n          )\n          (/seq\n            (While\n              (BoolOp\n                And\n                (list\n                  (Call (Name g_len Load) (list (Name &stack:16 Load)) nil)\n                  (Compare\n                    (Subscript\n                      (Name &l:16 Load)\n                      (Subscript (Name &stack:16 Load) (UnaryOp USub (Constant i1 None)) Load)\n                      Load\n                    )\n                    (list Lt)\n                    (list (Subscript (Name &l:16 Load) (Name &i:16 Load) Load))\n                  )\n                )\n              )\n              (/seq (Expr (Call (Attribute (Name &stack:16 Load) s_pop Load) nil nil)))\n              nil\n            )\n            (If\n              (Compare (Call (Name g_len Load) (list (Name &stack:16 Load)) nil) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Subscript (Name &forward:16 Load) (Name &i:16 Load) Store))\n                  (Call (Name g_len Load) (list (Name &l:16 Load)) nil)\n                  None\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Name &forward:16 Load) (Name &i:16 Load) Store))\n                  (Subscript (Name &stack:16 Load) (UnaryOp USub (Constant i1 None)) Load)\n                  None\n                )\n              )\n            )\n            (Expr (Call (Attribute (Name &stack:16 Load) s_append Load) (list (Name &i:16 Load)) nil))\n          )\n          nil\n          None\n        )\n        (Return (Name &forward:16 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &backward_array:0\n      (arguments nil (list (arg &l:17 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:17 Store)) (Call (Name g_len Load) (list (Name &l:17 Load)) nil) None)\n        (Assign (list (Name &stack:17 Store)) (List nil Load) None)\n        (Assign\n          (list (Name &backward:17 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:17 Load))\n          None\n        )\n        (For\n          (Name &i:17 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &l:17 Load)) nil)) nil)\n          (/seq\n            (While\n              (BoolOp\n                And\n                (list\n                  (Call (Name g_len Load) (list (Name &stack:17 Load)) nil)\n                  (Compare\n                    (Subscript\n                      (Name &l:17 Load)\n                      (Subscript (Name &stack:17 Load) (UnaryOp USub (Constant i1 None)) Load)\n                      Load\n                    )\n                    (list Lt)\n                    (list (Subscript (Name &l:17 Load) (Name &i:17 Load) Load))\n                  )\n                )\n              )\n              (/seq (Expr (Call (Attribute (Name &stack:17 Load) s_pop Load) nil nil)))\n              nil\n            )\n            (If\n              (Compare (Call (Name g_len Load) (list (Name &stack:17 Load)) nil) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Subscript (Name &backward:17 Load) (Name &i:17 Load) Store))\n                  (UnaryOp USub (Constant i1 None))\n                  None\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Name &backward:17 Load) (Name &i:17 Load) Store))\n                  (Subscript (Name &stack:17 Load) (UnaryOp USub (Constant i1 None)) Load)\n                  None\n                )\n              )\n            )\n            (Expr (Call (Attribute (Name &stack:17 Load) s_append Load) (list (Name &i:17 Load)) nil))\n          )\n          nil\n          None\n        )\n        (Return (Name &backward:17 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &nc:0 Store)) (Constant s_NO None) None)\n    (Assign (list (Name &yc:0 Store)) (Constant s_YES None) None)\n    (Assign (list (Name &ns:0 Store)) (Constant s_No None) None)\n    (Assign (list (Name &ys:0 Store)) (Constant s_Yes None) None)\n    (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None)\n    (Assign (list (Name &print:0 Store)) (Attribute (Name g_stdout Load) s_write Load) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp\n        (Call (Name g_int Load) (list (Call (Name g_pow Load) (list (Constant i10 None) (Constant i9 None)) nil)) nil)\n        Add\n        (Constant i7 None)\n      )\n      None\n    )\n    (Assign\n      (list (Name &dict:0 Store))\n      (BinOp\n        (List (list (Constant i1 None)) Load)\n        Mult\n        (BinOp\n          (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n          Add\n          (Constant i10 None)\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (Constant i10 None)) nil)\n      (/seq (Assign (list (Subscript (Name &dict:0 Load) (Name &i:0 Load) Store)) (Constant i2 None) None))\n      nil\n      None\n    )\n    (Assign (list (Subscript (Name &dict:0 Load) (Constant i10 None) Store)) (Constant i3 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (Constant i11 None)\n          (BinOp\n            (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n            Add\n            (Constant i10 None)\n          )\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &dict:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (Subscript (Name &dict:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n            Add\n            (Subscript (Name &dict:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &dict:0 Load) (Name &i:0 Load) Store) Mod (Name &mod:0 Load))\n      )\n      nil\n      None\n    )\n    (FunctionDef\n      &ret:0\n      (arguments nil (list (arg &n:18 None None) (arg &k:18 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare\n            (BinOp (BinOp (Name &k:18 Load) Sub (Constant i9 None)) Add (Name &n:18 Load))\n            (list Lt)\n            (list (Constant i0 None))\n          )\n          (/seq (Return (Constant i1 None)))\n          nil\n        )\n        (Return\n          (Subscript\n            (Name &dict:0 Load)\n            (BinOp (BinOp (Name &k:18 Load) Sub (Constant i9 None)) Add (Name &n:18 Load))\n            Load\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &k:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &suma:0 Store)) (Constant i0 None) None)\n        (While\n          (Name &n:0 Load)\n          (/seq\n            (Assign\n              (list (Name &suma:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &suma:0 Load)\n                  Add\n                  (Call (Name &ret:0 Load) (list (BinOp (Name &n:0 Load) Mod (Constant i10 None)) (Name &k:0 Load)) nil)\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n              None\n            )\n            (AugAssign (Name &n:0 Store) FloorDiv (Constant i10 None))\n          )\n          nil\n        )\n        (Expr\n          (Call\n            (Name &print:0 Load)\n            (list (BinOp (Call (Name g_str Load) (list (Name &suma:0 Load)) nil) Add (Constant s-WzEwXQ== None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &solve_tc:0\n      (arguments nil (list (arg &dp:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &mod:1 Store)) (Constant i1000000007 None) None)\n        (Assign\n          (list (Tuple (list (Name &n:1 Store) (Name &m:1 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &cnt:1 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &n:1 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &x:1 Store))\n              (Call (Name g_int Load) (list (BinOp (Name &n:1 Load) Mod (Constant i10 None))) nil)\n              None\n            )\n            (If\n              (Compare (BinOp (Name &m:1 Load) Add (Name &x:1 Load)) (list Lt) (list (Constant i10 None)))\n              (/seq (AugAssign (Name &cnt:1 Store) Add (Constant i1 None)))\n              (/seq\n                (AugAssign\n                  (Name &cnt:1 Store)\n                  Add\n                  (Subscript\n                    (Name &dp:1 Load)\n                    (BinOp (BinOp (Name &m:1 Load) Add (Name &x:1 Load)) Sub (Constant i10 None))\n                    Load\n                  )\n                )\n              )\n            )\n            (Assign\n              (list (Name &cnt:1 Store))\n              (Call (Name g_int Load) (list (BinOp (Name &cnt:1 Load) Mod (Name &mod:1 Load))) nil)\n              None\n            )\n            (AugAssign (Name &n:1 Store) FloorDiv (Constant i10 None))\n          )\n          nil\n        )\n        (Return (Call (Name g_str Load) (list (Name &cnt:1 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &dp_maker:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &max_n:2 Store)) (Constant i200005 None) None)\n        (Assign (list (Name &mod:2 Store)) (Constant i1000000007 None) None)\n        (Assign (list (Name &dp:2 Store)) (Dict nil nil) None)\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (Constant i10 None)) nil)\n          (/seq (Assign (list (Subscript (Name &dp:2 Load) (Name &i:2 Load) Store)) (Constant i2 None) None))\n          nil\n          None\n        )\n        (Assign (list (Subscript (Name &dp:2 Load) (Constant i9 None) Store)) (Constant i3 None) None)\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (Constant i10 None) (Name &max_n:2 Load)) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &dp:2 Load) (Name &i:2 Load) Store))\n              (BinOp\n                (BinOp\n                  (Subscript (Name &dp:2 Load) (BinOp (Name &i:2 Load) Sub (Constant i9 None)) Load)\n                  Add\n                  (Subscript (Name &dp:2 Load) (BinOp (Name &i:2 Load) Sub (Constant i10 None)) Load)\n                )\n                Mod\n                (Name &mod:2 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &dp:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &dp:0 Store)) (Call (Name &dp_maker:0 Load) nil nil) None)\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (While\n      (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n        (Expr\n          (Call\n            (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n            (list (Call (Name &solve_tc:0 Load) (list (Name &dp:0 Load)) nil))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n            (list (Constant s-WzEwXQ== None))\n            nil\n          )\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (FunctionDef\n      &inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n              s_rstrip\n              Load\n            )\n            nil\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &p:0 Store)) (Constant i1000000007 None) None)\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name &inp:0 Load) nil nil)) nil) None)\n    (Assign (list (Name &rec:0 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Constant i200010 None)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None)) nil)\n      (/seq (Assign (list (Subscript (Name &rec:0 Load) (Name &i:0 Load) Store)) (Constant i1 None) None))\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Constant i200010 None)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &rec:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &rec:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &rec:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (Name &p:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &z:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Name &m:0 Load)) nil) None)\n        (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &c:0 Store)\n          (Name &n:0 Load)\n          (/seq\n            (Assign\n              (list (Name &res:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &res:0 Load)\n                  Add\n                  (Subscript\n                    (Name &rec:0 Load)\n                    (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &c:0 Load)) nil))\n                    Load\n                  )\n                )\n                Mod\n                (Name &p:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCAxMTcsIDExNSwgMTAxLCAxMDIsIDExNywgMTA4LCAxMDgsIDMyLCAxMTUsIDExMCwgMTA1LCAxMTIsIDExMiwgMTAxLCAxMTYsIDExNSwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNDUsIDMyLCAxMDksIDk3LCAxMTIsIDQwLCAxMDUsIDExMCwgMTE2LCA0NCwgMzIsIDEwNSwgMTEwLCAxMTIsIDExNywgMTE2LCA0MCwgNDEsIDQ2LCAxMTUsIDExMiwgMTA4LCAxMDUsIDExNiwgNDAsIDQxLCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCA0NSwgMzIsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAzMiwgMTE1LCAxMjEsIDExNSwgNDYsIDExNSwgMTE2LCAxMDAsIDEwNSwgMTEwLCA0NiwgMTE0LCAxMDEsIDk3LCAxMDAsIDEwOCwgMTA1LCAxMTAsIDEwMSwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDQ1LCAzMiwgMTA1LCAxMTAsIDExNiwgNDAsIDEwNSwgMTEwLCAxMTIsIDExNywgMTE2LCA0MCwgNDEsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDQ1LCAzMiwgMTA1LCAxMTAsIDExNiwgNDAsIDExNSwgMTIxLCAxMTUsIDQ2LCAxMTUsIDExNiwgMTAwLCAxMDUsIDExMCwgNDYsIDExNCwgMTAxLCA5NywgMTAwLCAxMDgsIDEwNSwgMTEwLCAxMDEsIDQwLCA0MSwgNDYsIDExNSwgMTE2LCAxMTQsIDEwNSwgMTEyLCA0MCwgNDEsIDQxLCAxMCwgMTAsIDMyLCAzMiwgMzIsIDMyLCA0NSwgMzIsIDExNSwgMTIxLCAxMTUsIDQ2LCAxMTUsIDExNiwgMTAwLCAxMTEsIDExNywgMTE2LCA0NiwgMTE5LCAxMTQsIDEwNSwgMTE2LCAxMDEsIDQwLCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCA0NSwgMzIsIDExNSwgMTIxLCAxMTUsIDQ2LCAxMTUsIDExNiwgMTAwLCAxMTEsIDExNywgMTE2LCA0NiwgMTE5LCAxMTQsIDEwNSwgMTE2LCAxMDEsIDQwLCAzNCwgMzIsIDM0LCA0NiwgMTA2LCAxMTEsIDEwNSwgMTEwLCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTE1LCAxMTYsIDExNCwgNDQsIDMyLCA5OSwgNDEsIDMyLCAzNSwgMzIsIDExOSwgMTE0LCAxMDUsIDExNiwgMTAxLCAxMTUsIDMyLCA5OSwgMzIsIDQ1LCAzMiwgOTksIDExMSwgMTA4LCAxMDgsIDEwMSwgOTksIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExMSwgMTAyLCAzMiwgMTA1LCAxMTAsIDExNiwgMTE1LCAxMF0=\n        None\n      )\n    )\n    (Import (list (alias &sys:0 None)))\n    (ImportFrom s_collections (list (alias &defaultdict:0 None)) i0)\n    (ImportFrom s_bisect (list (alias &bisect_left:0 None) (alias &bisect_right:0 None)) i0)\n    (Import (list (alias &decimal:0 None)))\n    (FunctionDef\n      &get_ints:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute\n                  (Call\n                    (Attribute\n                      (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil)\n                      s_strip\n                      Load\n                    )\n                    nil\n                    nil\n                  )\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &t:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign (list (Name &f:1 Store)) (List nil Load) None)\n        (Assign\n          (list (Name &MOD:1 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (BinOp\n                (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n                Add\n                (Constant i11 None)\n              )\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &i:1 Load) (list Lt) (list (Constant i10 None)))\n              (/seq (Expr (Call (Attribute (Name &f:1 Load) s_append Load) (list (Constant i1 None)) nil)))\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &f:1 Load) s_append Load)\n                    (list\n                      (BinOp\n                        (BinOp\n                          (Subscript (Name &f:1 Load) (BinOp (Name &i:1 Load) Sub (Constant i9 None)) Load)\n                          Add\n                          (Subscript (Name &f:1 Load) (BinOp (Name &i:1 Load) Sub (Constant i10 None)) Load)\n                        )\n                        Mod\n                        (Name &MOD:1 Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &_:1 Store)\n          (Call (Name g_range Load) (list (Name &t:1 Load)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &n:1 Store) (Name &m:1 Store)) Store))\n              (Call (Name &get_ints:0 Load) nil nil)\n              None\n            )\n            (Assign (list (Name &ans:1 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &n:1 Load) (list NotEq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &ans:1 Store))\n                  (BinOp\n                    (BinOp\n                      (Name &ans:1 Load)\n                      Add\n                      (Subscript\n                        (Name &f:1 Load)\n                        (BinOp (BinOp (Name &n:1 Load) Mod (Constant i10 None)) Add (Name &m:1 Load))\n                        Load\n                      )\n                    )\n                    Mod\n                    (Name &MOD:1 Load)\n                  )\n                  None\n                )\n                (AugAssign (Name &n:1 Store) FloorDiv (Constant i10 None))\n              )\n              nil\n            )\n            (Expr (Call (Name g_print Load) (list (Name &ans:1 Load)) nil))\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &file:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:3 Load) s__fd Store))\n              (Call (Attribute (Name &file:3 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:3 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:3 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:3 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:3 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:3 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:4 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:4 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:4 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:4 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:4 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:4 Store))\n                  (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:4 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:4 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:4 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:5 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:5 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:5 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:5 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:5 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:5 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:5 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:5 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:5 Store))\n                  (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:5 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:5 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:5 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:6 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:6 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:6 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:7 None None) (arg &file:7 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:7 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:9 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:9 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &max_n:0 Store))\n      (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None)))\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:8 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &max_n:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Subscript (Name &dp:0 Load) (Constant i9 None) Store)) (Constant i1 None) None)\n    (Assign (list (Subscript (Name &dp:0 Load) (Constant i10 None) Store)) (Constant i2 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i11 None) (BinOp (Name &max_n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (BinOp\n                (Constant i2 None)\n                Add\n                (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              )\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (Name &mod:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (ImportFrom s_collections (list (alias &Counter:0 None)) i0)\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Name &m:0 Load)) nil) None)\n        (Assign (list (Name &c:0 Store)) (Call (Name &Counter:0 Load) (list (Name &n:0 Load)) nil) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Name &c:0 Load)\n          (/seq\n            (Assign (list (Name &j:0 Store)) (Call (Name g_int Load) (list (Name &i:0 Load)) nil) None)\n            (If\n              (Compare (BinOp (Constant i10 None) Sub (Name &j:0 Load)) (list Gt) (list (Name &m:0 Load)))\n              (/seq (AugAssign (Name &ans:0 Store) Add (Subscript (Name &c:0 Load) (Name &i:0 Load) Load)) Continue)\n              nil\n            )\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (BinOp\n                    (Subscript (Name &c:0 Load) (Name &i:0 Load) Load)\n                    Mult\n                    (BinOp\n                      (Constant i2 None)\n                      Add\n                      (Subscript\n                        (Name &dp:0 Load)\n                        (BinOp (BinOp (Name &m:0 Load) Add (Name &j:0 Load)) Sub (Constant i10 None))\n                        Load\n                      )\n                    )\n                  )\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (Assign (list (Name &s:0 Store)) (Constant s_0 None) None)\n    (Assign (list (Name &curr:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &check:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &dp:0 Store)) (List (list (Constant i1 None)) Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i100 None)) nil)\n      (/seq\n        (Assign (list (Name &fin:0 Store)) (Constant s_ None) None)\n        (For\n          (Name &i:0 Store)\n          (Name &s:0 Load)\n          (/seq\n            (Assign (list (Name &num:0 Store)) (Call (Name g_int Load) (list (Name &i:0 Load)) nil) None)\n            (AugAssign (Name &num:0 Store) Add (Constant i1 None))\n            (Assign (list (Name &num:0 Store)) (Call (Name g_str Load) (list (Name &num:0 Load)) nil) None)\n            (Assign (list (Name &fin:0 Store)) (BinOp (Name &fin:0 Load) Add (Name &num:0 Load)) None)\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &dp:0 Load) s_append Load)\n            (list (Call (Name g_len Load) (list (Name &fin:0 Load)) nil))\n            nil\n          )\n        )\n        (Assign (list (Name &s:0 Store)) (Name &fin:0 Load) None)\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &tog:0 Store)) (Constant i101 None) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None))))\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &num:0 Store))\n          (BinOp\n            (BinOp\n              (BinOp\n                (Subscript (Name &dp:0 Load) (BinOp (Name &tog:0 Load) Sub (Constant i1 None)) Load)\n                Add\n                (Subscript (Name &dp:0 Load) (BinOp (Name &tog:0 Load) Sub (Constant i9 None)) Load)\n              )\n              Sub\n              (Subscript (Name &dp:0 Load) (BinOp (Name &tog:0 Load) Sub (Constant i11 None)) Load)\n            )\n            Mod\n            (Name &mod:0 Load)\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &dp:0 Load) s_append Load) (list (Name &num:0 Load)) nil))\n        (AugAssign (Name &tog:0 Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store) (Name &t:0 Store))\n      (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil)\n      None\n    )\n    (For\n      (Name &test:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Assign (list (Name &temp:0 Store)) (BinOp (Name &n:0 Load) Mod (Constant i10 None)) None)\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript (Name &dp:0 Load) (BinOp (Name &temp:0 Load) Add (Name &m:0 Load)) Load)\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n              None\n            )\n            (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i10 None)) None)\n          )\n          nil\n        )\n        (Expr\n          (Call\n            (Attribute (Name g_stdout Load) s_write Load)\n            (list (BinOp (Call (Name g_str Load) (list (Name &ans:0 Load)) nil) Add (Constant s-WzEwXQ== None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None) (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &file:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:3 Load) s__fd Store))\n              (Call (Attribute (Name &file:3 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:3 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:3 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:3 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:3 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:3 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:4 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:4 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:4 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:4 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:4 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:4 Store))\n                  (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:4 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:4 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:4 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:5 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:5 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:5 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:5 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:5 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:5 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:5 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:5 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:5 Store))\n                  (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:5 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:5 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:5 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:6 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:6 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:6 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:7 None None) (arg &file:7 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:7 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:8 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:8 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (Assign (list (Name &dp:0 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Constant i200011 None)) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Constant i200011 None)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n            )\n            Mod\n            (Name &mod:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_str Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &i:0 Load)) nil))\n                    Load\n                  )\n                )\n                Mod\n                (Name &mod:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &file:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:3 Load) s__fd Store))\n              (Call (Attribute (Name &file:3 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:3 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:3 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:3 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:3 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:3 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:4 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:4 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:4 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:4 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:4 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:4 Store))\n                  (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:4 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:4 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:4 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:5 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:5 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:5 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:5 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:5 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:5 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:5 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:5 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:5 Store))\n                  (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:5 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:5 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:5 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:6 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:6 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:6 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:7 None None) (arg &file:7 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:7 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:10 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:10 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i10 None))\n        (list (comprehension (Name &i:8 Store) (Call (Name g_range Load) (list (Constant i20001 None)) nil) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Subscript (Subscript (Name &dp:0 Load) (Constant i0 None) Load) (Constant i0 None) Store))\n      (Constant i1 None)\n      None\n    )\n    (Assign\n      (list (Subscript (Subscript (Name &dp:0 Load) (Constant i0 None) Load) (Constant i1 None) Store))\n      (Constant i1 None)\n      None\n    )\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &dp1:0 Store))\n      (ListComp\n        (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i10 None))\n        (list (comprehension (Name &i:9 Store) (Call (Name g_range Load) (list (Constant i20001 None)) nil) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Subscript (Subscript (Name &dp1:0 Load) (Constant i0 None) Load) (Constant i0 None) Store))\n      (Constant i2 None)\n      None\n    )\n    (Assign\n      (list (Subscript (Subscript (Name &dp1:0 Load) (Constant i0 None) Load) (Constant i1 None) Store))\n      (Constant i1 None)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (Constant i20001 None)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Store))\n          (BinOp\n            (Subscript\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n              (Constant i9 None)\n              Load\n            )\n            Add\n            (Subscript\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n              (Constant i0 None)\n              Load\n            )\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Store)\n          Add\n          (Subscript\n            (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n            (Constant i9 None)\n            Load\n          )\n        )\n        (AugAssign\n          (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Store)\n          Mod\n          (Name &mod:0 Load)\n        )\n        (AugAssign\n          (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Store)\n          Mod\n          (Name &mod:0 Load)\n        )\n        (For\n          (Name &j:0 Store)\n          (Call (Name g_range Load) (list (Constant i9 None) (Constant i0 None) (UnaryOp USub (Constant i1 None))) nil)\n          (/seq\n            (AugAssign\n              (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Store)\n              Add\n              (BinOp\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                  (BinOp (Name &j:0 Load) Sub (Constant i1 None))\n                  Load\n                )\n                Add\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                  (Name &j:0 Load)\n                  Load\n                )\n              )\n            )\n            (AugAssign\n              (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Store)\n              Mod\n              (Name &mod:0 Load)\n            )\n            (If\n              (Compare (Name &j:0 Load) (list Eq) (list (Constant i9 None)))\n              (/seq\n                (Assign\n                  (list (Subscript (Subscript (Name &dp1:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Store))\n                  (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Load)\n                  None\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Subscript (Name &dp1:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Store))\n                  (BinOp\n                    (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Load)\n                    Add\n                    (Subscript\n                      (Subscript (Name &dp1:0 Load) (Name &i:0 Load) Load)\n                      (BinOp (Name &j:0 Load) Add (Constant i1 None))\n                      Load\n                    )\n                  )\n                  None\n                )\n              )\n            )\n            (AugAssign\n              (Subscript (Subscript (Name &dp1:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Store)\n              Mod\n              (Name &mod:0 Load)\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list (Subscript (Subscript (Name &dp1:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Store))\n          (BinOp\n            (Subscript (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n            Add\n            (Subscript (Subscript (Name &dp1:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Subscript (Name &dp1:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Store)\n          Mod\n          (Name &mod:0 Load)\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &t:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &n:0 Store)) (Call (Name g_str Load) (list (Name &n:0 Load)) nil) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Name &n:0 Load)\n          (/seq\n            (If\n              (Compare\n                (BinOp (Constant i10 None) Sub (Call (Name g_int Load) (list (Name &i:0 Load)) nil))\n                (list Gt)\n                (list (Name &m:0 Load))\n              )\n              (/seq (AugAssign (Name &ans:0 Store) Add (Constant i1 None)))\n              (/seq\n                (Assign\n                  (list (Name &a:0 Store))\n                  (BinOp\n                    (BinOp (Name &m:0 Load) Sub (Constant i10 None))\n                    Add\n                    (Call (Name g_int Load) (list (Name &i:0 Load)) nil)\n                  )\n                  None\n                )\n                (Assign (list (Name &b:0 Store)) (BinOp (Name &a:0 Load) FloorDiv (Constant i10 None)) None)\n                (Assign (list (Name &c:0 Store)) (BinOp (Name &a:0 Load) Mod (Constant i10 None)) None)\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Add\n                  (Subscript (Subscript (Name &dp1:0 Load) (Name &b:0 Load) Load) (Constant i0 None) Load)\n                )\n                (AugAssign (Name &ans:0 Store) Mod (Name &mod:0 Load))\n                (If\n                  (Name &c:0 Load)\n                  (/seq\n                    (Assign (list (Name &j:0 Store)) (BinOp (Constant i10 None) Sub (Name &c:0 Load)) None)\n                    (AugAssign\n                      (Name &ans:0 Store)\n                      Add\n                      (Subscript (Subscript (Name &dp1:0 Load) (Name &b:0 Load) Load) (Name &j:0 Load) Load)\n                    )\n                    (AugAssign (Name &ans:0 Store) Mod (Name &mod:0 Load))\n                  )\n                  nil\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (BinOp (Name &ans:0 Load) Mod (Name &mod:0 Load))) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None) (alias g_os None) (alias g_io None)))\n    (Import (list (alias g_math None) (alias g_bisect None) (alias g_operator None)))\n    (Assign\n      (list (Tuple (list (Name &inf:0 Store) (Name &mod:0 Store)) Store))\n      (Tuple\n        (list\n          (Call (Name g_float Load) (list (Constant s_inf None)) nil)\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n        )\n        Load\n      )\n      None\n    )\n    (ImportFrom s_itertools (list (alias &groupby:0 None) (alias &accumulate:0 None)) i0)\n    (ImportFrom s_heapq (list (alias &heapify:0 None) (alias &heappop:0 None) (alias &heappush:0 None)) i0)\n    (ImportFrom s_collections (list (alias &deque:0 None) (alias &Counter:0 None) (alias &defaultdict:0 None)) i0)\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute\n        (Call\n          (Name g_iter Load)\n          (list\n            (Call\n              (Attribute\n                (Call\n                  (Attribute\n                    (Call\n                      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_read Load)\n                      nil\n                      nil\n                    )\n                    s_decode\n                    Load\n                  )\n                  nil\n                  nil\n                )\n                s_splitlines\n                Load\n              )\n              nil\n              nil\n            )\n          )\n          nil\n        )\n        s___next__\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &Neo:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_list Load)\n          (list\n            (Call\n              (Name g_map Load)\n              (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n              nil\n            )\n          )\n          nil\n        )\n      )\n      None\n    )\n    (Assign (list (Tuple (list (Name &test:0 Store)) Store)) (Call (Name &Neo:0 Load) nil nil) None)\n    (Assign (list (Name &dp:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i200011 None)) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (Constant i10 None)))\n          (/seq (Expr (Call (Attribute (Name &dp:0 Load) s_append Load) (list (Constant i1 None)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &dp:0 Load) s_append Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n                      Add\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n                    )\n                    Mod\n                    (Name &M:0 Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &test:0 Load)) nil)\n      (/seq\n        (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (Call (Name &Neo:0 Load) nil nil) None)\n        (Assign (list (Name &n:0 Store)) (Call (Name g_str Load) (list (Name &n:0 Load)) nil) None)\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Name &n:0 Load)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp\n                (BinOp\n                  (Name &ans:0 Load)\n                  Add\n                  (Subscript\n                    (Name &dp:0 Load)\n                    (BinOp (Name &m:0 Load) Add (Call (Name g_int Load) (list (Name &i:0 Load)) nil))\n                    Load\n                  )\n                )\n                Mod\n                (Name &M:0 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &MOD:0 Store)) (BinOp (Constant f1000000000.0 None) Add (Constant i7 None)) None)\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign (list (Name &x:0 Store)) (Constant i1 None) None)\n    (Assign\n      (list (Name &m:0 Store))\n      (Call\n        (Name g_int Load)\n        (list (BinOp (BinOp (Constant i2 None) Mult (Constant f100000.0 None)) Add (Constant i10 None)))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (Constant i1 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &dp:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n              Add\n              (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n            )\n            Mod\n            (Name &MOD:0 Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &k:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &sums:0 Store)) (Constant i0 None) None)\n        (While\n          (Name &n:0 Load)\n          (/seq\n            (Assign\n              (list (Name &sums:0 Store))\n              (BinOp\n                (Name &sums:0 Load)\n                Add\n                (Subscript\n                  (Name &dp:0 Load)\n                  (BinOp (Name &k:0 Load) Add (BinOp (Name &n:0 Load) Mod (Constant i10 None)))\n                  Load\n                )\n              )\n              None\n            )\n            (Assign (list (Name &n:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i10 None)) None)\n            (AugAssign (Name &sums:0 Store) Mod (Name &MOD:0 Load))\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &sums:0 Load)) nil)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &d:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list (comprehension (Name &x:1 Store) (Call (Name g_range Load) (list (Constant i200001 None)) nil) nil i0))\n      )\n      None\n    )\n    (Assign (list (Subscript (Name &d:0 Load) (Constant i0 None) Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (Constant i10 None)) nil)\n      (/seq (Assign (list (Subscript (Name &d:0 Load) (Name &i:0 Load) Store)) (Constant i2 None) None))\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i10 None) (Constant i200001 None)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &d:0 Load) (Name &i:0 Load) Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &d:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i10 None)) Load)\n              Add\n              (Subscript (Name &d:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i9 None)) Load)\n            )\n            Mod\n            (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_list Load) (list (Call (Name g_str Load) (list (Name &n:0 Load)) nil)) nil)\n          None\n        )\n        (Assign\n          (list (Name &count:0 Store))\n          (ListComp\n            (Constant i0 None)\n            (list (comprehension (Name &x:2 Store) (Call (Name g_range Load) (list (Constant i10 None)) nil) nil i0))\n          )\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Name &n:0 Load)\n          (/seq\n            (AugAssign\n              (Subscript (Name &count:0 Load) (Call (Name g_int Load) (list (Name &i:0 Load)) nil) Store)\n              Add\n              (Constant i1 None)\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Constant i10 None)) nil)\n          (/seq\n            (Assign\n              (list (Name &temp:0 Store))\n              (BinOp (Name &m:0 Load) Sub (BinOp (Constant i9 None) Sub (Name &i:0 Load)))\n              None\n            )\n            (If\n              (Compare (Name &temp:0 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &ans:0 Store)\n                  Add\n                  (BinOp\n                    (Subscript (Name &d:0 Load) (Name &temp:0 Load) Load)\n                    Mult\n                    (Subscript (Name &count:0 Load) (Name &i:0 Load) Load)\n                  )\n                )\n              )\n              (/seq (AugAssign (Name &ans:0 Store) Add (Subscript (Name &count:0 Load) (Name &i:0 Load) Load)))\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (BinOp\n                (Name &ans:0 Load)\n                Mod\n                (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)"]