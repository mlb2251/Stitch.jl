["(Module\n  (/seq\n    (Assign\n      (list (Name &inn:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &r1:0 Store)) (Subscript (Name &inn:0 Load) (_slice_content (Constant i0 None)) Load) None)\n    (Assign (list (Name &r2:0 Store)) (Subscript (Name &inn:0 Load) (_slice_content (Constant i1 None)) Load) None)\n    (Assign\n      (list (Name &inn:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &c1:0 Store)) (Subscript (Name &inn:0 Load) (_slice_content (Constant i0 None)) Load) None)\n    (Assign (list (Name &c2:0 Store)) (Subscript (Name &inn:0 Load) (_slice_content (Constant i1 None)) Load) None)\n    (Assign\n      (list (Name &inn:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                    (list (_starred_content (Constant s-WzMyXQ== None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &d1:0 Store)) (Subscript (Name &inn:0 Load) (_slice_content (Constant i0 None)) Load) None)\n    (Assign (list (Name &d2:0 Store)) (Subscript (Name &inn:0 Load) (_slice_content (Constant i1 None)) Load) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_int Load)\n        (list\n          (_starred_content\n            (BinOp (BinOp (BinOp (Name &d1:0 Load) Add (Name &c1:0 Load)) Sub (Name &r2:0 Load)) Div (Constant i2 None))\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &y:0 Store))\n      (Call\n        (Name g_int Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp\n                (BinOp\n                  (BinOp (BinOp (Constant i2 None) Mult (Name &r1:0 Load)) Sub (Name &d1:0 Load))\n                  Sub\n                  (Name &c1:0 Load)\n                )\n                Add\n                (Name &r2:0 Load)\n              )\n              Div\n              (Constant i2 None)\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_int Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp\n                (BinOp\n                  (BinOp (BinOp (Constant i2 None) Mult (Name &c1:0 Load)) Sub (Name &d1:0 Load))\n                  Sub\n                  (Name &c1:0 Load)\n                )\n                Add\n                (Name &r2:0 Load)\n              )\n              Div\n              (Constant i2 None)\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_int Load)\n        (list\n          (_starred_content\n            (BinOp\n              (BinOp\n                (BinOp\n                  (BinOp (Name &r2:0 Load) Sub (BinOp (Constant i2 None) Mult (Name &c1:0 Load)))\n                  Add\n                  (Name &d1:0 Load)\n                )\n                Add\n                (Name &c1:0 Load)\n              )\n              Div\n              (Constant i2 None)\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare (Name &x:0 Load) (list Eq) (list (Name &y:0 Load)))\n          (Compare (Name &x:0 Load) (list Eq) (list (Name &a:0 Load)))\n          (Compare (Name &x:0 Load) (list Eq) (list (Name &b:0 Load)))\n          (Compare (Name &y:0 Load) (list Eq) (list (Name &a:0 Load)))\n          (Compare (Name &y:0 Load) (list Eq) (list (Name &b:0 Load)))\n          (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))\n          (Compare (Name &x:0 Load) (list Lt) (list (Constant i1 None)))\n          (Compare (Name &x:0 Load) (list Gt) (list (Constant i9 None)))\n          (Compare (Name &y:0 Load) (list Lt) (list (Constant i1 None)))\n          (Compare (Name &y:0 Load) (list Gt) (list (Constant i9 None)))\n          (Compare (Name &a:0 Load) (list Lt) (list (Constant i1 None)))\n          (Compare (Name &a:0 Load) (list Gt) (list (Constant i9 None)))\n          (Compare (Name &b:0 Load) (list Lt) (list (Constant i1 None)))\n          (Compare (Name &b:0 Load) (list Gt) (list (Constant i9 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) nil)\n        )\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil)\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &is_magic_square:0\n      (arguments\n        nil\n        (list\n          (arg &a:1 None None)\n          (arg &b:1 None None)\n          (arg &c:1 None None)\n          (arg &d:1 None None)\n          (arg &r1:1 None None)\n          (arg &r2:1 None None)\n          (arg &c1:1 None None)\n          (arg &c2:1 None None)\n          (arg &d1:1 None None)\n          (arg &d2:1 None None)\n        )\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Return\n          (BoolOp\n            And\n            (list\n              (Compare (BinOp (Name &a:1 Load) Add (Name &b:1 Load)) (list Eq) (list (Name &r1:1 Load)))\n              (Compare (BinOp (Name &c:1 Load) Add (Name &d:1 Load)) (list Eq) (list (Name &r2:1 Load)))\n              (Compare (BinOp (Name &a:1 Load) Add (Name &c:1 Load)) (list Eq) (list (Name &c1:1 Load)))\n              (Compare (BinOp (Name &b:1 Load) Add (Name &d:1 Load)) (list Eq) (list (Name &c2:1 Load)))\n              (Compare (BinOp (Name &a:1 Load) Add (Name &d:1 Load)) (list Eq) (list (Name &d1:1 Load)))\n              (Compare (BinOp (Name &b:1 Load) Add (Name &c:1 Load)) (list Eq) (list (Name &d2:1 Load)))\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &r1:0 Store)) (_starred_content (Name &r2:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &c1:0 Store)) (_starred_content (Name &c2:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:3 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:3 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &d1:0 Store)) (_starred_content (Name &d2:0 Store))) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &i:4 Load))) nil)\n        (list\n          (comprehension\n            (Name &i:4 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &flag:0 Store)) (Constant False None) None)\n    (For\n      (Name &a:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None))) nil)\n      (/seq\n        (For\n          (Name &b:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n            nil\n          )\n          (/seq\n            (For\n              (Name &c:0 Store)\n              (Call\n                (Name g_range Load)\n                (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n                nil\n              )\n              (/seq\n                (For\n                  (Name &d:0 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n                    nil\n                  )\n                  (/seq\n                    (If\n                      (BoolOp\n                        Or\n                        (list\n                          (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))\n                          (Compare (Name &a:0 Load) (list Eq) (list (Name &c:0 Load)))\n                          (Compare (Name &a:0 Load) (list Eq) (list (Name &d:0 Load)))\n                          (Compare (Name &b:0 Load) (list Eq) (list (Name &c:0 Load)))\n                          (Compare (Name &b:0 Load) (list Eq) (list (Name &d:0 Load)))\n                          (Compare (Name &c:0 Load) (list Eq) (list (Name &d:0 Load)))\n                        )\n                      )\n                      (/seq Continue)\n                      (/seq)\n                    )\n                    (If\n                      (Call\n                        (Name &is_magic_square:0 Load)\n                        (list\n                          (_starred_content (Name &a:0 Load))\n                          (_starred_content (Name &b:0 Load))\n                          (_starred_content (Name &c:0 Load))\n                          (_starred_content (Name &d:0 Load))\n                          (_starred_content (Name &r1:0 Load))\n                          (_starred_content (Name &r2:0 Load))\n                          (_starred_content (Name &c1:0 Load))\n                          (_starred_content (Name &c2:0 Load))\n                          (_starred_content (Name &d1:0 Load))\n                          (_starred_content (Name &d2:0 Load))\n                        )\n                        nil\n                      )\n                      (/seq\n                        (Assign (list (Name &flag:0 Store)) (Constant True None) None)\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load)))\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &d:0 Load)))\n                            nil\n                          )\n                        )\n                        Break\n                      )\n                      (/seq)\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n                (If (Name &flag:0 Load) (/seq Break) (/seq))\n              )\n              (/seq)\n              None\n            )\n            (If (Name &flag:0 Load) (/seq Break) (/seq))\n          )\n          (/seq)\n          None\n        )\n        (If (Name &flag:0 Load) (/seq Break) (/seq))\n      )\n      (/seq)\n      None\n    )\n    (If\n      (UnaryOp Not (Name &flag:0 Load))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq)\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &r1:0 Store)) (_starred_content (Name &r2:0 Store))) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_rstrip Load) nil nil) s_split Load)\n                    nil\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &c1:0 Store)) (_starred_content (Name &c2:0 Store))) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_rstrip Load) nil nil) s_split Load)\n                    nil\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &d1:0 Store)) (_starred_content (Name &d2:0 Store))) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name g_map Load)\n              (list\n                (_starred_content (Name g_int Load))\n                (_starred_content\n                  (Call\n                    (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_rstrip Load) nil nil) s_split Load)\n                    nil\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &li:0 Store))\n      (List\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i2 None))\n          (_starred_content (Constant i3 None))\n          (_starred_content (Constant i4 None))\n          (_starred_content (Constant i5 None))\n          (_starred_content (Constant i6 None))\n          (_starred_content (Constant i7 None))\n          (_starred_content (Constant i8 None))\n          (_starred_content (Constant i9 None))\n        )\n        Load\n      )\n      None\n    )\n    (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &li:0 Load)\n      (/seq\n        (Assign (list (Name &a:0 Store)) (Name &i:0 Load) None)\n        (Assign (list (Name &c:0 Store)) (BinOp (Name &c1:0 Load) Sub (Name &a:0 Load)) None)\n        (Assign (list (Name &b:0 Store)) (BinOp (Name &r1:0 Load) Sub (Name &a:0 Load)) None)\n        (Assign (list (Name &d:0 Store)) (BinOp (Name &d1:0 Load) Sub (Name &a:0 Load)) None)\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &c:0 Load) (list In) (list (Name &li:0 Load)))\n              (Compare (Name &b:0 Load) (list In) (list (Name &li:0 Load)))\n              (Compare (Name &d:0 Load) (list In) (list (Name &li:0 Load)))\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &b:0 Load) (list Eq) (list (BinOp (Name &d2:0 Load) Sub (Name &c:0 Load))))\n                  (Compare (Name &b:0 Load) (list Eq) (list (BinOp (Name &c2:0 Load) Sub (Name &d:0 Load))))\n                  (Compare (BinOp (Name &c:0 Load) Add (Name &d:0 Load)) (list Eq) (list (Name &r2:0 Load)))\n                )\n              )\n              (/seq (Assign (list (Name &flag:0 Store)) (Constant i1 None) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))\n          (Compare (Name &a:0 Load) (list Eq) (list (Name &c:0 Load)))\n          (Compare (Name &a:0 Load) (list Eq) (list (Name &d:0 Load)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Name &c:0 Load)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Name &d:0 Load)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Name &d:0 Load)))\n        )\n      )\n      (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None))\n      (/seq)\n    )\n    (If\n      (Compare (Name &flag:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil)\n        )\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &d:0 Load))) nil)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &r1:0 Store)) (_starred_content (Name &r2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &c1:0 Store)) (_starred_content (Name &c2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &d1:0 Store)) (_starred_content (Name &d2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (BinOp (BinOp (BinOp (Name &r1:0 Load) Add (Name &c1:0 Load)) Sub (Name &d2:0 Load)) FloorDiv (Constant i2 None))\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (BinOp (BinOp (BinOp (Name &c1:0 Load) Add (Name &r2:0 Load)) Sub (Name &d1:0 Load)) FloorDiv (Constant i2 None))\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (BinOp (BinOp (BinOp (Name &r1:0 Load) Add (Name &c2:0 Load)) Sub (Name &d1:0 Load)) FloorDiv (Constant i2 None))\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp (BinOp (BinOp (Name &r2:0 Load) Add (Name &c2:0 Load)) Sub (Name &d2:0 Load)) FloorDiv (Constant i2 None))\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (BoolOp\n        And\n        (list\n          (Compare\n            (Name &a:0 Load)\n            (list In)\n            (list\n              (Call\n                (Name g_range Load)\n                (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n                nil\n              )\n            )\n          )\n          (Compare\n            (Name &b:0 Load)\n            (list In)\n            (list\n              (Call\n                (Name g_range Load)\n                (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n                nil\n              )\n            )\n          )\n          (Compare\n            (Name &c:0 Load)\n            (list In)\n            (list\n              (Call\n                (Name g_range Load)\n                (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n                nil\n              )\n            )\n          )\n          (Compare\n            (Name &d:0 Load)\n            (list In)\n            (list\n              (Call\n                (Name g_range Load)\n                (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n                nil\n              )\n            )\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &eq:0 Store))\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list NotEq) (list (Name &b:0 Load)))\n          (Compare (Name &a:0 Load) (list NotEq) (list (Name &c:0 Load)))\n          (Compare (Name &a:0 Load) (list NotEq) (list (Name &d:0 Load)))\n          (Compare (Name &b:0 Load) (list NotEq) (list (Name &c:0 Load)))\n          (Compare (Name &b:0 Load) (list NotEq) (list (Name &d:0 Load)))\n          (Compare (Name &c:0 Load) (list NotEq) (list (Name &d:0 Load)))\n        )\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &d1:0 Load) (list Eq) (list (BinOp (Name &a:0 Load) Add (Name &d:0 Load))))\n          (Compare (Name &d2:0 Load) (list Eq) (list (BinOp (Name &b:0 Load) Add (Name &c:0 Load))))\n          (Compare (Name &r1:0 Load) (list Eq) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load))))\n          (Compare (Name &r2:0 Load) (list Eq) (list (BinOp (Name &c:0 Load) Add (Name &d:0 Load))))\n          (Compare (Name &c1:0 Load) (list Eq) (list (BinOp (Name &a:0 Load) Add (Name &c:0 Load))))\n          (Compare (Name &c2:0 Load) (list Eq) (list (BinOp (Name &b:0 Load) Add (Name &d:0 Load))))\n          (Name &ans:0 Load)\n          (Name &eq:0 Load)\n        )\n      )\n      (/seq\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil)\n        )\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &d:0 Load))) nil)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExNywgMTE2LCAxMDQsIDExMSwgMTE0LCAzMiwgNDUsIDMyLCA4MywgOTcsIDEyMSwgOTcsIDExMCwgMzIsIDY2LCAxMTEsIDExNSwgMTAxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwMCwgOTcsIDExNiwgMTAxLCAzMiwgNDUsIDMyLCA1MCwgNTcsIDQ2LCA0OCwgNDksIDQ2LCA1MCwgNDgsIDUwLCA0OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCA2NiwgMTE0LCAxMTEsIDExMSwgMTA3LCAxMDgsIDEyMSwgMTEwLCAzMiwgNTcsIDU3LCAzMiwgMTA1LCAxMTUsIDMyLCAxMDgsIDExMSwgMTE4LCAxMDEsIDMzLCAxMF0=\n        None\n      )\n    )\n    (ImportFrom s_itertools (list (alias &permutations:0 None)) i0)\n    (Assign\n      (list (Tuple (list (_starred_content (Name &r1:0 Store)) (_starred_content (Name &r2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &c1:0 Store)) (_starred_content (Name &c2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &d1:0 Store)) (_starred_content (Name &d2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (_starred_content\n            (Call\n              (Name &permutations:0 Load)\n              (list\n                (_starred_content\n                  (ListComp\n                    (Name &i:1 Load)\n                    (list\n                      (comprehension\n                        (Name &i:1 Store)\n                        (Call\n                          (Name g_range Load)\n                          (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n                          nil\n                        )\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                )\n                (_starred_content (Constant i4 None))\n              )\n              nil\n            )\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &c:0 Load)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &t1:0 Store))\n                (_starred_content (Name &t2:0 Store))\n                (_starred_content (Name &t3:0 Store))\n                (_starred_content (Name &t4:0 Store))\n              )\n              Store\n            )\n          )\n          (Name &i:0 Load)\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (BinOp (Name &t1:0 Load) Add (Name &t2:0 Load)) (list Eq) (list (Name &r1:0 Load)))\n              (Compare (BinOp (Name &t3:0 Load) Add (Name &t4:0 Load)) (list Eq) (list (Name &r2:0 Load)))\n              (Compare (BinOp (Name &t1:0 Load) Add (Name &t3:0 Load)) (list Eq) (list (Name &c1:0 Load)))\n              (Compare (BinOp (Name &t2:0 Load) Add (Name &t4:0 Load)) (list Eq) (list (Name &c2:0 Load)))\n              (Compare (BinOp (Name &t1:0 Load) Add (Name &t4:0 Load)) (list Eq) (list (Name &d1:0 Load)))\n              (Compare (BinOp (Name &t2:0 Load) Add (Name &t3:0 Load)) (list Eq) (list (Name &d2:0 Load)))\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Name &t1:0 Load)) (_starred_content (Name &t2:0 Load)))\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (_starred_content (Name &t3:0 Load)) (_starred_content (Name &t4:0 Load)))\n                nil\n              )\n            )\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &r1:0 Store)) (_starred_content (Name &r2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &c1:0 Store)) (_starred_content (Name &c2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &d1:0 Store)) (_starred_content (Name &d2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &check:0 Store)) (Constant True None) None)\n    (Assign (list (Name &x:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &a:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &b:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Constant i1 None))\n          (_starred_content (Constant i10 None))\n          (_starred_content (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &x:0 Store)) (Name &i:0 Load) None)\n        (Assign (list (Name &a:0 Store)) (BinOp (Name &r1:0 Load) Sub (Name &x:0 Load)) None)\n        (Assign (list (Name &b:0 Store)) (BinOp (Name &d2:0 Load) Sub (Name &a:0 Load)) None)\n        (Assign (list (Name &c:0 Store)) (BinOp (Name &r2:0 Load) Sub (Name &b:0 Load)) None)\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Constant i1 None) (list LtE LtE) (list (Name &a:0 Load) (Constant i9 None)))\n              (Compare (Constant i1 None) (list LtE LtE) (list (Name &b:0 Load) (Constant i9 None)))\n              (Compare (Constant i1 None) (list LtE LtE) (list (Name &c:0 Load) (Constant i9 None)))\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list NotEq) (list (Name &b:0 Load)))\n                  (Compare (Name &a:0 Load) (list NotEq) (list (Name &c:0 Load)))\n                  (Compare (Name &b:0 Load) (list NotEq) (list (Name &c:0 Load)))\n                  (Compare (Name &x:0 Load) (list NotEq) (list (Name &a:0 Load)))\n                  (Compare (Name &x:0 Load) (list NotEq) (list (Name &b:0 Load)))\n                  (Compare (Name &x:0 Load) (list NotEq) (list (Name &c:0 Load)))\n                )\n              )\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare (BinOp (Name &x:0 Load) Add (Name &c:0 Load)) (list Eq) (list (Name &d1:0 Load)))\n                      (Compare (BinOp (Name &x:0 Load) Add (Name &b:0 Load)) (list Eq) (list (Name &c1:0 Load)))\n                      (Compare (BinOp (Name &a:0 Load) Add (Name &c:0 Load)) (list Eq) (list (Name &c2:0 Load)))\n                    )\n                  )\n                  (/seq (Assign (list (Name &check:0 Store)) (Constant False None) None) Break)\n                  (/seq)\n                )\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Name &check:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &a:0 Load))) nil)\n        )\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load))) nil)\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &r1:0 Store)) (_starred_content (Name &r2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &c1:0 Store)) (_starred_content (Name &c2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &d1:0 Store)) (_starred_content (Name &d2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store) (Name &d:0 Store))\n      (UnaryOp USub (Constant i1 None))\n      None\n    )\n    (For\n      (Name &a:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i21 None))) nil)\n      (/seq\n        (Assign (list (Name &b:0 Store)) (BinOp (Name &r1:0 Load) Sub (Name &a:0 Load)) None)\n        (If\n          (Compare\n            (BinOp (Name &c1:0 Load) Sub (Name &a:0 Load))\n            (list Is)\n            (list (BinOp (Name &d2:0 Load) Sub (Name &b:0 Load)))\n          )\n          (/seq (Assign (list (Name &c:0 Store)) (BinOp (Name &c1:0 Load) Sub (Name &a:0 Load)) None))\n          (/seq Continue)\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (BinOp (Name &r2:0 Load) Sub (Name &c:0 Load))\n                (list Is)\n                (list (BinOp (Name &d1:0 Load) Sub (Name &a:0 Load)))\n              )\n              (Compare\n                (BinOp (Name &d1:0 Load) Sub (Name &a:0 Load))\n                (list Is)\n                (list (BinOp (Name &c2:0 Load) Sub (Name &b:0 Load)))\n              )\n            )\n          )\n          (/seq (Assign (list (Name &d:0 Store)) (BinOp (Name &r2:0 Load) Sub (Name &c:0 Load)) None))\n          (/seq Continue)\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list IsNot) (list (Name &b:0 Load)))\n              (Compare (Name &a:0 Load) (list IsNot) (list (Name &c:0 Load)))\n              (Compare (Name &a:0 Load) (list IsNot) (list (Name &d:0 Load)))\n              (Compare (Name &b:0 Load) (list IsNot) (list (Name &c:0 Load)))\n              (Compare (Name &b:0 Load) (list IsNot) (list (Name &d:0 Load)))\n              (Compare (Name &c:0 Load) (list IsNot) (list (Name &d:0 Load)))\n              (Compare (Constant i1 None) (list LtE LtE) (list (Name &a:0 Load) (Constant i9 None)))\n              (Compare (Constant i1 None) (list LtE LtE) (list (Name &b:0 Load) (Constant i9 None)))\n              (Compare (Constant i1 None) (list LtE LtE) (list (Name &c:0 Load) (Constant i9 None)))\n              (Compare (Constant i1 None) (list LtE LtE) (list (Name &d:0 Load) (Constant i9 None)))\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content\n                    (BinOp\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (BinOp\n                              (BinOp\n                                (Call (Name g_str Load) (list (_starred_content (Name &a:0 Load))) nil)\n                                Add\n                                (Constant s-WzMyXQ== None)\n                              )\n                              Add\n                              (Call (Name g_str Load) (list (_starred_content (Name &b:0 Load))) nil)\n                            )\n                            Add\n                            (Constant s-WzEwXQ== None)\n                          )\n                          Add\n                          (Call (Name g_str Load) (list (_starred_content (Name &c:0 Load))) nil)\n                        )\n                        Add\n                        (Constant s-WzMyXQ== None)\n                      )\n                      Add\n                      (Call (Name g_str Load) (list (_starred_content (Name &d:0 Load))) nil)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq Continue)\n        )\n        (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &arr_inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:2 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list\n        (Tuple\n          (list\n            (_starred_content (Name &r:0 Store))\n            (_starred_content (Name &c:0 Store))\n            (_starred_content (Name &d:0 Store))\n          )\n          Store\n        )\n      )\n      (ListComp\n        (Call (Name &arr_inp:0 Load) nil nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (_starred_content (Constant i3 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (BinOp\n        (BinOp\n          (BinOp\n            (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load)\n            Sub\n            (Subscript (Name &d:0 Load) (_slice_content (Constant i0 None)) Load)\n          )\n          Add\n          (Subscript (Name &r:0 Load) (_slice_content (Constant i1 None)) Load)\n        )\n        Div\n        (Constant i2 None)\n      )\n      None\n    )\n    (If\n      (Compare\n        (Name &C:0 Load)\n        (list NotEq)\n        (list (Call (Name g_int Load) (list (_starred_content (Name &C:0 Load))) nil))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_exit Load)\n            (list\n              (_starred_content\n                (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n    (Assign (list (Name &C:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &C:0 Load))) nil) None)\n    (Assign\n      (list (Name &D:0 Store))\n      (BinOp (Subscript (Name &r:0 Load) (_slice_content (Constant i1 None)) Load) Sub (Name &C:0 Load))\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (BinOp (Subscript (Name &d:0 Load) (_slice_content (Constant i0 None)) Load) Sub (Name &D:0 Load))\n      None\n    )\n    (Assign\n      (list (Name &B:0 Store))\n      (BinOp (Subscript (Name &r:0 Load) (_slice_content (Constant i0 None)) Load) Sub (Name &A:0 Load))\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (List\n        (list\n          (_starred_content (Name &A:0 Load))\n          (_starred_content (Name &B:0 Load))\n          (_starred_content (Name &C:0 Load))\n          (_starred_content (Name &D:0 Load))\n        )\n        Load\n      )\n      None\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (Compare\n            (Call (Name g_min Load) (list (_starred_content (Name &arr:0 Load))) nil)\n            (list Lt)\n            (list (Constant i1 None))\n          )\n          (Compare\n            (Call (Name g_max Load) (list (_starred_content (Name &arr:0 Load))) nil)\n            (list Gt)\n            (list (Constant i9 None))\n          )\n          (Compare (Name &A:0 Load) (list Eq) (list (Name &B:0 Load)))\n          (Compare (Name &A:0 Load) (list Eq) (list (Name &C:0 Load)))\n          (Compare (Name &A:0 Load) (list Eq) (list (Name &D:0 Load)))\n          (Compare (Name &B:0 Load) (list Eq) (list (Name &C:0 Load)))\n          (Compare (Name &B:0 Load) (list Eq) (list (Name &D:0 Load)))\n          (Compare (Name &C:0 Load) (list Eq) (list (Name &D:0 Load)))\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_exit Load)\n            (list\n              (_starred_content\n                (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &A:0 Load)) (_starred_content (Name &B:0 Load))) nil))\n    (Expr (Call (Name g_print Load) (list (_starred_content (Name &C:0 Load)) (_starred_content (Name &D:0 Load))) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_functools (list (alias g_reduce None)) i0)\n    (Assign\n      (list (Name &r:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil)\n        (list\n          (comprehension\n            (Name &x:3 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant False None) None)\n    (For\n      (Name &w:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None))) nil)\n      (/seq\n        (For\n          (Name &x:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n            nil\n          )\n          (/seq\n            (For\n              (Name &y:0 Store)\n              (Call\n                (Name g_range Load)\n                (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n                nil\n              )\n              (/seq\n                (For\n                  (Name &z:0 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n                    nil\n                  )\n                  (/seq\n                    (If\n                      (BoolOp\n                        And\n                        (list\n                          (Compare (Name &w:0 Load) (list NotEq) (list (Name &x:0 Load)))\n                          (Compare (Name &w:0 Load) (list NotEq) (list (Name &y:0 Load)))\n                          (Compare (Name &w:0 Load) (list NotEq) (list (Name &z:0 Load)))\n                          (Compare (Name &x:0 Load) (list NotEq) (list (Name &y:0 Load)))\n                          (Compare (Name &x:0 Load) (list NotEq) (list (Name &z:0 Load)))\n                          (Compare (Name &y:0 Load) (list NotEq) (list (Name &z:0 Load)))\n                        )\n                      )\n                      (/seq\n                        (If\n                          (BoolOp\n                            And\n                            (list\n                              (Compare\n                                (Subscript (Name &r:0 Load) (_slice_content (Constant i0 None)) Load)\n                                (list Eq)\n                                (list (BinOp (Name &w:0 Load) Add (Name &x:0 Load)))\n                              )\n                              (Compare\n                                (Subscript (Name &r:0 Load) (_slice_content (Constant i1 None)) Load)\n                                (list Eq)\n                                (list (BinOp (Name &y:0 Load) Add (Name &z:0 Load)))\n                              )\n                            )\n                          )\n                          (/seq\n                            (If\n                              (BoolOp\n                                And\n                                (list\n                                  (Compare\n                                    (Subscript (Name &c:0 Load) (_slice_content (Constant i0 None)) Load)\n                                    (list Eq)\n                                    (list (BinOp (Name &w:0 Load) Add (Name &y:0 Load)))\n                                  )\n                                  (Compare\n                                    (Subscript (Name &c:0 Load) (_slice_content (Constant i1 None)) Load)\n                                    (list Eq)\n                                    (list (BinOp (Name &x:0 Load) Add (Name &z:0 Load)))\n                                  )\n                                )\n                              )\n                              (/seq\n                                (If\n                                  (BoolOp\n                                    And\n                                    (list\n                                      (Compare\n                                        (Subscript (Name &d:0 Load) (_slice_content (Constant i0 None)) Load)\n                                        (list Eq)\n                                        (list (BinOp (Name &w:0 Load) Add (Name &z:0 Load)))\n                                      )\n                                      (Compare\n                                        (Subscript (Name &d:0 Load) (_slice_content (Constant i1 None)) Load)\n                                        (list Eq)\n                                        (list (BinOp (Name &x:0 Load) Add (Name &y:0 Load)))\n                                      )\n                                    )\n                                  )\n                                  (/seq\n                                    (Expr\n                                      (Call\n                                        (Name g_print Load)\n                                        (list\n                                          (_starred_content\n                                            (Call\n                                              (Attribute\n                                                (Constant s-WzEyMywgMTI1LCAzMiwgMTIzLCAxMjVd None)\n                                                s_format\n                                                Load\n                                              )\n                                              (list\n                                                (_starred_content (Name &w:0 Load))\n                                                (_starred_content (Name &x:0 Load))\n                                              )\n                                              nil\n                                            )\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                    (Expr\n                                      (Call\n                                        (Name g_print Load)\n                                        (list\n                                          (_starred_content\n                                            (Call\n                                              (Attribute\n                                                (Constant s-WzEyMywgMTI1LCAzMiwgMTIzLCAxMjVd None)\n                                                s_format\n                                                Load\n                                              )\n                                              (list\n                                                (_starred_content (Name &y:0 Load))\n                                                (_starred_content (Name &z:0 Load))\n                                              )\n                                              nil\n                                            )\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                    (Assign (list (Name &ans:0 Store)) (Constant True None) None)\n                                    Break\n                                  )\n                                  (/seq)\n                                )\n                              )\n                              (/seq)\n                            )\n                          )\n                          (/seq)\n                        )\n                      )\n                      (/seq)\n                    )\n                  )\n                  (/seq)\n                  None\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (UnaryOp Not (Name &ans:0 Load))\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n      (/seq)\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (_starred_content (Name &r1:0 Store)) (_starred_content (Name &r2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &c1:0 Store)) (_starred_content (Name &c2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (_starred_content (Name &d1:0 Store)) (_starred_content (Name &d2:0 Store))) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (_starred_content (Name g_int Load))\n          (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &status:0 Store)) (Constant False None) None)\n    (For\n      (Name &x:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None))) nil)\n      (/seq\n        (Assign (list (Name &a:0 Store)) (BinOp (Name &r1:0 Load) Sub (Name &x:0 Load)) None)\n        (Assign (list (Name &c:0 Store)) (BinOp (Name &c2:0 Load) Sub (Name &a:0 Load)) None)\n        (Assign (list (Name &b:0 Store)) (BinOp (Name &r2:0 Load) Sub (Name &c:0 Load)) None)\n        (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n        (If\n          (Compare\n            (Call\n              (Name g_len Load)\n              (list\n                (_starred_content\n                  (Call\n                    (Name g_set Load)\n                    (list\n                      (_starred_content\n                        (List\n                          (list\n                            (_starred_content (Name &x:0 Load))\n                            (_starred_content (Name &a:0 Load))\n                            (_starred_content (Name &b:0 Load))\n                            (_starred_content (Name &c:0 Load))\n                          )\n                          Load\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (list Eq)\n            (list (Constant i4 None))\n          )\n          (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (Name &a:0 Load)\n                (list In)\n                (list\n                  (Call\n                    (Name g_range Load)\n                    (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n                    nil\n                  )\n                )\n              )\n              (Compare\n                (Name &b:0 Load)\n                (list In)\n                (list\n                  (Call\n                    (Name g_range Load)\n                    (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n                    nil\n                  )\n                )\n              )\n              (Compare\n                (Name &c:0 Load)\n                (list In)\n                (list\n                  (Call\n                    (Name g_range Load)\n                    (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n                    nil\n                  )\n                )\n              )\n              (Compare\n                (Name &x:0 Load)\n                (list In)\n                (list\n                  (Call\n                    (Name g_range Load)\n                    (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (BinOp (Name &x:0 Load) Add (Name &c:0 Load)) (list Eq) (list (Name &d1:0 Load)))\n              (Compare (BinOp (Name &a:0 Load) Add (Name &b:0 Load)) (list Eq) (list (Name &d2:0 Load)))\n            )\n          )\n          (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n        (If\n          (Compare (Name &count:0 Load) (list Eq) (list (Constant i3 None)))\n          (/seq (Assign (list (Name &status:0 Store)) (Constant True None) None) Break)\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Name &status:0 Load)\n      (/seq\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &a:0 Load))) nil)\n        )\n        (Expr\n          (Call (Name g_print Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &c:0 Load))) nil)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n    )\n  )\n  nil\n)"]