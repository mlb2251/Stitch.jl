[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "match_sequences": true,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_choicevar": -1.01,
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                0,
                2,
                "(For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) (/seq ?0) (/seq) None)",
                "S",
                [],
                [
                    "Name",
                    "Name"
                ]
            ],
            [
                1,
                1,
                "(/seq (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content #0)) nil)) (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (UnaryOp USub #0))) nil)))",
                "seqS",
                [
                    "E"
                ],
                [
                    "Name"
                ]
            ],
            [
                0,
                1,
                "(BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None)))",
                "E",
                [],
                [
                    "Name"
                ]
            ]
        ],
        "programs": [
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_gettrace None)) i0) (ImportFrom s_heapq (list (alias g_nlargest None)) i0) (If (UnaryOp Not (Call (Name g_gettrace Load) nil nil)) (/seq (FunctionDef &input:0 (arguments nil nil None nil nil None nil) (/seq (Return (Subscript (Call (Name g_next Load) (list (_starred_content (Name g_stdin Load))) nil) (_slice_slice (Slice None (UnaryOp USub (Constant i1 None)) None)) Load))) nil None None)) (/seq)) (Assign (list (Name &INF:0 Store)) (Call (Name g_int Load) (list (_starred_content (Constant f100000000000.0 None))) nil) None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (FunctionDef &solve:1 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:2 Store)) (_starred_content (Name &k:2 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &mm:2 Store)) (List nil Load) None) (fn_1 &n:2 &i:2 (/choiceseq (Assign (list (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Attribute (Name &mm:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &b:2 Load)) (_starred_content (Name &a:2 Load)) (_starred_content (Name &i:2 Load))) Load))) nil)))) (Expr (Call (Attribute (Name &mm:2 Load) s_sort Load) nil nil)) (Assign (list (Name &dp:2 Store)) (ListComp (BinOp (List (list (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Constant i1000000 None))) (_starred_content (Constant False None))) Load))) Load) Mult (Call (Name g_min Load) (list (_starred_content (BinOp (Name &i:3 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &k:2 Load) Add (Constant i1 None)))) nil)) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:2 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Subscript (Subscript (Name &dp:2 Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Constant i0 None)) Store)) (Tuple (list (_starred_content (BinOp (Subscript (Subscript (Name &mm:2 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Load) Mult (BinOp (Name &k:2 Load) Sub (Constant i1 None)))) (_starred_content (Constant False None))) Load) None) (Assign (list (Subscript (Subscript (Name &dp:2 Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Constant i1 None)) Store)) (Tuple (list (_starred_content (Subscript (Subscript (Name &mm:2 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Constant True None))) Load) None) (For (Tuple (list (_starred_content (Name &j:2 Store)) (_starred_content (Tuple (list (_starred_content (Name &b:2 Store)) (_starred_content (Name &a:2 Store)) (_starred_content (Name &_:2 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Subscript (Name &mm:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load)) (_starred_content (Constant i2 None))) nil) (/seq (Assign (list (Subscript (Subscript (Name &dp:2 Load) (_slice_content (Name &j:2 Load)) Load) (_slice_content (Constant i0 None)) Store)) (Tuple (list (_starred_content (BinOp (Subscript (Subscript (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &j:2 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Load) Add (BinOp (Name &b:2 Load) Mult (BinOp (Name &k:2 Load) Sub (Constant i1 None))))) (_starred_content (Constant False None))) Load) None) (For (Name &l:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &j:2 Load)) (_starred_content (BinOp (Name &k:2 Load) Add (Constant i1 None)))) nil))) nil) (/seq (Assign (list (Name &v1:2 Store)) (BinOp (Subscript (Subscript (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &j:2 Load) Sub (Constant i1 None))) Load) (_slice_content (Name &l:2 Load)) Load) (_slice_content (Constant i0 None)) Load) Add (BinOp (Name &b:2 Load) Mult (BinOp (Name &k:2 Load) Sub (Constant i1 None)))) None) (Assign (list (Name &v2:2 Store)) (BinOp (BinOp (Subscript (Subscript (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &j:2 Load) Sub (Constant i1 None))) Load) (_slice_content (BinOp (Name &l:2 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) Add (Name &a:2 Load)) Add (BinOp (Name &b:2 Load) Mult (BinOp (Name &l:2 Load) Sub (Constant i1 None)))) None) (If (Compare (Name &v1:2 Load) (list Gt) (list (Name &v2:2 Load))) (/seq (Assign (list (Subscript (Subscript (Name &dp:2 Load) (_slice_content (Name &j:2 Load)) Load) (_slice_content (Name &l:2 Load)) Store)) (Tuple (list (_starred_content (Name &v1:2 Load)) (_starred_content (Constant False None))) Load) None)) (/seq (Assign (list (Subscript (Subscript (Name &dp:2 Load) (_slice_content (Name &j:2 Load)) Load) (_slice_content (Name &l:2 Load)) Store)) (Tuple (list (_starred_content (Name &v2:2 Load)) (_starred_content (Constant True None))) Load) None)))) (/seq) None) (If (Compare (Name &j:2 Load) (list LtE) (list (Name &k:2 Load))) (/seq (Assign (list (Subscript (Subscript (Name &dp:2 Load) (_slice_content (Name &j:2 Load)) Load) (_slice_content (Name &j:2 Load)) Store)) (Tuple (list (_starred_content (BinOp (BinOp (Subscript (Subscript (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &j:2 Load) Sub (Constant i1 None))) Load) (_slice_content (BinOp (Name &j:2 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) Add (Name &a:2 Load)) Add (BinOp (Name &b:2 Load) Mult (BinOp (Name &j:2 Load) Sub (Constant i1 None))))) (_starred_content (Constant True None))) Load) None)) (/seq))) (/seq) None) (Assign (list (Name &g1:2 Store)) (List nil Load) None) (Assign (list (Name &g2:2 Store)) (List nil Load) None) (Assign (list (Name &l:2 Store)) (Name &k:2 Load) None) (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:2 Store)) (_starred_content (Name &_:2 Store)) (_starred_content (Name &i:2 Store))) Store)) (Subscript (Name &mm:2 Load) (_slice_content (BinOp (Name &j:2 Load) Sub (Constant i1 None))) Load) None) (If (Subscript (Subscript (Subscript (Name &dp:2 Load) (_slice_content (Name &j:2 Load)) Load) (_slice_content (Name &l:2 Load)) Load) (_slice_content (Constant i1 None)) Load) (/seq (Expr (Call (Attribute (Name &g1:2 Load) s_append Load) (list (_starred_content (Name &i:2 Load))) nil)) (AugAssign (Name &l:2 Store) Sub (Constant i1 None))) (fn_2 (Name &i:2 Load) &g2:2))) (/seq) None) (Expr (Call (Attribute (Name &g1:2 Load) s_reverse Load) nil nil)) (Assign (list (Name &res:2 Store)) (BinOp (BinOp (Subscript (Name &g1:2 Load) (_slice_slice (Slice None (BinOp (Name &k:2 Load) Sub (Constant i1 None)) None)) Load) Add (Name &g2:2 Load)) Add (Subscript (Name &g1:2 Load) (_slice_slice (Slice (BinOp (Name &k:2 Load) Sub (Constant i1 None)) None None)) Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &res:2 Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &res:2 Load))) nil))) nil))) nil))) nil None None) (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:1 Load))) nil) (/seq (Expr (Call (Name &solve:1 Load) nil nil))) (/seq) None)) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (ImportFrom s_operator (list (alias g_itemgetter None)) i0) (Import (list (alias g_sys None))) (Assign (list (Name &int1:0 Store)) (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (BinOp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) Sub (Constant i1 None))) None) (Assign (list (Name &p2D:0 Store)) (Lambda (arguments nil (list (arg &x:4 None None)) None nil nil None nil) (Call (Name g_print Load) (list (_starred_starred (Starred (Name &x:4 Load) Load))) (list (keyword s_sep (Constant s-WzEwXQ== None))))) None) (FunctionDef &II:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))) nil))) nil None None) (FunctionDef &MI:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (FunctionDef &LI:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil None None) (FunctionDef &LLI:0 (arguments nil (list (arg &rows_number:1 None None)) None nil nil None nil) (/seq (Return (ListComp (Call (Name &LI:0 Load) nil nil) (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &rows_number:1 Load))) nil) nil i0))))) nil None None) (FunctionDef &SI:0 (arguments nil nil None nil nil None nil) (/seq (Return (Subscript (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) (_slice_slice (Slice None (UnaryOp USub (Constant i1 None)) None)) Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &inf:2 Store)) (BinOp (Constant i10 None) Pow (Constant i9 None)) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name &II:0 Load) nil nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:2 Store)) (_starred_content (Name &k:2 Store))) Store)) (Call (Name &MI:0 Load) nil nil) None) (Assign (list (Name &ab:2 Store)) (ListComp (Tuple (list (_starred_content (Name &a:6 Load)) (_starred_content (Name &b:6 Load)) (_starred_content (Name &i:6 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name &i:6 Store)) (_starred_content (Tuple (list (_starred_content (Name &a:6 Store)) (_starred_content (Name &b:6 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Call (Name &LLI:0 Load) (list (_starred_content (Name &n:2 Load))) nil))) nil) nil i0))) None) (Assign (list (Name &dp:2 Store)) (ListComp (BinOp (List (list (_starred_content (Name &inf:2 Load))) Load) Mult (Name &n:2 Load)) (list (comprehension (Name &_:7 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:2 Load))) nil) nil i0))) None) (Assign (list (Name &log:2 Store)) (ListComp (ListComp (List nil Load) (list (comprehension (Name &_:9 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) nil i0))) (list (comprehension (Name &_:8 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:2 Load))) nil) nil i0))) None) (For (Name &e:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (Assign (list (Subscript (Subscript (Name &dp:2 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Name &e:2 Load)) Store)) (UnaryOp USub (Subscript (Subscript (Name &ab:2 Load) (_slice_content (Name &e:2 Load)) Load) (_slice_content (Constant i0 None)) Load)) None)) (/seq) None) (Expr (Call (Attribute (Name &ab:2 Load) s_sort Load) nil (list (keyword s_key (Call (Name g_itemgetter Load) (list (_starred_content (Constant i1 None))) nil))))) (For (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store)) (_starred_content (Name &i:2 Store))) Store) (Name &ab:2 Load) (/seq (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:2 Load) Sub (Constant i2 None))) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (For (Name &e:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (If (Compare (Name &i:2 Load) (list Eq) (list (Name &e:2 Load))) (/seq Continue) (/seq)) (Assign (list (Name &pre:2 Store)) (Subscript (Subscript (Name &dp:2 Load) (_slice_content (Name &j:2 Load)) Load) (_slice_content (Name &e:2 Load)) Load) None) (If (Compare (Name &pre:2 Load) (list Eq) (list (Name &inf:2 Load))) (/seq Continue) (/seq)) (Assign (list (Name &cur:2 Store)) (BinOp (BinOp (Name &pre:2 Load) Add (BinOp (Name &b:2 Load) Mult (BinOp (BinOp (Name &k:2 Load) Sub (Constant i1 None)) Sub (Name &j:2 Load)))) Sub (Name &a:2 Load)) None) (If (Compare (Name &cur:2 Load) (list Lt) (list (Subscript (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &j:2 Load) Add (Constant i1 None))) Load) (_slice_content (Name &e:2 Load)) Load))) (/seq (Assign (list (Subscript (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &j:2 Load) Add (Constant i1 None))) Load) (_slice_content (Name &e:2 Load)) Store)) (Name &cur:2 Load) None) (Assign (list (Subscript (Subscript (Name &log:2 Load) (_slice_content (BinOp (Name &j:2 Load) Add (Constant i1 None))) Load) (_slice_content (Name &e:2 Load)) Store)) (BinOp (Subscript (Subscript (Name &log:2 Load) (_slice_content (Name &j:2 Load)) Load) (_slice_content (Name &e:2 Load)) Load) Add (List (list (_starred_content (Name &i:2 Load))) Load)) None)) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (Assign (list (Name &mn:2 Store) (Name &mne:2 Store)) (Name &inf:2 Load) None) (For (Name &e:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (Assign (list (Name &cur:2 Store)) (Subscript (Subscript (Name &dp:2 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Name &e:2 Load)) Load) None) (If (Compare (Name &cur:2 Load) (list Lt) (list (Name &mn:2 Load))) (/seq (Assign (list (Name &mn:2 Store)) (Name &cur:2 Load) None) (Assign (list (Name &mne:2 Store)) (Name &e:2 Load) None)) (/seq))) (/seq) None) (Assign (list (Name &first:2 Store)) (Subscript (Subscript (Name &log:2 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Name &mne:2 Load)) Load) None) (Assign (list (Name &use:2 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (Name &n:2 Load)) None) (Assign (list (Subscript (Name &use:2 Load) (_slice_content (Name &mne:2 Load)) Store)) (Constant True None) None) (Assign (list (Name &ans:2 Store)) (List nil Load) None) (For (Name &i:2 Store) (Name &first:2 Load) (/seq (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (_starred_content (BinOp (Name &i:2 Load) Add (Constant i1 None)))) nil)) (Assign (list (Subscript (Name &use:2 Load) (_slice_content (Name &i:2 Load)) Store)) (Constant True None) None)) (/seq) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (If (Subscript (Name &use:2 Load) (_slice_content (Name &i:2 Load)) Load) (/seq Continue) (/seq)) (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (_starred_content (BinOp (Name &i:2 Load) Add (Constant i1 None)))) nil)) (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (_starred_content (BinOp (UnaryOp USub (Name &i:2 Load)) Sub (Constant i1 None)))) nil))) (/seq) None) (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (_starred_content (BinOp (Name &mne:2 Load) Add (Constant i1 None)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &ans:2 Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &ans:2 Load) Load))) nil))) (/seq) None)) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
            "(Module (/seq (FunctionDef &read_int:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil None None) (FunctionDef &read_ints:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil None None) (Assign (list (Name &t:0 Store)) (Call (Name &read_int:0 Load) nil nil) None) (For (Name &case_num:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name &read_ints:0 Load) nil nil) None) (Assign (list (Name &p:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &ai:0 Store)) (_starred_content (Name &bi:0 Store))) Store)) (Call (Name &read_ints:0 Load) nil nil) None) (Expr (Call (Attribute (Name &p:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &bi:0 Load)) (_starred_content (Name &ai:0 Load)) (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))) Load))) nil))) (/seq) None) (Expr (Call (Attribute (Name &p:0 Load) s_sort Load) nil nil)) (Assign (list (Name &dp:0 Store)) (ListComp (ListComp (Constant i0 None) (list (comprehension (Name &j:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:0 Load) Add (Constant i1 None)))) nil) nil i0))) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Name &use:0 Store)) (ListComp (ListComp (Constant False None) (list (comprehension (Name &j:4 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:0 Load) Add (Constant i1 None)))) nil) nil i0))) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (fn_1 &n:0 &i:0 (/choiceseq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_min Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Name &k:0 Load))) nil) Add (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Name &i:0 Load) Sub (Constant i1 None)) (list GtE) (list (Name &j:0 Load))) (/seq (Assign (list (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Store)) (BinOp (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Name &j:0 Load)) Load) Add (BinOp (BinOp (Name &k:0 Load) Sub (Constant i1 None)) Mult (Subscript (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load))) None)) (/seq)) (If (Compare (Name &j:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (BinOp (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (BinOp (Name &j:0 Load) Sub (Constant i1 None))) Load) Add (BinOp (BinOp (Name &j:0 Load) Sub (Constant i1 None)) Mult (Subscript (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load))) Add (Subscript (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load)) None) (If (Compare (Name &x:0 Load) (list Gt) (list (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load))) (/seq (Assign (list (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Store)) (Name &x:0 Load) None) (Assign (list (Subscript (Subscript (Name &use:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Store)) (Constant True None) None)) (/seq))) (/seq))) (/seq) None))) (Assign (list (Name &used:0 Store)) (List nil Load) None) (Assign (list (Name &curr:0 Store)) (Name &k:0 Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Subscript (Subscript (Name &use:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &curr:0 Load)) Load) (/seq (Expr (Call (Attribute (Name &used:0 Load) s_append Load) (list (_starred_content (Subscript (Subscript (Name &p:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i2 None)) Load))) nil)) (AugAssign (Name &curr:0 Store) Sub (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Attribute (Name &used:0 Load) s_reverse Load) nil nil)) (Assign (list (Name &seq:0 Store)) (Subscript (Name &used:0 Load) (_slice_slice (Slice None (UnaryOp USub (Constant i1 None)) None)) Load) None) (Assign (list (Name &st:0 Store)) (Call (Name g_set Load) (list (_starred_content (Name &used:0 Load))) nil) None) (fn_1 &n:0 &i:0 (/choiceseq (If (UnaryOp Not (Compare (Name &i:0 Load) (list In) (list (Name &st:0 Load)))) (fn_2 (Name &i:0 Load) &seq:0) (/seq)))) (Expr (Call (Attribute (Name &seq:0 Load) s_append Load) (list (_starred_content (Subscript (Name &used:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &seq:0 Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &seq:0 Load))) nil))) nil))) nil))) (/seq) None)) nil)",
            "(Module (/seq (ImportFrom s_typing (list (alias g_List None)) i0) (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Import (list (alias &math:0 None))) (FunctionDef &inp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil))) nil None None) (FunctionDef &inlt:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil None None) (FunctionDef &insr:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &s:1 Store)) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil) None) (Return (Call (Name g_list Load) (list (_starred_content (Subscript (Name &s:1 Load) (_slice_slice (Slice None (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) None)) Load))) nil))) nil None None) (FunctionDef &invr:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (FunctionDef &solve_hungarian:0 (arguments nil (list (arg &a:2 (Subscript (Name g_List Load) (_slice_content (Subscript (Name g_List Load) (_slice_content (Name g_int Load)) Load)) Load) None) (arg &n:2 (Name g_int Load) None) (arg &m:2 (Name g_int Load) None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNzMsIDEwOSwgMTEyLCAxMDgsIDEwMSwgMTA5LCAxMDEsIDExMCwgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTExLCAxMDIsIDMyLCA3MiwgMTE3LCAxMTAsIDEwMywgOTcsIDExNCwgMTA1LCA5NywgMTEwLCAzMiwgOTcsIDEwOCwgMTAzLCAxMTEsIDExNCwgMTA1LCAxMTYsIDEwNCwgMTA5LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTAsIDk0LCA1MCwgMzIsIDEwOSwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)) (Assign (list (Name &u:2 Store)) (fn_3 &n:2) None) (Assign (list (Name &v:2 Store)) (fn_3 &m:2) None) (Assign (list (Name &p:2 Store)) (fn_3 &m:2) None) (Assign (list (Name &way:2 Store)) (fn_3 &m:2) None) (fn_1 &n:2 &i:2 (/choiceseq (Assign (list (Subscript (Name &p:2 Load) (_slice_content (Constant i0 None)) Store)) (Name &i:2 Load) None) (Assign (list (Name &j0:2 Store)) (Constant i0 None) None) (Assign (list (Name &minv:2 Store)) (BinOp (List (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) Load) Mult (BinOp (Name &m:2 Load) Add (Constant i1 None))) None) (Assign (list (Name &used:2 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (BinOp (Name &m:2 Load) Add (Constant i1 None))) None) (Assign (list (Name &condition:2 Store)) (Constant True None) None) (While (Name &condition:2 Load) (/seq (Assign (list (Subscript (Name &used:2 Load) (_slice_content (Name &j0:2 Load)) Store)) (Constant True None) None) (Assign (list (Name &i0:2 Store)) (Subscript (Name &p:2 Load) (_slice_content (Name &j0:2 Load)) Load) None) (Assign (list (Name &delta:2 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (fn_1 &m:2 &j:2 (/choiceseq (If (UnaryOp Not (Subscript (Name &used:2 Load) (_slice_content (Name &j:2 Load)) Load)) (/seq (Assign (list (Name &cur:2 Store)) (BinOp (BinOp (Subscript (Subscript (Name &a:2 Load) (_slice_content (Name &i0:2 Load)) Load) (_slice_content (Name &j:2 Load)) Load) Sub (Subscript (Name &u:2 Load) (_slice_content (Name &i0:2 Load)) Load)) Sub (Subscript (Name &v:2 Load) (_slice_content (Name &j:2 Load)) Load)) None) (If (Compare (Name &cur:2 Load) (list Lt) (list (Subscript (Name &minv:2 Load) (_slice_content (Name &j:2 Load)) Load))) (/seq (Assign (list (Subscript (Name &minv:2 Load) (_slice_content (Name &j:2 Load)) Store)) (Name &cur:2 Load) None) (Assign (list (Subscript (Name &way:2 Load) (_slice_content (Name &j:2 Load)) Store)) (Name &j0:2 Load) None)) (/seq)) (If (Compare (Subscript (Name &minv:2 Load) (_slice_content (Name &j:2 Load)) Load) (list Lt) (list (Name &delta:2 Load))) (/seq (Assign (list (Name &delta:2 Store)) (Subscript (Name &minv:2 Load) (_slice_content (Name &j:2 Load)) Load) None) (Assign (list (Name &j1:2 Store)) (Name &j:2 Load) None)) (/seq))) (/seq)))) (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &m:2 Load) Add (Constant i1 None)))) nil) (/seq (If (Subscript (Name &used:2 Load) (_slice_content (Name &j:2 Load)) Load) (/seq (AugAssign (Subscript (Name &u:2 Load) (_slice_content (Subscript (Name &p:2 Load) (_slice_content (Name &j:2 Load)) Load)) Store) Add (Name &delta:2 Load)) (AugAssign (Subscript (Name &v:2 Load) (_slice_content (Name &j:2 Load)) Store) Sub (Name &delta:2 Load))) (/seq (AugAssign (Subscript (Name &minv:2 Load) (_slice_content (Name &j:2 Load)) Store) Sub (Name &delta:2 Load))))) (/seq) None) (Assign (list (Name &j0:2 Store)) (Name &j1:2 Load) None) (Assign (list (Name &condition:2 Store)) (Compare (Subscript (Name &p:2 Load) (_slice_content (Name &j0:2 Load)) Load) (list NotEq) (list (Constant i0 None))) None)) (/seq)) (Assign (list (Name &condition:2 Store)) (Constant True None) None) (While (Name &condition:2 Load) (/seq (Assign (list (Name &j1:2 Store)) (Subscript (Name &way:2 Load) (_slice_content (Name &j0:2 Load)) Load) None) (Assign (list (Subscript (Name &p:2 Load) (_slice_content (Name &j0:2 Load)) Store)) (Subscript (Name &p:2 Load) (_slice_content (Name &j1:2 Load)) Load) None) (Assign (list (Name &j0:2 Store)) (Name &j1:2 Load) None) (Assign (list (Name &condition:2 Store)) (Compare (Name &j0:2 Load) (list NotEq) (list (Constant i0 None))) None)) (/seq)))) (Assign (list (Name &ans:2 Store)) (fn_3 &n:2) None) (fn_1 &m:2 &j:2 (/choiceseq (Assign (list (Subscript (Name &ans:2 Load) (_slice_content (Subscript (Name &p:2 Load) (_slice_content (Name &j:2 Load)) Load)) Store)) (Name &j:2 Load) None))) (Return (Tuple (list (_starred_content (UnaryOp USub (Subscript (Name &v:2 Load) (_slice_content (Constant i0 None)) Load))) (_starred_content (Name &ans:2 Load))) Load))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &n:3 None None) (arg &k:3 None None) (arg &a:3 None None) (arg &b:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &A:3 Store)) (ListComp (fn_3 &n:3) (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:3 Load) Add (Constant i1 None)))) nil) nil i0))) None) (fn_1 &n:3 &i:3 (/choiceseq (fn_1 &k:3 &j:3 (/choiceseq (Assign (list (Subscript (Subscript (Name &A:3 Load) (_slice_content (Name &i:3 Load)) Load) (_slice_content (Name &j:3 Load)) Store)) (BinOp (Subscript (Name &a:3 Load) (_slice_content (Name &i:3 Load)) Load) Add (BinOp (BinOp (Name &j:3 Load) Sub (Constant i1 None)) Mult (Subscript (Name &b:3 Load) (_slice_content (Name &i:3 Load)) Load))) None))) (For (Name &j:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:3 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &n:3 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Subscript (Name &A:3 Load) (_slice_content (Name &i:3 Load)) Load) (_slice_content (Name &j:3 Load)) Store)) (BinOp (BinOp (Name &k:3 Load) Sub (Constant i1 None)) Mult (Subscript (Name &b:3 Load) (_slice_content (Name &i:3 Load)) Load)) None)) (/seq) None))) (For (Tuple (list (_starred_content (Name &i:3 Store)) (_starred_content (Name &row:3 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &A:3 Load))) nil) (/seq (Assign (list (Name &M:3 Store)) (Call (Name g_max Load) (list (_starred_content (Name &row:3 Load))) nil) None) (For (Name &j:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:3 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Subscript (Name &A:3 Load) (_slice_content (Name &i:3 Load)) Load) (_slice_content (Name &j:3 Load)) Store)) (BinOp (Name &M:3 Load) Sub (Subscript (Subscript (Name &A:3 Load) (_slice_content (Name &i:3 Load)) Load) (_slice_content (Name &j:3 Load)) Load)) None)) (/seq) None)) (/seq) None) (Assign (list (Tuple (list (_starred_content (Name &cost:3 Store)) (_starred_content (Name &match:3 Store))) Store)) (Call (Name &solve_hungarian:0 Load) (list (_starred_content (Name &A:3 Load)) (_starred_content (Name &n:3 Load)) (_starred_content (Name &n:3 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &n:3 Load) Add (BinOp (Name &n:3 Load) Sub (Name &k:3 Load))))) nil)) (Assign (list (Name &role_to_creature:3 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_zip Load) (list (_starred_content (Name &match:3 Load)) (_starred_content (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &match:3 Load))) nil))) nil))) nil))) nil) None) (Expr (Call (Attribute (Name &role_to_creature:3 Load) s_sort Load) nil nil)) (Assign (list (Name &res:3 Store)) (List nil Load) None) (For (Name &index:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &k:3 Load))) nil) (/seq (Expr (Call (Attribute (Name &res:3 Load) s_append Load) (list (_starred_content (Subscript (Subscript (Name &role_to_creature:3 Load) (_slice_content (Name &index:3 Load)) Load) (_slice_content (Constant i1 None)) Load))) nil))) (/seq) None) (For (Name &index:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:3 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &n:3 Load) Add (Constant i1 None)))) nil) (fn_2 (Subscript (Subscript (Name &role_to_creature:3 Load) (_slice_content (Name &index:3 Load)) Load) (_slice_content (Constant i1 None)) Load) &res:3) (/seq) None) (Expr (Call (Attribute (Name &res:3 Load) s_append Load) (list (_starred_content (Subscript (Subscript (Name &role_to_creature:3 Load) (_slice_content (Name &k:3 Load)) Load) (_slice_content (Constant i1 None)) Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &res:3 Load))) nil))) nil))) nil))) nil None None) (FunctionDef &from_file:0 (arguments nil (list (arg &f:4 None None)) None nil nil None nil) (/seq (Return (Attribute (Name &f:4 Load) s_readline Load))) nil None None) (Assign (list (Name &t:0 Store)) (Call (Name &inp:0 Load) nil nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name &invr:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (List (list (_starred_content (Constant i0 None))) Load) None) (Assign (list (Name &b:0 Store)) (List (list (_starred_content (Constant i0 None))) Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &ai:0 Store)) (_starred_content (Name &bi:0 Store))) Store)) (Call (Name &invr:0 Load) nil nil) None) (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (_starred_content (Name &ai:0 Load))) nil)) (Expr (Call (Attribute (Name &b:0 Load) s_append Load) (list (_starred_content (Name &bi:0 Load))) nil))) (/seq) None) (Expr (Call (Name &solve:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil))) (/seq) None)) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &readline:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &read:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_read Load) None) (Assign (list (Name &ns:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Name &readline:0 Load) nil nil) s_rstrip Load) nil nil)) None) (Assign (list (Name &ni:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name &readline:0 Load) nil nil) s_rstrip Load) nil nil))) nil)) None) (Assign (list (Name &nm:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &readline:0 Load) nil nil) s_split Load) nil nil))) nil)) None) (Assign (list (Name &nl:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &readline:0 Load) nil nil) s_split Load) nil nil))) nil))) nil)) None) (Assign (list (Name &prn:0 Store)) (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Call (Name g_print Load) (list (_starred_starred (Starred (Name &x:2 Load) Load))) (list (keyword s_sep (Constant s-WzEwXQ== None))))) None) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &k:1 Store))) Store)) (Call (Name &nm:0 Load) nil nil) None) (Assign (list (Name &mini:1 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (BinOp (Call (Name &nl:0 Load) nil nil) Add (List (list (_starred_content (BinOp (Name &i:3 Load) Add (Constant i1 None)))) Load)))) nil) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (Expr (Call (Attribute (Name &mini:1 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:5 None None)) None nil nil None nil) (Subscript (Name &x:5 Load) (_slice_content (Constant i1 None)) Load)))))) (Assign (list (Name &dp:1 Store)) (BinOp (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load) Mult (BinOp (Name &k:1 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Constant i0 None)) Store)) (Constant i0 None) None) (Assign (list (Name &f:1 Store)) (ListComp (fn_3 &k:1) (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (Name &k:1 Load)) Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Subscript (Name &dp:1 Load) (_slice_content (Name &k:1 Load)) Store) Add (BinOp (BinOp (Name &k:1 Load) Sub (Constant i1 None)) Mult (Subscript (Subscript (Name &mini:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i1 None)) Load)))) (/seq)) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:1 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (Name &j:1 Load)) Load) (list GtE) (list (Constant i0 None))) (/seq (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) Load) (list Lt) (list (BinOp (BinOp (Subscript (Name &dp:1 Load) (_slice_content (Name &j:1 Load)) Load) Add (Subscript (Subscript (Name &mini:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i0 None)) Load)) Add (BinOp (Name &j:1 Load) Mult (Subscript (Subscript (Name &mini:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i1 None)) Load))))) (/seq (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) Store)) (BinOp (BinOp (Subscript (Name &dp:1 Load) (_slice_content (Name &j:1 Load)) Load) Add (Subscript (Subscript (Name &mini:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i0 None)) Load)) Add (BinOp (Name &j:1 Load) Mult (Subscript (Subscript (Name &mini:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i1 None)) Load))) None) (Assign (list (Subscript (Subscript (Name &f:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) Store)) (Constant i1 None) None)) (/seq)) (AugAssign (Subscript (Name &dp:1 Load) (_slice_content (Name &j:1 Load)) Store) Add (BinOp (BinOp (Name &k:1 Load) Sub (Constant i1 None)) Mult (Subscript (Subscript (Name &mini:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i1 None)) Load)))) (/seq))) (/seq) None)) (/seq) None) (Assign (list (Name &cx:1 Store)) (Name &k:1 Load) None) (Assign (list (Name &a:1 Store)) (Call (Name g_list Load) nil nil) None) (Assign (list (Name &b:1 Store)) (Call (Name g_list Load) nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Subscript (Subscript (Name &f:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &cx:1 Load)) Load) (/seq (Expr (Call (Attribute (Name &a:1 Load) s_append Load) (list (_starred_content (Subscript (Subscript (Name &mini:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i2 None)) Load))) nil)) (AugAssign (Name &cx:1 Store) Sub (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &b:1 Load) s_append Load) (list (_starred_content (Subscript (Subscript (Name &mini:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i2 None)) Load))) nil))))) (/seq) None) (Assign (list (Name &com:1 Store)) (Call (Name g_list Load) nil nil) None) (For (Name &x:1 Store) (Subscript (Name &a:1 Load) (_slice_slice (Slice None (Constant i0 None) (UnaryOp USub (Constant i1 None)))) Load) (/seq (Expr (Call (Attribute (Name &com:1 Load) s_append Load) (list (_starred_content (Name &x:1 Load))) nil))) (/seq) None) (For (Name &x:1 Store) (Name &b:1 Load) (fn_2 (Name &x:1 Load) &com:1) (/seq) None) (Expr (Call (Attribute (Name &com:1 Load) s_append Load) (list (_starred_content (Subscript (Name &a:1 Load) (_slice_content (Constant i0 None)) Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &com:1 Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &com:1 Load) Load))) nil)) (Return None)) nil None None) (Assign (list (Name &T:0 Store)) (Call (Name &ni:0 Load) nil nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &T:0 Load))) nil) (/seq (Expr (Call (Name &solve:0 Load) nil nil))) (/seq) None)) nil)"
        ]
    }
]
