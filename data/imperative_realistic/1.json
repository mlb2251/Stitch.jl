["(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &A:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &A:0 Store))\n          (BinOp\n            (Name &A:0 Load)\n            Add\n            (List (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) Load)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &a:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare\n                (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil)\n                (list Lt)\n                (list (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i0 None) Load)) nil))\n              )\n              (Compare\n                (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil)\n                (list Gt)\n                (list (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i1 None) Load)) nil))\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil)\n                    Mult\n                    (BinOp\n                      (BinOp\n                        (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i1 None) Load)) nil)\n                        FloorDiv\n                        (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil)\n                      )\n                      Add\n                      (Constant i1 None)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n          (/seq\n            (If\n              (Compare (Name &r:0 Load) (list Lt) (list (Name &d:0 Load)))\n              (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n              (/seq\n                (If\n                  (Compare (Name &r:0 Load) (list Eq) (list (Name &d:0 Load)))\n                  (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &d:0 Load) Mult (Constant i2 None))) nil)))\n                  (/seq\n                    (If\n                      (Compare (BinOp (Name &r:0 Load) Mod (Name &d:0 Load)) (list NotEq) (list (Constant i0 None)))\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (Call\n                                  (Attribute (Name g_math Load) s_ceil Load)\n                                  (list (BinOp (Name &r:0 Load) Div (Name &d:0 Load)))\n                                  nil\n                                )\n                                Mult\n                                (Name &d:0 Load)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &r:0 Load) Add (Name &d:0 Load))) nil)))\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (For\n      (Name &k:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (Name &l:0 Load) (list Eq) (list (Constant i1 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &r:0 Load) Add (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)))\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &l:0 Load) (list GtE) (list (Name &d:0 Load)))\n              (/seq\n                (If\n                  (Compare (BinOp (Name &l:0 Load) Mod (Name &d:0 Load)) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (If\n                      (Compare (BinOp (Name &l:0 Load) FloorDiv (Name &d:0 Load)) (list Gt) (list (Constant i1 None)))\n                      (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None))\n                                Mult\n                                (Name &d:0 Load)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None))\n                        Mult\n                        (Name &d:0 Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) FloorDiv (Name &d:0 Load))\n                    Mult\n                    (Name &d:0 Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &func:0\n      (arguments nil (list (arg &l:1 None None) (arg &r:1 None None) (arg &d:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &l:1 Load) (list LtE) (list (Name &d:1 Load)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (BinOp (BinOp (Name &r:1 Load) FloorDiv (Name &d:1 Load)) Add (Constant i1 None))\n                    Mult\n                    (Name &d:1 Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Name &d:1 Load)) nil)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &count:2 Store))\n          (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)\n          None\n        )\n        (For\n          (Name &_:2 Store)\n          (Call (Name g_range Load) (list (Name &count:2 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &arr:2 Store))\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n              None\n            )\n            (Expr\n              (Call\n                (Name &func:0 Load)\n                (list\n                  (Call (Name g_int Load) (list (Subscript (Name &arr:2 Load) (Constant i0 None) Load)) nil)\n                  (Call (Name g_int Load) (list (Subscript (Name &arr:2 Load) (Constant i1 None) Load)) nil)\n                  (Call (Name g_int Load) (list (Subscript (Name &arr:2 Load) (Constant i2 None) Load)) nil)\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &q:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &inputs:0 Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign\n          (list (Name &l:0 Store))\n          (Call (Name g_int Load) (list (Subscript (Name &inputs:0 Load) (Constant i0 None) Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &r:0 Store))\n          (Call (Name g_int Load) (list (Subscript (Name &inputs:0 Load) (Constant i1 None) Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &d:0 Store))\n          (Call (Name g_int Load) (list (Subscript (Name &inputs:0 Load) (Constant i2 None) Load)) nil)\n          None\n        )\n        (If\n          (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n          (/seq\n            (Assign (list (Name &x:0 Store)) (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) None)\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (BinOp (Name &d:0 Load) Mult (BinOp (Name &x:0 Load) Add (Constant i1 None))))\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &c:0 Load) (list Gt) (list (Name &b:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Lt) (list (Name &a:0 Load)))\n              (/seq (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (BinOp (BinOp (Name &b:0 Load) FloorDiv (Name &c:0 Load)) Add (Constant i1 None))\n                        Mult\n                        (Name &c:0 Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Constant\n            s-Wzk3LCAzMiwgNjEsIDMyLCAxMDgsIDMyLCA0NywgNDcsIDMyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTgsIDMyLCA2MSwgMzIsIDExNCwgMzIsIDQ3LCA0NywgMzIsIDEwMCwgMTAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYxLCAzMiwgOTcsIDQyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA1MCwgMzIsIDYxLCAzMiwgOTgsIDQyLCAxMDAsIDEwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYwLCAzMiwgMTA4LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDMzLCA2MSwgMzIsIDQ4LCA1OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDQ5LCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDUsIDEwMiwgMzIsIDk3LCAxMTAsIDExNSwgNTAsIDMyLCA2MiwgMzIsIDExNCwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMTIsIDExNCwgMTA1LCAxMTAsIDExNiwgNDAsIDk3LCAxMTAsIDExNSwgNTAsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDUwLCA0MywgMTAwLCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMl0=\n            None\n          )\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None))\n                    Mult\n                    (Name &d:0 Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &q:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute\n                  (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (If\n          (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load)))\n          (/seq (Assign (list (Name &ans:0 Store)) (Name &d:0 Load) None))\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) Sub (BinOp (Name &r:0 Load) Mod (Name &d:0 Load)))\n              None\n            )\n          )\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (For\n      (Name &u:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &d:0 Load) (list GtE) (list (Name &l:0 Load)))\n                  (Compare (Name &d:0 Load) (list LtE) (list (Name &r:0 Load)))\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None))\n                        Mult\n                        (Name &d:0 Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &d:0 Load) (list Gt) (list (Name &r:0 Load)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n                  nil\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)"]