["(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (ClassDef\n      &Tree:0\n      (list (Name g_object Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_tree Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp (BinOp (Constant i4 None) Mult (Name &n:2 Load)) Add (Constant i10 None))\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_b Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:2 Load) Add (Constant i10 None)))\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_a Store))\n              (Call\n                (Name g_list Load)\n                (list\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (Name g_int Load)\n                      (Call\n                        (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load)\n                        nil\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Name &n:2 Load) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:1\n          (arguments\n            nil\n            (list\n              (arg &self:3 None None)\n              (arg &L:3 None None)\n              (arg &C:3 None None)\n              (arg &l:3 None None)\n              (arg &r:3 None None)\n              (arg &rt:3 None None)\n            )\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &l:3 Load) (list Eq) (list (Name &r:3 Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:3 Load) s_tree Load) (Name &rt:3 Load) Store)\n                  Add\n                  (Name &C:3 Load)\n                )\n                (Return None)\n              )\n              nil\n            )\n            (Assign\n              (list (Name &mid:3 Store))\n              (BinOp (BinOp (Name &l:3 Load) Add (Name &r:3 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (If\n              (Compare (Name &L:3 Load) (list LtE) (list (Name &mid:3 Load)))\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &self:3 Load) s_update Load)\n                    (list\n                      (Name &L:3 Load)\n                      (Name &C:3 Load)\n                      (Name &l:3 Load)\n                      (Name &mid:3 Load)\n                      (BinOp (Name &rt:3 Load) LShift (Constant i1 None))\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &self:3 Load) s_update Load)\n                    (list\n                      (Name &L:3 Load)\n                      (Name &C:3 Load)\n                      (BinOp (Name &mid:3 Load) Add (Constant i1 None))\n                      (Name &r:3 Load)\n                      (BinOp (BinOp (Name &rt:3 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n            (Assign\n              (list (Subscript (Attribute (Name &self:3 Load) s_tree Load) (Name &rt:3 Load) Store))\n              (BinOp\n                (Subscript\n                  (Attribute (Name &self:3 Load) s_tree Load)\n                  (BinOp (Name &rt:3 Load) LShift (Constant i1 None))\n                  Load\n                )\n                Add\n                (Subscript\n                  (Attribute (Name &self:3 Load) s_tree Load)\n                  (BinOp (BinOp (Name &rt:3 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))\n                  Load\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:1\n          (arguments\n            nil\n            (list\n              (arg &self:4 None None)\n              (arg &s:4 None None)\n              (arg &l:4 None None)\n              (arg &r:4 None None)\n              (arg &rt:4 None None)\n            )\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If (Compare (Name &l:4 Load) (list Eq) (list (Name &r:4 Load))) (/seq (Return (Name &l:4 Load))) nil)\n            (Assign\n              (list (Name &mid:4 Store))\n              (BinOp (BinOp (Name &l:4 Load) Add (Name &r:4 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (If\n              (Compare\n                (Subscript\n                  (Attribute (Name &self:4 Load) s_tree Load)\n                  (BinOp (Name &rt:4 Load) LShift (Constant i1 None))\n                  Load\n                )\n                (list Gt)\n                (list (Name &s:4 Load))\n              )\n              (/seq\n                (Return\n                  (Call\n                    (Attribute (Name &self:4 Load) s_query Load)\n                    (list\n                      (Name &s:4 Load)\n                      (Name &l:4 Load)\n                      (Name &mid:4 Load)\n                      (BinOp (Name &rt:4 Load) LShift (Constant i1 None))\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Return\n                  (Call\n                    (Attribute (Name &self:4 Load) s_query Load)\n                    (list\n                      (BinOp\n                        (Name &s:4 Load)\n                        Sub\n                        (Subscript\n                          (Attribute (Name &self:4 Load) s_tree Load)\n                          (BinOp (Name &rt:4 Load) LShift (Constant i1 None))\n                          Load\n                        )\n                      )\n                      (BinOp (Name &mid:4 Load) Add (Constant i1 None))\n                      (Name &r:4 Load)\n                      (BinOp (BinOp (Name &rt:4 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &slove:1\n          (arguments nil (list (arg &self:5 None None)) None nil nil None nil)\n          (/seq\n            (For\n              (Name &i:5 Store)\n              (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &self:5 Load) s_update Load)\n                    (list\n                      (BinOp (Name &i:5 Load) Add (Constant i1 None))\n                      (BinOp (Name &i:5 Load) Add (Constant i1 None))\n                      (Constant i1 None)\n                      (Name &n:0 Load)\n                      (Constant i1 None)\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n            (For\n              (Name &i:5 Store)\n              (Call\n                (Name g_range Load)\n                (list (Name &n:0 Load) (Constant i0 None) (UnaryOp USub (Constant i1 None)))\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:5 Load) s_b Load) (Name &i:5 Load) Store))\n                  (Call\n                    (Attribute (Name &self:5 Load) s_query Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:5 Load) s_a Load)\n                        (BinOp (Name &i:5 Load) Sub (Constant i1 None))\n                        Load\n                      )\n                      (Constant i1 None)\n                      (Name &n:0 Load)\n                      (Constant i1 None)\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &self:5 Load) s_update Load)\n                    (list\n                      (Subscript (Attribute (Name &self:5 Load) s_b Load) (Name &i:5 Load) Load)\n                      (UnaryOp USub (Subscript (Attribute (Name &self:5 Load) s_b Load) (Name &i:5 Load) Load))\n                      (Constant i1 None)\n                      (Name &n:0 Load)\n                      (Constant i1 None)\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n            (For\n              (Name &i:5 Store)\n              (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_stdout Load) s_write Load)\n                    (list\n                      (BinOp\n                        (Constant s-WzM3LCAxMDAsIDMyXQ== None)\n                        Mod\n                        (Subscript\n                          (Attribute (Name &self:5 Load) s_b Load)\n                          (BinOp (Name &i:5 Load) Add (Constant i1 None))\n                          Load\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil)\n          None\n        )\n        (Assign (list (Name &seg:0 Store)) (Call (Name &Tree:0 Load) (list (Name &n:0 Load)) nil) None)\n        (Expr (Call (Attribute (Name &seg:0 Load) s_slove Load) nil nil))\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &A:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &BIT:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (FunctionDef\n      &update:0\n      (arguments nil (list (arg &v:1 None None) (arg &w:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &v:1 Load) (list LtE) (list (Name &n:0 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &BIT:0 Load) (Name &v:1 Load) Store) Add (Name &w:1 Load))\n            (AugAssign (Name &v:1 Store) Add (BinOp (Name &v:1 Load) BitAnd (UnaryOp USub (Name &v:1 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getvalue:0\n      (arguments nil (list (arg &v:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ANS:2 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &v:2 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &ANS:2 Store) Add (Subscript (Name &BIT:0 Load) (Name &v:2 Load) Load))\n            (AugAssign (Name &v:2 Store) Sub (BinOp (Name &v:2 Load) BitAnd (UnaryOp USub (Name &v:2 Load))))\n          )\n          nil\n        )\n        (Return (Name &ANS:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq (Expr (Call (Name &update:0 Load) (list (Name &i:0 Load) (Name &i:0 Load)) nil)))\n      nil\n      None\n    )\n    (Assign\n      (list (Name &ANS:0 Store))\n      (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &MIN:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &MAX:0 Store)) (Name &n:0 Load) None)\n        (Assign (list (Name &k:0 Store)) (Subscript (Name &A:0 Load) (Name &i:0 Load) Load) None)\n        (While\n          (Constant True None)\n          (/seq\n            (Assign\n              (list (Name &x:0 Store))\n              (BinOp\n                (BinOp (BinOp (Name &MIN:0 Load) Add (Name &MAX:0 Load)) Add (Constant i1 None))\n                FloorDiv\n                (Constant i2 None)\n              )\n              None\n            )\n            (If\n              (Compare (Call (Name &getvalue:0 Load) (list (Name &x:0 Load)) nil) (list Gt) (list (Name &k:0 Load)))\n              (/seq\n                (If\n                  (Compare\n                    (Call (Name &getvalue:0 Load) (list (BinOp (Name &x:0 Load) Sub (Constant i1 None))) nil)\n                    (list Eq)\n                    (list (Name &k:0 Load))\n                  )\n                  (/seq\n                    (Assign (list (Subscript (Name &ANS:0 Load) (Name &i:0 Load) Store)) (Name &x:0 Load) None)\n                    Break\n                  )\n                  (/seq (Assign (list (Name &MAX:0 Store)) (Name &x:0 Load) None))\n                )\n              )\n              (/seq (Assign (list (Name &MIN:0 Store)) (Name &x:0 Load) None))\n            )\n          )\n          nil\n        )\n        (Expr (Call (Name &update:0 Load) (list (Name &x:0 Load) (UnaryOp USub (Name &x:0 Load))) nil))\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &ANS:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ClassDef\n      &FTree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &f:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_n Store))\n              (Call (Name g_len Load) (list (Name &f:2 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_ft Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp (Attribute (Name &self:2 Load) s_n Load) Add (Constant i1 None))\n              )\n              None\n            )\n            (For\n              (Name &i:2 Store)\n              (Call\n                (Name g_range Load)\n                (list (Constant i1 None) (BinOp (Attribute (Name &self:2 Load) s_n Load) Add (Constant i1 None)))\n                nil\n              )\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:2 Load) s_ft Load) (Name &i:2 Load) Store)\n                  Add\n                  (Subscript (Name &f:2 Load) (BinOp (Name &i:2 Load) Sub (Constant i1 None)) Load)\n                )\n                (If\n                  (Compare\n                    (BinOp\n                      (Name &i:2 Load)\n                      Add\n                      (Call (Attribute (Name &self:2 Load) s_lsone Load) (list (Name &i:2 Load)) nil)\n                    )\n                    (list LtE)\n                    (list (Attribute (Name &self:2 Load) s_n Load))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript\n                        (Attribute (Name &self:2 Load) s_ft Load)\n                        (BinOp\n                          (Name &i:2 Load)\n                          Add\n                          (Call (Attribute (Name &self:2 Load) s_lsone Load) (list (Name &i:2 Load)) nil)\n                        )\n                        Store\n                      )\n                      Add\n                      (Subscript (Attribute (Name &self:2 Load) s_ft Load) (Name &i:2 Load) Load)\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &lsone:1\n          (arguments nil (list (arg &self:3 None None) (arg &s:3 None None)) None nil nil None nil)\n          (/seq (Return (BinOp (Name &s:3 Load) BitAnd (UnaryOp USub (Name &s:3 Load)))))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:1\n          (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &j:4 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &i:4 Load) (list Gt) (list (Constant i1 None)))\n              (/seq\n                (Return\n                  (BinOp\n                    (Call (Attribute (Name &self:4 Load) s_query Load) (list (Constant i1 None) (Name &j:4 Load)) nil)\n                    Sub\n                    (Call\n                      (Attribute (Name &self:4 Load) s_query Load)\n                      (list (Constant i1 None) (BinOp (Name &i:4 Load) Sub (Constant i1 None)))\n                      nil\n                    )\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Name &s:4 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &j:4 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &s:4 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:4 Load) s_ft Load) (Name &j:4 Load) Load)\n                )\n                (AugAssign\n                  (Name &j:4 Store)\n                  Sub\n                  (Call (Attribute (Name &self:4 Load) s_lsone Load) (list (Name &j:4 Load)) nil)\n                )\n              )\n              nil\n            )\n            (Return (Name &s:4 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:1\n          (arguments nil (list (arg &self:5 None None) (arg &i:5 None None) (arg &v:5 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Name &i:5 Load) (list LtE) (list (Attribute (Name &self:5 Load) s_n Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:5 Load) s_ft Load) (Name &i:5 Load) Store)\n                  Add\n                  (Name &v:5 Load)\n                )\n                (AugAssign\n                  (Name &i:5 Store)\n                  Add\n                  (Call (Attribute (Name &self:5 Load) s_lsone Load) (list (Name &i:5 Load)) nil)\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &select:1\n          (arguments nil (list (arg &self:6 None None) (arg &k:6 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &lo:6 Store)) (Constant i1 None) None)\n            (Assign (list (Name &hi:6 Store)) (Attribute (Name &self:6 Load) s_n Load) None)\n            (For\n              (Name &i:6 Store)\n              (Call (Name g_range Load) (list (Constant i19 None)) nil)\n              (/seq\n                (Assign\n                  (list (Name &mid:6 Store))\n                  (BinOp (BinOp (Name &lo:6 Load) Add (Name &hi:6 Load)) FloorDiv (Constant i2 None))\n                  None\n                )\n                (If\n                  (Compare\n                    (Call (Attribute (Name &self:6 Load) s_query Load) (list (Constant i1 None) (Name &mid:6 Load)) nil)\n                    (list Lt)\n                    (list (Name &k:6 Load))\n                  )\n                  (/seq (Assign (list (Name &lo:6 Store)) (Name &mid:6 Load) None))\n                  (/seq (Assign (list (Name &hi:6 Store)) (Name &mid:6 Load) None))\n                )\n              )\n              nil\n              None\n            )\n            (Return (Name &hi:6 Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &data:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:7 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:7 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &ft:0 Store))\n      (Call\n        (Name &FTree:0 Load)\n        (list\n          (Call\n            (Name g_list Load)\n            (list\n              (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant s_ None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &val:0 Store)) (Subscript (Name &data:0 Load) (Name &i:0 Load) Load) None)\n        (Assign\n          (list (Name &ind:0 Store))\n          (Call\n            (Attribute (Name &ft:0 Load) s_select Load)\n            (list (BinOp (Name &val:0 Load) Add (Constant i1 None)))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store))\n          (Call (Name g_str Load) (list (Name &ind:0 Load)) nil)\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &ft:0 Load) s_update Load)\n            (list (Name &ind:0 Load) (UnaryOp USub (Name &ind:0 Load)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Name &ans:0 Load)) nil))\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None)\n    (ClassDef\n      &BIT:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &nums:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_nums Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (Call (Name g_len Load) (list (Name &nums:2 Load)) nil))\n              None\n            )\n            (For\n              (Tuple (list (Name &i:2 Store) (Name &x:2 Store)) Store)\n              (Call (Name g_enumerate Load) (list (Name &nums:2 Load)) nil)\n              (/seq\n                (If (Compare (Name &i:2 Load) (list Eq) (list (Constant i0 None))) (/seq Continue) nil)\n                (Expr (Call (Attribute (Name &self:2 Load) s_update Load) (list (Name &i:2 Load) (Name &x:2 Load)) nil))\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &low_bit:1\n          (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil)\n          (/seq (Return (BinOp (Name &x:3 Load) BitAnd (UnaryOp USub (Name &x:3 Load)))))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:1\n          (arguments\n            nil\n            (list (arg &self:4 None None) (arg &i:4 None None) (arg &diff:4 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (While\n              (Compare\n                (Name &i:4 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:4 Load) s_nums Load)) nil))\n              )\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:4 Load) s_nums Load) (Name &i:4 Load) Store)\n                  Add\n                  (Name &diff:4 Load)\n                )\n                (AugAssign\n                  (Name &i:4 Store)\n                  Add\n                  (Call (Attribute (Name &self:4 Load) s_low_bit Load) (list (Name &i:4 Load)) nil)\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &prefix_sum:1\n          (arguments nil (list (arg &self:5 None None) (arg &i:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &ret:5 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &i:5 Load) (list NotEq) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Name &ret:5 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:5 Load) s_nums Load) (Name &i:5 Load) Load)\n                )\n                (AugAssign\n                  (Name &i:5 Store)\n                  Sub\n                  (Call (Attribute (Name &self:5 Load) s_low_bit Load) (list (Name &i:5 Load)) nil)\n                )\n              )\n              nil\n            )\n            (Return (Name &ret:5 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &search:1\n          (arguments nil (list (arg &self:6 None None) (arg &x:6 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &cur_index:6 Store) (Name &cur_sum:6 Store)) Store))\n              (Tuple (list (Constant i0 None) (Constant i0 None)) Load)\n              None\n            )\n            (Assign\n              (list (Name &delta:6 Store))\n              (BinOp\n                (Call (Name g_len Load) (list (Attribute (Name &self:6 Load) s_nums Load)) nil)\n                Sub\n                (Constant i1 None)\n              )\n              None\n            )\n            (While\n              (BinOp\n                (Name &delta:6 Load)\n                Sub\n                (Call (Attribute (Name &self:6 Load) s_low_bit Load) (list (Name &delta:6 Load)) nil)\n              )\n              (/seq\n                (AugAssign\n                  (Name &delta:6 Store)\n                  Sub\n                  (Call (Attribute (Name &self:6 Load) s_low_bit Load) (list (Name &delta:6 Load)) nil)\n                )\n              )\n              nil\n            )\n            (While\n              (Name &delta:6 Load)\n              (/seq\n                (Assign (list (Name &m:6 Store)) (BinOp (Name &cur_index:6 Load) Add (Name &delta:6 Load)) None)\n                (If\n                  (Compare\n                    (Name &m:6 Load)\n                    (list Lt)\n                    (list (Call (Name g_len Load) (list (Attribute (Name &self:6 Load) s_nums Load)) nil))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &sm:6 Store))\n                      (BinOp\n                        (Name &cur_sum:6 Load)\n                        Add\n                        (Subscript (Attribute (Name &self:6 Load) s_nums Load) (Name &m:6 Load) Load)\n                      )\n                      None\n                    )\n                    (If\n                      (Compare (Name &sm:6 Load) (list LtE) (list (Name &x:6 Load)))\n                      (/seq\n                        (Assign\n                          (list (Tuple (list (Name &cur_index:6 Store) (Name &cur_sum:6 Store)) Store))\n                          (Tuple (list (Name &m:6 Load) (Name &sm:6 Load)) Load)\n                          None\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  nil\n                )\n                (AugAssign (Name &delta:6 Store) FloorDiv (Constant i2 None))\n              )\n              nil\n            )\n            (Return (BinOp (Name &cur_index:6 Load) Add (Constant i1 None)))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &bit:0 Store))\n      (Call\n        (Name &BIT:0 Load)\n        (list (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list (comprehension (Name &_:7 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Name &nums:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &index:0 Store))\n          (Call\n            (Attribute (Name &bit:0 Load) s_search Load)\n            (list (Subscript (Name &nums:0 Load) (Name &i:0 Load) Load))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &bit:0 Load) s_update Load)\n            (list (Name &index:0 Load) (UnaryOp USub (Name &index:0 Load)))\n            nil\n          )\n        )\n        (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &index:0 Load) None)\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (ImportFrom s_collections (list (alias g_deque None)) i0)\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_copy None)))\n    (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &arr:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:4 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:4 Store)\n            (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &bit:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &N:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign\n      (list (Name &series:0 Store))\n      (BinOp\n        (List (list (Constant i0 None)) Load)\n        Add\n        (ListComp\n          (Name &x:5 Load)\n          (list (comprehension (Name &x:5 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) nil i0))\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &lowbit:0\n      (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n      (/seq (Return (BinOp (Name &x:1 Load) BitAnd (UnaryOp USub (Name &x:1 Load)))))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &update:0\n      (arguments nil (list (arg &idx:2 None None) (arg &delta:2 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &idx:2 Load) (list LtE) (list (Name &N:0 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &bit:0 Load) (Name &idx:2 Load) Store) Add (Name &delta:2 Load))\n            (AugAssign (Name &idx:2 Store) Add (Call (Name &lowbit:0 Load) (list (Name &idx:2 Load)) nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &query:0\n      (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:3 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &x:3 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &s:3 Store) Add (Subscript (Name &bit:0 Load) (Name &x:3 Load) Load))\n            (AugAssign (Name &x:3 Store) Sub (Call (Name &lowbit:0 Load) (list (Name &x:3 Load)) nil))\n          )\n          nil\n        )\n        (Return (Name &s:3 Load))\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &N:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (AugAssign\n          (Subscript (Name &bit:0 Load) (Name &i:0 Load) Store)\n          Add\n          (Subscript (Name &series:0 Load) (Name &i:0 Load) Load)\n        )\n        (Assign\n          (list (Name &y:0 Store))\n          (BinOp (Name &i:0 Load) Add (Call (Name &lowbit:0 Load) (list (Name &i:0 Load)) nil))\n          None\n        )\n        (If\n          (Compare (Name &y:0 Load) (list LtE) (list (Name &N:0 Load)))\n          (/seq\n            (AugAssign\n              (Subscript (Name &series:0 Load) (Name &y:0 Load) Store)\n              Add\n              (Subscript (Name &series:0 Load) (Name &i:0 Load) Load)\n            )\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &visited:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &N:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Name &N:0 Load) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &left:0 Store)) (Constant i1 None) None)\n        (Assign (list (Name &right:0 Store)) (Name &N:0 Load) None)\n        (Assign (list (Name &target:0 Store)) (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) None)\n        (While\n          (Compare (Name &left:0 Load) (list LtE) (list (Name &right:0 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:0 Store))\n              (BinOp (BinOp (Name &left:0 Load) Add (Name &right:0 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (Assign (list (Name &q:0 Store)) (Call (Name &query:0 Load) (list (Name &mid:0 Load)) nil) None)\n            (If\n              (Compare (Name &q:0 Load) (list Lt) (list (Name &target:0 Load)))\n              (/seq (Assign (list (Name &left:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None))\n              (/seq\n                (If\n                  (Compare (Name &q:0 Load) (list Gt) (list (Name &target:0 Load)))\n                  (/seq (Assign (list (Name &right:0 Store)) (BinOp (Name &mid:0 Load) Sub (Constant i1 None)) None))\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &visited:0 Load) (Name &mid:0 Load) Load)\n                        (list Eq)\n                        (list (Constant i1 None))\n                      )\n                      (/seq (Assign (list (Name &left:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None))\n                      (/seq\n                        (Assign\n                          (list (Subscript (Name &visited:0 Load) (Name &mid:0 Load) Store))\n                          (Constant i1 None)\n                          None\n                        )\n                        (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &mid:0 Load) None)\n                        Break\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          nil\n        )\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list (BinOp (Name &mid:0 Load) Add (Constant i1 None)) (UnaryOp USub (Name &mid:0 Load)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &sum_number:0\n      (arguments nil (list (arg &n:1 None None) (arg &j:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Subscript (Name &j:1 Load) (Constant i0 None) Store)) (Constant i0 None) None)\n        (Assign (list (Subscript (Name &j:1 Load) (Constant i1 None) Store)) (Constant i0 None) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Constant i2 None) (BinOp (Name &n:1 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &j:1 Load) (Name &i:1 Load) Store))\n              (BinOp\n                (Subscript (Name &j:1 Load) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) Load)\n                Add\n                (BinOp (Name &i:1 Load) Sub (Constant i1 None))\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &j:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &po:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &l:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &po:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign\n      (list (Name &l1:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:4 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:4 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &getsum:0\n      (arguments nil (list (arg &BITTree:2 None None) (arg &i:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:2 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &i:2 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &s:2 Store) Add (Subscript (Name &BITTree:2 Load) (Name &i:2 Load) Load))\n            (AugAssign (Name &i:2 Store) Sub (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))\n          )\n          nil\n        )\n        (Return (Name &s:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &updatebit:0\n      (arguments\n        nil\n        (list (arg &BITTree:3 None None) (arg &n:3 None None) (arg &i:3 None None) (arg &v:3 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (While\n          (Compare (Name &i:3 Load) (list LtE) (list (Name &n:3 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &BITTree:3 Load) (Name &i:3 Load) Store) Add (Name &v:3 Load))\n            (AugAssign (Name &i:3 Store) Add (BinOp (Name &i:3 Load) BitAnd (UnaryOp USub (Name &i:3 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &po:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Name &updatebit:0 Load)\n            (list (Name &l:0 Load) (Name &po:0 Load) (Name &i:0 Load) (Name &i:0 Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &output:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &po:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Name &po:0 Load) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &min_:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &max_:0 Store)) (Name &po:0 Load) None)\n        (Assign (list (Name &k:0 Store)) (Subscript (Name &l1:0 Load) (Name &i:0 Load) Load) None)\n        (While\n          (Constant True None)\n          (/seq\n            (Assign\n              (list (Name &x:0 Store))\n              (BinOp\n                (BinOp (BinOp (Name &min_:0 Load) Add (Name &max_:0 Load)) Add (Constant i1 None))\n                FloorDiv\n                (Constant i2 None)\n              )\n              None\n            )\n            (If\n              (Compare\n                (Call (Name &getsum:0 Load) (list (Name &l:0 Load) (Name &x:0 Load)) nil)\n                (list Gt)\n                (list (Name &k:0 Load))\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Call\n                      (Name &getsum:0 Load)\n                      (list (Name &l:0 Load) (BinOp (Name &x:0 Load) Sub (Constant i1 None)))\n                      nil\n                    )\n                    (list Eq)\n                    (list (Name &k:0 Load))\n                  )\n                  (/seq\n                    (Assign (list (Subscript (Name &output:0 Load) (Name &i:0 Load) Store)) (Name &x:0 Load) None)\n                    Break\n                  )\n                  (/seq (Assign (list (Name &max_:0 Store)) (Name &x:0 Load) None))\n                )\n              )\n              (/seq (Assign (list (Name &min_:0 Store)) (Name &x:0 Load) None))\n            )\n          )\n          nil\n        )\n        (Expr\n          (Call\n            (Name &updatebit:0 Load)\n            (list (Name &l:0 Load) (Name &po:0 Load) (Name &x:0 Load) (UnaryOp USub (Name &x:0 Load)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &output:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &nn:0 Store)) (Constant i18 None) None)\n    (Assign\n      (list (Name &bit:0 Store))\n      (BinOp\n        (List (list (Constant i0 None)) Load)\n        Mult\n        (BinOp (BinOp (Constant i2 None) Pow (Name &nn:0 Load)) Add (Constant i1 None))\n      )\n      None\n    )\n    (FunctionDef\n      &addbit:0\n      (arguments nil (list (arg &i:1 None None) (arg &x:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &i:1 Load) (list LtE) (list (BinOp (Constant i2 None) Pow (Name &nn:0 Load))))\n          (/seq\n            (AugAssign (Subscript (Name &bit:0 Load) (Name &i:1 Load) Store) Add (Name &x:1 Load))\n            (AugAssign (Name &i:1 Store) Add (BinOp (Name &i:1 Load) BitAnd (UnaryOp USub (Name &i:1 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getsum:0\n      (arguments nil (list (arg &i:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ret:2 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &i:2 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &ret:2 Store) Add (Subscript (Name &bit:0 Load) (Name &i:2 Load) Load))\n            (AugAssign (Name &i:2 Store) Sub (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))\n          )\n          nil\n        )\n        (Return (Name &ret:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &searchbit:0\n      (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:3 Store) (Name &sl:3 Store)) Store))\n          (Tuple (list (Constant i0 None) (Constant i0 None)) Load)\n          None\n        )\n        (Assign\n          (list (Name &d:3 Store))\n          (BinOp (Constant i2 None) Pow (BinOp (Name &nn:0 Load) Sub (Constant i1 None)))\n          None\n        )\n        (While\n          (Name &d:3 Load)\n          (/seq\n            (Assign (list (Name &m:3 Store)) (BinOp (Name &l:3 Load) Add (Name &d:3 Load)) None)\n            (Assign\n              (list (Name &sm:3 Store))\n              (BinOp (Name &sl:3 Load) Add (Subscript (Name &bit:0 Load) (Name &m:3 Load) Load))\n              None\n            )\n            (If\n              (Compare (Name &sm:3 Load) (list LtE) (list (Name &x:3 Load)))\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &l:3 Store) (Name &sl:3 Store)) Store))\n                  (Tuple (list (Name &m:3 Load) (Name &sm:3 Load)) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (AugAssign (Name &d:3 Store) FloorDiv (Constant i2 None))\n          )\n          nil\n        )\n        (Return (BinOp (Name &l:3 Load) Add (Constant i1 None)))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq (Expr (Call (Name &addbit:0 Load) (list (Name &i:0 Load) (Name &i:0 Load)) nil)))\n      nil\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call (Name &searchbit:0 Load) (list (Subscript (Name &l:0 Load) (Name &i:0 Load) Load)) nil)\n          None\n        )\n        (Expr (Call (Name &addbit:0 Load) (list (Name &a:0 Load) (UnaryOp USub (Name &a:0 Load))) nil))\n        (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &a:0 Load) None)\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ClassDef\n      &segTree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_t Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) LShift (Constant i2 None)))\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:1\n          (arguments\n            nil\n            (list\n              (arg &self:4 None None)\n              (arg &node:4 None None)\n              (arg &l:4 None None)\n              (arg &r:4 None None)\n              (arg &index:4 None None)\n              (arg &value:4 None None)\n            )\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &l:4 Load) (list Eq) (list (Name &r:4 Load)))\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:4 Load) s_t Load) (Name &node:4 Load) Store))\n                  (Name &value:4 Load)\n                  None\n                )\n                (Return None)\n              )\n              nil\n            )\n            (Assign\n              (list (Name &mid:4 Store))\n              (BinOp (BinOp (Name &l:4 Load) Add (Name &r:4 Load)) RShift (Constant i1 None))\n              None\n            )\n            (If\n              (Compare (Name &index:4 Load) (list LtE) (list (Name &mid:4 Load)))\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &self:4 Load) s_update Load)\n                    (list\n                      (BinOp (Name &node:4 Load) Mult (Constant i2 None))\n                      (Name &l:4 Load)\n                      (Name &mid:4 Load)\n                      (Name &index:4 Load)\n                      (Name &value:4 Load)\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &self:4 Load) s_update Load)\n                    (list\n                      (BinOp (BinOp (Name &node:4 Load) Mult (Constant i2 None)) Add (Constant i1 None))\n                      (BinOp (Name &mid:4 Load) Add (Constant i1 None))\n                      (Name &r:4 Load)\n                      (Name &index:4 Load)\n                      (Name &value:4 Load)\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n            (Assign\n              (list (Subscript (Attribute (Name &self:4 Load) s_t Load) (Name &node:4 Load) Store))\n              (BinOp\n                (Subscript\n                  (Attribute (Name &self:4 Load) s_t Load)\n                  (BinOp (Name &node:4 Load) Mult (Constant i2 None))\n                  Load\n                )\n                Add\n                (Subscript\n                  (Attribute (Name &self:4 Load) s_t Load)\n                  (BinOp (BinOp (Name &node:4 Load) Mult (Constant i2 None)) Add (Constant i1 None))\n                  Load\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:1\n          (arguments\n            nil\n            (list\n              (arg &self:5 None None)\n              (arg &node:5 None None)\n              (arg &l:5 None None)\n              (arg &r:5 None None)\n              (arg &value:5 None None)\n            )\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &l:5 Load) (list Eq) (list (Name &r:5 Load)))\n              (/seq (Return (Subscript (Attribute (Name &self:5 Load) s_t Load) (Name &node:5 Load) Load)))\n              nil\n            )\n            (Assign\n              (list (Name &mid:5 Store))\n              (BinOp (BinOp (Name &l:5 Load) Add (Name &r:5 Load)) RShift (Constant i1 None))\n              None\n            )\n            (If\n              (Compare\n                (Subscript\n                  (Attribute (Name &self:5 Load) s_t Load)\n                  (BinOp (Name &node:5 Load) Mult (Constant i2 None))\n                  Load\n                )\n                (list GtE)\n                (list (Name &value:5 Load))\n              )\n              (/seq\n                (Return\n                  (Call\n                    (Attribute (Name &self:5 Load) s_query Load)\n                    (list\n                      (BinOp (Name &node:5 Load) Mult (Constant i2 None))\n                      (Name &l:5 Load)\n                      (Name &mid:5 Load)\n                      (Name &value:5 Load)\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (Return\n              (Call\n                (Attribute (Name &self:5 Load) s_query Load)\n                (list\n                  (BinOp (BinOp (Name &node:5 Load) Mult (Constant i2 None)) Add (Constant i1 None))\n                  (BinOp (Name &mid:5 Load) Add (Constant i1 None))\n                  (Name &r:5 Load)\n                  (BinOp\n                    (Name &value:5 Load)\n                    Sub\n                    (Subscript\n                      (Attribute (Name &self:5 Load) s_t Load)\n                      (BinOp (Name &node:5 Load) Mult (Constant i2 None))\n                      Load\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &do:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:2 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &nums:2 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &i:6 Load)) nil)\n            (list\n              (comprehension\n                (Name &i:6 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &res:2 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:2 Load)) None)\n        (Assign (list (Name &weightTree:2 Store)) (Call (Name &segTree:0 Load) (list (Name &n:2 Load)) nil) None)\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:2 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &weightTree:2 Load) s_update Load)\n                (list (Constant i1 None) (Constant i1 None) (Name &n:2 Load) (Name &i:2 Load) (Name &i:2 Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &i:2 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (BinOp (Name &n:2 Load) Sub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Subscript (Name &res:2 Load) (Name &i:2 Load) Store))\n              (Call\n                (Attribute (Name &weightTree:2 Load) s_query Load)\n                (list\n                  (Constant i1 None)\n                  (Constant i1 None)\n                  (Name &n:2 Load)\n                  (BinOp (Subscript (Name &nums:2 Load) (Name &i:2 Load) Load) Add (Constant i1 None))\n                )\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Name &weightTree:2 Load) s_update Load)\n                (list\n                  (Constant i1 None)\n                  (Constant i1 None)\n                  (Name &n:2 Load)\n                  (Subscript (Name &res:2 Load) (Name &i:2 Load) Load)\n                  (Constant i0 None)\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Return\n          (Call\n            (Attribute (Constant s-WzMyXQ== None) s_join Load)\n            (list\n              (ListComp\n                (Call (Name g_str Load) (list (Name &c:7 Load)) nil)\n                (list (comprehension (Name &c:7 Store) (Name &res:2 Load) nil i0))\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Call (Name &do:0 Load) nil nil)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &s:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &BIT:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (FunctionDef\n      &update:0\n      (arguments nil (list (arg &i:1 None None) (arg &w:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &i:1 Load) (list LtE) (list (Name &n:0 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &BIT:0 Load) (Name &i:1 Load) Store) Add (Name &w:1 Load))\n            (AugAssign (Name &i:1 Store) Add (BinOp (Name &i:1 Load) BitAnd (UnaryOp USub (Name &i:1 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &get_sum:0\n      (arguments nil (list (arg &i:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &res:2 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &i:2 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &res:2 Store) Add (Subscript (Name &BIT:0 Load) (Name &i:2 Load) Load))\n            (AugAssign (Name &i:2 Store) Sub (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))\n          )\n          nil\n        )\n        (Return (Name &res:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq (Expr (Call (Name &update:0 Load) (list (Name &i:0 Load) (Name &i:0 Load)) nil)))\n      nil\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Subscript\n        (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n        (Slice None None (UnaryOp USub (Constant i1 None)))\n        Load\n      )\n      (/seq\n        (Assign (list (Name &l:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &r:0 Store)) (Name &n:0 Load) None)\n        (Assign (list (Name &ss:0 Store)) (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) None)\n        (While\n          (Constant True None)\n          (/seq\n            (Assign\n              (list (Name &mid:0 Store))\n              (BinOp\n                (BinOp (BinOp (Name &l:0 Load) Add (Name &r:0 Load)) Add (Constant i1 None))\n                FloorDiv\n                (Constant i2 None)\n              )\n              None\n            )\n            (If\n              (Compare (Call (Name &get_sum:0 Load) (list (Name &mid:0 Load)) nil) (list Gt) (list (Name &ss:0 Load)))\n              (/seq\n                (If\n                  (Compare\n                    (Call (Name &get_sum:0 Load) (list (BinOp (Name &mid:0 Load) Sub (Constant i1 None))) nil)\n                    (list Eq)\n                    (list (Name &ss:0 Load))\n                  )\n                  (/seq\n                    (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &mid:0 Load) None)\n                    Break\n                  )\n                  (/seq (Assign (list (Name &r:0 Store)) (Name &mid:0 Load) None))\n                )\n              )\n              (/seq (Assign (list (Name &l:0 Store)) (Name &mid:0 Load) None))\n            )\n          )\n          nil\n        )\n        (Expr (Call (Name &update:0 Load) (list (Name &mid:0 Load) (UnaryOp USub (Name &mid:0 Load))) nil))\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (ImportFrom s_collections (list (alias g_deque None)) i0)\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_copy None)))\n    (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &arr:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:4 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:4 Store)\n            (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &bit:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &N:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign\n      (list (Name &series:0 Store))\n      (BinOp\n        (List (list (Constant i0 None)) Load)\n        Add\n        (ListComp\n          (Name &x:5 Load)\n          (list (comprehension (Name &x:5 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) nil i0))\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &lowbit:0\n      (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n      (/seq (Return (BinOp (Name &x:1 Load) BitAnd (UnaryOp USub (Name &x:1 Load)))))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &update:0\n      (arguments nil (list (arg &idx:2 None None) (arg &delta:2 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &idx:2 Load) (list LtE) (list (Name &N:0 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &bit:0 Load) (Name &idx:2 Load) Store) Add (Name &delta:2 Load))\n            (AugAssign (Name &idx:2 Store) Add (Call (Name &lowbit:0 Load) (list (Name &idx:2 Load)) nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &query:0\n      (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:3 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &x:3 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &s:3 Store) Add (Subscript (Name &bit:0 Load) (Name &x:3 Load) Load))\n            (AugAssign (Name &x:3 Store) Sub (Call (Name &lowbit:0 Load) (list (Name &x:3 Load)) nil))\n          )\n          nil\n        )\n        (Return (Name &s:3 Load))\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &N:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (AugAssign\n          (Subscript (Name &bit:0 Load) (Name &i:0 Load) Store)\n          Add\n          (Subscript (Name &series:0 Load) (Name &i:0 Load) Load)\n        )\n        (Assign\n          (list (Name &y:0 Store))\n          (BinOp (Name &i:0 Load) Add (Call (Name &lowbit:0 Load) (list (Name &i:0 Load)) nil))\n          None\n        )\n        (If\n          (Compare (Name &y:0 Load) (list LtE) (list (Name &N:0 Load)))\n          (/seq\n            (AugAssign\n              (Subscript (Name &series:0 Load) (Name &y:0 Load) Store)\n              Add\n              (Subscript (Name &series:0 Load) (Name &i:0 Load) Load)\n            )\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &visited:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &N:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Name &N:0 Load) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &left:0 Store)) (Constant i1 None) None)\n        (Assign (list (Name &right:0 Store)) (Name &N:0 Load) None)\n        (Assign (list (Name &target:0 Store)) (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) None)\n        (While\n          (Constant True None)\n          (/seq\n            (Assign\n              (list (Name &L:0 Store))\n              (BinOp (BinOp (Name &right:0 Load) Sub (Name &left:0 Load)) Add (Constant i1 None))\n              None\n            )\n            (Assign\n              (list (Name &num:0 Store))\n              (BinOp\n                (BinOp (Name &left:0 Load) Sub (Constant i1 None))\n                Add\n                (BinOp\n                  (Constant i2 None)\n                  Pow\n                  (Call\n                    (Name g_int Load)\n                    (list\n                      (Call (Attribute (Name g_math Load) s_log Load) (list (Name &L:0 Load) (Constant i2 None)) nil)\n                    )\n                    nil\n                  )\n                )\n              )\n              None\n            )\n            (Assign (list (Name &q:0 Store)) (Subscript (Name &bit:0 Load) (Name &num:0 Load) Load) None)\n            (If\n              (Compare (Name &q:0 Load) (list Lt) (list (Name &target:0 Load)))\n              (/seq\n                (AugAssign (Name &target:0 Store) Sub (Name &q:0 Load))\n                (Assign (list (Name &left:0 Store)) (BinOp (Name &num:0 Load) Add (Constant i1 None)) None)\n              )\n              (/seq\n                (If\n                  (Compare (Name &q:0 Load) (list Gt) (list (Name &target:0 Load)))\n                  (/seq (Assign (list (Name &right:0 Store)) (BinOp (Name &num:0 Load) Sub (Constant i1 None)) None))\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &visited:0 Load) (Name &num:0 Load) Load)\n                        (list Eq)\n                        (list (Constant i1 None))\n                      )\n                      (/seq\n                        (AugAssign (Name &target:0 Store) Sub (Name &q:0 Load))\n                        (Assign (list (Name &left:0 Store)) (BinOp (Name &num:0 Load) Add (Constant i1 None)) None)\n                      )\n                      (/seq\n                        (Assign\n                          (list (Subscript (Name &visited:0 Load) (Name &num:0 Load) Store))\n                          (Constant i1 None)\n                          None\n                        )\n                        (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &num:0 Load) None)\n                        Break\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          nil\n        )\n        (Expr\n          (Call\n            (Name &update:0 Load)\n            (list (BinOp (Name &num:0 Load) Add (Constant i1 None)) (UnaryOp USub (Name &num:0 Load)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_heapq None) (alias g_bisect None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_collections (list (alias g_deque None) (alias g_defaultdict None)) i0)\n    (ImportFrom s_fractions (list (alias g_Fraction None)) i0)\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &mod1:0 Store)) (Constant i998244353 None) None)\n    (Import (list (alias &os:0 None)))\n    (Import (list (alias &sys:0 None)))\n    (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name &IOBase:0 Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:17 None None) (arg &file:17 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:17 Load) s__fd Store))\n              (Call (Attribute (Name &file:17 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:17 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:17 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:17 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:17 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:17 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:17 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:18 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:18 Store))\n                  (Call\n                    (Attribute (Name &os:0 Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:18 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name &os:0 Load) s_fstat Load)\n                              (list (Attribute (Name &self:18 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:18 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:18 Store))\n                  (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:18 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:18 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:18 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:19 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:19 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:19 Store))\n                  (Call\n                    (Attribute (Name &os:0 Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:19 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name &os:0 Load) s_fstat Load)\n                              (list (Attribute (Name &self:19 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:19 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:19 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:19 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:19 Store))\n                  (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:19 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:19 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:19 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:20 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:20 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &os:0 Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:20 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name &IOBase:0 Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:21 None None) (arg &file:21 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:21 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:21 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:21 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:21 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:21 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:61 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:61 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:21 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:21 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (ClassDef\n      &TreeNode:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:3\n          (arguments\n            nil\n            (list (arg &self:22 None None) (arg &k:22 None None) (arg &v:22 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign (list (Attribute (Name &self:22 Load) s_key Store)) (Name &k:22 Load) None)\n            (Assign (list (Attribute (Name &self:22 Load) s_value Store)) (Name &v:22 Load) None)\n            (Assign (list (Attribute (Name &self:22 Load) s_left Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &self:22 Load) s_right Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &self:22 Load) s_parent Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &self:22 Load) s_height Store)) (Constant i1 None) None)\n            (Assign (list (Attribute (Name &self:22 Load) s_num_left Store)) (Constant i1 None) None)\n            (Assign (list (Attribute (Name &self:22 Load) s_num_total Store)) (Constant i1 None) None)\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &AvlTree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:4\n          (arguments nil (list (arg &self:23 None None)) None nil nil None nil)\n          (/seq (Assign (list (Attribute (Name &self:23 Load) s__tree Store)) (Constant None None) None))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:4\n          (arguments\n            nil\n            (list (arg &self:24 None None) (arg &k:24 None None) (arg &v:24 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (UnaryOp Not (Attribute (Name &self:24 Load) s__tree Load))\n              (/seq\n                (Assign\n                  (list (Attribute (Name &self:24 Load) s__tree Store))\n                  (Call (Name &TreeNode:0 Load) (list (Name &k:24 Load) (Name &v:24 Load)) nil)\n                  None\n                )\n                (Return None)\n              )\n              nil\n            )\n            (Assign\n              (list (Name &node:24 Store))\n              (Call (Attribute (Name &self:24 Load) s__add Load) (list (Name &k:24 Load) (Name &v:24 Load)) nil)\n              None\n            )\n            (If\n              (Name &node:24 Load)\n              (/seq (Expr (Call (Attribute (Name &self:24 Load) s__rebalance Load) (list (Name &node:24 Load)) nil)))\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_add:4\n          (arguments\n            nil\n            (list (arg &self:25 None None) (arg &k:25 None None) (arg &v:25 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign (list (Name &node:25 Store)) (Attribute (Name &self:25 Load) s__tree Load) None)\n            (While\n              (Name &node:25 Load)\n              (/seq\n                (If\n                  (Compare (Name &k:25 Load) (list Lt) (list (Attribute (Name &node:25 Load) s_key Load)))\n                  (/seq\n                    (If\n                      (Attribute (Name &node:25 Load) s_left Load)\n                      (/seq (Assign (list (Name &node:25 Store)) (Attribute (Name &node:25 Load) s_left Load) None))\n                      (/seq\n                        (Assign\n                          (list (Attribute (Name &node:25 Load) s_left Store))\n                          (Call (Name &TreeNode:0 Load) (list (Name &k:25 Load) (Name &v:25 Load)) nil)\n                          None\n                        )\n                        (Assign\n                          (list (Attribute (Attribute (Name &node:25 Load) s_left Load) s_parent Store))\n                          (Name &node:25 Load)\n                          None\n                        )\n                        (Return (Attribute (Name &node:25 Load) s_left Load))\n                      )\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare (Attribute (Name &node:25 Load) s_key Load) (list Lt) (list (Name &k:25 Load)))\n                      (/seq\n                        (If\n                          (Attribute (Name &node:25 Load) s_right Load)\n                          (/seq\n                            (Assign (list (Name &node:25 Store)) (Attribute (Name &node:25 Load) s_right Load) None)\n                          )\n                          (/seq\n                            (Assign\n                              (list (Attribute (Name &node:25 Load) s_right Store))\n                              (Call (Name &TreeNode:0 Load) (list (Name &k:25 Load) (Name &v:25 Load)) nil)\n                              None\n                            )\n                            (Assign\n                              (list (Attribute (Attribute (Name &node:25 Load) s_right Load) s_parent Store))\n                              (Name &node:25 Load)\n                              None\n                            )\n                            (Return (Attribute (Name &node:25 Load) s_right Load))\n                          )\n                        )\n                      )\n                      (/seq\n                        (Assign (list (Attribute (Name &node:25 Load) s_value Store)) (Name &v:25 Load) None)\n                        (Return None)\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get_height:4\n          (arguments nil (list (arg &x:26 None None)) None nil nil None nil)\n          (/seq (Return (IfExp (Name &x:26 Load) (Attribute (Name &x:26 Load) s_height Load) (Constant i0 None))))\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n        (FunctionDef\n          &get_num_total:4\n          (arguments nil (list (arg &x:27 None None)) None nil nil None nil)\n          (/seq (Return (IfExp (Name &x:27 Load) (Attribute (Name &x:27 Load) s_num_total Load) (Constant i0 None))))\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n        (FunctionDef\n          &_rebalance:4\n          (arguments nil (list (arg &self:28 None None) (arg &node:28 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &n:28 Store)) (Name &node:28 Load) None)\n            (While\n              (Name &n:28 Load)\n              (/seq\n                (Assign\n                  (list (Name &lh:28 Store))\n                  (Call\n                    (Attribute (Name &self:28 Load) s_get_height Load)\n                    (list (Attribute (Name &n:28 Load) s_left Load))\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &rh:28 Store))\n                  (Call\n                    (Attribute (Name &self:28 Load) s_get_height Load)\n                    (list (Attribute (Name &n:28 Load) s_right Load))\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &n:28 Load) s_height Store))\n                  (BinOp\n                    (Call (Name g_max Load) (list (Name &lh:28 Load) (Name &rh:28 Load)) nil)\n                    Add\n                    (Constant i1 None)\n                  )\n                  None\n                )\n                (Assign (list (Name &balance_factor:28 Store)) (BinOp (Name &lh:28 Load) Sub (Name &rh:28 Load)) None)\n                (Assign\n                  (list (Attribute (Name &n:28 Load) s_num_total Store))\n                  (BinOp\n                    (BinOp\n                      (Constant i1 None)\n                      Add\n                      (Call\n                        (Attribute (Name &self:28 Load) s_get_num_total Load)\n                        (list (Attribute (Name &n:28 Load) s_left Load))\n                        nil\n                      )\n                    )\n                    Add\n                    (Call\n                      (Attribute (Name &self:28 Load) s_get_num_total Load)\n                      (list (Attribute (Name &n:28 Load) s_right Load))\n                      nil\n                    )\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &n:28 Load) s_num_left Store))\n                  (BinOp\n                    (Constant i1 None)\n                    Add\n                    (Call\n                      (Attribute (Name &self:28 Load) s_get_num_total Load)\n                      (list (Attribute (Name &n:28 Load) s_left Load))\n                      nil\n                    )\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &balance_factor:28 Load) (list Gt) (list (Constant i1 None)))\n                  (/seq\n                    (If\n                      (Compare\n                        (Call\n                          (Attribute (Name &self:28 Load) s_get_height Load)\n                          (list (Attribute (Attribute (Name &n:28 Load) s_left Load) s_left Load))\n                          nil\n                        )\n                        (list Lt)\n                        (list\n                          (Call\n                            (Attribute (Name &self:28 Load) s_get_height Load)\n                            (list (Attribute (Attribute (Name &n:28 Load) s_left Load) s_right Load))\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr\n                          (Call\n                            (Attribute (Name &self:28 Load) s__rotate_left Load)\n                            (list (Attribute (Name &n:28 Load) s_left Load))\n                            nil\n                          )\n                        )\n                      )\n                      nil\n                    )\n                    (Expr (Call (Attribute (Name &self:28 Load) s__rotate_right Load) (list (Name &n:28 Load)) nil))\n                  )\n                  (/seq\n                    (If\n                      (Compare (Name &balance_factor:28 Load) (list Lt) (list (UnaryOp USub (Constant i1 None))))\n                      (/seq\n                        (If\n                          (Compare\n                            (Call\n                              (Attribute (Name &self:28 Load) s_get_height Load)\n                              (list (Attribute (Attribute (Name &n:28 Load) s_right Load) s_right Load))\n                              nil\n                            )\n                            (list Lt)\n                            (list\n                              (Call\n                                (Attribute (Name &self:28 Load) s_get_height Load)\n                                (list (Attribute (Attribute (Name &n:28 Load) s_right Load) s_left Load))\n                                nil\n                              )\n                            )\n                          )\n                          (/seq\n                            (Expr\n                              (Call\n                                (Attribute (Name &self:28 Load) s__rotate_right Load)\n                                (list (Attribute (Name &n:28 Load) s_right Load))\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                        )\n                        (Expr (Call (Attribute (Name &self:28 Load) s__rotate_left Load) (list (Name &n:28 Load)) nil))\n                      )\n                      (/seq (Assign (list (Name &n:28 Store)) (Attribute (Name &n:28 Load) s_parent Load) None))\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_remove_one:4\n          (arguments nil (list (arg &self:29 None None) (arg &node:29 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDgzLCAxMDUsIDEwMCwgMTAxLCAzMiwgMTAxLCAxMDIsIDEwMiwgMTAxLCA5OSwgMTE2LCAzMywgMzMsIDMzLCAzMiwgNjcsIDEwNCwgOTcsIDExMCwgMTAzLCAxMDEsIDExNSwgMzIsIDExMCwgMTExLCAxMDAsIDEwMSwgNDYsIDMyLCA3OCwgMTExLCAxMDAsIDEwMSwgMzIsIDExNSwgMTA0LCAxMTEsIDExNywgMTA4LCAxMDAsIDMyLCAxMDQsIDk3LCAxMTgsIDEwMSwgMzIsIDEwMSwgMTIwLCA5NywgOTksIDExNiwgMTA4LCAxMjEsIDMyLCAxMTEsIDExMCwgMTAxLCAzMiwgOTksIDEwNCwgMTA1LCAxMDgsIDEwMCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMl0=\n                None\n              )\n            )\n            (Assign\n              (list (Name &replacement:29 Store))\n              (BoolOp\n                Or\n                (list (Attribute (Name &node:29 Load) s_left Load) (Attribute (Name &node:29 Load) s_right Load))\n              )\n              None\n            )\n            (If\n              (Attribute (Name &node:29 Load) s_parent Load)\n              (/seq\n                (If\n                  (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:29 Load)) nil)\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:29 Load) s_parent Load) s_left Store))\n                      (Name &replacement:29 Load)\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:29 Load) s_parent Load) s_right Store))\n                      (Name &replacement:29 Load)\n                      None\n                    )\n                  )\n                )\n                (Assign\n                  (list (Attribute (Name &replacement:29 Load) s_parent Store))\n                  (Attribute (Name &node:29 Load) s_parent Load)\n                  None\n                )\n                (Assign (list (Attribute (Name &node:29 Load) s_parent Store)) (Constant None None) None)\n              )\n              (/seq\n                (Assign (list (Attribute (Name &self:29 Load) s__tree Store)) (Name &replacement:29 Load) None)\n                (Assign (list (Attribute (Name &replacement:29 Load) s_parent Store)) (Constant None None) None)\n              )\n            )\n            (Assign (list (Attribute (Name &node:29 Load) s_left Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &node:29 Load) s_right Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &node:29 Load) s_parent Store)) (Constant None None) None)\n            (Expr (Call (Attribute (Name &self:29 Load) s__rebalance Load) (list (Name &replacement:29 Load)) nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_remove_leaf:4\n          (arguments nil (list (arg &self:30 None None) (arg &node:30 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &node:30 Load) s_parent Load)\n              (/seq\n                (If\n                  (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:30 Load)) nil)\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:30 Load) s_parent Load) s_left Store))\n                      (Constant None None)\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:30 Load) s_parent Load) s_right Store))\n                      (Constant None None)\n                      None\n                    )\n                  )\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &self:30 Load) s__rebalance Load)\n                    (list (Attribute (Name &node:30 Load) s_parent Load))\n                    nil\n                  )\n                )\n              )\n              (/seq (Assign (list (Attribute (Name &self:30 Load) s__tree Store)) (Constant None None) None))\n            )\n            (Assign (list (Attribute (Name &node:30 Load) s_parent Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &node:30 Load) s_left Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &node:30 Load) s_right Store)) (Constant None None) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &remove:4\n          (arguments nil (list (arg &self:31 None None) (arg &k:31 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &node:31 Store))\n              (Call (Attribute (Name &self:31 Load) s__get_node Load) (list (Name &k:31 Load)) nil)\n              None\n            )\n            (If (UnaryOp Not (Name &node:31 Load)) (/seq (Return None)) nil)\n            (If\n              (Call (Attribute (Name &AvlTree:0 Load) s__is_leaf Load) (list (Name &node:31 Load)) nil)\n              (/seq\n                (Expr (Call (Attribute (Name &self:31 Load) s__remove_leaf Load) (list (Name &node:31 Load)) nil))\n                (Return None)\n              )\n              nil\n            )\n            (If\n              (BoolOp\n                And\n                (list (Attribute (Name &node:31 Load) s_left Load) (Attribute (Name &node:31 Load) s_right Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &nxt:31 Store))\n                  (Call (Attribute (Name &AvlTree:0 Load) s__get_next Load) (list (Name &node:31 Load)) nil)\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &node:31 Load) s_key Store))\n                  (Attribute (Name &nxt:31 Load) s_key Load)\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &node:31 Load) s_value Store))\n                  (Attribute (Name &nxt:31 Load) s_value Load)\n                  None\n                )\n                (If\n                  (Call (Attribute (Name &self:31 Load) s__is_leaf Load) (list (Name &nxt:31 Load)) nil)\n                  (/seq\n                    (Expr (Call (Attribute (Name &self:31 Load) s__remove_leaf Load) (list (Name &nxt:31 Load)) nil))\n                  )\n                  (/seq\n                    (Expr (Call (Attribute (Name &self:31 Load) s__remove_one Load) (list (Name &nxt:31 Load)) nil))\n                  )\n                )\n                (Expr (Call (Attribute (Name &self:31 Load) s__rebalance Load) (list (Name &node:31 Load)) nil))\n              )\n              (/seq (Expr (Call (Attribute (Name &self:31 Load) s__remove_one Load) (list (Name &node:31 Load)) nil)))\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get:4\n          (arguments nil (list (arg &self:32 None None) (arg &k:32 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &node:32 Store))\n              (Call (Attribute (Name &self:32 Load) s__get_node Load) (list (Name &k:32 Load)) nil)\n              None\n            )\n            (Return\n              (IfExp\n                (Name &node:32 Load)\n                (Attribute (Name &node:32 Load) s_value Load)\n                (UnaryOp USub (Constant i1 None))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_get_node:4\n          (arguments nil (list (arg &self:33 None None) (arg &k:33 None None)) None nil nil None nil)\n          (/seq\n            (If (UnaryOp Not (Attribute (Name &self:33 Load) s__tree Load)) (/seq (Return (Constant None None))) nil)\n            (Assign (list (Name &node:33 Store)) (Attribute (Name &self:33 Load) s__tree Load) None)\n            (While\n              (Name &node:33 Load)\n              (/seq\n                (If\n                  (Compare (Name &k:33 Load) (list Lt) (list (Attribute (Name &node:33 Load) s_key Load)))\n                  (/seq (Assign (list (Name &node:33 Store)) (Attribute (Name &node:33 Load) s_left Load) None))\n                  (/seq\n                    (If\n                      (Compare (Attribute (Name &node:33 Load) s_key Load) (list Lt) (list (Name &k:33 Load)))\n                      (/seq (Assign (list (Name &node:33 Store)) (Attribute (Name &node:33 Load) s_right Load) None))\n                      (/seq (Return (Name &node:33 Load)))\n                    )\n                  )\n                )\n              )\n              nil\n            )\n            (Return (Constant None None))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get_at:4\n          (arguments nil (list (arg &self:34 None None) (arg &pos:34 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &x:34 Store)) (BinOp (Name &pos:34 Load) Add (Constant i1 None)) None)\n            (Assign (list (Name &node:34 Store)) (Attribute (Name &self:34 Load) s__tree Load) None)\n            (While\n              (Name &node:34 Load)\n              (/seq\n                (If\n                  (Compare (Name &x:34 Load) (list Lt) (list (Attribute (Name &node:34 Load) s_num_left Load)))\n                  (/seq (Assign (list (Name &node:34 Store)) (Attribute (Name &node:34 Load) s_left Load) None))\n                  (/seq\n                    (If\n                      (Compare (Attribute (Name &node:34 Load) s_num_left Load) (list Lt) (list (Name &x:34 Load)))\n                      (/seq\n                        (AugAssign (Name &x:34 Store) Sub (Attribute (Name &node:34 Load) s_num_left Load))\n                        (Assign (list (Name &node:34 Store)) (Attribute (Name &node:34 Load) s_right Load) None)\n                      )\n                      (/seq\n                        (Return\n                          (Tuple\n                            (list\n                              (Attribute (Name &node:34 Load) s_key Load)\n                              (Attribute (Name &node:34 Load) s_value Load)\n                            )\n                            Load\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n            (Raise\n              (Call\n                (Name g_IndexError Load)\n                (list\n                  (Constant s-Wzc5LCAxMTcsIDExNiwgMzIsIDExMSwgMTAyLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgMTE1XQ== None)\n                )\n                nil\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_is_left:4\n          (arguments nil (list (arg &node:35 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (BoolOp\n                And\n                (list\n                  (Attribute (Attribute (Name &node:35 Load) s_parent Load) s_left Load)\n                  (Compare\n                    (Attribute (Attribute (Name &node:35 Load) s_parent Load) s_left Load)\n                    (list Eq)\n                    (list (Name &node:35 Load))\n                  )\n                )\n              )\n            )\n          )\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n        (FunctionDef\n          &_is_leaf:4\n          (arguments nil (list (arg &node:36 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (BoolOp\n                And\n                (list\n                  (Compare (Attribute (Name &node:36 Load) s_left Load) (list Is) (list (Constant None None)))\n                  (Compare (Attribute (Name &node:36 Load) s_right Load) (list Is) (list (Constant None None)))\n                )\n              )\n            )\n          )\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n        (FunctionDef\n          &_rotate_right:4\n          (arguments nil (list (arg &self:37 None None) (arg &node:37 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (UnaryOp Not (Attribute (Name &node:37 Load) s_parent Load))\n              (/seq\n                (Assign\n                  (list (Attribute (Name &self:37 Load) s__tree Store))\n                  (Attribute (Name &node:37 Load) s_left Load)\n                  None\n                )\n                (Assign\n                  (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_parent Store))\n                  (Constant None None)\n                  None\n                )\n              )\n              (/seq\n                (If\n                  (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:37 Load)) nil)\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:37 Load) s_parent Load) s_left Store))\n                      (Attribute (Name &node:37 Load) s_left Load)\n                      None\n                    )\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_parent Store))\n                      (Attribute (Name &node:37 Load) s_parent Load)\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:37 Load) s_parent Load) s_right Store))\n                      (Attribute (Name &node:37 Load) s_left Load)\n                      None\n                    )\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_parent Store))\n                      (Attribute (Name &node:37 Load) s_parent Load)\n                      None\n                    )\n                  )\n                )\n              )\n            )\n            (Assign\n              (list (Name &bk:37 Store))\n              (Attribute (Attribute (Name &node:37 Load) s_left Load) s_right Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_right Store))\n              (Name &node:37 Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:37 Load) s_parent Store))\n              (Attribute (Name &node:37 Load) s_left Load)\n              None\n            )\n            (Assign (list (Attribute (Name &node:37 Load) s_left Store)) (Name &bk:37 Load) None)\n            (If\n              (Name &bk:37 Load)\n              (/seq (Assign (list (Attribute (Name &bk:37 Load) s_parent Store)) (Name &node:37 Load) None))\n              nil\n            )\n            (Assign\n              (list (Attribute (Name &node:37 Load) s_height Store))\n              (BinOp\n                (Call\n                  (Name g_max Load)\n                  (list\n                    (Call\n                      (Attribute (Name &self:37 Load) s_get_height Load)\n                      (list (Attribute (Name &node:37 Load) s_left Load))\n                      nil\n                    )\n                    (Call\n                      (Attribute (Name &self:37 Load) s_get_height Load)\n                      (list (Attribute (Name &node:37 Load) s_right Load))\n                      nil\n                    )\n                  )\n                  nil\n                )\n                Add\n                (Constant i1 None)\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:37 Load) s_num_total Store))\n              (BinOp\n                (BinOp\n                  (Constant i1 None)\n                  Add\n                  (Call\n                    (Attribute (Name &self:37 Load) s_get_num_total Load)\n                    (list (Attribute (Name &node:37 Load) s_left Load))\n                    nil\n                  )\n                )\n                Add\n                (Call\n                  (Attribute (Name &self:37 Load) s_get_num_total Load)\n                  (list (Attribute (Name &node:37 Load) s_right Load))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:37 Load) s_num_left Store))\n              (BinOp\n                (Constant i1 None)\n                Add\n                (Call\n                  (Attribute (Name &self:37 Load) s_get_num_total Load)\n                  (list (Attribute (Name &node:37 Load) s_left Load))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_rotate_left:4\n          (arguments nil (list (arg &self:38 None None) (arg &node:38 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (UnaryOp Not (Attribute (Name &node:38 Load) s_parent Load))\n              (/seq\n                (Assign\n                  (list (Attribute (Name &self:38 Load) s__tree Store))\n                  (Attribute (Name &node:38 Load) s_right Load)\n                  None\n                )\n                (Assign\n                  (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_parent Store))\n                  (Constant None None)\n                  None\n                )\n              )\n              (/seq\n                (If\n                  (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:38 Load)) nil)\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:38 Load) s_parent Load) s_left Store))\n                      (Attribute (Name &node:38 Load) s_right Load)\n                      None\n                    )\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_parent Store))\n                      (Attribute (Name &node:38 Load) s_parent Load)\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:38 Load) s_parent Load) s_right Store))\n                      (Attribute (Name &node:38 Load) s_right Load)\n                      None\n                    )\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_parent Store))\n                      (Attribute (Name &node:38 Load) s_parent Load)\n                      None\n                    )\n                  )\n                )\n              )\n            )\n            (Assign\n              (list (Name &bk:38 Store))\n              (Attribute (Attribute (Name &node:38 Load) s_right Load) s_left Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_left Store))\n              (Name &node:38 Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:38 Load) s_parent Store))\n              (Attribute (Name &node:38 Load) s_right Load)\n              None\n            )\n            (Assign (list (Attribute (Name &node:38 Load) s_right Store)) (Name &bk:38 Load) None)\n            (If\n              (Name &bk:38 Load)\n              (/seq (Assign (list (Attribute (Name &bk:38 Load) s_parent Store)) (Name &node:38 Load) None))\n              nil\n            )\n            (Assign\n              (list (Attribute (Name &node:38 Load) s_height Store))\n              (BinOp\n                (Call\n                  (Name g_max Load)\n                  (list\n                    (Call\n                      (Attribute (Name &self:38 Load) s_get_height Load)\n                      (list (Attribute (Name &node:38 Load) s_left Load))\n                      nil\n                    )\n                    (Call\n                      (Attribute (Name &self:38 Load) s_get_height Load)\n                      (list (Attribute (Name &node:38 Load) s_right Load))\n                      nil\n                    )\n                  )\n                  nil\n                )\n                Add\n                (Constant i1 None)\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:38 Load) s_num_total Store))\n              (BinOp\n                (BinOp\n                  (Constant i1 None)\n                  Add\n                  (Call\n                    (Attribute (Name &self:38 Load) s_get_num_total Load)\n                    (list (Attribute (Name &node:38 Load) s_left Load))\n                    nil\n                  )\n                )\n                Add\n                (Call\n                  (Attribute (Name &self:38 Load) s_get_num_total Load)\n                  (list (Attribute (Name &node:38 Load) s_right Load))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:38 Load) s_num_left Store))\n              (BinOp\n                (Constant i1 None)\n                Add\n                (Call\n                  (Attribute (Name &self:38 Load) s_get_num_total Load)\n                  (list (Attribute (Name &node:38 Load) s_left Load))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_get_next:4\n          (arguments nil (list (arg &node:39 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (UnaryOp Not (Attribute (Name &node:39 Load) s_right Load))\n              (/seq (Return (Attribute (Name &node:39 Load) s_parent Load)))\n              nil\n            )\n            (Assign (list (Name &n:39 Store)) (Attribute (Name &node:39 Load) s_right Load) None)\n            (While\n              (Attribute (Name &n:39 Load) s_left Load)\n              (/seq (Assign (list (Name &n:39 Store)) (Attribute (Name &n:39 Load) s_left Load) None))\n              nil\n            )\n            (Return (Name &n:39 Load))\n          )\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &SegmentTree1:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:5\n          (arguments\n            nil\n            (list\n              (arg &self:40 None None)\n              (arg &data:40 None None)\n              (arg &default:40 None None)\n              (arg &func:40 None None)\n            )\n            None\n            nil\n            nil\n            None\n            (list\n              (Constant i0 None)\n              (Lambda\n                (arguments nil (list (arg &a:62 None None) (arg &b:62 None None)) None nil nil None nil)\n                (Call (Name g_max Load) (list (Name &a:62 Load) (Name &b:62 Load)) nil)\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd\n                None\n              )\n            )\n            (Assign (list (Attribute (Name &self:40 Load) s__default Store)) (Name &default:40 Load) None)\n            (Assign (list (Attribute (Name &self:40 Load) s__func Store)) (Name &func:40 Load) None)\n            (Assign\n              (list (Attribute (Name &self:40 Load) s__len Store))\n              (Call (Name g_len Load) (list (Name &data:40 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:40 Load) s__size Store) (Name &_size:40 Store))\n              (BinOp\n                (Constant i1 None)\n                LShift\n                (Call\n                  (Attribute\n                    (BinOp (Attribute (Name &self:40 Load) s__len Load) Sub (Constant i1 None))\n                    s_bit_length\n                    Load\n                  )\n                  nil\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:40 Load) s_data Store))\n              (BinOp\n                (List (list (Name &default:40 Load)) Load)\n                Mult\n                (BinOp (Constant i2 None) Mult (Name &_size:40 Load))\n              )\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:40 Load) s_data Load)\n                  (Slice\n                    (Name &_size:40 Load)\n                    (BinOp (Name &_size:40 Load) Add (Attribute (Name &self:40 Load) s__len Load))\n                    None\n                  )\n                  Store\n                )\n              )\n              (Name &data:40 Load)\n              None\n            )\n            (For\n              (Name &i:40 Store)\n              (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:40 Load)) nil)) nil)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:40 Load) s_data Load) (Name &i:40 Load) Store))\n                  (Call\n                    (Name &func:40 Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:40 Load) s_data Load)\n                        (BinOp (Name &i:40 Load) Add (Name &i:40 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:40 Load) s_data Load)\n                        (BinOp (BinOp (Name &i:40 Load) Add (Name &i:40 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__delitem__:5\n          (arguments nil (list (arg &self:41 None None) (arg &idx:41 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &self:41 Load) (Name &idx:41 Load) Store))\n              (Attribute (Name &self:41 Load) s__default Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__getitem__:5\n          (arguments nil (list (arg &self:42 None None) (arg &idx:42 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:42 Load) s_data Load)\n                (BinOp (Name &idx:42 Load) Add (Attribute (Name &self:42 Load) s__size Load))\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__setitem__:5\n          (arguments\n            nil\n            (list (arg &self:43 None None) (arg &idx:43 None None) (arg &value:43 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &idx:43 Store) Add (Attribute (Name &self:43 Load) s__size Load))\n            (Assign\n              (list (Subscript (Attribute (Name &self:43 Load) s_data Load) (Name &idx:43 Load) Store))\n              (Name &value:43 Load)\n              None\n            )\n            (AugAssign (Name &idx:43 Store) RShift (Constant i1 None))\n            (While\n              (Name &idx:43 Load)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:43 Load) s_data Load) (Name &idx:43 Load) Store))\n                  (Call\n                    (Attribute (Name &self:43 Load) s__func Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:43 Load) s_data Load)\n                        (BinOp (Constant i2 None) Mult (Name &idx:43 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:43 Load) s_data Load)\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &idx:43 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (AugAssign (Name &idx:43 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__len__:5\n          (arguments nil (list (arg &self:44 None None)) None nil nil None nil)\n          (/seq (Return (Attribute (Name &self:44 Load) s__len Load)))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:5\n          (arguments\n            nil\n            (list (arg &self:45 None None) (arg &start:45 None None) (arg &stop:45 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &start:45 Load) (list Eq) (list (Name &stop:45 Load)))\n              (/seq\n                (Return (Call (Attribute (Name &self:45 Load) s___getitem__ Load) (list (Name &start:45 Load)) nil))\n              )\n              nil\n            )\n            (AugAssign (Name &stop:45 Store) Add (Constant i1 None))\n            (AugAssign (Name &start:45 Store) Add (Attribute (Name &self:45 Load) s__size Load))\n            (AugAssign (Name &stop:45 Store) Add (Attribute (Name &self:45 Load) s__size Load))\n            (Assign (list (Name &res:45 Store)) (Attribute (Name &self:45 Load) s__default Load) None)\n            (While\n              (Compare (Name &start:45 Load) (list Lt) (list (Name &stop:45 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &start:45 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (Assign\n                      (list (Name &res:45 Store))\n                      (Call\n                        (Attribute (Name &self:45 Load) s__func Load)\n                        (list\n                          (Name &res:45 Load)\n                          (Subscript (Attribute (Name &self:45 Load) s_data Load) (Name &start:45 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign (Name &start:45 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (If\n                  (BinOp (Name &stop:45 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign (Name &stop:45 Store) Sub (Constant i1 None))\n                    (Assign\n                      (list (Name &res:45 Store))\n                      (Call\n                        (Attribute (Name &self:45 Load) s__func Load)\n                        (list\n                          (Name &res:45 Load)\n                          (Subscript (Attribute (Name &self:45 Load) s_data Load) (Name &stop:45 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n                (AugAssign (Name &start:45 Store) RShift (Constant i1 None))\n                (AugAssign (Name &stop:45 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n            (Return (Name &res:45 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__repr__:5\n          (arguments nil (list (arg &self:46 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Call\n                (Attribute\n                  (Constant\n                    s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd\n                    None\n                  )\n                  s_format\n                  Load\n                )\n                (list (Attribute (Name &self:46 Load) s_data Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &SegmentTree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:6\n          (arguments\n            nil\n            (list\n              (arg &self:47 None None)\n              (arg &data:47 None None)\n              (arg &default:47 None None)\n              (arg &func:47 None None)\n            )\n            None\n            nil\n            nil\n            None\n            (list\n              (Constant i0 None)\n              (Lambda\n                (arguments nil (list (arg &a:63 None None) (arg &b:63 None None)) None nil nil None nil)\n                (BinOp (Name &a:63 Load) Add (Name &b:63 Load))\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd\n                None\n              )\n            )\n            (Assign (list (Attribute (Name &self:47 Load) s__default Store)) (Name &default:47 Load) None)\n            (Assign (list (Attribute (Name &self:47 Load) s__func Store)) (Name &func:47 Load) None)\n            (Assign\n              (list (Attribute (Name &self:47 Load) s__len Store))\n              (Call (Name g_len Load) (list (Name &data:47 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:47 Load) s__size Store) (Name &_size:47 Store))\n              (BinOp\n                (Constant i1 None)\n                LShift\n                (Call\n                  (Attribute\n                    (BinOp (Attribute (Name &self:47 Load) s__len Load) Sub (Constant i1 None))\n                    s_bit_length\n                    Load\n                  )\n                  nil\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:47 Load) s_data Store))\n              (BinOp\n                (List (list (Name &default:47 Load)) Load)\n                Mult\n                (BinOp (Constant i2 None) Mult (Name &_size:47 Load))\n              )\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:47 Load) s_data Load)\n                  (Slice\n                    (Name &_size:47 Load)\n                    (BinOp (Name &_size:47 Load) Add (Attribute (Name &self:47 Load) s__len Load))\n                    None\n                  )\n                  Store\n                )\n              )\n              (Name &data:47 Load)\n              None\n            )\n            (For\n              (Name &i:47 Store)\n              (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:47 Load)) nil)) nil)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:47 Load) s_data Load) (Name &i:47 Load) Store))\n                  (Call\n                    (Name &func:47 Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:47 Load) s_data Load)\n                        (BinOp (Name &i:47 Load) Add (Name &i:47 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:47 Load) s_data Load)\n                        (BinOp (BinOp (Name &i:47 Load) Add (Name &i:47 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__delitem__:6\n          (arguments nil (list (arg &self:48 None None) (arg &idx:48 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &self:48 Load) (Name &idx:48 Load) Store))\n              (Attribute (Name &self:48 Load) s__default Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__getitem__:6\n          (arguments nil (list (arg &self:49 None None) (arg &idx:49 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:49 Load) s_data Load)\n                (BinOp (Name &idx:49 Load) Add (Attribute (Name &self:49 Load) s__size Load))\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__setitem__:6\n          (arguments\n            nil\n            (list (arg &self:50 None None) (arg &idx:50 None None) (arg &value:50 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &idx:50 Store) Add (Attribute (Name &self:50 Load) s__size Load))\n            (Assign\n              (list (Subscript (Attribute (Name &self:50 Load) s_data Load) (Name &idx:50 Load) Store))\n              (Name &value:50 Load)\n              None\n            )\n            (AugAssign (Name &idx:50 Store) RShift (Constant i1 None))\n            (While\n              (Name &idx:50 Load)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:50 Load) s_data Load) (Name &idx:50 Load) Store))\n                  (Call\n                    (Attribute (Name &self:50 Load) s__func Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:50 Load) s_data Load)\n                        (BinOp (Constant i2 None) Mult (Name &idx:50 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:50 Load) s_data Load)\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &idx:50 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (AugAssign (Name &idx:50 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__len__:6\n          (arguments nil (list (arg &self:51 None None)) None nil nil None nil)\n          (/seq (Return (Attribute (Name &self:51 Load) s__len Load)))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:6\n          (arguments\n            nil\n            (list (arg &self:52 None None) (arg &start:52 None None) (arg &stop:52 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &start:52 Load) (list Eq) (list (Name &stop:52 Load)))\n              (/seq\n                (Return (Call (Attribute (Name &self:52 Load) s___getitem__ Load) (list (Name &start:52 Load)) nil))\n              )\n              nil\n            )\n            (AugAssign (Name &stop:52 Store) Add (Constant i1 None))\n            (AugAssign (Name &start:52 Store) Add (Attribute (Name &self:52 Load) s__size Load))\n            (AugAssign (Name &stop:52 Store) Add (Attribute (Name &self:52 Load) s__size Load))\n            (Assign (list (Name &res:52 Store)) (Attribute (Name &self:52 Load) s__default Load) None)\n            (While\n              (Compare (Name &start:52 Load) (list Lt) (list (Name &stop:52 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &start:52 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (Assign\n                      (list (Name &res:52 Store))\n                      (Call\n                        (Attribute (Name &self:52 Load) s__func Load)\n                        (list\n                          (Name &res:52 Load)\n                          (Subscript (Attribute (Name &self:52 Load) s_data Load) (Name &start:52 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign (Name &start:52 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (If\n                  (BinOp (Name &stop:52 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign (Name &stop:52 Store) Sub (Constant i1 None))\n                    (Assign\n                      (list (Name &res:52 Store))\n                      (Call\n                        (Attribute (Name &self:52 Load) s__func Load)\n                        (list\n                          (Name &res:52 Load)\n                          (Subscript (Attribute (Name &self:52 Load) s_data Load) (Name &stop:52 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n                (AugAssign (Name &start:52 Store) RShift (Constant i1 None))\n                (AugAssign (Name &stop:52 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n            (Return (Name &res:52 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__repr__:6\n          (arguments nil (list (arg &self:53 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Call\n                (Attribute\n                  (Constant\n                    s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd\n                    None\n                  )\n                  s_format\n                  Load\n                )\n                (list (Attribute (Name &self:53 Load) s_data Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &Factorial:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:7\n          (arguments nil (list (arg &self:54 None None) (arg &MOD:54 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:54 Load) s_MOD Store)) (Name &MOD:54 Load) None)\n            (Assign\n              (list (Attribute (Name &self:54 Load) s_factorials Store))\n              (List (list (Constant i1 None) (Constant i1 None)) Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:54 Load) s_invModulos Store))\n              (List (list (Constant i0 None) (Constant i1 None)) Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:54 Load) s_invFactorial_ Store))\n              (List (list (Constant i1 None) (Constant i1 None)) Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &calc:7\n          (arguments nil (list (arg &self:55 None None) (arg &n:55 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &n:55 Load) (list LtE) (list (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant\n                        s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTAsIDMzXQ==\n                        None\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant\n                          s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ==\n                          None\n                        )\n                        Add\n                        (Call (Name g_str Load) (list (Name &n:55 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              nil\n            )\n            (If\n              (Compare\n                (Name &n:55 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_factorials Load)) nil))\n              )\n              (/seq (Return (Subscript (Attribute (Name &self:55 Load) s_factorials Load) (Name &n:55 Load) Load)))\n              nil\n            )\n            (Assign\n              (list (Name &nextArr:55 Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp\n                  (BinOp (Name &n:55 Load) Add (Constant i1 None))\n                  Sub\n                  (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_factorials Load)) nil)\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &initialI:55 Store))\n              (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_factorials Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &prev:55 Store))\n              (Subscript (Attribute (Name &self:55 Load) s_factorials Load) (UnaryOp USub (Constant i1 None)) Load)\n              None\n            )\n            (Assign (list (Name &m:55 Store)) (Attribute (Name &self:55 Load) s_MOD Load) None)\n            (For\n              (Name &i:55 Store)\n              (Call\n                (Name g_range Load)\n                (list (Name &initialI:55 Load) (BinOp (Name &n:55 Load) Add (Constant i1 None)))\n                nil\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Name &prev:55 Store)\n                    (Subscript (Name &nextArr:55 Load) (BinOp (Name &i:55 Load) Sub (Name &initialI:55 Load)) Store)\n                  )\n                  (BinOp (BinOp (Name &prev:55 Load) Mult (Name &i:55 Load)) Mod (Name &m:55 Load))\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (AugAssign (Attribute (Name &self:55 Load) s_factorials Store) Add (Name &nextArr:55 Load))\n            (Return (Subscript (Attribute (Name &self:55 Load) s_factorials Load) (Name &n:55 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &inv:7\n          (arguments nil (list (arg &self:56 None None) (arg &n:56 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &n:56 Load) (list LtE) (list (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant\n                        s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTAsIDk0LCA0MCwgNDUsIDQ5LCA0MV0=\n                        None\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant\n                          s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ==\n                          None\n                        )\n                        Add\n                        (Call (Name g_str Load) (list (Name &n:56 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              nil\n            )\n            (Assign (list (Name &p:56 Store)) (Attribute (Name &self:56 Load) s_MOD Load) None)\n            (Assign (list (Name &pi:56 Store)) (BinOp (Name &n:56 Load) Mod (Name &p:56 Load)) None)\n            (If\n              (Compare\n                (Name &pi:56 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invModulos Load)) nil))\n              )\n              (/seq (Return (Subscript (Attribute (Name &self:56 Load) s_invModulos Load) (Name &pi:56 Load) Load)))\n              nil\n            )\n            (Assign\n              (list (Name &nextArr:56 Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp\n                  (BinOp (Name &n:56 Load) Add (Constant i1 None))\n                  Sub\n                  (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invModulos Load)) nil)\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &initialI:56 Store))\n              (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invModulos Load)) nil)\n              None\n            )\n            (For\n              (Name &i:56 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (Name &initialI:56 Load)\n                  (Call (Name g_min Load) (list (Name &p:56 Load) (BinOp (Name &n:56 Load) Add (Constant i1 None))) nil)\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Name &next:56 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp\n                        USub\n                        (Subscript\n                          (Attribute (Name &self:56 Load) s_invModulos Load)\n                          (BinOp (Name &p:56 Load) Mod (Name &i:56 Load))\n                          Load\n                        )\n                      )\n                      Mult\n                      (BinOp (Name &p:56 Load) FloorDiv (Name &i:56 Load))\n                    )\n                    Mod\n                    (Name &p:56 Load)\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute (Attribute (Name &self:56 Load) s_invModulos Load) s_append Load)\n                    (list (Name &next:56 Load))\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n            (Return (Subscript (Attribute (Name &self:56 Load) s_invModulos Load) (Name &pi:56 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &invFactorial:7\n          (arguments nil (list (arg &self:57 None None) (arg &n:57 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &n:57 Load) (list LtE) (list (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant\n                        s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCA0MCwgMTEwLCA5NCwgNDAsIDQ1LCA0OSwgNDEsIDQxLCAzM10=\n                        None\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant\n                          s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ==\n                          None\n                        )\n                        Add\n                        (Call (Name g_str Load) (list (Name &n:57 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              nil\n            )\n            (If\n              (Compare\n                (Name &n:57 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:57 Load) s_invFactorial_ Load)) nil))\n              )\n              (/seq (Return (Subscript (Attribute (Name &self:57 Load) s_invFactorial_ Load) (Name &n:57 Load) Load)))\n              nil\n            )\n            (Expr (Call (Attribute (Name &self:57 Load) s_inv Load) (list (Name &n:57 Load)) nil))\n            (Assign\n              (list (Name &nextArr:57 Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp\n                  (BinOp (Name &n:57 Load) Add (Constant i1 None))\n                  Sub\n                  (Call (Name g_len Load) (list (Attribute (Name &self:57 Load) s_invFactorial_ Load)) nil)\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &initialI:57 Store))\n              (Call (Name g_len Load) (list (Attribute (Name &self:57 Load) s_invFactorial_ Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &prev:57 Store))\n              (Subscript (Attribute (Name &self:57 Load) s_invFactorial_ Load) (UnaryOp USub (Constant i1 None)) Load)\n              None\n            )\n            (Assign (list (Name &p:57 Store)) (Attribute (Name &self:57 Load) s_MOD Load) None)\n            (For\n              (Name &i:57 Store)\n              (Call\n                (Name g_range Load)\n                (list (Name &initialI:57 Load) (BinOp (Name &n:57 Load) Add (Constant i1 None)))\n                nil\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Name &prev:57 Store)\n                    (Subscript (Name &nextArr:57 Load) (BinOp (Name &i:57 Load) Sub (Name &initialI:57 Load)) Store)\n                  )\n                  (BinOp\n                    (BinOp\n                      (Name &prev:57 Load)\n                      Mult\n                      (Subscript\n                        (Attribute (Name &self:57 Load) s_invModulos Load)\n                        (BinOp (Name &i:57 Load) Mod (Name &p:57 Load))\n                        Load\n                      )\n                    )\n                    Mod\n                    (Name &p:57 Load)\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (AugAssign (Attribute (Name &self:57 Load) s_invFactorial_ Store) Add (Name &nextArr:57 Load))\n            (Return (Subscript (Attribute (Name &self:57 Load) s_invFactorial_ Load) (Name &n:57 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &Combination:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:8\n          (arguments nil (list (arg &self:58 None None) (arg &MOD:58 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:58 Load) s_MOD Store)) (Name &MOD:58 Load) None)\n            (Assign\n              (list (Attribute (Name &self:58 Load) s_factorial Store))\n              (Call (Name &Factorial:0 Load) (list (Name &MOD:58 Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &ncr:8\n          (arguments\n            nil\n            (list (arg &self:59 None None) (arg &n:59 None None) (arg &k:59 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare (Name &k:59 Load) (list Lt) (list (Constant i0 None)))\n                  (Compare (Name &n:59 Load) (list Lt) (list (Name &k:59 Load)))\n                )\n              )\n              (/seq (Return (Constant i0 None)))\n              nil\n            )\n            (Assign\n              (list (Name &k:59 Store))\n              (Call (Name g_min Load) (list (Name &k:59 Load) (BinOp (Name &n:59 Load) Sub (Name &k:59 Load))) nil)\n              None\n            )\n            (Assign (list (Name &f:59 Store)) (Attribute (Name &self:59 Load) s_factorial Load) None)\n            (Return\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (Call (Attribute (Name &f:59 Load) s_calc Load) (list (Name &n:59 Load)) nil)\n                    Mult\n                    (Call\n                      (Attribute (Name &f:59 Load) s_invFactorial Load)\n                      (list\n                        (Call\n                          (Name g_max Load)\n                          (list (BinOp (Name &n:59 Load) Sub (Name &k:59 Load)) (Name &k:59 Load))\n                          nil\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  Mult\n                  (Call\n                    (Attribute (Name &f:59 Load) s_invFactorial Load)\n                    (list\n                      (Call\n                        (Name g_min Load)\n                        (list (Name &k:59 Load) (BinOp (Name &n:59 Load) Sub (Name &k:59 Load)))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                Mod\n                (Attribute (Name &self:59 Load) s_MOD Load)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &powm:0\n      (arguments nil (list (arg &a:9 None None) (arg &n:9 None None) (arg &m:9 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &a:9 Load) (list Eq) (list (Constant i1 None)))\n              (Compare (Name &n:9 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Return (Constant i1 None)))\n          nil\n        )\n        (If\n          (Compare (BinOp (Name &n:9 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &s:9 Store))\n              (Call\n                (Name &powm:0 Load)\n                (list (Name &a:9 Load) (BinOp (Name &n:9 Load) FloorDiv (Constant i2 None)) (Name &m:9 Load))\n                nil\n              )\n              None\n            )\n            (Return (BinOp (BinOp (Name &s:9 Load) Mult (Name &s:9 Load)) Mod (Name &m:9 Load)))\n          )\n          (/seq\n            (Return\n              (BinOp\n                (BinOp\n                  (Name &a:9 Load)\n                  Mult\n                  (Call\n                    (Name &powm:0 Load)\n                    (list (Name &a:9 Load) (BinOp (Name &n:9 Load) Sub (Constant i1 None)) (Name &m:9 Load))\n                    nil\n                  )\n                )\n                Mod\n                (Name &m:9 Load)\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sort_list:0\n      (arguments nil (list (arg &list1:10 None None) (arg &list2:10 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &zipped_pairs:10 Store))\n          (Call (Name g_zip Load) (list (Name &list2:10 Load) (Name &list1:10 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &z:10 Store))\n          (ListComp\n            (Name &x:60 Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &_:60 Store) (Name &x:60 Store)) Store)\n                (Call (Name g_sorted Load) (list (Name &zipped_pairs:10 Load)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Return (Name &z:10 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &product:0\n      (arguments nil (list (arg &l:11 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &por:11 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:11 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &l:11 Load)) nil)) nil)\n          (/seq (AugAssign (Name &por:11 Store) Mult (Subscript (Name &l:11 Load) (Name &i:11 Load) Load)))\n          nil\n          None\n        )\n        (Return (Name &por:11 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &binarySearchCount:0\n      (arguments nil (list (arg &arr:12 None None) (arg &n:12 None None) (arg &key:12 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &left:12 Store)) (Constant i0 None) None)\n        (Assign (list (Name &right:12 Store)) (BinOp (Name &n:12 Load) Sub (Constant i1 None)) None)\n        (Assign (list (Name &count:12 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &left:12 Load) (list LtE) (list (Name &right:12 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:12 Store))\n              (Call\n                (Name g_int Load)\n                (list (BinOp (BinOp (Name &right:12 Load) Add (Name &left:12 Load)) Div (Constant i2 None)))\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Subscript (Name &arr:12 Load) (Name &mid:12 Load) Load) (list Lt) (list (Name &key:12 Load)))\n              (/seq\n                (Assign (list (Name &count:12 Store)) (BinOp (Name &mid:12 Load) Add (Constant i1 None)) None)\n                (Assign (list (Name &left:12 Store)) (BinOp (Name &mid:12 Load) Add (Constant i1 None)) None)\n              )\n              (/seq (Assign (list (Name &right:12 Store)) (BinOp (Name &mid:12 Load) Sub (Constant i1 None)) None))\n            )\n          )\n          nil\n        )\n        (Return (Name &count:12 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &countdig:0\n      (arguments nil (list (arg &n:13 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &c:13 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &n:13 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &n:13 Store) FloorDiv (Constant i10 None))\n            (AugAssign (Name &c:13 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Return (Name &c:13 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &binary:0\n      (arguments nil (list (arg &x:14 None None) (arg &length:14 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &y:14 Store))\n          (Subscript (Call (Name g_bin Load) (list (Name &x:14 Load)) nil) (Slice (Constant i2 None) None None) Load)\n          None\n        )\n        (Return\n          (IfExp\n            (Compare (Call (Name g_len Load) (list (Name &y:14 Load)) nil) (list GtE) (list (Name &length:14 Load)))\n            (Name &y:14 Load)\n            (BinOp\n              (BinOp\n                (Constant s_0 None)\n                Mult\n                (BinOp (Name &length:14 Load) Sub (Call (Name g_len Load) (list (Name &y:14 Load)) nil))\n              )\n              Add\n              (Name &y:14 Load)\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &countGreater:0\n      (arguments nil (list (arg &arr:15 None None) (arg &n:15 None None) (arg &k:15 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &l:15 Store)) (Constant i0 None) None)\n        (Assign (list (Name &r:15 Store)) (BinOp (Name &n:15 Load) Sub (Constant i1 None)) None)\n        (Assign (list (Name &leftGreater:15 Store)) (Name &n:15 Load) None)\n        (While\n          (Compare (Name &l:15 Load) (list LtE) (list (Name &r:15 Load)))\n          (/seq\n            (Assign\n              (list (Name &m:15 Store))\n              (Call\n                (Name g_int Load)\n                (list\n                  (BinOp\n                    (Name &l:15 Load)\n                    Add\n                    (BinOp (BinOp (Name &r:15 Load) Sub (Name &l:15 Load)) Div (Constant i2 None))\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Subscript (Name &arr:15 Load) (Name &m:15 Load) Load) (list GtE) (list (Name &k:15 Load)))\n              (/seq\n                (Assign (list (Name &leftGreater:15 Store)) (Name &m:15 Load) None)\n                (Assign (list (Name &r:15 Store)) (BinOp (Name &m:15 Load) Sub (Constant i1 None)) None)\n              )\n              (/seq (Assign (list (Name &l:15 Store)) (BinOp (Name &m:15 Load) Add (Constant i1 None)) None))\n            )\n          )\n          nil\n        )\n        (Return (BinOp (Name &n:15 Load) Sub (Name &leftGreater:15 Load)))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (ListComp\n        (Name &i:16 Load)\n        (list\n          (comprehension\n            (Name &i:16 Store)\n            (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name &SegmentTree:0 Load) (list (Name &f:0 Load)) nil) None)\n    (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &st:0 Store)) (Constant i1 None) None)\n        (Assign (list (Name &end:0 Store)) (Name &n:0 Load) None)\n        (While\n          (Compare (Name &st:0 Load) (list LtE) (list (Name &end:0 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:0 Store))\n              (BinOp (BinOp (Name &st:0 Load) Add (Name &end:0 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (Assign\n              (list (Name &su:0 Store))\n              (Call\n                (Attribute (Name &s:0 Load) s_query Load)\n                (list (Constant i0 None) (BinOp (Name &mid:0 Load) Sub (Constant i2 None)))\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Name &su:0 Load) (list Eq) (list (Subscript (Name &l:0 Load) (Name &i:0 Load) Load)))\n              (/seq\n                (Assign (list (Name &an:0 Store)) (Name &mid:0 Load) None)\n                (Assign (list (Name &st:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None)\n              )\n              (/seq\n                (If\n                  (Compare (Name &su:0 Load) (list Lt) (list (Subscript (Name &l:0 Load) (Name &i:0 Load) Load)))\n                  (/seq (Assign (list (Name &st:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None))\n                  (/seq (Assign (list (Name &end:0 Store)) (BinOp (Name &mid:0 Load) Sub (Constant i1 None)) None))\n                )\n              )\n            )\n          )\n          nil\n        )\n        (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &an:0 Load) None)\n        (Expr\n          (Call\n            (Attribute (Name &s:0 Load) s___setitem__ Load)\n            (list (BinOp (Name &an:0 Load) Sub (Constant i1 None)) (Constant i0 None))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Starred (Name &ans:0 Load) Load))\n        (list (keyword s_sep (Constant s-WzMyXQ== None)))\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &update:0\n      (arguments nil (list (arg &x:1 None None) (arg &val:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &x:1 Load) (list LtE) (list (Name &n:0 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &BIT:0 Load) (Name &x:1 Load) Store) Add (Name &val:1 Load))\n            (AugAssign (Name &x:1 Store) Add (BinOp (Name &x:1 Load) BitAnd (UnaryOp USub (Name &x:1 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &query:0\n      (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:2 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &x:2 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &s:2 Store))\n              (BinOp (Name &s:2 Load) Add (Subscript (Name &BIT:0 Load) (Name &x:2 Load) Load))\n              None\n            )\n            (AugAssign (Name &x:2 Store) Sub (BinOp (Name &x:2 Load) BitAnd (UnaryOp USub (Name &x:2 Load))))\n          )\n          nil\n        )\n        (Return (Name &s:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &BIT:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq (Expr (Call (Name &update:0 Load) (list (Name &i:0 Load) (Name &i:0 Load)) nil)))\n      nil\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &answers:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &lol:0 Store)) (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) None)\n        (Assign (list (Name &low:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &fjf:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &high:0 Store)) (Name &n:0 Load) None)\n        (While\n          (Constant True None)\n          (/seq\n            (Assign\n              (list (Name &mid:0 Store))\n              (BinOp\n                (BinOp (BinOp (Name &high:0 Load) Add (Name &low:0 Load)) Add (Constant i1 None))\n                FloorDiv\n                (Constant i2 None)\n              )\n              None\n            )\n            (Assign (list (Name &j:0 Store)) (Call (Name &query:0 Load) (list (Name &mid:0 Load)) nil) None)\n            (If\n              (Compare (Name &j:0 Load) (list Gt) (list (Name &lol:0 Load)))\n              (/seq\n                (If\n                  (Compare\n                    (Call (Name &query:0 Load) (list (BinOp (Name &mid:0 Load) Sub (Constant i1 None))) nil)\n                    (list Eq)\n                    (list (Name &lol:0 Load))\n                  )\n                  (/seq\n                    (Assign (list (Subscript (Name &answers:0 Load) (Name &i:0 Load) Store)) (Name &mid:0 Load) None)\n                    (Expr (Call (Name &update:0 Load) (list (Name &mid:0 Load) (UnaryOp USub (Name &mid:0 Load))) nil))\n                    Break\n                  )\n                  (/seq (Assign (list (Name &high:0 Store)) (Name &mid:0 Load) None))\n                )\n              )\n              (/seq (Assign (list (Name &low:0 Store)) (Name &mid:0 Load) None))\n            )\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &answers:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias s_setrecursionlimit g_SRL) (alias g_stdin None)) i0)\n    (Expr (Call (Name g_SRL Load) (list (BinOp (Constant i10 None) Pow (Constant i7 None))) nil))\n    (Assign (list (Name &rd:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &rrd:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list\n            (Name g_int Load)\n            (Call\n              (Attribute (Call (Attribute (Call (Name &rd:0 Load) nil nil) s_strip Load) nil nil) s_split Load)\n              nil\n              nil\n            )\n          )\n          nil\n        )\n      )\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &rd:0 Load) nil nil)) nil) None)\n    (Assign (list (Name &bit:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i200005 None)) None)\n    (FunctionDef\n      &add:0\n      (arguments nil (list (arg &x:1 None None) (arg &val:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &x:1 Load) (list LtE) (list (Name &n:0 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &bit:0 Load) (Name &x:1 Load) Store) Add (Name &val:1 Load))\n            (AugAssign (Name &x:1 Store) Add (BinOp (Name &x:1 Load) BitAnd (UnaryOp USub (Name &x:1 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &query:0\n      (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &num:2 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:2 Store)\n          (Call\n            (Name g_range Load)\n            (list (Constant i30 None) (UnaryOp USub (Constant i1 None)) (UnaryOp USub (Constant i1 None)))\n            nil\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (BinOp (Name &num:2 Load) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load)))\n                    (list LtE)\n                    (list (Name &n:0 Load))\n                  )\n                  (Compare\n                    (Subscript\n                      (Name &bit:0 Load)\n                      (BinOp (Name &num:2 Load) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load)))\n                      Load\n                    )\n                    (list LtE)\n                    (list (Name &x:2 Load))\n                  )\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Name &x:2 Store)\n                  Sub\n                  (Subscript\n                    (Name &bit:0 Load)\n                    (BinOp (Name &num:2 Load) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load)))\n                    Load\n                  )\n                )\n                (AugAssign (Name &num:2 Store) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load)))\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (BinOp (Name &num:2 Load) Add (Constant i1 None)))\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq (Expr (Call (Name &add:0 Load) (list (Name &i:0 Load) (Name &i:0 Load)) nil)))\n      nil\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_list Load) (list (Call (Name &rrd:0 Load) nil nil)) nil) None)\n    (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Call (Name g_len Load) (list (Name &s:0 Load)) nil) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &q:0 Store))\n          (Call (Name &query:0 Load) (list (Subscript (Name &s:0 Load) (Name &i:0 Load) Load)) nil)\n          None\n        )\n        (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &q:0 Load)) nil))\n        (Expr (Call (Name &add:0 Load) (list (Name &q:0 Load) (UnaryOp USub (Name &q:0 Load))) nil))\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (Subscript (Name &ans:0 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &sumsegtree:0\n      (arguments\n        nil\n        (list\n          (arg &l:1 None None)\n          (arg &seg:1 None None)\n          (arg &st:1 None None)\n          (arg &en:1 None None)\n          (arg &x:1 None None)\n        )\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &st:1 Load) (list Eq) (list (Name &en:1 Load)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &seg:1 Load) (Name &x:1 Load) Store))\n              (Subscript (Name &l:1 Load) (Name &st:1 Load) Load)\n              None\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &mid:1 Store))\n              (BinOp (BinOp (Name &st:1 Load) Add (Name &en:1 Load)) RShift (Constant i1 None))\n              None\n            )\n            (Expr\n              (Call\n                (Name &sumsegtree:0 Load)\n                (list\n                  (Name &l:1 Load)\n                  (Name &seg:1 Load)\n                  (Name &st:1 Load)\n                  (Name &mid:1 Load)\n                  (BinOp (Constant i2 None) Mult (Name &x:1 Load))\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Name &sumsegtree:0 Load)\n                (list\n                  (Name &l:1 Load)\n                  (Name &seg:1 Load)\n                  (BinOp (Name &mid:1 Load) Add (Constant i1 None))\n                  (Name &en:1 Load)\n                  (BinOp (BinOp (Constant i2 None) Mult (Name &x:1 Load)) Add (Constant i1 None))\n                )\n                nil\n              )\n            )\n            (Assign\n              (list (Subscript (Name &seg:1 Load) (Name &x:1 Load) Store))\n              (BinOp\n                (Subscript (Name &seg:1 Load) (BinOp (Constant i2 None) Mult (Name &x:1 Load)) Load)\n                Add\n                (Subscript\n                  (Name &seg:1 Load)\n                  (BinOp (BinOp (Constant i2 None) Mult (Name &x:1 Load)) Add (Constant i1 None))\n                  Load\n                )\n              )\n              None\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &query:0\n      (arguments\n        nil\n        (list\n          (arg &seg:2 None None)\n          (arg &st:2 None None)\n          (arg &en:2 None None)\n          (arg &val:2 None None)\n          (arg &x:2 None None)\n        )\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &st:2 Load) (list Eq) (list (Name &en:2 Load)))\n          (/seq (Return (Subscript (Name &seg:2 Load) (Name &x:2 Load) Load)))\n          nil\n        )\n        (Assign\n          (list (Name &mid:2 Store))\n          (BinOp (BinOp (Name &st:2 Load) Add (Name &en:2 Load)) RShift (Constant i1 None))\n          None\n        )\n        (If\n          (Compare\n            (Subscript (Name &seg:2 Load) (BinOp (Constant i2 None) Mult (Name &x:2 Load)) Load)\n            (list GtE)\n            (list (Name &val:2 Load))\n          )\n          (/seq\n            (Return\n              (Call\n                (Name &query:0 Load)\n                (list\n                  (Name &seg:2 Load)\n                  (Name &st:2 Load)\n                  (Name &mid:2 Load)\n                  (Name &val:2 Load)\n                  (BinOp (Constant i2 None) Mult (Name &x:2 Load))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (Return\n          (Call\n            (Name &query:0 Load)\n            (list\n              (Name &seg:2 Load)\n              (BinOp (Name &mid:2 Load) Add (Constant i1 None))\n              (Name &en:2 Load)\n              (BinOp\n                (Name &val:2 Load)\n                Sub\n                (Subscript (Name &seg:2 Load) (BinOp (Constant i2 None) Mult (Name &x:2 Load)) Load)\n              )\n              (BinOp (BinOp (Constant i2 None) Mult (Name &x:2 Load)) Add (Constant i1 None))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &upd:0\n      (arguments\n        nil\n        (list\n          (arg &seg:3 None None)\n          (arg &st:3 None None)\n          (arg &en:3 None None)\n          (arg &ind:3 None None)\n          (arg &val:3 None None)\n          (arg &x:3 None None)\n        )\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &st:3 Load) (list Eq) (list (Name &en:3 Load)))\n          (/seq\n            (Assign (list (Subscript (Name &seg:3 Load) (Name &x:3 Load) Store)) (Name &val:3 Load) None)\n            (Return None)\n          )\n          nil\n        )\n        (Assign\n          (list (Name &mid:3 Store))\n          (BinOp (BinOp (Name &st:3 Load) Add (Name &en:3 Load)) RShift (Constant i1 None))\n          None\n        )\n        (If\n          (Compare (Name &mid:3 Load) (list GtE) (list (Name &ind:3 Load)))\n          (/seq\n            (Expr\n              (Call\n                (Name &upd:0 Load)\n                (list\n                  (Name &seg:3 Load)\n                  (Name &st:3 Load)\n                  (Name &mid:3 Load)\n                  (Name &ind:3 Load)\n                  (Name &val:3 Load)\n                  (BinOp (Constant i2 None) Mult (Name &x:3 Load))\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name &upd:0 Load)\n                (list\n                  (Name &seg:3 Load)\n                  (BinOp (Name &mid:3 Load) Add (Constant i1 None))\n                  (Name &en:3 Load)\n                  (Name &ind:3 Load)\n                  (Name &val:3 Load)\n                  (BinOp (BinOp (Constant i2 None) Mult (Name &x:3 Load)) Add (Constant i1 None))\n                )\n                nil\n              )\n            )\n          )\n        )\n        (Assign\n          (list (Subscript (Name &seg:3 Load) (Name &x:3 Load) Store))\n          (BinOp\n            (Subscript (Name &seg:3 Load) (BinOp (Constant i2 None) Mult (Name &x:3 Load)) Load)\n            Add\n            (Subscript\n              (Name &seg:3 Load)\n              (BinOp (BinOp (Constant i2 None) Mult (Name &x:3 Load)) Add (Constant i1 None))\n              Load\n            )\n          )\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (Assign\n      (list (Name &p:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &seg:0 Store))\n      (BinOp (List (list (Constant s-WzM1XQ== None)) Load) Mult (BinOp (Name &n:0 Load) LShift (Constant i2 None)))\n      None\n    )\n    (Expr\n      (Call\n        (Name &sumsegtree:0 Load)\n        (list\n          (Name &l:0 Load)\n          (Name &seg:0 Load)\n          (Constant i0 None)\n          (BinOp (Call (Name g_len Load) (list (Name &l:0 Load)) nil) Sub (Constant i1 None))\n          (Constant i1 None)\n        )\n        nil\n      )\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Call (Name g_len Load) (list (Name &p:0 Load)) nil) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &s:0 Load) (Name &i:0 Load) Store))\n          (Call\n            (Name &query:0 Load)\n            (list\n              (Name &seg:0 Load)\n              (Constant i1 None)\n              (Name &n:0 Load)\n              (BinOp (Subscript (Name &p:0 Load) (Name &i:0 Load) Load) Add (Constant i1 None))\n              (Constant i1 None)\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name &upd:0 Load)\n            (list\n              (Name &seg:0 Load)\n              (Constant i1 None)\n              (Name &n:0 Load)\n              (Subscript (Name &s:0 Load) (Name &i:0 Load) Load)\n              (Constant i0 None)\n              (Constant i1 None)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &s:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_operator (list (alias g_add None)) i0)\n    (ClassDef\n      &Stree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments\n            nil\n            (list\n              (arg &self:5 None None)\n              (arg &f:5 None None)\n              (arg &n:5 None None)\n              (arg &default:5 None None)\n              (arg &init_data:5 None None)\n            )\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:5 Load) s_ln Store))\n              (BinOp\n                (Constant i2 None)\n                Pow\n                (Call (Attribute (BinOp (Name &n:5 Load) Sub (Constant i1 None)) s_bit_length Load) nil nil)\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:5 Load) s_data Store))\n              (BinOp\n                (List (list (Name &default:5 Load)) Load)\n                Mult\n                (BinOp (Attribute (Name &self:5 Load) s_ln Load) Mult (Constant i2 None))\n              )\n              None\n            )\n            (Assign (list (Attribute (Name &self:5 Load) s_f Store)) (Name &f:5 Load) None)\n            (For\n              (Tuple (list (Name &i:5 Store) (Name &d:5 Store)) Store)\n              (Call (Attribute (Name &init_data:5 Load) s_items Load) nil nil)\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Attribute (Name &self:5 Load) s_data Load)\n                      (BinOp (Attribute (Name &self:5 Load) s_ln Load) Add (Name &i:5 Load))\n                      Store\n                    )\n                  )\n                  (Name &d:5 Load)\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (For\n              (Name &j:5 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (BinOp (Attribute (Name &self:5 Load) s_ln Load) Sub (Constant i1 None))\n                  (Constant i0 None)\n                  (UnaryOp USub (Constant i1 None))\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:5 Load) s_data Load) (Name &j:5 Load) Store))\n                  (Call\n                    (Name &f:5 Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:5 Load) s_data Load)\n                        (BinOp (Name &j:5 Load) Mult (Constant i2 None))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:5 Load) s_data Load)\n                        (BinOp (BinOp (Name &j:5 Load) Mult (Constant i2 None)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:1\n          (arguments nil (list (arg &self:6 None None) (arg &i:6 None None) (arg &a:6 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &p:6 Store))\n              (BinOp (Attribute (Name &self:6 Load) s_ln Load) Add (Name &i:6 Load))\n              None\n            )\n            (Assign\n              (list (Subscript (Attribute (Name &self:6 Load) s_data Load) (Name &p:6 Load) Store))\n              (Name &a:6 Load)\n              None\n            )\n            (While\n              (Compare (Name &p:6 Load) (list Gt) (list (Constant i1 None)))\n              (/seq\n                (Assign (list (Name &p:6 Store)) (BinOp (Name &p:6 Load) FloorDiv (Constant i2 None)) None)\n                (Assign\n                  (list (Subscript (Attribute (Name &self:6 Load) s_data Load) (Name &p:6 Load) Store))\n                  (Call\n                    (Attribute (Name &self:6 Load) s_f Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:6 Load) s_data Load)\n                        (BinOp (Name &p:6 Load) Mult (Constant i2 None))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:6 Load) s_data Load)\n                        (BinOp (BinOp (Name &p:6 Load) Mult (Constant i2 None)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get:1\n          (arguments nil (list (arg &self:2 None None) (arg &i:2 None None) (arg &j:2 None None)) None nil nil None nil)\n          (/seq\n            (FunctionDef\n              &_get:2\n              (arguments\n                nil\n                (list (arg &l:8 None None) (arg &r:8 None None) (arg &p:8 None None))\n                None\n                nil\n                nil\n                None\n                nil\n              )\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare (Name &i:2 Load) (list LtE) (list (Name &l:8 Load)))\n                      (Compare (Name &j:2 Load) (list GtE) (list (Name &r:8 Load)))\n                    )\n                  )\n                  (/seq (Return (Subscript (Attribute (Name &self:2 Load) s_data Load) (Name &p:8 Load) Load)))\n                  (/seq\n                    (Assign\n                      (list (Name &m:8 Store))\n                      (BinOp (BinOp (Name &l:8 Load) Add (Name &r:8 Load)) FloorDiv (Constant i2 None))\n                      None\n                    )\n                    (If\n                      (Compare (Name &j:2 Load) (list LtE) (list (Name &m:8 Load)))\n                      (/seq\n                        (Return\n                          (Call\n                            (Name &_get:2 Load)\n                            (list (Name &l:8 Load) (Name &m:8 Load) (BinOp (Name &p:8 Load) Mult (Constant i2 None)))\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (If\n                          (Compare (Name &i:2 Load) (list GtE) (list (Name &m:8 Load)))\n                          (/seq\n                            (Return\n                              (Call\n                                (Name &_get:2 Load)\n                                (list\n                                  (Name &m:8 Load)\n                                  (Name &r:8 Load)\n                                  (BinOp (BinOp (Name &p:8 Load) Mult (Constant i2 None)) Add (Constant i1 None))\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          (/seq\n                            (Return\n                              (Call\n                                (Attribute (Name &self:2 Load) s_f Load)\n                                (list\n                                  (Call\n                                    (Name &_get:2 Load)\n                                    (list\n                                      (Name &l:8 Load)\n                                      (Name &m:8 Load)\n                                      (BinOp (Name &p:8 Load) Mult (Constant i2 None))\n                                    )\n                                    nil\n                                  )\n                                  (Call\n                                    (Name &_get:2 Load)\n                                    (list\n                                      (Name &m:8 Load)\n                                      (Name &r:8 Load)\n                                      (BinOp (BinOp (Name &p:8 Load) Mult (Constant i2 None)) Add (Constant i1 None))\n                                    )\n                                    nil\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n              None\n              None\n            )\n            (Return\n              (Call\n                (Name &_get:2 Load)\n                (list (Constant i0 None) (Attribute (Name &self:2 Load) s_ln Load) (Constant i1 None))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find_value:1\n          (arguments nil (list (arg &self:3 None None) (arg &v:3 None None)) None nil nil None nil)\n          (/seq\n            (FunctionDef\n              &_find_value:3\n              (arguments\n                nil\n                (list (arg &l:9 None None) (arg &r:9 None None) (arg &p:9 None None) (arg &v:9 None None))\n                None\n                nil\n                nil\n                None\n                nil\n              )\n              (/seq\n                (If\n                  (Compare (Name &r:9 Load) (list Eq) (list (BinOp (Name &l:9 Load) Add (Constant i1 None))))\n                  (/seq (Return (Name &l:9 Load)))\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript\n                          (Attribute (Name &self:3 Load) s_data Load)\n                          (BinOp (Name &p:9 Load) Mult (Constant i2 None))\n                          Load\n                        )\n                        (list LtE)\n                        (list (Name &v:9 Load))\n                      )\n                      (/seq\n                        (Return\n                          (Call\n                            (Name &_find_value:3 Load)\n                            (list\n                              (BinOp (BinOp (Name &l:9 Load) Add (Name &r:9 Load)) FloorDiv (Constant i2 None))\n                              (Name &r:9 Load)\n                              (BinOp (BinOp (Name &p:9 Load) Mult (Constant i2 None)) Add (Constant i1 None))\n                              (BinOp\n                                (Name &v:9 Load)\n                                Sub\n                                (Subscript\n                                  (Attribute (Name &self:3 Load) s_data Load)\n                                  (BinOp (Name &p:9 Load) Mult (Constant i2 None))\n                                  Load\n                                )\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Return\n                          (Call\n                            (Name &_find_value:3 Load)\n                            (list\n                              (Name &l:9 Load)\n                              (BinOp (BinOp (Name &l:9 Load) Add (Name &r:9 Load)) FloorDiv (Constant i2 None))\n                              (BinOp (Name &p:9 Load) Mult (Constant i2 None))\n                              (Name &v:9 Load)\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n              None\n              None\n            )\n            (Return\n              (Call\n                (Name &_find_value:3 Load)\n                (list (Constant i0 None) (Attribute (Name &self:3 Load) s_ln Load) (Constant i1 None) (Name &v:3 Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:4 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &sums:4 Store))\n          (DictComp\n            (Name &i:7 Load)\n            (Name &i:7 Load)\n            (list\n              (comprehension\n                (Name &i:7 Store)\n                (Call (Name g_range Load) (list (BinOp (Name &n:4 Load) Add (Constant i1 None))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &stree:4 Store))\n          (Call\n            (Name &Stree:0 Load)\n            (list\n              (Name g_add Load)\n              (BinOp (Name &n:4 Load) Add (Constant i1 None))\n              (Constant i0 None)\n              (Name &sums:4 Load)\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &ss:4 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &ss:4 Load) s_reverse Load) nil nil))\n        (Assign (list (Name &pp:4 Store)) (List nil Load) None)\n        (For\n          (Name &s:4 Store)\n          (Name &ss:4 Load)\n          (/seq\n            (Assign\n              (list (Name &sval:4 Store))\n              (Call (Attribute (Name &stree:4 Load) s_find_value Load) (list (Name &s:4 Load)) nil)\n              None\n            )\n            (Expr (Call (Attribute (Name &pp:4 Load) s_append Load) (list (Name &sval:4 Load)) nil))\n            (Expr\n              (Call (Attribute (Name &stree:4 Load) s_update Load) (list (Name &sval:4 Load) (Constant i0 None)) nil)\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Starred (Call (Name g_reversed Load) (list (Name &pp:4 Load)) nil) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &_:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:2 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (List nil Load) None)\n    (ImportFrom s_math (list (alias &log:0 None)) i0)\n    (ClassDef\n      &SegmentTree:0\n      (list (Name g_object Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &nums:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:3 Load) s_arr Store)) (Name &nums:3 Load) None)\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_l Store))\n              (Call (Name g_len Load) (list (Name &nums:3 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_tree Store))\n              (BinOp\n                (BinOp (List (list (Constant i0 None)) Load) Mult (Attribute (Name &self:3 Load) s_l Load))\n                Add\n                (Name &nums:3 Load)\n              )\n              None\n            )\n            (For\n              (Name &i:3 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (BinOp (Attribute (Name &self:3 Load) s_l Load) Sub (Constant i1 None))\n                  (Constant i0 None)\n                  (UnaryOp USub (Constant i1 None))\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:3 Load) s_tree Load) (Name &i:3 Load) Store))\n                  (BinOp\n                    (Subscript\n                      (Attribute (Name &self:3 Load) s_tree Load)\n                      (BinOp (Name &i:3 Load) LShift (Constant i1 None))\n                      Load\n                    )\n                    Add\n                    (Subscript\n                      (Attribute (Name &self:3 Load) s_tree Load)\n                      (BinOp (BinOp (Name &i:3 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))\n                      Load\n                    )\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:1\n          (arguments\n            nil\n            (list (arg &self:4 None None) (arg &i:4 None None) (arg &val:4 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign (list (Name &n:4 Store)) (BinOp (Attribute (Name &self:4 Load) s_l Load) Add (Name &i:4 Load)) None)\n            (Assign\n              (list (Subscript (Attribute (Name &self:4 Load) s_tree Load) (Name &n:4 Load) Store))\n              (Name &val:4 Load)\n              None\n            )\n            (While\n              (Compare (Name &n:4 Load) (list Gt) (list (Constant i1 None)))\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Attribute (Name &self:4 Load) s_tree Load)\n                      (BinOp (Name &n:4 Load) RShift (Constant i1 None))\n                      Store\n                    )\n                  )\n                  (BinOp\n                    (Subscript (Attribute (Name &self:4 Load) s_tree Load) (Name &n:4 Load) Load)\n                    Add\n                    (Subscript\n                      (Attribute (Name &self:4 Load) s_tree Load)\n                      (BinOp (Name &n:4 Load) BitXor (Constant i1 None))\n                      Load\n                    )\n                  )\n                  None\n                )\n                (AugAssign (Name &n:4 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:1\n          (arguments nil (list (arg &self:5 None None) (arg &i:5 None None) (arg &j:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &m:5 Store)) (BinOp (Attribute (Name &self:5 Load) s_l Load) Add (Name &i:5 Load)) None)\n            (Assign (list (Name &n:5 Store)) (BinOp (Attribute (Name &self:5 Load) s_l Load) Add (Name &j:5 Load)) None)\n            (Assign (list (Name &res:5 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &m:5 Load) (list LtE) (list (Name &n:5 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &m:5 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign\n                      (Name &res:5 Store)\n                      Add\n                      (Subscript (Attribute (Name &self:5 Load) s_tree Load) (Name &m:5 Load) Load)\n                    )\n                    (AugAssign (Name &m:5 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (AugAssign (Name &m:5 Store) RShift (Constant i1 None))\n                (If\n                  (Compare (BinOp (Name &n:5 Load) BitAnd (Constant i1 None)) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (AugAssign\n                      (Name &res:5 Store)\n                      Add\n                      (Subscript (Attribute (Name &self:5 Load) s_tree Load) (Name &n:5 Load) Load)\n                    )\n                    (AugAssign (Name &n:5 Store) Sub (Constant i1 None))\n                  )\n                  nil\n                )\n                (AugAssign (Name &n:5 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n            (Return (Name &res:5 Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list (Name &tree:0 Store))\n      (Call\n        (Name &SegmentTree:0 Load)\n        (list\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_range Load)\n                (list\n                  (Constant i1 None)\n                  (BinOp (Call (Name g_len Load) (list (Name &x:0 Load)) nil) Add (Constant i1 None))\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &org:0 Store)) (Call (Name g_len Load) (list (Name &x:0 Load)) nil) None)\n    (While\n      (Name &x:0 Load)\n      (/seq\n        (Assign (list (Name &q:0 Store)) (Call (Attribute (Name &x:0 Load) s_pop Load) nil nil) None)\n        (Assign (list (Name &lo:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &hi:0 Store)) (BinOp (Name &org:0 Load) Sub (Constant i1 None)) None)\n        (While\n          (Compare (Name &lo:0 Load) (list Lt) (list (Name &hi:0 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:0 Store))\n              (BinOp (BinOp (Name &lo:0 Load) Add (Name &hi:0 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (Assign\n              (list (Name &sm:0 Store))\n              (Call (Attribute (Name &tree:0 Load) s_query Load) (list (Constant i0 None) (Name &mid:0 Load)) nil)\n              None\n            )\n            (If\n              (Compare (Name &sm:0 Load) (list Gt) (list (Name &q:0 Load)))\n              (/seq (Assign (list (Name &hi:0 Store)) (Name &mid:0 Load) None))\n              (/seq (Assign (list (Name &lo:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None))\n            )\n          )\n          nil\n        )\n        (Assign\n          (list (Name &idx:0 Store))\n          (Subscript (Attribute (Name &tree:0 Load) s_arr Load) (Name &lo:0 Load) Load)\n          None\n        )\n        (Expr (Call (Attribute (Name &tree:0 Load) s_update Load) (list (Name &lo:0 Load) (Constant i0 None)) nil))\n        (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (Name &idx:0 Load)) nil))\n      )\n      nil\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Attribute (Constant s-WzMyXQ== None) s_join Load)\n            (list\n              (GeneratorExp\n                (Call (Name g_str Load) (list (Name &i:6 Load)) nil)\n                (list\n                  (comprehension\n                    (Name &i:6 Store)\n                    (Subscript (Name &res:0 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load)\n                    nil\n                    i0\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &sumsegtree:0\n      (arguments\n        nil\n        (list\n          (arg &l:1 None None)\n          (arg &seg:1 None None)\n          (arg &st:1 None None)\n          (arg &en:1 None None)\n          (arg &x:1 None None)\n        )\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &st:1 Load) (list Eq) (list (Name &en:1 Load)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &seg:1 Load) (Name &x:1 Load) Store))\n              (Subscript (Name &l:1 Load) (Name &st:1 Load) Load)\n              None\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &mid:1 Store))\n              (BinOp (BinOp (Name &st:1 Load) Add (Name &en:1 Load)) RShift (Constant i1 None))\n              None\n            )\n            (Expr\n              (Call\n                (Name &sumsegtree:0 Load)\n                (list\n                  (Name &l:1 Load)\n                  (Name &seg:1 Load)\n                  (Name &st:1 Load)\n                  (Name &mid:1 Load)\n                  (BinOp (Constant i2 None) Mult (Name &x:1 Load))\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Name &sumsegtree:0 Load)\n                (list\n                  (Name &l:1 Load)\n                  (Name &seg:1 Load)\n                  (BinOp (Name &mid:1 Load) Add (Constant i1 None))\n                  (Name &en:1 Load)\n                  (BinOp (BinOp (Constant i2 None) Mult (Name &x:1 Load)) Add (Constant i1 None))\n                )\n                nil\n              )\n            )\n            (Assign\n              (list (Subscript (Name &seg:1 Load) (Name &x:1 Load) Store))\n              (BinOp\n                (Subscript (Name &seg:1 Load) (BinOp (Constant i2 None) Mult (Name &x:1 Load)) Load)\n                Add\n                (Subscript\n                  (Name &seg:1 Load)\n                  (BinOp (BinOp (Constant i2 None) Mult (Name &x:1 Load)) Add (Constant i1 None))\n                  Load\n                )\n              )\n              None\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &query:0\n      (arguments\n        nil\n        (list\n          (arg &seg:2 None None)\n          (arg &st:2 None None)\n          (arg &en:2 None None)\n          (arg &val:2 None None)\n          (arg &x:2 None None)\n        )\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &st:2 Load) (list Eq) (list (Name &en:2 Load)))\n          (/seq (Return (Subscript (Name &seg:2 Load) (Name &x:2 Load) Load)))\n          nil\n        )\n        (Assign\n          (list (Name &mid:2 Store))\n          (BinOp (BinOp (Name &st:2 Load) Add (Name &en:2 Load)) RShift (Constant i1 None))\n          None\n        )\n        (If\n          (Compare\n            (Subscript (Name &seg:2 Load) (BinOp (Constant i2 None) Mult (Name &x:2 Load)) Load)\n            (list GtE)\n            (list (Name &val:2 Load))\n          )\n          (/seq\n            (Return\n              (Call\n                (Name &query:0 Load)\n                (list\n                  (Name &seg:2 Load)\n                  (Name &st:2 Load)\n                  (Name &mid:2 Load)\n                  (Name &val:2 Load)\n                  (BinOp (Constant i2 None) Mult (Name &x:2 Load))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (Return\n          (Call\n            (Name &query:0 Load)\n            (list\n              (Name &seg:2 Load)\n              (BinOp (Name &mid:2 Load) Add (Constant i1 None))\n              (Name &en:2 Load)\n              (BinOp\n                (Name &val:2 Load)\n                Sub\n                (Subscript (Name &seg:2 Load) (BinOp (Constant i2 None) Mult (Name &x:2 Load)) Load)\n              )\n              (BinOp (BinOp (Constant i2 None) Mult (Name &x:2 Load)) Add (Constant i1 None))\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &upd:0\n      (arguments\n        nil\n        (list\n          (arg &seg:3 None None)\n          (arg &st:3 None None)\n          (arg &en:3 None None)\n          (arg &ind:3 None None)\n          (arg &val:3 None None)\n          (arg &x:3 None None)\n        )\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &st:3 Load) (list Eq) (list (Name &en:3 Load)))\n          (/seq\n            (Assign (list (Subscript (Name &seg:3 Load) (Name &x:3 Load) Store)) (Name &val:3 Load) None)\n            (Return None)\n          )\n          nil\n        )\n        (Assign\n          (list (Name &mid:3 Store))\n          (BinOp (BinOp (Name &st:3 Load) Add (Name &en:3 Load)) RShift (Constant i1 None))\n          None\n        )\n        (If\n          (Compare (Name &mid:3 Load) (list GtE) (list (Name &ind:3 Load)))\n          (/seq\n            (Expr\n              (Call\n                (Name &upd:0 Load)\n                (list\n                  (Name &seg:3 Load)\n                  (Name &st:3 Load)\n                  (Name &mid:3 Load)\n                  (Name &ind:3 Load)\n                  (Name &val:3 Load)\n                  (BinOp (Constant i2 None) Mult (Name &x:3 Load))\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name &upd:0 Load)\n                (list\n                  (Name &seg:3 Load)\n                  (BinOp (Name &mid:3 Load) Add (Constant i1 None))\n                  (Name &en:3 Load)\n                  (Name &ind:3 Load)\n                  (Name &val:3 Load)\n                  (BinOp (BinOp (Constant i2 None) Mult (Name &x:3 Load)) Add (Constant i1 None))\n                )\n                nil\n              )\n            )\n          )\n        )\n        (Assign\n          (list (Subscript (Name &seg:3 Load) (Name &x:3 Load) Store))\n          (BinOp\n            (Subscript (Name &seg:3 Load) (BinOp (Constant i2 None) Mult (Name &x:3 Load)) Load)\n            Add\n            (Subscript\n              (Name &seg:3 Load)\n              (BinOp (BinOp (Constant i2 None) Mult (Name &x:3 Load)) Add (Constant i1 None))\n              Load\n            )\n          )\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (Assign\n      (list (Name &p:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &seg:0 Store))\n      (BinOp (List (list (Constant s-WzM1XQ== None)) Load) Mult (BinOp (Name &n:0 Load) LShift (Constant i2 None)))\n      None\n    )\n    (Expr\n      (Call\n        (Name &sumsegtree:0 Load)\n        (list\n          (Name &l:0 Load)\n          (Name &seg:0 Load)\n          (Constant i0 None)\n          (BinOp (Call (Name g_len Load) (list (Name &l:0 Load)) nil) Sub (Constant i1 None))\n          (Constant i1 None)\n        )\n        nil\n      )\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Subscript (Name &s:0 Load) (Name &i:0 Load) Store))\n          (Call\n            (Name &query:0 Load)\n            (list\n              (Name &seg:0 Load)\n              (Constant i1 None)\n              (Name &n:0 Load)\n              (BinOp (Subscript (Name &p:0 Load) (Name &i:0 Load) Load) Add (Constant i1 None))\n              (Constant i1 None)\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name &upd:0 Load)\n            (list\n              (Name &seg:0 Load)\n              (Constant i1 None)\n              (Name &n:0 Load)\n              (Subscript (Name &s:0 Load) (Name &i:0 Load) Load)\n              (Constant i0 None)\n              (Constant i1 None)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &s:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None)\n    (Assign (list (Name &print:0 Store)) (Attribute (Name g_stdout Load) s_write Load) None)\n    (Assign (list (Name &_:0 Store)) (Call (Name &input:0 Load) nil nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:2 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (List nil Load) None)\n    (ImportFrom s_math (list (alias &log:0 None)) i0)\n    (ClassDef\n      &SegmentTree:0\n      (list (Name g_object Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &nums:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:3 Load) s_arr Store)) (Name &nums:3 Load) None)\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_l Store))\n              (Call (Name g_len Load) (list (Name &nums:3 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_tree Store))\n              (BinOp\n                (BinOp (List (list (Constant i0 None)) Load) Mult (Attribute (Name &self:3 Load) s_l Load))\n                Add\n                (Name &nums:3 Load)\n              )\n              None\n            )\n            (For\n              (Name &i:3 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (BinOp (Attribute (Name &self:3 Load) s_l Load) Sub (Constant i1 None))\n                  (Constant i0 None)\n                  (UnaryOp USub (Constant i1 None))\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:3 Load) s_tree Load) (Name &i:3 Load) Store))\n                  (BinOp\n                    (Subscript\n                      (Attribute (Name &self:3 Load) s_tree Load)\n                      (BinOp (Name &i:3 Load) LShift (Constant i1 None))\n                      Load\n                    )\n                    Add\n                    (Subscript\n                      (Attribute (Name &self:3 Load) s_tree Load)\n                      (BinOp (BinOp (Name &i:3 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))\n                      Load\n                    )\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:1\n          (arguments\n            nil\n            (list (arg &self:4 None None) (arg &i:4 None None) (arg &val:4 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign (list (Name &n:4 Store)) (BinOp (Attribute (Name &self:4 Load) s_l Load) Add (Name &i:4 Load)) None)\n            (Assign\n              (list (Subscript (Attribute (Name &self:4 Load) s_tree Load) (Name &n:4 Load) Store))\n              (Name &val:4 Load)\n              None\n            )\n            (While\n              (Compare (Name &n:4 Load) (list Gt) (list (Constant i1 None)))\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Attribute (Name &self:4 Load) s_tree Load)\n                      (BinOp (Name &n:4 Load) RShift (Constant i1 None))\n                      Store\n                    )\n                  )\n                  (BinOp\n                    (Subscript (Attribute (Name &self:4 Load) s_tree Load) (Name &n:4 Load) Load)\n                    Add\n                    (Subscript\n                      (Attribute (Name &self:4 Load) s_tree Load)\n                      (BinOp (Name &n:4 Load) BitXor (Constant i1 None))\n                      Load\n                    )\n                  )\n                  None\n                )\n                (AugAssign (Name &n:4 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:1\n          (arguments nil (list (arg &self:5 None None) (arg &i:5 None None) (arg &j:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &m:5 Store)) (BinOp (Attribute (Name &self:5 Load) s_l Load) Add (Name &i:5 Load)) None)\n            (Assign (list (Name &n:5 Store)) (BinOp (Attribute (Name &self:5 Load) s_l Load) Add (Name &j:5 Load)) None)\n            (Assign (list (Name &res:5 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &m:5 Load) (list LtE) (list (Name &n:5 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &m:5 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign\n                      (Name &res:5 Store)\n                      Add\n                      (Subscript (Attribute (Name &self:5 Load) s_tree Load) (Name &m:5 Load) Load)\n                    )\n                    (AugAssign (Name &m:5 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (AugAssign (Name &m:5 Store) RShift (Constant i1 None))\n                (If\n                  (Compare (BinOp (Name &n:5 Load) BitAnd (Constant i1 None)) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (AugAssign\n                      (Name &res:5 Store)\n                      Add\n                      (Subscript (Attribute (Name &self:5 Load) s_tree Load) (Name &n:5 Load) Load)\n                    )\n                    (AugAssign (Name &n:5 Store) Sub (Constant i1 None))\n                  )\n                  nil\n                )\n                (AugAssign (Name &n:5 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n            (Return (Name &res:5 Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list (Name &tree:0 Store))\n      (Call\n        (Name &SegmentTree:0 Load)\n        (list\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_range Load)\n                (list\n                  (Constant i1 None)\n                  (BinOp (Call (Name g_len Load) (list (Name &x:0 Load)) nil) Add (Constant i1 None))\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &org:0 Store)) (Call (Name g_len Load) (list (Name &x:0 Load)) nil) None)\n    (While\n      (Name &x:0 Load)\n      (/seq\n        (Assign (list (Name &q:0 Store)) (Call (Attribute (Name &x:0 Load) s_pop Load) nil nil) None)\n        (Assign (list (Name &lo:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &hi:0 Store)) (BinOp (Name &org:0 Load) Sub (Constant i1 None)) None)\n        (While\n          (Compare (Name &lo:0 Load) (list Lt) (list (Name &hi:0 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:0 Store))\n              (BinOp (BinOp (Name &lo:0 Load) Add (Name &hi:0 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (Assign\n              (list (Name &sm:0 Store))\n              (Call (Attribute (Name &tree:0 Load) s_query Load) (list (Constant i0 None) (Name &mid:0 Load)) nil)\n              None\n            )\n            (If\n              (Compare (Name &sm:0 Load) (list Gt) (list (Name &q:0 Load)))\n              (/seq (Assign (list (Name &hi:0 Store)) (Name &mid:0 Load) None))\n              (/seq (Assign (list (Name &lo:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None))\n            )\n          )\n          nil\n        )\n        (Assign\n          (list (Name &idx:0 Store))\n          (Subscript (Attribute (Name &tree:0 Load) s_arr Load) (Name &lo:0 Load) Load)\n          None\n        )\n        (Expr (Call (Attribute (Name &tree:0 Load) s_update Load) (list (Name &lo:0 Load) (Constant i0 None)) nil))\n        (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (Name &idx:0 Load)) nil))\n      )\n      nil\n    )\n    (Expr\n      (Call\n        (Name &print:0 Load)\n        (list\n          (Call\n            (Attribute (Constant s-WzMyXQ== None) s_join Load)\n            (list\n              (GeneratorExp\n                (Call (Name g_str Load) (list (Name &i:6 Load)) nil)\n                (list\n                  (comprehension\n                    (Name &i:6 Store)\n                    (Subscript (Name &res:0 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load)\n                    nil\n                    i0\n                  )\n                )\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &NN:0 Store)) (Constant i18 None) None)\n    (Assign\n      (list (Name &BIT:0 Store))\n      (BinOp\n        (List (list (Constant i0 None)) Load)\n        Mult\n        (BinOp (BinOp (Constant i2 None) Pow (Name &NN:0 Load)) Add (Constant i1 None))\n      )\n      None\n    )\n    (FunctionDef\n      &addbit:0\n      (arguments nil (list (arg &i:1 None None) (arg &x:1 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &i:1 Load) (list LtE) (list (BinOp (Constant i2 None) Pow (Name &NN:0 Load))))\n          (/seq\n            (AugAssign (Subscript (Name &BIT:0 Load) (Name &i:1 Load) Store) Add (Name &x:1 Load))\n            (AugAssign (Name &i:1 Store) Add (BinOp (Name &i:1 Load) BitAnd (UnaryOp USub (Name &i:1 Load))))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getsum:0\n      (arguments nil (list (arg &i:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ret:2 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &i:2 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &ret:2 Store) Add (Subscript (Name &BIT:0 Load) (Name &i:2 Load) Load))\n            (AugAssign (Name &i:2 Store) Sub (BinOp (Name &i:2 Load) BitAnd (UnaryOp USub (Name &i:2 Load))))\n          )\n          nil\n        )\n        (Return (Name &ret:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &searchbit:0\n      (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:3 Store) (Name &sl:3 Store)) Store))\n          (Tuple (list (Constant i0 None) (Constant i0 None)) Load)\n          None\n        )\n        (Assign\n          (list (Name &d:3 Store))\n          (BinOp (Constant i2 None) Pow (BinOp (Name &NN:0 Load) Sub (Constant i1 None)))\n          None\n        )\n        (While\n          (Name &d:3 Load)\n          (/seq\n            (Assign (list (Name &m:3 Store)) (BinOp (Name &l:3 Load) Add (Name &d:3 Load)) None)\n            (Assign\n              (list (Name &sm:3 Store))\n              (BinOp (Name &sl:3 Load) Add (Subscript (Name &BIT:0 Load) (Name &m:3 Load) Load))\n              None\n            )\n            (If\n              (Compare (Name &sm:3 Load) (list LtE) (list (Name &x:3 Load)))\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &l:3 Store) (Name &sl:3 Store)) Store))\n                  (Tuple (list (Name &m:3 Load) (Name &sm:3 Load)) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (AugAssign (Name &d:3 Store) FloorDiv (Constant i2 None))\n          )\n          nil\n        )\n        (Return (Name &l:3 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &A:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &a:4 Load)) nil)\n        (list\n          (comprehension\n            (Name &a:4 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &N:0 Load) Add (Constant i1 None))) nil)\n      (/seq (Expr (Call (Name &addbit:0 Load) (list (Name &i:0 Load) (Name &i:0 Load)) nil)))\n      nil\n      None\n    )\n    (Assign (list (Name &ANS:0 Store)) (List nil Load) None)\n    (For\n      (Name &s:0 Store)\n      (Subscript (Name &A:0 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (BinOp (Call (Name &searchbit:0 Load) (list (Name &s:0 Load)) nil) Add (Constant i1 None))\n          None\n        )\n        (Expr (Call (Name &addbit:0 Load) (list (Name &a:0 Load) (UnaryOp USub (Name &a:0 Load))) nil))\n        (Expr (Call (Attribute (Name &ANS:0 Load) s_append Load) (list (Name &a:0 Load)) nil))\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Starred (Subscript (Name &ANS:0 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load) Load))\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_heapq None) (alias g_bisect None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_collections (list (alias g_deque None) (alias g_defaultdict None)) i0)\n    (ImportFrom s_fractions (list (alias g_Fraction None)) i0)\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &mod1:0 Store)) (Constant i998244353 None) None)\n    (Import (list (alias &os:0 None)))\n    (Import (list (alias &sys:0 None)))\n    (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name &IOBase:0 Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:17 None None) (arg &file:17 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:17 Load) s__fd Store))\n              (Call (Attribute (Name &file:17 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:17 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:17 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:17 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:17 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:17 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:17 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:18 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:18 Store))\n                  (Call\n                    (Attribute (Name &os:0 Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:18 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name &os:0 Load) s_fstat Load)\n                              (list (Attribute (Name &self:18 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:18 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:18 Store))\n                  (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:18 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:18 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:18 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:19 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:19 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:19 Store))\n                  (Call\n                    (Attribute (Name &os:0 Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:19 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name &os:0 Load) s_fstat Load)\n                              (list (Attribute (Name &self:19 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:19 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:19 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:19 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:19 Store))\n                  (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:19 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:19 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:19 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:20 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:20 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &os:0 Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:20 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name &IOBase:0 Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:21 None None) (arg &file:21 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:21 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:21 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:21 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:21 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:21 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:61 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:61 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:21 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:21 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (ClassDef\n      &TreeNode:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:3\n          (arguments\n            nil\n            (list (arg &self:22 None None) (arg &k:22 None None) (arg &v:22 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign (list (Attribute (Name &self:22 Load) s_key Store)) (Name &k:22 Load) None)\n            (Assign (list (Attribute (Name &self:22 Load) s_value Store)) (Name &v:22 Load) None)\n            (Assign (list (Attribute (Name &self:22 Load) s_left Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &self:22 Load) s_right Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &self:22 Load) s_parent Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &self:22 Load) s_height Store)) (Constant i1 None) None)\n            (Assign (list (Attribute (Name &self:22 Load) s_num_left Store)) (Constant i1 None) None)\n            (Assign (list (Attribute (Name &self:22 Load) s_num_total Store)) (Constant i1 None) None)\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &AvlTree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:4\n          (arguments nil (list (arg &self:23 None None)) None nil nil None nil)\n          (/seq (Assign (list (Attribute (Name &self:23 Load) s__tree Store)) (Constant None None) None))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:4\n          (arguments\n            nil\n            (list (arg &self:24 None None) (arg &k:24 None None) (arg &v:24 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (UnaryOp Not (Attribute (Name &self:24 Load) s__tree Load))\n              (/seq\n                (Assign\n                  (list (Attribute (Name &self:24 Load) s__tree Store))\n                  (Call (Name &TreeNode:0 Load) (list (Name &k:24 Load) (Name &v:24 Load)) nil)\n                  None\n                )\n                (Return None)\n              )\n              nil\n            )\n            (Assign\n              (list (Name &node:24 Store))\n              (Call (Attribute (Name &self:24 Load) s__add Load) (list (Name &k:24 Load) (Name &v:24 Load)) nil)\n              None\n            )\n            (If\n              (Name &node:24 Load)\n              (/seq (Expr (Call (Attribute (Name &self:24 Load) s__rebalance Load) (list (Name &node:24 Load)) nil)))\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_add:4\n          (arguments\n            nil\n            (list (arg &self:25 None None) (arg &k:25 None None) (arg &v:25 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign (list (Name &node:25 Store)) (Attribute (Name &self:25 Load) s__tree Load) None)\n            (While\n              (Name &node:25 Load)\n              (/seq\n                (If\n                  (Compare (Name &k:25 Load) (list Lt) (list (Attribute (Name &node:25 Load) s_key Load)))\n                  (/seq\n                    (If\n                      (Attribute (Name &node:25 Load) s_left Load)\n                      (/seq (Assign (list (Name &node:25 Store)) (Attribute (Name &node:25 Load) s_left Load) None))\n                      (/seq\n                        (Assign\n                          (list (Attribute (Name &node:25 Load) s_left Store))\n                          (Call (Name &TreeNode:0 Load) (list (Name &k:25 Load) (Name &v:25 Load)) nil)\n                          None\n                        )\n                        (Assign\n                          (list (Attribute (Attribute (Name &node:25 Load) s_left Load) s_parent Store))\n                          (Name &node:25 Load)\n                          None\n                        )\n                        (Return (Attribute (Name &node:25 Load) s_left Load))\n                      )\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare (Attribute (Name &node:25 Load) s_key Load) (list Lt) (list (Name &k:25 Load)))\n                      (/seq\n                        (If\n                          (Attribute (Name &node:25 Load) s_right Load)\n                          (/seq\n                            (Assign (list (Name &node:25 Store)) (Attribute (Name &node:25 Load) s_right Load) None)\n                          )\n                          (/seq\n                            (Assign\n                              (list (Attribute (Name &node:25 Load) s_right Store))\n                              (Call (Name &TreeNode:0 Load) (list (Name &k:25 Load) (Name &v:25 Load)) nil)\n                              None\n                            )\n                            (Assign\n                              (list (Attribute (Attribute (Name &node:25 Load) s_right Load) s_parent Store))\n                              (Name &node:25 Load)\n                              None\n                            )\n                            (Return (Attribute (Name &node:25 Load) s_right Load))\n                          )\n                        )\n                      )\n                      (/seq\n                        (Assign (list (Attribute (Name &node:25 Load) s_value Store)) (Name &v:25 Load) None)\n                        (Return None)\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get_height:4\n          (arguments nil (list (arg &x:26 None None)) None nil nil None nil)\n          (/seq (Return (IfExp (Name &x:26 Load) (Attribute (Name &x:26 Load) s_height Load) (Constant i0 None))))\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n        (FunctionDef\n          &get_num_total:4\n          (arguments nil (list (arg &x:27 None None)) None nil nil None nil)\n          (/seq (Return (IfExp (Name &x:27 Load) (Attribute (Name &x:27 Load) s_num_total Load) (Constant i0 None))))\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n        (FunctionDef\n          &_rebalance:4\n          (arguments nil (list (arg &self:28 None None) (arg &node:28 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &n:28 Store)) (Name &node:28 Load) None)\n            (While\n              (Name &n:28 Load)\n              (/seq\n                (Assign\n                  (list (Name &lh:28 Store))\n                  (Call\n                    (Attribute (Name &self:28 Load) s_get_height Load)\n                    (list (Attribute (Name &n:28 Load) s_left Load))\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &rh:28 Store))\n                  (Call\n                    (Attribute (Name &self:28 Load) s_get_height Load)\n                    (list (Attribute (Name &n:28 Load) s_right Load))\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &n:28 Load) s_height Store))\n                  (BinOp\n                    (Call (Name g_max Load) (list (Name &lh:28 Load) (Name &rh:28 Load)) nil)\n                    Add\n                    (Constant i1 None)\n                  )\n                  None\n                )\n                (Assign (list (Name &balance_factor:28 Store)) (BinOp (Name &lh:28 Load) Sub (Name &rh:28 Load)) None)\n                (Assign\n                  (list (Attribute (Name &n:28 Load) s_num_total Store))\n                  (BinOp\n                    (BinOp\n                      (Constant i1 None)\n                      Add\n                      (Call\n                        (Attribute (Name &self:28 Load) s_get_num_total Load)\n                        (list (Attribute (Name &n:28 Load) s_left Load))\n                        nil\n                      )\n                    )\n                    Add\n                    (Call\n                      (Attribute (Name &self:28 Load) s_get_num_total Load)\n                      (list (Attribute (Name &n:28 Load) s_right Load))\n                      nil\n                    )\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &n:28 Load) s_num_left Store))\n                  (BinOp\n                    (Constant i1 None)\n                    Add\n                    (Call\n                      (Attribute (Name &self:28 Load) s_get_num_total Load)\n                      (list (Attribute (Name &n:28 Load) s_left Load))\n                      nil\n                    )\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &balance_factor:28 Load) (list Gt) (list (Constant i1 None)))\n                  (/seq\n                    (If\n                      (Compare\n                        (Call\n                          (Attribute (Name &self:28 Load) s_get_height Load)\n                          (list (Attribute (Attribute (Name &n:28 Load) s_left Load) s_left Load))\n                          nil\n                        )\n                        (list Lt)\n                        (list\n                          (Call\n                            (Attribute (Name &self:28 Load) s_get_height Load)\n                            (list (Attribute (Attribute (Name &n:28 Load) s_left Load) s_right Load))\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr\n                          (Call\n                            (Attribute (Name &self:28 Load) s__rotate_left Load)\n                            (list (Attribute (Name &n:28 Load) s_left Load))\n                            nil\n                          )\n                        )\n                      )\n                      nil\n                    )\n                    (Expr (Call (Attribute (Name &self:28 Load) s__rotate_right Load) (list (Name &n:28 Load)) nil))\n                  )\n                  (/seq\n                    (If\n                      (Compare (Name &balance_factor:28 Load) (list Lt) (list (UnaryOp USub (Constant i1 None))))\n                      (/seq\n                        (If\n                          (Compare\n                            (Call\n                              (Attribute (Name &self:28 Load) s_get_height Load)\n                              (list (Attribute (Attribute (Name &n:28 Load) s_right Load) s_right Load))\n                              nil\n                            )\n                            (list Lt)\n                            (list\n                              (Call\n                                (Attribute (Name &self:28 Load) s_get_height Load)\n                                (list (Attribute (Attribute (Name &n:28 Load) s_right Load) s_left Load))\n                                nil\n                              )\n                            )\n                          )\n                          (/seq\n                            (Expr\n                              (Call\n                                (Attribute (Name &self:28 Load) s__rotate_right Load)\n                                (list (Attribute (Name &n:28 Load) s_right Load))\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                        )\n                        (Expr (Call (Attribute (Name &self:28 Load) s__rotate_left Load) (list (Name &n:28 Load)) nil))\n                      )\n                      (/seq (Assign (list (Name &n:28 Store)) (Attribute (Name &n:28 Load) s_parent Load) None))\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_remove_one:4\n          (arguments nil (list (arg &self:29 None None) (arg &node:29 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDgzLCAxMDUsIDEwMCwgMTAxLCAzMiwgMTAxLCAxMDIsIDEwMiwgMTAxLCA5OSwgMTE2LCAzMywgMzMsIDMzLCAzMiwgNjcsIDEwNCwgOTcsIDExMCwgMTAzLCAxMDEsIDExNSwgMzIsIDExMCwgMTExLCAxMDAsIDEwMSwgNDYsIDMyLCA3OCwgMTExLCAxMDAsIDEwMSwgMzIsIDExNSwgMTA0LCAxMTEsIDExNywgMTA4LCAxMDAsIDMyLCAxMDQsIDk3LCAxMTgsIDEwMSwgMzIsIDEwMSwgMTIwLCA5NywgOTksIDExNiwgMTA4LCAxMjEsIDMyLCAxMTEsIDExMCwgMTAxLCAzMiwgOTksIDEwNCwgMTA1LCAxMDgsIDEwMCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMl0=\n                None\n              )\n            )\n            (Assign\n              (list (Name &replacement:29 Store))\n              (BoolOp\n                Or\n                (list (Attribute (Name &node:29 Load) s_left Load) (Attribute (Name &node:29 Load) s_right Load))\n              )\n              None\n            )\n            (If\n              (Attribute (Name &node:29 Load) s_parent Load)\n              (/seq\n                (If\n                  (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:29 Load)) nil)\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:29 Load) s_parent Load) s_left Store))\n                      (Name &replacement:29 Load)\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:29 Load) s_parent Load) s_right Store))\n                      (Name &replacement:29 Load)\n                      None\n                    )\n                  )\n                )\n                (Assign\n                  (list (Attribute (Name &replacement:29 Load) s_parent Store))\n                  (Attribute (Name &node:29 Load) s_parent Load)\n                  None\n                )\n                (Assign (list (Attribute (Name &node:29 Load) s_parent Store)) (Constant None None) None)\n              )\n              (/seq\n                (Assign (list (Attribute (Name &self:29 Load) s__tree Store)) (Name &replacement:29 Load) None)\n                (Assign (list (Attribute (Name &replacement:29 Load) s_parent Store)) (Constant None None) None)\n              )\n            )\n            (Assign (list (Attribute (Name &node:29 Load) s_left Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &node:29 Load) s_right Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &node:29 Load) s_parent Store)) (Constant None None) None)\n            (Expr (Call (Attribute (Name &self:29 Load) s__rebalance Load) (list (Name &replacement:29 Load)) nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_remove_leaf:4\n          (arguments nil (list (arg &self:30 None None) (arg &node:30 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &node:30 Load) s_parent Load)\n              (/seq\n                (If\n                  (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:30 Load)) nil)\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:30 Load) s_parent Load) s_left Store))\n                      (Constant None None)\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:30 Load) s_parent Load) s_right Store))\n                      (Constant None None)\n                      None\n                    )\n                  )\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &self:30 Load) s__rebalance Load)\n                    (list (Attribute (Name &node:30 Load) s_parent Load))\n                    nil\n                  )\n                )\n              )\n              (/seq (Assign (list (Attribute (Name &self:30 Load) s__tree Store)) (Constant None None) None))\n            )\n            (Assign (list (Attribute (Name &node:30 Load) s_parent Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &node:30 Load) s_left Store)) (Constant None None) None)\n            (Assign (list (Attribute (Name &node:30 Load) s_right Store)) (Constant None None) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &remove:4\n          (arguments nil (list (arg &self:31 None None) (arg &k:31 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &node:31 Store))\n              (Call (Attribute (Name &self:31 Load) s__get_node Load) (list (Name &k:31 Load)) nil)\n              None\n            )\n            (If (UnaryOp Not (Name &node:31 Load)) (/seq (Return None)) nil)\n            (If\n              (Call (Attribute (Name &AvlTree:0 Load) s__is_leaf Load) (list (Name &node:31 Load)) nil)\n              (/seq\n                (Expr (Call (Attribute (Name &self:31 Load) s__remove_leaf Load) (list (Name &node:31 Load)) nil))\n                (Return None)\n              )\n              nil\n            )\n            (If\n              (BoolOp\n                And\n                (list (Attribute (Name &node:31 Load) s_left Load) (Attribute (Name &node:31 Load) s_right Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &nxt:31 Store))\n                  (Call (Attribute (Name &AvlTree:0 Load) s__get_next Load) (list (Name &node:31 Load)) nil)\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &node:31 Load) s_key Store))\n                  (Attribute (Name &nxt:31 Load) s_key Load)\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &node:31 Load) s_value Store))\n                  (Attribute (Name &nxt:31 Load) s_value Load)\n                  None\n                )\n                (If\n                  (Call (Attribute (Name &self:31 Load) s__is_leaf Load) (list (Name &nxt:31 Load)) nil)\n                  (/seq\n                    (Expr (Call (Attribute (Name &self:31 Load) s__remove_leaf Load) (list (Name &nxt:31 Load)) nil))\n                  )\n                  (/seq\n                    (Expr (Call (Attribute (Name &self:31 Load) s__remove_one Load) (list (Name &nxt:31 Load)) nil))\n                  )\n                )\n                (Expr (Call (Attribute (Name &self:31 Load) s__rebalance Load) (list (Name &node:31 Load)) nil))\n              )\n              (/seq (Expr (Call (Attribute (Name &self:31 Load) s__remove_one Load) (list (Name &node:31 Load)) nil)))\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get:4\n          (arguments nil (list (arg &self:32 None None) (arg &k:32 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &node:32 Store))\n              (Call (Attribute (Name &self:32 Load) s__get_node Load) (list (Name &k:32 Load)) nil)\n              None\n            )\n            (Return\n              (IfExp\n                (Name &node:32 Load)\n                (Attribute (Name &node:32 Load) s_value Load)\n                (UnaryOp USub (Constant i1 None))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_get_node:4\n          (arguments nil (list (arg &self:33 None None) (arg &k:33 None None)) None nil nil None nil)\n          (/seq\n            (If (UnaryOp Not (Attribute (Name &self:33 Load) s__tree Load)) (/seq (Return (Constant None None))) nil)\n            (Assign (list (Name &node:33 Store)) (Attribute (Name &self:33 Load) s__tree Load) None)\n            (While\n              (Name &node:33 Load)\n              (/seq\n                (If\n                  (Compare (Name &k:33 Load) (list Lt) (list (Attribute (Name &node:33 Load) s_key Load)))\n                  (/seq (Assign (list (Name &node:33 Store)) (Attribute (Name &node:33 Load) s_left Load) None))\n                  (/seq\n                    (If\n                      (Compare (Attribute (Name &node:33 Load) s_key Load) (list Lt) (list (Name &k:33 Load)))\n                      (/seq (Assign (list (Name &node:33 Store)) (Attribute (Name &node:33 Load) s_right Load) None))\n                      (/seq (Return (Name &node:33 Load)))\n                    )\n                  )\n                )\n              )\n              nil\n            )\n            (Return (Constant None None))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get_at:4\n          (arguments nil (list (arg &self:34 None None) (arg &pos:34 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &x:34 Store)) (BinOp (Name &pos:34 Load) Add (Constant i1 None)) None)\n            (Assign (list (Name &node:34 Store)) (Attribute (Name &self:34 Load) s__tree Load) None)\n            (While\n              (Name &node:34 Load)\n              (/seq\n                (If\n                  (Compare (Name &x:34 Load) (list Lt) (list (Attribute (Name &node:34 Load) s_num_left Load)))\n                  (/seq (Assign (list (Name &node:34 Store)) (Attribute (Name &node:34 Load) s_left Load) None))\n                  (/seq\n                    (If\n                      (Compare (Attribute (Name &node:34 Load) s_num_left Load) (list Lt) (list (Name &x:34 Load)))\n                      (/seq\n                        (AugAssign (Name &x:34 Store) Sub (Attribute (Name &node:34 Load) s_num_left Load))\n                        (Assign (list (Name &node:34 Store)) (Attribute (Name &node:34 Load) s_right Load) None)\n                      )\n                      (/seq\n                        (Return\n                          (Tuple\n                            (list\n                              (Attribute (Name &node:34 Load) s_key Load)\n                              (Attribute (Name &node:34 Load) s_value Load)\n                            )\n                            Load\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n            (Raise\n              (Call\n                (Name g_IndexError Load)\n                (list\n                  (Constant s-Wzc5LCAxMTcsIDExNiwgMzIsIDExMSwgMTAyLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgMTE1XQ== None)\n                )\n                nil\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_is_left:4\n          (arguments nil (list (arg &node:35 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (BoolOp\n                And\n                (list\n                  (Attribute (Attribute (Name &node:35 Load) s_parent Load) s_left Load)\n                  (Compare\n                    (Attribute (Attribute (Name &node:35 Load) s_parent Load) s_left Load)\n                    (list Eq)\n                    (list (Name &node:35 Load))\n                  )\n                )\n              )\n            )\n          )\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n        (FunctionDef\n          &_is_leaf:4\n          (arguments nil (list (arg &node:36 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (BoolOp\n                And\n                (list\n                  (Compare (Attribute (Name &node:36 Load) s_left Load) (list Is) (list (Constant None None)))\n                  (Compare (Attribute (Name &node:36 Load) s_right Load) (list Is) (list (Constant None None)))\n                )\n              )\n            )\n          )\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n        (FunctionDef\n          &_rotate_right:4\n          (arguments nil (list (arg &self:37 None None) (arg &node:37 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (UnaryOp Not (Attribute (Name &node:37 Load) s_parent Load))\n              (/seq\n                (Assign\n                  (list (Attribute (Name &self:37 Load) s__tree Store))\n                  (Attribute (Name &node:37 Load) s_left Load)\n                  None\n                )\n                (Assign\n                  (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_parent Store))\n                  (Constant None None)\n                  None\n                )\n              )\n              (/seq\n                (If\n                  (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:37 Load)) nil)\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:37 Load) s_parent Load) s_left Store))\n                      (Attribute (Name &node:37 Load) s_left Load)\n                      None\n                    )\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_parent Store))\n                      (Attribute (Name &node:37 Load) s_parent Load)\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:37 Load) s_parent Load) s_right Store))\n                      (Attribute (Name &node:37 Load) s_left Load)\n                      None\n                    )\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_parent Store))\n                      (Attribute (Name &node:37 Load) s_parent Load)\n                      None\n                    )\n                  )\n                )\n              )\n            )\n            (Assign\n              (list (Name &bk:37 Store))\n              (Attribute (Attribute (Name &node:37 Load) s_left Load) s_right Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Attribute (Name &node:37 Load) s_left Load) s_right Store))\n              (Name &node:37 Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:37 Load) s_parent Store))\n              (Attribute (Name &node:37 Load) s_left Load)\n              None\n            )\n            (Assign (list (Attribute (Name &node:37 Load) s_left Store)) (Name &bk:37 Load) None)\n            (If\n              (Name &bk:37 Load)\n              (/seq (Assign (list (Attribute (Name &bk:37 Load) s_parent Store)) (Name &node:37 Load) None))\n              nil\n            )\n            (Assign\n              (list (Attribute (Name &node:37 Load) s_height Store))\n              (BinOp\n                (Call\n                  (Name g_max Load)\n                  (list\n                    (Call\n                      (Attribute (Name &self:37 Load) s_get_height Load)\n                      (list (Attribute (Name &node:37 Load) s_left Load))\n                      nil\n                    )\n                    (Call\n                      (Attribute (Name &self:37 Load) s_get_height Load)\n                      (list (Attribute (Name &node:37 Load) s_right Load))\n                      nil\n                    )\n                  )\n                  nil\n                )\n                Add\n                (Constant i1 None)\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:37 Load) s_num_total Store))\n              (BinOp\n                (BinOp\n                  (Constant i1 None)\n                  Add\n                  (Call\n                    (Attribute (Name &self:37 Load) s_get_num_total Load)\n                    (list (Attribute (Name &node:37 Load) s_left Load))\n                    nil\n                  )\n                )\n                Add\n                (Call\n                  (Attribute (Name &self:37 Load) s_get_num_total Load)\n                  (list (Attribute (Name &node:37 Load) s_right Load))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:37 Load) s_num_left Store))\n              (BinOp\n                (Constant i1 None)\n                Add\n                (Call\n                  (Attribute (Name &self:37 Load) s_get_num_total Load)\n                  (list (Attribute (Name &node:37 Load) s_left Load))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_rotate_left:4\n          (arguments nil (list (arg &self:38 None None) (arg &node:38 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (UnaryOp Not (Attribute (Name &node:38 Load) s_parent Load))\n              (/seq\n                (Assign\n                  (list (Attribute (Name &self:38 Load) s__tree Store))\n                  (Attribute (Name &node:38 Load) s_right Load)\n                  None\n                )\n                (Assign\n                  (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_parent Store))\n                  (Constant None None)\n                  None\n                )\n              )\n              (/seq\n                (If\n                  (Call (Attribute (Name &AvlTree:0 Load) s__is_left Load) (list (Name &node:38 Load)) nil)\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:38 Load) s_parent Load) s_left Store))\n                      (Attribute (Name &node:38 Load) s_right Load)\n                      None\n                    )\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_parent Store))\n                      (Attribute (Name &node:38 Load) s_parent Load)\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:38 Load) s_parent Load) s_right Store))\n                      (Attribute (Name &node:38 Load) s_right Load)\n                      None\n                    )\n                    (Assign\n                      (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_parent Store))\n                      (Attribute (Name &node:38 Load) s_parent Load)\n                      None\n                    )\n                  )\n                )\n              )\n            )\n            (Assign\n              (list (Name &bk:38 Store))\n              (Attribute (Attribute (Name &node:38 Load) s_right Load) s_left Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Attribute (Name &node:38 Load) s_right Load) s_left Store))\n              (Name &node:38 Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:38 Load) s_parent Store))\n              (Attribute (Name &node:38 Load) s_right Load)\n              None\n            )\n            (Assign (list (Attribute (Name &node:38 Load) s_right Store)) (Name &bk:38 Load) None)\n            (If\n              (Name &bk:38 Load)\n              (/seq (Assign (list (Attribute (Name &bk:38 Load) s_parent Store)) (Name &node:38 Load) None))\n              nil\n            )\n            (Assign\n              (list (Attribute (Name &node:38 Load) s_height Store))\n              (BinOp\n                (Call\n                  (Name g_max Load)\n                  (list\n                    (Call\n                      (Attribute (Name &self:38 Load) s_get_height Load)\n                      (list (Attribute (Name &node:38 Load) s_left Load))\n                      nil\n                    )\n                    (Call\n                      (Attribute (Name &self:38 Load) s_get_height Load)\n                      (list (Attribute (Name &node:38 Load) s_right Load))\n                      nil\n                    )\n                  )\n                  nil\n                )\n                Add\n                (Constant i1 None)\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:38 Load) s_num_total Store))\n              (BinOp\n                (BinOp\n                  (Constant i1 None)\n                  Add\n                  (Call\n                    (Attribute (Name &self:38 Load) s_get_num_total Load)\n                    (list (Attribute (Name &node:38 Load) s_left Load))\n                    nil\n                  )\n                )\n                Add\n                (Call\n                  (Attribute (Name &self:38 Load) s_get_num_total Load)\n                  (list (Attribute (Name &node:38 Load) s_right Load))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &node:38 Load) s_num_left Store))\n              (BinOp\n                (Constant i1 None)\n                Add\n                (Call\n                  (Attribute (Name &self:38 Load) s_get_num_total Load)\n                  (list (Attribute (Name &node:38 Load) s_left Load))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_get_next:4\n          (arguments nil (list (arg &node:39 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (UnaryOp Not (Attribute (Name &node:39 Load) s_right Load))\n              (/seq (Return (Attribute (Name &node:39 Load) s_parent Load)))\n              nil\n            )\n            (Assign (list (Name &n:39 Store)) (Attribute (Name &node:39 Load) s_right Load) None)\n            (While\n              (Attribute (Name &n:39 Load) s_left Load)\n              (/seq (Assign (list (Name &n:39 Store)) (Attribute (Name &n:39 Load) s_left Load) None))\n              nil\n            )\n            (Return (Name &n:39 Load))\n          )\n          (list (Name g_staticmethod Load))\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &SegmentTree1:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:5\n          (arguments\n            nil\n            (list\n              (arg &self:40 None None)\n              (arg &data:40 None None)\n              (arg &default:40 None None)\n              (arg &func:40 None None)\n            )\n            None\n            nil\n            nil\n            None\n            (list\n              (Constant i0 None)\n              (Lambda\n                (arguments nil (list (arg &a:62 None None) (arg &b:62 None None)) None nil nil None nil)\n                (Call (Name g_max Load) (list (Name &a:62 Load) (Name &b:62 Load)) nil)\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd\n                None\n              )\n            )\n            (Assign (list (Attribute (Name &self:40 Load) s__default Store)) (Name &default:40 Load) None)\n            (Assign (list (Attribute (Name &self:40 Load) s__func Store)) (Name &func:40 Load) None)\n            (Assign\n              (list (Attribute (Name &self:40 Load) s__len Store))\n              (Call (Name g_len Load) (list (Name &data:40 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:40 Load) s__size Store) (Name &_size:40 Store))\n              (BinOp\n                (Constant i1 None)\n                LShift\n                (Call\n                  (Attribute\n                    (BinOp (Attribute (Name &self:40 Load) s__len Load) Sub (Constant i1 None))\n                    s_bit_length\n                    Load\n                  )\n                  nil\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:40 Load) s_data Store))\n              (BinOp\n                (List (list (Name &default:40 Load)) Load)\n                Mult\n                (BinOp (Constant i2 None) Mult (Name &_size:40 Load))\n              )\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:40 Load) s_data Load)\n                  (Slice\n                    (Name &_size:40 Load)\n                    (BinOp (Name &_size:40 Load) Add (Attribute (Name &self:40 Load) s__len Load))\n                    None\n                  )\n                  Store\n                )\n              )\n              (Name &data:40 Load)\n              None\n            )\n            (For\n              (Name &i:40 Store)\n              (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:40 Load)) nil)) nil)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:40 Load) s_data Load) (Name &i:40 Load) Store))\n                  (Call\n                    (Name &func:40 Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:40 Load) s_data Load)\n                        (BinOp (Name &i:40 Load) Add (Name &i:40 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:40 Load) s_data Load)\n                        (BinOp (BinOp (Name &i:40 Load) Add (Name &i:40 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__delitem__:5\n          (arguments nil (list (arg &self:41 None None) (arg &idx:41 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &self:41 Load) (Name &idx:41 Load) Store))\n              (Attribute (Name &self:41 Load) s__default Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__getitem__:5\n          (arguments nil (list (arg &self:42 None None) (arg &idx:42 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:42 Load) s_data Load)\n                (BinOp (Name &idx:42 Load) Add (Attribute (Name &self:42 Load) s__size Load))\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__setitem__:5\n          (arguments\n            nil\n            (list (arg &self:43 None None) (arg &idx:43 None None) (arg &value:43 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &idx:43 Store) Add (Attribute (Name &self:43 Load) s__size Load))\n            (Assign\n              (list (Subscript (Attribute (Name &self:43 Load) s_data Load) (Name &idx:43 Load) Store))\n              (Name &value:43 Load)\n              None\n            )\n            (AugAssign (Name &idx:43 Store) RShift (Constant i1 None))\n            (While\n              (Name &idx:43 Load)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:43 Load) s_data Load) (Name &idx:43 Load) Store))\n                  (Call\n                    (Attribute (Name &self:43 Load) s__func Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:43 Load) s_data Load)\n                        (BinOp (Constant i2 None) Mult (Name &idx:43 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:43 Load) s_data Load)\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &idx:43 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (AugAssign (Name &idx:43 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__len__:5\n          (arguments nil (list (arg &self:44 None None)) None nil nil None nil)\n          (/seq (Return (Attribute (Name &self:44 Load) s__len Load)))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:5\n          (arguments\n            nil\n            (list (arg &self:45 None None) (arg &start:45 None None) (arg &stop:45 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &start:45 Load) (list Eq) (list (Name &stop:45 Load)))\n              (/seq\n                (Return (Call (Attribute (Name &self:45 Load) s___getitem__ Load) (list (Name &start:45 Load)) nil))\n              )\n              nil\n            )\n            (AugAssign (Name &stop:45 Store) Add (Constant i1 None))\n            (AugAssign (Name &start:45 Store) Add (Attribute (Name &self:45 Load) s__size Load))\n            (AugAssign (Name &stop:45 Store) Add (Attribute (Name &self:45 Load) s__size Load))\n            (Assign (list (Name &res:45 Store)) (Attribute (Name &self:45 Load) s__default Load) None)\n            (While\n              (Compare (Name &start:45 Load) (list Lt) (list (Name &stop:45 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &start:45 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (Assign\n                      (list (Name &res:45 Store))\n                      (Call\n                        (Attribute (Name &self:45 Load) s__func Load)\n                        (list\n                          (Name &res:45 Load)\n                          (Subscript (Attribute (Name &self:45 Load) s_data Load) (Name &start:45 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign (Name &start:45 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (If\n                  (BinOp (Name &stop:45 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign (Name &stop:45 Store) Sub (Constant i1 None))\n                    (Assign\n                      (list (Name &res:45 Store))\n                      (Call\n                        (Attribute (Name &self:45 Load) s__func Load)\n                        (list\n                          (Name &res:45 Load)\n                          (Subscript (Attribute (Name &self:45 Load) s_data Load) (Name &stop:45 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n                (AugAssign (Name &start:45 Store) RShift (Constant i1 None))\n                (AugAssign (Name &stop:45 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n            (Return (Name &res:45 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__repr__:5\n          (arguments nil (list (arg &self:46 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Call\n                (Attribute\n                  (Constant\n                    s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd\n                    None\n                  )\n                  s_format\n                  Load\n                )\n                (list (Attribute (Name &self:46 Load) s_data Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &SegmentTree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:6\n          (arguments\n            nil\n            (list\n              (arg &self:47 None None)\n              (arg &data:47 None None)\n              (arg &default:47 None None)\n              (arg &func:47 None None)\n            )\n            None\n            nil\n            nil\n            None\n            (list\n              (Constant i0 None)\n              (Lambda\n                (arguments nil (list (arg &a:63 None None) (arg &b:63 None None)) None nil nil None nil)\n                (BinOp (Name &a:63 Load) Add (Name &b:63 Load))\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDExNiwgMTE0LCAxMDEsIDEwMSwgMzIsIDExOSwgMTA1LCAxMTYsIDEwNCwgMzIsIDEwMCwgOTcsIDExNiwgOTdd\n                None\n              )\n            )\n            (Assign (list (Attribute (Name &self:47 Load) s__default Store)) (Name &default:47 Load) None)\n            (Assign (list (Attribute (Name &self:47 Load) s__func Store)) (Name &func:47 Load) None)\n            (Assign\n              (list (Attribute (Name &self:47 Load) s__len Store))\n              (Call (Name g_len Load) (list (Name &data:47 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:47 Load) s__size Store) (Name &_size:47 Store))\n              (BinOp\n                (Constant i1 None)\n                LShift\n                (Call\n                  (Attribute\n                    (BinOp (Attribute (Name &self:47 Load) s__len Load) Sub (Constant i1 None))\n                    s_bit_length\n                    Load\n                  )\n                  nil\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:47 Load) s_data Store))\n              (BinOp\n                (List (list (Name &default:47 Load)) Load)\n                Mult\n                (BinOp (Constant i2 None) Mult (Name &_size:47 Load))\n              )\n              None\n            )\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:47 Load) s_data Load)\n                  (Slice\n                    (Name &_size:47 Load)\n                    (BinOp (Name &_size:47 Load) Add (Attribute (Name &self:47 Load) s__len Load))\n                    None\n                  )\n                  Store\n                )\n              )\n              (Name &data:47 Load)\n              None\n            )\n            (For\n              (Name &i:47 Store)\n              (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &_size:47 Load)) nil)) nil)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:47 Load) s_data Load) (Name &i:47 Load) Store))\n                  (Call\n                    (Name &func:47 Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:47 Load) s_data Load)\n                        (BinOp (Name &i:47 Load) Add (Name &i:47 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:47 Load) s_data Load)\n                        (BinOp (BinOp (Name &i:47 Load) Add (Name &i:47 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__delitem__:6\n          (arguments nil (list (arg &self:48 None None) (arg &idx:48 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &self:48 Load) (Name &idx:48 Load) Store))\n              (Attribute (Name &self:48 Load) s__default Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__getitem__:6\n          (arguments nil (list (arg &self:49 None None) (arg &idx:49 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:49 Load) s_data Load)\n                (BinOp (Name &idx:49 Load) Add (Attribute (Name &self:49 Load) s__size Load))\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__setitem__:6\n          (arguments\n            nil\n            (list (arg &self:50 None None) (arg &idx:50 None None) (arg &value:50 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &idx:50 Store) Add (Attribute (Name &self:50 Load) s__size Load))\n            (Assign\n              (list (Subscript (Attribute (Name &self:50 Load) s_data Load) (Name &idx:50 Load) Store))\n              (Name &value:50 Load)\n              None\n            )\n            (AugAssign (Name &idx:50 Store) RShift (Constant i1 None))\n            (While\n              (Name &idx:50 Load)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:50 Load) s_data Load) (Name &idx:50 Load) Store))\n                  (Call\n                    (Attribute (Name &self:50 Load) s__func Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:50 Load) s_data Load)\n                        (BinOp (Constant i2 None) Mult (Name &idx:50 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:50 Load) s_data Load)\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &idx:50 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (AugAssign (Name &idx:50 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__len__:6\n          (arguments nil (list (arg &self:51 None None)) None nil nil None nil)\n          (/seq (Return (Attribute (Name &self:51 Load) s__len Load)))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:6\n          (arguments\n            nil\n            (list (arg &self:52 None None) (arg &start:52 None None) (arg &stop:52 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &start:52 Load) (list Eq) (list (Name &stop:52 Load)))\n              (/seq\n                (Return (Call (Attribute (Name &self:52 Load) s___getitem__ Load) (list (Name &start:52 Load)) nil))\n              )\n              nil\n            )\n            (AugAssign (Name &stop:52 Store) Add (Constant i1 None))\n            (AugAssign (Name &start:52 Store) Add (Attribute (Name &self:52 Load) s__size Load))\n            (AugAssign (Name &stop:52 Store) Add (Attribute (Name &self:52 Load) s__size Load))\n            (Assign (list (Name &res:52 Store)) (Attribute (Name &self:52 Load) s__default Load) None)\n            (While\n              (Compare (Name &start:52 Load) (list Lt) (list (Name &stop:52 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &start:52 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (Assign\n                      (list (Name &res:52 Store))\n                      (Call\n                        (Attribute (Name &self:52 Load) s__func Load)\n                        (list\n                          (Name &res:52 Load)\n                          (Subscript (Attribute (Name &self:52 Load) s_data Load) (Name &start:52 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign (Name &start:52 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (If\n                  (BinOp (Name &stop:52 Load) BitAnd (Constant i1 None))\n                  (/seq\n                    (AugAssign (Name &stop:52 Store) Sub (Constant i1 None))\n                    (Assign\n                      (list (Name &res:52 Store))\n                      (Call\n                        (Attribute (Name &self:52 Load) s__func Load)\n                        (list\n                          (Name &res:52 Load)\n                          (Subscript (Attribute (Name &self:52 Load) s_data Load) (Name &stop:52 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n                (AugAssign (Name &start:52 Store) RShift (Constant i1 None))\n                (AugAssign (Name &stop:52 Store) RShift (Constant i1 None))\n              )\n              nil\n            )\n            (Return (Name &res:52 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__repr__:6\n          (arguments nil (list (arg &self:53 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Call\n                (Attribute\n                  (Constant\n                    s-WzgzLCAxMDEsIDEwMywgMTA5LCAxMDEsIDExMCwgMTE2LCA4NCwgMTE0LCAxMDEsIDEwMSwgNDAsIDEyMywgNDgsIDEyNSwgNDFd\n                    None\n                  )\n                  s_format\n                  Load\n                )\n                (list (Attribute (Name &self:53 Load) s_data Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &Factorial:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:7\n          (arguments nil (list (arg &self:54 None None) (arg &MOD:54 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:54 Load) s_MOD Store)) (Name &MOD:54 Load) None)\n            (Assign\n              (list (Attribute (Name &self:54 Load) s_factorials Store))\n              (List (list (Constant i1 None) (Constant i1 None)) Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:54 Load) s_invModulos Store))\n              (List (list (Constant i0 None) (Constant i1 None)) Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:54 Load) s_invFactorial_ Store))\n              (List (list (Constant i1 None) (Constant i1 None)) Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &calc:7\n          (arguments nil (list (arg &self:55 None None) (arg &n:55 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &n:55 Load) (list LtE) (list (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant\n                        s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTAsIDMzXQ==\n                        None\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant\n                          s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ==\n                          None\n                        )\n                        Add\n                        (Call (Name g_str Load) (list (Name &n:55 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              nil\n            )\n            (If\n              (Compare\n                (Name &n:55 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_factorials Load)) nil))\n              )\n              (/seq (Return (Subscript (Attribute (Name &self:55 Load) s_factorials Load) (Name &n:55 Load) Load)))\n              nil\n            )\n            (Assign\n              (list (Name &nextArr:55 Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp\n                  (BinOp (Name &n:55 Load) Add (Constant i1 None))\n                  Sub\n                  (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_factorials Load)) nil)\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &initialI:55 Store))\n              (Call (Name g_len Load) (list (Attribute (Name &self:55 Load) s_factorials Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &prev:55 Store))\n              (Subscript (Attribute (Name &self:55 Load) s_factorials Load) (UnaryOp USub (Constant i1 None)) Load)\n              None\n            )\n            (Assign (list (Name &m:55 Store)) (Attribute (Name &self:55 Load) s_MOD Load) None)\n            (For\n              (Name &i:55 Store)\n              (Call\n                (Name g_range Load)\n                (list (Name &initialI:55 Load) (BinOp (Name &n:55 Load) Add (Constant i1 None)))\n                nil\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Name &prev:55 Store)\n                    (Subscript (Name &nextArr:55 Load) (BinOp (Name &i:55 Load) Sub (Name &initialI:55 Load)) Store)\n                  )\n                  (BinOp (BinOp (Name &prev:55 Load) Mult (Name &i:55 Load)) Mod (Name &m:55 Load))\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (AugAssign (Attribute (Name &self:55 Load) s_factorials Store) Add (Name &nextArr:55 Load))\n            (Return (Subscript (Attribute (Name &self:55 Load) s_factorials Load) (Name &n:55 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &inv:7\n          (arguments nil (list (arg &self:56 None None) (arg &n:56 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &n:56 Load) (list LtE) (list (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant\n                        s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTAsIDk0LCA0MCwgNDUsIDQ5LCA0MV0=\n                        None\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant\n                          s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ==\n                          None\n                        )\n                        Add\n                        (Call (Name g_str Load) (list (Name &n:56 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              nil\n            )\n            (Assign (list (Name &p:56 Store)) (Attribute (Name &self:56 Load) s_MOD Load) None)\n            (Assign (list (Name &pi:56 Store)) (BinOp (Name &n:56 Load) Mod (Name &p:56 Load)) None)\n            (If\n              (Compare\n                (Name &pi:56 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invModulos Load)) nil))\n              )\n              (/seq (Return (Subscript (Attribute (Name &self:56 Load) s_invModulos Load) (Name &pi:56 Load) Load)))\n              nil\n            )\n            (Assign\n              (list (Name &nextArr:56 Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp\n                  (BinOp (Name &n:56 Load) Add (Constant i1 None))\n                  Sub\n                  (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invModulos Load)) nil)\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &initialI:56 Store))\n              (Call (Name g_len Load) (list (Attribute (Name &self:56 Load) s_invModulos Load)) nil)\n              None\n            )\n            (For\n              (Name &i:56 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (Name &initialI:56 Load)\n                  (Call (Name g_min Load) (list (Name &p:56 Load) (BinOp (Name &n:56 Load) Add (Constant i1 None))) nil)\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Name &next:56 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp\n                        USub\n                        (Subscript\n                          (Attribute (Name &self:56 Load) s_invModulos Load)\n                          (BinOp (Name &p:56 Load) Mod (Name &i:56 Load))\n                          Load\n                        )\n                      )\n                      Mult\n                      (BinOp (Name &p:56 Load) FloorDiv (Name &i:56 Load))\n                    )\n                    Mod\n                    (Name &p:56 Load)\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute (Attribute (Name &self:56 Load) s_invModulos Load) s_append Load)\n                    (list (Name &next:56 Load))\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n            (Return (Subscript (Attribute (Name &self:56 Load) s_invModulos Load) (Name &pi:56 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &invFactorial:7\n          (arguments nil (list (arg &self:57 None None) (arg &n:57 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &n:57 Load) (list LtE) (list (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant\n                        s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5NywgMTE0LCAxMDMsIDExNywgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCA0MCwgMTEwLCA5NCwgNDAsIDQ1LCA0OSwgNDEsIDQxLCAzM10=\n                        None\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant\n                          s-WzExMCwgMzIsIDEwOSwgMTE3LCAxMTUsIDExNiwgMzIsIDk4LCAxMDEsIDMyLCAxMTAsIDExMSwgMTEwLCA0NSwgMTEwLCAxMDEsIDEwMywgOTcsIDExNiwgMTA1LCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDQ2LCAzMiwgNjYsIDExNywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMywgMTE3LCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTksIDk3LCAxMTUsIDMyXQ==\n                          None\n                        )\n                        Add\n                        (Call (Name g_str Load) (list (Name &n:57 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              nil\n            )\n            (If\n              (Compare\n                (Name &n:57 Load)\n                (list Lt)\n                (list (Call (Name g_len Load) (list (Attribute (Name &self:57 Load) s_invFactorial_ Load)) nil))\n              )\n              (/seq (Return (Subscript (Attribute (Name &self:57 Load) s_invFactorial_ Load) (Name &n:57 Load) Load)))\n              nil\n            )\n            (Expr (Call (Attribute (Name &self:57 Load) s_inv Load) (list (Name &n:57 Load)) nil))\n            (Assign\n              (list (Name &nextArr:57 Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp\n                  (BinOp (Name &n:57 Load) Add (Constant i1 None))\n                  Sub\n                  (Call (Name g_len Load) (list (Attribute (Name &self:57 Load) s_invFactorial_ Load)) nil)\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &initialI:57 Store))\n              (Call (Name g_len Load) (list (Attribute (Name &self:57 Load) s_invFactorial_ Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &prev:57 Store))\n              (Subscript (Attribute (Name &self:57 Load) s_invFactorial_ Load) (UnaryOp USub (Constant i1 None)) Load)\n              None\n            )\n            (Assign (list (Name &p:57 Store)) (Attribute (Name &self:57 Load) s_MOD Load) None)\n            (For\n              (Name &i:57 Store)\n              (Call\n                (Name g_range Load)\n                (list (Name &initialI:57 Load) (BinOp (Name &n:57 Load) Add (Constant i1 None)))\n                nil\n              )\n              (/seq\n                (Assign\n                  (list\n                    (Name &prev:57 Store)\n                    (Subscript (Name &nextArr:57 Load) (BinOp (Name &i:57 Load) Sub (Name &initialI:57 Load)) Store)\n                  )\n                  (BinOp\n                    (BinOp\n                      (Name &prev:57 Load)\n                      Mult\n                      (Subscript\n                        (Attribute (Name &self:57 Load) s_invModulos Load)\n                        (BinOp (Name &i:57 Load) Mod (Name &p:57 Load))\n                        Load\n                      )\n                    )\n                    Mod\n                    (Name &p:57 Load)\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (AugAssign (Attribute (Name &self:57 Load) s_invFactorial_ Store) Add (Name &nextArr:57 Load))\n            (Return (Subscript (Attribute (Name &self:57 Load) s_invFactorial_ Load) (Name &n:57 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &Combination:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:8\n          (arguments nil (list (arg &self:58 None None) (arg &MOD:58 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:58 Load) s_MOD Store)) (Name &MOD:58 Load) None)\n            (Assign\n              (list (Attribute (Name &self:58 Load) s_factorial Store))\n              (Call (Name &Factorial:0 Load) (list (Name &MOD:58 Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &ncr:8\n          (arguments\n            nil\n            (list (arg &self:59 None None) (arg &n:59 None None) (arg &k:59 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare (Name &k:59 Load) (list Lt) (list (Constant i0 None)))\n                  (Compare (Name &n:59 Load) (list Lt) (list (Name &k:59 Load)))\n                )\n              )\n              (/seq (Return (Constant i0 None)))\n              nil\n            )\n            (Assign\n              (list (Name &k:59 Store))\n              (Call (Name g_min Load) (list (Name &k:59 Load) (BinOp (Name &n:59 Load) Sub (Name &k:59 Load))) nil)\n              None\n            )\n            (Assign (list (Name &f:59 Store)) (Attribute (Name &self:59 Load) s_factorial Load) None)\n            (Return\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (Call (Attribute (Name &f:59 Load) s_calc Load) (list (Name &n:59 Load)) nil)\n                    Mult\n                    (Call\n                      (Attribute (Name &f:59 Load) s_invFactorial Load)\n                      (list\n                        (Call\n                          (Name g_max Load)\n                          (list (BinOp (Name &n:59 Load) Sub (Name &k:59 Load)) (Name &k:59 Load))\n                          nil\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  Mult\n                  (Call\n                    (Attribute (Name &f:59 Load) s_invFactorial Load)\n                    (list\n                      (Call\n                        (Name g_min Load)\n                        (list (Name &k:59 Load) (BinOp (Name &n:59 Load) Sub (Name &k:59 Load)))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                Mod\n                (Attribute (Name &self:59 Load) s_MOD Load)\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &powm:0\n      (arguments nil (list (arg &a:9 None None) (arg &n:9 None None) (arg &m:9 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &a:9 Load) (list Eq) (list (Constant i1 None)))\n              (Compare (Name &n:9 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Return (Constant i1 None)))\n          nil\n        )\n        (If\n          (Compare (BinOp (Name &n:9 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &s:9 Store))\n              (Call\n                (Name &powm:0 Load)\n                (list (Name &a:9 Load) (BinOp (Name &n:9 Load) FloorDiv (Constant i2 None)) (Name &m:9 Load))\n                nil\n              )\n              None\n            )\n            (Return (BinOp (BinOp (Name &s:9 Load) Mult (Name &s:9 Load)) Mod (Name &m:9 Load)))\n          )\n          (/seq\n            (Return\n              (BinOp\n                (BinOp\n                  (Name &a:9 Load)\n                  Mult\n                  (Call\n                    (Name &powm:0 Load)\n                    (list (Name &a:9 Load) (BinOp (Name &n:9 Load) Sub (Constant i1 None)) (Name &m:9 Load))\n                    nil\n                  )\n                )\n                Mod\n                (Name &m:9 Load)\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sort_list:0\n      (arguments nil (list (arg &list1:10 None None) (arg &list2:10 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &zipped_pairs:10 Store))\n          (Call (Name g_zip Load) (list (Name &list2:10 Load) (Name &list1:10 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &z:10 Store))\n          (ListComp\n            (Name &x:60 Load)\n            (list\n              (comprehension\n                (Tuple (list (Name &_:60 Store) (Name &x:60 Store)) Store)\n                (Call (Name g_sorted Load) (list (Name &zipped_pairs:10 Load)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Return (Name &z:10 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &product:0\n      (arguments nil (list (arg &l:11 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &por:11 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:11 Store)\n          (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &l:11 Load)) nil)) nil)\n          (/seq (AugAssign (Name &por:11 Store) Mult (Subscript (Name &l:11 Load) (Name &i:11 Load) Load)))\n          nil\n          None\n        )\n        (Return (Name &por:11 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &binarySearchCount:0\n      (arguments nil (list (arg &arr:12 None None) (arg &n:12 None None) (arg &key:12 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &left:12 Store)) (Constant i0 None) None)\n        (Assign (list (Name &right:12 Store)) (BinOp (Name &n:12 Load) Sub (Constant i1 None)) None)\n        (Assign (list (Name &count:12 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &left:12 Load) (list LtE) (list (Name &right:12 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:12 Store))\n              (Call\n                (Name g_int Load)\n                (list (BinOp (BinOp (Name &right:12 Load) Add (Name &left:12 Load)) Div (Constant i2 None)))\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Subscript (Name &arr:12 Load) (Name &mid:12 Load) Load) (list Lt) (list (Name &key:12 Load)))\n              (/seq\n                (Assign (list (Name &count:12 Store)) (BinOp (Name &mid:12 Load) Add (Constant i1 None)) None)\n                (Assign (list (Name &left:12 Store)) (BinOp (Name &mid:12 Load) Add (Constant i1 None)) None)\n              )\n              (/seq (Assign (list (Name &right:12 Store)) (BinOp (Name &mid:12 Load) Sub (Constant i1 None)) None))\n            )\n          )\n          nil\n        )\n        (Return (Name &count:12 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &countdig:0\n      (arguments nil (list (arg &n:13 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &c:13 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &n:13 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &n:13 Store) FloorDiv (Constant i10 None))\n            (AugAssign (Name &c:13 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Return (Name &c:13 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &binary:0\n      (arguments nil (list (arg &x:14 None None) (arg &length:14 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &y:14 Store))\n          (Subscript (Call (Name g_bin Load) (list (Name &x:14 Load)) nil) (Slice (Constant i2 None) None None) Load)\n          None\n        )\n        (Return\n          (IfExp\n            (Compare (Call (Name g_len Load) (list (Name &y:14 Load)) nil) (list GtE) (list (Name &length:14 Load)))\n            (Name &y:14 Load)\n            (BinOp\n              (BinOp\n                (Constant s_0 None)\n                Mult\n                (BinOp (Name &length:14 Load) Sub (Call (Name g_len Load) (list (Name &y:14 Load)) nil))\n              )\n              Add\n              (Name &y:14 Load)\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &countGreater:0\n      (arguments nil (list (arg &arr:15 None None) (arg &n:15 None None) (arg &k:15 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &l:15 Store)) (Constant i0 None) None)\n        (Assign (list (Name &r:15 Store)) (BinOp (Name &n:15 Load) Sub (Constant i1 None)) None)\n        (Assign (list (Name &leftGreater:15 Store)) (Name &n:15 Load) None)\n        (While\n          (Compare (Name &l:15 Load) (list LtE) (list (Name &r:15 Load)))\n          (/seq\n            (Assign\n              (list (Name &m:15 Store))\n              (Call\n                (Name g_int Load)\n                (list\n                  (BinOp\n                    (Name &l:15 Load)\n                    Add\n                    (BinOp (BinOp (Name &r:15 Load) Sub (Name &l:15 Load)) Div (Constant i2 None))\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Subscript (Name &arr:15 Load) (Name &m:15 Load) Load) (list GtE) (list (Name &k:15 Load)))\n              (/seq\n                (Assign (list (Name &leftGreater:15 Store)) (Name &m:15 Load) None)\n                (Assign (list (Name &r:15 Store)) (BinOp (Name &m:15 Load) Sub (Constant i1 None)) None)\n              )\n              (/seq (Assign (list (Name &l:15 Store)) (BinOp (Name &m:15 Load) Add (Constant i1 None)) None))\n            )\n          )\n          nil\n        )\n        (Return (BinOp (Name &n:15 Load) Sub (Name &leftGreater:15 Load)))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &l:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (ListComp\n        (Name &i:16 Load)\n        (list\n          (comprehension\n            (Name &i:16 Store)\n            (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name &SegmentTree:0 Load) (list (Name &f:0 Load)) nil) None)\n    (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &st:0 Store)) (Constant i1 None) None)\n        (Assign (list (Name &end:0 Store)) (Name &n:0 Load) None)\n        (While\n          (Compare (Name &st:0 Load) (list LtE) (list (Name &end:0 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:0 Store))\n              (BinOp (BinOp (Name &st:0 Load) Add (Name &end:0 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (Assign\n              (list (Name &su:0 Store))\n              (Call\n                (Attribute (Name &s:0 Load) s_query Load)\n                (list (Constant i0 None) (BinOp (Name &mid:0 Load) Sub (Constant i2 None)))\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Name &su:0 Load) (list Eq) (list (Subscript (Name &l:0 Load) (Name &i:0 Load) Load)))\n              (/seq\n                (Assign (list (Name &an:0 Store)) (Name &mid:0 Load) None)\n                (Assign (list (Name &st:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None)\n              )\n              (/seq\n                (If\n                  (Compare (Name &su:0 Load) (list Lt) (list (Subscript (Name &l:0 Load) (Name &i:0 Load) Load)))\n                  (/seq (Assign (list (Name &st:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None))\n                  (/seq (Assign (list (Name &end:0 Store)) (BinOp (Name &mid:0 Load) Sub (Constant i1 None)) None))\n                )\n              )\n            )\n          )\n          nil\n        )\n        (Assign (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store)) (Name &an:0 Load) None)\n        (Expr\n          (Call\n            (Attribute (Name &s:0 Load) s___setitem__ Load)\n            (list (BinOp (Name &an:0 Load) Sub (Constant i1 None)) (Constant i0 None))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Starred (Name &ans:0 Load) Load))\n        (list (keyword s_sep (Constant s-WzMyXQ== None)))\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (ClassDef\n      &SegTree:0\n      (list (Name g_object Load))\n      nil\n      (/seq\n        (Expr\n          (Constant\n            s-WzEwMCwgMTExLCA5OSwgMTE1LCAxMTYsIDExNCwgMTA1LCAxMTAsIDEwMywgMzIsIDEwMiwgMTExLCAxMTQsIDMyLCA4MywgMTAxLCAxMDMsIDg0LCAxMTQsIDEwMSwgMTAxXQ==\n            None\n          )\n        )\n        (FunctionDef\n          &__init__:1\n          (arguments\n            nil\n            (list (arg &self:4 None None) (arg &n:4 None None) (arg &arr:4 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign (list (Attribute (Name &self:4 Load) s_n Store)) (Name &n:4 Load) None)\n            (Assign (list (Attribute (Name &self:4 Load) s_arr Store)) (Name &arr:4 Load) None)\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_tree Store))\n              (ListComp\n                (Constant i0 None)\n                (list\n                  (comprehension\n                    (Name &i:9 Store)\n                    (Call (Name g_range Load) (list (BinOp (Constant i2 None) Mult (Name &n:4 Load))) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &construct:1\n          (arguments nil (list (arg &self:5 None None)) None nil nil None nil)\n          (/seq\n            (For\n              (Name &i:5 Store)\n              (Call (Name g_range Load) (list (Attribute (Name &self:5 Load) s_n Load)) nil)\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Attribute (Name &self:5 Load) s_tree Load)\n                      (BinOp (Name &n:0 Load) Add (Name &i:5 Load))\n                      Store\n                    )\n                  )\n                  (Subscript (Attribute (Name &self:5 Load) s_arr Load) (Name &i:5 Load) Load)\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (For\n              (Name &i:5 Store)\n              (Call\n                (Name g_range Load)\n                (list\n                  (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n                  (Constant i0 None)\n                  (UnaryOp USub (Constant i1 None))\n                )\n                nil\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:5 Load) s_tree Load) (Name &i:5 Load) Store))\n                  (Call\n                    (Attribute (Name &self:5 Load) s_function Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:5 Load) s_tree Load)\n                        (BinOp (Constant i2 None) Mult (Name &i:5 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:5 Load) s_tree Load)\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &i:5 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:1\n          (arguments\n            nil\n            (list (arg &self:6 None None) (arg &index:6 None None) (arg &value:6 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &start:6 Store))\n              (BinOp (Name &index:6 Load) Add (Attribute (Name &self:6 Load) s_n Load))\n              None\n            )\n            (Assign\n              (list (Subscript (Attribute (Name &self:6 Load) s_tree Load) (Name &start:6 Load) Store))\n              (Name &value:6 Load)\n              None\n            )\n            (While\n              (Compare (Name &start:6 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &start:6 Store)) (BinOp (Name &start:6 Load) FloorDiv (Constant i2 None)) None)\n                (Assign\n                  (list (Subscript (Attribute (Name &self:6 Load) s_tree Load) (Name &start:6 Load) Store))\n                  (Call\n                    (Attribute (Name &self:6 Load) s_function Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:6 Load) s_tree Load)\n                        (BinOp (Constant i2 None) Mult (Name &start:6 Load))\n                        Load\n                      )\n                      (Subscript\n                        (Attribute (Name &self:6 Load) s_tree Load)\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &start:6 Load)) Add (Constant i1 None))\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &calc:1\n          (arguments\n            nil\n            (list (arg &self:7 None None) (arg &low:7 None None) (arg &high:7 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (AugAssign (Name &low:7 Store) Add (Attribute (Name &self:7 Load) s_n Load))\n            (AugAssign (Name &high:7 Store) Add (Attribute (Name &self:7 Load) s_n Load))\n            (Assign (list (Name &ans:7 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &low:7 Load) (list Lt) (list (Name &high:7 Load)))\n              (/seq\n                (If\n                  (BinOp (Name &low:7 Load) Mod (Constant i2 None))\n                  (/seq\n                    (Assign\n                      (list (Name &ans:7 Store))\n                      (Call\n                        (Attribute (Name &self:7 Load) s_function Load)\n                        (list\n                          (Name &ans:7 Load)\n                          (Subscript (Attribute (Name &self:7 Load) s_tree Load) (Name &low:7 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (AugAssign (Name &low:7 Store) Add (Constant i1 None))\n                  )\n                  nil\n                )\n                (If\n                  (BinOp (Name &high:7 Load) Mod (Constant i2 None))\n                  (/seq\n                    (AugAssign (Name &high:7 Store) Sub (Constant i1 None))\n                    (Assign\n                      (list (Name &ans:7 Store))\n                      (Call\n                        (Attribute (Name &self:7 Load) s_function Load)\n                        (list\n                          (Name &ans:7 Load)\n                          (Subscript (Attribute (Name &self:7 Load) s_tree Load) (Name &high:7 Load) Load)\n                        )\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n                (Assign (list (Name &low:7 Store)) (BinOp (Name &low:7 Load) FloorDiv (Constant i2 None)) None)\n                (Assign (list (Name &high:7 Store)) (BinOp (Name &high:7 Load) FloorDiv (Constant i2 None)) None)\n              )\n              nil\n            )\n            (Return (Name &ans:7 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &function:1\n          (arguments nil (list (arg &self:8 None None) (arg &a:8 None None) (arg &b:8 None None)) None nil nil None nil)\n          (/seq (Return (BinOp (Name &a:8 Load) Add (Name &b:8 Load))))\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &find:0\n      (arguments nil (list (arg &num:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &low:2 Store)) (Constant i0 None) None)\n        (Assign (list (Name &high:2 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None)\n        (While\n          (Compare (Name &low:2 Load) (list Lt) (list (Name &high:2 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:2 Store))\n              (BinOp (BinOp (Name &low:2 Load) Add (Name &high:2 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (If\n              (Compare\n                (Call\n                  (Attribute (Name &st:0 Load) s_calc Load)\n                  (list (Constant i0 None) (BinOp (Name &mid:2 Load) Add (Constant i1 None)))\n                  nil\n                )\n                (list Gt)\n                (list (Name &num:2 Load))\n              )\n              (/seq (Assign (list (Name &high:2 Store)) (BinOp (Name &mid:2 Load) Sub (Constant i1 None)) None))\n              (/seq (Assign (list (Name &low:2 Store)) (BinOp (Name &mid:2 Load) Add (Constant i1 None)) None))\n            )\n          )\n          nil\n        )\n        (If\n          (Compare\n            (Call\n              (Attribute (Name &st:0 Load) s_calc Load)\n              (list (Constant i0 None) (BinOp (Name &low:2 Load) Add (Constant i1 None)))\n              nil\n            )\n            (list Gt)\n            (list (Name &num:2 Load))\n          )\n          (/seq (Return (Name &low:2 Load)))\n          (/seq (Return (BinOp (Name &low:2 Load) Add (Constant i1 None))))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &arr:0 Store))\n      (ListComp\n        (Name &i:3 Load)\n        (list\n          (comprehension\n            (Name &i:3 Store)\n            (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &st:0 Store)) (Call (Name &SegTree:0 Load) (list (Name &n:0 Load) (Name &arr:0 Load)) nil) None)\n    (Expr (Call (Attribute (Name &st:0 Load) s_construct Load) nil nil))\n    (Assign\n      (list (Name &ans:0 Store))\n      (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &n:0 Load))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &ind:0 Store))\n          (Call (Name &find:0 Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil)\n          None\n        )\n        (Assign\n          (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store))\n          (Subscript (Name &arr:0 Load) (Name &ind:0 Load) Load)\n          None\n        )\n        (Expr (Call (Attribute (Name &st:0 Load) s_update Load) (list (Name &ind:0 Load) (Constant i0 None)) nil))\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (FunctionDef\n      &update:0\n      (arguments\n        nil\n        (list (arg &L:1 None None) (arg &C:1 None None) (arg &l:1 None None) (arg &r:1 None None) (arg &rt:1 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (If\n          (Compare (Name &l:1 Load) (list Eq) (list (Name &r:1 Load)))\n          (/seq (AugAssign (Subscript (Name &tree:0 Load) (Name &rt:1 Load) Store) Add (Name &C:1 Load)) (Return None))\n          nil\n        )\n        (Assign\n          (list (Name &mid:1 Store))\n          (BinOp (BinOp (Name &l:1 Load) Add (Name &r:1 Load)) FloorDiv (Constant i2 None))\n          None\n        )\n        (If\n          (Compare (Name &L:1 Load) (list LtE) (list (Name &mid:1 Load)))\n          (/seq\n            (Expr\n              (Call\n                (Name &update:0 Load)\n                (list\n                  (Name &L:1 Load)\n                  (Name &C:1 Load)\n                  (Name &l:1 Load)\n                  (Name &mid:1 Load)\n                  (BinOp (Name &rt:1 Load) LShift (Constant i1 None))\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name &update:0 Load)\n                (list\n                  (Name &L:1 Load)\n                  (Name &C:1 Load)\n                  (BinOp (Name &mid:1 Load) Add (Constant i1 None))\n                  (Name &r:1 Load)\n                  (BinOp (BinOp (Name &rt:1 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))\n                )\n                nil\n              )\n            )\n          )\n        )\n        (Assign\n          (list (Subscript (Name &tree:0 Load) (Name &rt:1 Load) Store))\n          (BinOp\n            (Subscript (Name &tree:0 Load) (BinOp (Name &rt:1 Load) LShift (Constant i1 None)) Load)\n            Add\n            (Subscript\n              (Name &tree:0 Load)\n              (BinOp (BinOp (Name &rt:1 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))\n              Load\n            )\n          )\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &query:0\n      (arguments\n        nil\n        (list (arg &s:2 None None) (arg &l:2 None None) (arg &r:2 None None) (arg &rt:2 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (If (Compare (Name &l:2 Load) (list Eq) (list (Name &r:2 Load))) (/seq (Return (Name &l:2 Load))) nil)\n        (Assign\n          (list (Name &mid:2 Store))\n          (BinOp (BinOp (Name &l:2 Load) Add (Name &r:2 Load)) FloorDiv (Constant i2 None))\n          None\n        )\n        (If\n          (Compare\n            (Subscript (Name &tree:0 Load) (BinOp (Name &rt:2 Load) LShift (Constant i1 None)) Load)\n            (list Gt)\n            (list (Name &s:2 Load))\n          )\n          (/seq\n            (Return\n              (Call\n                (Name &query:0 Load)\n                (list\n                  (Name &s:2 Load)\n                  (Name &l:2 Load)\n                  (Name &mid:2 Load)\n                  (BinOp (Name &rt:2 Load) LShift (Constant i1 None))\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Return\n              (Call\n                (Name &query:0 Load)\n                (list\n                  (BinOp\n                    (Name &s:2 Load)\n                    Sub\n                    (Subscript (Name &tree:0 Load) (BinOp (Name &rt:2 Load) LShift (Constant i1 None)) Load)\n                  )\n                  (BinOp (Name &mid:2 Load) Add (Constant i1 None))\n                  (Name &r:2 Load)\n                  (BinOp (BinOp (Name &rt:2 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Assign\n          (list (Name &tree:0 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i800005 None))\n          None\n        )\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Name g_int Load)\n                  (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n                )\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Name &update:0 Load)\n                (list\n                  (BinOp (Name &i:0 Load) Add (Constant i1 None))\n                  (BinOp (Name &i:0 Load) Add (Constant i1 None))\n                  (Constant i1 None)\n                  (Name &n:0 Load)\n                  (Constant i1 None)\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i200005 None))\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load) (Constant i0 None) (UnaryOp USub (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Store))\n              (Call\n                (Name &query:0 Load)\n                (list\n                  (Subscript (Name &a:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                  (Constant i1 None)\n                  (Name &n:0 Load)\n                  (Constant i1 None)\n                )\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Name &update:0 Load)\n                (list\n                  (Subscript (Name &b:0 Load) (Name &i:0 Load) Load)\n                  (UnaryOp USub (Subscript (Name &b:0 Load) (Name &i:0 Load) Load))\n                  (Constant i1 None)\n                  (Name &n:0 Load)\n                  (Constant i1 None)\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name g_stdout Load) s_write Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCAxMDAsIDMyXQ== None)\n                    Mod\n                    (Subscript (Name &b:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (ClassDef\n      &Tree:0\n      (list (Name g_object Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_tree Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp (BinOp (Constant i4 None) Mult (Name &n:2 Load)) Add (Constant i10 None))\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &update:1\n          (arguments\n            nil\n            (list\n              (arg &self:3 None None)\n              (arg &L:3 None None)\n              (arg &C:3 None None)\n              (arg &l:3 None None)\n              (arg &r:3 None None)\n              (arg &rt:3 None None)\n            )\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Compare (Name &l:3 Load) (list Eq) (list (Name &r:3 Load)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:3 Load) s_tree Load) (Name &rt:3 Load) Store)\n                  Add\n                  (Name &C:3 Load)\n                )\n                (Return None)\n              )\n              nil\n            )\n            (Assign\n              (list (Name &mid:3 Store))\n              (BinOp (BinOp (Name &l:3 Load) Add (Name &r:3 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (If\n              (Compare (Name &L:3 Load) (list LtE) (list (Name &mid:3 Load)))\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &self:3 Load) s_update Load)\n                    (list\n                      (Name &L:3 Load)\n                      (Name &C:3 Load)\n                      (Name &l:3 Load)\n                      (Name &mid:3 Load)\n                      (BinOp (Name &rt:3 Load) LShift (Constant i1 None))\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &self:3 Load) s_update Load)\n                    (list\n                      (Name &L:3 Load)\n                      (Name &C:3 Load)\n                      (BinOp (Name &mid:3 Load) Add (Constant i1 None))\n                      (Name &r:3 Load)\n                      (BinOp (BinOp (Name &rt:3 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n            (Assign\n              (list (Subscript (Attribute (Name &self:3 Load) s_tree Load) (Name &rt:3 Load) Store))\n              (BinOp\n                (Subscript\n                  (Attribute (Name &self:3 Load) s_tree Load)\n                  (BinOp (Name &rt:3 Load) LShift (Constant i1 None))\n                  Load\n                )\n                Add\n                (Subscript\n                  (Attribute (Name &self:3 Load) s_tree Load)\n                  (BinOp (BinOp (Name &rt:3 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))\n                  Load\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &query:1\n          (arguments\n            nil\n            (list\n              (arg &self:4 None None)\n              (arg &s:4 None None)\n              (arg &l:4 None None)\n              (arg &r:4 None None)\n              (arg &rt:4 None None)\n            )\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If (Compare (Name &l:4 Load) (list Eq) (list (Name &r:4 Load))) (/seq (Return (Name &l:4 Load))) nil)\n            (Assign\n              (list (Name &mid:4 Store))\n              (BinOp (BinOp (Name &l:4 Load) Add (Name &r:4 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (If\n              (Compare\n                (Subscript\n                  (Attribute (Name &self:4 Load) s_tree Load)\n                  (BinOp (Name &rt:4 Load) LShift (Constant i1 None))\n                  Load\n                )\n                (list Gt)\n                (list (Name &s:4 Load))\n              )\n              (/seq\n                (Return\n                  (Call\n                    (Attribute (Name &self:4 Load) s_query Load)\n                    (list\n                      (Name &s:4 Load)\n                      (Name &l:4 Load)\n                      (Name &mid:4 Load)\n                      (BinOp (Name &rt:4 Load) LShift (Constant i1 None))\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Return\n                  (Call\n                    (Attribute (Name &self:4 Load) s_query Load)\n                    (list\n                      (BinOp\n                        (Name &s:4 Load)\n                        Sub\n                        (Subscript\n                          (Attribute (Name &self:4 Load) s_tree Load)\n                          (BinOp (Name &rt:4 Load) LShift (Constant i1 None))\n                          Load\n                        )\n                      )\n                      (BinOp (Name &mid:4 Load) Add (Constant i1 None))\n                      (Name &r:4 Load)\n                      (BinOp (BinOp (Name &rt:4 Load) LShift (Constant i1 None)) BitOr (Constant i1 None))\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Name g_int Load)\n                  (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n                )\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i10 None)))\n          None\n        )\n        (Assign (list (Name &seg:0 Store)) (Call (Name &Tree:0 Load) (list (Name &n:0 Load)) nil) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &seg:0 Load) s_update Load)\n                (list\n                  (BinOp (Name &i:0 Load) Add (Constant i1 None))\n                  (BinOp (Name &i:0 Load) Add (Constant i1 None))\n                  (Constant i1 None)\n                  (Name &n:0 Load)\n                  (Constant i1 None)\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load) (Constant i0 None) (UnaryOp USub (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Store))\n              (Call\n                (Attribute (Name &seg:0 Load) s_query Load)\n                (list\n                  (Subscript (Name &a:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)\n                  (Constant i1 None)\n                  (Name &n:0 Load)\n                  (Constant i1 None)\n                )\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Name &seg:0 Load) s_update Load)\n                (list\n                  (Subscript (Name &b:0 Load) (Name &i:0 Load) Load)\n                  (UnaryOp USub (Subscript (Name &b:0 Load) (Name &i:0 Load) Load))\n                  (Constant i1 None)\n                  (Name &n:0 Load)\n                  (Constant i1 None)\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name g_stdout Load) s_write Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCAxMDAsIDMyXQ== None)\n                    Mod\n                    (Subscript (Name &b:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ClassDef\n      &DualBIT:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Name &n:2 Load) None)\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_bit Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:2 Load) Add (Constant i1 None)))\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get:1\n          (arguments nil (list (arg &self:3 None None) (arg &i:3 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant s-WzEwNSwgMzAwNTgsIDMwNDQ2LCAxMjM5OCwgMzUyMDEsIDMyMDMyLCAxMjQzNCwgMjE0NjIsIDI0NDcxXQ== None)\n            )\n            (Assign (list (Name &i:3 Store)) (BinOp (Name &i:3 Load) Add (Constant i1 None)) None)\n            (Assign (list (Name &s:3 Store)) (Constant i0 None) None)\n            (While\n              (Compare (Name &i:3 Load) (list LtE) (list (Attribute (Name &self:3 Load) s_n Load)))\n              (/seq\n                (AugAssign\n                  (Name &s:3 Store)\n                  Add\n                  (Subscript (Attribute (Name &self:3 Load) s_bit Load) (Name &i:3 Load) Load)\n                )\n                (AugAssign (Name &i:3 Store) Add (BinOp (Name &i:3 Load) BitAnd (UnaryOp USub (Name &i:3 Load))))\n              )\n              nil\n            )\n            (Return (Name &s:3 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_add:1\n          (arguments nil (list (arg &self:4 None None) (arg &i:4 None None) (arg &x:4 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Name &i:4 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (AugAssign\n                  (Subscript (Attribute (Name &self:4 Load) s_bit Load) (Name &i:4 Load) Store)\n                  Add\n                  (Name &x:4 Load)\n                )\n                (AugAssign (Name &i:4 Store) Sub (BinOp (Name &i:4 Load) BitAnd (UnaryOp USub (Name &i:4 Load))))\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add:1\n          (arguments\n            nil\n            (list (arg &self:5 None None) (arg &i:5 None None) (arg &j:5 None None) (arg &x:5 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Expr\n              (Constant\n                s-WzkxLCAxMDUsIDQ0LCAzMiwgMTA2LCA0MSwgMTIzOTgsIDM1MjAxLCAzMjAzMiwgMTIzOTUsIDEyMCwgMTI0MzQsIDIxMTUyLCAzMTYzOSwgMTIzNzcsIDEyNDI3XQ==\n                None\n              )\n            )\n            (Expr (Call (Attribute (Name &self:5 Load) s__add Load) (list (Name &j:5 Load) (Name &x:5 Load)) nil))\n            (Expr\n              (Call\n                (Attribute (Name &self:5 Load) s__add Load)\n                (list (Name &i:5 Load) (UnaryOp USub (Name &x:5 Load)))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &bit:0 Store))\n      (Call (Name &DualBIT:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i3 None))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &bit:0 Load) s_add Load)\n            (list\n              (BinOp (Name &i:0 Load) Add (Constant i1 None))\n              (BinOp (Name &n:0 Load) Add (Constant i1 None))\n              (Name &i:0 Load)\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &li:0 Store)) (List nil Load) None)\n    (Assign (list (Name &flag:0 Store)) (Constant False None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (If (UnaryOp Not (Name &a:0 Load)) (/seq Break) nil)\n        (Assign (list (Name &ok:0 Store)) (BinOp (Name &n:0 Load) Add (Constant i1 None)) None)\n        (Assign (list (Name &ng:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &num:0 Store)) (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Load) None)\n        (If\n          (BoolOp\n            And\n            (list (Compare (Name &num:0 Load) (list Eq) (list (Constant i0 None))) (UnaryOp Not (Name &flag:0 Load)))\n          )\n          (/seq\n            (Assign (list (Name &flag:0 Store)) (Constant True None) None)\n            (Expr\n              (Call\n                (Attribute (Name &bit:0 Load) s_add Load)\n                (list\n                  (Constant i1 None)\n                  (BinOp (Name &n:0 Load) Add (Constant i2 None))\n                  (UnaryOp USub (Constant i1 None))\n                )\n                nil\n              )\n            )\n            (Expr (Call (Attribute (Name &li:0 Load) s_append Load) (list (Constant i1 None)) nil))\n            (Delete (list (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Del)))\n            Continue\n          )\n          nil\n        )\n        (While\n          (Compare\n            (Call (Name g_abs Load) (list (BinOp (Name &ok:0 Load) Sub (Name &ng:0 Load))) nil)\n            (list Gt)\n            (list (Constant i1 None))\n          )\n          (/seq\n            (Assign\n              (list (Name &mid:0 Store))\n              (BinOp (BinOp (Name &ok:0 Load) Add (Name &ng:0 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (If\n              (Compare\n                (Call (Attribute (Name &bit:0 Load) s_get Load) (list (Name &mid:0 Load)) nil)\n                (list Gt)\n                (list (Name &num:0 Load))\n              )\n              (/seq (Assign (list (Name &ok:0 Store)) (Name &mid:0 Load) None))\n              (/seq (Assign (list (Name &ng:0 Store)) (Name &mid:0 Load) None))\n            )\n          )\n          nil\n        )\n        (Assign (list (Name &tmp:0 Store)) (BinOp (Name &ok:0 Load) Sub (Constant i1 None)) None)\n        (Expr\n          (Call\n            (Attribute (Name &bit:0 Load) s_add Load)\n            (list (Name &ok:0 Load) (BinOp (Name &n:0 Load) Add (Constant i2 None)) (UnaryOp USub (Name &tmp:0 Load)))\n            nil\n          )\n        )\n        (Expr (Call (Attribute (Name &li:0 Load) s_append Load) (list (Name &tmp:0 Load)) nil))\n        (Delete (list (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Del)))\n      )\n      nil\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Starred (Subscript (Name &li:0 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load) Load))\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (ImportFrom s_collections (list (alias g_deque None)) i0)\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_copy None)))\n    (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &arr:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:5 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:5 Store)\n            (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &bit:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None)\n    (Assign\n      (list (Name &series:0 Store))\n      (ListComp\n        (Name &x:1 Load)\n        (list (comprehension (Name &x:1 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (FunctionDef\n      &lowbit:0\n      (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n      (/seq (Return (BinOp (Name &x:2 Load) BitAnd (UnaryOp USub (Name &x:2 Load)))))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &update:0\n      (arguments nil (list (arg &idx:3 None None) (arg &delta:3 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Name &idx:3 Load) (list Lt) (list (Name &N:0 Load)))\n          (/seq\n            (AugAssign (Subscript (Name &bit:0 Load) (Name &idx:3 Load) Store) Add (Name &delta:3 Load))\n            (AugAssign (Name &idx:3 Store) Add (Call (Name &lowbit:0 Load) (list (Name &idx:3 Load)) nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &query:0\n      (arguments nil (list (arg &x:4 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:4 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &x:4 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &s:4 Store) Add (Subscript (Name &bit:0 Load) (Name &x:4 Load) Load))\n            (AugAssign (Name &x:4 Store) Sub (Call (Name &lowbit:0 Load) (list (Name &x:4 Load)) nil))\n          )\n          nil\n        )\n        (Return (Name &s:4 Load))\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &N:0 Load)) nil)\n      (/seq\n        (AugAssign\n          (Subscript (Name &bit:0 Load) (Name &i:0 Load) Store)\n          Add\n          (Subscript (Name &series:0 Load) (Name &i:0 Load) Load)\n        )\n        (Assign\n          (list (Name &y:0 Store))\n          (BinOp (Name &i:0 Load) Add (Call (Name &lowbit:0 Load) (list (Name &i:0 Load)) nil))\n          None\n        )\n        (If\n          (Compare (Name &y:0 Load) (list Lt) (list (Name &N:0 Load)))\n          (/seq\n            (AugAssign\n              (Subscript (Name &series:0 Load) (Name &y:0 Load) Store)\n              Add\n              (Subscript (Name &series:0 Load) (Name &i:0 Load) Load)\n            )\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &visited:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None)\n    (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (BinOp (Name &N:0 Load) Sub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n          (UnaryOp USub (Constant i1 None))\n        )\n        nil\n      )\n      (/seq\n        (Assign (list (Name &left:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &right:0 Store)) (BinOp (Name &N:0 Load) Sub (Constant i1 None)) None)\n        (Assign (list (Name &target:0 Store)) (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) None)\n        (While\n          (Compare (Name &left:0 Load) (list LtE) (list (Name &right:0 Load)))\n          (/seq\n            (Assign\n              (list (Name &mid:0 Store))\n              (BinOp (BinOp (Name &left:0 Load) Add (Name &right:0 Load)) FloorDiv (Constant i2 None))\n              None\n            )\n            (Assign (list (Name &q:0 Store)) (Call (Name &query:0 Load) (list (Name &mid:0 Load)) nil) None)\n            (If\n              (Compare (Name &q:0 Load) (list Lt) (list (Name &target:0 Load)))\n              (/seq (Assign (list (Name &left:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None))\n              (/seq\n                (If\n                  (Compare (Name &q:0 Load) (list Gt) (list (Name &target:0 Load)))\n                  (/seq (Assign (list (Name &right:0 Store)) (BinOp (Name &mid:0 Load) Sub (Constant i1 None)) None))\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &visited:0 Load) (Name &mid:0 Load) Load)\n                        (list Eq)\n                        (list (Constant i1 None))\n                      )\n                      (/seq (Assign (list (Name &left:0 Store)) (BinOp (Name &mid:0 Load) Add (Constant i1 None)) None))\n                      (/seq\n                        (Assign\n                          (list (Subscript (Name &visited:0 Load) (Name &mid:0 Load) Store))\n                          (Constant i1 None)\n                          None\n                        )\n                        (Assign\n                          (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Store))\n                          (BinOp (Name &mid:0 Load) Add (Constant i1 None))\n                          None\n                        )\n                        Break\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          nil\n        )\n        (If\n          (Compare (BinOp (Name &mid:0 Load) Add (Constant i1 None)) (list Lt) (list (Name &N:0 Load)))\n          (/seq\n            (Expr\n              (Call\n                (Name &update:0 Load)\n                (list\n                  (BinOp (Name &mid:0 Load) Add (Constant i1 None))\n                  (BinOp (UnaryOp USub (Name &mid:0 Load)) Sub (Constant i1 None))\n                )\n                nil\n              )\n            )\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))\n  )\n  nil\n)"]