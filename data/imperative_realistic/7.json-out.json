[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "match_sequences": true,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_choicevar": -1.01,
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                0,
                16,
                "(/seq (Import (list (alias g_sys None))) (Assign (list (Name %1 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) nil nil)) None) (Assign (list (Name %2 Store)) (Call (Name g_int Load) (list (Call (Name %1 Load) nil nil)) nil) None) (Assign (list (Name %4 Store)) (ListComp (Call (Name g_int Load) (list (Name %3 Load)) nil) (list (comprehension (Name %3 Store) (Call (Attribute (Call (Name %1 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name %6 Store)) (ListComp (Call (Name g_int Load) (list (Name %5 Load)) nil) (list (comprehension (Name %5 Store) (Call (Attribute (Call (Name %1 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name %7 Store)) (Call (Name g_int Load) (list (Call (Name %1 Load) nil nil)) nil) None) (Assign (list (Name %8 Store)) (Call (Name g_int Load) (list (Call (Name %1 Load) nil nil)) nil) None) (Assign (list (Name %9 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name %11 Store)) (ListComp (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i20100 None)) (list (comprehension (Name %10 Store) (Call (Name g_range Load) (list (BinOp (Name %2 Load) Add (Constant i1 None))) nil) nil i0))) None) (Assign (list (Subscript (Subscript (Name %11 Load) (Constant i0 None) Load) (Constant i0 None) Store)) (Constant i1 None) None) (Assign (list (Name %12 Store)) (Constant i0 None) None) (Assign (list (Name %13 Store)) (Name %8 Load) None) (Assign (list (Name %14 Store)) (Name %13 Load) None) (For (Name %16 Store) (Call (Name g_range Load) (list (Name %2 Load)) nil) (/seq (For (Name %15 Store) (Call (Name g_range Load) (list (Constant i20050 None) (BinOp (Name %14 Load) Sub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil) (/seq (If (Compare (Name %15 Load) (list Lt) (list (Constant i0 None))) (/seq Break) nil) (Assign (list (Subscript (Subscript (Name %11 Load) (BinOp (Name %16 Load) Add (Constant i1 None)) Load) (Name %15 Load) Store)) (BinOp (BinOp (BinOp (Subscript (Subscript (Name %11 Load) (BinOp (Name %16 Load) Add (Constant i1 None)) Load) (BinOp (Name %15 Load) Add (Constant i1 None)) Load) Add (Subscript (Subscript (Name %11 Load) (Name %16 Load) Load) (Call (Name g_max Load) (list (BinOp (Name %15 Load) Sub (Subscript (Name %4 Load) (Name %16 Load) Load)) (Constant i0 None)) nil) Load)) Sub (Subscript (Subscript (Name %11 Load) (Name %16 Load) Load) (BinOp (Name %15 Load) Add (Constant i1 None)) Load)) Mod (Name %9 Load)) None)) nil None) (For (Name %15 Store) (Call (Name g_range Load) (list (Call (Name g_min Load) (list (BinOp (Name %14 Load) Sub (Constant i1 None)) (Constant i20050 None)) nil) (UnaryOp USub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Subscript (Name %11 Load) (BinOp (Name %16 Load) Add (Constant i1 None)) Load) (Name %15 Load) Store)) (Subscript (Subscript (Name %11 Load) (BinOp (Name %16 Load) Add (Constant i1 None)) Load) (BinOp (Name %15 Load) Add (Constant i1 None)) Load) None)) nil None) (If (Compare (Name %16 Load) (list Lt) (list (BinOp (Name %2 Load) Sub (Constant i1 None)))) (/seq (AugAssign (Name %13 Store) Add (Subscript (Name %6 Load) (Name %16 Load) Load)) (AugAssign (Name %14 Store) Add (Name %13 Load))) nil)) nil None) (Expr (Call (Name g_print Load) (list (BinOp (Subscript (Subscript (Name %11 Load) (UnaryOp USub (Constant i1 None)) Load) (Constant i0 None) Load) Mod (Name %9 Load))) nil)))",
                "seqS",
                [],
                [
                    "X",
                    "X",
                    "X",
                    "X",
                    "X",
                    "X",
                    "X",
                    "X",
                    "X",
                    "X",
                    "X",
                    "X",
                    "X",
                    "X",
                    "X",
                    "X"
                ]
            ],
            [
                0,
                1,
                "(Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name %1 Load) nil nil) s_split Load) nil nil)) nil)) nil)",
                "E",
                [],
                [
                    "X"
                ]
            ],
            [
                0,
                0,
                "(BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))",
                "E",
                [],
                []
            ]
        ],
        "programs": [
            "(Module (/seq (FunctionDef &putin:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &sol:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &C:1 Store)) (Call (Name g_list Load) (list (Call (Name &putin:0 Load) nil nil)) nil) None) (Assign (list (Name &B:1 Store)) (Call (Name g_list Load) (list (Call (Name &putin:0 Load) nil nil)) nil) None) (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &x:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &min_arr:1 Store)) (List (list (Name &x:1 Load)) Load) None) (Assign (list (Name &min_part_sums:1 Store)) (List (list (Name &x:1 Load)) Load) None) (Assign (list (Name &part_sums:1 Store)) (List (list (Subscript (Name &C:1 Load) (Constant i0 None) Load)) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &n:1 Load)) nil) (/seq (Expr (Call (Attribute (Name &part_sums:1 Load) s_append Load) (list (BinOp (Subscript (Name &part_sums:1 Load) (UnaryOp USub (Constant i1 None)) Load) Add (Subscript (Name &C:1 Load) (Name &i:1 Load) Load))) nil))) nil None) (For (Name &elem:1 Store) (Name &B:1 Load) (/seq (Expr (Call (Attribute (Name &min_arr:1 Load) s_append Load) (list (BinOp (Subscript (Name &min_arr:1 Load) (UnaryOp USub (Constant i1 None)) Load) Add (Name &elem:1 Load))) nil)) (Expr (Call (Attribute (Name &min_part_sums:1 Load) s_append Load) (list (BinOp (Subscript (Name &min_arr:1 Load) (UnaryOp USub (Constant i1 None)) Load) Add (Subscript (Name &min_part_sums:1 Load) (UnaryOp USub (Constant i1 None)) Load))) nil))) nil None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:1 Load)) nil) (/seq (If (Compare (Subscript (Name &min_part_sums:1 Load) (Name &i:1 Load) Load) (list Gt) (list (Subscript (Name &part_sums:1 Load) (Name &i:1 Load) Load))) (/seq (Return (Constant i0 None))) nil)) nil None) (If (Compare (Subscript (Name &min_part_sums:1 Load) (Constant i0 None) Load) (list Gt) (list (Subscript (Name &C:1 Load) (Constant i0 None) Load))) (/seq (Return (Constant i0 None))) nil) (Assign (list (Name &answer:1 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (BinOp (BinOp (Subscript (Name &part_sums:1 Load) (Constant i0 None) Load) Sub (Call (Name g_max Load) (list (Constant i0 None) (Subscript (Name &min_part_sums:1 Load) (Constant i0 None) Load)) nil)) Add (Constant i1 None))) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &n:1 Load)) nil) (/seq (Assign (list (Name &new_answer:1 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Subscript (Name &part_sums:1 Load) (Name &k:1 Load) Load) Sub (Call (Name g_max Load) (list (Constant i0 None) (Subscript (Name &min_part_sums:1 Load) (Name &k:1 Load) Load)) nil)) Add (Constant i1 None))) None) (Assign (list (Name &cnt:1 Store)) (Constant i1 None) None) (Assign (list (Name &window:1 Store)) (Subscript (Name &answer:1 Load) (UnaryOp USub (Constant i1 None)) Load) None) (Assign (list (Subscript (Name &new_answer:1 Load) (UnaryOp USub (Constant i1 None)) Store)) (Name &window:1 Load) None) (While (Compare (Name &cnt:1 Load) (list LtE) (list (BinOp (Call (Name g_len Load) (list (Name &new_answer:1 Load)) nil) Sub (Constant i1 None)))) (/seq (AugAssign (Name &cnt:1 Store) Add (Constant i1 None)) (If (Compare (Name &cnt:1 Load) (list LtE) (list (Call (Name g_len Load) (list (Name &answer:1 Load)) nil))) (/seq (AugAssign (Name &window:1 Store) Add (Subscript (Name &answer:1 Load) (UnaryOp USub (Name &cnt:1 Load)) Load))) nil) (If (Compare (BinOp (Subscript (Name &C:1 Load) (Name &k:1 Load) Load) Add (Constant i1 None)) (list Lt) (list (Name &cnt:1 Load))) (/seq (AugAssign (Name &window:1 Store) Sub (Subscript (Name &answer:1 Load) (BinOp (BinOp (Subscript (Name &C:1 Load) (Name &k:1 Load) Load) Add (Constant i1 None)) Sub (Name &cnt:1 Load)) Load))) nil) (Assign (list (Subscript (Name &new_answer:1 Load) (UnaryOp USub (Name &cnt:1 Load)) Store)) (Name &window:1 Load) None)) nil) (Assign (list (Name &answer:1 Store)) (Call (Attribute (Name &new_answer:1 Load) s_copy Load) nil nil) None)) nil None) (Assign (list (Name &m:1 Store)) (fn_3) None) (Return (BinOp (Call (Name g_sum Load) (list (Name &answer:1 Load)) nil) Mod (Name &m:1 Load)))) nil None None) (Expr (Call (Name g_print Load) (list (Call (Name &sol:0 Load) nil nil)) nil))) nil)",
            "(Module (fn_1 &input:0 &N:0 &a:1 &C:0 &a:2 &B:0 &Q:0 &x:0 &P:0 &_:3 &dp:0 &ans:0 &s:0 &t:0 &j:0 &i:0) nil)",
            "(Module (/seq (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &MOD:1 Store)) (fn_3) None) (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &c:1 Store)) (fn_2 &input:0) None) (Assign (list (Name &b:1 Store)) (BinOp (List (list (Constant i0 None)) Load) Add (fn_2 &input:0)) None) (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &queries:1 Store)) (fn_2 &input:0) None) (Assign (list (Name &maxans:1 Store)) (Constant i1 None) None) (For (Name &c1:1 Store) (Name &c:1 Load) (/seq (Assign (list (Name &maxans:1 Store)) (BinOp (BinOp (Name &maxans:1 Load) Mult (BinOp (Name &c1:1 Load) Add (Constant i1 None))) Mod (Name &MOD:1 Load)) None)) nil None) (Assign (list (Name &ans:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &n:1 Load)) nil) (/seq (AugAssign (Subscript (Name &b:1 Load) (Name &i:1 Load) Store) Add (Subscript (Name &b:1 Load) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) Load))) nil None) (Assign (list (Name &s:1 Store) (Name &lb:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &n:1 Load)) nil) (/seq (AugAssign (Name &s:1 Store) Sub (Subscript (Name &b:1 Load) (Name &i:1 Load) Load)) (Assign (list (Name &lb:1 Store)) (Call (Name g_min Load) (list (Name &lb:1 Load) (BinOp (Name &s:1 Load) FloorDiv (BinOp (Name &i:1 Load) Add (Constant i1 None)))) nil) None)) nil None) (Assign (list (Name &s:1 Store) (Name &ub:1 Store)) (Subscript (Name &c:1 Load) (Constant i0 None) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:1 Load)) nil) (/seq (AugAssign (Name &s:1 Store) Add (BinOp (Subscript (Name &c:1 Load) (Name &i:1 Load) Load) Sub (Subscript (Name &b:1 Load) (Name &i:1 Load) Load))) (Assign (list (Name &ub:1 Store)) (Call (Name g_min Load) (list (Name &ub:1 Load) (BinOp (Name &s:1 Load) FloorDiv (BinOp (Name &i:1 Load) Add (Constant i1 None)))) nil) None)) nil None) (For (Name &x:1 Store) (Name &queries:1 Load) (/seq (If (Compare (Name &x:1 Load) (list LtE) (list (Name &lb:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &maxans:1 Load)) nil))) (/seq (If (Compare (Name &x:1 Load) (list Gt) (list (Name &ub:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &x:1 Load) (list In) (list (Name &ans:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &ans:1 Load) (Name &x:1 Load) Load)) nil))) (/seq (Assign (list (Name &dp0:1 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Constant i10002 None)) None) (Assign (list (Subscript (Name &dp0:1 Load) (Constant i0 None) Store)) (Constant i0 None) None) (Assign (list (Name &bd:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:1 Load)) nil) (/seq (Assign (list (Name &dp1:1 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i10002 None)) None) (AugAssign (Name &bd:1 Store) Add (BinOp (Subscript (Name &b:1 Load) (Name &i:1 Load) Load) Add (Name &x:1 Load))) (For (Name &j:1 Store) (Call (Name g_range Load) (list (Call (Name g_max Load) (list (Name &bd:1 Load) (Constant i0 None)) nil) (Constant i10001 None)) nil) (/seq (Assign (list (Subscript (Name &dp1:1 Load) (BinOp (Name &j:1 Load) Add (Constant i1 None)) Store)) (BinOp (BinOp (BinOp (Subscript (Name &dp1:1 Load) (Name &j:1 Load) Load) Add (Subscript (Name &dp0:1 Load) (BinOp (Name &j:1 Load) Add (Constant i1 None)) Load)) Sub (Subscript (Name &dp0:1 Load) (Call (Name g_max Load) (list (BinOp (Name &j:1 Load) Sub (Subscript (Name &c:1 Load) (Name &i:1 Load) Load)) (Constant i0 None)) nil) Load)) Mod (Name &MOD:1 Load)) None)) nil None) (Assign (list (Name &dp0:1 Store)) (Subscript (Name &dp1:1 Load) (Slice None None None) Load) None)) nil None) (Assign (list (Name &a:1 Store)) (Subscript (Name &dp0:1 Load) (UnaryOp USub (Constant i1 None)) Load) None) (Assign (list (Subscript (Name &ans:1 Load) (Name &x:1 Load) Store)) (Name &a:1 Load) None) (Expr (Call (Name g_print Load) (list (Name &a:1 Load)) nil))))))))) nil None)) nil None None) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) nil nil)) None) (Expr (Call (Name &solve:0 Load) nil nil))) nil)",
            "(Module (fn_1 &input:0 &N:0 &a:1 &C:0 &a:2 &B:0 &Q:0 &x:0 &P:0 &_:3 &dp:0 &ans:0 &s:0 &t:0 &j:0 &i:0) nil)"
        ]
    }
]
