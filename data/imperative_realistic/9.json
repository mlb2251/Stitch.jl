["(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_float Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &D:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq\n                (If\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Assign (list (Name &x0:0 Store)) (BinOp (Name &c:0 Load) Div (UnaryOp USub (Name &b:0 Load))) None)\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Expr (Call (Name g_print Load) (list (Name &x0:0 Load)) nil))\n                  )\n                  (/seq\n                    (If\n                      (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))\n                      )\n                      (/seq\n                        (If\n                          (BoolOp\n                            And\n                            (list\n                              (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None)))\n                              (BoolOp\n                                Or\n                                (list\n                                  (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None)))\n                                  (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None)))\n                                )\n                              )\n                            )\n                          )\n                          (/seq\n                            (Assign\n                              (list (Name &x:0 Store))\n                              (BinOp\n                                (UnaryOp USub (Name &b:0 Load))\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                              None\n                            )\n                            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                            (Expr (Call (Name g_print Load) (list (Name &x:0 Load)) nil))\n                          )\n                          (/seq\n                            (If\n                              (BoolOp\n                                And\n                                (list\n                                  (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None)))\n                                  (BoolOp\n                                    Or\n                                    (list\n                                      (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None)))\n                                      (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None)))\n                                    )\n                                  )\n                                )\n                              )\n                              (/seq\n                                (Assign\n                                  (list (Name &x1:0 Store))\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &b:0 Load))\n                                      Add\n                                      (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                  None\n                                )\n                                (Assign\n                                  (list (Name &x2:0 Store))\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &b:0 Load))\n                                      Sub\n                                      (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                  None\n                                )\n                                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                                (Assign\n                                  (list (Name &g:0 Store))\n                                  (List (list (Name &x1:0 Load) (Name &x2:0 Load)) Load)\n                                  None\n                                )\n                                (For\n                                  (Name &i:0 Store)\n                                  (Call (Name g_sorted Load) (list (Name &g:0 Load)) nil)\n                                  (/seq (Expr (Call (Name g_print Load) (list (Name &i:0 Load)) nil)))\n                                  nil\n                                  None\n                                )\n                              )\n                              nil\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &s:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &n:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &n:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Subscript (Name &s:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i0 None)))\n          (Compare\n            (BinOp\n              (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n              Mult\n              (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n            )\n            (list NotEq)\n            (list (Constant i0 None))\n          )\n        )\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (BinOp\n                (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i2 None) Load))\n                Div\n                (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (BinOp\n                  (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                  Mult\n                  (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n                )\n                (list NotEq)\n                (list (Constant i0 None))\n              )\n              (Compare (Subscript (Name &s:0 Load) (Constant i2 None) Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n            (Assign (list (Name &a:0 Store)) (Constant i0 None) None)\n            (Assign\n              (list (Name &b:0 Store))\n              (BinOp\n                (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i1 None) Load))\n                Div\n                (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n              )\n              None\n            )\n            (Assign (list (Name &p:0 Store)) (List (list (Name &a:0 Load) (Name &b:0 Load)) Load) None)\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA1NCwgMTAyXQ== None)\n                    Mod\n                    (Call (Name g_min Load) (list (Name &p:0 Load)) nil)\n                  )\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA1NCwgMTAyXQ== None)\n                    Mod\n                    (Call (Name g_max Load) (list (Name &p:0 Load)) nil)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (BinOp\n                      (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                      Mult\n                      (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                    )\n                    (list Lt)\n                    (list (Constant i0 None))\n                  )\n                  (Compare (Subscript (Name &s:0 Load) (Constant i1 None) Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Assign\n                  (list (Name &p:0 Store))\n                  (List\n                    (list\n                      (BinOp\n                        (BinOp\n                          (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i2 None) Load))\n                          Div\n                          (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                        )\n                        Pow\n                        (Constant f0.5 None)\n                      )\n                      (UnaryOp\n                        USub\n                        (BinOp\n                          (BinOp\n                            (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i2 None) Load))\n                            Div\n                            (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                          )\n                          Pow\n                          (Constant f0.5 None)\n                        )\n                      )\n                    )\n                    Load\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                        Mod\n                        (Call (Name g_min Load) (list (Name &p:0 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                        Mod\n                        (Call (Name g_max Load) (list (Name &p:0 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare (Subscript (Name &s:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i0 None)))\n                      (Compare (Subscript (Name &s:0 Load) (Constant i1 None) Load) (list Eq) (list (Constant i0 None)))\n                      (Compare\n                        (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                        (list NotEq)\n                        (list (Constant i0 None))\n                      )\n                    )\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                        (list Eq Eq Eq)\n                        (list\n                          (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n                          (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                          (Constant i0 None)\n                        )\n                      )\n                      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n                      (/seq\n                        (If\n                          (Compare\n                            (BinOp\n                              (BinOp\n                                (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                Mult\n                                (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n                              )\n                              Mult\n                              (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                            )\n                            (list NotEq)\n                            (list (Constant i0 None))\n                          )\n                          (/seq\n                            (If\n                              (Compare\n                                (BinOp (Subscript (Name &s:0 Load) (Constant i1 None) Load) Pow (Constant i2 None))\n                                (list Lt)\n                                (list\n                                  (BinOp\n                                    (Constant i4 None)\n                                    Mult\n                                    (BinOp\n                                      (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                      Mult\n                                      (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                    )\n                                  )\n                                )\n                              )\n                              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                              (/seq\n                                (If\n                                  (Compare\n                                    (BinOp (Subscript (Name &s:0 Load) (Constant i1 None) Load) Pow (Constant i2 None))\n                                    (list Eq)\n                                    (list\n                                      (BinOp\n                                        (Constant i4 None)\n                                        Mult\n                                        (BinOp\n                                          (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                          Mult\n                                          (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                        )\n                                      )\n                                    )\n                                  )\n                                  (/seq\n                                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                                    (Expr\n                                      (Call\n                                        (Name g_print Load)\n                                        (list\n                                          (BinOp\n                                            (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                                            Mod\n                                            (BinOp\n                                              (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i1 None) Load))\n                                              Div\n                                              (BinOp\n                                                (Constant i2 None)\n                                                Mult\n                                                (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                              )\n                                            )\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                  )\n                                  (/seq\n                                    (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                                    (Assign\n                                      (list (Name &j:0 Store))\n                                      (BinOp\n                                        (BinOp\n                                          (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i1 None) Load))\n                                          Add\n                                          (BinOp\n                                            (BinOp\n                                              (BinOp\n                                                (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n                                                Pow\n                                                (Constant i2 None)\n                                              )\n                                              Sub\n                                              (BinOp\n                                                (BinOp\n                                                  (Constant i4 None)\n                                                  Mult\n                                                  (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                                )\n                                                Mult\n                                                (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                              )\n                                            )\n                                            Pow\n                                            (Constant f0.5 None)\n                                          )\n                                        )\n                                        Div\n                                        (BinOp\n                                          (Constant i2 None)\n                                          Mult\n                                          (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                        )\n                                      )\n                                      None\n                                    )\n                                    (Assign\n                                      (list (Name &k:0 Store))\n                                      (BinOp\n                                        (BinOp\n                                          (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i1 None) Load))\n                                          Sub\n                                          (BinOp\n                                            (BinOp\n                                              (BinOp\n                                                (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n                                                Pow\n                                                (Constant i2 None)\n                                              )\n                                              Sub\n                                              (BinOp\n                                                (BinOp\n                                                  (Constant i4 None)\n                                                  Mult\n                                                  (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                                )\n                                                Mult\n                                                (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                              )\n                                            )\n                                            Pow\n                                            (Constant f0.5 None)\n                                          )\n                                        )\n                                        Div\n                                        (BinOp\n                                          (Constant i2 None)\n                                          Mult\n                                          (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                        )\n                                      )\n                                      None\n                                    )\n                                    (Assign\n                                      (list (Name &p:0 Store))\n                                      (List (list (Name &j:0 Load) (Name &k:0 Load)) Load)\n                                      None\n                                    )\n                                    (Expr\n                                      (Call\n                                        (Name g_print Load)\n                                        (list\n                                          (BinOp\n                                            (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                                            Mod\n                                            (Call (Name g_min Load) (list (Name &p:0 Load)) nil)\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                    (Expr\n                                      (Call\n                                        (Name g_print Load)\n                                        (list\n                                          (BinOp\n                                            (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                                            Mod\n                                            (Call (Name g_max Load) (list (Name &p:0 Load)) nil)\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                  )\n                                )\n                              )\n                            )\n                          )\n                          (/seq\n                            (If\n                              (BoolOp\n                                And\n                                (list\n                                  (Compare\n                                    (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                    (list Eq Eq)\n                                    (list (Subscript (Name &s:0 Load) (Constant i2 None) Load) (Constant i0 None))\n                                  )\n                                  (Compare\n                                    (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n                                    (list NotEq)\n                                    (list (Constant i0 None))\n                                  )\n                                )\n                              )\n                              (/seq\n                                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Constant i0 None)))\n                                    nil\n                                  )\n                                )\n                              )\n                              (/seq\n                                (If\n                                  (BoolOp\n                                    And\n                                    (list\n                                      (Compare\n                                        (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                        (list Eq Eq)\n                                        (list (Subscript (Name &s:0 Load) (Constant i1 None) Load) (Constant i0 None))\n                                      )\n                                      (Compare\n                                        (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                        (list NotEq)\n                                        (list (Constant i0 None))\n                                      )\n                                    )\n                                  )\n                                  (/seq\n                                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                                    (Expr\n                                      (Call\n                                        (Name g_print Load)\n                                        (list (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Constant i0 None)))\n                                        nil\n                                      )\n                                    )\n                                  )\n                                  (/seq\n                                    (If\n                                      (BoolOp\n                                        And\n                                        (list\n                                          (Compare\n                                            (BinOp\n                                              (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                              Mult\n                                              (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                            )\n                                            (list NotEq)\n                                            (list (Constant i0 None))\n                                          )\n                                          (Compare\n                                            (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n                                            (list Eq)\n                                            (list (Constant i0 None))\n                                          )\n                                        )\n                                      )\n                                      (/seq\n                                        (If\n                                          (Compare\n                                            (BinOp\n                                              (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                              Mult\n                                              (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                            )\n                                            (list Gt)\n                                            (list (Constant i0 None))\n                                          )\n                                          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                                          (/seq\n                                            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                                            (Expr\n                                              (Call\n                                                (Name g_print Load)\n                                                (list\n                                                  (BinOp\n                                                    (Constant s-WzM3LCA1NCwgMTAyXQ== None)\n                                                    Mod\n                                                    (UnaryOp\n                                                      USub\n                                                      (BinOp\n                                                        (BinOp\n                                                          (UnaryOp\n                                                            USub\n                                                            (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                                          )\n                                                          Div\n                                                          (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                                        )\n                                                        Pow\n                                                        (Constant f0.5 None)\n                                                      )\n                                                    )\n                                                  )\n                                                )\n                                                nil\n                                              )\n                                            )\n                                            (Expr\n                                              (Call\n                                                (Name g_print Load)\n                                                (list\n                                                  (BinOp\n                                                    (Constant s-WzM3LCA1NCwgMTAyXQ== None)\n                                                    Mod\n                                                    (BinOp\n                                                      (BinOp\n                                                        (UnaryOp\n                                                          USub\n                                                          (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                                        )\n                                                        Div\n                                                        (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                                      )\n                                                      Pow\n                                                      (Constant f0.5 None)\n                                                    )\n                                                  )\n                                                )\n                                                nil\n                                              )\n                                            )\n                                          )\n                                        )\n                                      )\n                                      nil\n                                    )\n                                  )\n                                )\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &d:0 Store))\n          (BinOp\n            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &x1:0 Store))\n              (BinOp\n                (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                Div\n                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n              )\n              None\n            )\n            (Assign\n              (list (Name &x2:0 Store))\n              (BinOp\n                (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                Div\n                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n              )\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n            (If\n              (Compare (Name &x1:0 Load) (list Lt) (list (Name &x2:0 Load)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Name &x1:0 Load)) nil))\n                (Expr (Call (Name g_print Load) (list (Name &x2:0 Load)) nil))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Name &x2:0 Load)) nil))\n                (Expr (Call (Name g_print Load) (list (Name &x1:0 Load)) nil))\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))\n                    nil\n                  )\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Name &a:0 Load)) nil) None)\n    (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (Name &b:0 Load)) nil) None)\n    (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (Name &c:0 Load)) nil) None)\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Constant i1 None) (Constant f0.0 None))\n                    (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))\n                    (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Constant i1 None) (Constant f0.0 None))\n                    (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant i2 None)\n                      (Call\n                        (Name g_min Load)\n                        (list (Constant f0.0 None) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &a:0 Load)))\n                        nil\n                      )\n                      (Call\n                        (Name g_max Load)\n                        (list (Constant f0.0 None) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &a:0 Load)))\n                        nil\n                      )\n                    )\n                    (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (If\n                  (Compare (BinOp (Name &c:0 Load) Div (Name &a:0 Load)) (list Gt) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Constant i2 None)\n                          (Call\n                            (Name g_min Load)\n                            (list\n                              (UnaryOp\n                                USub\n                                (Call\n                                  (Attribute (Name g_math Load) s_sqrt Load)\n                                  (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)))\n                                  nil\n                                )\n                              )\n                              (Call\n                                (Attribute (Name g_math Load) s_sqrt Load)\n                                (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                          (Call\n                            (Name g_max Load)\n                            (list\n                              (UnaryOp\n                                USub\n                                (Call\n                                  (Attribute (Name g_math Load) s_sqrt Load)\n                                  (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)))\n                                  nil\n                                )\n                              )\n                              (Call\n                                (Attribute (Name g_math Load) s_sqrt Load)\n                                (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                    (list Lt)\n                    (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare\n                        (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                        (list Eq)\n                        (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))\n                      )\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Constant i1 None)\n                              (BinOp\n                                (UnaryOp USub (Name &b:0 Load))\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                            )\n                            (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Constant i2 None)\n                              (Call\n                                (Name g_min Load)\n                                (list\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &b:0 Load))\n                                      Sub\n                                      (Call\n                                        (Attribute (Name g_math Load) s_sqrt Load)\n                                        (list\n                                          (BinOp\n                                            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                            Sub\n                                            (BinOp\n                                              (BinOp (Constant i4 None) Mult (Name &a:0 Load))\n                                              Mult\n                                              (Name &c:0 Load)\n                                            )\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &b:0 Load))\n                                      Add\n                                      (Call\n                                        (Attribute (Name g_math Load) s_sqrt Load)\n                                        (list\n                                          (BinOp\n                                            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                            Sub\n                                            (BinOp\n                                              (BinOp (Constant i4 None) Mult (Name &a:0 Load))\n                                              Mult\n                                              (Name &c:0 Load)\n                                            )\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                              (Call\n                                (Name g_max Load)\n                                (list\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &b:0 Load))\n                                      Sub\n                                      (Call\n                                        (Attribute (Name g_math Load) s_sqrt Load)\n                                        (list\n                                          (BinOp\n                                            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                            Sub\n                                            (BinOp\n                                              (BinOp (Constant i4 None) Mult (Name &a:0 Load))\n                                              Mult\n                                              (Name &c:0 Load)\n                                            )\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &b:0 Load))\n                                      Add\n                                      (Call\n                                        (Attribute (Name g_math Load) s_sqrt Load)\n                                        (list\n                                          (BinOp\n                                            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                            Sub\n                                            (BinOp\n                                              (BinOp (Constant i4 None) Mult (Name &a:0 Load))\n                                              Mult\n                                              (Name &c:0 Load)\n                                            )\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &ch1:0 Store) (Name &ch2:0 Store) (Name &ch3:0 Store)) Store))\n      (Tuple\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n        Load\n      )\n      None\n    )\n    (If\n      (BoolOp And (list (Name &ch1:0 Load) (Name &ch2:0 Load) (Name &ch3:0 Load)))\n      (/seq (Assign (list (Name &answer:0 Store)) (UnaryOp USub (Constant i1 None)) None))\n      (/seq\n        (If\n          (BoolOp And (list (Name &ch1:0 Load) (Name &ch2:0 Load)))\n          (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None))\n          (/seq\n            (If\n              (BoolOp\n                Or\n                (list\n                  (BoolOp And (list (Name &ch1:0 Load) (Name &ch3:0 Load)))\n                  (BoolOp And (list (Name &ch2:0 Load) (Name &ch3:0 Load)))\n                )\n              )\n              (/seq\n                (Assign (list (Name &answer:0 Store)) (Constant i1 None) None)\n                (Assign (list (Name &answers:0 Store)) (List (list (Constant i0 None)) Load) None)\n              )\n              (/seq\n                (If\n                  (Name &ch1:0 Load)\n                  (/seq\n                    (Assign (list (Name &answer:0 Store)) (Constant i1 None) None)\n                    (Assign\n                      (list (Name &answers:0 Store))\n                      (List (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) Load)\n                      None\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Name &ch2:0 Load)\n                      (/seq\n                        (If\n                          (Compare\n                            (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load))\n                            (list Gt)\n                            (list (Constant i0 None))\n                          )\n                          (/seq\n                            (Assign (list (Name &answer:0 Store)) (Constant i2 None) None)\n                            (Assign\n                              (list (Name &answers:0 Store))\n                              (List\n                                (list\n                                  (UnaryOp\n                                    USub\n                                    (BinOp\n                                      (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load))\n                                      Pow\n                                      (Constant f0.5 None)\n                                    )\n                                  )\n                                  (BinOp\n                                    (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load))\n                                    Pow\n                                    (Constant f0.5 None)\n                                  )\n                                )\n                                Load\n                              )\n                              None\n                            )\n                          )\n                          (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None))\n                        )\n                      )\n                      (/seq\n                        (If\n                          (Name &ch3:0 Load)\n                          (/seq\n                            (Assign (list (Name &answer:0 Store)) (Constant i2 None) None)\n                            (Assign\n                              (list (Name &answers:0 Store))\n                              (List\n                                (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &a:0 Load)) (Constant i0 None))\n                                Load\n                              )\n                              None\n                            )\n                          )\n                          (/seq\n                            (Assign\n                              (list (Name &D:0 Store))\n                              (BinOp\n                                (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                Sub\n                                (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                              )\n                              None\n                            )\n                            (If\n                              (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None)))\n                              (/seq\n                                (Assign (list (Name &answer:0 Store)) (Constant i2 None) None)\n                                (Assign\n                                  (list (Name &answers:0 Store))\n                                  (List\n                                    (list\n                                      (BinOp\n                                        (BinOp\n                                          (UnaryOp USub (Name &b:0 Load))\n                                          Add\n                                          (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))\n                                        )\n                                        Div\n                                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                      )\n                                      (BinOp\n                                        (BinOp\n                                          (UnaryOp USub (Name &b:0 Load))\n                                          Sub\n                                          (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))\n                                        )\n                                        Div\n                                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                      )\n                                    )\n                                    Load\n                                  )\n                                  None\n                                )\n                              )\n                              (/seq\n                                (If\n                                  (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None)))\n                                  (/seq\n                                    (Assign (list (Name &answer:0 Store)) (Constant i1 None) None)\n                                    (Assign\n                                      (list (Name &answers:0 Store))\n                                      (List\n                                        (list\n                                          (BinOp\n                                            (UnaryOp USub (Name &b:0 Load))\n                                            Div\n                                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                          )\n                                        )\n                                        Load\n                                      )\n                                      None\n                                    )\n                                  )\n                                  (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None))\n                                )\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (Name &answer:0 Load)) nil))\n    (If\n      (Compare (Name &answer:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_sorted Load) (list (Name &answers:0 Load)) nil)\n          (/seq (Expr (Call (Name g_print Load) (list (Name &i:0 Load)) nil)))\n          nil\n          None\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n                nil\n                nil\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Import (list (alias &sys:0 None)))\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))\n                (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))\n                (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n              )\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))\n            (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n          (Tuple\n            (list\n              (Constant i1 None)\n              (BinOp (Name &b:0 Load) Div (Name &a:0 Load))\n              (BinOp (Name &c:0 Load) Div (Name &a:0 Load))\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n              )\n              nil\n            )\n            (If\n              (Compare (Name &c:0 Load) (list Lt) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                        (list (UnaryOp USub (BinOp (Name &c:0 Load) Pow (Constant f0.5 None))))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                        (list (BinOp (Name &c:0 Load) Pow (Constant f0.5 None)))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n              )\n              nil\n            )\n            (If\n              (Compare (Name &c:0 Load) (list Gt) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              nil\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &nicli:0 Store))\n                  (Call (Name g_set Load) (list (List (list (Constant i0 None)) Load)) nil)\n                  None\n                )\n                (Expr (Call (Attribute (Name &nicli:0 Load) s_add Load) (list (UnaryOp USub (Name &b:0 Load))) nil))\n                (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &nicli:0 Load)) nil)) nil))\n                (For\n                  (Name &e:0 Store)\n                  (Call (Name g_sorted Load) (list (Call (Name g_list Load) (list (Name &nicli:0 Load)) nil)) nil)\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                            (list (Name &e:0 Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                  None\n                )\n                (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n              )\n              (/seq\n                (Assign\n                  (list (Name &d:0 Store))\n                  (BinOp\n                    (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                    Sub\n                    (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))\n                    (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (Call (Name g_abs Load) (list (Name &d:0 Load)) nil)\n                        (list Lt)\n                        (list (BinOp (Constant i10 None) Pow (UnaryOp USub (Constant i12 None))))\n                      )\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Call\n                                (Attribute\n                                  (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None)\n                                  s_format\n                                  Load\n                                )\n                                (list\n                                  (BinOp\n                                    (UnaryOp USub (Name &b:0 Load))\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n                      )\n                      (/seq\n                        (Assign\n                          (list (Name &x1:0 Store))\n                          (Call\n                            (Name g_max Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:0 Load))\n                                  Add\n                                  (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:0 Load))\n                                  Sub\n                                  (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                            )\n                            nil\n                          )\n                          None\n                        )\n                        (Assign (list (Name &x2:0 Store)) (BinOp (Name &c:0 Load) Div (Name &x1:0 Load)) None)\n                        (Assign (list (Name &koreni:0 Store)) (Call (Name g_set Load) nil nil) None)\n                        (Expr\n                          (Call\n                            (Attribute (Name &koreni:0 Load) s_add Load)\n                            (list (Call (Name g_round Load) (list (Name &x1:0 Load) (Constant i10 None)) nil))\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Attribute (Name &koreni:0 Load) s_add Load)\n                            (list (Call (Name g_round Load) (list (Name &x2:0 Load) (Constant i10 None)) nil))\n                            nil\n                          )\n                        )\n                        (Assign\n                          (list (Name &koreni:0 Store))\n                          (Call\n                            (Name g_sorted Load)\n                            (list (Call (Name g_list Load) (list (Name &koreni:0 Load)) nil))\n                            nil\n                          )\n                          None\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (Call (Name g_len Load) (list (Name &koreni:0 Load)) nil))\n                            nil\n                          )\n                        )\n                        (For\n                          (Name &e:0 Store)\n                          (Name &koreni:0 Load)\n                          (/seq\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (Call\n                                    (Attribute\n                                      (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None)\n                                      s_format\n                                      Load\n                                    )\n                                    (list (Name &e:0 Load))\n                                    nil\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                          None\n                        )\n                        (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_decimal (list (alias g_* None)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n              Sub\n              (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n            )\n            (list Lt)\n            (list (Constant i0 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (Assign\n              (list (Name &arr:0 Store))\n              (List\n                (list\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Add\n                      (BinOp\n                        (BinOp\n                          (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                          Sub\n                          (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                        )\n                        Pow\n                        (Constant f0.5 None)\n                      )\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Sub\n                      (BinOp\n                        (BinOp\n                          (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                          Sub\n                          (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                        )\n                        Pow\n                        (Constant f0.5 None)\n                      )\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (Compare\n                (Call (Name g_max Load) (list (Name &arr:0 Load)) nil)\n                (list Eq)\n                (list (Call (Name g_min Load) (list (Name &arr:0 Load)) nil))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Name g_float Load)\n                        (list\n                          (Call (Name g_Decimal Load) (list (Subscript (Name &arr:0 Load) (Constant i0 None) Load)) nil)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &arr:0 Load)) nil)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Name g_float Load)\n                        (list\n                          (Call (Name g_Decimal Load) (list (Call (Name g_min Load) (list (Name &arr:0 Load)) nil)) nil)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Name g_float Load)\n                        (list\n                          (Call (Name g_Decimal Load) (list (Call (Name g_max Load) (list (Name &arr:0 Load)) nil)) nil)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Call\n                    (Name g_float Load)\n                    (list\n                      (Call\n                        (Name g_Decimal Load)\n                        (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Name &c:0 Load) (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA4MywgOTcsIDExNiwgMzIsIDc0LCAxMTcsIDExMCwgMzIsIDQ5LCA1NCwgMzIsIDQ4LCA1MSwgNTgsIDUxLCA1NiwgNTgsIDUyLCA0OCwgMzIsIDUwLCA0OCwgNDksIDU2LCAxMCwgMTAsIDY0LCA5NywgMTE3LCAxMTYsIDEwNCwgMTExLCAxMTQsIDU4LCAzMiwgOTcsIDExMCwgMTE1LCAxMDQsIDExNywgMTA4LCAxMF0=\n        None\n      )\n    )\n    (ImportFrom s_math (list (alias &sqrt:0 None)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Assign\n                  (list (Name &ans:0 Store))\n                  (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &b:0 Load))\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n              )\n              (/seq\n                (Assign\n                  (list (Name &d:0 Store))\n                  (BinOp\n                    (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                    Sub\n                    (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                        (Assign (list (Name &d:0 Store)) (Call (Name &sqrt:0 Load) (list (Name &d:0 Load)) nil) None)\n                        (Assign\n                          (list (Name &ans1:0 Store))\n                          (BinOp\n                            (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Name &d:0 Load))\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                          None\n                        )\n                        (Assign\n                          (list (Name &ans2:0 Store))\n                          (BinOp\n                            (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &d:0 Load))\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                          None\n                        )\n                        (If\n                          (Compare (Name &ans1:0 Load) (list Lt) (list (Name &ans2:0 Load)))\n                          (/seq\n                            (Assign\n                              (list (Tuple (list (Name &ans1:0 Store) (Name &ans2:0 Store)) Store))\n                              (Tuple (list (Name &ans2:0 Load) (Name &ans1:0 Load)) Load)\n                              None\n                            )\n                          )\n                          nil\n                        )\n                        (Expr (Call (Name g_print Load) (list (Name &ans2:0 Load)) nil))\n                        (Expr (Call (Name g_print Load) (list (Name &ans1:0 Load)) nil))\n                      )\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Assign\n                          (list (Name &ans:0 Store))\n                          (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                          None\n                        )\n                        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq\n            (If\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (JoinedStr\n                        (list\n                          (Constant s-WzQ5LCAxMF0= None)\n                          (FormattedValue (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) i-1 None)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (Assign\n              (list (Name &s:0 Store))\n              (Call\n                (Name g_sorted Load)\n                (list\n                  (Set\n                    (list\n                      (BinOp\n                        (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                      (BinOp\n                        (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &s:0 Load)) nil)) nil))\n            (For\n              (Name &i:0 Store)\n              (Name &s:0 Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (JoinedStr (list (FormattedValue (Name &i:0 Load) i-1 (JoinedStr (list (Constant s_.5f None))))))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias s_math g_m)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &s:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &s:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n              (Tuple\n                (list (UnaryOp USub (Name &a:0 Load)) (UnaryOp USub (Name &b:0 Load)) (UnaryOp USub (Name &c:0 Load)))\n                Load\n              )\n              None\n            )\n          )\n          nil\n        )\n        (Assign\n          (list (Name &d:0 Store))\n          (BinOp\n            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Sub\n                      (Call (Attribute (Name g_m Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Add\n                      (Call (Attribute (Name g_m Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))\n                    nil\n                  )\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)"]