["(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_float Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &D:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq\n                (If\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Assign (list (Name &x0:0 Store)) (BinOp (Name &c:0 Load) Div (UnaryOp USub (Name &b:0 Load))) None)\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Expr (Call (Name g_print Load) (list (Name &x0:0 Load)) nil))\n                  )\n                  (/seq\n                    (If\n                      (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))\n                      )\n                      (/seq\n                        (If\n                          (BoolOp\n                            And\n                            (list\n                              (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None)))\n                              (BoolOp\n                                Or\n                                (list\n                                  (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None)))\n                                  (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None)))\n                                )\n                              )\n                            )\n                          )\n                          (/seq\n                            (Assign\n                              (list (Name &x:0 Store))\n                              (BinOp\n                                (UnaryOp USub (Name &b:0 Load))\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                              None\n                            )\n                            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                            (Expr (Call (Name g_print Load) (list (Name &x:0 Load)) nil))\n                          )\n                          (/seq\n                            (If\n                              (BoolOp\n                                And\n                                (list\n                                  (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None)))\n                                  (BoolOp\n                                    Or\n                                    (list\n                                      (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None)))\n                                      (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None)))\n                                    )\n                                  )\n                                )\n                              )\n                              (/seq\n                                (Assign\n                                  (list (Name &x1:0 Store))\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &b:0 Load))\n                                      Add\n                                      (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                  None\n                                )\n                                (Assign\n                                  (list (Name &x2:0 Store))\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &b:0 Load))\n                                      Sub\n                                      (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                  None\n                                )\n                                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                                (Assign\n                                  (list (Name &g:0 Store))\n                                  (List (list (Name &x1:0 Load) (Name &x2:0 Load)) Load)\n                                  None\n                                )\n                                (For\n                                  (Name &i:0 Store)\n                                  (Call (Name g_sorted Load) (list (Name &g:0 Load)) nil)\n                                  (/seq (Expr (Call (Name g_print Load) (list (Name &i:0 Load)) nil)))\n                                  nil\n                                  None\n                                )\n                              )\n                              nil\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &s:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &n:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &n:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Subscript (Name &s:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i0 None)))\n          (Compare\n            (BinOp\n              (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n              Mult\n              (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n            )\n            (list NotEq)\n            (list (Constant i0 None))\n          )\n        )\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (BinOp\n                (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i2 None) Load))\n                Div\n                (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare\n                (BinOp\n                  (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                  Mult\n                  (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n                )\n                (list NotEq)\n                (list (Constant i0 None))\n              )\n              (Compare (Subscript (Name &s:0 Load) (Constant i2 None) Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n            (Assign (list (Name &a:0 Store)) (Constant i0 None) None)\n            (Assign\n              (list (Name &b:0 Store))\n              (BinOp\n                (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i1 None) Load))\n                Div\n                (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n              )\n              None\n            )\n            (Assign (list (Name &p:0 Store)) (List (list (Name &a:0 Load) (Name &b:0 Load)) Load) None)\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA1NCwgMTAyXQ== None)\n                    Mod\n                    (Call (Name g_min Load) (list (Name &p:0 Load)) nil)\n                  )\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA1NCwgMTAyXQ== None)\n                    Mod\n                    (Call (Name g_max Load) (list (Name &p:0 Load)) nil)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (BinOp\n                      (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                      Mult\n                      (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                    )\n                    (list Lt)\n                    (list (Constant i0 None))\n                  )\n                  (Compare (Subscript (Name &s:0 Load) (Constant i1 None) Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Assign\n                  (list (Name &p:0 Store))\n                  (List\n                    (list\n                      (BinOp\n                        (BinOp\n                          (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i2 None) Load))\n                          Div\n                          (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                        )\n                        Pow\n                        (Constant f0.5 None)\n                      )\n                      (UnaryOp\n                        USub\n                        (BinOp\n                          (BinOp\n                            (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i2 None) Load))\n                            Div\n                            (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                          )\n                          Pow\n                          (Constant f0.5 None)\n                        )\n                      )\n                    )\n                    Load\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                        Mod\n                        (Call (Name g_min Load) (list (Name &p:0 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                        Mod\n                        (Call (Name g_max Load) (list (Name &p:0 Load)) nil)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare (Subscript (Name &s:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i0 None)))\n                      (Compare (Subscript (Name &s:0 Load) (Constant i1 None) Load) (list Eq) (list (Constant i0 None)))\n                      (Compare\n                        (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                        (list NotEq)\n                        (list (Constant i0 None))\n                      )\n                    )\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                        (list Eq Eq Eq)\n                        (list\n                          (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n                          (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                          (Constant i0 None)\n                        )\n                      )\n                      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n                      (/seq\n                        (If\n                          (Compare\n                            (BinOp\n                              (BinOp\n                                (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                Mult\n                                (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n                              )\n                              Mult\n                              (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                            )\n                            (list NotEq)\n                            (list (Constant i0 None))\n                          )\n                          (/seq\n                            (If\n                              (Compare\n                                (BinOp (Subscript (Name &s:0 Load) (Constant i1 None) Load) Pow (Constant i2 None))\n                                (list Lt)\n                                (list\n                                  (BinOp\n                                    (Constant i4 None)\n                                    Mult\n                                    (BinOp\n                                      (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                      Mult\n                                      (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                    )\n                                  )\n                                )\n                              )\n                              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                              (/seq\n                                (If\n                                  (Compare\n                                    (BinOp (Subscript (Name &s:0 Load) (Constant i1 None) Load) Pow (Constant i2 None))\n                                    (list Eq)\n                                    (list\n                                      (BinOp\n                                        (Constant i4 None)\n                                        Mult\n                                        (BinOp\n                                          (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                          Mult\n                                          (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                        )\n                                      )\n                                    )\n                                  )\n                                  (/seq\n                                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                                    (Expr\n                                      (Call\n                                        (Name g_print Load)\n                                        (list\n                                          (BinOp\n                                            (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                                            Mod\n                                            (BinOp\n                                              (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i1 None) Load))\n                                              Div\n                                              (BinOp\n                                                (Constant i2 None)\n                                                Mult\n                                                (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                              )\n                                            )\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                  )\n                                  (/seq\n                                    (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                                    (Assign\n                                      (list (Name &j:0 Store))\n                                      (BinOp\n                                        (BinOp\n                                          (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i1 None) Load))\n                                          Add\n                                          (BinOp\n                                            (BinOp\n                                              (BinOp\n                                                (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n                                                Pow\n                                                (Constant i2 None)\n                                              )\n                                              Sub\n                                              (BinOp\n                                                (BinOp\n                                                  (Constant i4 None)\n                                                  Mult\n                                                  (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                                )\n                                                Mult\n                                                (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                              )\n                                            )\n                                            Pow\n                                            (Constant f0.5 None)\n                                          )\n                                        )\n                                        Div\n                                        (BinOp\n                                          (Constant i2 None)\n                                          Mult\n                                          (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                        )\n                                      )\n                                      None\n                                    )\n                                    (Assign\n                                      (list (Name &k:0 Store))\n                                      (BinOp\n                                        (BinOp\n                                          (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i1 None) Load))\n                                          Sub\n                                          (BinOp\n                                            (BinOp\n                                              (BinOp\n                                                (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n                                                Pow\n                                                (Constant i2 None)\n                                              )\n                                              Sub\n                                              (BinOp\n                                                (BinOp\n                                                  (Constant i4 None)\n                                                  Mult\n                                                  (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                                )\n                                                Mult\n                                                (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                              )\n                                            )\n                                            Pow\n                                            (Constant f0.5 None)\n                                          )\n                                        )\n                                        Div\n                                        (BinOp\n                                          (Constant i2 None)\n                                          Mult\n                                          (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                        )\n                                      )\n                                      None\n                                    )\n                                    (Assign\n                                      (list (Name &p:0 Store))\n                                      (List (list (Name &j:0 Load) (Name &k:0 Load)) Load)\n                                      None\n                                    )\n                                    (Expr\n                                      (Call\n                                        (Name g_print Load)\n                                        (list\n                                          (BinOp\n                                            (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                                            Mod\n                                            (Call (Name g_min Load) (list (Name &p:0 Load)) nil)\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                    (Expr\n                                      (Call\n                                        (Name g_print Load)\n                                        (list\n                                          (BinOp\n                                            (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                                            Mod\n                                            (Call (Name g_max Load) (list (Name &p:0 Load)) nil)\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                  )\n                                )\n                              )\n                            )\n                          )\n                          (/seq\n                            (If\n                              (BoolOp\n                                And\n                                (list\n                                  (Compare\n                                    (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                    (list Eq Eq)\n                                    (list (Subscript (Name &s:0 Load) (Constant i2 None) Load) (Constant i0 None))\n                                  )\n                                  (Compare\n                                    (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n                                    (list NotEq)\n                                    (list (Constant i0 None))\n                                  )\n                                )\n                              )\n                              (/seq\n                                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Constant i0 None)))\n                                    nil\n                                  )\n                                )\n                              )\n                              (/seq\n                                (If\n                                  (BoolOp\n                                    And\n                                    (list\n                                      (Compare\n                                        (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                        (list Eq Eq)\n                                        (list (Subscript (Name &s:0 Load) (Constant i1 None) Load) (Constant i0 None))\n                                      )\n                                      (Compare\n                                        (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                        (list NotEq)\n                                        (list (Constant i0 None))\n                                      )\n                                    )\n                                  )\n                                  (/seq\n                                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                                    (Expr\n                                      (Call\n                                        (Name g_print Load)\n                                        (list (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Constant i0 None)))\n                                        nil\n                                      )\n                                    )\n                                  )\n                                  (/seq\n                                    (If\n                                      (BoolOp\n                                        And\n                                        (list\n                                          (Compare\n                                            (BinOp\n                                              (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                              Mult\n                                              (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                            )\n                                            (list NotEq)\n                                            (list (Constant i0 None))\n                                          )\n                                          (Compare\n                                            (Subscript (Name &s:0 Load) (Constant i1 None) Load)\n                                            (list Eq)\n                                            (list (Constant i0 None))\n                                          )\n                                        )\n                                      )\n                                      (/seq\n                                        (If\n                                          (Compare\n                                            (BinOp\n                                              (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                              Mult\n                                              (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                            )\n                                            (list Gt)\n                                            (list (Constant i0 None))\n                                          )\n                                          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                                          (/seq\n                                            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                                            (Expr\n                                              (Call\n                                                (Name g_print Load)\n                                                (list\n                                                  (BinOp\n                                                    (Constant s-WzM3LCA1NCwgMTAyXQ== None)\n                                                    Mod\n                                                    (UnaryOp\n                                                      USub\n                                                      (BinOp\n                                                        (BinOp\n                                                          (UnaryOp\n                                                            USub\n                                                            (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                                          )\n                                                          Div\n                                                          (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                                        )\n                                                        Pow\n                                                        (Constant f0.5 None)\n                                                      )\n                                                    )\n                                                  )\n                                                )\n                                                nil\n                                              )\n                                            )\n                                            (Expr\n                                              (Call\n                                                (Name g_print Load)\n                                                (list\n                                                  (BinOp\n                                                    (Constant s-WzM3LCA1NCwgMTAyXQ== None)\n                                                    Mod\n                                                    (BinOp\n                                                      (BinOp\n                                                        (UnaryOp\n                                                          USub\n                                                          (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n                                                        )\n                                                        Div\n                                                        (Subscript (Name &s:0 Load) (Constant i0 None) Load)\n                                                      )\n                                                      Pow\n                                                      (Constant f0.5 None)\n                                                    )\n                                                  )\n                                                )\n                                                nil\n                                              )\n                                            )\n                                          )\n                                        )\n                                      )\n                                      nil\n                                    )\n                                  )\n                                )\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &d:0 Store))\n          (BinOp\n            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &x1:0 Store))\n              (BinOp\n                (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                Div\n                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n              )\n              None\n            )\n            (Assign\n              (list (Name &x2:0 Store))\n              (BinOp\n                (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                Div\n                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n              )\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n            (If\n              (Compare (Name &x1:0 Load) (list Lt) (list (Name &x2:0 Load)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Name &x1:0 Load)) nil))\n                (Expr (Call (Name g_print Load) (list (Name &x2:0 Load)) nil))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Name &x2:0 Load)) nil))\n                (Expr (Call (Name g_print Load) (list (Name &x1:0 Load)) nil))\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))\n                    nil\n                  )\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Name &a:0 Load)) nil) None)\n    (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (Name &b:0 Load)) nil) None)\n    (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (Name &c:0 Load)) nil) None)\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Constant i1 None) (Constant f0.0 None))\n                    (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))\n                    (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Constant i1 None) (Constant f0.0 None))\n                    (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant i2 None)\n                      (Call\n                        (Name g_min Load)\n                        (list (Constant f0.0 None) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &a:0 Load)))\n                        nil\n                      )\n                      (Call\n                        (Name g_max Load)\n                        (list (Constant f0.0 None) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &a:0 Load)))\n                        nil\n                      )\n                    )\n                    (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (If\n                  (Compare (BinOp (Name &c:0 Load) Div (Name &a:0 Load)) (list Gt) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Constant i2 None)\n                          (Call\n                            (Name g_min Load)\n                            (list\n                              (UnaryOp\n                                USub\n                                (Call\n                                  (Attribute (Name g_math Load) s_sqrt Load)\n                                  (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)))\n                                  nil\n                                )\n                              )\n                              (Call\n                                (Attribute (Name g_math Load) s_sqrt Load)\n                                (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                          (Call\n                            (Name g_max Load)\n                            (list\n                              (UnaryOp\n                                USub\n                                (Call\n                                  (Attribute (Name g_math Load) s_sqrt Load)\n                                  (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)))\n                                  nil\n                                )\n                              )\n                              (Call\n                                (Attribute (Name g_math Load) s_sqrt Load)\n                                (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                    (list Lt)\n                    (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare\n                        (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                        (list Eq)\n                        (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))\n                      )\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Constant i1 None)\n                              (BinOp\n                                (UnaryOp USub (Name &b:0 Load))\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                            )\n                            (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Constant i2 None)\n                              (Call\n                                (Name g_min Load)\n                                (list\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &b:0 Load))\n                                      Sub\n                                      (Call\n                                        (Attribute (Name g_math Load) s_sqrt Load)\n                                        (list\n                                          (BinOp\n                                            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                            Sub\n                                            (BinOp\n                                              (BinOp (Constant i4 None) Mult (Name &a:0 Load))\n                                              Mult\n                                              (Name &c:0 Load)\n                                            )\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &b:0 Load))\n                                      Add\n                                      (Call\n                                        (Attribute (Name g_math Load) s_sqrt Load)\n                                        (list\n                                          (BinOp\n                                            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                            Sub\n                                            (BinOp\n                                              (BinOp (Constant i4 None) Mult (Name &a:0 Load))\n                                              Mult\n                                              (Name &c:0 Load)\n                                            )\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                              (Call\n                                (Name g_max Load)\n                                (list\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &b:0 Load))\n                                      Sub\n                                      (Call\n                                        (Attribute (Name g_math Load) s_sqrt Load)\n                                        (list\n                                          (BinOp\n                                            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                            Sub\n                                            (BinOp\n                                              (BinOp (Constant i4 None) Mult (Name &a:0 Load))\n                                              Mult\n                                              (Name &c:0 Load)\n                                            )\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &b:0 Load))\n                                      Add\n                                      (Call\n                                        (Attribute (Name g_math Load) s_sqrt Load)\n                                        (list\n                                          (BinOp\n                                            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                            Sub\n                                            (BinOp\n                                              (BinOp (Constant i4 None) Mult (Name &a:0 Load))\n                                              Mult\n                                              (Name &c:0 Load)\n                                            )\n                                          )\n                                        )\n                                        nil\n                                      )\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &ch1:0 Store) (Name &ch2:0 Store) (Name &ch3:0 Store)) Store))\n      (Tuple\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n        Load\n      )\n      None\n    )\n    (If\n      (BoolOp And (list (Name &ch1:0 Load) (Name &ch2:0 Load) (Name &ch3:0 Load)))\n      (/seq (Assign (list (Name &answer:0 Store)) (UnaryOp USub (Constant i1 None)) None))\n      (/seq\n        (If\n          (BoolOp And (list (Name &ch1:0 Load) (Name &ch2:0 Load)))\n          (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None))\n          (/seq\n            (If\n              (BoolOp\n                Or\n                (list\n                  (BoolOp And (list (Name &ch1:0 Load) (Name &ch3:0 Load)))\n                  (BoolOp And (list (Name &ch2:0 Load) (Name &ch3:0 Load)))\n                )\n              )\n              (/seq\n                (Assign (list (Name &answer:0 Store)) (Constant i1 None) None)\n                (Assign (list (Name &answers:0 Store)) (List (list (Constant i0 None)) Load) None)\n              )\n              (/seq\n                (If\n                  (Name &ch1:0 Load)\n                  (/seq\n                    (Assign (list (Name &answer:0 Store)) (Constant i1 None) None)\n                    (Assign\n                      (list (Name &answers:0 Store))\n                      (List (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) Load)\n                      None\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Name &ch2:0 Load)\n                      (/seq\n                        (If\n                          (Compare\n                            (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load))\n                            (list Gt)\n                            (list (Constant i0 None))\n                          )\n                          (/seq\n                            (Assign (list (Name &answer:0 Store)) (Constant i2 None) None)\n                            (Assign\n                              (list (Name &answers:0 Store))\n                              (List\n                                (list\n                                  (UnaryOp\n                                    USub\n                                    (BinOp\n                                      (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load))\n                                      Pow\n                                      (Constant f0.5 None)\n                                    )\n                                  )\n                                  (BinOp\n                                    (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load))\n                                    Pow\n                                    (Constant f0.5 None)\n                                  )\n                                )\n                                Load\n                              )\n                              None\n                            )\n                          )\n                          (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None))\n                        )\n                      )\n                      (/seq\n                        (If\n                          (Name &ch3:0 Load)\n                          (/seq\n                            (Assign (list (Name &answer:0 Store)) (Constant i2 None) None)\n                            (Assign\n                              (list (Name &answers:0 Store))\n                              (List\n                                (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &a:0 Load)) (Constant i0 None))\n                                Load\n                              )\n                              None\n                            )\n                          )\n                          (/seq\n                            (Assign\n                              (list (Name &D:0 Store))\n                              (BinOp\n                                (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                Sub\n                                (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                              )\n                              None\n                            )\n                            (If\n                              (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None)))\n                              (/seq\n                                (Assign (list (Name &answer:0 Store)) (Constant i2 None) None)\n                                (Assign\n                                  (list (Name &answers:0 Store))\n                                  (List\n                                    (list\n                                      (BinOp\n                                        (BinOp\n                                          (UnaryOp USub (Name &b:0 Load))\n                                          Add\n                                          (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))\n                                        )\n                                        Div\n                                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                      )\n                                      (BinOp\n                                        (BinOp\n                                          (UnaryOp USub (Name &b:0 Load))\n                                          Sub\n                                          (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))\n                                        )\n                                        Div\n                                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                      )\n                                    )\n                                    Load\n                                  )\n                                  None\n                                )\n                              )\n                              (/seq\n                                (If\n                                  (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None)))\n                                  (/seq\n                                    (Assign (list (Name &answer:0 Store)) (Constant i1 None) None)\n                                    (Assign\n                                      (list (Name &answers:0 Store))\n                                      (List\n                                        (list\n                                          (BinOp\n                                            (UnaryOp USub (Name &b:0 Load))\n                                            Div\n                                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                          )\n                                        )\n                                        Load\n                                      )\n                                      None\n                                    )\n                                  )\n                                  (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None))\n                                )\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (Name &answer:0 Load)) nil))\n    (If\n      (Compare (Name &answer:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_sorted Load) (list (Name &answers:0 Load)) nil)\n          (/seq (Expr (Call (Name g_print Load) (list (Name &i:0 Load)) nil)))\n          nil\n          None\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n                nil\n                nil\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Import (list (alias &sys:0 None)))\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))\n                (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))\n                (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n              )\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))\n            (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n          (Tuple\n            (list\n              (Constant i1 None)\n              (BinOp (Name &b:0 Load) Div (Name &a:0 Load))\n              (BinOp (Name &c:0 Load) Div (Name &a:0 Load))\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n              )\n              nil\n            )\n            (If\n              (Compare (Name &c:0 Load) (list Lt) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                        (list (UnaryOp USub (BinOp (Name &c:0 Load) Pow (Constant f0.5 None))))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                        (list (BinOp (Name &c:0 Load) Pow (Constant f0.5 None)))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n              )\n              nil\n            )\n            (If\n              (Compare (Name &c:0 Load) (list Gt) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              nil\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &nicli:0 Store))\n                  (Call (Name g_set Load) (list (List (list (Constant i0 None)) Load)) nil)\n                  None\n                )\n                (Expr (Call (Attribute (Name &nicli:0 Load) s_add Load) (list (UnaryOp USub (Name &b:0 Load))) nil))\n                (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &nicli:0 Load)) nil)) nil))\n                (For\n                  (Name &e:0 Store)\n                  (Call (Name g_sorted Load) (list (Call (Name g_list Load) (list (Name &nicli:0 Load)) nil)) nil)\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                            (list (Name &e:0 Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                  None\n                )\n                (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n              )\n              (/seq\n                (Assign\n                  (list (Name &d:0 Store))\n                  (BinOp\n                    (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                    Sub\n                    (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))\n                    (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (Call (Name g_abs Load) (list (Name &d:0 Load)) nil)\n                        (list Lt)\n                        (list (BinOp (Constant i10 None) Pow (UnaryOp USub (Constant i12 None))))\n                      )\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Call\n                                (Attribute\n                                  (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None)\n                                  s_format\n                                  Load\n                                )\n                                (list\n                                  (BinOp\n                                    (UnaryOp USub (Name &b:0 Load))\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n                      )\n                      (/seq\n                        (Assign\n                          (list (Name &x1:0 Store))\n                          (Call\n                            (Name g_max Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:0 Load))\n                                  Add\n                                  (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:0 Load))\n                                  Sub\n                                  (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                            )\n                            nil\n                          )\n                          None\n                        )\n                        (Assign (list (Name &x2:0 Store)) (BinOp (Name &c:0 Load) Div (Name &x1:0 Load)) None)\n                        (Assign (list (Name &koreni:0 Store)) (Call (Name g_set Load) nil nil) None)\n                        (Expr\n                          (Call\n                            (Attribute (Name &koreni:0 Load) s_add Load)\n                            (list (Call (Name g_round Load) (list (Name &x1:0 Load) (Constant i10 None)) nil))\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Attribute (Name &koreni:0 Load) s_add Load)\n                            (list (Call (Name g_round Load) (list (Name &x2:0 Load) (Constant i10 None)) nil))\n                            nil\n                          )\n                        )\n                        (Assign\n                          (list (Name &koreni:0 Store))\n                          (Call\n                            (Name g_sorted Load)\n                            (list (Call (Name g_list Load) (list (Name &koreni:0 Load)) nil))\n                            nil\n                          )\n                          None\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (Call (Name g_len Load) (list (Name &koreni:0 Load)) nil))\n                            nil\n                          )\n                        )\n                        (For\n                          (Name &e:0 Store)\n                          (Name &koreni:0 Load)\n                          (/seq\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (Call\n                                    (Attribute\n                                      (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None)\n                                      s_format\n                                      Load\n                                    )\n                                    (list (Name &e:0 Load))\n                                    nil\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                          None\n                        )\n                        (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_decimal (list (alias g_* None)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n              Sub\n              (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n            )\n            (list Lt)\n            (list (Constant i0 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (Assign\n              (list (Name &arr:0 Store))\n              (List\n                (list\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Add\n                      (BinOp\n                        (BinOp\n                          (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                          Sub\n                          (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                        )\n                        Pow\n                        (Constant f0.5 None)\n                      )\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Sub\n                      (BinOp\n                        (BinOp\n                          (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                          Sub\n                          (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                        )\n                        Pow\n                        (Constant f0.5 None)\n                      )\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (Compare\n                (Call (Name g_max Load) (list (Name &arr:0 Load)) nil)\n                (list Eq)\n                (list (Call (Name g_min Load) (list (Name &arr:0 Load)) nil))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Name g_float Load)\n                        (list\n                          (Call (Name g_Decimal Load) (list (Subscript (Name &arr:0 Load) (Constant i0 None) Load)) nil)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &arr:0 Load)) nil)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Name g_float Load)\n                        (list\n                          (Call (Name g_Decimal Load) (list (Call (Name g_min Load) (list (Name &arr:0 Load)) nil)) nil)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Name g_float Load)\n                        (list\n                          (Call (Name g_Decimal Load) (list (Call (Name g_max Load) (list (Name &arr:0 Load)) nil)) nil)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Call\n                    (Name g_float Load)\n                    (list\n                      (Call\n                        (Name g_Decimal Load)\n                        (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Name &c:0 Load) (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA4MywgOTcsIDExNiwgMzIsIDc0LCAxMTcsIDExMCwgMzIsIDQ5LCA1NCwgMzIsIDQ4LCA1MSwgNTgsIDUxLCA1NiwgNTgsIDUyLCA0OCwgMzIsIDUwLCA0OCwgNDksIDU2LCAxMCwgMTAsIDY0LCA5NywgMTE3LCAxMTYsIDEwNCwgMTExLCAxMTQsIDU4LCAzMiwgOTcsIDExMCwgMTE1LCAxMDQsIDExNywgMTA4LCAxMF0=\n        None\n      )\n    )\n    (ImportFrom s_math (list (alias &sqrt:0 None)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Assign\n                  (list (Name &ans:0 Store))\n                  (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &b:0 Load))\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n              )\n              (/seq\n                (Assign\n                  (list (Name &d:0 Store))\n                  (BinOp\n                    (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                    Sub\n                    (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                        (Assign (list (Name &d:0 Store)) (Call (Name &sqrt:0 Load) (list (Name &d:0 Load)) nil) None)\n                        (Assign\n                          (list (Name &ans1:0 Store))\n                          (BinOp\n                            (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Name &d:0 Load))\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                          None\n                        )\n                        (Assign\n                          (list (Name &ans2:0 Store))\n                          (BinOp\n                            (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &d:0 Load))\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                          None\n                        )\n                        (If\n                          (Compare (Name &ans1:0 Load) (list Lt) (list (Name &ans2:0 Load)))\n                          (/seq\n                            (Assign\n                              (list (Tuple (list (Name &ans1:0 Store) (Name &ans2:0 Store)) Store))\n                              (Tuple (list (Name &ans2:0 Load) (Name &ans1:0 Load)) Load)\n                              None\n                            )\n                          )\n                          nil\n                        )\n                        (Expr (Call (Name g_print Load) (list (Name &ans2:0 Load)) nil))\n                        (Expr (Call (Name g_print Load) (list (Name &ans1:0 Load)) nil))\n                      )\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Assign\n                          (list (Name &ans:0 Store))\n                          (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                          None\n                        )\n                        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq\n            (If\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (JoinedStr\n                        (list\n                          (Constant s-WzQ5LCAxMF0= None)\n                          (FormattedValue (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) i-1 None)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (Assign\n              (list (Name &s:0 Store))\n              (Call\n                (Name g_sorted Load)\n                (list\n                  (Set\n                    (list\n                      (BinOp\n                        (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                      (BinOp\n                        (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &s:0 Load)) nil)) nil))\n            (For\n              (Name &i:0 Store)\n              (Name &s:0 Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (JoinedStr (list (FormattedValue (Name &i:0 Load) i-1 (JoinedStr (list (Constant s_.5f None))))))\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias s_math g_m)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &s:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &s:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n              (Tuple\n                (list (UnaryOp USub (Name &a:0 Load)) (UnaryOp USub (Name &b:0 Load)) (UnaryOp USub (Name &c:0 Load)))\n                Load\n              )\n              None\n            )\n          )\n          nil\n        )\n        (Assign\n          (list (Name &d:0 Store))\n          (BinOp\n            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Sub\n                      (Call (Attribute (Name g_m Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Add\n                      (Call (Attribute (Name g_m Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))\n                    nil\n                  )\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &shovel:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c:1 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Return (UnaryOp USub (Constant i1 None))))\n          nil\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Return (Constant i0 None)))\n          nil\n        )\n        (If\n          (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Return\n              (BinOp\n                (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None)\n                Mod\n                (BinOp (UnaryOp USub (Name &c:1 Load)) Div (Name &b:1 Load))\n              )\n            )\n          )\n          nil\n        )\n        (If\n          (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:1 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Return (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Constant i0 None)))\n              )\n              nil\n            )\n          )\n          nil\n        )\n        (Assign\n          (list (Name &x:1 Store))\n          (BinOp\n            (BinOp (Name &b:1 Load) Mult (Name &b:1 Load))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:1 Load)) Mult (Name &c:1 Load))\n          )\n          None\n        )\n        (If (Compare (Name &x:1 Load) (list Lt) (list (Constant i0 None))) (/seq (Return (Constant i0 None))) nil)\n        (If\n          (Compare (Name &x:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Return\n              (BinOp\n                (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None)\n                Mod\n                (BinOp (UnaryOp USub (Name &b:1 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load)))\n              )\n            )\n          )\n          nil\n        )\n        (Assign\n          (list (Name &y:1 Store))\n          (BinOp\n            (BinOp (UnaryOp USub (Name &b:1 Load)) Sub (BinOp (Name &x:1 Load) Pow (Constant f0.5 None)))\n            Div\n            (BinOp (Constant i2 None) Mult (Name &a:1 Load))\n          )\n          None\n        )\n        (Assign\n          (list (Name &z:1 Store))\n          (BinOp\n            (BinOp (UnaryOp USub (Name &b:1 Load)) Add (BinOp (Name &x:1 Load) Pow (Constant f0.5 None)))\n            Div\n            (BinOp (Constant i2 None) Mult (Name &a:1 Load))\n          )\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n        (If\n          (Compare (Name &y:1 Load) (list Lt) (list (Name &z:1 Load)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &y:1 Load)))\n                nil\n              )\n            )\n            (Return (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &z:1 Load)))\n          )\n          nil\n        )\n        (Expr\n          (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &z:1 Load))) nil)\n        )\n        (Return (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &y:1 Load)))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Call (Name &shovel:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil))\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Constant i0 None) (Name &c:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n              (Compare (Name &a:0 Load) (list Eq Eq) (list (Name &b:0 Load) (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                        (list\n                          (Call\n                            (Name g_round Load)\n                            (list\n                              (BinOp\n                                (UnaryOp USub (Name &b:0 Load))\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                              (Constant i5 None)\n                            )\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Assign\n                      (list (Name &x:0 Store))\n                      (Call\n                        (Name g_round Load)\n                        (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) (Constant i5 None))\n                        nil\n                      )\n                      None\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                            (list (Name &x:0 Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                    (Assign\n                      (list (Name &x:0 Store))\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                        (list\n                          (Call\n                            (Name g_round Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:0 Load))\n                                  Add\n                                  (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                              (Constant i5 None)\n                            )\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (Assign\n                      (list (Name &y:0 Store))\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                        (list\n                          (Call\n                            (Name g_round Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:0 Load))\n                                  Sub\n                                  (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                              (Constant i5 None)\n                            )\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (Assign\n                      (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store))\n                      (Call (Name g_sorted Load) (list (List (list (Name &x:0 Load) (Name &y:0 Load)) Load)) nil)\n                      None\n                    )\n                    (If\n                      (Compare (Name &x:0 Load) (list NotEq) (list (Name &y:0 Load)))\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (Name &x:0 Load) (Name &y:0 Load))\n                            (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                          )\n                        )\n                      )\n                      (/seq (Expr (Call (Name g_print Load) (list (Name &x:0 Load)) nil)))\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (Compare\n            (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n            (list Lt)\n            (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (If\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (UnaryOp USub (BinOp (Name &c:0 Load) Div (Name &b:0 Load))))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &d:0 Store))\n                  (BinOp\n                    (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                    Sub\n                    (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &x1:0 Store))\n                  (BinOp\n                    (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &x2:0 Store))\n                  (BinOp\n                    (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &x1:0 Load) (list Eq) (list (Name &x2:0 Load)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (Name &x1:0 Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (Call (Name g_min Load) (list (Name &x1:0 Load) (Name &x2:0 Load)) nil))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (Call (Name g_max Load) (list (Name &x1:0 Load) (Name &x2:0 Load)) nil))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &det:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq\n            (If\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Assign\n                  (list (Name &p:0 Store))\n                  (Call\n                    (Name g_round Load)\n                    (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) (Constant i5 None))\n                    nil\n                  )\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Name &p:0 Load)) nil))\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &det:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &det:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Assign\n                  (list (Name &p:0 Store))\n                  (Call\n                    (Name g_round Load)\n                    (list\n                      (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Name &a:0 Load) Mult (Constant i2 None)))\n                      (Constant i5 None)\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Name &p:0 Load)) nil))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Assign\n                  (list (Name &neu:0 Store))\n                  (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Name g_sqrt Load) (list (Name &det:0 Load)) nil))\n                  None\n                )\n                (Assign\n                  (list (Name &p:0 Store))\n                  (Call\n                    (Name g_round Load)\n                    (list\n                      (BinOp (Name &neu:0 Load) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                      (Constant i5 None)\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &neu:0 Store))\n                  (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Name g_sqrt Load) (list (Name &det:0 Load)) nil))\n                  None\n                )\n                (Assign\n                  (list (Name &q:0 Store))\n                  (Call\n                    (Name g_round Load)\n                    (list\n                      (BinOp (Name &neu:0 Load) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                      (Constant i5 None)\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &p:0 Load) (list Gt) (list (Name &q:0 Load)))\n                  (/seq\n                    (Assign\n                      (list (Tuple (list (Name &p:0 Store) (Name &q:0 Store)) Store))\n                      (Tuple (list (Name &q:0 Load) (Name &p:0 Load)) Load)\n                      None\n                    )\n                  )\n                  nil\n                )\n                (Expr (Call (Name g_print Load) (list (Name &p:0 Load)) nil))\n                (Expr (Call (Name g_print Load) (list (Name &q:0 Load)) nil))\n              )\n            )\n          )\n        )\n      )\n    )\n    (Expr\n      (Constant\n        s-WzEwLCA2NSwgMTEwLCAxMDAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMDQsIDk3LCAxMDAsIDExMSwgMTE5LCAzMiwgMTExLCAxMDIsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTAwLCA5NywgMTIxLCAxMCwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMDEsIDEwOSwgOTgsIDExNCwgOTcsIDk5LCAxMDEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE5LCAxMTEsIDExNCwgMTAwLCAzMiwgMTA1LCAxMTAsIDMyLCAxMDMsIDExNCwgMTAxLCAxMjEsIDEwLCA2NSwgMTEwLCAxMDAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTcsIDExMCwgMzIsIDExOSwgMTA1LCAxMDgsIDEwOCwgMzIsIDExNSwgMTAxLCAxMTYsIDMyLCAxMDIsIDExMSwgMTE0LCAzMiwgMTIxLCAxMTEsIDExNywgMTBd\n        None\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &a:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &a:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &D:0 Store))\n          (BinOp\n            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Assign\n                  (list (Name &ans:0 Store))\n                  (Call\n                    (Name g_sorted Load)\n                    (list\n                      (List\n                        (list\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &b:0 Load))\n                              Sub\n                              (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &b:0 Load))\n                              Add\n                              (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                        )\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Starred (Name &ans:0 Load) Load))\n                    (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None)\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load)\n                        (list (Name &x:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &delta:0 Store))\n          (BinOp\n            (Call (Name g_pow Load) (list (Name &b:0 Load) (Constant i2 None)) nil)\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &delta:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &delta:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &x:0 Store))\n                  (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load)\n                        (list (Name &x:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &x1:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Sub\n                      (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &delta:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &x2:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Add\n                      (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &delta:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (If\n                  (Compare (Name &x1:0 Load) (list Gt) (list (Name &x2:0 Load)))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (Name &x2:0 Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (Name &x1:0 Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (Name &x1:0 Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (Name &x2:0 Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Name &k:0 Store))\n          (BinOp\n            (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &k:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (Assign\n              (list (Name &a1:0 Store))\n              (BinOp\n                (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &k:0 Load) Pow (Constant f0.5 None)))\n                Div\n                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n              )\n              None\n            )\n            (Assign\n              (list (Name &a2:0 Store))\n              (BinOp\n                (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &k:0 Load) Pow (Constant f0.5 None)))\n                Div\n                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n              )\n              None\n            )\n            (If\n              (Compare (Name &a1:0 Load) (list Eq) (list (Name &a2:0 Load)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Call (Name g_str Load) (list (Name &a1:0 Load)) nil)\n                        Add\n                        (BinOp (Constant s_0 None) Mult (Constant i5 None))\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (If\n              (Compare (Name &a1:0 Load) (list NotEq) (list (Name &a2:0 Load)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Call\n                          (Name g_str Load)\n                          (list (Call (Name g_min Load) (list (Name &a1:0 Load) (Name &a2:0 Load)) nil))\n                          nil\n                        )\n                        Add\n                        (BinOp (Constant s_0 None) Mult (Constant i5 None))\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Call\n                          (Name g_str Load)\n                          (list (Call (Name g_max Load) (list (Name &a1:0 Load) (Name &a2:0 Load)) nil))\n                          nil\n                        )\n                        Add\n                        (BinOp (Constant s_0 None) Mult (Constant i5 None))\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &k:0 Store))\n              (Call (Name g_str Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (BinOp (Name &k:0 Load) Add (BinOp (Constant s_0 None) Mult (Constant i5 None))))\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &sqr:0 Store))\n      (Call\n        (Name g_float Load)\n        (list\n          (BinOp\n            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &sqr:0 Load) (list GtE) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Name &e:0 Store))\n          (Call\n            (Name g_float Load)\n            (list (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &sqr:0 Load)) nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &e:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Try\n              (/seq\n                (Assign\n                  (list (Name &root1:0 Store))\n                  (Call\n                    (Name g_float Load)\n                    (list\n                      (BinOp\n                        (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Name &e:0 Load))\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign (list (Name &root:0 Store)) (Constant i1 None) None)\n                (Expr (Call (Name g_print Load) (list (Name &root:0 Load)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &root1:0 Load)))\n                    nil\n                  )\n                )\n              )\n              (list\n                (ExceptHandler\n                  (Name g_ZeroDivisionError Load)\n                  &zd:0\n                  (/seq\n                    (If\n                      (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n                      (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n                      (/seq\n                        (If\n                          (Compare (BinOp (Name &a:0 Load) BitAnd (Name &b:0 Load)) (list Eq) (list (Constant i0 None)))\n                          (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n                          (/seq Pass)\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n              nil\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &e:0 Load) (list Eq) (list (Constant f13.416407864998739 None)))\n              (/seq\n                (Try\n                  (/seq\n                    (If\n                      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                      (/seq\n                        (Assign (list (Name &root:0 Store)) (Constant i1 None) None)\n                        (Expr (Call (Name g_print Load) (list (Name &root:0 Load)) nil))\n                        (Assign\n                          (list (Name &res:0 Store))\n                          (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))\n                          None\n                        )\n                        (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))\n                      )\n                      (/seq\n                        (Assign\n                          (list (Name &root1:0 Store))\n                          (Call\n                            (Name g_float Load)\n                            (list\n                              (BinOp\n                                (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Name &e:0 Load))\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                            )\n                            nil\n                          )\n                          None\n                        )\n                        (Assign\n                          (list (Name &root2:0 Store))\n                          (Call\n                            (Name g_float Load)\n                            (list\n                              (BinOp\n                                (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &e:0 Load))\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                            )\n                            nil\n                          )\n                          None\n                        )\n                        (Assign (list (Name &roots:0 Store)) (Constant i2 None) None)\n                        (Expr (Call (Name g_print Load) (list (Name &roots:0 Load)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root2:0 Load)))\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root1:0 Load)))\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                  (list\n                    (ExceptHandler\n                      (Name g_ZeroDivisionError Load)\n                      &zd:0\n                      (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n                    )\n                  )\n                  nil\n                  nil\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &e:0 Load) (list Eq) (list (Constant f5.0 None)))\n                  (/seq\n                    (Try\n                      (/seq\n                        (If\n                          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                          (/seq\n                            (Assign (list (Name &root:0 Store)) (Constant i1 None) None)\n                            (Expr (Call (Name g_print Load) (list (Name &root:0 Load)) nil))\n                            (Assign\n                              (list (Name &res:0 Store))\n                              (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))\n                              None\n                            )\n                            (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))\n                          )\n                          (/seq\n                            (Assign\n                              (list (Name &root1:0 Store))\n                              (Call\n                                (Name g_float Load)\n                                (list\n                                  (BinOp\n                                    (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Name &e:0 Load))\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                              None\n                            )\n                            (Assign\n                              (list (Name &root2:0 Store))\n                              (Call\n                                (Name g_float Load)\n                                (list\n                                  (BinOp\n                                    (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &e:0 Load))\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                              None\n                            )\n                            (Assign (list (Name &roots:0 Store)) (Constant i2 None) None)\n                            (Expr (Call (Name g_print Load) (list (Name &roots:0 Load)) nil))\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root2:0 Load)))\n                                nil\n                              )\n                            )\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root1:0 Load)))\n                                nil\n                              )\n                            )\n                          )\n                        )\n                      )\n                      (list\n                        (ExceptHandler\n                          (Name g_ZeroDivisionError Load)\n                          &zd:0\n                          (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n                        )\n                      )\n                      nil\n                      nil\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare (Name &e:0 Load) (list Eq) (list (Constant f4.0 None)))\n                      (/seq\n                        (Try\n                          (/seq\n                            (If\n                              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                              (/seq\n                                (Assign (list (Name &root:0 Store)) (Constant i1 None) None)\n                                (Expr (Call (Name g_print Load) (list (Name &root:0 Load)) nil))\n                                (Assign\n                                  (list (Name &res:0 Store))\n                                  (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))\n                                  None\n                                )\n                                (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))\n                              )\n                              (/seq\n                                (Assign\n                                  (list (Name &root1:0 Store))\n                                  (Call\n                                    (Name g_float Load)\n                                    (list\n                                      (BinOp\n                                        (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Name &e:0 Load))\n                                        Div\n                                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                      )\n                                    )\n                                    nil\n                                  )\n                                  None\n                                )\n                                (Assign\n                                  (list (Name &root2:0 Store))\n                                  (Call\n                                    (Name g_float Load)\n                                    (list\n                                      (BinOp\n                                        (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &e:0 Load))\n                                        Div\n                                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                      )\n                                    )\n                                    nil\n                                  )\n                                  None\n                                )\n                                (Assign (list (Name &roots:0 Store)) (Constant i2 None) None)\n                                (Expr (Call (Name g_print Load) (list (Name &roots:0 Load)) nil))\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root2:0 Load))\n                                    )\n                                    nil\n                                  )\n                                )\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root1:0 Load))\n                                    )\n                                    nil\n                                  )\n                                )\n                              )\n                            )\n                          )\n                          (list\n                            (ExceptHandler\n                              (Name g_ZeroDivisionError Load)\n                              &zd:0\n                              (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n                            )\n                          )\n                          nil\n                          nil\n                        )\n                      )\n                      (/seq\n                        (Try\n                          (/seq\n                            (If\n                              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                              (/seq\n                                (Assign (list (Name &root:0 Store)) (Constant i1 None) None)\n                                (Expr (Call (Name g_print Load) (list (Name &root:0 Load)) nil))\n                                (Assign\n                                  (list (Name &res:0 Store))\n                                  (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))\n                                  None\n                                )\n                                (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))\n                              )\n                              (/seq\n                                (Assign\n                                  (list (Name &root1:0 Store))\n                                  (Call\n                                    (Name g_float Load)\n                                    (list\n                                      (BinOp\n                                        (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Name &e:0 Load))\n                                        Div\n                                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                      )\n                                    )\n                                    nil\n                                  )\n                                  None\n                                )\n                                (Assign\n                                  (list (Name &root2:0 Store))\n                                  (Call\n                                    (Name g_float Load)\n                                    (list\n                                      (BinOp\n                                        (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &e:0 Load))\n                                        Div\n                                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                      )\n                                    )\n                                    nil\n                                  )\n                                  None\n                                )\n                                (Assign (list (Name &roots:0 Store)) (Constant i2 None) None)\n                                (Expr (Call (Name g_print Load) (list (Name &roots:0 Load)) nil))\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root1:0 Load))\n                                    )\n                                    nil\n                                  )\n                                )\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root2:0 Load))\n                                    )\n                                    nil\n                                  )\n                                )\n                              )\n                            )\n                          )\n                          (list\n                            (ExceptHandler\n                              (Name g_ZeroDivisionError Load)\n                              &zd:0\n                              (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n                            )\n                          )\n                          nil\n                          nil\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &sqr:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n          (/seq Pass)\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &x:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Subscript (Name &x:0 Load) (Constant i0 None) Load) None)\n    (Assign (list (Name &b:0 Store)) (Subscript (Name &x:0 Load) (Constant i1 None) Load) None)\n    (Assign (list (Name &c:0 Store)) (Subscript (Name &x:0 Load) (Constant i2 None) Load) None)\n    (Import (list (alias &math:0 None)))\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (If\n              (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n              (/seq (Assign (list (Name &r:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None))\n              (/seq\n                (Assign\n                  (list (Name &r:0 Store))\n                  (Call (Name g_abs Load) (list (BinOp (Name &c:0 Load) Div (Name &b:0 Load))) nil)\n                  None\n                )\n              )\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Call\n                    (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load)\n                    (list (Name &r:0 Load))\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &d:0 Store))\n          (BinOp\n            (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Assign\n                  (list (Name &r:0 Store))\n                  (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                  None\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load)\n                        (list (Name &r:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &r1:0 Store))\n                  (Call (Attribute (Name &math:0 Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n                  None\n                )\n                (Assign\n                  (list (Name &r11:0 Store))\n                  (BinOp\n                    (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &r1:0 Load))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &r12:0 Store))\n                  (BinOp\n                    (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Name &r1:0 Load))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign (list (Name &r:0 Store)) (List nil Load) None)\n                (Expr\n                  (Call\n                    (Attribute (Name &r:0 Load) s_append Load)\n                    (list (Call (Name g_min Load) (list (Name &r11:0 Load) (Name &r12:0 Load)) nil))\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &r:0 Load) s_append Load)\n                    (list (Call (Name g_max Load) (list (Name &r11:0 Load) (Name &r12:0 Load)) nil))\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (For\n                  (Name &i:0 Store)\n                  (Name &r:0 Load)\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (Name &i:0 Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                  None\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &__author__:0 Store))\n      (Constant\n        s-WzEwLCAxMCwgMzIsIDEwLCAzMiwgMzIsIDMyLCA0MiwgNDIsIDQyLCAzMiwgMzIsIDMyLCA5LCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCA0MiwgMTAsIDMyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgNDIsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNDIsIDksIDMyLCA0MiwgNDIsIDQyLCA0MiwgOSwgMzIsIDQyLCA0MiwgNDIsIDQyLCAzMiwgMzIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgMzIsIDMyLCAzMiwgMzIsIDQyLCA0MiwgNDIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNDIsIDksIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDMyLCAzMiwgMzIsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNDIsIDksIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDEwLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDksIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDEwLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDksIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgNDIsIDMyLCAzMiwgMTAsIDMyLCA0MiwgNDIsIDQyLCA5LCAzMiwgNDIsIDQyLCA0MiwgMzIsIDQyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDMyLCAzMiwgMzIsIDMyLCA0MiwgNDIsIDQyLCAzMiwgNDIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCA0MiwgMTAsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgMzIsIDMyLCAxMF0=\n        None\n      )\n      None\n    )\n    (Expr\n      (Constant\n        s-WzEyMSwgOTcsIDMyLCAxMTIsIDk3LCAxMTQsIDIzMSwgOTcsIDEwOCwgOTcsIDEyMSwgOTcsIDk5LCA5NywgMTA5LCAzMiwgMTIxLCA5NywgMzIsIDExMiwgOTcsIDExNCwgMjMxLCA5NywgMTA4LCA5NywgMTIxLCA5NywgOTksIDk3LCAxMDksIDMyLCAxMjEsIDk3LCAzMiwgMTAwLCA5NywgMzIsIDExMiwgOTcsIDExNCwgMjMxLCA5NywgMTA4LCA5NywgMTIxLCA5NywgOTksIDk3LCAxMDksIDEwOSwgMTA5LCAzMiwgNTgsIDQxXQ==\n        None\n      )\n    )\n    (ImportFrom s_math (list (alias s_sqrt &jarbay:0)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &delta:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Assign\n              (list (Name &u:0 Store))\n              (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &b:0 Load))\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &u:0 Load)))\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &delta:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &delta:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Assign\n                  (list (Name &u:0 Store))\n                  (BinOp\n                    (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &u:0 Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &x1:0 Store))\n                  (BinOp\n                    (BinOp\n                      (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load))\n                      Add\n                      (Call (Name &jarbay:0 Load) (list (Name &delta:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &x2:0 Store))\n                  (BinOp\n                    (BinOp\n                      (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load))\n                      Sub\n                      (Call (Name &jarbay:0 Load) (list (Name &delta:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &x1:0 Load) (list Gt) (list (Name &x2:0 Load)))\n                  (/seq\n                    (Assign\n                      (list (Tuple (list (Name &x1:0 Store) (Name &x2:0 Store)) Store))\n                      (Tuple (list (Name &x2:0 Load) (Name &x1:0 Load)) Load)\n                      None\n                    )\n                  )\n                  nil\n                )\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x1:0 Load)))\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x2:0 Load)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA0NiwgNTUsIDEwMl0= None)\n                    Mod\n                    (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &r:0 Store))\n          (BinOp\n            (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &r:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &r:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant s-WzM3LCA0NiwgNTUsIDEwMl0= None)\n                        Mod\n                        (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil))\n                (If\n                  (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None)))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (BinOp\n                            (Constant s-WzM3LCA0NiwgNTUsIDEwMl0= None)\n                            Mod\n                            (BinOp\n                              (BinOp\n                                (UnaryOp USub (Name &b:0 Load))\n                                Sub\n                                (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &r:0 Load)) nil)\n                              )\n                              Div\n                              (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (BinOp\n                            (Constant s-WzM3LCA0NiwgNTUsIDEwMl0= None)\n                            Mod\n                            (BinOp\n                              (BinOp\n                                (UnaryOp USub (Name &b:0 Load))\n                                Add\n                                (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &r:0 Load)) nil)\n                              )\n                              Div\n                              (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                            )\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None)))\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (Constant s-WzM3LCA0NiwgNTUsIDEwMl0= None)\n                                Mod\n                                (BinOp\n                                  (BinOp\n                                    (UnaryOp USub (Name &b:0 Load))\n                                    Add\n                                    (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &r:0 Load)) nil)\n                                  )\n                                  Div\n                                  (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                )\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (Constant s-WzM3LCA0NiwgNTUsIDEwMl0= None)\n                                Mod\n                                (BinOp\n                                  (BinOp\n                                    (UnaryOp USub (Name &b:0 Load))\n                                    Sub\n                                    (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &r:0 Load)) nil)\n                                  )\n                                  Div\n                                  (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                )\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_* None)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Tuple\n        (list\n          (Call (Name g_int Load) (list (Name &a:0 Load)) nil)\n          (Call (Name g_int Load) (list (Name &b:0 Load)) nil)\n          (Call (Name g_int Load) (list (Name &c:0 Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &d_2:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &d_2:0 Load) (list Lt) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                (Assign\n                  (list (Name &x_1:0 Store))\n                  (UnaryOp\n                    USub\n                    (BinOp\n                      (Call (Name g_float Load) (list (Name &c:0 Load)) nil)\n                      Div\n                      (Call (Name g_float Load) (list (Name &b:0 Load)) nil)\n                    )\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x_1:0 Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &d_2:0 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (BinOp\n                            (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                            Mod\n                            (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    (Expr (Call (Name g_exit Load) nil nil))\n                  )\n                  nil\n                )\n                (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil))\n                (Assign\n                  (list (Name &x_small:0 Store))\n                  (BinOp\n                    (Call\n                      (Name g_float Load)\n                      (list\n                        (BinOp\n                          (UnaryOp USub (Call (Name g_float Load) (list (Name &b:0 Load)) nil))\n                          Sub\n                          (Call (Name g_sqrt Load) (list (Name &d_2:0 Load)) nil)\n                        )\n                      )\n                      nil\n                    )\n                    Div\n                    (Call (Name g_float Load) (list (BinOp (Constant i2 None) Mult (Name &a:0 Load))) nil)\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &x_big:0 Store))\n                  (BinOp\n                    (Call\n                      (Name g_float Load)\n                      (list\n                        (BinOp\n                          (UnaryOp USub (Call (Name g_float Load) (list (Name &b:0 Load)) nil))\n                          Add\n                          (Call (Name g_sqrt Load) (list (Name &d_2:0 Load)) nil)\n                        )\n                      )\n                      nil\n                    )\n                    Div\n                    (Call (Name g_float Load) (list (BinOp (Constant i2 None) Mult (Name &a:0 Load))) nil)\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                            Mod\n                            (Call (Name g_min Load) (list (Name &x_small:0 Load) (Name &x_big:0 Load)) nil)\n                          )\n                          Add\n                          (Constant s-WzEwXQ== None)\n                        )\n                        Add\n                        (BinOp\n                          (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                          Mod\n                          (Call (Name g_max Load) (list (Name &x_big:0 Load) (Name &x_small:0 Load)) nil)\n                        )\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n        )\n        (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))\n      )\n      nil\n    )\n    (Assign\n      (list (Name &D:0 Store))\n      (BinOp\n        (Call (Name g_pow Load) (list (Name &b:0 Load) (Constant i2 None)) nil)\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (Assign (list (Name &x:0 Store)) (UnaryOp USub (Name &b:0 Load)) None)\n    (Assign\n      (list (Name &y:0 Store))\n      (Call (Name g_pow Load) (list (Name &D:0 Load) (BinOp (Constant i1 None) Div (Constant i2 None))) nil)\n      None\n    )\n    (Assign (list (Name &z:0 Store)) (BinOp (Constant i2 None) Mult (Name &a:0 Load)) None)\n    (Assign (list (Name &r:0 Store)) (Constant i0 None) None)\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n        (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))\n        (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))\n      )\n      nil\n    )\n    (If\n      (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Name &r:0 Load)) nil))\n        (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))\n      )\n      nil\n    )\n    (If\n      (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (Assign (list (Name &r:0 Store)) (Constant i1 None) None)\n        (Assign\n          (list (Name &e1:0 Store))\n          (BinOp (BinOp (Name &x:0 Load) Sub (Name &y:0 Load)) Div (Name &z:0 Load))\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &r:0 Load) (Name &e1:0 Load)) nil))\n      )\n      (/seq\n        (Assign (list (Name &r:0 Store)) (Constant i2 None) None)\n        (Assign\n          (list (Name &e1:0 Store))\n          (BinOp (BinOp (Name &x:0 Load) Add (Name &y:0 Load)) Div (Name &z:0 Load))\n          None\n        )\n        (Assign\n          (list (Name &e2:0 Store))\n          (BinOp (BinOp (Name &x:0 Load) Sub (Name &y:0 Load)) Div (Name &z:0 Load))\n          None\n        )\n        (If\n          (Compare (Name &e2:0 Load) (list Lt) (list (Name &e1:0 Load)))\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &e1:0 Store) (Name &e2:0 Store)) Store))\n              (Tuple (list (Name &e2:0 Load) (Name &e1:0 Load)) Load)\n              None\n            )\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (Name &r:0 Load) (Name &e1:0 Load) (Name &e2:0 Load)) nil))\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Call\n                    (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                    (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &root1:0 Store))\n              (BinOp\n                (BinOp\n                  (UnaryOp USub (Name &b:0 Load))\n                  Add\n                  (BinOp\n                    (BinOp\n                      (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                      Sub\n                      (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                    )\n                    Pow\n                    (Constant f0.5 None)\n                  )\n                )\n                Div\n                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n              )\n              None\n            )\n            (Assign\n              (list (Name &root2:0 Store))\n              (BinOp\n                (BinOp\n                  (UnaryOp USub (Name &b:0 Load))\n                  Sub\n                  (BinOp\n                    (BinOp\n                      (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                      Sub\n                      (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                    )\n                    Pow\n                    (Constant f0.5 None)\n                  )\n                )\n                Div\n                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n              )\n              None\n            )\n            (If\n              (Compare (Name &root1:0 Load) (list Eq) (list (Name &root2:0 Load)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                        (list (Name &root1:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Call (Name g_type Load) (list (Name &root1:0 Load)) nil)\n                        (list Eq)\n                        (list (Name g_complex Load))\n                      )\n                      (Compare\n                        (Call (Name g_type Load) (list (Name &root2:0 Load)) nil)\n                        (list Eq)\n                        (list (Name g_complex Load))\n                      )\n                    )\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare\n                        (Call (Name g_type Load) (list (Name &root1:0 Load)) nil)\n                        (list Eq)\n                        (list (Name g_complex Load))\n                      )\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Call\n                                (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                                (list (Name &root2:0 Load))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (If\n                          (Compare\n                            (Call (Name g_type Load) (list (Name &root2:0 Load)) nil)\n                            (list Eq)\n                            (list (Name g_complex Load))\n                          )\n                          (/seq\n                            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (Call\n                                    (Attribute\n                                      (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None)\n                                      s_format\n                                      Load\n                                    )\n                                    (list (Name &root1:0 Load))\n                                    nil\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          (/seq\n                            (If\n                              (Compare (Name &root1:0 Load) (list Gt) (list (Name &root2:0 Load)))\n                              (/seq\n                                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (Call\n                                        (Attribute\n                                          (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None)\n                                          s_format\n                                          Load\n                                        )\n                                        (list (Name &root2:0 Load))\n                                        nil\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (Call\n                                        (Attribute\n                                          (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None)\n                                          s_format\n                                          Load\n                                        )\n                                        (list (Name &root1:0 Load))\n                                        nil\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                              )\n                              (/seq\n                                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (Call\n                                        (Attribute\n                                          (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None)\n                                          s_format\n                                          Load\n                                        )\n                                        (list (Name &root1:0 Load))\n                                        nil\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (Call\n                                        (Attribute\n                                          (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None)\n                                          s_format\n                                          Load\n                                        )\n                                        (list (Name &root2:0 Load))\n                                        nil\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None) (alias g_math None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Call\n                    (Attribute (Constant s-WzQ5LCAxMCwgMTIzLCA1OCwgNDYsIDU0LCAxMDIsIDEyNV0= None) s_format Load)\n                    (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &delta:0 Store))\n          (BinOp\n            (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &delta:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &delta:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzQ5LCAxMCwgMTIzLCA1OCwgNDYsIDU0LCAxMDIsIDEyNV0= None) s_format Load)\n                        (list\n                          (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &x1:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Sub\n                      (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &delta:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &x2:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Add\n                      (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &delta:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute\n                          (Constant\n                            s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjUsIDEwLCAxMjMsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ==\n                            None\n                          )\n                          s_format\n                          Load\n                        )\n                        (list\n                          (Call (Name g_min Load) (list (Name &x1:0 Load) (Name &x2:0 Load)) nil)\n                          (Call (Name g_max Load) (list (Name &x1:0 Load) (Name &x2:0 Load)) nil)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Name &c:0 Load) (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &d:0 Store))\n              (BinOp\n                (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                Sub\n                (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n              )\n              None\n            )\n            (If\n              (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (If\n                  (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Constant i2 None)) Div (Name &a:0 Load))\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                    (Assign\n                      (list (Name &e:0 Store))\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (UnaryOp USub (Name &b:0 Load))\n                            Sub\n                            (Call (Name g_sqrt Load) (list (Name &d:0 Load)) nil)\n                          )\n                          Div\n                          (Constant i2 None)\n                        )\n                        Div\n                        (Name &a:0 Load)\n                      )\n                      None\n                    )\n                    (Assign\n                      (list (Name &f:0 Store))\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (UnaryOp USub (Name &b:0 Load))\n                            Add\n                            (Call (Name g_sqrt Load) (list (Name &d:0 Load)) nil)\n                          )\n                          Div\n                          (Constant i2 None)\n                        )\n                        Div\n                        (Name &a:0 Load)\n                      )\n                      None\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (Call (Name g_min Load) (list (Name &e:0 Load) (Name &f:0 Load)) nil))\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (Call (Name g_max Load) (list (Name &e:0 Load) (Name &f:0 Load)) nil))\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_float Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &x:0 Store))\n                  (List\n                    (list\n                      (Call\n                        (Name g_float Load)\n                        (list\n                          (BinOp\n                            (BinOp\n                              (BinOp\n                                (UnaryOp USub (Name &b:0 Load))\n                                Add\n                                (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                              )\n                              Div\n                              (Constant i2 None)\n                            )\n                            Div\n                            (Name &a:0 Load)\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &v1:0 Store))\n                  (Call\n                    (Name g_float Load)\n                    (list\n                      (BinOp\n                        (BinOp\n                          (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                          Div\n                          (Constant i2 None)\n                        )\n                        Div\n                        (Name &a:0 Load)\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If\n                  (UnaryOp Not (Compare (Name &v1:0 Load) (list In) (list (Name &x:0 Load))))\n                  (/seq (AugAssign (Name &x:0 Store) Add (List (list (Name &v1:0 Load)) Load)))\n                  nil\n                )\n                (Expr (Call (Attribute (Name &x:0 Load) s_sort Load) nil nil))\n                (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &x:0 Load)) nil)) nil))\n                (For\n                  (Name &v:0 Store)\n                  (Name &x:0 Load)\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (BinOp\n                            (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                            Mod\n                            (Call (Name g_float Load) (list (Name &v:0 Load)) nil)\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                  None\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Import (list (alias &math:0 None)))\n    (Assign\n      (list (Name &D:0 Store))\n      (BinOp\n        (BinOp (Name &B:0 Load) Mult (Name &B:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &A:0 Load)) Mult (Name &C:0 Load))\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &C:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &C:0 Load)) Div (Name &B:0 Load)) None)\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA1MiwgNDYsIDUzLCAxMDJd None) Mod (Name &x:0 Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None)))\n                      (/seq\n                        (Assign\n                          (list (Name &x1:0 Store))\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &B:0 Load))\n                              Add\n                              (Call (Attribute (Name &math:0 Load) s_sqrt Load) (list (Name &D:0 Load)) nil)\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                          )\n                          None\n                        )\n                        (Assign\n                          (list (Name &x2:0 Store))\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &B:0 Load))\n                              Sub\n                              (Call (Attribute (Name &math:0 Load) s_sqrt Load) (list (Name &D:0 Load)) nil)\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                          )\n                          None\n                        )\n                        (Assign\n                          (list (Tuple (list (Name &x1:0 Store) (Name &x2:0 Store)) Store))\n                          (IfExp\n                            (Compare (Name &x1:0 Load) (list Lt) (list (Name &x2:0 Load)))\n                            (Tuple (list (Name &x1:0 Load) (Name &x2:0 Load)) Load)\n                            (Tuple (list (Name &x2:0 Load) (Name &x1:0 Load)) Load)\n                          )\n                          None\n                        )\n                        (Assign\n                          (list (Name &a:0 Store))\n                          (BinOp (Constant s-WzM3LCA1MiwgNDYsIDUzLCAxMDJd None) Mod (Name &x1:0 Load))\n                          None\n                        )\n                        (Assign\n                          (list (Name &b:0 Store))\n                          (BinOp (Constant s-WzM3LCA1MiwgNDYsIDUzLCAxMDJd None) Mod (Name &x2:0 Load))\n                          None\n                        )\n                        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                        (Expr (Call (Name g_print Load) (list (Name &a:0 Load)) nil))\n                        (Expr (Call (Name g_print Load) (list (Name &b:0 Load)) nil))\n                      )\n                      (/seq\n                        (If\n                          (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None)))\n                          (/seq\n                            (Assign\n                              (list (Name &x:0 Store))\n                              (BinOp\n                                (UnaryOp USub (Name &B:0 Load))\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                              )\n                              None\n                            )\n                            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA1MiwgNDYsIDUzLCAxMDJd None) Mod (Name &x:0 Load)))\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &coefficients:0 Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &coefficients:0 Load) (Constant i0 None) Load)) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &coefficients:0 Load) (Constant i1 None) Load)) nil)\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &coefficients:0 Load) (Constant i2 None) Load)) nil)\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare\n                (BinOp\n                  (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                  Sub\n                  (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                )\n                (list Lt)\n                (list (Constant i0 None))\n              )\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                        Mod\n                        (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &root1:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Sub\n                      (Call\n                        (Attribute (Name g_math Load) s_sqrt Load)\n                        (list\n                          (BinOp\n                            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                            Sub\n                            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &root2:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Add\n                      (Call\n                        (Attribute (Name g_math Load) s_sqrt Load)\n                        (list\n                          (BinOp\n                            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                            Sub\n                            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &min_root:0 Store))\n                  (Call (Name g_min Load) (list (Name &root1:0 Load) (Name &root2:0 Load)) nil)\n                  None\n                )\n                (Assign\n                  (list (Name &max_root:0 Store))\n                  (Call (Name g_max Load) (list (Name &root1:0 Load) (Name &root2:0 Load)) nil)\n                  None\n                )\n                (If\n                  (Compare\n                    (BinOp\n                      (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                      Sub\n                      (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                    )\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root1:0 Load)))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &min_root:0 Load)))\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &max_root:0 Load)))\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (BinOp\n                      (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                      Sub\n                      (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                    )\n                    (list Lt)\n                    (list (Constant i0 None))\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare\n                        (BinOp\n                          (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                          Sub\n                          (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                        )\n                        (list Eq)\n                        (list (Constant i0 None))\n                      )\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (UnaryOp USub (Name &b:0 Load))\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                        (Assign\n                          (list (Name &d:0 Store))\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &b:0 Load))\n                              Add\n                              (Call\n                                (Attribute (Name g_math Load) s_sqrt Load)\n                                (list\n                                  (BinOp\n                                    (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                                    Sub\n                                    (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                          None\n                        )\n                        (Assign\n                          (list (Name &e:0 Store))\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &b:0 Load))\n                              Sub\n                              (Call\n                                (Attribute (Name g_math Load) s_sqrt Load)\n                                (list\n                                  (BinOp\n                                    (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                                    Sub\n                                    (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                          None\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (Call (Name g_min Load) (list (Name &e:0 Load) (Name &d:0 Load)) nil))\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (Call (Name g_max Load) (list (Name &e:0 Load) (Name &d:0 Load)) nil))\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &find_roots:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare\n            (Tuple (list (Name &a:1 Load) (Name &b:1 Load) (Name &c:1 Load)) Load)\n            (list Eq)\n            (list (Tuple (list (Constant i0 None) (Constant i0 None) (Constant i0 None)) Load))\n          )\n          (/seq (Return (Constant None None)))\n          nil\n        )\n        (If\n          (Compare\n            (Tuple (list (Name &a:1 Load) (Name &b:1 Load)) Load)\n            (list Eq)\n            (list (Tuple (list (Constant i0 None) (Constant i0 None)) Load))\n          )\n          (/seq (Return (List nil Load)))\n          nil\n        )\n        (If\n          (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Return (List (list (BinOp (UnaryOp USub (Name &c:1 Load)) Div (Name &b:1 Load))) Load)))\n          nil\n        )\n        (Assign\n          (list (Name &d:1 Store))\n          (BinOp\n            (BinOp\n              (BinOp (Name &b:1 Load) Pow (Constant i2 None))\n              Div\n              (BinOp (Constant i4 None) Mult (BinOp (Name &a:1 Load) Pow (Constant i2 None)))\n            )\n            Sub\n            (BinOp (Name &c:1 Load) Div (Name &a:1 Load))\n          )\n          None\n        )\n        (If (Compare (Name &d:1 Load) (list Lt) (list (Constant i0 None))) (/seq (Return (List nil Load))) nil)\n        (Assign\n          (list (Name &m:1 Store))\n          (BinOp (UnaryOp USub (Name &b:1 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load)))\n          None\n        )\n        (If\n          (Compare (Name &d:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Return (List (list (Name &m:1 Load)) Load)))\n          nil\n        )\n        (Return\n          (List\n            (list\n              (BinOp (Name &m:1 Load) Sub (BinOp (Name &d:1 Load) Pow (Constant f0.5 None)))\n              (BinOp (Name &m:1 Load) Add (BinOp (Name &d:1 Load) Pow (Constant f0.5 None)))\n            )\n            Load\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_float Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &roots:0 Store))\n          (Call (Name &find_roots:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil)\n          None\n        )\n        (If\n          (Compare (Name &roots:0 Load) (list Is) (list (Constant None None)))\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &roots:0 Load)) nil)) nil))\n            (For\n              (Name &r:0 Store)\n              (Name &roots:0 Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load)\n                        (list (Name &r:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n          )\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_decimal (list (alias g_* None)) i0)\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_Decimal Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n              Sub\n              (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n            )\n            (list Lt)\n            (list (Constant i0 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (Assign\n              (list (Name &arr:0 Store))\n              (List\n                (list\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Add\n                      (Call\n                        (Name g_Decimal Load)\n                        (list\n                          (Call\n                            (Name g_sqrt Load)\n                            (list\n                              (BinOp\n                                (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                Sub\n                                (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Sub\n                      (Call\n                        (Name g_Decimal Load)\n                        (list\n                          (Call\n                            (Name g_sqrt Load)\n                            (list\n                              (BinOp\n                                (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                Sub\n                                (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (Compare\n                (Call (Name g_max Load) (list (Name &arr:0 Load)) nil)\n                (list Eq)\n                (list (Call (Name g_min Load) (list (Name &arr:0 Load)) nil))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Constant i1 None) (Subscript (Name &arr:0 Load) (Constant i0 None) Load))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call (Name g_len Load) (list (Name &arr:0 Load)) nil)\n                      (Starred (Call (Name g_sorted Load) (list (Name &arr:0 Load)) nil) Load)\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Name &c:0 Load) (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n                (list (Constant s-WzMyXQ== None))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &b:0 Load)))\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n            (list Eq)\n            (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                (list Lt)\n                (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Assign\n                  (list (Name &r1:0 Store))\n                  (BinOp\n                    (BinOp\n                      (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load))\n                      Sub\n                      (Call\n                        (Name g_sqrt Load)\n                        (list\n                          (BinOp\n                            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                            Sub\n                            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &r2:0 Store))\n                  (BinOp\n                    (BinOp\n                      (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load))\n                      Add\n                      (Call\n                        (Name g_sqrt Load)\n                        (list\n                          (BinOp\n                            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                            Sub\n                            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &r1:0 Load) (list Lt) (list (Name &r2:0 Load)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Name &r1:0 Load)) nil))\n                    (Expr (Call (Name g_print Load) (list (Name &r2:0 Load)) nil))\n                  )\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Name &r2:0 Load)) nil))\n                    (Expr (Call (Name g_print Load) (list (Name &r1:0 Load)) nil))\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &d:0 Store)) (Constant i0 None) None)\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      nil\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Expr (Call (Name g_exit Load) nil nil)))\n      nil\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (AugAssign (Name &d:0 Store) Sub (Name &c:0 Load))\n        (AugAssign (Name &d:0 Store) Div (Name &b:0 Load))\n        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n        (If\n          (Compare (Name &d:0 Load) (list Eq) (list (UnaryOp USub (Constant i0 None))))\n          (/seq (Assign (list (Name &d:0 Store)) (Constant i0 None) None))\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      nil\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Expr (Call (Name g_exit Load) nil nil)))\n      nil\n    )\n    (If\n      (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n        (AugAssign (Name &d:0 Store) Sub (Name &b:0 Load))\n        (AugAssign (Name &d:0 Store) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n        (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      nil\n    )\n    (If\n      (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n        (Assign\n          (list (Name &q:0 Store))\n          (BinOp\n            (UnaryOp USub (Name &b:0 Load))\n            Add\n            (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n          )\n          None\n        )\n        (AugAssign (Name &q:0 Store) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n        (Assign\n          (list (Name &w:0 Store))\n          (BinOp\n            (UnaryOp USub (Name &b:0 Load))\n            Sub\n            (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n          )\n          None\n        )\n        (AugAssign (Name &w:0 Store) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n        (If\n          (Compare (Name &q:0 Load) (list Gt) (list (Name &w:0 Load)))\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &q:0 Store) (Name &w:0 Store)) Store))\n              (Tuple (list (Name &w:0 Load) (Name &q:0 Load)) Load)\n              None\n            )\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (Name &q:0 Load)) nil))\n        (Expr (Call (Name g_print Load) (list (Name &w:0 Load)) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (IfExp\n        (Name &b:0 Load)\n        (List (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) Load)\n        (List (list (UnaryOp USub (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) Load)\n      )\n      None\n    )\n    (If\n      (Name &a:0 Load)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &d:0 Store) (Name &x:0 Store)) Store))\n          (Tuple\n            (list\n              (BinOp\n                (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                Sub\n                (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n              )\n              (BinOp (UnaryOp USub (Constant i2 None)) Mult (Name &a:0 Load))\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Name &d:0 Load)\n          (/seq\n            (Assign\n              (list (Name &t:0 Store))\n              (IfExp\n                (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n                (List (list (Constant i0 None)) Load)\n                (BinOp\n                  (List (list (Constant i2 None)) Load)\n                  Add\n                  (Call\n                    (Name g_sorted Load)\n                    (list\n                      (List\n                        (list\n                          (BinOp\n                            (BinOp (Name &b:0 Load) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                            Div\n                            (Name &x:0 Load)\n                          )\n                          (BinOp\n                            (BinOp (Name &b:0 Load) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                            Div\n                            (Name &x:0 Load)\n                          )\n                        )\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              None\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &t:0 Store))\n              (List (list (Constant i1 None) (BinOp (Name &b:0 Load) Div (Name &x:0 Load))) Load)\n              None\n            )\n          )\n        )\n      )\n      nil\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &t:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (Import (list (alias g_math None)))\n    (ImportFrom s_queue (list (alias g_Queue None)) i0)\n    (Import (list (alias g_collections None)))\n    (Import (list (alias g_itertools None)))\n    (Import (list (alias g_bisect None)))\n    (Import (list (alias g_heapq None)))\n    (Import (list (alias g_random None)))\n    (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq Pass) nil None None)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:19 None None) (arg &file:19 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:19 Load) s__fd Store))\n              (Call (Attribute (Name &file:19 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:19 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:19 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:19 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:19 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:19 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:19 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:20 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:20 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:20 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:20 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:20 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:20 Store))\n                  (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:20 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:20 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:20 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:21 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:21 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:21 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:21 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:21 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:21 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:21 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:21 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:21 Store))\n                  (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:21 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:21 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:21 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:22 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:22 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:22 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:23 None None) (arg &file:23 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:23 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:23 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:23 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:23 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:23 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:24 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:24 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:23 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:23 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &binary:0\n      (arguments nil (list (arg &n:3 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute (Call (Name g_bin Load) (list (Name &n:3 Load)) nil) s_replace Load)\n            (list (Constant s_0b None) (Constant s_ None))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &decimal:0\n      (arguments nil (list (arg &s:4 None None)) None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Name &s:4 Load) (Constant i2 None)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &pow2:0\n      (arguments nil (list (arg &n:5 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &p:5 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &n:5 Load) (list Gt) (list (Constant i1 None)))\n          (/seq\n            (AugAssign (Name &n:5 Store) FloorDiv (Constant i2 None))\n            (AugAssign (Name &p:5 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Return (Name &p:5 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &primeFactors:0\n      (arguments nil (list (arg &n:6 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &l:6 Store)) (List nil Load) None)\n        (While\n          (Compare (BinOp (Name &n:6 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Attribute (Name &l:6 Load) s_append Load) (list (Constant i2 None)) nil))\n            (Assign (list (Name &n:6 Store)) (BinOp (Name &n:6 Load) Div (Constant i2 None)) None)\n          )\n          nil\n        )\n        (For\n          (Name &i:6 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Constant i3 None)\n              (BinOp\n                (Call\n                  (Name g_int Load)\n                  (list (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &n:6 Load)) nil))\n                  nil\n                )\n                Add\n                (Constant i1 None)\n              )\n              (Constant i2 None)\n            )\n            nil\n          )\n          (/seq\n            (While\n              (Compare (BinOp (Name &n:6 Load) Mod (Name &i:6 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Attribute (Name &l:6 Load) s_append Load) (list (Name &i:6 Load)) nil))\n                (Assign (list (Name &n:6 Store)) (BinOp (Name &n:6 Load) Div (Name &i:6 Load)) None)\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (If\n          (Compare (Name &n:6 Load) (list Gt) (list (Constant i2 None)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &l:6 Load) s_append Load)\n                (list (Call (Name g_int Load) (list (Name &n:6 Load)) nil))\n                nil\n              )\n            )\n          )\n          nil\n        )\n        (Return (Name &l:6 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &isPrime:0\n      (arguments nil (list (arg &n:7 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &n:7 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Return (Constant False None)))\n          (/seq\n            (Assign\n              (list (Name &root:7 Store))\n              (Call (Name g_int Load) (list (BinOp (Name &n:7 Load) Pow (Constant f0.5 None))) nil)\n              None\n            )\n            (AugAssign (Name &root:7 Store) Add (Constant i1 None))\n            (For\n              (Name &i:7 Store)\n              (Call (Name g_range Load) (list (Constant i2 None) (Name &root:7 Load)) nil)\n              (/seq\n                (If\n                  (Compare (BinOp (Name &n:7 Load) Mod (Name &i:7 Load)) (list Eq) (list (Constant i0 None)))\n                  (/seq (Return (Constant False None)))\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Return (Constant True None))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &maxPrimeFactors:0\n      (arguments nil (list (arg &n:8 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &maxPrime:8 Store)) (UnaryOp USub (Constant i1 None)) None)\n        (While\n          (Compare (BinOp (Name &n:8 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Assign (list (Name &maxPrime:8 Store)) (Constant i2 None) None)\n            (AugAssign (Name &n:8 Store) RShift (Constant i1 None))\n          )\n          nil\n        )\n        (For\n          (Name &i:8 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Constant i3 None)\n              (BinOp\n                (Call\n                  (Name g_int Load)\n                  (list (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &n:8 Load)) nil))\n                  nil\n                )\n                Add\n                (Constant i1 None)\n              )\n              (Constant i2 None)\n            )\n            nil\n          )\n          (/seq\n            (While\n              (Compare (BinOp (Name &n:8 Load) Mod (Name &i:8 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &maxPrime:8 Store)) (Name &i:8 Load) None)\n                (Assign (list (Name &n:8 Store)) (BinOp (Name &n:8 Load) Div (Name &i:8 Load)) None)\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (If\n          (Compare (Name &n:8 Load) (list Gt) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &maxPrime:8 Store)) (Name &n:8 Load) None))\n          nil\n        )\n        (Return (Call (Name g_int Load) (list (Name &maxPrime:8 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &countcon:0\n      (arguments nil (list (arg &s:9 None None) (arg &i:9 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &c:9 Store)) (Constant i0 None) None)\n        (Assign (list (Name &ch:9 Store)) (Subscript (Name &s:9 Load) (Name &i:9 Load) Load) None)\n        (For\n          (Name &i:9 Store)\n          (Call (Name g_range Load) (list (Name &i:9 Load) (Call (Name g_len Load) (list (Name &s:9 Load)) nil)) nil)\n          (/seq\n            (If\n              (Compare (Subscript (Name &s:9 Load) (Name &i:9 Load) Load) (list Eq) (list (Name &ch:9 Load)))\n              (/seq (AugAssign (Name &c:9 Store) Add (Constant i1 None)))\n              (/seq Break)\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &c:9 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lis:0\n      (arguments nil (list (arg &arr:10 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:10 Store)) (Call (Name g_len Load) (list (Name &arr:10 Load)) nil) None)\n        (Assign (list (Name &lis:10 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &n:10 Load)) None)\n        (For\n          (Name &i:10 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (Name &n:10 Load)) nil)\n          (/seq\n            (For\n              (Name &j:10 Store)\n              (Call (Name g_range Load) (list (Constant i0 None) (Name &i:10 Load)) nil)\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Subscript (Name &arr:10 Load) (Name &i:10 Load) Load)\n                        (list Gt)\n                        (list (Subscript (Name &arr:10 Load) (Name &j:10 Load) Load))\n                      )\n                      (Compare\n                        (Subscript (Name &lis:10 Load) (Name &i:10 Load) Load)\n                        (list Lt)\n                        (list (BinOp (Subscript (Name &lis:10 Load) (Name &j:10 Load) Load) Add (Constant i1 None)))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &lis:10 Load) (Name &i:10 Load) Store))\n                      (BinOp (Subscript (Name &lis:10 Load) (Name &j:10 Load) Load) Add (Constant i1 None))\n                      None\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &maximum:10 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:10 Store)\n          (Call (Name g_range Load) (list (Name &n:10 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &maximum:10 Store))\n              (Call\n                (Name g_max Load)\n                (list (Name &maximum:10 Load) (Subscript (Name &lis:10 Load) (Name &i:10 Load) Load))\n                nil\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &maximum:10 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &isSubSequence:0\n      (arguments nil (list (arg &str1:11 None None) (arg &str2:11 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &m:11 Store)) (Call (Name g_len Load) (list (Name &str1:11 Load)) nil) None)\n        (Assign (list (Name &n:11 Store)) (Call (Name g_len Load) (list (Name &str2:11 Load)) nil) None)\n        (Assign (list (Name &j:11 Store)) (Constant i0 None) None)\n        (Assign (list (Name &i:11 Store)) (Constant i0 None) None)\n        (While\n          (BoolOp\n            And\n            (list\n              (Compare (Name &j:11 Load) (list Lt) (list (Name &m:11 Load)))\n              (Compare (Name &i:11 Load) (list Lt) (list (Name &n:11 Load)))\n            )\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &str1:11 Load) (Name &j:11 Load) Load)\n                (list Eq)\n                (list (Subscript (Name &str2:11 Load) (Name &i:11 Load) Load))\n              )\n              (/seq (Assign (list (Name &j:11 Store)) (BinOp (Name &j:11 Load) Add (Constant i1 None)) None))\n              nil\n            )\n            (Assign (list (Name &i:11 Store)) (BinOp (Name &i:11 Load) Add (Constant i1 None)) None)\n          )\n          nil\n        )\n        (Return (Compare (Name &j:11 Load) (list Eq) (list (Name &m:11 Load))))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &maxfac:0\n      (arguments nil (list (arg &n:12 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &root:12 Store))\n          (Call (Name g_int Load) (list (BinOp (Name &n:12 Load) Pow (Constant f0.5 None))) nil)\n          None\n        )\n        (For\n          (Name &i:12 Store)\n          (Call (Name g_range Load) (list (Constant i2 None) (BinOp (Name &root:12 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (If\n              (Compare (BinOp (Name &n:12 Load) Mod (Name &i:12 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq (Return (BinOp (Name &n:12 Load) FloorDiv (Name &i:12 Load))))\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &n:12 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &p2:0\n      (arguments nil (list (arg &n:13 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &c:13 Store)) (Constant i0 None) None)\n        (While\n          (Compare (BinOp (Name &n:13 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &n:13 Store) FloorDiv (Constant i2 None))\n            (AugAssign (Name &c:13 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Return (Name &c:13 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &seive:0\n      (arguments nil (list (arg &n:14 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &primes:14 Store))\n          (BinOp (List (list (Constant True None)) Load) Mult (BinOp (Name &n:14 Load) Add (Constant i1 None)))\n          None\n        )\n        (Assign\n          (list\n            (Subscript (Name &primes:14 Load) (Constant i1 None) Store)\n            (Subscript (Name &primes:14 Load) (Constant i0 None) Store)\n          )\n          (Constant False None)\n          None\n        )\n        (Assign (list (Name &i:14 Store)) (Constant i2 None) None)\n        (While\n          (Compare (BinOp (Name &i:14 Load) Mult (Name &i:14 Load)) (list LtE) (list (Name &n:14 Load)))\n          (/seq\n            (If\n              (Compare (Subscript (Name &primes:14 Load) (Name &i:14 Load) Load) (list Eq) (list (Constant True None)))\n              (/seq\n                (For\n                  (Name &j:14 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (BinOp (Name &i:14 Load) Mult (Name &i:14 Load))\n                      (BinOp (Name &n:14 Load) Add (Constant i1 None))\n                      (Name &i:14 Load)\n                    )\n                    nil\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Name &primes:14 Load) (Name &j:14 Load) Store))\n                      (Constant False None)\n                      None\n                    )\n                  )\n                  nil\n                  None\n                )\n              )\n              nil\n            )\n            (AugAssign (Name &i:14 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Assign (list (Name &pr:14 Store)) (List nil Load) None)\n        (For\n          (Name &i:14 Store)\n          (Call (Name g_range Load) (list (Constant i0 None) (BinOp (Name &n:14 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (If\n              (Subscript (Name &primes:14 Load) (Name &i:14 Load) Load)\n              (/seq (Expr (Call (Attribute (Name &pr:14 Load) s_append Load) (list (Name &i:14 Load)) nil)))\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &pr:14 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ncr:0\n      (arguments nil (list (arg &n:15 None None) (arg &r:15 None None) (arg &p:15 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &num:15 Store) (Name &den:15 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:15 Store)\n          (Call (Name g_range Load) (list (Name &r:15 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &num:15 Store))\n              (BinOp\n                (BinOp (Name &num:15 Load) Mult (BinOp (Name &n:15 Load) Sub (Name &i:15 Load)))\n                Mod\n                (Name &p:15 Load)\n              )\n              None\n            )\n            (Assign\n              (list (Name &den:15 Store))\n              (BinOp\n                (BinOp (Name &den:15 Load) Mult (BinOp (Name &i:15 Load) Add (Constant i1 None)))\n                Mod\n                (Name &p:15 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return\n          (BinOp\n            (BinOp\n              (Name &num:15 Load)\n              Mult\n              (Call\n                (Name g_pow Load)\n                (list (Name &den:15 Load) (BinOp (Name &p:15 Load) Sub (Constant i2 None)) (Name &p:15 Load))\n                nil\n              )\n            )\n            Mod\n            (Name &p:15 Load)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &denofactinverse:0\n      (arguments nil (list (arg &n:16 None None) (arg &m:16 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &fac:16 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:16 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:16 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Name &fac:16 Store))\n              (BinOp (BinOp (Name &fac:16 Load) Mult (Name &i:16 Load)) Mod (Name &m:16 Load))\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return\n          (Call\n            (Name g_pow Load)\n            (list (Name &fac:16 Load) (BinOp (Name &m:16 Load) Sub (Constant i2 None)) (Name &m:16 Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &numofact:0\n      (arguments nil (list (arg &n:17 None None) (arg &m:17 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &fac:17 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:17 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:17 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Name &fac:17 Store))\n              (BinOp (BinOp (Name &fac:17 Load) Mult (Name &i:17 Load)) Mod (Name &m:17 Load))\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &fac:17 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sod:0\n      (arguments nil (list (arg &n:18 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:18 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &n:18 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &s:18 Store) Add (BinOp (Name &n:18 Load) Mod (Constant i10 None)))\n            (AugAssign (Name &n:18 Store) FloorDiv (Constant i10 None))\n          )\n          nil\n        )\n        (Return (Name &s:18 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Assign (list (Name &t:0 Store)) (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)) None)\n                (Assign\n                  (list (Name &r1:0 Store))\n                  (BinOp\n                    (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &t:0 Load))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &r2:0 Store))\n                  (BinOp\n                    (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Name &t:0 Load))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Tuple (list (Name &r1:0 Store) (Name &r2:0 Store)) Store))\n                  (Tuple\n                    (list\n                      (Call (Name g_min Load) (list (Name &r1:0 Load) (Name &r2:0 Load)) nil)\n                      (Call (Name g_max Load) (list (Name &r1:0 Load) (Name &r2:0 Load)) nil)\n                    )\n                    Load\n                  )\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Expr (Call (Name g_print Load) (list (Name &r1:0 Load)) nil))\n                (Expr (Call (Name g_print Load) (list (Name &r2:0 Load)) nil))\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (Name g_int Load)\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &C:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &C:0 Load)) Div (Name &B:0 Load))) nil))\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &D:0 Store))\n          (BinOp\n            (BinOp (Name &B:0 Load) Mult (Name &B:0 Load))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &A:0 Load)) Mult (Name &C:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (UnaryOp USub (Name &B:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load))))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &X:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &B:0 Load))\n                      Add\n                      (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &D:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &Y:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &B:0 Load))\n                      Sub\n                      (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &D:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &X:0 Load) (list Gt) (list (Name &Y:0 Load)))\n                  (/seq\n                    (Assign\n                      (list (Tuple (list (Name &X:0 Store) (Name &Y:0 Store)) Store))\n                      (Tuple (list (Name &Y:0 Load) (Name &X:0 Load)) Load)\n                      None\n                    )\n                  )\n                  nil\n                )\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load)\n                        (list (Name &X:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load)\n                        (list (Name &Y:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (ListComp\n        (Call (Name g_float Load) (list (Name &x:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Constant i0 None)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                    Mod\n                    (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &aux:0 Store))\n          (BinOp\n            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &aux:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n            (Assign\n              (list (Name &arr:0 Store))\n              (List\n                (list\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Add\n                      (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &aux:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Sub\n                      (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &aux:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                )\n                Load\n              )\n              None\n            )\n            (Expr (Call (Attribute (Name &arr:0 Load) s_sort Load) nil nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                    Mod\n                    (Subscript (Name &arr:0 Load) (Constant i0 None) Load)\n                  )\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                    Mod\n                    (Subscript (Name &arr:0 Load) (Constant i1 None) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &aux:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                        Mod\n                        (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Constant i0 None)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzQ5LCAxMF0= None)\n                    Add\n                    (Call (Name g_str Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n            (list Eq)\n            (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Call\n                    (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                    (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                (list Lt)\n                (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Assign\n                  (list (Name &d:0 Store))\n                  (BinOp\n                    (BinOp\n                      (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                      Sub\n                      (BinOp (BinOp (Constant f4.0 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                    )\n                    Pow\n                    (Constant f0.5 None)\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute\n                          (Constant\n                            s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNSwgMTAsIDEyMywgNDksIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0=\n                            None\n                          )\n                          s_format\n                          Load\n                        )\n                        (list\n                          (Starred\n                            (Call\n                              (Name g_sorted Load)\n                              (list\n                                (List\n                                  (list\n                                    (BinOp\n                                      (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Name &d:0 Load))\n                                      Div\n                                      (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                    )\n                                    (BinOp\n                                      (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &d:0 Load))\n                                      Div\n                                      (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                                    )\n                                  )\n                                  Load\n                                )\n                              )\n                              nil\n                            )\n                            Load\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (UnaryOp USub (Name &b:0 Load))\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                        (Assign (list (Name &b:0 Store)) (BinOp (Name &b:0 Load) Div (Name &a:0 Load)) None)\n                        (Assign\n                          (list (Name &d:0 Store))\n                          (BinOp (Name &d:0 Load) Div (BinOp (Name &a:0 Load) Pow (Constant i2 None)))\n                          None\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:0 Load))\n                                  Sub\n                                  (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (Constant i2 None)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:0 Load))\n                                  Add\n                                  (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (Constant i2 None)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_* None)) i0)\n    (FunctionDef\n      &kv:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &q:1 Store) (Name &w:1 Store) (Name &e:1 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (BinOp\n            (BinOp\n              (Compare (Name &q:1 Load) (list Eq) (list (Constant i0 None)))\n              BitAnd\n              (Compare (Name &w:1 Load) (list Eq) (list (Constant i0 None)))\n            )\n            BitAnd\n            (Compare (Name &e:1 Load) (list Eq) (list (Constant i0 None)))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq\n            (If\n              (BinOp\n                (Compare (Name &q:1 Load) (list Eq) (list (Constant i0 None)))\n                BitAnd\n                (Compare (Name &w:1 Load) (list Eq) (list (Constant i0 None)))\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (If\n                  (Compare (Name &q:1 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (BinOp\n                            (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                            Mod\n                            (BinOp (UnaryOp USub (Name &e:1 Load)) Div (Name &w:1 Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &d:1 Store))\n                      (BinOp\n                        (BinOp (Name &w:1 Load) Mult (Name &w:1 Load))\n                        Sub\n                        (BinOp (BinOp (Constant i4 None) Mult (Name &q:1 Load)) Mult (Name &e:1 Load))\n                      )\n                      None\n                    )\n                    (If\n                      (Compare (Name &d:1 Load) (list Lt) (list (Constant i0 None)))\n                      (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n                      (/seq\n                        (If\n                          (Compare (Name &d:1 Load) (list Eq) (list (Constant i0 None)))\n                          (/seq\n                            (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (BinOp\n                                    (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                                    Mod\n                                    (BinOp\n                                      (UnaryOp USub (Name &w:1 Load))\n                                      Div\n                                      (BinOp (Constant i2 None) Mult (Name &q:1 Load))\n                                    )\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          (/seq\n                            (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil))\n                            (Assign\n                              (list (Name &a:1 Store))\n                              (List\n                                (list\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &w:1 Load))\n                                      Sub\n                                      (Call (Name g_sqrt Load) (list (Name &d:1 Load)) nil)\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &q:1 Load))\n                                  )\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &w:1 Load))\n                                      Add\n                                      (Call (Name g_sqrt Load) (list (Name &d:1 Load)) nil)\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &q:1 Load))\n                                  )\n                                )\n                                Load\n                              )\n                              None\n                            )\n                            (Expr (Call (Attribute (Name &a:1 Load) s_sort Load) nil nil))\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (BinOp\n                                    (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                                    Mod\n                                    (Subscript (Name &a:1 Load) (Constant i0 None) Load)\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (BinOp\n                                    (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                                    Mod\n                                    (Subscript (Name &a:1 Load) (Constant i1 None) Load)\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &kv:0 Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (Assign (list (Name &abc:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &abc:0 Load) (Constant i0 None) Load)) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &abc:0 Load) (Constant i1 None) Load)) nil)\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &abc:0 Load) (Constant i2 None) Load)) nil)\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n              Sub\n              (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n            )\n            (list Lt)\n            (list (Constant i0 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                  Sub\n                  (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                )\n                (list Eq)\n                (list (Constant i0 None))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Constant i2 None)) Div (Name &a:0 Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil))\n                (Assign\n                  (list (Name &p1:0 Store))\n                  (Call\n                    (Name g_min Load)\n                    (list\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (UnaryOp USub (Name &b:0 Load))\n                            Add\n                            (Call\n                              (Name g_sqrt Load)\n                              (list\n                                (BinOp\n                                  (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                  Sub\n                                  (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                                )\n                              )\n                              nil\n                            )\n                          )\n                          Div\n                          (Constant i2 None)\n                        )\n                        Div\n                        (Name &a:0 Load)\n                      )\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (UnaryOp USub (Name &b:0 Load))\n                            Sub\n                            (Call\n                              (Name g_sqrt Load)\n                              (list\n                                (BinOp\n                                  (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                  Sub\n                                  (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                                )\n                              )\n                              nil\n                            )\n                          )\n                          Div\n                          (Constant i2 None)\n                        )\n                        Div\n                        (Name &a:0 Load)\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &p2:0 Store))\n                  (Call\n                    (Name g_max Load)\n                    (list\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (UnaryOp USub (Name &b:0 Load))\n                            Add\n                            (Call\n                              (Name g_sqrt Load)\n                              (list\n                                (BinOp\n                                  (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                  Sub\n                                  (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                                )\n                              )\n                              nil\n                            )\n                          )\n                          Div\n                          (Constant i2 None)\n                        )\n                        Div\n                        (Name &a:0 Load)\n                      )\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (UnaryOp USub (Name &b:0 Load))\n                            Sub\n                            (Call\n                              (Name g_sqrt Load)\n                              (list\n                                (BinOp\n                                  (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                  Sub\n                                  (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                                )\n                              )\n                              nil\n                            )\n                          )\n                          Div\n                          (Constant i2 None)\n                        )\n                        Div\n                        (Name &a:0 Load)\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load)\n                        (list (Name &p1:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load)\n                        (list (Name &p2:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_* None)) i0)\n    (ImportFrom s_decimal (list (alias g_* None)) i0)\n    (Assign (list (Attribute (Call (Name g_getcontext Load) nil nil) s_prec Store)) (Constant i10 None) None)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (List\n        (list\n          (Call (Name g_int Load) (list (Name &a:0 Load)) nil)\n          (Call (Name g_int Load) (list (Name &b:0 Load)) nil)\n          (Call (Name g_int Load) (list (Name &c:0 Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (If\n                  (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None)))\n                  (/seq\n                    (Assign\n                      (list (Name &res1:0 Store))\n                      (BinOp\n                        (BinOp\n                          (UnaryOp USub (Name &b:0 Load))\n                          Add\n                          (Call (Name g_sqrt Load) (list (Name &d:0 Load)) nil)\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                      None\n                    )\n                    (Assign\n                      (list (Name &res2:0 Store))\n                      (BinOp\n                        (BinOp\n                          (UnaryOp USub (Name &b:0 Load))\n                          Sub\n                          (Call (Name g_sqrt Load) (list (Name &d:0 Load)) nil)\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                      None\n                    )\n                    (If\n                      (Compare (Name &res1:0 Load) (list Eq) (list (Name &res2:0 Load)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &res1:0 Load)))\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (If\n                          (Compare (Name &res1:0 Load) (list Lt) (list (Name &res2:0 Load)))\n                          (/seq\n                            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &res1:0 Load)))\n                                nil\n                              )\n                            )\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &res2:0 Load)))\n                                nil\n                              )\n                            )\n                          )\n                          (/seq\n                            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &res2:0 Load)))\n                                nil\n                              )\n                            )\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &res1:0 Load)))\n                                nil\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &res1:0 Store))\n                      (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))\n                      None\n                    )\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &res1:0 Load)))\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &A:0 Load) (list Lt) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store))\n          (Tuple\n            (list (UnaryOp USub (Name &A:0 Load)) (UnaryOp USub (Name &B:0 Load)) (UnaryOp USub (Name &C:0 Load)))\n            Load\n          )\n          None\n        )\n      )\n      nil\n    )\n    (If\n      (Compare (Name &A:0 Load) (list NotEq) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Name &some_num:0 Store))\n          (BinOp\n            (BinOp (BinOp (Name &B:0 Load) Mult (Name &B:0 Load)) Div (BinOp (Constant i4 None) Mult (Name &A:0 Load)))\n            Sub\n            (Name &C:0 Load)\n          )\n          None\n        )\n      )\n      nil\n    )\n    (If\n      (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &C:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq\n            (If\n              (Compare (Name &B:0 Load) (list NotEq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &C:0 Load)) Div (Name &B:0 Load))) nil)\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &some_num:0 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (UnaryOp\n                        USub\n                        (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &some_num:0 Load)) nil)\n                      )\n                      Sub\n                      (BinOp\n                        (Name &B:0 Load)\n                        Div\n                        (BinOp\n                          (Constant i2 None)\n                          Mult\n                          (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &A:0 Load)) nil)\n                        )\n                      )\n                    )\n                    Div\n                    (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &A:0 Load)) nil)\n                  )\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &some_num:0 Load)) nil)\n                      Sub\n                      (BinOp\n                        (Name &B:0 Load)\n                        Div\n                        (BinOp\n                          (Constant i2 None)\n                          Mult\n                          (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &A:0 Load)) nil)\n                        )\n                      )\n                    )\n                    Div\n                    (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &A:0 Load)) nil)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare\n                (UnaryOp USub (Constant f1e-08 None))\n                (list Lt Lt)\n                (list (Name &some_num:0 Load) (Constant f1e-08 None))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (UnaryOp USub (Name &B:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load))))\n                    nil\n                  )\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_float Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (BinOp\n                      (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                      Sub\n                      (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                    )\n                    (list Lt)\n                    (list (Constant i0 None))\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (Assign\n                      (list (Tuple (list (Name &a1:0 Store) (Name &a2:0 Store)) Store))\n                      (Tuple\n                        (list\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &b:0 Load))\n                              Add\n                              (BinOp\n                                (BinOp\n                                  (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                                  Sub\n                                  (BinOp (BinOp (Name &a:0 Load) Mult (Constant i4 None)) Mult (Name &c:0 Load))\n                                )\n                                Pow\n                                (Constant f0.5 None)\n                              )\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &b:0 Load))\n                              Sub\n                              (BinOp\n                                (BinOp\n                                  (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                                  Sub\n                                  (BinOp (BinOp (Name &a:0 Load) Mult (Constant i4 None)) Mult (Name &c:0 Load))\n                                )\n                                Pow\n                                (Constant f0.5 None)\n                              )\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                        )\n                        Load\n                      )\n                      None\n                    )\n                    (If\n                      (Compare (Name &a1:0 Load) (list Eq) (list (Name &a2:0 Load)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Call\n                                (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                                (list (Name &a1:0 Load))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Call\n                                (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load)\n                                (list (Call (Name g_min Load) (list (Name &a1:0 Load) (Name &a2:0 Load)) nil))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Call\n                                (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load)\n                                (list (Call (Name g_max Load) (list (Name &a1:0 Load) (Name &a2:0 Load)) nil))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                    Mod\n                    (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &d:0 Store))\n          (BinOp\n            (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                        Mod\n                        (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Assign\n                  (list (Name &l:0 Store))\n                  (List\n                    (list\n                      (BinOp\n                        (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                      (BinOp\n                        (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                    )\n                    Load\n                  )\n                  None\n                )\n                (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                        Mod\n                        (Subscript (Name &l:0 Load) (Constant i0 None) Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None)\n                        Mod\n                        (Subscript (Name &l:0 Load) (Constant i1 None) Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &data:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Subscript (Name &data:0 Load) (Constant i0 None) Load) None)\n    (Assign (list (Name &b:0 Store)) (Subscript (Name &data:0 Load) (Constant i1 None) Load) None)\n    (Assign (list (Name &c:0 Store)) (Subscript (Name &data:0 Load) (Constant i2 None) Load) None)\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (BinOp\n                      (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                      Sub\n                      (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                    )\n                    (list Lt)\n                    (list (Constant i0 None))\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (Assign\n                      (list (Name &ans1:0 Store))\n                      (BinOp\n                        (BinOp\n                          (UnaryOp USub (Name &b:0 Load))\n                          Add\n                          (Call\n                            (Attribute (Name g_math Load) s_sqrt Load)\n                            (list\n                              (BinOp\n                                (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                Sub\n                                (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                      None\n                    )\n                    (Assign\n                      (list (Name &ans2:0 Store))\n                      (BinOp\n                        (BinOp\n                          (UnaryOp USub (Name &b:0 Load))\n                          Sub\n                          (Call\n                            (Attribute (Name g_math Load) s_sqrt Load)\n                            (list\n                              (BinOp\n                                (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                Sub\n                                (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                      None\n                    )\n                    (If\n                      (Compare (Name &ans1:0 Load) (list Eq) (list (Name &ans2:0 Load)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr (Call (Name g_print Load) (list (Name &ans1:0 Load)) nil))\n                      )\n                      (/seq\n                        (Assign\n                          (list (Name &answers:0 Store))\n                          (List (list (Name &ans1:0 Load) (Name &ans2:0 Load)) Load)\n                          None\n                        )\n                        (Expr (Call (Attribute (Name &answers:0 Load) s_sort Load) nil nil))\n                        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (Subscript (Name &answers:0 Load) (Constant i0 None) Load))\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (Subscript (Name &answers:0 Load) (Constant i1 None) Load))\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_time None)))\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_os None)))\n    (ImportFrom s_math (list (alias g_gcd None) (alias g_floor None) (alias g_sqrt None) (alias g_log None)) i0)\n    (Assign (list (Name &start_time:0 Store)) (Call (Attribute (Name g_time Load) s_time Load) nil nil) None)\n    (FunctionDef\n      &iin:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sin:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &listin:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Name g_int Load)\n                  (Call\n                    (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n                    nil\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &liststr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Name g_str Load)\n                  (Call\n                    (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load)\n                    nil\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ceill:0\n      (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (IfExp\n            (Compare (Name &x:1 Load) (list Eq) (list (Call (Name g_int Load) (list (Name &x:1 Load)) nil)))\n            (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n            (BinOp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) Add (Constant i1 None))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ceilldiv:0\n      (arguments nil (list (arg &x:2 None None) (arg &d:2 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (IfExp\n            (Compare (BinOp (Name &x:2 Load) Mod (Name &d:2 Load)) (list Eq) (list (Constant i0 None)))\n            (BinOp (Name &x:2 Load) FloorDiv (Name &d:2 Load))\n            (BinOp (BinOp (Name &x:2 Load) FloorDiv (Name &d:2 Load)) Add (Constant i1 None))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &LCM:0\n      (arguments nil (list (arg &a:3 None None) (arg &b:3 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp (Name &a:3 Load) Mult (Name &b:3 Load))\n            FloorDiv\n            (Call (Name g_gcd Load) (list (Name &a:3 Load) (Name &b:3 Load)) nil)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:4 Store) (Name &b:4 Store) (Name &c:4 Store)) Store))\n          (Call (Name &listin:0 Load) nil nil)\n          None\n        )\n        (If\n          (Compare (Name &a:4 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &b:4 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (If\n                  (Compare (Name &c:4 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)) (Return None))\n                  nil\n                )\n                (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))\n                (Return None)\n              )\n              nil\n            )\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Call\n                    (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                    (list (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:4 Load)) Div (Name &b:4 Load)))\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            (Return None)\n          )\n          nil\n        )\n        (Assign\n          (list (Name &d:4 Store))\n          (BinOp\n            (BinOp (Name &b:4 Load) Pow (Constant i2 None))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:4 Load)) Mult (Name &c:4 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:4 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Return None))\n          nil\n        )\n        (Assign (list (Name &x:4 Store)) (Call (Name g_set Load) nil nil) None)\n        (Expr\n          (Call\n            (Attribute (Name &x:4 Load) s_add Load)\n            (list\n              (BinOp\n                (BinOp\n                  (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:4 Load))\n                  Sub\n                  (Call (Name g_sqrt Load) (list (Name &d:4 Load)) nil)\n                )\n                Div\n                (BinOp (Constant i2 None) Mult (Name &a:4 Load))\n              )\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &x:4 Load) s_add Load)\n            (list\n              (BinOp\n                (BinOp\n                  (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:4 Load))\n                  Add\n                  (Call (Name g_sqrt Load) (list (Name &d:4 Load)) nil)\n                )\n                Div\n                (BinOp (Constant i2 None) Mult (Name &a:4 Load))\n              )\n            )\n            nil\n          )\n        )\n        (Assign (list (Name &x:4 Store)) (Call (Name g_list Load) (list (Name &x:4 Load)) nil) None)\n        (Expr (Call (Attribute (Name &x:4 Load) s_sort Load) nil nil))\n        (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &x:4 Load)) nil)) nil))\n        (For\n          (Name &i:4 Store)\n          (Name &x:4 Load)\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Call\n                    (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                    (list (Name &i:4 Load))\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &hula:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq (Expr (Call (Name &solve:0 Load) nil nil)))\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Attribute (Name g_sys Load) s_stderr Load) s_write Load)\n        (list\n          (Call\n            (Name g_str Load)\n            (list (BinOp (Call (Attribute (Name g_time Load) s_time Load) nil nil) Sub (Name &start_time:0 Load)))\n            nil\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_float Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n        Sub\n        (BinOp (BinOp (Constant f4.0 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Expr (Call (Name g_exit Load) nil nil)))\n      nil\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      nil\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Expr (Call (Name g_exit Load) nil nil)))\n      nil\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load)\n                (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      nil\n    )\n    (Assign\n      (list (Name &x1:0 Store))\n      (BinOp\n        (BinOp\n          (UnaryOp USub (Name &b:0 Load))\n          Add\n          (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n        )\n        Div\n        (BinOp (Constant f2.0 None) Mult (Name &a:0 Load))\n      )\n      None\n    )\n    (Assign\n      (list (Name &x2:0 Store))\n      (BinOp\n        (BinOp\n          (UnaryOp USub (Name &b:0 Load))\n          Sub\n          (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n        )\n        Div\n        (BinOp (Constant f2.0 None) Mult (Name &a:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &x1:0 Load) (list Eq) (list (Name &x2:0 Load)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load)\n                (list (Name &x1:0 Load))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      nil\n    )\n    (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n    (If\n      (Compare (Name &x1:0 Load) (list Lt) (list (Name &x2:0 Load)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load)\n                (list (Name &x1:0 Load))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load)\n                (list (Name &x2:0 Load))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load)\n                (list (Name &x2:0 Load))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load)\n                (list (Name &x1:0 Load))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_math None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (FunctionDef\n      &inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &inlt:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Assign (list (Name &q:0 Store)) (Call (Name &inlt:0 Load) nil nil) None)\n        (Assign (list (Name &a:0 Store)) (Subscript (Name &q:0 Load) (Constant i0 None) Load) None)\n        (Assign (list (Name &b:0 Store)) (Subscript (Name &q:0 Load) (Constant i1 None) Load) None)\n        (Assign (list (Name &c:0 Store)) (Subscript (Name &q:0 Load) (Constant i2 None) Load) None)\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n              (/seq\n                (If\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load)\n                            (list\n                              (BinOp\n                                (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load))\n                                Div\n                                (Name &b:0 Load)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &d:0 Store))\n              (BinOp\n                (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                Sub\n                (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n              )\n              None\n            )\n            (If\n              (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil))\n                (Assign\n                  (list (Name &bb:0 Store))\n                  (List\n                    (list\n                      (BinOp\n                        (BinOp\n                          (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load))\n                          Add\n                          (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                      (BinOp\n                        (BinOp\n                          (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load))\n                          Sub\n                          (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                    )\n                    Load\n                  )\n                  None\n                )\n                (Expr (Call (Attribute (Name &bb:0 Load) s_sort Load) nil nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load)\n                        (list (Subscript (Name &bb:0 Load) (Constant i0 None) Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load)\n                        (list (Subscript (Name &bb:0 Load) (Constant i1 None) Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load)\n                            (list\n                              (BinOp\n                                (UnaryOp USub (Name &b:0 Load))\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &D:0 Store))\n      (Call\n        (Name g_int Load)\n        (list\n          (BinOp\n            (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None)))\n              (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n            (If\n              (Compare\n                (BinOp\n                  (UnaryOp USub (BinOp (Name &b:0 Load) Add (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))))\n                  Div\n                  (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                )\n                (list Lt)\n                (list\n                  (BinOp\n                    (UnaryOp USub (BinOp (Name &b:0 Load) Sub (BinOp (Name &D:0 Load) Mult (Constant f0.5 None))))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (UnaryOp USub (BinOp (Name &b:0 Load) Add (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))))\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (UnaryOp USub (BinOp (Name &b:0 Load) Sub (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))))\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (UnaryOp USub (BinOp (Name &b:0 Load) Sub (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))))\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (UnaryOp USub (BinOp (Name &b:0 Load) Add (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))))\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None)))\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Name g_int Load)\n                        (list\n                          (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                      (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))\n                        (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                      )\n                    )\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:3 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:3 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &number_solutions:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &d:1 Store))\n          (BinOp\n            (BinOp (Name &b:1 Load) Pow (Constant i2 None))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:1 Load)) Mult (Name &c:1 Load))\n          )\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c:1 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Return (Constant i0 None)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &c:1 Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n              (/seq (Return (UnaryOp USub (Constant i1 None))))\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None)))\n                      (Compare (Name &b:1 Load) (list NotEq) (list (Constant i0 None)))\n                    )\n                  )\n                  (/seq (Return (Constant i1 None)))\n                  (/seq\n                    (If\n                      (Compare (Name &d:1 Load) (list Gt) (list (Constant i0 None)))\n                      (/seq (Return (Constant i2 None)))\n                      (/seq\n                        (If\n                          (Compare (Name &d:1 Load) (list Eq) (list (Constant i0 None)))\n                          (/seq (Return (Constant i1 None)))\n                          (/seq (Return (Constant i0 None)))\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &quadratic:0\n      (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &ans:2 Store)) (List nil Load) None)\n        (If\n          (Compare (Name &a:2 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &ans:2 Load) s_append Load)\n                (list (BinOp (UnaryOp USub (Name &c:2 Load)) Div (Name &b:2 Load)))\n                nil\n              )\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &ans:2 Load) s_append Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:2 Load))\n                      Add\n                      (Call\n                        (Name g_sqrt Load)\n                        (list\n                          (BinOp\n                            (BinOp (Name &b:2 Load) Pow (Constant i2 None))\n                            Sub\n                            (BinOp (BinOp (Constant i4 None) Mult (Name &a:2 Load)) Mult (Name &c:2 Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:2 Load))\n                  )\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Attribute (Name &ans:2 Load) s_append Load)\n                (list\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:2 Load))\n                      Sub\n                      (Call\n                        (Name g_sqrt Load)\n                        (list\n                          (BinOp\n                            (BinOp (Name &b:2 Load) Pow (Constant i2 None))\n                            Sub\n                            (BinOp (BinOp (Constant i4 None) Mult (Name &a:2 Load)) Mult (Name &c:2 Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:2 Load))\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n        (Return (Name &ans:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare\n        (Call (Name &number_solutions:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil)\n        (list Eq)\n        (list (UnaryOp USub (Constant i1 None)))\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (Compare\n            (Call (Name &number_solutions:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n            (For\n              (Name &q:0 Store)\n              (Call\n                (Name g_sorted Load)\n                (list (Call (Name &quadratic:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil))\n                nil\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                        (list (Name &q:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n          )\n          (/seq\n            (If\n              (Compare\n                (Call (Name &number_solutions:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil)\n                (list Eq)\n                (list (Constant i1 None))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                        (list\n                          (Subscript\n                            (Call\n                              (Name &quadratic:0 Load)\n                              (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load))\n                              nil\n                            )\n                            (Constant i0 None)\n                            Load\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (FunctionDef\n      &equation:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &a:1 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &d:1 Store))\n              (BinOp\n                (BinOp (Name &b:1 Load) Pow (Constant i2 None))\n                Sub\n                (BinOp (BinOp (Constant i4 None) Mult (Name &a:1 Load)) Mult (Name &c:1 Load))\n              )\n              None\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &d:1 Load) (list Gt) (list (Constant i0 None)))\n                  (Compare (Name &a:1 Load) (list Gt) (list (Constant i0 None)))\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &x1:1 Store))\n                  (BinOp\n                    (BinOp (UnaryOp USub (Name &b:1 Load)) Sub (Call (Name g_sqrt Load) (list (Name &d:1 Load)) nil))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:1 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &x2:1 Store))\n                  (BinOp\n                    (BinOp (UnaryOp USub (Name &b:1 Load)) Add (Call (Name g_sqrt Load) (list (Name &d:1 Load)) nil))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:1 Load))\n                  )\n                  None\n                )\n                (Return (Tuple (list (Constant i2 None) (Name &x1:1 Load) (Name &x2:1 Load)) Load))\n              )\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare (Name &d:1 Load) (list Gt) (list (Constant i0 None)))\n                      (Compare (Name &a:1 Load) (list Lt) (list (Constant i0 None)))\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &x1:1 Store))\n                      (BinOp\n                        (BinOp\n                          (UnaryOp USub (Name &b:1 Load))\n                          Add\n                          (Call (Name g_sqrt Load) (list (Name &d:1 Load)) nil)\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:1 Load))\n                      )\n                      None\n                    )\n                    (Assign\n                      (list (Name &x2:1 Store))\n                      (BinOp\n                        (BinOp\n                          (UnaryOp USub (Name &b:1 Load))\n                          Sub\n                          (Call (Name g_sqrt Load) (list (Name &d:1 Load)) nil)\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:1 Load))\n                      )\n                      None\n                    )\n                    (Return (Tuple (list (Constant i2 None) (Name &x1:1 Load) (Name &x2:1 Load)) Load))\n                  )\n                  (/seq\n                    (If\n                      (Compare (Name &d:1 Load) (list Eq) (list (Constant i0 None)))\n                      (/seq\n                        (Assign\n                          (list (Name &x:1 Store))\n                          (BinOp (UnaryOp USub (Name &b:1 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load)))\n                          None\n                        )\n                        (Return (Tuple (list (Constant i1 None) (Name &x:1 Load)) Load))\n                      )\n                      (/seq (Return (List (list (Constant i0 None)) Load)))\n                    )\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &b:1 Load) (list Eq Eq) (list (Name &c:1 Load) (Constant i0 None)))\n              (/seq (Return (List (list (UnaryOp USub (Constant i1 None))) Load)))\n              (/seq\n                (If\n                  (Compare (Name &b:1 Load) (list NotEq) (list (Constant i0 None)))\n                  (/seq\n                    (Assign (list (Name &x:1 Store)) (BinOp (UnaryOp USub (Name &c:1 Load)) Div (Name &b:1 Load)) None)\n                    (Return (Tuple (list (Constant i1 None) (Name &x:1 Load)) Load))\n                  )\n                  (/seq (Return (List (list (Constant i0 None)) Load)))\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:2 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Starred (Call (Name &equation:0 Load) (list (Name &A:0 Load) (Name &B:0 Load) (Name &C:0 Load)) nil) Load)\n        )\n        (list (keyword s_sep (Constant s-WzEwXQ== None)))\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &D:0 Store))\n      (BinOp\n        (BinOp (Name &B:0 Load) Mult (Name &B:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &A:0 Load)) Mult (Name &C:0 Load))\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &C:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &C:0 Load)) Div (Name &B:0 Load)) None)\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA1MywgNDYsIDUzLCAxMDJd None) Mod (Name &x:0 Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                        (Assign\n                          (list (Name &x1:0 Store))\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &B:0 Load))\n                              Add\n                              (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &D:0 Load)) nil)\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                          )\n                          None\n                        )\n                        (Assign\n                          (list (Name &x2:0 Store))\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &B:0 Load))\n                              Sub\n                              (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &D:0 Load)) nil)\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                          )\n                          None\n                        )\n                        (If\n                          (Compare (Name &x1:0 Load) (list Lt) (list (Name &x2:0 Load)))\n                          (/seq\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA1MywgNDYsIDUzLCAxMDJd None) Mod (Name &x1:0 Load)))\n                                nil\n                              )\n                            )\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA1MywgNDYsIDUzLCAxMDJd None) Mod (Name &x2:0 Load)))\n                                nil\n                              )\n                            )\n                          )\n                          (/seq\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA1MywgNDYsIDUzLCAxMDJd None) Mod (Name &x2:0 Load)))\n                                nil\n                              )\n                            )\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA1MywgNDYsIDUzLCAxMDJd None) Mod (Name &x1:0 Load)))\n                                nil\n                              )\n                            )\n                          )\n                        )\n                        (Expr\n                          (Constant\n                            s-WzExOCwgMTIxLCAxMTgsIDExMSwgMTAwLCAxMjAsIDQ5LCA2MSwgMzksIDM3LCA1MywgNDYsIDUzLCAxMDIsIDM5LCAzNywgMTIwLCA0OSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMTgsIDEyMSwgMTE4LCAxMTEsIDEwMCwgMTIwLCA1MCwgNjEsIDM5LCAzNywgNTMsIDQ2LCA1MywgMTAyLCAzOSwgMzcsIDEyMCwgNTBd\n                            None\n                          )\n                        )\n                        (Expr\n                          (Constant\n                            s-WzExMiwgMTE0LCAxMDUsIDExMCwgMTE2LCA0MCwgMTE4LCAxMjEsIDExOCwgMTExLCAxMDAsIDEyMCwgNDksIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDExMiwgMTE0LCAxMDUsIDExMCwgMTE2LCA0MCwgMTE4LCAxMjEsIDExOCwgMTExLCAxMDAsIDEyMCwgNTAsIDQxXQ==\n                            None\n                          )\n                        )\n                      )\n                      (/seq\n                        (If\n                          (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None)))\n                          (/seq\n                            (Assign\n                              (list (Name &x:0 Store))\n                              (BinOp\n                                (UnaryOp USub (Name &B:0 Load))\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                              )\n                              None\n                            )\n                            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA1MywgNDYsIDUzLCAxMDJd None) Mod (Name &x:0 Load)))\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (FunctionDef\n      &solve_const:0\n      (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &x:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &solve_lineal:0\n      (arguments nil (list (arg &x:2 None None) (arg &y:2 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &y:2 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &y:2 Load)) Div (Name &x:2 Load))) nil))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &solve_square:0\n      (arguments nil (list (arg &x:3 None None) (arg &y:3 None None) (arg &z:3 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &d:3 Store))\n          (BinOp\n            (BinOp (Name &y:3 Load) Mult (Name &y:3 Load))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &x:3 Load)) Mult (Name &z:3 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:3 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &d:3 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Assign\n                  (list (Name &x1:3 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &y:3 Load))\n                      Add\n                      (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:3 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &x:3 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &x2:3 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &y:3 Load))\n                      Sub\n                      (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:3 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &x:3 Load))\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Call (Name g_min Load) (list (Name &x1:3 Load) (Name &x2:3 Load)) nil))\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Call (Name g_max Load) (list (Name &x1:3 Load) (Name &x2:3 Load)) nil))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (UnaryOp USub (Name &y:3 Load)) Div (BinOp (Constant i2 None) Mult (Name &x:3 Load))))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name &solve_const:0 Load) (list (Name &c:0 Load)) nil)))\n          (/seq (Expr (Call (Name &solve_lineal:0 Load) (list (Name &b:0 Load) (Name &c:0 Load)) nil)))\n        )\n      )\n      (/seq (Expr (Call (Name &solve_square:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (IfExp (Name &c:0 Load) (Constant s_0 None) (Constant s-WzQ1LCA0OV0= None)))\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (Constant s_1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))\n                (list (keyword s_sep (Constant s-WzEwXQ== None)))\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &d:0 Store) (Name &x:0 Store)) Store))\n              (Tuple\n                (list\n                  (BinOp\n                    (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                    Sub\n                    (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                  )\n                  (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n              (/seq\n                (If\n                  (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (Constant s_1 None) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &x:0 Load)))\n                        (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &r:0 Store))\n                      (Call\n                        (Name g_sorted Load)\n                        (list\n                          (Tuple\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:0 Load))\n                                  Add\n                                  (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (Name &x:0 Load)\n                              )\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:0 Load))\n                                  Sub\n                                  (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (Name &x:0 Load)\n                              )\n                            )\n                            Load\n                          )\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Constant s_2 None)\n                          (Subscript (Name &r:0 Load) (Constant i0 None) Load)\n                          (Subscript (Name &r:0 Load) (Constant i1 None) Load)\n                        )\n                        (list (keyword s_sep (Constant s-WzEwXQ== None)))\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)\n                )\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &disc:0 Store))\n              (BinOp\n                (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                Sub\n                (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n              )\n              None\n            )\n            (Assign (list (Name &denom:0 Store)) (BinOp (Constant i2 None) Mult (Name &a:0 Load)) None)\n            (If\n              (Compare (Name &disc:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &denom:0 Load))) nil)\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &disc:0 Load) (list Lt) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                    (If\n                      (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None)))\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:0 Load))\n                                  Sub\n                                  (BinOp (Name &disc:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (Name &denom:0 Load)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:0 Load))\n                                  Add\n                                  (BinOp (Name &disc:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (Name &denom:0 Load)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:0 Load))\n                                  Add\n                                  (BinOp (Name &disc:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (Name &denom:0 Load)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:0 Load))\n                                  Sub\n                                  (BinOp (Name &disc:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (Name &denom:0 Load)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None)))\n      (/seq\n        (Assign (list (Name &a:0 Store)) (UnaryOp USub (Name &a:0 Load)) None)\n        (Assign (list (Name &b:0 Store)) (UnaryOp USub (Name &b:0 Load)) None)\n        (Assign (list (Name &c:0 Store)) (UnaryOp USub (Name &c:0 Load)) None)\n      )\n      nil\n    )\n    (Assign\n      (list (Name &x:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (JoinedStr\n                    (list\n                      (FormattedValue\n                        (BinOp (BinOp (UnaryOp USub (Name &c:0 Load)) Mult (Constant f1.0 None)) Div (Name &b:0 Load))\n                        i-1\n                        (JoinedStr (list (Constant s_.7f None)))\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (JoinedStr\n                    (list\n                      (FormattedValue\n                        (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                        i-1\n                        (JoinedStr (list (Constant s_.7f None)))\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (ImportFrom s_math (list (alias &sqrt:0 None)) i0)\n                (Assign (list (Name &x:0 Store)) (Call (Name &sqrt:0 Load) (list (Name &x:0 Load)) nil) None)\n                (Assign\n                  (list (Name &a1:0 Store))\n                  (BinOp\n                    (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Name &x:0 Load))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &a2:0 Store))\n                  (BinOp\n                    (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &x:0 Load))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (JoinedStr (list (FormattedValue (Name &a1:0 Load) i-1 (JoinedStr (list (Constant s_.7f None))))))\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (JoinedStr (list (FormattedValue (Name &a2:0 Load) i-1 (JoinedStr (list (Constant s_.7f None))))))\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &X:0 Store))\n      (BinOp\n        (BinOp (Name &B:0 Load) Mult (Name &B:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &A:0 Load)) Mult (Name &C:0 Load))\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &C:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                        (list (BinOp (UnaryOp USub (Name &C:0 Load)) Div (Name &B:0 Load)) (Constant i6 None))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &X:0 Load) (list Lt) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare (Name &X:0 Load) (list Eq) (list (Constant i0 None)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Call\n                                (Attribute\n                                  (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None)\n                                  s_format\n                                  Load\n                                )\n                                (list\n                                  (BinOp\n                                    (UnaryOp USub (Name &B:0 Load))\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                        (Assign\n                          (list (Name &ans:0 Store))\n                          (Call\n                            (Name g_sorted Load)\n                            (list\n                              (List\n                                (list\n                                  (BinOp\n                                    (UnaryOp\n                                      USub\n                                      (BinOp\n                                        (Name &B:0 Load)\n                                        Add\n                                        (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &X:0 Load)) nil)\n                                      )\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                                  )\n                                  (BinOp\n                                    (UnaryOp\n                                      USub\n                                      (BinOp\n                                        (Name &B:0 Load)\n                                        Sub\n                                        (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &X:0 Load)) nil)\n                                      )\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                                  )\n                                )\n                                Load\n                              )\n                            )\n                            nil\n                          )\n                          None\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Call\n                                (Attribute\n                                  (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None)\n                                  s_format\n                                  Load\n                                )\n                                (list (Subscript (Name &ans:0 Load) (Constant i0 None) Load))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Call\n                                (Attribute\n                                  (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None)\n                                  s_format\n                                  Load\n                                )\n                                (list (Subscript (Name &ans:0 Load) (Constant i1 None) Load))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &R:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call (Name &R:0 Load) nil nil)\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n      (/seq\n        (If\n          (Compare\n            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n            (list Lt)\n            (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (If\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (UnaryOp USub (BinOp (Name &c:0 Load) Div (Name &b:0 Load))))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &d:0 Store))\n                  (BinOp\n                    (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                    Sub\n                    (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &r1:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Add\n                      (Call (Name g_pow Load) (list (Name &d:0 Load) (Constant f0.5 None)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &r2:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Sub\n                      (Call (Name g_pow Load) (list (Name &d:0 Load) (Constant f0.5 None)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &r1:0 Load) (list Eq) (list (Name &r2:0 Load)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (Call (Name g_min Load) (list (Name &r1:0 Load) (Name &r2:0 Load)) nil))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (Call (Name g_min Load) (list (Name &r1:0 Load) (Name &r2:0 Load)) nil))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (Call (Name g_max Load) (list (Name &r1:0 Load) (Name &r2:0 Load)) nil))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n              Sub\n              (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n            )\n            (list GtE)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Assign\n              (list (Name &root1:0 Store))\n              (BinOp\n                (BinOp\n                  (UnaryOp USub (Name &b:0 Load))\n                  Add\n                  (BinOp\n                    (BinOp\n                      (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                      Sub\n                      (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                    )\n                    Pow\n                    (Constant f0.5 None)\n                  )\n                )\n                Div\n                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n              )\n              None\n            )\n            (Assign\n              (list (Name &root2:0 Store))\n              (BinOp\n                (BinOp\n                  (UnaryOp USub (Name &b:0 Load))\n                  Sub\n                  (BinOp\n                    (BinOp\n                      (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                      Sub\n                      (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                    )\n                    Pow\n                    (Constant f0.5 None)\n                  )\n                )\n                Div\n                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n              )\n              None\n            )\n            (Assign (list (Name &list:0 Store)) (List (list (Name &root1:0 Load) (Name &root2:0 Load)) Load) None)\n            (If\n              (Compare (Name &root1:0 Load) (list Eq) (list (Name &root2:0 Load)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr (Call (Name g_print Load) (list (Name &root1:0 Load)) nil))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (Name &list:0 Load)) nil)) nil))\n                (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Name &list:0 Load)) nil)) nil))\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n        )\n      )\n      nil\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n        (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))\n      )\n      nil\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              nil\n            )\n          )\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store) (Name &z:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (BinOp\n        (BinOp (Name &y:0 Load) Pow (Constant i2 None))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &x:0 Load)) Mult (Name &z:0 Load))\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &z:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &z:0 Load)) Div (Name &y:0 Load))) nil)\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (UnaryOp USub (Name &y:0 Load))\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &x:0 Load))\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                        (Assign (list (Name &y:0 Store)) (BinOp (Name &y:0 Load) Div (Name &x:0 Load)) None)\n                        (Assign\n                          (list (Name &a:0 Store))\n                          (BinOp (Name &a:0 Load) Div (BinOp (Name &x:0 Load) Pow (Constant i2 None)))\n                          None\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &y:0 Load))\n                                  Sub\n                                  (BinOp (Name &a:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (Constant i2 None)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &y:0 Load))\n                                  Add\n                                  (BinOp (Name &a:0 Load) Pow (Constant f0.5 None))\n                                )\n                                Div\n                                (Constant i2 None)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq\n                (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None)\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x:0 Load)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &d:0 Store))\n          (BinOp\n            (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n                (Expr\n                  (Call\n                    (Attribute (Name &ans:0 Load) s_append Load)\n                    (list\n                      (BinOp\n                        (BinOp\n                          (UnaryOp USub (Name &b:0 Load))\n                          Add\n                          (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &ans:0 Load) s_append Load)\n                    (list\n                      (BinOp\n                        (BinOp\n                          (UnaryOp USub (Name &b:0 Load))\n                          Sub\n                          (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Expr (Call (Attribute (Name &ans:0 Load) s_sort Load) nil nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                        Mod\n                        (Subscript (Name &ans:0 Load) (Constant i0 None) Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                        Mod\n                        (Subscript (Name &ans:0 Load) (Constant i1 None) Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &y:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Sub\n                      (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &y:0 Load)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Call\n                    (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                    (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (Assign\n                  (list (Name &d:0 Store))\n                  (BinOp\n                    (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                    Sub\n                    (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None)))\n                  (/seq\n                    (Assign\n                      (list (Name &x1:0 Store))\n                      (BinOp\n                        (BinOp\n                          (UnaryOp USub (Name &b:0 Load))\n                          Add\n                          (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                      None\n                    )\n                    (Assign\n                      (list (Name &x2:0 Store))\n                      (BinOp\n                        (BinOp\n                          (UnaryOp USub (Name &b:0 Load))\n                          Sub\n                          (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                      None\n                    )\n                    (If\n                      (Compare (Name &x1:0 Load) (list Gt) (list (Name &x2:0 Load)))\n                      (/seq\n                        (Assign\n                          (list (Tuple (list (Name &x1:0 Store) (Name &x2:0 Store)) Store))\n                          (Tuple (list (Name &x2:0 Load) (Name &x1:0 Load)) Load)\n                          None\n                        )\n                      )\n                      nil\n                    )\n                    (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (Name &x1:0 Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (Name &x2:0 Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n                      (/seq\n                        (Assign\n                          (list (Name &x:0 Store))\n                          (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                          None\n                        )\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Call\n                                (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                                (list (Name &x:0 Load))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store))\n      (Tuple\n        (list\n          (Call (Name g_float Load) (list (Name &A:0 Load)) nil)\n          (Call (Name g_float Load) (list (Name &B:0 Load)) nil)\n          (Call (Name g_float Load) (list (Name &C:0 Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &C:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                    Mod\n                    (BinOp (UnaryOp USub (Name &C:0 Load)) Div (Name &B:0 Load))\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &det:0 Store))\n              (BinOp\n                (BinOp (Name &B:0 Load) Mult (Name &B:0 Load))\n                Sub\n                (BinOp (BinOp (Constant i4 None) Mult (Name &A:0 Load)) Mult (Name &C:0 Load))\n              )\n              None\n            )\n            (If\n              (Compare (Name &det:0 Load) (list Lt) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (If\n                  (Compare (Name &det:0 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Assign\n                      (list (Name &x:0 Store))\n                      (BinOp (UnaryOp USub (Name &B:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load)))\n                      None\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x:0 Load)))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                    (Assign\n                      (list (Name &x1:0 Store))\n                      (BinOp\n                        (BinOp\n                          (UnaryOp USub (Name &B:0 Load))\n                          Add\n                          (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &det:0 Load)) nil)\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                      )\n                      None\n                    )\n                    (Assign\n                      (list (Name &x2:0 Store))\n                      (BinOp\n                        (BinOp\n                          (UnaryOp USub (Name &B:0 Load))\n                          Sub\n                          (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &det:0 Load)) nil)\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                      )\n                      None\n                    )\n                    (If\n                      (Compare (Name &x1:0 Load) (list Lt) (list (Name &x2:0 Load)))\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x1:0 Load)))\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x2:0 Load)))\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x2:0 Load)))\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x1:0 Load)))\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Name &c:0 Load) (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &a:0 Load) (list Eq Eq) (list (Name &b:0 Load) (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                    (list Eq)\n                    (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))\n                  )\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                        (list Gt)\n                        (list (BinOp (Name &b:0 Load) Pow (Constant i2 None)))\n                      )\n                      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                        (Assign\n                          (list (Name &x:0 Store))\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &b:0 Load))\n                              Add\n                              (Call\n                                (Name g_sqrt Load)\n                                (list\n                                  (BinOp\n                                    (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                    Sub\n                                    (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                          None\n                        )\n                        (Assign\n                          (list (Name &y:0 Store))\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &b:0 Load))\n                              Sub\n                              (Call\n                                (Name g_sqrt Load)\n                                (list\n                                  (BinOp\n                                    (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                                    Sub\n                                    (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                          None\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Call\n                                (Attribute\n                                  (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDU0LCAxMDIsIDEyNV0= None)\n                                  s_format\n                                  Load\n                                )\n                                (list (Call (Name g_min Load) (list (Name &x:0 Load) (Name &y:0 Load)) nil))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Call\n                                (Attribute\n                                  (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDU0LCAxMDIsIDEyNV0= None)\n                                  s_format\n                                  Load\n                                )\n                                (list (Call (Name g_max Load) (list (Name &x:0 Load) (Name &y:0 Load)) nil))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Name &a:0 Load)) nil) None)\n    (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (Name &b:0 Load)) nil) None)\n    (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (Name &c:0 Load)) nil) None)\n    (If\n      (BoolOp\n        Or\n        (list\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None)))\n              (Compare\n                (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                (list Lt)\n                (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))\n              )\n            )\n          )\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq Eq) (list (Name &b:0 Load) (Constant i0 None)))\n              (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n      (/seq\n        (If\n          (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Name &c:0 Load) (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                (Assign (list (Name &a1:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None)\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Call (Name g_format Load) (list (Name &a1:0 Load) (Constant s_.5f None)) nil))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &a1:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Sub\n                      (BinOp\n                        (BinOp\n                          (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                          Sub\n                          (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                        )\n                        Pow\n                        (Constant f0.5 None)\n                      )\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &a2:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Add\n                      (BinOp\n                        (BinOp\n                          (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                          Sub\n                          (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                        )\n                        Pow\n                        (Constant f0.5 None)\n                      )\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &a1:0 Load) (list Lt) (list (Name &a2:0 Load)))\n                  (/seq\n                    (Assign\n                      (list (Tuple (list (Name &a1:0 Store) (Name &a2:0 Store)) Store))\n                      (Tuple (list (Name &a2:0 Load) (Name &a1:0 Load)) Load)\n                      None\n                    )\n                  )\n                  nil\n                )\n                (If\n                  (Compare (Name &a1:0 Load) (list NotEq) (list (Name &a2:0 Load)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (Call (Name g_format Load) (list (Name &a2:0 Load) (Constant s_.5f None)) nil))\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (Call (Name g_format Load) (list (Name &a1:0 Load) (Constant s_.5f None)) nil))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (Call (Name g_format Load) (list (Name &a1:0 Load) (Constant s_.5f None)) nil))\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &__author__:0 Store)) (Constant s_linh None) None)\n    (Import (list (alias &math:0 None)))\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &n:1 Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign\n          (list (Name &A:1 Store))\n          (Call (Name g_int Load) (list (Subscript (Name &n:1 Load) (Constant i0 None) Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &B:1 Store))\n          (Call (Name g_int Load) (list (Subscript (Name &n:1 Load) (Constant i1 None) Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &C:1 Store))\n          (Call (Name g_int Load) (list (Subscript (Name &n:1 Load) (Constant i2 None) Load)) nil)\n          None\n        )\n        (If\n          (Compare (Name &A:1 Load) (list Eq Eq Eq) (list (Name &B:1 Load) (Name &C:1 Load) (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq\n            (If\n              (Compare (Name &A:1 Load) (list Eq Eq) (list (Name &B:1 Load) (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (If\n                  (Compare (Name &A:1 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load)\n                            (list (BinOp (UnaryOp USub (Name &C:1 Load)) Div (Name &B:1 Load)))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &delta:1 Store))\n                      (BinOp\n                        (BinOp (Name &B:1 Load) Pow (Constant i2 None))\n                        Sub\n                        (BinOp (BinOp (Constant i4 None) Mult (Name &A:1 Load)) Mult (Name &C:1 Load))\n                      )\n                      None\n                    )\n                    (If\n                      (Compare (Name &delta:1 Load) (list Lt) (list (Constant i0 None)))\n                      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                      (/seq\n                        (If\n                          (Compare (Name &delta:1 Load) (list Eq) (list (Constant i0 None)))\n                          (/seq\n                            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (Call\n                                    (Attribute\n                                      (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None)\n                                      s_format\n                                      Load\n                                    )\n                                    (list\n                                      (BinOp\n                                        (UnaryOp USub (Name &B:1 Load))\n                                        Div\n                                        (BinOp (Constant i2 None) Mult (Name &A:1 Load))\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          (/seq\n                            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                            (Assign\n                              (list (Name &x1:1 Store))\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &B:1 Load))\n                                  Sub\n                                  (Call (Attribute (Name &math:0 Load) s_sqrt Load) (list (Name &delta:1 Load)) nil)\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &A:1 Load))\n                              )\n                              None\n                            )\n                            (Assign\n                              (list (Name &x2:1 Store))\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &B:1 Load))\n                                  Add\n                                  (Call (Attribute (Name &math:0 Load) s_sqrt Load) (list (Name &delta:1 Load)) nil)\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &A:1 Load))\n                              )\n                              None\n                            )\n                            (If\n                              (Compare (Name &x1:1 Load) (list Lt) (list (Name &x2:1 Load)))\n                              (/seq\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (Call\n                                        (Attribute\n                                          (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTAsIDQ4LCAxMDIsIDEyNV0= None)\n                                          s_format\n                                          Load\n                                        )\n                                        (list (Name &x1:1 Load))\n                                        nil\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (Call\n                                        (Attribute\n                                          (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTAsIDQ4LCAxMDIsIDEyNV0= None)\n                                          s_format\n                                          Load\n                                        )\n                                        (list (Name &x2:1 Load))\n                                        nil\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                              )\n                              (/seq\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (Call\n                                        (Attribute\n                                          (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTAsIDQ4LCAxMDIsIDEyNV0= None)\n                                          s_format\n                                          Load\n                                        )\n                                        (list (Name &x2:1 Load))\n                                        nil\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (Call\n                                        (Attribute\n                                          (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTAsIDQ4LCAxMDIsIDEyNV0= None)\n                                          s_format\n                                          Load\n                                        )\n                                        (list (Name &x1:1 Load))\n                                        nil\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &delta:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &delta:0 Load) (list Lt) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n      (/seq\n        (If\n          (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &x1:0 Store))\n              (BinOp\n                (BinOp\n                  (UnaryOp USub (Name &b:0 Load))\n                  Add\n                  (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &delta:0 Load)) nil)\n                )\n                Div\n                (BinOp (Name &a:0 Load) Mult (Constant i2 None))\n              )\n              None\n            )\n            (Assign\n              (list (Name &x2:0 Store))\n              (BinOp\n                (BinOp\n                  (UnaryOp USub (Name &b:0 Load))\n                  Sub\n                  (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &delta:0 Load)) nil)\n                )\n                Div\n                (BinOp (Name &a:0 Load) Mult (Constant i2 None))\n              )\n              None\n            )\n            (If\n              (Compare (Name &delta:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x1:0 Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil))\n                (If\n                  (Compare (Name &x1:0 Load) (list Gt) (list (Name &x2:0 Load)))\n                  (/seq\n                    (Assign\n                      (list (Tuple (list (Name &x1:0 Store) (Name &x2:0 Store)) Store))\n                      (Tuple (list (Name &x2:0 Load) (Name &x1:0 Load)) Load)\n                      None\n                    )\n                  )\n                  nil\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x1:0 Load)))\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x2:0 Load)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None)\n                (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x:0 Load)))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None) (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:3 Store) (Name &b:3 Store) (Name &c:3 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &a:3 Load) (list Eq Eq Eq) (list (Name &b:3 Load) (Name &c:3 Load) (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq\n            (If\n              (Compare (Name &a:3 Load) (list Eq Eq) (list (Name &b:3 Load) (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (If\n                  (Compare (Name &a:3 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (BinOp\n                            (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                            Mod\n                            (BinOp (UnaryOp USub (Name &c:3 Load)) Div (Name &b:3 Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &d2:3 Store))\n                      (BinOp\n                        (BinOp (Name &b:3 Load) Mult (Name &b:3 Load))\n                        Sub\n                        (BinOp (BinOp (Constant i4 None) Mult (Name &a:3 Load)) Mult (Name &c:3 Load))\n                      )\n                      None\n                    )\n                    (If\n                      (Compare (Name &d2:3 Load) (list Lt) (list (Constant i0 None)))\n                      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                      (/seq\n                        (If\n                          (Compare (Name &d2:3 Load) (list Eq) (list (Constant i0 None)))\n                          (/seq\n                            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (BinOp\n                                    (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                                    Mod\n                                    (BinOp\n                                      (UnaryOp USub (Name &b:3 Load))\n                                      Div\n                                      (BinOp (Constant i2 None) Mult (Name &a:3 Load))\n                                    )\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          (/seq\n                            (Assign\n                              (list (Name &d:3 Store))\n                              (Call (Name g_sqrt Load) (list (Name &d2:3 Load)) nil)\n                              None\n                            )\n                            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                            (If\n                              (Compare (Name &a:3 Load) (list Gt) (list (Constant i0 None)))\n                              (/seq\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (BinOp\n                                        (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                                        Mod\n                                        (BinOp\n                                          (BinOp (UnaryOp USub (Name &b:3 Load)) Sub (Name &d:3 Load))\n                                          Div\n                                          (BinOp (Constant i2 None) Mult (Name &a:3 Load))\n                                        )\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (BinOp\n                                        (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                                        Mod\n                                        (BinOp\n                                          (BinOp (UnaryOp USub (Name &b:3 Load)) Add (Name &d:3 Load))\n                                          Div\n                                          (BinOp (Constant i2 None) Mult (Name &a:3 Load))\n                                        )\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                              )\n                              (/seq\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (BinOp\n                                        (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                                        Mod\n                                        (BinOp\n                                          (BinOp (UnaryOp USub (Name &b:3 Load)) Add (Name &d:3 Load))\n                                          Div\n                                          (BinOp (Constant i2 None) Mult (Name &a:3 Load))\n                                        )\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                                (Expr\n                                  (Call\n                                    (Name g_print Load)\n                                    (list\n                                      (BinOp\n                                        (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                                        Mod\n                                        (BinOp\n                                          (BinOp (UnaryOp USub (Name &b:3 Load)) Sub (Name &d:3 Load))\n                                          Div\n                                          (BinOp (Constant i2 None) Mult (Name &a:3 Load))\n                                        )\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:4 None None) (arg &file:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:4 Load) s__fd Store))\n              (Call (Attribute (Name &file:4 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:4 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:4 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:4 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:4 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:5 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:5 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:5 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:5 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:5 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:5 Store))\n                  (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:5 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:5 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:5 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:6 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:6 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:6 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:6 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:6 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:6 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:6 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:6 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:6 Store))\n                  (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:6 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:6 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:6 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:7 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:7 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:8 None None) (arg &file:8 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:8 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:9 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:9 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_* None)) i0)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Subscript (Name &a:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Subscript (Name &a:0 Load) (Constant i1 None) Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Subscript (Name &a:0 Load) (Constant i2 None) Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      nil\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Subscript (Name &a:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Subscript (Name &a:0 Load) (Constant i1 None) Load) (list NotEq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (BinOp\n                (UnaryOp USub (Subscript (Name &a:0 Load) (Constant i2 None) Load))\n                Div\n                (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Subscript (Name &a:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Subscript (Name &a:0 Load) (Constant i1 None) Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (BinOp\n                    (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n                    Mult\n                    (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n                  )\n                  Sub\n                  (BinOp\n                    (BinOp (Constant i4 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load))\n                    Mult\n                    (Subscript (Name &a:0 Load) (Constant i2 None) Load)\n                  )\n                )\n                (list Lt)\n                (list (Constant i0 None))\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n              (/seq\n                (If\n                  (Compare\n                    (BinOp\n                      (BinOp\n                        (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n                        Mult\n                        (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n                      )\n                      Sub\n                      (BinOp\n                        (BinOp (Constant i4 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load))\n                        Mult\n                        (Subscript (Name &a:0 Load) (Constant i2 None) Load)\n                      )\n                    )\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (BinOp\n                            (UnaryOp USub (Subscript (Name &a:0 Load) (Constant i1 None) Load))\n                            Div\n                            (BinOp (Constant i2 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Name g_min Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Subscript (Name &a:0 Load) (Constant i1 None) Load))\n                                  Add\n                                  (Call\n                                    (Name g_sqrt Load)\n                                    (list\n                                      (BinOp\n                                        (BinOp\n                                          (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n                                          Mult\n                                          (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n                                        )\n                                        Sub\n                                        (BinOp\n                                          (BinOp\n                                            (Constant i4 None)\n                                            Mult\n                                            (Subscript (Name &a:0 Load) (Constant i0 None) Load)\n                                          )\n                                          Mult\n                                          (Subscript (Name &a:0 Load) (Constant i2 None) Load)\n                                        )\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load))\n                              )\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Subscript (Name &a:0 Load) (Constant i1 None) Load))\n                                  Sub\n                                  (Call\n                                    (Name g_sqrt Load)\n                                    (list\n                                      (BinOp\n                                        (BinOp\n                                          (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n                                          Mult\n                                          (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n                                        )\n                                        Sub\n                                        (BinOp\n                                          (BinOp\n                                            (Constant i4 None)\n                                            Mult\n                                            (Subscript (Name &a:0 Load) (Constant i0 None) Load)\n                                          )\n                                          Mult\n                                          (Subscript (Name &a:0 Load) (Constant i2 None) Load)\n                                        )\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load))\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Name g_max Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Subscript (Name &a:0 Load) (Constant i1 None) Load))\n                                  Add\n                                  (Call\n                                    (Name g_sqrt Load)\n                                    (list\n                                      (BinOp\n                                        (BinOp\n                                          (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n                                          Mult\n                                          (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n                                        )\n                                        Sub\n                                        (BinOp\n                                          (BinOp\n                                            (Constant i4 None)\n                                            Mult\n                                            (Subscript (Name &a:0 Load) (Constant i0 None) Load)\n                                          )\n                                          Mult\n                                          (Subscript (Name &a:0 Load) (Constant i2 None) Load)\n                                        )\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load))\n                              )\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Subscript (Name &a:0 Load) (Constant i1 None) Load))\n                                  Sub\n                                  (Call\n                                    (Name g_sqrt Load)\n                                    (list\n                                      (BinOp\n                                        (BinOp\n                                          (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n                                          Mult\n                                          (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n                                        )\n                                        Sub\n                                        (BinOp\n                                          (BinOp\n                                            (Constant i4 None)\n                                            Mult\n                                            (Subscript (Name &a:0 Load) (Constant i0 None) Load)\n                                          )\n                                          Mult\n                                          (Subscript (Name &a:0 Load) (Constant i2 None) Load)\n                                        )\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load))\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Name &a:0 Load)\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n              Sub\n              (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n            )\n            (list Gt)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Call\n                    (Name g_min Load)\n                    (list\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (UnaryOp USub (Name &b:0 Load))\n                            Sub\n                            (Call\n                              (Attribute (Name g_math Load) s_sqrt Load)\n                              (list\n                                (BinOp\n                                  (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                                  Sub\n                                  (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                                )\n                              )\n                              nil\n                            )\n                          )\n                          Div\n                          (Constant i2 None)\n                        )\n                        Div\n                        (Name &a:0 Load)\n                      )\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (UnaryOp USub (Name &b:0 Load))\n                            Add\n                            (Call\n                              (Attribute (Name g_math Load) s_sqrt Load)\n                              (list\n                                (BinOp\n                                  (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                                  Sub\n                                  (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                                )\n                              )\n                              nil\n                            )\n                          )\n                          Div\n                          (Constant i2 None)\n                        )\n                        Div\n                        (Name &a:0 Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Call\n                    (Name g_max Load)\n                    (list\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (UnaryOp USub (Name &b:0 Load))\n                            Sub\n                            (Call\n                              (Attribute (Name g_math Load) s_sqrt Load)\n                              (list\n                                (BinOp\n                                  (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                                  Sub\n                                  (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                                )\n                              )\n                              nil\n                            )\n                          )\n                          Div\n                          (Constant i2 None)\n                        )\n                        Div\n                        (Name &a:0 Load)\n                      )\n                      (BinOp\n                        (BinOp\n                          (BinOp\n                            (UnaryOp USub (Name &b:0 Load))\n                            Add\n                            (Call\n                              (Attribute (Name g_math Load) s_sqrt Load)\n                              (list\n                                (BinOp\n                                  (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                                  Sub\n                                  (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                                )\n                              )\n                              nil\n                            )\n                          )\n                          Div\n                          (Constant i2 None)\n                        )\n                        Div\n                        (Name &a:0 Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                  Sub\n                  (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                )\n                (list Eq)\n                (list (Constant i0 None))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Name g_round Load)\n                        (list\n                          (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Constant i2 None)) Div (Name &a:0 Load))\n                          (Constant i5 None)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Name &b:0 Load)\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (IfExp (Name &c:0 Load) (Constant i0 None) (UnaryOp USub (Constant i1 None))))\n                nil\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (FunctionDef\n      &solver:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &d:1 Store))\n          (BinOp\n            (BinOp (Name &b:1 Load) Pow (Constant i2 None))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:1 Load)) Mult (Name &c:1 Load))\n          )\n          None\n        )\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:1 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None)\n                    Mod\n                    (BinOp (UnaryOp USub (Name &c:1 Load)) Div (Name &b:1 Load))\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &c:1 Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None)))\n                      (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None)))\n                      (Compare (Name &c:1 Load) (list NotEq) (list (Constant i0 None)))\n                    )\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare (Name &d:1 Load) (list Lt) (list (Constant i0 None)))\n                      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                      (/seq\n                        (If\n                          (BoolOp\n                            And\n                            (list\n                              (Compare (Name &d:1 Load) (list Eq) (list (Constant i0 None)))\n                              (Compare (Name &a:1 Load) (list NotEq) (list (Constant i0 None)))\n                            )\n                          )\n                          (/seq\n                            (Assign\n                              (list (Name &x1:1 Store))\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:1 Load))\n                                  Add\n                                  (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:1 Load)) nil)\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:1 Load))\n                              )\n                              None\n                            )\n                            (Assign\n                              (list (Name &x2:1 Store))\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:1 Load))\n                                  Sub\n                                  (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:1 Load)) nil)\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:1 Load))\n                              )\n                              None\n                            )\n                            (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x1:1 Load)))\n                                nil\n                              )\n                            )\n                          )\n                          (/seq\n                            (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil))\n                            (Assign\n                              (list (Name &x1:1 Store))\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:1 Load))\n                                  Add\n                                  (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:1 Load)) nil)\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:1 Load))\n                              )\n                              None\n                            )\n                            (Assign\n                              (list (Name &x2:1 Store))\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp USub (Name &b:1 Load))\n                                  Sub\n                                  (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:1 Load)) nil)\n                                )\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &a:1 Load))\n                              )\n                              None\n                            )\n                            (Assign\n                              (list (Tuple (list (Name &x1:1 Store) (Name &x2:1 Store)) Store))\n                              (Tuple\n                                (list\n                                  (Call (Name g_min Load) (list (Name &x1:1 Load) (Name &x2:1 Load)) nil)\n                                  (Call (Name g_max Load) (list (Name &x1:1 Load) (Name &x2:1 Load)) nil)\n                                )\n                                Load\n                              )\n                              None\n                            )\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x1:1 Load)))\n                                nil\n                              )\n                            )\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x2:1 Load)))\n                                nil\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Expr (Call (Name &solver:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &square:0 Store))\n          (BinOp\n            (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &square:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &square:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Assign (list (Name &term:0 Store)) (BinOp (Name &square:0 Load) Pow (Constant f0.5 None)) None)\n                (Assign\n                  (list (Name &roots:0 Store))\n                  (Call\n                    (Name g_sorted Load)\n                    (list\n                      (List\n                        (list\n                          (BinOp\n                            (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &term:0 Load))\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                          (BinOp\n                            (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Name &term:0 Load))\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                        )\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Subscript (Name &roots:0 Load) (Constant i0 None) Load)) nil))\n                (Expr (Call (Name g_print Load) (list (Subscript (Name &roots:0 Load) (Constant i1 None) Load)) nil))\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_re None)))\n    (Assign\n      (list (Name &arr:0 Store))\n      (Call\n        (Attribute (Name g_re Load) s_split Load)\n        (list (Constant s-WzMyXQ== None) (Call (Name g_input Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &A:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &arr:0 Load) (Constant i0 None) Load)) nil)\n      None\n    )\n    (Assign\n      (list (Name &B:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &arr:0 Load) (Constant i1 None) Load)) nil)\n      None\n    )\n    (Assign\n      (list (Name &C:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &arr:0 Load) (Constant i2 None) Load)) nil)\n      None\n    )\n    (Assign\n      (list (Name &dis:0 Store))\n      (BinOp\n        (BinOp (Name &B:0 Load) Mult (Name &B:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &A:0 Load)) Mult (Name &C:0 Load))\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &C:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &C:0 Load)) Div (Name &B:0 Load))) nil)\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &dis:0 Load) (list Lt) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare (Name &dis:0 Load) (list Eq) (list (Constant i0 None)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (UnaryOp USub (Name &B:0 Load))\n                                Div\n                                (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                        (If\n                          (Compare (Name &A:0 Load) (list Gt) (list (Constant i0 None)))\n                          (/seq\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &B:0 Load))\n                                      Sub\n                                      (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None))\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &B:0 Load))\n                                      Add\n                                      (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None))\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          (/seq\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &B:0 Load))\n                                      Add\n                                      (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None))\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (BinOp\n                                    (BinOp\n                                      (UnaryOp USub (Name &B:0 Load))\n                                      Sub\n                                      (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None))\n                                    )\n                                    Div\n                                    (BinOp (Constant i2 None) Mult (Name &A:0 Load))\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &R:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call (Name &R:0 Load) nil nil)\n      None\n    )\n    (If\n      (Name &b:0 Load)\n      (/seq\n        (Assign\n          (list (Name &t:0 Store))\n          (List (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) Load)\n          None\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &t:0 Store))\n          (List (list (UnaryOp USub (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) Load)\n          None\n        )\n      )\n    )\n    (If\n      (Name &a:0 Load)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &d:0 Store) (Name &x:0 Store)) Store))\n          (Tuple\n            (list\n              (BinOp\n                (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                Sub\n                (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n              )\n              (BinOp (UnaryOp USub (Constant i2 None)) Mult (Name &a:0 Load))\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Name &d:0 Load)\n          (/seq\n            (If\n              (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n              (/seq (Assign (list (Name &t:0 Store)) (List (list (Constant i0 None)) Load) None))\n              (/seq\n                (Assign\n                  (list (Name &t:0 Store))\n                  (BinOp\n                    (List (list (Constant i2 None)) Load)\n                    Add\n                    (Call\n                      (Name g_sorted Load)\n                      (list\n                        (List\n                          (list\n                            (BinOp\n                              (BinOp (Name &b:0 Load) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                              Div\n                              (Name &x:0 Load)\n                            )\n                            (BinOp\n                              (BinOp (Name &b:0 Load) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                              Div\n                              (Name &x:0 Load)\n                            )\n                          )\n                          Load\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  None\n                )\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &t:0 Store))\n              (List (list (Constant i1 None) (BinOp (Name &b:0 Load) Div (Name &x:0 Load))) Load)\n              None\n            )\n          )\n        )\n      )\n      nil\n    )\n    (If\n      (Compare (Call (Name g_len Load) (list (Name &t:0 Load)) nil) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Starred (Name &t:0 Load) Load)) nil)))\n      (/seq\n        (If\n          (Compare (Call (Name g_len Load) (list (Name &t:0 Load)) nil) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Subscript (Name &t:0 Load) (Constant i0 None) Load)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                    Mod\n                    (Subscript (Name &t:0 Load) (Constant i1 None) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Subscript (Name &t:0 Load) (Constant i0 None) Load)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                    Mod\n                    (Subscript (Name &t:0 Load) (Constant i1 None) Load)\n                  )\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None)\n                    Mod\n                    (Subscript (Name &t:0 Load) (Constant i2 None) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (IfExp\n        (Name &b:0 Load)\n        (List (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) Load)\n        (List (list (UnaryOp USub (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) Load)\n      )\n      None\n    )\n    (If\n      (Name &a:0 Load)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &d:0 Store) (Name &x:0 Store)) Store))\n          (Tuple\n            (list\n              (BinOp\n                (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n                Sub\n                (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n              )\n              (BinOp (UnaryOp USub (Constant i2 None)) Mult (Name &a:0 Load))\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Name &d:0 Load)\n          (/seq\n            (Assign\n              (list (Name &t:0 Store))\n              (IfExp\n                (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n                (List (list (Constant i0 None)) Load)\n                (BinOp\n                  (List (list (Constant i2 None)) Load)\n                  Add\n                  (Call\n                    (Name g_sorted Load)\n                    (list\n                      (List\n                        (list\n                          (BinOp\n                            (BinOp (Name &b:0 Load) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                            Div\n                            (Name &x:0 Load)\n                          )\n                          (BinOp\n                            (BinOp (Name &b:0 Load) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                            Div\n                            (Name &x:0 Load)\n                          )\n                        )\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              None\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &t:0 Store))\n              (List (list (Constant i1 None) (BinOp (Name &b:0 Load) Div (Name &x:0 Load))) Load)\n              None\n            )\n          )\n        )\n      )\n      nil\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &t:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Call\n                    (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                    (list (UnaryOp USub (BinOp (Name &c:0 Load) Div (Name &b:0 Load))))\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &delta:0 Store))\n              (BinOp\n                (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                Sub\n                (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n              )\n              None\n            )\n            (If\n              (Compare (Name &delta:0 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Assign\n                  (list (Name &x1:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Add\n                      (Call (Name g_sqrt Load) (list (Name &delta:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &x2:0 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:0 Load))\n                      Sub\n                      (Call (Name g_sqrt Load) (list (Name &delta:0 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &x1:0 Load) (list Gt) (list (Name &x2:0 Load)))\n                  (/seq\n                    (Assign\n                      (list (Tuple (list (Name &x1:0 Store) (Name &x2:0 Store)) Store))\n                      (Tuple (list (Name &x2:0 Load) (Name &x1:0 Load)) Load)\n                      None\n                    )\n                  )\n                  nil\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                        (list (Name &x1:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                        (list (Name &x2:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &delta:0 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Assign\n                      (list (Name &x1:0 Store))\n                      (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                      None\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                            (list (Name &x1:0 Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Name &nl:0 Store))\n      (Call\n        (Name g_list Load)\n        (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &nl:0 Load) (Constant i0 None) Load)) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &nl:0 Load) (Constant i1 None) Load)) nil)\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &nl:0 Load) (Constant i2 None) Load)) nil)\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          nil\n        )\n        (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      nil\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (BinOp\n                (Constant s-WzM3LCA0OSwgNDgsIDQ2LCA1MywgMTAyXQ== None)\n                Mod\n                (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      nil\n    )\n    (Assign\n      (list (Name &sqrt:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &sqrt:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (BinOp\n                (Constant s-WzM3LCA0OSwgNDgsIDQ2LCA1MywgMTAyXQ== None)\n                Mod\n                (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Constant i2 None)) Div (Name &a:0 Load))\n              )\n            )\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &sqrt:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n            (Assign\n              (list (Name &roots:0 Store))\n              (List\n                (list\n                  (BinOp\n                    (BinOp\n                      (BinOp\n                        (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &sqrt:0 Load)) nil)\n                        Sub\n                        (Name &b:0 Load)\n                      )\n                      Div\n                      (Constant i2 None)\n                    )\n                    Div\n                    (Name &a:0 Load)\n                  )\n                  (BinOp\n                    (BinOp\n                      (BinOp\n                        (UnaryOp USub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &sqrt:0 Load)) nil))\n                        Sub\n                        (Name &b:0 Load)\n                      )\n                      Div\n                      (Constant i2 None)\n                    )\n                    Div\n                    (Name &a:0 Load)\n                  )\n                )\n                Load\n              )\n              None\n            )\n            (Expr (Call (Attribute (Name &roots:0 Load) s_sort Load) nil nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA0OSwgNDgsIDQ2LCA1MywgMTAyXQ== None)\n                    Mod\n                    (Subscript (Name &roots:0 Load) (Constant i0 None) Load)\n                  )\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Constant s-WzM3LCA0OSwgNDgsIDQ2LCA1MywgMTAyXQ== None)\n                    Mod\n                    (Subscript (Name &roots:0 Load) (Constant i1 None) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &disc:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n              (Compare (Name &disc:0 Load) (list Lt) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &disc:0 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Constant i2 None)) Div (Name &a:0 Load))\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                    (Assign\n                      (list (Name &res:0 Store))\n                      (List\n                        (list\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &b:0 Load))\n                              Sub\n                              (Call (Name g_sqrt Load) (list (Name &disc:0 Load)) nil)\n                            )\n                            Div\n                            (BinOp (Constant f2.0 None) Mult (Name &a:0 Load))\n                          )\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &b:0 Load))\n                              Add\n                              (Call (Name g_sqrt Load) (list (Name &disc:0 Load)) nil)\n                            )\n                            Div\n                            (BinOp (Constant f2.0 None) Mult (Name &a:0 Load))\n                          )\n                        )\n                        Load\n                      )\n                      None\n                    )\n                    (Expr (Call (Attribute (Name &res:0 Load) s_sort Load) nil nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNTgsIDU1LCAxMDIsIDEyNV0= None) s_format Load)\n                            (list (Subscript (Name &res:0 Load) (Constant i0 None) Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNTgsIDU1LCAxMDIsIDEyNV0= None) s_format Load)\n                            (list (Subscript (Name &res:0 Load) (Constant i1 None) Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_collections None)))\n    (Import (list (alias g_random None)))\n    (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (Constant i30000 None)) nil))\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:1 Store) (Name &b:1 Store) (Name &c:1 Store)) Store))\n          (ListComp\n            (Call (Name g_float Load) (list (Name &it:2 Load)) nil)\n            (list\n              (comprehension\n                (Name &it:2 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (If\n          (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (If\n                  (Compare (Name &c:1 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n                        (list (Constant s-WzQ1LCA0OSwgMzIsIDEwXQ== None))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n                        (list (Constant s-WzQ4LCAzMiwgMTBd None))\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &x:1 Store))\n                  (BinOp (BinOp (Name &c:1 Load) Div (Name &b:1 Load)) Mult (UnaryOp USub (Constant f1.0 None)))\n                  None\n                )\n                (If\n                  (Compare (Name &x:1 Load) (list Eq) (list (UnaryOp USub (Constant f0.0 None))))\n                  (/seq (Assign (list (Name &x:1 Store)) (Constant f0.0 None) None))\n                  nil\n                )\n                (Expr\n                  (Call\n                    (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n                    (list\n                      (BinOp\n                        (Constant s-WzQ5LCAzMiwgMTAsIDM3LCA0NiwgNTMsIDEwMiwgMzIsIDEwXQ== None)\n                        Mod\n                        (Name &x:1 Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &a:1 Load) (list NotEq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &d:1 Store))\n                  (BinOp\n                    (BinOp (Name &b:1 Load) Mult (Name &b:1 Load))\n                    Sub\n                    (BinOp (BinOp (Constant i4 None) Mult (Name &a:1 Load)) Mult (Name &c:1 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &d:1 Load) (list Lt) (list (Constant i0 None)))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n                        (list (Constant s-WzQ4LCAxMF0= None))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare (Name &d:1 Load) (list Eq) (list (Constant i0 None)))\n                      (/seq\n                        (Assign\n                          (list (Name &x:1 Store))\n                          (BinOp (BinOp (UnaryOp USub (Name &b:1 Load)) Div (Constant i2 None)) Div (Name &a:1 Load))\n                          None\n                        )\n                        (Expr\n                          (Call\n                            (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n                            (list\n                              (BinOp\n                                (Constant s-WzQ5LCAzMiwgMTAsIDM3LCA0NiwgNTMsIDEwMiwgMzIsIDEwXQ== None)\n                                Mod\n                                (Name &x:1 Load)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (If\n                          (Compare (Name &d:1 Load) (list Gt) (list (Constant i0 None)))\n                          (/seq\n                            (Assign\n                              (list (Name &x1:1 Store))\n                              (BinOp\n                                (BinOp\n                                  (BinOp\n                                    (UnaryOp USub (Name &b:1 Load))\n                                    Add\n                                    (BinOp (Name &d:1 Load) Pow (Constant f0.5 None))\n                                  )\n                                  Div\n                                  (Constant i2 None)\n                                )\n                                Div\n                                (Name &a:1 Load)\n                              )\n                              None\n                            )\n                            (Assign\n                              (list (Name &x2:1 Store))\n                              (BinOp\n                                (BinOp\n                                  (BinOp\n                                    (UnaryOp USub (Name &b:1 Load))\n                                    Sub\n                                    (BinOp (Name &d:1 Load) Pow (Constant f0.5 None))\n                                  )\n                                  Div\n                                  (Constant i2 None)\n                                )\n                                Div\n                                (Name &a:1 Load)\n                              )\n                              None\n                            )\n                            (If\n                              (Compare (Name &x1:1 Load) (list Gt) (list (Name &x2:1 Load)))\n                              (/seq\n                                (Assign\n                                  (list (Tuple (list (Name &x1:1 Store) (Name &x2:1 Store)) Store))\n                                  (Tuple (list (Name &x2:1 Load) (Name &x1:1 Load)) Load)\n                                  None\n                                )\n                              )\n                              nil\n                            )\n                            (Expr\n                              (Call\n                                (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n                                (list\n                                  (BinOp\n                                    (Constant\n                                      s-WzUwLCAzMiwgMTAsIDM3LCA0NiwgNTMsIDEwMiwgMzIsIDEwLCAzNywgNDYsIDUzLCAxMDIsIDMyLCAxMF0=\n                                      None\n                                    )\n                                    Mod\n                                    (Tuple (list (Name &x1:1 Load) (Name &x2:1 Load)) Load)\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          nil\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                        (list (Name &c:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &x:0 Store))\n                  (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &b:0 Load))\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                        (list (Name &x:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (If\n                  (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                            (list (Name &c:0 Load))\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Name &x:0 Store))\n                      (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &a:0 Load))\n                      None\n                    )\n                    (If\n                      (Compare (Name &x:0 Load) (list Lt) (list (Constant i0 None)))\n                      (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Call\n                                (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                                (list (Name &x:0 Load))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &result:0 Store))\n                  (BinOp\n                    (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n                    Sub\n                    (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n                  )\n                  None\n                )\n                (If\n                  (Compare (Name &result:0 Load) (list Lt) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n                  (/seq\n                    (Assign\n                      (list (Name &x:0 Store))\n                      (BinOp\n                        (BinOp\n                          (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load))\n                          Sub\n                          (Call (Name g_sqrt Load) (list (Name &result:0 Load)) nil)\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                      None\n                    )\n                    (Assign\n                      (list (Name &y:0 Store))\n                      (BinOp\n                        (BinOp\n                          (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load))\n                          Add\n                          (Call (Name g_sqrt Load) (list (Name &result:0 Load)) nil)\n                        )\n                        Div\n                        (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                      )\n                      None\n                    )\n                    (If\n                      (Compare (Name &x:0 Load) (list Eq) (list (Name &y:0 Load)))\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (Call\n                                (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                                (list (Name &x:0 Load))\n                                nil\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                        (If\n                          (Compare (Name &x:0 Load) (list Lt) (list (Name &y:0 Load)))\n                          (/seq\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (Call\n                                    (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                                    (list (Name &x:0 Load))\n                                    nil\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (Call\n                                    (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                                    (list (Name &y:0 Load))\n                                    nil\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                          (/seq\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (Call\n                                    (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                                    (list (Name &y:0 Load))\n                                    nil\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                            (Expr\n                              (Call\n                                (Name g_print Load)\n                                (list\n                                  (Call\n                                    (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load)\n                                    (list (Name &x:0 Load))\n                                    nil\n                                  )\n                                )\n                                nil\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (If\n      (Name &a:0 Load)\n      (/seq\n        (Assign\n          (list (Name &d:0 Store))\n          (BinOp\n            (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Assign (list (Name &ans:0 Store)) (List (list (Constant i0 None)) Load) None))\n          (/seq\n            (If\n              (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &ans:0 Store))\n                  (List\n                    (list\n                      (Constant i1 None)\n                      (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))\n                    )\n                    Load\n                  )\n                  None\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &ans:0 Store))\n                  (BinOp\n                    (List (list (Constant i2 None)) Load)\n                    Add\n                    (Call\n                      (Name g_sorted Load)\n                      (list\n                        (List\n                          (list\n                            (BinOp\n                              (UnaryOp\n                                USub\n                                (BinOp (Name &b:0 Load) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                              )\n                              Div\n                              (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                            )\n                            (BinOp\n                              (UnaryOp\n                                USub\n                                (BinOp (Name &b:0 Load) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                              )\n                              Div\n                              (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                            )\n                          )\n                          Load\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  None\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Name &b:0 Load)\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (List (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) Load)\n              None\n            )\n          )\n          (/seq\n            (If\n              (Name &c:0 Load)\n              (/seq (Assign (list (Name &ans:0 Store)) (List (list (Constant i0 None)) Load) None))\n              (/seq (Assign (list (Name &ans:0 Store)) (List (list (UnaryOp USub (Constant i1 None))) Load) None))\n            )\n          )\n        )\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &dis:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &dis:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None)))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &dis:0 Load) (list Lt) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Name g_min Load)\n                        (list\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &b:0 Load))\n                              Sub\n                              (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None))\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &b:0 Load))\n                              Add\n                              (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None))\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &b:0 Load))\n                              Sub\n                              (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None))\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                          (BinOp\n                            (BinOp\n                              (UnaryOp USub (Name &b:0 Load))\n                              Add\n                              (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None))\n                            )\n                            Div\n                            (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                          )\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_sqrt None)) i0)\n    (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &y:0 Store)) (Call (Attribute (Name &x:0 Load) s_split Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &y:0 Load) (Constant i0 None) Load)) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &y:0 Load) (Constant i1 None) Load)) nil)\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call (Name g_int Load) (list (Subscript (Name &y:0 Load) (Constant i2 None) Load)) nil)\n      None\n    )\n    (Assign\n      (list (Name &det:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))\n          )\n          nil\n        )\n      )\n      nil\n    )\n    (If\n      (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) (list Lt) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (UnaryOp\n                    USub\n                    (Call (Name g_sqrt Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load))) nil)\n                  )\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (Call (Name g_sqrt Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load))) nil))\n                nil\n              )\n            )\n          )\n          nil\n        )\n      )\n      nil\n    )\n    (If\n      (Compare (Name &det:0 Load) (list Lt) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n      nil\n    )\n    (If\n      (Compare (Name &det:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (UnaryOp USub (Name &b:0 Load))\n                        Mult\n                        (BinOp (BinOp (Constant i2 None) Mult (Name &a:0 Load)) Pow (UnaryOp USub (Constant i1 None)))\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n    )\n    (If\n      (Compare (Name &det:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (If\n          (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n            (Assign\n              (list (Name &X:0 Store))\n              (BinOp\n                (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Name g_sqrt Load) (list (Name &det:0 Load)) nil))\n                Div\n                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n              )\n              None\n            )\n            (Assign\n              (list (Name &Y:0 Store))\n              (BinOp\n                (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Name g_sqrt Load) (list (Name &det:0 Load)) nil))\n                Div\n                (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n              )\n              None\n            )\n            (If\n              (Compare (Name &X:0 Load) (list Gt) (list (Name &Y:0 Load)))\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Name &Y:0 Load)) nil))\n                (Expr (Call (Name g_print Load) (list (Name &X:0 Load)) nil))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Name &X:0 Load)) nil))\n                (Expr (Call (Name g_print Load) (list (Name &Y:0 Load)) nil))\n              )\n            )\n          )\n          nil\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (FunctionDef\n      &quadroot:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &roots:1 Store)) (List nil Load) None)\n        (Assign (list (Name &negb:1 Store)) (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:1 Load)) None)\n        (Assign\n          (list (Name &discriminant:1 Store))\n          (BinOp\n            (BinOp\n              (BinOp (Name &b:1 Load) Pow (Constant i2 None))\n              Sub\n              (BinOp (BinOp (Constant i4 None) Mult (Name &a:1 Load)) Mult (Name &c:1 Load))\n            )\n            Pow\n            (BinOp (Constant i1 None) Div (Constant i2 None))\n          )\n          None\n        )\n        (Assign (list (Name &bottom:1 Store)) (BinOp (Constant i2 None) Mult (Name &a:1 Load)) None)\n        (Expr\n          (Call\n            (Attribute (Name &roots:1 Load) s_append Load)\n            (list\n              (Call\n                (Name g_format Load)\n                (list\n                  (BinOp (BinOp (Name &negb:1 Load) Sub (Name &discriminant:1 Load)) Div (Name &bottom:1 Load))\n                  (Constant s_.6f None)\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Name &roots:1 Load) s_append Load)\n            (list\n              (Call\n                (Name g_format Load)\n                (list\n                  (BinOp (BinOp (Name &negb:1 Load) Add (Name &discriminant:1 Load)) Div (Name &bottom:1 Load))\n                  (Constant s_.6f None)\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (Return (Name &roots:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq\n        (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))\n        (Expr (Call (Name g_exit Load) nil nil))\n      )\n      nil\n    )\n    (If\n      (BoolOp\n        Or\n        (list\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load)))\n              (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (Compare\n            (BinOp\n              (BinOp (Name &b:0 Load) Pow (Constant i2 None))\n              Sub\n              (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n            )\n            (list Lt)\n            (list (Constant i0 None))\n          )\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Expr (Call (Name g_exit Load) nil nil)))\n      nil\n    )\n    (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n    (If\n      (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &ans:0 Load) s_append Load)\n            (list (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &b:0 Load)))\n            nil\n          )\n        )\n      )\n      (/seq\n        (Assign\n          (list (Name &ans:0 Store))\n          (Call (Name &quadroot:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil)\n          None\n        )\n      )\n    )\n    (For\n      (Name &root:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &ans:0 Load) (Name &root:0 Load) Store))\n          (Call (Name g_float Load) (list (Subscript (Name &ans:0 Load) (Name &root:0 Load) Load)) nil)\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &ans1:0 Store))\n      (Call\n        (Name g_list Load)\n        (list (Call (Name g_set Load) (list (Call (Name g_sorted Load) (list (Name &ans:0 Load)) nil)) nil))\n        nil\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &ans1:0 Load)) nil)) nil))\n    (For\n      (Name &i:0 Store)\n      (Name &ans1:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (JoinedStr (list (FormattedValue (Name &i:0 Load) i-1 (JoinedStr (list (Constant s_.6f None)))))))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ClassDef\n      &CodeforcesTask20BSolution:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:2 Load) s_result Store)) (Constant s_ None) None)\n            (Assign (list (Attribute (Name &self:2 Load) s_a_b_c Store)) (List nil Load) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read_input:1\n          (arguments nil (list (arg &self:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_a_b_c Store))\n              (ListComp\n                (Call (Name g_int Load) (list (Name &x:6 Load)) nil)\n                (list\n                  (comprehension\n                    (Name &x:6 Store)\n                    (Call\n                      (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                      (list (Constant s-WzMyXQ== None))\n                      nil\n                    )\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &process_task:1\n          (arguments nil (list (arg &self:4 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (UnaryOp Not (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i0 None) Load))\n              (/seq\n                (If\n                  (UnaryOp Not (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i1 None) Load))\n                  (/seq\n                    (If\n                      (UnaryOp Not (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i2 None) Load))\n                      (/seq\n                        (Assign\n                          (list (Attribute (Name &self:4 Load) s_result Store))\n                          (Constant s-WzQ1LCA0OV0= None)\n                          None\n                        )\n                      )\n                      (/seq (Assign (list (Attribute (Name &self:4 Load) s_result Store)) (Constant s_0 None) None))\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Attribute (Name &self:4 Load) s_result Store))\n                      (Call\n                        (Attribute (Constant s-WzQ5LCAxMCwgMTIzLCA0OCwgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load)\n                        (list\n                          (BinOp\n                            (UnaryOp\n                              USub\n                              (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i2 None) Load)\n                            )\n                            Div\n                            (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i1 None) Load)\n                          )\n                        )\n                        nil\n                      )\n                      None\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &delta:4 Store))\n                  (BinOp\n                    (BinOp\n                      (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i1 None) Load)\n                      Pow\n                      (Constant i2 None)\n                    )\n                    Sub\n                    (BinOp\n                      (BinOp\n                        (Constant i4 None)\n                        Mult\n                        (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i0 None) Load)\n                      )\n                      Mult\n                      (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i2 None) Load)\n                    )\n                  )\n                  None\n                )\n                (If\n                  (UnaryOp Not (Name &delta:4 Load))\n                  (/seq\n                    (Import (list (alias &math:4 None)))\n                    (Assign\n                      (list (Name &root:4 Store))\n                      (Call\n                        (Attribute (Name &math:4 Load) s_sqrt Load)\n                        (list\n                          (BinOp\n                            (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i2 None) Load)\n                            Div\n                            (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i0 None) Load)\n                          )\n                        )\n                        nil\n                      )\n                      None\n                    )\n                    (If\n                      (Compare\n                        (BinOp\n                          (BinOp\n                            (BinOp\n                              (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i0 None) Load)\n                              Mult\n                              (BinOp (Name &root:4 Load) Pow (Constant i2 None))\n                            )\n                            Add\n                            (BinOp\n                              (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i1 None) Load)\n                              Mult\n                              (Name &root:4 Load)\n                            )\n                          )\n                          Add\n                          (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i2 None) Load)\n                        )\n                        (list NotEq)\n                        (list (Constant i0 None))\n                      )\n                      (/seq (Assign (list (Name &root:4 Store)) (UnaryOp USub (Name &root:4 Load)) None))\n                      nil\n                    )\n                    (Assign\n                      (list (Attribute (Name &self:4 Load) s_result Store))\n                      (Call\n                        (Attribute (Constant s-WzQ5LCAxMCwgMTIzLCA0OCwgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load)\n                        (list (Name &root:4 Load))\n                        nil\n                      )\n                      None\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare (Name &delta:4 Load) (list Lt) (list (Constant i0 None)))\n                      (/seq (Assign (list (Attribute (Name &self:4 Load) s_result Store)) (Constant s_0 None) None))\n                      (/seq\n                        (Import (list (alias &math:4 None)))\n                        (Assign\n                          (list (Name &s_delta:4 Store))\n                          (Call (Attribute (Name &math:4 Load) s_sqrt Load) (list (Name &delta:4 Load)) nil)\n                          None\n                        )\n                        (Assign\n                          (list (Name &roots:4 Store))\n                          (List\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp\n                                    USub\n                                    (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i1 None) Load)\n                                  )\n                                  Sub\n                                  (Name &s_delta:4 Load)\n                                )\n                                Div\n                                (BinOp\n                                  (Constant i2 None)\n                                  Mult\n                                  (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i0 None) Load)\n                                )\n                              )\n                              (BinOp\n                                (BinOp\n                                  (UnaryOp\n                                    USub\n                                    (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i1 None) Load)\n                                  )\n                                  Add\n                                  (Name &s_delta:4 Load)\n                                )\n                                Div\n                                (BinOp\n                                  (Constant i2 None)\n                                  Mult\n                                  (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i0 None) Load)\n                                )\n                              )\n                            )\n                            Load\n                          )\n                          None\n                        )\n                        (Expr (Call (Attribute (Name &roots:4 Load) s_sort Load) nil nil))\n                        (Assign\n                          (list (Attribute (Name &self:4 Load) s_result Store))\n                          (Call\n                            (Attribute\n                              (Constant\n                                s-WzUwLCAxMCwgMTIzLCA0OCwgNTgsIDQ2LCA1NCwgMTAyLCAxMjUsIDEwLCAxMjMsIDQ5LCA1OCwgNDYsIDU0LCAxMDIsIDEyNV0=\n                                None\n                              )\n                              s_format\n                              Load\n                            )\n                            (list\n                              (Subscript (Name &roots:4 Load) (Constant i0 None) Load)\n                              (Subscript (Name &roots:4 Load) (Constant i1 None) Load)\n                            )\n                            nil\n                          )\n                          None\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get_result:1\n          (arguments nil (list (arg &self:5 None None)) None nil nil None nil)\n          (/seq (Return (Attribute (Name &self:5 Load) s_result Load)))\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Assign (list (Name &Solution:0 Store)) (Call (Name &CodeforcesTask20BSolution:0 Load) nil nil) None)\n        (Expr (Call (Attribute (Name &Solution:0 Load) s_read_input Load) nil nil))\n        (Expr (Call (Attribute (Name &Solution:0 Load) s_process_task Load) nil nil))\n        (Expr\n          (Call (Name g_print Load) (list (Call (Attribute (Name &Solution:0 Load) s_get_result Load) nil nil)) nil)\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a1:0 Store) (Name &a2:0 Store) (Name &a3:0 Store)) Store))\n      (Call (Attribute (Call (Name g_input Load) (list (Constant s_ None)) nil) s_split Load) nil nil)\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Name &a1:0 Load)) nil) None)\n    (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (Name &a2:0 Load)) nil) None)\n    (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (Name &a3:0 Load)) nil) None)\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n              (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None)))\n              (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None)))\n                  (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None)))\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &r1:0 Store))\n                  (BinOp\n                    (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &r2:0 Store))\n                  (BinOp\n                    (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &mi:0 Store))\n                  (Call (Name g_min Load) (list (Name &r1:0 Load) (Name &r2:0 Load)) nil)\n                  None\n                )\n                (Assign\n                  (list (Name &ma:0 Store))\n                  (Call (Name g_max Load) (list (Name &r1:0 Load) (Name &r2:0 Load)) nil)\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                        (list (Name &mi:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                        (list (Name &ma:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (If\n              (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n              nil\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None)))\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &r1:0 Store))\n                  (BinOp\n                    (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:0 Load))\n                  )\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                        (list (Name &r1:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n                )\n              )\n              (/seq\n                (Assign (list (Name &r1:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None)\n                (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Call\n                        (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load)\n                        (list (Name &r1:0 Load))\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n              nil\n            )\n          )\n          nil\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list\n          (Name g_int Load)\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n        )\n        nil\n      )\n      None\n    )\n    (FunctionDef\n      &root:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &d:1 Store))\n          (BinOp\n            (BinOp (Name &b:1 Load) Pow (Constant i2 None))\n            Sub\n            (BinOp (BinOp (Constant i4 None) Mult (Name &a:1 Load)) Mult (Name &c:1 Load))\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &x:1 Store))\n              (BinOp (UnaryOp USub (Name &b:1 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load)))\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x:1 Load)))\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &d:1 Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &x:1 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:1 Load))\n                      Add\n                      (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:1 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:1 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &y:1 Store))\n                  (BinOp\n                    (BinOp\n                      (UnaryOp USub (Name &b:1 Load))\n                      Sub\n                      (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:1 Load)) nil)\n                    )\n                    Div\n                    (BinOp (Constant i2 None) Mult (Name &a:1 Load))\n                  )\n                  None\n                )\n                (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil))\n                (If\n                  (Compare (Name &x:1 Load) (list Gt) (list (Name &y:1 Load)))\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &y:1 Load)))\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x:1 Load)))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x:1 Load)))\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Name g_print Load)\n                        (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &y:1 Load)))\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (BoolOp\n        And\n        (list\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n      (/seq\n        (If\n          (BoolOp\n            And\n            (list\n              (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n              (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))\n            (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None)\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x:0 Load)))\n                nil\n              )\n            )\n          )\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))\n                  (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None)))\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq (Expr (Call (Name &root:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil)))\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (BinOp\n        (BinOp (Name &b:0 Load) Mult (Name &b:0 Load))\n        Sub\n        (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))\n      )\n      None\n    )\n    (If\n      (UnaryOp Not (Name &a:0 Load))\n      (/seq\n        (If\n          (UnaryOp Not (Name &b:0 Load))\n          (/seq\n            (If\n              (UnaryOp Not (Name &c:0 Load))\n              (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n            )\n          )\n          (/seq\n            (Expr\n              (BoolOp\n                Or\n                (list\n                  (Call (Name g_print Load) (list (Constant i1 None)) nil)\n                  (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq\n            (If\n              (UnaryOp Not (Name &d:0 Load))\n              (/seq\n                (Expr\n                  (BoolOp\n                    Or\n                    (list\n                      (Call (Name g_print Load) (list (Constant i1 None)) nil)\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (BinOp\n                            (BinOp\n                              (BinOp\n                                (UnaryOp USub (Name &b:0 Load))\n                                Add\n                                (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                              )\n                              Div\n                              (Constant i2 None)\n                            )\n                            Div\n                            (Name &a:0 Load)\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (BoolOp\n                    Or\n                    (list\n                      (Call (Name g_print Load) (list (Constant i2 None)) nil)\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Name g_min Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (BinOp\n                                    (UnaryOp USub (Name &b:0 Load))\n                                    Sub\n                                    (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                                  )\n                                  Div\n                                  (Constant i2 None)\n                                )\n                                Div\n                                (Name &a:0 Load)\n                              )\n                              (BinOp\n                                (BinOp\n                                  (BinOp\n                                    (UnaryOp USub (Name &b:0 Load))\n                                    Add\n                                    (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                                  )\n                                  Div\n                                  (Constant i2 None)\n                                )\n                                Div\n                                (Name &a:0 Load)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                      (Call\n                        (Name g_print Load)\n                        (list\n                          (Call\n                            (Name g_max Load)\n                            (list\n                              (BinOp\n                                (BinOp\n                                  (BinOp\n                                    (UnaryOp USub (Name &b:0 Load))\n                                    Sub\n                                    (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                                  )\n                                  Div\n                                  (Constant i2 None)\n                                )\n                                Div\n                                (Name &a:0 Load)\n                              )\n                              (BinOp\n                                (BinOp\n                                  (BinOp\n                                    (UnaryOp USub (Name &b:0 Load))\n                                    Add\n                                    (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))\n                                  )\n                                  Div\n                                  (Constant i2 None)\n                                )\n                                Div\n                                (Name &a:0 Load)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)"]