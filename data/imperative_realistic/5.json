["(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (FunctionDef\n      &_find:0\n      (arguments nil (list (arg &s:1 None None) (arg &u:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &p:1 Store)) (List nil Load) None)\n        (While\n          (Compare (Subscript (Name &s:1 Load) (Name &u:1 Load) Load) (list NotEq) (list (Name &u:1 Load)))\n          (/seq\n            (Expr (Call (Attribute (Name &p:1 Load) s_append Load) (list (Name &u:1 Load)) nil))\n            (Assign (list (Name &u:1 Store)) (Subscript (Name &s:1 Load) (Name &u:1 Load) Load) None)\n          )\n          nil\n        )\n        (For\n          (Name &v:1 Store)\n          (Name &p:1 Load)\n          (/seq (Assign (list (Subscript (Name &s:1 Load) (Name &v:1 Load) Store)) (Name &u:1 Load) None))\n          nil\n          None\n        )\n        (Return (Name &u:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &_union:0\n      (arguments nil (list (arg &s:2 None None) (arg &u:2 None None) (arg &v:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &su:2 Store) (Name &sv:2 Store)) Store))\n          (Tuple\n            (list\n              (Call (Name &_find:0 Load) (list (Name &s:2 Load) (Name &u:2 Load)) nil)\n              (Call (Name &_find:0 Load) (list (Name &s:2 Load) (Name &v:2 Load)) nil)\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Compare (Name &su:2 Load) (list NotEq) (list (Name &sv:2 Load)))\n          (/seq (Assign (list (Subscript (Name &s:2 Load) (Name &su:2 Load) Store)) (Name &sv:2 Load) None))\n          nil\n        )\n        (Return (Compare (Name &su:2 Load) (list NotEq) (list (Name &sv:2 Load))))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &s:0 Store) (Name &solo:0 Store)) Store))\n      (Tuple\n        (list\n          (Call\n            (Name g_list Load)\n            (list (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil))\n            nil\n          )\n          (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &m:0 Load) Add (Constant i1 None)))\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &res:0 Store) (Name &pos:0 Store)) Store))\n      (Tuple (list (List nil Load) (Call (Name g_set Load) nil nil)) Load)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &p:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Subscript (Name &p:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &pos:0 Load) s_add Load)\n                (list (Subscript (Name &p:0 Load) (Constant i1 None) Load))\n                nil\n              )\n            )\n            (Assign\n              (list (Name &p1:0 Store))\n              (Call\n                (Name &_find:0 Load)\n                (list (Name &s:0 Load) (Subscript (Name &p:0 Load) (Constant i1 None) Load))\n                nil\n              )\n              None\n            )\n            (If\n              (UnaryOp Not (Subscript (Name &solo:0 Load) (Name &p1:0 Load) Load))\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &res:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n                (Assign (list (Subscript (Name &solo:0 Load) (Name &p1:0 Load) Store)) (Constant i1 None) None)\n              )\n              nil\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &pos:0 Load) s_add Load)\n                (list (Subscript (Name &p:0 Load) (Constant i1 None) Load))\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Attribute (Name &pos:0 Load) s_add Load)\n                (list (Subscript (Name &p:0 Load) (Constant i2 None) Load))\n                nil\n              )\n            )\n            (Assign\n              (list (Tuple (list (Name &p1:0 Store) (Name &p2:0 Store)) Store))\n              (Tuple\n                (list\n                  (Call\n                    (Name &_find:0 Load)\n                    (list (Name &s:0 Load) (Subscript (Name &p:0 Load) (Constant i1 None) Load))\n                    nil\n                  )\n                  (Call\n                    (Name &_find:0 Load)\n                    (list (Name &s:0 Load) (Subscript (Name &p:0 Load) (Constant i2 None) Load))\n                    nil\n                  )\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (UnaryOp\n                Not\n                (BoolOp\n                  Or\n                  (list\n                    (Compare (Name &p1:0 Load) (list Eq) (list (Name &p2:0 Load)))\n                    (BoolOp\n                      And\n                      (list\n                        (Subscript (Name &solo:0 Load) (Name &p1:0 Load) Load)\n                        (Subscript (Name &solo:0 Load) (Name &p2:0 Load) Load)\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Expr (Call (Name &_union:0 Load) (list (Name &s:0 Load) (Name &p1:0 Load) (Name &p2:0 Load)) nil))\n                (Expr\n                  (Call\n                    (Attribute (Name &res:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n                (If\n                  (BoolOp\n                    Or\n                    (list\n                      (Subscript (Name &solo:0 Load) (Name &p1:0 Load) Load)\n                      (Subscript (Name &solo:0 Load) (Name &p2:0 Load) Load)\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list\n                        (Subscript\n                          (Name &solo:0 Load)\n                          (Call (Name &_find:0 Load) (list (Name &s:0 Load) (Name &p1:0 Load)) nil)\n                          Store\n                        )\n                      )\n                      (Constant i1 None)\n                      None\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &cc:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &u:0 Store)\n      (Name &pos:0 Load)\n      (/seq\n        (Assign (list (Name &su:0 Store)) (Call (Name &_find:0 Load) (list (Name &s:0 Load) (Name &u:0 Load)) nil) None)\n        (AugAssign (Name &cc:0 Store) Add (Constant i1 None))\n        (If\n          (BoolOp\n            And\n            (list\n              (UnaryOp Not (Subscript (Name &solo:0 Load) (Name &su:0 Load) Load))\n              (Compare (Name &su:0 Load) (list Eq) (list (Name &u:0 Load)))\n            )\n          )\n          (/seq (AugAssign (Name &cc:0 Store) Sub (Constant i1 None)))\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Name g_pow Load)\n            (list\n              (Constant i2 None)\n              (Name &cc:0 Load)\n              (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n            )\n            nil\n          )\n          (Call (Name g_len Load) (list (Name &res:0 Load)) nil)\n        )\n        nil\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &res:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ClassDef\n      &UnionFind:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_parent Store))\n              (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:2 Load)) nil)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:3 None None) (arg &a:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &acopy:3 Store)) (Name &a:3 Load) None)\n            (While\n              (Compare\n                (Name &a:3 Load)\n                (list NotEq)\n                (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &a:3 Store))\n                  (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (While\n              (Compare (Name &acopy:3 Load) (list NotEq) (list (Name &a:3 Load)))\n              (/seq\n                (Assign\n                  (list\n                    (Tuple\n                      (list\n                        (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Store)\n                        (Name &acopy:3 Store)\n                      )\n                      Store\n                    )\n                  )\n                  (Tuple\n                    (list\n                      (Name &a:3 Load)\n                      (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Load)\n                    )\n                    Load\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &a:3 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:1\n          (arguments nil (list (arg &self:4 None None) (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:4 Load) s_parent Load)\n                  (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &b:4 Load)) nil)\n                  Store\n                )\n              )\n              (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &a:4 Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &UF:0 Store))\n      (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &out:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &l:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Call (Name g_len Load) (list (Name &l:0 Load)) nil) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Assign (list (Name &u:0 Store)) (Constant i0 None) None)\n            (Assign (list (Name &v:0 Store)) (Subscript (Name &l:0 Load) (Constant i1 None) Load) None)\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &_:0 Store) (Name &u:0 Store) (Name &v:0 Store)) Store))\n              (Name &l:0 Load)\n              None\n            )\n          )\n        )\n        (Assign\n          (list (Name &uu:0 Store))\n          (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &u:0 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &vv:0 Store))\n          (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &v:0 Load)) nil)\n          None\n        )\n        (If\n          (Compare (Name &uu:0 Load) (list NotEq) (list (Name &vv:0 Load)))\n          (/seq\n            (Expr (Call (Attribute (Name &UF:0 Load) s_union Load) (list (Name &uu:0 Load) (Name &vv:0 Load)) nil))\n            (Expr (Call (Attribute (Name &out:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Name g_pow Load)\n            (list (Constant i2 None) (Call (Name g_len Load) (list (Name &out:0 Load)) nil) (Name &MOD:0 Load))\n            nil\n          )\n          (Call (Name g_len Load) (list (Name &out:0 Load)) nil)\n        )\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Attribute (Constant s-WzMyXQ== None) s_join Load)\n            (list (Call (Name g_map Load) (list (Name g_str Load) (Name &out:0 Load)) nil))\n            nil\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (FunctionDef\n      &prog:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:1 Store) (Name &m:1 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &mod:1 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          None\n        )\n        (Assign\n          (list (Name &has_one:1 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &m:1 Load) Add (Constant i1 None)))\n          None\n        )\n        (Assign (list (Name &basis:1 Store)) (List nil Load) None)\n        (Assign\n          (list (Name &sizes:1 Store))\n          (BinOp (List (list (Constant i1 None)) Load) Mult (BinOp (Name &m:1 Load) Add (Constant i1 None)))\n          None\n        )\n        (Assign\n          (list (Name &parent:1 Store))\n          (Call\n            (Name g_list Load)\n            (list (Call (Name g_range Load) (list (BinOp (Name &m:1 Load) Add (Constant i1 None))) nil))\n            nil\n          )\n          None\n        )\n        (FunctionDef\n          &find_parent:1\n          (arguments nil (list (arg &v:2 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &v:2 Load) (list Eq) (list (Subscript (Name &parent:1 Load) (Name &v:2 Load) Load)))\n              (/seq (Return (Name &v:2 Load)))\n              nil\n            )\n            (Assign\n              (list (Name &v:2 Store))\n              (Call (Name &find_parent:1 Load) (list (Subscript (Name &parent:1 Load) (Name &v:2 Load) Load)) nil)\n              None\n            )\n            (Return (Name &v:2 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union_sets:1\n          (arguments nil (list (arg &a:3 None None) (arg &b:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &a:3 Store)) (Call (Name &find_parent:1 Load) (list (Name &a:3 Load)) nil) None)\n            (Assign (list (Name &b:3 Store)) (Call (Name &find_parent:1 Load) (list (Name &b:3 Load)) nil) None)\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:3 Load) (list NotEq) (list (Name &b:3 Load)))\n                  (BoolOp\n                    Or\n                    (list\n                      (UnaryOp Not (Subscript (Name &has_one:1 Load) (Name &a:3 Load) Load))\n                      (UnaryOp Not (Subscript (Name &has_one:1 Load) (Name &b:3 Load) Load))\n                    )\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &sizes:1 Load) (Name &a:3 Load) Load)\n                    (list Lt)\n                    (list (Subscript (Name &sizes:1 Load) (Name &b:3 Load) Load))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Tuple (list (Name &a:3 Store) (Name &b:3 Store)) Store))\n                      (Tuple (list (Name &b:3 Load) (Name &a:3 Load)) Load)\n                      None\n                    )\n                  )\n                  nil\n                )\n                (Assign (list (Subscript (Name &parent:1 Load) (Name &b:3 Load) Store)) (Name &a:3 Load) None)\n                (AugAssign\n                  (Subscript (Name &sizes:1 Load) (Name &a:3 Load) Store)\n                  Add\n                  (Subscript (Name &sizes:1 Load) (Name &b:3 Load) Load)\n                )\n                (Assign\n                  (list (Subscript (Name &has_one:1 Load) (Name &a:3 Load) Store))\n                  (BinOp\n                    (Subscript (Name &has_one:1 Load) (Name &a:3 Load) Load)\n                    BitOr\n                    (Subscript (Name &has_one:1 Load) (Name &b:3 Load) Load)\n                  )\n                  None\n                )\n                (Return (Constant True None))\n              )\n              (/seq (Return (Constant False None)))\n            )\n          )\n          nil\n          None\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:1 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Name &a:1 Store))\n              (Call\n                (Name g_list Load)\n                (list\n                  (Call\n                    (Name g_map Load)\n                    (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                    nil\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Subscript (Name &a:1 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (Assign\n                  (list (Name &par:1 Store))\n                  (Call (Name &find_parent:1 Load) (list (Subscript (Name &a:1 Load) (Constant i1 None) Load)) nil)\n                  None\n                )\n                (If\n                  (UnaryOp Not (Subscript (Name &has_one:1 Load) (Name &par:1 Load) Load))\n                  (/seq\n                    (Assign (list (Subscript (Name &has_one:1 Load) (Name &par:1 Load) Store)) (Constant i1 None) None)\n                    (Expr (Call (Attribute (Name &basis:1 Load) s_append Load) (list (Name &i:1 Load)) nil))\n                  )\n                  nil\n                )\n              )\n              (/seq\n                (If\n                  (Call\n                    (Name &union_sets:1 Load)\n                    (list\n                      (Subscript (Name &a:1 Load) (Constant i1 None) Load)\n                      (Subscript (Name &a:1 Load) (Constant i2 None) Load)\n                    )\n                    nil\n                  )\n                  (/seq (Expr (Call (Attribute (Name &basis:1 Load) s_append Load) (list (Name &i:1 Load)) nil)))\n                  nil\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Name g_pow Load)\n                (list (Constant i2 None) (Call (Name g_len Load) (list (Name &basis:1 Load)) nil) (Name &mod:1 Load))\n                nil\n              )\n              (Call (Name g_len Load) (list (Name &basis:1 Load)) nil)\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name g_print Load) (list (Starred (Name &basis:1 Load) Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &prog:0 Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (ClassDef\n      &UnionFind:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:4 None None) (arg &n:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_parent Store))\n              (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:4 Load)) nil)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:5 None None) (arg &a:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &acopy:5 Store)) (Name &a:5 Load) None)\n            (While\n              (Compare\n                (Name &a:5 Load)\n                (list NotEq)\n                (list (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Name &a:5 Load) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &a:5 Store))\n                  (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Name &a:5 Load) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (While\n              (Compare (Name &acopy:5 Load) (list NotEq) (list (Name &a:5 Load)))\n              (/seq\n                (Assign\n                  (list\n                    (Tuple\n                      (list\n                        (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Name &acopy:5 Load) Store)\n                        (Name &acopy:5 Store)\n                      )\n                      Store\n                    )\n                  )\n                  (Tuple\n                    (list\n                      (Name &a:5 Load)\n                      (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Name &acopy:5 Load) Load)\n                    )\n                    Load\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &a:5 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:1\n          (arguments nil (list (arg &self:6 None None) (arg &a:6 None None) (arg &b:6 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:6 Load) s_parent Load)\n                  (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &b:6 Load)) nil)\n                  Store\n                )\n              )\n              (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &a:6 Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &oneLineArrayPrint:0\n      (arguments nil (list (arg &arr:2 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call (Name g_str Load) (list (BinOp (Name &x:9 Load) Add (Constant i1 None))) nil)\n                    (list (comprehension (Name &x:9 Store) (Name &arr:2 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &solveActual:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &uf:3 Store))\n          (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i2 None))) nil)\n          None\n        )\n        (For\n          (Tuple (list (Name &i:3 Store) (Name &x:3 Store)) Store)\n          (Call (Name g_enumerate Load) (list (Name &vS:0 Load)) nil)\n          (/seq\n            (If\n              (Compare (Call (Name g_len Load) (list (Name &x:3 Load)) nil) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &x:3 Load) s_append Load)\n                    (list (BinOp (Name &m:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (Expr (Call (Attribute (Name &x:3 Load) s_append Load) (list (Name &i:3 Load)) nil))\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &vS:0 Load) s_sort Load)\n            nil\n            (list\n              (keyword\n                s_key\n                (Lambda\n                  (arguments nil (list (arg &x:10 None None)) None nil nil None nil)\n                  (Subscript (Name &x:10 Load) (Constant i2 None) Load)\n                )\n              )\n            )\n          )\n        )\n        (Assign (list (Name &sPrime:3 Store)) (List nil Load) None)\n        (For\n          (Tuple (list (Name &p1:3 Store) (Name &p2:3 Store) (Name &index:3 Store)) Store)\n          (Name &vS:0 Load)\n          (/seq\n            (If\n              (Compare\n                (Call (Attribute (Name &uf:3 Load) s_find Load) (list (Name &p1:3 Load)) nil)\n                (list NotEq)\n                (list (Call (Attribute (Name &uf:3 Load) s_find Load) (list (Name &p2:3 Load)) nil))\n              )\n              (/seq\n                (Expr (Call (Attribute (Name &uf:3 Load) s_union Load) (list (Name &p1:3 Load) (Name &p2:3 Load)) nil))\n                (Expr (Call (Attribute (Name &sPrime:3 Load) s_append Load) (list (Name &index:3 Load)) nil))\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list (Name &TSize:3 Store))\n          (Call\n            (Name g_pow Load)\n            (list (Constant i2 None) (Call (Name g_len Load) (list (Name &sPrime:3 Load)) nil) (Name &MOD:0 Load))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEyMywgMTI1LCAzMiwgMTIzLCAxMjVd None) s_format Load)\n                (list (Name &TSize:3 Load) (Call (Name g_len Load) (list (Name &sPrime:3 Load)) nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name &oneLineArrayPrint:0 Load) (list (Name &sPrime:3 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:7 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:7 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &vS:0 Store)) (List nil Load) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &xx:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:8 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:8 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (Call (Name g_len Load) (list (Name &xx:0 Load)) nil)) nil)\n          (/seq (AugAssign (Subscript (Name &xx:0 Load) (Name &i:0 Load) Store) Sub (Constant i1 None)))\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &vS:0 Load) s_append Load)\n            (list (Subscript (Name &xx:0 Load) (Slice (Constant i1 None) None None) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name &solveActual:0 Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ClassDef\n      &UnionFind:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_parent Store))\n              (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:2 Load)) nil)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:3 None None) (arg &a:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &acopy:3 Store)) (Name &a:3 Load) None)\n            (While\n              (Compare\n                (Name &a:3 Load)\n                (list NotEq)\n                (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &a:3 Store))\n                  (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (While\n              (Compare (Name &acopy:3 Load) (list NotEq) (list (Name &a:3 Load)))\n              (/seq\n                (Assign\n                  (list\n                    (Tuple\n                      (list\n                        (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Store)\n                        (Name &acopy:3 Store)\n                      )\n                      Store\n                    )\n                  )\n                  (Tuple\n                    (list\n                      (Name &a:3 Load)\n                      (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Load)\n                    )\n                    Load\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &a:3 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:1\n          (arguments nil (list (arg &self:4 None None) (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:4 Load) s_parent Load)\n                  (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &b:4 Load)) nil)\n                  Store\n                )\n              )\n              (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &a:4 Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &UF:0 Store))\n      (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &out:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &l:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Call (Name g_len Load) (list (Name &l:0 Load)) nil) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Assign (list (Name &u:0 Store)) (Constant i0 None) None)\n            (Assign (list (Name &v:0 Store)) (Subscript (Name &l:0 Load) (Constant i1 None) Load) None)\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &_:0 Store) (Name &u:0 Store) (Name &v:0 Store)) Store))\n              (Name &l:0 Load)\n              None\n            )\n          )\n        )\n        (Assign\n          (list (Name &uu:0 Store))\n          (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &u:0 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &vv:0 Store))\n          (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &v:0 Load)) nil)\n          None\n        )\n        (If\n          (Compare (Name &uu:0 Load) (list NotEq) (list (Name &vv:0 Load)))\n          (/seq\n            (Expr (Call (Attribute (Name &UF:0 Load) s_union Load) (list (Name &uu:0 Load) (Name &vv:0 Load)) nil))\n            (Expr (Call (Attribute (Name &out:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Name g_pow Load)\n            (list (Constant i2 None) (Call (Name g_len Load) (list (Name &out:0 Load)) nil) (Name &MOD:0 Load))\n            nil\n          )\n          (Call (Name g_len Load) (list (Name &out:0 Load)) nil)\n        )\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Attribute (Constant s-WzMyXQ== None) s_join Load)\n            (list (Call (Name g_map Load) (list (Name g_str Load) (Name &out:0 Load)) nil))\n            nil\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &mod:0 Store)) (Constant i1000000007 None) None)\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &groupi:0 Store))\n      (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (BinOp (Name &m:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign (list (Name &groups:0 Store)) (BinOp (List (list (Constant i2 None)) Load) Mult (Name &m:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq (Assign (list (Subscript (Name &groups:0 Load) (Name &i:0 Load) Store)) (List nil Load) None))\n      nil\n      None\n    )\n    (Assign (list (Name &cur:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &x:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &k:0 Store))\n          (Call (Attribute (Name &x:0 Load) s_pop Load) (list (Constant i0 None)) nil)\n          None\n        )\n        (If\n          (Compare (Name &k:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Assign (list (Name &x:0 Store)) (Subscript (Name &x:0 Load) (Constant i0 None) Load) None)\n            (If\n              (Compare\n                (Subscript (Name &groupi:0 Load) (Name &x:0 Load) Load)\n                (list Eq)\n                (list (UnaryOp USub (Constant i1 None)))\n              )\n              (/seq\n                (Assign (list (Subscript (Name &groupi:0 Load) (Name &x:0 Load) Store)) (Constant i0 None) None)\n                (Expr\n                  (Call\n                    (Attribute (Name &ans:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (If\n              (Compare (Subscript (Name &groupi:0 Load) (Name &x:0 Load) Load) (list Gt) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &ind:0 Store)) (Subscript (Name &groupi:0 Load) (Name &x:0 Load) Load) None)\n                (For\n                  (Name &y:0 Store)\n                  (Subscript (Name &groups:0 Load) (Name &ind:0 Load) Load)\n                  (/seq\n                    (Assign (list (Subscript (Name &groupi:0 Load) (Name &y:0 Load) Store)) (Constant i0 None) None)\n                  )\n                  nil\n                  None\n                )\n                (Assign (list (Subscript (Name &groupi:0 Load) (Name &x:0 Load) Store)) (Constant i0 None) None)\n                (Expr\n                  (Call\n                    (Attribute (Name &ans:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n        )\n        (If\n          (Compare (Name &k:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &x1:0 Store) (Name &x2:0 Store)) Store))\n              (Tuple\n                (list\n                  (Subscript (Name &x:0 Load) (Constant i0 None) Load)\n                  (Subscript (Name &x:0 Load) (Constant i1 None) Load)\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (Compare\n                (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load)\n                (list Eq)\n                (list (UnaryOp USub (Constant i1 None)))\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load)\n                    (list Eq)\n                    (list (UnaryOp USub (Constant i1 None)))\n                  )\n                  (/seq\n                    (Assign (list (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Store)) (Name &cur:0 Load) None)\n                    (Assign (list (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Store)) (Name &cur:0 Load) None)\n                    (Assign\n                      (list (Subscript (Name &groups:0 Load) (Name &cur:0 Load) Store))\n                      (List (list (Name &x1:0 Load) (Name &x2:0 Load)) Load)\n                      None\n                    )\n                    (AugAssign (Name &cur:0 Store) Add (Constant i1 None))\n                    (Expr\n                      (Call\n                        (Attribute (Name &ans:0 Load) s_append Load)\n                        (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load)\n                        (list Eq)\n                        (list (Constant i0 None))\n                      )\n                      (/seq\n                        (Assign\n                          (list (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Store))\n                          (Constant i0 None)\n                          None\n                        )\n                        (Expr\n                          (Call\n                            (Attribute (Name &ans:0 Load) s_append Load)\n                            (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Assign\n                          (list (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Store))\n                          (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load)\n                          None\n                        )\n                        (Expr\n                          (Call\n                            (Attribute\n                              (Subscript\n                                (Name &groups:0 Load)\n                                (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load)\n                                Load\n                              )\n                              s_append\n                              Load\n                            )\n                            (list (Name &x1:0 Load))\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Attribute (Name &ans:0 Load) s_append Load)\n                            (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load)\n                    (list Eq)\n                    (list (UnaryOp USub (Constant i1 None)))\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load)\n                        (list Eq)\n                        (list (Constant i0 None))\n                      )\n                      (/seq\n                        (Assign\n                          (list (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Store))\n                          (Constant i0 None)\n                          None\n                        )\n                        (Expr\n                          (Call\n                            (Attribute (Name &ans:0 Load) s_append Load)\n                            (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                            nil\n                          )\n                        )\n                      )\n                      (/seq\n                        (Assign\n                          (list (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Store))\n                          (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load)\n                          None\n                        )\n                        (Expr\n                          (Call\n                            (Attribute\n                              (Subscript\n                                (Name &groups:0 Load)\n                                (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load)\n                                Load\n                              )\n                              s_append\n                              Load\n                            )\n                            (list (Name &x2:0 Load))\n                            nil\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Attribute (Name &ans:0 Load) s_append Load)\n                            (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                  (/seq\n                    (If\n                      (Compare\n                        (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load)\n                        (list NotEq)\n                        (list (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load))\n                      )\n                      (/seq\n                        (If\n                          (BoolOp\n                            Or\n                            (list\n                              (Compare\n                                (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load)\n                                (list Eq)\n                                (list (Constant i0 None))\n                              )\n                              (Compare\n                                (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load)\n                                (list Eq)\n                                (list (Constant i0 None))\n                              )\n                            )\n                          )\n                          (/seq\n                            (If\n                              (Compare\n                                (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load)\n                                (list Eq)\n                                (list (Constant i0 None))\n                              )\n                              (/seq\n                                (For\n                                  (Name &y:0 Store)\n                                  (Subscript\n                                    (Name &groups:0 Load)\n                                    (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load)\n                                    Load\n                                  )\n                                  (/seq\n                                    (Assign\n                                      (list (Subscript (Name &groupi:0 Load) (Name &y:0 Load) Store))\n                                      (Constant i0 None)\n                                      None\n                                    )\n                                  )\n                                  nil\n                                  None\n                                )\n                              )\n                              (/seq\n                                (For\n                                  (Name &y:0 Store)\n                                  (Subscript\n                                    (Name &groups:0 Load)\n                                    (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load)\n                                    Load\n                                  )\n                                  (/seq\n                                    (Assign\n                                      (list (Subscript (Name &groupi:0 Load) (Name &y:0 Load) Store))\n                                      (Constant i0 None)\n                                      None\n                                    )\n                                  )\n                                  nil\n                                  None\n                                )\n                              )\n                            )\n                          )\n                          (/seq\n                            (If\n                              (Compare\n                                (Call\n                                  (Name g_len Load)\n                                  (list\n                                    (Subscript\n                                      (Name &groups:0 Load)\n                                      (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load)\n                                      Load\n                                    )\n                                  )\n                                  nil\n                                )\n                                (list Lt)\n                                (list\n                                  (Call\n                                    (Name g_len Load)\n                                    (list\n                                      (Subscript\n                                        (Name &groups:0 Load)\n                                        (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load)\n                                        Load\n                                      )\n                                    )\n                                    nil\n                                  )\n                                )\n                              )\n                              (/seq\n                                (Assign\n                                  (list (Tuple (list (Name &x1:0 Store) (Name &x2:0 Store)) Store))\n                                  (Tuple (list (Name &x2:0 Load) (Name &x1:0 Load)) Load)\n                                  None\n                                )\n                              )\n                              nil\n                            )\n                            (For\n                              (Name &y:0 Store)\n                              (Subscript\n                                (Name &groups:0 Load)\n                                (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load)\n                                Load\n                              )\n                              (/seq\n                                (Assign\n                                  (list (Subscript (Name &groupi:0 Load) (Name &y:0 Load) Store))\n                                  (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load)\n                                  None\n                                )\n                                (Expr\n                                  (Call\n                                    (Attribute\n                                      (Subscript\n                                        (Name &groups:0 Load)\n                                        (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load)\n                                        Load\n                                      )\n                                      s_append\n                                      Load\n                                    )\n                                    (list (Name &y:0 Load))\n                                    nil\n                                  )\n                                )\n                              )\n                              nil\n                              None\n                            )\n                          )\n                        )\n                        (Expr\n                          (Call\n                            (Attribute (Name &ans:0 Load) s_append Load)\n                            (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                            nil\n                          )\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n              )\n            )\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Name g_pow Load)\n            (list (Constant i2 None) (Call (Name g_len Load) (list (Name &ans:0 Load)) nil) (Name &mod:0 Load))\n            nil\n          )\n          (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)\n        )\n        nil\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (FunctionDef\n      &input:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Subscript\n            (Call\n              (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load)\n              nil\n              nil\n            )\n            (Slice None (UnaryOp USub (Constant i1 None)) None)\n            Load\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (ClassDef\n      &UnionFind:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &size:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_table Store))\n              (ListComp\n                (UnaryOp USub (Constant i1 None))\n                (list\n                  (comprehension (Name &_:6 Store) (Call (Name g_range Load) (list (Name &size:2 Load)) nil) nil i0)\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare\n                (Subscript (Attribute (Name &self:3 Load) s_table Load) (Name &x:3 Load) Load)\n                (list GtE)\n                (list (Constant i0 None))\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript\n                      (Attribute (Name &self:3 Load) s_table Load)\n                      (Subscript (Attribute (Name &self:3 Load) s_table Load) (Name &x:3 Load) Load)\n                      Load\n                    )\n                    (list GtE)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Attribute (Name &self:3 Load) s_table Load) (Name &x:3 Load) Store))\n                      (Subscript\n                        (Attribute (Name &self:3 Load) s_table Load)\n                        (Subscript (Attribute (Name &self:3 Load) s_table Load) (Name &x:3 Load) Load)\n                        Load\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n                (Assign\n                  (list (Name &x:3 Store))\n                  (Subscript (Attribute (Name &self:3 Load) s_table Load) (Name &x:3 Load) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &x:3 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &same:1\n          (arguments nil (list (arg &self:4 None None) (arg &x:4 None None) (arg &y:4 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Compare\n                (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &x:4 Load)) nil)\n                (list Eq)\n                (list (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &y:4 Load)) nil))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &unite:1\n          (arguments nil (list (arg &self:5 None None) (arg &x:5 None None) (arg &y:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &s1:5 Store))\n              (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &x:5 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &s2:5 Store))\n              (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &y:5 Load)) nil)\n              None\n            )\n            (If\n              (Compare (Name &s1:5 Load) (list NotEq) (list (Name &s2:5 Load)))\n              (/seq\n                (Assign\n                  (list (Name &r1:5 Store))\n                  (Subscript (Attribute (Name &self:5 Load) s_table Load) (Name &s1:5 Load) Load)\n                  None\n                )\n                (Assign\n                  (list (Name &r2:5 Store))\n                  (Subscript (Attribute (Name &self:5 Load) s_table Load) (Name &s2:5 Load) Load)\n                  None\n                )\n                (If\n                  (Compare (Name &r1:5 Load) (list LtE) (list (Name &r2:5 Load)))\n                  (/seq\n                    (Assign\n                      (list (Subscript (Attribute (Name &self:5 Load) s_table Load) (Name &s2:5 Load) Store))\n                      (Name &s1:5 Load)\n                      None\n                    )\n                    (If\n                      (Compare (Name &r1:5 Load) (list Eq) (list (Name &r2:5 Load)))\n                      (/seq\n                        (AugAssign\n                          (Subscript (Attribute (Name &self:5 Load) s_table Load) (Name &s1:5 Load) Store)\n                          Sub\n                          (Constant i1 None)\n                        )\n                      )\n                      nil\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Subscript (Attribute (Name &self:5 Load) s_table Load) (Name &s1:5 Load) Store))\n                      (Name &s2:5 Load)\n                      None\n                    )\n                  )\n                )\n              )\n              nil\n            )\n            (Return None)\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list (Tuple (list (Name &m:0 Store) (Name &n:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &uf:0 Store))\n      (Call (Name &UnionFind:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &q:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Subscript (Name &q:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (If\n              (Call\n                (Attribute (Name &uf:0 Load) s_same Load)\n                (list\n                  (BinOp (Subscript (Name &q:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                  (Name &n:0 Load)\n                )\n                nil\n              )\n              (/seq Continue)\n              (/seq\n                (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n                (Expr\n                  (Call\n                    (Attribute (Name &uf:0 Load) s_unite Load)\n                    (list\n                      (BinOp (Subscript (Name &q:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                      (Name &n:0 Load)\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (If\n              (Call\n                (Attribute (Name &uf:0 Load) s_same Load)\n                (list\n                  (BinOp (Subscript (Name &q:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                  (BinOp (Subscript (Name &q:0 Load) (Constant i2 None) Load) Sub (Constant i1 None))\n                )\n                nil\n              )\n              (/seq Continue)\n              (/seq\n                (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n                (Expr\n                  (Call\n                    (Attribute (Name &uf:0 Load) s_unite Load)\n                    (list\n                      (BinOp (Subscript (Name &q:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                      (BinOp (Subscript (Name &q:0 Load) (Constant i2 None) Load) Sub (Constant i1 None))\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Name g_pow Load)\n            (list\n              (Constant i2 None)\n              (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)\n              (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n            )\n            nil\n          )\n          (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)\n        )\n        nil\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (FunctionDef\n      &prog:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:1 Store) (Name &m:1 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &mod:1 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          None\n        )\n        (Assign\n          (list (Name &has_one:1 Store))\n          (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &m:1 Load) Add (Constant i1 None)))\n          None\n        )\n        (Assign (list (Name &basis:1 Store)) (List nil Load) None)\n        (Assign\n          (list (Name &sizes:1 Store))\n          (BinOp (List (list (Constant i1 None)) Load) Mult (BinOp (Name &m:1 Load) Add (Constant i1 None)))\n          None\n        )\n        (Assign\n          (list (Name &parent:1 Store))\n          (Call\n            (Name g_list Load)\n            (list (Call (Name g_range Load) (list (BinOp (Name &m:1 Load) Add (Constant i1 None))) nil))\n            nil\n          )\n          None\n        )\n        (FunctionDef\n          &find_parent:1\n          (arguments nil (list (arg &v:2 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare (Name &v:2 Load) (list Eq) (list (Subscript (Name &parent:1 Load) (Name &v:2 Load) Load)))\n              (/seq (Return (Name &v:2 Load)))\n              nil\n            )\n            (Assign\n              (list (Name &v:2 Store))\n              (Call (Name &find_parent:1 Load) (list (Subscript (Name &parent:1 Load) (Name &v:2 Load) Load)) nil)\n              None\n            )\n            (Return (Name &v:2 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union_sets:1\n          (arguments nil (list (arg &a:3 None None) (arg &b:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &a:3 Store)) (Call (Name &find_parent:1 Load) (list (Name &a:3 Load)) nil) None)\n            (Assign (list (Name &b:3 Store)) (Call (Name &find_parent:1 Load) (list (Name &b:3 Load)) nil) None)\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &a:3 Load) (list NotEq) (list (Name &b:3 Load)))\n                  (BoolOp\n                    Or\n                    (list\n                      (UnaryOp Not (Subscript (Name &has_one:1 Load) (Name &a:3 Load) Load))\n                      (UnaryOp Not (Subscript (Name &has_one:1 Load) (Name &b:3 Load) Load))\n                    )\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &sizes:1 Load) (Name &a:3 Load) Load)\n                    (list Lt)\n                    (list (Subscript (Name &sizes:1 Load) (Name &b:3 Load) Load))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Tuple (list (Name &a:3 Store) (Name &b:3 Store)) Store))\n                      (Tuple (list (Name &b:3 Load) (Name &a:3 Load)) Load)\n                      None\n                    )\n                  )\n                  nil\n                )\n                (Assign (list (Subscript (Name &parent:1 Load) (Name &b:3 Load) Store)) (Name &a:3 Load) None)\n                (AugAssign\n                  (Subscript (Name &sizes:1 Load) (Name &a:3 Load) Store)\n                  Add\n                  (Subscript (Name &sizes:1 Load) (Name &b:3 Load) Load)\n                )\n                (Assign\n                  (list (Subscript (Name &has_one:1 Load) (Name &a:3 Load) Store))\n                  (BinOp\n                    (Subscript (Name &has_one:1 Load) (Name &a:3 Load) Load)\n                    BitOr\n                    (Subscript (Name &has_one:1 Load) (Name &b:3 Load) Load)\n                  )\n                  None\n                )\n                (Return (Constant True None))\n              )\n              (/seq (Return (Constant False None)))\n            )\n          )\n          nil\n          None\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:1 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Name &a:1 Store))\n              (Call\n                (Name g_list Load)\n                (list\n                  (Call\n                    (Name g_map Load)\n                    (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                    nil\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Subscript (Name &a:1 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (Assign\n                  (list (Name &par:1 Store))\n                  (Call (Name &find_parent:1 Load) (list (Subscript (Name &a:1 Load) (Constant i1 None) Load)) nil)\n                  None\n                )\n                (If\n                  (UnaryOp Not (Subscript (Name &has_one:1 Load) (Name &par:1 Load) Load))\n                  (/seq\n                    (Assign (list (Subscript (Name &has_one:1 Load) (Name &par:1 Load) Store)) (Constant i1 None) None)\n                    (Expr (Call (Attribute (Name &basis:1 Load) s_append Load) (list (Name &i:1 Load)) nil))\n                  )\n                  nil\n                )\n              )\n              (/seq\n                (If\n                  (Call\n                    (Name &union_sets:1 Load)\n                    (list\n                      (Subscript (Name &a:1 Load) (Constant i1 None) Load)\n                      (Subscript (Name &a:1 Load) (Constant i2 None) Load)\n                    )\n                    nil\n                  )\n                  (/seq (Expr (Call (Attribute (Name &basis:1 Load) s_append Load) (list (Name &i:1 Load)) nil)))\n                  nil\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Attribute (Name &basis:1 Load) s_sort Load) nil nil))\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Name g_pow Load)\n                (list (Constant i2 None) (Call (Name g_len Load) (list (Name &basis:1 Load)) nil) (Name &mod:1 Load))\n                nil\n              )\n              (Call (Name g_len Load) (list (Name &basis:1 Load)) nil)\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name g_print Load) (list (Starred (Name &basis:1 Load) Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &prog:0 Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_io None)))\n    (Import (list (alias g_os None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute\n        (Call\n          (Attribute (Name g_io Load) s_BytesIO Load)\n          (list\n            (Call\n              (Attribute (Name g_os Load) s_read Load)\n              (list\n                (Constant i0 None)\n                (Attribute\n                  (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil)\n                  s_st_size\n                  Load\n                )\n              )\n              nil\n            )\n          )\n          nil\n        )\n        s_readline\n        Load\n      )\n      None\n    )\n    (ClassDef\n      &DSU:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_parent Store))\n              (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:3 Load)) nil)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_size Store))\n              (BinOp (List (list (Constant i1 None)) Load) Mult (Name &n:3 Load))\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_has_loop Store))\n              (BinOp (List (list (Constant False None)) Load) Mult (Name &n:3 Load))\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:4 None None) (arg &v:4 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare\n                (Name &v:4 Load)\n                (list Eq)\n                (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &v:4 Load) Load))\n              )\n              (/seq (Return (Name &v:4 Load)))\n              nil\n            )\n            (Assign\n              (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &v:4 Load) Store))\n              (Call\n                (Attribute (Name &self:4 Load) s_find Load)\n                (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &v:4 Load) Load))\n                nil\n              )\n              None\n            )\n            (Return (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &v:4 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:1\n          (arguments nil (list (arg &self:5 None None) (arg &a:5 None None) (arg &b:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &a:5 Store))\n              (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &a:5 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &b:5 Store))\n              (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &b:5 Load)) nil)\n              None\n            )\n            (If\n              (Compare (Name &a:5 Load) (list NotEq) (list (Name &b:5 Load)))\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Attribute (Name &self:5 Load) s_size Load) (Name &a:5 Load) Load)\n                    (list Lt)\n                    (list (Subscript (Attribute (Name &self:5 Load) s_size Load) (Name &b:5 Load) Load))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Tuple (list (Name &a:5 Store) (Name &b:5 Store)) Store))\n                      (Tuple (list (Name &b:5 Load) (Name &a:5 Load)) Load)\n                      None\n                    )\n                  )\n                  nil\n                )\n                (Assign\n                  (list (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Name &b:5 Load) Store))\n                  (Name &a:5 Load)\n                  None\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:5 Load) s_size Load) (Name &a:5 Load) Store)\n                  Add\n                  (Subscript (Attribute (Name &self:5 Load) s_size Load) (Name &b:5 Load) Load)\n                )\n                (Assign\n                  (list\n                    (Subscript (Attribute (Name &self:5 Load) s_has_loop Load) (Name &b:5 Load) Store)\n                    (Subscript (Attribute (Name &self:5 Load) s_has_loop Load) (Name &a:5 Load) Store)\n                  )\n                  (BoolOp\n                    Or\n                    (list\n                      (Subscript (Attribute (Name &self:5 Load) s_has_loop Load) (Name &a:5 Load) Load)\n                      (Subscript (Attribute (Name &self:5 Load) s_has_loop Load) (Name &b:5 Load) Load)\n                    )\n                  )\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:2 Store) (Name &m:2 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &dsu:2 Store)) (Call (Name &DSU:0 Load) (list (Name &m:2 Load)) nil) None)\n        (Assign (list (Name &ans:2 Store)) (List nil Load) None)\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (Name &n:2 Load)) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &k:2 Store) (Starred (Name &r:2 Store) Store)) Store))\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Name &k:2 Load) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (Assign\n                  (list (Name &x:2 Store))\n                  (BinOp (Subscript (Name &r:2 Load) (Constant i0 None) Load) Sub (Constant i1 None))\n                  None\n                )\n                (If\n                  (UnaryOp\n                    Not\n                    (Subscript\n                      (Attribute (Name &dsu:2 Load) s_has_loop Load)\n                      (Call (Attribute (Name &dsu:2 Load) s_find Load) (list (Name &x:2 Load)) nil)\n                      Load\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list\n                        (Subscript\n                          (Attribute (Name &dsu:2 Load) s_has_loop Load)\n                          (Call (Attribute (Name &dsu:2 Load) s_find Load) (list (Name &x:2 Load)) nil)\n                          Store\n                        )\n                      )\n                      (Constant True None)\n                      None\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &ans:2 Load) s_append Load)\n                        (list (BinOp (Name &i:2 Load) Add (Constant i1 None)))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &u:2 Store) (Name &v:2 Store)) Store))\n                  (Tuple\n                    (list\n                      (BinOp (Subscript (Name &r:2 Load) (Constant i0 None) Load) Sub (Constant i1 None))\n                      (BinOp (Subscript (Name &r:2 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                    )\n                    Load\n                  )\n                  None\n                )\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Call (Attribute (Name &dsu:2 Load) s_find Load) (list (Name &u:2 Load)) nil)\n                        (list NotEq)\n                        (list (Call (Attribute (Name &dsu:2 Load) s_find Load) (list (Name &v:2 Load)) nil))\n                      )\n                      (UnaryOp\n                        Not\n                        (BoolOp\n                          And\n                          (list\n                            (Subscript\n                              (Attribute (Name &dsu:2 Load) s_has_loop Load)\n                              (Call (Attribute (Name &dsu:2 Load) s_find Load) (list (Name &u:2 Load)) nil)\n                              Load\n                            )\n                            (Subscript\n                              (Attribute (Name &dsu:2 Load) s_has_loop Load)\n                              (Call (Attribute (Name &dsu:2 Load) s_find Load) (list (Name &v:2 Load)) nil)\n                              Load\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call (Attribute (Name &dsu:2 Load) s_union Load) (list (Name &u:2 Load) (Name &v:2 Load)) nil)\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &ans:2 Load) s_append Load)\n                        (list (BinOp (Name &i:2 Load) Add (Constant i1 None)))\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Name g_pow Load)\n                (list\n                  (Constant i2 None)\n                  (Call (Name g_len Load) (list (Name &ans:2 Load)) nil)\n                  (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n                )\n                nil\n              )\n              (Call (Name g_len Load) (list (Name &ans:2 Load)) nil)\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name g_print Load) (list (Starred (Name &ans:2 Load) Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq (Expr (Call (Name &solve:0 Load) nil nil)))\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None) (alias g_io None) (alias g_os None)))\n    (ImportFrom s_collections (list (alias g_deque None)) i0)\n    (Try\n      (/seq\n        (Assign\n          (list (Name &Z:0 Store))\n          (Attribute\n            (Call\n              (Attribute (Name g_io Load) s_BytesIO Load)\n              (list\n                (Call\n                  (Attribute (Name g_os Load) s_read Load)\n                  (list\n                    (Constant i0 None)\n                    (Attribute\n                      (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil)\n                      s_st_size\n                      Load\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n            s_readline\n            Load\n          )\n          None\n        )\n      )\n      (list\n        (ExceptHandler\n          None\n          None\n          (/seq\n            (Assign\n              (list (Name &Z:0 Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                    s_encode\n                    Load\n                  )\n                  nil\n                  nil\n                )\n              )\n              None\n            )\n          )\n        )\n      )\n      nil\n      nil\n    )\n    (Assign\n      (list (Name &Y:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list (Name g_int Load) (Call (Attribute (Call (Name &Z:0 Load) nil nil) s_split Load) nil nil))\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Tuple (list (Name &n:0 Store) (Name &N:0 Store)) Store)) (Call (Name &Y:0 Load) nil nil) None)\n    (FunctionDef\n      &path:0\n      (arguments nil (list (arg &R:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &H:1 Store)) (Call (Name g_deque Load) nil nil) None)\n        (Expr (Call (Attribute (Name &H:1 Load) s_append Load) (list (Name &R:1 Load)) nil))\n        (While\n          (Compare (Subscript (Name &P:0 Load) (Name &R:1 Load) Load) (list GtE) (list (Constant i0 None)))\n          (/seq\n            (Assign (list (Name &R:1 Store)) (Subscript (Name &P:0 Load) (Name &R:1 Load) Load) None)\n            (Expr (Call (Attribute (Name &H:1 Load) s_append Load) (list (Name &R:1 Load)) nil))\n            (If\n              (Compare (Call (Name g_len Load) (list (Name &H:1 Load)) nil) (list Gt) (list (Constant i2 None)))\n              (/seq\n                (Assign\n                  (list (Subscript (Name &P:0 Load) (Call (Attribute (Name &H:1 Load) s_popleft Load) nil nil) Store))\n                  (Subscript (Name &H:1 Load) (UnaryOp USub (Constant i1 None)) Load)\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n        )\n        (Return (Name &R:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &K:0 Store))\n      (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &N:0 Load))\n      None\n    )\n    (Assign\n      (list (Name &P:0 Store))\n      (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &N:0 Load))\n      None\n    )\n    (Assign (list (Name &S:0 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &N:0 Load)) None)\n    (Assign (list (Name &R:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &B:0 Store)) (List nil Load) None)\n    (Assign (list (Name &alr:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign (list (Name &k:0 Store)) (Tuple (list (Starred (Call (Name &Y:0 Load) nil nil) Load)) Load) None)\n        (If\n          (Compare (Subscript (Name &k:0 Load) (Constant i0 None) Load) (list Lt) (list (Constant i2 None)))\n          (/seq\n            (Assign\n              (list (Name &a:0 Store))\n              (BinOp (Subscript (Name &k:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n              None\n            )\n            (If\n              (Compare (Subscript (Name &K:0 Load) (Name &a:0 Load) Load) (list GtE) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &v:0 Store))\n                  (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Load)) nil)\n                  None\n                )\n                (If\n                  (UnaryOp Not (Subscript (Name &alr:0 Load) (Name &v:0 Load) Load))\n                  (/seq (Assign (list (Subscript (Name &alr:0 Load) (Name &v:0 Load) Store)) (Constant i1 None) None))\n                  (/seq Continue)\n                )\n              )\n              (/seq\n                (Assign (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Store)) (Name &R:0 Load) None)\n                (Assign (list (Name &v:0 Store)) (Name &R:0 Load) None)\n                (Assign (list (Subscript (Name &alr:0 Load) (Name &R:0 Load) Store)) (Constant i1 None) None)\n                (AugAssign (Name &R:0 Store) Add (Constant i1 None))\n              )\n            )\n            (Expr\n              (Call\n                (Attribute (Name &B:0 Load) s_append Load)\n                (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                nil\n              )\n            )\n            Continue\n          )\n          nil\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (BinOp (Subscript (Name &k:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (BinOp (Subscript (Name &k:0 Load) (Constant i2 None) Load) Sub (Constant i1 None))\n          None\n        )\n        (If\n          (Compare (Subscript (Name &K:0 Load) (Name &a:0 Load) Load) (list GtE) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Subscript (Name &K:0 Load) (Name &b:0 Load) Load) (list GtE) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &va:0 Store) (Name &vb:0 Store)) Store))\n                  (Tuple\n                    (list\n                      (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Load)) nil)\n                      (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Load)) nil)\n                    )\n                    Load\n                  )\n                  None\n                )\n                (If\n                  (BoolOp\n                    Or\n                    (list\n                      (Compare (Name &va:0 Load) (list Eq) (list (Name &vb:0 Load)))\n                      (BoolOp\n                        And\n                        (list\n                          (Subscript (Name &alr:0 Load) (Name &va:0 Load) Load)\n                          (Subscript (Name &alr:0 Load) (Name &vb:0 Load) Load)\n                        )\n                      )\n                    )\n                  )\n                  (/seq Pass)\n                  (/seq\n                    (Assign\n                      (list (Tuple (list (Name &sa:0 Store) (Name &sb:0 Store)) Store))\n                      (Tuple\n                        (list\n                          (Subscript (Name &S:0 Load) (Name &va:0 Load) Load)\n                          (Subscript (Name &S:0 Load) (Name &vb:0 Load) Load)\n                        )\n                        Load\n                      )\n                      None\n                    )\n                    (If\n                      (Compare (Name &sa:0 Load) (list Gt) (list (Name &sb:0 Load)))\n                      (/seq (Assign (list (Subscript (Name &P:0 Load) (Name &vb:0 Load) Store)) (Name &va:0 Load) None))\n                      (/seq\n                        (Assign (list (Subscript (Name &P:0 Load) (Name &va:0 Load) Store)) (Name &vb:0 Load) None)\n                        (If\n                          (Compare (Name &sa:0 Load) (list Eq) (list (Name &sb:0 Load)))\n                          (/seq (AugAssign (Subscript (Name &S:0 Load) (Name &vb:0 Load) Store) Add (Constant i1 None)))\n                          nil\n                        )\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &B:0 Load) s_append Load)\n                        (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        nil\n                      )\n                    )\n                    (If\n                      (Subscript (Name &alr:0 Load) (Name &va:0 Load) Load)\n                      (/seq\n                        (Assign (list (Subscript (Name &alr:0 Load) (Name &vb:0 Load) Store)) (Constant i1 None) None)\n                      )\n                      nil\n                    )\n                    (If\n                      (Subscript (Name &alr:0 Load) (Name &vb:0 Load) Load)\n                      (/seq\n                        (Assign (list (Subscript (Name &alr:0 Load) (Name &va:0 Load) Store)) (Constant i1 None) None)\n                      )\n                      nil\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Store))\n                  (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Load)) nil)\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &B:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Subscript (Name &K:0 Load) (Name &b:0 Load) Load) (list GtE) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &vb:0 Store) (Subscript (Name &K:0 Load) (Name &a:0 Load) Store))\n                  (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Load)) nil)\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &B:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Assign (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Store)) (Name &R:0 Load) None)\n                (Assign (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Store)) (Name &R:0 Load) None)\n                (AugAssign (Name &R:0 Store) Add (Constant i1 None))\n                (Expr\n                  (Call\n                    (Attribute (Name &B:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Attribute (Name &B:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &s:0 Store)) (Call (Name g_len Load) (list (Name &B:0 Load)) nil) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Call (Name g_pow Load) (list (Constant i2 None) (Name &s:0 Load) (Name &M:0 Load)) nil) (Name &s:0 Load))\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Attribute (Constant s-WzMyXQ== None) s_join Load)\n            (list (Call (Name g_map Load) (list (Name g_str Load) (Name &B:0 Load)) nil))\n            nil\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:4 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:4 Store)\n            (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &l:0 Store)) (List nil Load) None)\n    (Assign (list (Name &d1:0 Store)) (Dict nil nil) None)\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp\n        (Name &i:1 Load)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Name &r:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list (comprehension (Name &i:5 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (FunctionDef\n      &find:0\n      (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Subscript (Name &p:0 Load) (Name &x:2 Load) Load) (list NotEq) (list (Name &x:2 Load)))\n          (/seq (Assign (list (Name &x:2 Store)) (Subscript (Name &p:0 Load) (Name &x:2 Load) Load) None))\n          nil\n        )\n        (Return (Name &x:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &power:0\n      (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &f:3 Store)) (Constant i1 None) None)\n        (Assign (list (Name &ct:3 Store)) (Constant i2 None) None)\n        (While\n          (Name &x:3 Load)\n          (/seq\n            (If\n              (Compare (BinOp (Name &x:3 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (Assign (list (Name &f:3 Store)) (BinOp (Name &f:3 Load) Mult (Name &ct:3 Load)) None)\n                (AugAssign (Name &f:3 Store) Mod (Name &mod:0 Load))\n              )\n              nil\n            )\n            (Assign (list (Name &ct:3 Store)) (BinOp (Name &ct:3 Load) Mult (Name &ct:3 Load)) None)\n            (AugAssign (Name &ct:3 Store) Mod (Name &mod:0 Load))\n            (AugAssign (Name &x:3 Store) FloorDiv (Constant i2 None))\n          )\n          nil\n        )\n        (Return (Name &f:3 Load))\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &x:0 Store))\n          (Subscript\n            (ListComp\n              (BinOp (Call (Name g_int Load) (list (Name &j:6 Load)) nil) Sub (Constant i1 None))\n              (list\n                (comprehension\n                  (Name &j:6 Store)\n                  (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n                  nil\n                  i0\n                )\n              )\n            )\n            (Slice (Constant i1 None) None None)\n            Load\n          )\n          None\n        )\n        (If\n          (Compare (Call (Name g_len Load) (list (Name &x:0 Load)) nil) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Assign\n              (list (Subscript (Name &x:0 Load) (Constant i0 None) Store))\n              (Call (Name &find:0 Load) (list (Subscript (Name &x:0 Load) (Constant i0 None) Load)) nil)\n              None\n            )\n            (If\n              (Compare\n                (Call\n                  (Attribute (Name &d1:0 Load) s_get Load)\n                  (list (Subscript (Name &x:0 Load) (Constant i0 None) Load) (Constant i0 None))\n                  nil\n                )\n                (list Eq)\n                (list (Constant i0 None))\n              )\n              (/seq\n                (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n                (Assign\n                  (list (Subscript (Name &d1:0 Load) (Subscript (Name &x:0 Load) (Constant i0 None) Load) Store))\n                  (Constant i1 None)\n                  None\n                )\n              )\n              nil\n            )\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n              (Tuple\n                (list\n                  (Call (Name &find:0 Load) (list (Subscript (Name &x:0 Load) (Constant i0 None) Load)) nil)\n                  (Call (Name &find:0 Load) (list (Subscript (Name &x:0 Load) (Constant i1 None) Load)) nil)\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Call (Attribute (Name &d1:0 Load) s_get Load) (list (Name &u:0 Load) (Constant i0 None)) nil)\n                    (list Eq)\n                    (list (Constant i1 None))\n                  )\n                  (Compare\n                    (Call (Attribute (Name &d1:0 Load) s_get Load) (list (Name &v:0 Load) (Constant i0 None)) nil)\n                    (list Eq)\n                    (list (Constant i1 None))\n                  )\n                )\n              )\n              (/seq Continue)\n              (/seq\n                (If\n                  (Compare (Name &u:0 Load) (list Eq) (list (Name &v:0 Load)))\n                  (/seq Continue)\n                  (/seq\n                    (If\n                      (Compare\n                        (Call (Attribute (Name &d1:0 Load) s_get Load) (list (Name &u:0 Load) (Constant i0 None)) nil)\n                        (list Eq)\n                        (list (Constant i1 None))\n                      )\n                      (/seq\n                        (Assign (list (Subscript (Name &d1:0 Load) (Name &v:0 Load) Store)) (Constant i1 None) None)\n                        (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n                      )\n                      (/seq\n                        (If\n                          (Compare\n                            (Call\n                              (Attribute (Name &d1:0 Load) s_get Load)\n                              (list (Name &v:0 Load) (Constant i0 None))\n                              nil\n                            )\n                            (list Eq)\n                            (list (Constant i1 None))\n                          )\n                          (/seq\n                            (Assign (list (Subscript (Name &d1:0 Load) (Name &u:0 Load) Store)) (Constant i1 None) None)\n                            (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n                          )\n                          (/seq\n                            (Assign (list (Name &px:0 Store)) (Name &u:0 Load) None)\n                            (Assign (list (Name &py:0 Store)) (Name &v:0 Load) None)\n                            (If\n                              (Compare\n                                (Subscript (Name &r:0 Load) (Name &px:0 Load) Load)\n                                (list Gt)\n                                (list (Subscript (Name &r:0 Load) (Name &py:0 Load) Load))\n                              )\n                              (/seq\n                                (Assign\n                                  (list (Subscript (Name &p:0 Load) (Name &py:0 Load) Store))\n                                  (Name &px:0 Load)\n                                  None\n                                )\n                              )\n                              (/seq\n                                (If\n                                  (Compare\n                                    (Subscript (Name &r:0 Load) (Name &px:0 Load) Load)\n                                    (list Lt)\n                                    (list (Subscript (Name &r:0 Load) (Name &py:0 Load) Load))\n                                  )\n                                  (/seq\n                                    (Assign\n                                      (list (Subscript (Name &p:0 Load) (Name &px:0 Load) Store))\n                                      (Name &py:0 Load)\n                                      None\n                                    )\n                                  )\n                                  (/seq\n                                    (Assign\n                                      (list (Subscript (Name &p:0 Load) (Name &py:0 Load) Store))\n                                      (Name &px:0 Load)\n                                      None\n                                    )\n                                    (AugAssign\n                                      (Subscript (Name &r:0 Load) (Name &px:0 Load) Store)\n                                      Add\n                                      (Constant i1 None)\n                                    )\n                                  )\n                                )\n                              )\n                            )\n                            (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Attribute (Name g_stdout Load) s_write Load)\n        (list\n          (BinOp\n            (BinOp\n              (BinOp\n                (Call\n                  (Name g_str Load)\n                  (list (Call (Name &power:0 Load) (list (Call (Name g_len Load) (list (Name &l:0 Load)) nil)) nil))\n                  nil\n                )\n                Add\n                (Constant s-WzMyXQ== None)\n              )\n              Add\n              (Call (Name g_str Load) (list (Call (Name g_len Load) (list (Name &l:0 Load)) nil)) nil)\n            )\n            Add\n            (Constant s-WzEwXQ== None)\n          )\n        )\n        nil\n      )\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &l:0 Load)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name g_stdout Load) s_write Load)\n            (list\n              (BinOp\n                (Call (Name g_str Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)\n                Add\n                (Constant s-WzMyXQ== None)\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (ClassDef\n      &UF:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &N:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_par Store))\n              (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &N:2 Load)) nil)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_sz Store))\n              (BinOp (List (list (Constant i1 None)) Load) Mult (Name &N:2 Load))\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &x:3 Load) Load)\n                (list NotEq)\n                (list (Name &x:3 Load))\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &x:3 Load) Store))\n                  (Call\n                    (Attribute (Name &self:3 Load) s_find Load)\n                    (list (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &x:3 Load) Load))\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &x:3 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:1\n          (arguments nil (list (arg &self:4 None None) (arg &x:4 None None) (arg &y:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &xr:4 Store) (Name &yr:4 Store)) Store))\n              (Tuple\n                (list\n                  (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &x:4 Load)) nil)\n                  (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &y:4 Load)) nil)\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (Compare (Name &xr:4 Load) (list Eq) (list (Name &yr:4 Load)))\n              (/seq (Return (Constant False None)))\n              nil\n            )\n            (If\n              (Compare\n                (Subscript (Attribute (Name &self:4 Load) s_sz Load) (Name &xr:4 Load) Load)\n                (list Lt)\n                (list (Subscript (Attribute (Name &self:4 Load) s_sz Load) (Name &yr:4 Load) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &xr:4 Store) (Name &yr:4 Store)) Store))\n                  (Tuple (list (Name &yr:4 Load) (Name &xr:4 Load)) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (Assign\n              (list (Subscript (Attribute (Name &self:4 Load) s_par Load) (Name &yr:4 Load) Store))\n              (Name &xr:4 Load)\n              None\n            )\n            (AugAssign\n              (Subscript (Attribute (Name &self:4 Load) s_sz Load) (Name &xr:4 Load) Store)\n              Add\n              (Subscript (Attribute (Name &self:4 Load) s_sz Load) (Name &yr:4 Load) Load)\n            )\n            (Return (Constant True None))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &size:1\n          (arguments nil (list (arg &self:5 None None) (arg &x:5 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:5 Load) s_sz Load)\n                (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &x:5 Load)) nil)\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &connected:1\n          (arguments nil (list (arg &self:6 None None) (arg &x:6 None None) (arg &y:6 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Compare\n                (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &x:6 Load)) nil)\n                (list Eq)\n                (list (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &y:6 Load)) nil))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &cur_count:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &cur_lst:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &uf:0 Store))\n      (Call (Name &UF:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i2 None))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &bit_lst:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Name g_int Load)\n                  (Call\n                    (Attribute (Call (Name &input:0 Load) nil nil) s_split Load)\n                    (list (Constant s-WzMyXQ== None))\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &bit1:0 Store)) (Subscript (Name &bit_lst:0 Load) (Constant i1 None) Load) None)\n        (Assign (list (Name &bit2:0 Store)) (BinOp (Name &m:0 Load) Add (Constant i1 None)) None)\n        (If\n          (Compare (Subscript (Name &bit_lst:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &bit2:0 Store)) (Subscript (Name &bit_lst:0 Load) (Constant i2 None) Load) None))\n          nil\n        )\n        (If\n          (Call (Attribute (Name &uf:0 Load) s_union Load) (list (Name &bit1:0 Load) (Name &bit2:0 Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &cur_lst:0 Load) s_append Load)\n                (list (Call (Name g_str Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))\n                nil\n              )\n            )\n            (AugAssign (Name &cur_count:0 Store) Mult (Constant i2 None))\n            (AugAssign\n              (Name &cur_count:0 Store)\n              Mod\n              (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n            )\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Name &cur_count:0 Load) (Call (Name g_len Load) (list (Name &cur_lst:0 Load)) nil))\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Name &cur_lst:0 Load)) nil))\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (FunctionDef\n      &_find:0\n      (arguments nil (list (arg &s:1 None None) (arg &u:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &p:1 Store)) (List nil Load) None)\n        (While\n          (Compare (Subscript (Name &s:1 Load) (Name &u:1 Load) Load) (list NotEq) (list (Name &u:1 Load)))\n          (/seq\n            (Expr (Call (Attribute (Name &p:1 Load) s_append Load) (list (Name &u:1 Load)) nil))\n            (Assign (list (Name &u:1 Store)) (Subscript (Name &s:1 Load) (Name &u:1 Load) Load) None)\n          )\n          nil\n        )\n        (For\n          (Name &v:1 Store)\n          (Name &p:1 Load)\n          (/seq (Assign (list (Subscript (Name &s:1 Load) (Name &v:1 Load) Store)) (Name &u:1 Load) None))\n          nil\n          None\n        )\n        (Return (Name &u:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &_union:0\n      (arguments nil (list (arg &s:2 None None) (arg &u:2 None None) (arg &v:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &su:2 Store) (Name &sv:2 Store)) Store))\n          (Tuple\n            (list\n              (Call (Name &_find:0 Load) (list (Name &s:2 Load) (Name &u:2 Load)) nil)\n              (Call (Name &_find:0 Load) (list (Name &s:2 Load) (Name &v:2 Load)) nil)\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Compare (Name &su:2 Load) (list NotEq) (list (Name &sv:2 Load)))\n          (/seq (Assign (list (Subscript (Name &s:2 Load) (Name &su:2 Load) Store)) (Name &sv:2 Load) None))\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &s:0 Store) (Name &res:0 Store)) Store))\n      (Tuple\n        (list\n          (Call\n            (Name g_list Load)\n            (list (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil))\n            nil\n          )\n          (List nil Load)\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &p:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Subscript (Name &p:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n              (Tuple (list (Constant i0 None) (Subscript (Name &p:0 Load) (Constant i1 None) Load)) Load)\n              None\n            )\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n              (Tuple\n                (list\n                  (Subscript (Name &p:0 Load) (Constant i1 None) Load)\n                  (Subscript (Name &p:0 Load) (Constant i2 None) Load)\n                )\n                Load\n              )\n              None\n            )\n          )\n        )\n        (Assign\n          (list (Tuple (list (Name &su:0 Store) (Name &sv:0 Store)) Store))\n          (Tuple\n            (list\n              (Call (Name &_find:0 Load) (list (Name &s:0 Load) (Name &u:0 Load)) nil)\n              (Call (Name &_find:0 Load) (list (Name &s:0 Load) (Name &v:0 Load)) nil)\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Compare (Name &su:0 Load) (list NotEq) (list (Name &sv:0 Load)))\n          (/seq\n            (Expr (Call (Name &_union:0 Load) (list (Name &s:0 Load) (Name &su:0 Load) (Name &sv:0 Load)) nil))\n            (Expr\n              (Call\n                (Attribute (Name &res:0 Load) s_append Load)\n                (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                nil\n              )\n            )\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Name g_pow Load)\n            (list\n              (Constant i2 None)\n              (Call (Name g_len Load) (list (Name &res:0 Load)) nil)\n              (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n            )\n            nil\n          )\n          (Call (Name g_len Load) (list (Name &res:0 Load)) nil)\n        )\n        nil\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &res:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ClassDef\n      &UnionFind:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_parent Store))\n              (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:2 Load)) nil)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:3 None None) (arg &a:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &acopy:3 Store)) (Name &a:3 Load) None)\n            (While\n              (Compare\n                (Name &a:3 Load)\n                (list NotEq)\n                (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &a:3 Store))\n                  (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (While\n              (Compare (Name &acopy:3 Load) (list NotEq) (list (Name &a:3 Load)))\n              (/seq\n                (Assign\n                  (list\n                    (Tuple\n                      (list\n                        (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Store)\n                        (Name &acopy:3 Store)\n                      )\n                      Store\n                    )\n                  )\n                  (Tuple\n                    (list\n                      (Name &a:3 Load)\n                      (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Load)\n                    )\n                    Load\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &a:3 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:1\n          (arguments nil (list (arg &self:4 None None) (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:4 Load) s_parent Load)\n                  (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &b:4 Load)) nil)\n                  Store\n                )\n              )\n              (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &a:4 Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &UF:0 Store))\n      (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &out:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &l:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Call (Name g_len Load) (list (Name &l:0 Load)) nil) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Assign (list (Name &u:0 Store)) (Constant i0 None) None)\n            (Assign (list (Name &v:0 Store)) (Subscript (Name &l:0 Load) (Constant i1 None) Load) None)\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &_:0 Store) (Name &u:0 Store) (Name &v:0 Store)) Store))\n              (Name &l:0 Load)\n              None\n            )\n          )\n        )\n        (Assign\n          (list (Name &uu:0 Store))\n          (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &u:0 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &vv:0 Store))\n          (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &v:0 Load)) nil)\n          None\n        )\n        (If\n          (Compare (Name &uu:0 Load) (list NotEq) (list (Name &vv:0 Load)))\n          (/seq\n            (Expr (Call (Attribute (Name &UF:0 Load) s_union Load) (list (Name &uu:0 Load) (Name &vv:0 Load)) nil))\n            (Expr (Call (Attribute (Name &out:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Name g_pow Load)\n            (list (Constant i2 None) (Call (Name g_len Load) (list (Name &out:0 Load)) nil) (Name &MOD:0 Load))\n            nil\n          )\n          (Call (Name g_len Load) (list (Name &out:0 Load)) nil)\n        )\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Attribute (Constant s-WzMyXQ== None) s_join Load)\n            (list (Call (Name g_map Load) (list (Name g_str Load) (Name &out:0 Load)) nil))\n            nil\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Tuple (list (Name &N:0 Store) (Name &M:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &base:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &M:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign\n      (list (Name &e:0 Store))\n      (ListComp\n        (List nil Load)\n        (list\n          (comprehension\n            (Name &_:2 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &M:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (List nil Load) None)\n    (ClassDef\n      &UnionFind:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:3 Load) s_n Store)) (Name &n:3 Load) None)\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_root Store))\n              (BinOp\n                (List (list (UnaryOp USub (Constant i1 None))) Load)\n                Mult\n                (BinOp (Name &n:3 Load) Add (Constant i1 None))\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_rnk Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None)))\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &Find_Root:1\n          (arguments nil (list (arg &self:4 None None) (arg &x:4 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Attribute (Name &self:4 Load) s_root Load) (Name &x:4 Load) Load)\n                (list Lt)\n                (list (Constant i0 None))\n              )\n              (/seq (Return (Name &x:4 Load)))\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:4 Load) s_root Load) (Name &x:4 Load) Store))\n                  (Call\n                    (Attribute (Name &self:4 Load) s_Find_Root Load)\n                    (list (Subscript (Attribute (Name &self:4 Load) s_root Load) (Name &x:4 Load) Load))\n                    nil\n                  )\n                  None\n                )\n                (Return (Subscript (Attribute (Name &self:4 Load) s_root Load) (Name &x:4 Load) Load))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &Unite:1\n          (arguments nil (list (arg &self:5 None None) (arg &x:5 None None) (arg &y:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &x:5 Store))\n              (Call (Attribute (Name &self:5 Load) s_Find_Root Load) (list (Name &x:5 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &y:5 Store))\n              (Call (Attribute (Name &self:5 Load) s_Find_Root Load) (list (Name &y:5 Load)) nil)\n              None\n            )\n            (If\n              (Compare (Name &x:5 Load) (list Eq) (list (Name &y:5 Load)))\n              (/seq (Return None))\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Attribute (Name &self:5 Load) s_rnk Load) (Name &x:5 Load) Load)\n                    (list Gt)\n                    (list (Subscript (Attribute (Name &self:5 Load) s_rnk Load) (Name &y:5 Load) Load))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript (Attribute (Name &self:5 Load) s_root Load) (Name &x:5 Load) Store)\n                      Add\n                      (Subscript (Attribute (Name &self:5 Load) s_root Load) (Name &y:5 Load) Load)\n                    )\n                    (Assign\n                      (list (Subscript (Attribute (Name &self:5 Load) s_root Load) (Name &y:5 Load) Store))\n                      (Name &x:5 Load)\n                      None\n                    )\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript (Attribute (Name &self:5 Load) s_root Load) (Name &y:5 Load) Store)\n                      Add\n                      (Subscript (Attribute (Name &self:5 Load) s_root Load) (Name &x:5 Load) Load)\n                    )\n                    (Assign\n                      (list (Subscript (Attribute (Name &self:5 Load) s_root Load) (Name &x:5 Load) Store))\n                      (Name &y:5 Load)\n                      None\n                    )\n                    (If\n                      (Compare\n                        (Subscript (Attribute (Name &self:5 Load) s_rnk Load) (Name &x:5 Load) Load)\n                        (list Eq)\n                        (list (Subscript (Attribute (Name &self:5 Load) s_rnk Load) (Name &y:5 Load) Load))\n                      )\n                      (/seq\n                        (AugAssign\n                          (Subscript (Attribute (Name &self:5 Load) s_rnk Load) (Name &y:5 Load) Store)\n                          Add\n                          (Constant i1 None)\n                        )\n                      )\n                      nil\n                    )\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &isSameGroup:1\n          (arguments nil (list (arg &self:6 None None) (arg &x:6 None None) (arg &y:6 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Compare\n                (Call (Attribute (Name &self:6 Load) s_Find_Root Load) (list (Name &x:6 Load)) nil)\n                (list Eq)\n                (list (Call (Attribute (Name &self:6 Load) s_Find_Root Load) (list (Name &y:6 Load)) nil))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &Count:1\n          (arguments nil (list (arg &self:7 None None) (arg &x:7 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (UnaryOp\n                USub\n                (Subscript\n                  (Attribute (Name &self:7 Load) s_root Load)\n                  (Call (Attribute (Name &self:7 Load) s_Find_Root Load) (list (Name &x:7 Load)) nil)\n                  Load\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &uf:0 Store)) (Call (Name &UnionFind:0 Load) (list (Name &M:0 Load)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &N:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Subscript (Name &a:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (Constant i0 None)) nil)))\n          nil\n        )\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Subscript (Name &a:0 Load) (Slice (Constant i1 None) None None) Load)\n          None\n        )\n        (If\n          (Call (Attribute (Name &uf:0 Load) s_isSameGroup Load) (list (Name &u:0 Load) (Name &v:0 Load)) nil)\n          (/seq Continue)\n          (/seq\n            (Expr (Call (Attribute (Name &uf:0 Load) s_Unite Load) (list (Name &u:0 Load) (Name &v:0 Load)) nil))\n            (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Name g_pow Load)\n            (list (Constant i2 None) (Call (Name g_len Load) (list (Name &res:0 Load)) nil) (Name &mod:0 Load))\n            nil\n          )\n          (Call (Name g_len Load) (list (Name &res:0 Load)) nil)\n        )\n        nil\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &res:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &Group:0 Store))\n      (ListComp\n        (Name &i:1 Load)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &GroupOne:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &m:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign\n      (list (Name &Nodes:0 Store))\n      (BinOp (List (list (Constant i1 None)) Load) Mult (BinOp (Name &m:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (FunctionDef\n      &find:0\n      (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n      (/seq\n        (While\n          (Compare (Subscript (Name &Group:0 Load) (Name &x:2 Load) Load) (list NotEq) (list (Name &x:2 Load)))\n          (/seq (Assign (list (Name &x:2 Store)) (Subscript (Name &Group:0 Load) (Name &x:2 Load) Load) None))\n          nil\n        )\n        (Return (Name &x:2 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &Union:0\n      (arguments nil (list (arg &x:3 None None) (arg &y:3 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil)\n            (list NotEq)\n            (list (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil))\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Load)\n                (list Lt)\n                (list (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Load))\n              )\n              (/seq\n                (AugAssign\n                  (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Store)\n                  Add\n                  (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Load)\n                )\n                (Assign\n                  (list (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Store))\n                  (Constant i0 None)\n                  None\n                )\n                (If\n                  (BoolOp\n                    Or\n                    (list\n                      (Compare\n                        (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Load)\n                        (list Eq)\n                        (list (Constant i1 None))\n                      )\n                      (Compare\n                        (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Load)\n                        (list Eq)\n                        (list (Constant i1 None))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list\n                        (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Store)\n                      )\n                      (Constant i1 None)\n                      None\n                    )\n                    (Assign\n                      (list\n                        (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Store)\n                      )\n                      (Constant i1 None)\n                      None\n                    )\n                  )\n                  nil\n                )\n                (Assign\n                  (list (Subscript (Name &Group:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Store))\n                  (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil)\n                  None\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Store)\n                  Add\n                  (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Load)\n                )\n                (Assign\n                  (list (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Store))\n                  (Constant i0 None)\n                  None\n                )\n                (If\n                  (BoolOp\n                    Or\n                    (list\n                      (Compare\n                        (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Load)\n                        (list Eq)\n                        (list (Constant i1 None))\n                      )\n                      (Compare\n                        (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Load)\n                        (list Eq)\n                        (list (Constant i1 None))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list\n                        (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Store)\n                      )\n                      (Constant i1 None)\n                      None\n                    )\n                    (Assign\n                      (list\n                        (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Store)\n                      )\n                      (Constant i1 None)\n                      None\n                    )\n                  )\n                  nil\n                )\n                (Assign\n                  (list (Subscript (Name &Group:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Store))\n                  (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil)\n                  None\n                )\n              )\n            )\n          )\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &ANS:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &V:0 Store))\n          (Call\n            (Name g_tuple Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Subscript (Name &V:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Assign (list (Name &x:0 Store)) (Subscript (Name &V:0 Load) (Constant i1 None) Load) None)\n            (If\n              (Compare\n                (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &x:0 Load)) nil) Load)\n                (list Eq)\n                (list (Constant i0 None))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &ANS:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n                (Assign\n                  (list\n                    (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &x:0 Load)) nil) Store)\n                  )\n                  (Constant i1 None)\n                  None\n                )\n              )\n              (/seq Continue)\n            )\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store))\n              (Tuple\n                (list\n                  (Subscript (Name &V:0 Load) (Constant i1 None) Load)\n                  (Subscript (Name &V:0 Load) (Constant i2 None) Load)\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare\n                    (Call (Name &find:0 Load) (list (Name &x:0 Load)) nil)\n                    (list Eq)\n                    (list (Call (Name &find:0 Load) (list (Name &y:0 Load)) nil))\n                  )\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &x:0 Load)) nil) Load)\n                        (list Eq)\n                        (list (Constant i1 None))\n                      )\n                      (Compare\n                        (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &y:0 Load)) nil) Load)\n                        (list Eq)\n                        (list (Constant i1 None))\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq Continue)\n              (/seq\n                (Expr (Call (Name &Union:0 Load) (list (Name &x:0 Load) (Name &y:0 Load)) nil))\n                (Expr\n                  (Call\n                    (Attribute (Name &ANS:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Name g_pow Load)\n            (list (Constant i2 None) (Call (Name g_len Load) (list (Name &ANS:0 Load)) nil) (Name &mod:0 Load))\n            nil\n          )\n          (Call (Name g_len Load) (list (Name &ANS:0 Load)) nil)\n        )\n        nil\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &ANS:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &readline:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (ClassDef\n      &UF:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &num:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_par Store))\n              (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &num:2 Load))\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_color Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (Name &num:2 Load))\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &x:3 Load) Load)\n                (list Lt)\n                (list (Constant i0 None))\n              )\n              (/seq (Return (Name &x:3 Load)))\n              (/seq\n                (Assign (list (Name &stack:3 Store)) (List nil Load) None)\n                (While\n                  (Compare\n                    (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &x:3 Load) Load)\n                    (list GtE)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (Expr (Call (Attribute (Name &stack:3 Load) s_append Load) (list (Name &x:3 Load)) nil))\n                    (Assign\n                      (list (Name &x:3 Store))\n                      (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &x:3 Load) Load)\n                      None\n                    )\n                  )\n                  nil\n                )\n                (For\n                  (Name &xi:3 Store)\n                  (Name &stack:3 Load)\n                  (/seq\n                    (Assign\n                      (list (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &xi:3 Load) Store))\n                      (Name &x:3 Load)\n                      None\n                    )\n                  )\n                  nil\n                  None\n                )\n                (Return (Name &x:3 Load))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &col:1\n          (arguments nil (list (arg &self:4 None None) (arg &x:4 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:4 Load) s_color Load)\n                (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &x:4 Load)) nil)\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &paint:1\n          (arguments nil (list (arg &self:5 None None) (arg &x:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:5 Load) s_color Load)\n                  (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &x:5 Load)) nil)\n                  Store\n                )\n              )\n              (Constant i1 None)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:1\n          (arguments nil (list (arg &self:6 None None) (arg &x:6 None None) (arg &y:6 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &rx:6 Store))\n              (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &x:6 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &ry:6 Store))\n              (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &y:6 Load)) nil)\n              None\n            )\n            (If\n              (Compare (Name &rx:6 Load) (list NotEq) (list (Name &ry:6 Load)))\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Attribute (Name &self:6 Load) s_par Load) (Name &rx:6 Load) Load)\n                    (list Gt)\n                    (list (Subscript (Attribute (Name &self:6 Load) s_par Load) (Name &ry:6 Load) Load))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Tuple (list (Name &rx:6 Store) (Name &ry:6 Store)) Store))\n                      (Tuple (list (Name &ry:6 Load) (Name &rx:6 Load)) Load)\n                      None\n                    )\n                  )\n                  nil\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:6 Load) s_par Load) (Name &rx:6 Load) Store)\n                  Add\n                  (Subscript (Attribute (Name &self:6 Load) s_par Load) (Name &ry:6 Load) Load)\n                )\n                (Assign\n                  (list (Subscript (Attribute (Name &self:6 Load) s_par Load) (Name &ry:6 Load) Store))\n                  (Name &rx:6 Load)\n                  None\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:6 Load) s_color Load) (Name &rx:6 Load) Store)\n                  BitOr\n                  (Subscript (Attribute (Name &self:6 Load) s_color Load) (Name &ry:6 Load) Load)\n                )\n                (Return (Constant True None))\n              )\n              nil\n            )\n            (Return (Constant False None))\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list (Tuple (list (Name &N:0 Store) (Name &M:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &readline:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n    (Assign (list (Name &T:0 Store)) (Call (Name &UF:0 Load) (list (Name &M:0 Load)) nil) None)\n    (For\n      (Name &m:0 Store)\n      (Call (Name g_range Load) (list (Name &N:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &k:0 Store) (Starred (Name &x:0 Store) Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &readline:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &k:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Assign\n              (list (Name &u:0 Store))\n              (BinOp (Subscript (Name &x:0 Load) (Constant i0 None) Load) Sub (Constant i1 None))\n              None\n            )\n            (If\n              (UnaryOp Not (Call (Attribute (Name &T:0 Load) s_col Load) (list (Name &u:0 Load)) nil))\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &ans:0 Load) s_append Load)\n                    (list (BinOp (Name &m:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n                (Expr (Call (Attribute (Name &T:0 Load) s_paint Load) (list (Name &u:0 Load)) nil))\n              )\n              nil\n            )\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n              (Tuple\n                (list\n                  (BinOp (Subscript (Name &x:0 Load) (Constant i0 None) Load) Sub (Constant i1 None))\n                  (BinOp (Subscript (Name &x:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Call (Attribute (Name &T:0 Load) s_col Load) (list (Name &u:0 Load)) nil)\n                  (Call (Attribute (Name &T:0 Load) s_col Load) (list (Name &v:0 Load)) nil)\n                )\n              )\n              (/seq Continue)\n              nil\n            )\n            (If\n              (Call (Attribute (Name &T:0 Load) s_union Load) (list (Name &u:0 Load) (Name &v:0 Load)) nil)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &ans:0 Load) s_append Load)\n                    (list (BinOp (Name &m:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Name g_pow Load)\n            (list (Constant i2 None) (Call (Name g_len Load) (list (Name &ans:0 Load)) nil) (Name &MOD:0 Load))\n            nil\n          )\n          (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)\n        )\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Attribute (Constant s-WzMyXQ== None) s_join Load)\n            (list (Call (Name g_map Load) (list (Name g_str Load) (Name &ans:0 Load)) nil))\n            nil\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ClassDef\n      &UnionFindVerSize:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &N:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s__parent Store))\n              (ListComp\n                (Name &n:9 Load)\n                (list\n                  (comprehension\n                    (Name &n:9 Store)\n                    (Call (Name g_range Load) (list (Constant i0 None) (Name &N:2 Load)) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:2 Load) s__size Store))\n              (BinOp (List (list (Constant i1 None)) Load) Mult (Name &N:2 Load))\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_source Store))\n              (BinOp (List (list (Constant False None)) Load) Mult (Name &N:2 Load))\n              None\n            )\n            (Assign (list (Attribute (Name &self:2 Load) s_group Store)) (Name &N:2 Load) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find_root:1\n          (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Attribute (Name &self:3 Load) s__parent Load) (Name &x:3 Load) Load)\n                (list Eq)\n                (list (Name &x:3 Load))\n              )\n              (/seq (Return (Name &x:3 Load)))\n              nil\n            )\n            (Assign\n              (list (Subscript (Attribute (Name &self:3 Load) s__parent Load) (Name &x:3 Load) Store))\n              (Call\n                (Attribute (Name &self:3 Load) s_find_root Load)\n                (list (Subscript (Attribute (Name &self:3 Load) s__parent Load) (Name &x:3 Load) Load))\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &stack:3 Store)) (List (list (Name &x:3 Load)) Load) None)\n            (While\n              (Compare\n                (Subscript\n                  (Attribute (Name &self:3 Load) s__parent Load)\n                  (Subscript (Name &stack:3 Load) (UnaryOp USub (Constant i1 None)) Load)\n                  Load\n                )\n                (list NotEq)\n                (list (Subscript (Name &stack:3 Load) (UnaryOp USub (Constant i1 None)) Load))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &stack:3 Load) s_append Load)\n                    (list\n                      (Subscript\n                        (Attribute (Name &self:3 Load) s__parent Load)\n                        (Subscript (Name &stack:3 Load) (UnaryOp USub (Constant i1 None)) Load)\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (For\n              (Name &v:3 Store)\n              (Name &stack:3 Load)\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:3 Load) s__parent Load) (Name &v:3 Load) Store))\n                  (Subscript (Name &stack:3 Load) (UnaryOp USub (Constant i1 None)) Load)\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (Return (Subscript (Attribute (Name &self:3 Load) s__parent Load) (Name &x:3 Load) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &unite:1\n          (arguments nil (list (arg &self:4 None None) (arg &x:4 None None) (arg &y:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &gx:4 Store))\n              (Call (Attribute (Name &self:4 Load) s_find_root Load) (list (Name &x:4 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &gy:4 Store))\n              (Call (Attribute (Name &self:4 Load) s_find_root Load) (list (Name &y:4 Load)) nil)\n              None\n            )\n            (If (Compare (Name &gx:4 Load) (list Eq) (list (Name &gy:4 Load))) (/seq (Return None)) nil)\n            (AugAssign (Attribute (Name &self:4 Load) s_group Store) Sub (Constant i1 None))\n            (If\n              (Compare\n                (Subscript (Attribute (Name &self:4 Load) s__size Load) (Name &gx:4 Load) Load)\n                (list Lt)\n                (list (Subscript (Attribute (Name &self:4 Load) s__size Load) (Name &gy:4 Load) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:4 Load) s__parent Load) (Name &gx:4 Load) Store))\n                  (Name &gy:4 Load)\n                  None\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:4 Load) s__size Load) (Name &gy:4 Load) Store)\n                  Add\n                  (Subscript (Attribute (Name &self:4 Load) s__size Load) (Name &gx:4 Load) Load)\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:4 Load) s_source Load) (Name &gy:4 Load) Store)\n                  BitOr\n                  (Subscript (Attribute (Name &self:4 Load) s_source Load) (Name &gx:4 Load) Load)\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:4 Load) s__parent Load) (Name &gy:4 Load) Store))\n                  (Name &gx:4 Load)\n                  None\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:4 Load) s__size Load) (Name &gx:4 Load) Store)\n                  Add\n                  (Subscript (Attribute (Name &self:4 Load) s__size Load) (Name &gy:4 Load) Load)\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:4 Load) s_source Load) (Name &gx:4 Load) Store)\n                  BitOr\n                  (Subscript (Attribute (Name &self:4 Load) s_source Load) (Name &gy:4 Load) Load)\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add_size:1\n          (arguments nil (list (arg &self:5 None None) (arg &x:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:5 Load) s_source Load)\n                  (Call (Attribute (Name &self:5 Load) s_find_root Load) (list (Name &x:5 Load)) nil)\n                  Store\n                )\n              )\n              (Constant True None)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get_size:1\n          (arguments nil (list (arg &self:6 None None) (arg &x:6 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:6 Load) s__size Load)\n                (Call (Attribute (Name &self:6 Load) s_find_root Load) (list (Name &x:6 Load)) nil)\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &get_source:1\n          (arguments nil (list (arg &self:7 None None) (arg &x:7 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:7 Load) s_source Load)\n                (Call (Attribute (Name &self:7 Load) s_find_root Load) (list (Name &x:7 Load)) nil)\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &is_same_group:1\n          (arguments nil (list (arg &self:8 None None) (arg &x:8 None None) (arg &y:8 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Compare\n                (Call (Attribute (Name &self:8 Load) s_find_root Load) (list (Name &x:8 Load)) nil)\n                (list Eq)\n                (list (Call (Attribute (Name &self:8 Load) s_find_root Load) (list (Name &y:8 Load)) nil))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &m:0 Store) (Name &n:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &uf:0 Store)) (Call (Name &UnionFindVerSize:0 Load) (list (Name &n:0 Load)) nil) None)\n    (Assign (list (Name &S:0 Store)) (List nil Load) None)\n    (Assign (list (Name &source:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &m:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &edge:0 Store))\n          (Call\n            (Name g_tuple Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Subscript (Name &edge:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Assign (list (Name &v:0 Store)) (Subscript (Name &edge:0 Load) (Constant i1 None) Load) None)\n            (If\n              (UnaryOp\n                Not\n                (Call\n                  (Attribute (Name &uf:0 Load) s_get_source Load)\n                  (list (BinOp (Name &v:0 Load) Sub (Constant i1 None)))\n                  nil\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &uf:0 Load) s_add_size Load)\n                    (list (BinOp (Name &v:0 Load) Sub (Constant i1 None)))\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &S:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n              (Tuple\n                (list\n                  (Subscript (Name &edge:0 Load) (Constant i1 None) Load)\n                  (Subscript (Name &edge:0 Load) (Constant i2 None) Load)\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (UnaryOp\n                    Not\n                    (Call\n                      (Attribute (Name &uf:0 Load) s_is_same_group Load)\n                      (list\n                        (BinOp (Name &u:0 Load) Sub (Constant i1 None))\n                        (BinOp (Name &v:0 Load) Sub (Constant i1 None))\n                      )\n                      nil\n                    )\n                  )\n                  (BoolOp\n                    Or\n                    (list\n                      (UnaryOp\n                        Not\n                        (Call\n                          (Attribute (Name &uf:0 Load) s_get_source Load)\n                          (list (BinOp (Name &u:0 Load) Sub (Constant i1 None)))\n                          nil\n                        )\n                      )\n                      (UnaryOp\n                        Not\n                        (Call\n                          (Attribute (Name &uf:0 Load) s_get_source Load)\n                          (list (BinOp (Name &v:0 Load) Sub (Constant i1 None)))\n                          nil\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &uf:0 Load) s_unite Load)\n                    (list\n                      (BinOp (Name &u:0 Load) Sub (Constant i1 None))\n                      (BinOp (Name &v:0 Load) Sub (Constant i1 None))\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &S:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i1 None) None)\n    (Assign (list (Name &k:0 Store)) (Constant i0 None) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Attribute (Name &uf:0 Load) s_find_root Load) (list (Name &i:0 Load)) nil)\n            (list Eq)\n            (list (Name &i:0 Load))\n          )\n          (/seq\n            (If\n              (Call (Attribute (Name &uf:0 Load) s_get_source Load) (list (Name &i:0 Load)) nil)\n              (/seq\n                (AugAssign\n                  (Name &k:0 Store)\n                  Add\n                  (Call (Attribute (Name &uf:0 Load) s_get_size Load) (list (Name &i:0 Load)) nil)\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Name &k:0 Store)\n                  Add\n                  (BinOp\n                    (Call (Attribute (Name &uf:0 Load) s_get_size Load) (list (Name &i:0 Load)) nil)\n                    Sub\n                    (Constant i1 None)\n                  )\n                )\n              )\n            )\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call (Name g_pow Load) (list (Constant i2 None) (Name &k:0 Load) (Name &mod:0 Load)) nil)\n          (Call (Name g_len Load) (list (Name &S:0 Load)) nil)\n        )\n        nil\n      )\n    )\n    (Expr (Call (Attribute (Name &S:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Name g_print Load) (list (Starred (Name &S:0 Load) Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None) (alias g_io None) (alias g_os None)))\n    (ImportFrom s_collections (list (alias g_deque None)) i0)\n    (Try\n      (/seq\n        (Assign\n          (list (Name &Z:0 Store))\n          (Attribute\n            (Call\n              (Attribute (Name g_io Load) s_BytesIO Load)\n              (list\n                (Call\n                  (Attribute (Name g_os Load) s_read Load)\n                  (list\n                    (Constant i0 None)\n                    (Attribute\n                      (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil)\n                      s_st_size\n                      Load\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n            s_readline\n            Load\n          )\n          None\n        )\n      )\n      (list\n        (ExceptHandler\n          None\n          None\n          (/seq\n            (Assign\n              (list (Name &Z:0 Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                    s_encode\n                    Load\n                  )\n                  nil\n                  nil\n                )\n              )\n              None\n            )\n          )\n        )\n      )\n      nil\n      nil\n    )\n    (Assign\n      (list (Name &Y:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list (Name g_int Load) (Call (Attribute (Call (Name &Z:0 Load) nil nil) s_split Load) nil nil))\n          nil\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Tuple (list (Name &n:0 Store) (Name &N:0 Store)) Store)) (Call (Name &Y:0 Load) nil nil) None)\n    (FunctionDef\n      &path:0\n      (arguments nil (list (arg &R:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &H:1 Store)) (Call (Name g_deque Load) nil nil) None)\n        (Expr (Call (Attribute (Name &H:1 Load) s_append Load) (list (Name &R:1 Load)) nil))\n        (While\n          (Compare (Subscript (Name &P:0 Load) (Name &R:1 Load) Load) (list GtE) (list (Constant i0 None)))\n          (/seq\n            (Assign (list (Name &R:1 Store)) (Subscript (Name &P:0 Load) (Name &R:1 Load) Load) None)\n            (Expr (Call (Attribute (Name &H:1 Load) s_append Load) (list (Name &R:1 Load)) nil))\n            (If\n              (Compare (Call (Name g_len Load) (list (Name &H:1 Load)) nil) (list Gt) (list (Constant i2 None)))\n              (/seq\n                (Assign\n                  (list (Subscript (Name &P:0 Load) (Call (Attribute (Name &H:1 Load) s_popleft Load) nil nil) Store))\n                  (Subscript (Name &H:1 Load) (UnaryOp USub (Constant i1 None)) Load)\n                  None\n                )\n              )\n              nil\n            )\n          )\n          nil\n        )\n        (Return (Name &R:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &K:0 Store))\n      (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &N:0 Load))\n      None\n    )\n    (Assign\n      (list (Name &P:0 Store))\n      (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &N:0 Load))\n      None\n    )\n    (Assign (list (Name &S:0 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &N:0 Load)) None)\n    (Assign (list (Name &R:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &B:0 Store)) (List nil Load) None)\n    (Assign (list (Name &alr:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign (list (Name &k:0 Store)) (Tuple (list (Starred (Call (Name &Y:0 Load) nil nil) Load)) Load) None)\n        (If\n          (Compare (Subscript (Name &k:0 Load) (Constant i0 None) Load) (list Lt) (list (Constant i2 None)))\n          (/seq\n            (Assign\n              (list (Name &a:0 Store))\n              (BinOp (Subscript (Name &k:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n              None\n            )\n            (If\n              (Compare (Subscript (Name &K:0 Load) (Name &a:0 Load) Load) (list GtE) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &v:0 Store))\n                  (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Load)) nil)\n                  None\n                )\n                (If\n                  (UnaryOp Not (Subscript (Name &alr:0 Load) (Name &v:0 Load) Load))\n                  (/seq (Assign (list (Subscript (Name &alr:0 Load) (Name &v:0 Load) Store)) (Constant i1 None) None))\n                  (/seq Continue)\n                )\n              )\n              (/seq\n                (Assign (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Store)) (Name &R:0 Load) None)\n                (Assign (list (Name &v:0 Store)) (Name &R:0 Load) None)\n                (Assign (list (Subscript (Name &alr:0 Load) (Name &R:0 Load) Store)) (Constant i1 None) None)\n                (AugAssign (Name &R:0 Store) Add (Constant i1 None))\n              )\n            )\n            (Expr\n              (Call\n                (Attribute (Name &B:0 Load) s_append Load)\n                (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                nil\n              )\n            )\n            Continue\n          )\n          nil\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (BinOp (Subscript (Name &k:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n          None\n        )\n        (Assign\n          (list (Name &b:0 Store))\n          (BinOp (Subscript (Name &k:0 Load) (Constant i2 None) Load) Sub (Constant i1 None))\n          None\n        )\n        (If\n          (Compare (Subscript (Name &K:0 Load) (Name &a:0 Load) Load) (list GtE) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (Subscript (Name &K:0 Load) (Name &b:0 Load) Load) (list GtE) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &va:0 Store) (Name &vb:0 Store)) Store))\n                  (Tuple\n                    (list\n                      (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Load)) nil)\n                      (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Load)) nil)\n                    )\n                    Load\n                  )\n                  None\n                )\n                (If\n                  (BoolOp\n                    Or\n                    (list\n                      (Compare (Name &va:0 Load) (list Eq) (list (Name &vb:0 Load)))\n                      (BoolOp\n                        And\n                        (list\n                          (Subscript (Name &alr:0 Load) (Name &va:0 Load) Load)\n                          (Subscript (Name &alr:0 Load) (Name &vb:0 Load) Load)\n                        )\n                      )\n                    )\n                  )\n                  (/seq Pass)\n                  (/seq\n                    (Assign\n                      (list (Tuple (list (Name &sa:0 Store) (Name &sb:0 Store)) Store))\n                      (Tuple\n                        (list\n                          (Subscript (Name &S:0 Load) (Name &va:0 Load) Load)\n                          (Subscript (Name &S:0 Load) (Name &vb:0 Load) Load)\n                        )\n                        Load\n                      )\n                      None\n                    )\n                    (If\n                      (Compare (Name &sa:0 Load) (list Gt) (list (Name &sb:0 Load)))\n                      (/seq (Assign (list (Subscript (Name &P:0 Load) (Name &vb:0 Load) Store)) (Name &va:0 Load) None))\n                      (/seq\n                        (Assign (list (Subscript (Name &P:0 Load) (Name &va:0 Load) Store)) (Name &vb:0 Load) None)\n                        (If\n                          (Compare (Name &sa:0 Load) (list Eq) (list (Name &sb:0 Load)))\n                          (/seq (AugAssign (Subscript (Name &S:0 Load) (Name &vb:0 Load) Store) Add (Constant i1 None)))\n                          nil\n                        )\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &B:0 Load) s_append Load)\n                        (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        nil\n                      )\n                    )\n                    (If\n                      (Subscript (Name &alr:0 Load) (Name &va:0 Load) Load)\n                      (/seq\n                        (Assign (list (Subscript (Name &alr:0 Load) (Name &vb:0 Load) Store)) (Constant i1 None) None)\n                      )\n                      nil\n                    )\n                    (If\n                      (Subscript (Name &alr:0 Load) (Name &vb:0 Load) Load)\n                      (/seq\n                        (Assign (list (Subscript (Name &alr:0 Load) (Name &va:0 Load) Store)) (Constant i1 None) None)\n                      )\n                      nil\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Store))\n                  (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Load)) nil)\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &B:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          (/seq\n            (If\n              (Compare (Subscript (Name &K:0 Load) (Name &b:0 Load) Load) (list GtE) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &vb:0 Store) (Subscript (Name &K:0 Load) (Name &a:0 Load) Store))\n                  (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Load)) nil)\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute (Name &B:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Assign (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Store)) (Name &R:0 Load) None)\n                (Assign (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Store)) (Name &R:0 Load) None)\n                (AugAssign (Name &R:0 Store) Add (Constant i1 None))\n                (Expr\n                  (Call\n                    (Attribute (Name &B:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Call (Name g_len Load) (list (Name &B:0 Load)) nil) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Call (Name g_pow Load) (list (Constant i2 None) (Name &s:0 Load) (Name &M:0 Load)) nil) (Name &s:0 Load))\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Attribute (Constant s-WzMyXQ== None) s_join Load)\n            (list (Call (Name g_map Load) (list (Name g_str Load) (Name &B:0 Load)) nil))\n            nil\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_io None)))\n    (Import (list (alias g_os None)))\n    (ImportFrom s_collections (list (alias g_Counter None) (alias g_defaultdict None) (alias g_deque None)) i0)\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (ClassDef\n      &UnionFind:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &N:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_p Store))\n              (ListComp\n                (UnaryOp USub (Constant i1 None))\n                (list (comprehension (Name &i:7 Store) (Call (Name g_range Load) (list (Name &N:3 Load)) nil) nil i0))\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:4 None None) (arg &i:4 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Attribute (Name &self:4 Load) s_p Load) (Name &i:4 Load) Load)\n                (list GtE)\n                (list (Constant i0 None))\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:4 Load) s_p Load) (Name &i:4 Load) Store))\n                  (Call\n                    (Attribute (Name &self:4 Load) s_find Load)\n                    (list (Subscript (Attribute (Name &self:4 Load) s_p Load) (Name &i:4 Load) Load))\n                    nil\n                  )\n                  None\n                )\n                (Return (Subscript (Attribute (Name &self:4 Load) s_p Load) (Name &i:4 Load) Load))\n              )\n              (/seq (Return (Name &i:4 Load)))\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:1\n          (arguments nil (list (arg &self:5 None None) (arg &i:5 None None) (arg &j:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &root1:5 Store))\n              (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &j:5 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &root2:5 Store))\n              (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &i:5 Load)) nil)\n              None\n            )\n            (If (Compare (Name &root1:5 Load) (list Eq) (list (Name &root2:5 Load))) (/seq (Return None)) nil)\n            (Assign\n              (list (Name &size1:5 Store))\n              (UnaryOp USub (Subscript (Attribute (Name &self:5 Load) s_p Load) (Name &root1:5 Load) Load))\n              None\n            )\n            (Assign\n              (list (Name &size2:5 Store))\n              (UnaryOp USub (Subscript (Attribute (Name &self:5 Load) s_p Load) (Name &root2:5 Load) Load))\n              None\n            )\n            (If\n              (Compare (Name &size1:5 Load) (list Lt) (list (Name &size2:5 Load)))\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:5 Load) s_p Load) (Name &root1:5 Load) Store))\n                  (Name &root2:5 Load)\n                  None\n                )\n                (Assign\n                  (list (Subscript (Attribute (Name &self:5 Load) s_p Load) (Name &root2:5 Load) Store))\n                  (UnaryOp USub (BinOp (Name &size1:5 Load) Add (Name &size2:5 Load)))\n                  None\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:5 Load) s_p Load) (Name &root2:5 Load) Store))\n                  (Name &root1:5 Load)\n                  None\n                )\n                (Assign\n                  (list (Subscript (Attribute (Name &self:5 Load) s_p Load) (Name &root1:5 Load) Store))\n                  (UnaryOp USub (BinOp (Name &size1:5 Load) Add (Name &size2:5 Load)))\n                  None\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &getComponentSize:1\n          (arguments nil (list (arg &self:6 None None) (arg &i:6 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (UnaryOp\n                USub\n                (Subscript\n                  (Attribute (Name &self:6 Load) s_p Load)\n                  (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &i:6 Load)) nil)\n                  Load\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &N:2 None None) (arg &M:2 None None) (arg &vectors:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &uf:2 Store))\n          (Call (Name &UnionFind:0 Load) (list (BinOp (Name &M:2 Load) Add (Constant i1 None))) nil)\n          None\n        )\n        (Assign (list (Name &DUMMY_COMP:2 Store)) (Name &M:2 Load) None)\n        (Assign (list (Name &ans:2 Store)) (List nil Load) None)\n        (For\n          (Tuple (list (Name &i:2 Store) (Name &v:2 Store)) Store)\n          (Call (Name g_enumerate Load) (list (Name &vectors:2 Load)) nil)\n          (/seq\n            (If\n              (Compare (Call (Name g_len Load) (list (Name &v:2 Load)) nil) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (Assign (list (Tuple (list (Name &a:2 Store)) Store)) (Name &v:2 Load) None)\n                (If\n                  (Compare\n                    (Call (Attribute (Name &uf:2 Load) s_find Load) (list (Name &a:2 Load)) nil)\n                    (list NotEq)\n                    (list (Call (Attribute (Name &uf:2 Load) s_find Load) (list (Name &DUMMY_COMP:2 Load)) nil))\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &uf:2 Load) s_union Load)\n                        (list (Name &a:2 Load) (Name &DUMMY_COMP:2 Load))\n                        nil\n                      )\n                    )\n                    (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (Name &i:2 Load)) nil))\n                  )\n                  nil\n                )\n              )\n              (/seq\n                (Assert\n                  (Compare (Call (Name g_len Load) (list (Name &v:2 Load)) nil) (list Eq) (list (Constant i2 None)))\n                  None\n                )\n                (Assign (list (Tuple (list (Name &a:2 Store) (Name &b:2 Store)) Store)) (Name &v:2 Load) None)\n                (If\n                  (Compare\n                    (Call (Attribute (Name &uf:2 Load) s_find Load) (list (Name &a:2 Load)) nil)\n                    (list NotEq)\n                    (list (Call (Attribute (Name &uf:2 Load) s_find Load) (list (Name &b:2 Load)) nil))\n                  )\n                  (/seq\n                    (Expr\n                      (Call (Attribute (Name &uf:2 Load) s_union Load) (list (Name &a:2 Load) (Name &b:2 Load)) nil)\n                    )\n                    (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (Name &i:2 Load)) nil))\n                  )\n                  nil\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (Name &M:2 Load)) nil)\n          (/seq (Expr (Call (Attribute (Name &uf:2 Load) s_find Load) (list (Name &i:2 Load)) nil)))\n          nil\n          None\n        )\n        (Assign\n          (list (Name &T:2 Store))\n          (Call\n            (Name g_pow Load)\n            (list\n              (Constant i2 None)\n              (BinOp\n                (Call (Attribute (Name &uf:2 Load) s_getComponentSize Load) (list (Name &DUMMY_COMP:2 Load)) nil)\n                Sub\n                (Constant i1 None)\n              )\n              (Name &MOD:0 Load)\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &T:2 Store) Mod (Name &MOD:0 Load))\n        (Assign (list (Name &seen:2 Store)) (Call (Name g_set Load) nil nil) None)\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (Name &M:2 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &comp:2 Store))\n              (Call (Attribute (Name &uf:2 Load) s_find Load) (list (Name &i:2 Load)) nil)\n              None\n            )\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare\n                    (Name &comp:2 Load)\n                    (list NotEq)\n                    (list (Call (Attribute (Name &uf:2 Load) s_find Load) (list (Name &DUMMY_COMP:2 Load)) nil))\n                  )\n                  (Compare (Name &comp:2 Load) (list NotIn) (list (Name &seen:2 Load)))\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Name &T:2 Store)\n                  Mult\n                  (Call\n                    (Name g_pow Load)\n                    (list\n                      (Constant i2 None)\n                      (BinOp\n                        (Call (Attribute (Name &uf:2 Load) s_getComponentSize Load) (list (Name &i:2 Load)) nil)\n                        Sub\n                        (Constant i1 None)\n                      )\n                      (Name &MOD:0 Load)\n                    )\n                    nil\n                  )\n                )\n                (AugAssign (Name &T:2 Store) Mod (Name &MOD:0 Load))\n                (Expr (Call (Attribute (Name &seen:2 Load) s_add Load) (list (Name &comp:2 Load)) nil))\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return\n          (BinOp\n            (BinOp\n              (BinOp\n                (BinOp (Call (Name g_str Load) (list (Name &T:2 Load)) nil) Add (Constant s-WzMyXQ== None))\n                Add\n                (Call (Name g_str Load) (list (Call (Name g_len Load) (list (Name &ans:2 Load)) nil)) nil)\n              )\n              Add\n              (Constant s-WzEwXQ== None)\n            )\n            Add\n            (Call\n              (Attribute (Constant s-WzMyXQ== None) s_join Load)\n              (list\n                (GeneratorExp\n                  (Call (Name g_str Load) (list (BinOp (Name &i:10 Load) Add (Constant i1 None))) nil)\n                  (list (comprehension (Name &i:10 Store) (Name &ans:2 Load) nil i0))\n                )\n              )\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Assign\n          (list (Name &input:0 Store))\n          (Attribute\n            (Call\n              (Attribute (Name g_io Load) s_BytesIO Load)\n              (list\n                (Call\n                  (Attribute (Name g_os Load) s_read Load)\n                  (list\n                    (Constant i0 None)\n                    (Attribute\n                      (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil)\n                      s_st_size\n                      Load\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n            s_readline\n            Load\n          )\n          None\n        )\n        (Assign (list (Name &TC:0 Store)) (Constant i1 None) None)\n        (For\n          (Name &tc:0 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &TC:0 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &N:0 Store) (Name &M:0 Store)) Store))\n              (ListComp\n                (Call (Name g_int Load) (list (Name &x:8 Load)) nil)\n                (list\n                  (comprehension\n                    (Name &x:8 Store)\n                    (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Name &vectors:0 Store))\n              (ListComp\n                (Subscript\n                  (ListComp\n                    (BinOp (Call (Name g_int Load) (list (Name &x:11 Load)) nil) Sub (Constant i1 None))\n                    (list\n                      (comprehension\n                        (Name &x:11 Store)\n                        (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                  (Slice (Constant i1 None) None None)\n                  Load\n                )\n                (list (comprehension (Name &i:9 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) nil i0))\n              )\n              None\n            )\n            (Assign\n              (list (Name &ans:0 Store))\n              (Call (Name &solve:0 Load) (list (Name &N:0 Load) (Name &M:0 Load) (Name &vectors:0 Load)) nil)\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n          )\n          nil\n          None\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:6 None None) (arg &file:6 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:6 Load) s_newlines Store)) (Constant i0 None) None)\n            (Assign\n              (list (Attribute (Name &self:6 Load) s__fd Store))\n              (Call (Attribute (Name &file:6 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:6 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:6 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:6 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:6 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:6 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:6 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:7 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:7 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:7 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:7 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:7 Store))\n                  (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:7 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:7 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:7 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:8 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:8 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:8 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:8 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:8 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:8 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:8 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:8 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:8 Store))\n                  (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:8 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:8 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:8 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:9 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:9 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:9 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:10 None None) (arg &file:10 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:10 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:11 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:11 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n      )\n      None\n    )\n    (FunctionDef\n      &RL:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute\n                  (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &RLL:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Name g_int Load)\n                  (Call\n                    (Attribute\n                      (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                      s_split\n                      Load\n                    )\n                    nil\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &N:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &S:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &print_list:0\n      (arguments nil (list (arg &l:3 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                (list (Call (Name g_map Load) (list (Name g_str Load) (Name &l:3 Load)) nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &find:0\n      (arguments nil (list (arg &region:4 None None) (arg &u:4 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &path:4 Store)) (List nil Load) None)\n        (While\n          (Compare (Subscript (Name &region:4 Load) (Name &u:4 Load) Load) (list NotEq) (list (Name &u:4 Load)))\n          (/seq\n            (Expr (Call (Attribute (Name &path:4 Load) s_append Load) (list (Name &u:4 Load)) nil))\n            (Assign (list (Name &u:4 Store)) (Subscript (Name &region:4 Load) (Name &u:4 Load) Load) None)\n          )\n          nil\n        )\n        (For\n          (Name &v:4 Store)\n          (Name &path:4 Load)\n          (/seq (Assign (list (Subscript (Name &region:4 Load) (Name &v:4 Load) Store)) (Name &u:4 Load) None))\n          nil\n          None\n        )\n        (Return (Name &u:4 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &union:0\n      (arguments nil (list (arg &region:5 None None) (arg &u:5 None None) (arg &v:5 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:5 Store) (Name &v:5 Store)) Store))\n          (Tuple\n            (list\n              (Call (Name &find:0 Load) (list (Name &region:5 Load) (Name &u:5 Load)) nil)\n              (Call (Name &find:0 Load) (list (Name &region:5 Load) (Name &v:5 Load)) nil)\n            )\n            Load\n          )\n          None\n        )\n        (Assign (list (Subscript (Name &region:5 Load) (Name &u:5 Load) Store)) (Name &v:5 Load) None)\n        (Return (Compare (Name &u:5 Load) (list NotEq) (list (Name &v:5 Load))))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &M:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (Call (Name &RL:0 Load) nil nil) None)\n    (Assign\n      (list (Name &region:0 Store))\n      (Call\n        (Name g_list Load)\n        (list (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign (list (Name &s:0 Store)) (Call (Name &RLL:0 Load) nil nil) None)\n        (Assign\n          (list (Name &t:0 Store))\n          (IfExp\n            (Compare (Subscript (Name &s:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i2 None)))\n            (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n            (Constant i0 None)\n          )\n          None\n        )\n        (If\n          (Call\n            (Name &union:0 Load)\n            (list (Name &region:0 Load) (Subscript (Name &s:0 Load) (Constant i1 None) Load) (Name &t:0 Load))\n            nil\n          )\n          (/seq (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &i:0 Load)) nil)))\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Name &res:0 Store))\n          (BinOp (BinOp (Name &res:0 Load) LShift (Constant i1 None)) Mod (Name &M:0 Load))\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call (Name g_print Load) (list (Name &res:0 Load) (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)) nil)\n    )\n    (Expr (Call (Name &print_list:0 Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (ClassDef\n      &UnionFind:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:5 None None) (arg &n:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:5 Load) s_parent Store))\n              (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:5 Load)) nil)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:6 None None) (arg &a:6 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &acopy:6 Store)) (Name &a:6 Load) None)\n            (While\n              (Compare\n                (Name &a:6 Load)\n                (list NotEq)\n                (list (Subscript (Attribute (Name &self:6 Load) s_parent Load) (Name &a:6 Load) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &a:6 Store))\n                  (Subscript (Attribute (Name &self:6 Load) s_parent Load) (Name &a:6 Load) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (While\n              (Compare (Name &acopy:6 Load) (list NotEq) (list (Name &a:6 Load)))\n              (/seq\n                (Assign\n                  (list\n                    (Tuple\n                      (list\n                        (Subscript (Attribute (Name &self:6 Load) s_parent Load) (Name &acopy:6 Load) Store)\n                        (Name &acopy:6 Store)\n                      )\n                      Store\n                    )\n                  )\n                  (Tuple\n                    (list\n                      (Name &a:6 Load)\n                      (Subscript (Attribute (Name &self:6 Load) s_parent Load) (Name &acopy:6 Load) Load)\n                    )\n                    Load\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &a:6 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:1\n          (arguments nil (list (arg &self:7 None None) (arg &a:7 None None) (arg &b:7 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:7 Load) s_parent Load)\n                  (Call (Attribute (Name &self:7 Load) s_find Load) (list (Name &b:7 Load)) nil)\n                  Store\n                )\n              )\n              (Call (Attribute (Name &self:7 Load) s_find Load) (list (Name &a:7 Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &m:4 Store) (Name &n:4 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:4 Store)) (Constant i0 None) None)\n        (Assign (list (Name &ans2:4 Store)) (List nil Load) None)\n        (Assign\n          (list (Name &color:4 Store))\n          (Call (Name &UnionFind:0 Load) (list (BinOp (Name &n:4 Load) Add (Constant i1 None))) nil)\n          None\n        )\n        (For\n          (Name &i:4 Store)\n          (Call (Name g_range Load) (list (Name &m:4 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &t:4 Store))\n              (Call\n                (Name g_list Load)\n                (list\n                  (Call\n                    (Name g_map Load)\n                    (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                    nil\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Subscript (Name &t:4 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (If\n                  (Compare\n                    (Call (Attribute (Name &color:4 Load) s_find Load) (list (Name &n:4 Load)) nil)\n                    (list NotEq)\n                    (list\n                      (Call\n                        (Attribute (Name &color:4 Load) s_find Load)\n                        (list (BinOp (Subscript (Name &t:4 Load) (Constant i1 None) Load) Sub (Constant i1 None)))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &ans2:4 Load) s_append Load)\n                        (list (BinOp (Name &i:4 Load) Add (Constant i1 None)))\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &color:4 Load) s_union Load)\n                        (list\n                          (Name &n:4 Load)\n                          (BinOp (Subscript (Name &t:4 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n              (/seq\n                (If\n                  (Compare\n                    (Call\n                      (Attribute (Name &color:4 Load) s_find Load)\n                      (list (BinOp (Subscript (Name &t:4 Load) (Constant i2 None) Load) Sub (Constant i1 None)))\n                      nil\n                    )\n                    (list NotEq)\n                    (list\n                      (Call\n                        (Attribute (Name &color:4 Load) s_find Load)\n                        (list (BinOp (Subscript (Name &t:4 Load) (Constant i1 None) Load) Sub (Constant i1 None)))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &ans2:4 Load) s_append Load)\n                        (list (BinOp (Name &i:4 Load) Add (Constant i1 None)))\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &color:4 Load) s_union Load)\n                        (list\n                          (BinOp (Subscript (Name &t:4 Load) (Constant i2 None) Load) Sub (Constant i1 None))\n                          (BinOp (Subscript (Name &t:4 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                        )\n                        nil\n                      )\n                    )\n                  )\n                  nil\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (BinOp\n                (BinOp\n                  (Call\n                    (Name g_str Load)\n                    (list\n                      (Call\n                        (Name g_pow Load)\n                        (list\n                          (Constant i2 None)\n                          (Call (Name g_len Load) (list (Name &ans2:4 Load)) nil)\n                          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  Add\n                  (Constant s-WzMyXQ== None)\n                )\n                Add\n                (Call (Name g_str Load) (list (Call (Name g_len Load) (list (Name &ans2:4 Load)) nil)) nil)\n              )\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                (list (Call (Name g_map Load) (list (Name g_str Load) (Name &ans2:4 Load)) nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:2 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:8 None None) (arg &file:8 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:8 Load) s__fd Store))\n              (Call (Attribute (Name &file:8 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:8 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:8 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:8 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:8 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:2\n          (arguments nil (list (arg &self:9 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:9 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:9 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:9 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:9 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:9 Store))\n                  (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:9 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:9 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:9 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:2\n          (arguments nil (list (arg &self:10 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:10 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:10 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:10 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:10 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:10 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:10 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:10 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:10 Store))\n                  (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:10 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:10 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:10 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:2\n          (arguments nil (list (arg &self:11 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:11 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:11 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:3\n          (arguments nil (list (arg &self:12 None None) (arg &file:12 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:12 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:12 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:12 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:12 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:12 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:13 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:13 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:12 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:12 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute\n        (Call\n          (Name g_iter Load)\n          (list\n            (Call\n              (Attribute\n                (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_read Load) nil nil)\n                s_splitlines\n                Load\n              )\n              nil\n              nil\n            )\n          )\n          nil\n        )\n        s___next__\n        Load\n      )\n      None\n    )\n    (ClassDef\n      &UnionFind:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Constant\n                s-WzMyLCAxMDEsIDEwOCwgMTAxLCAxMDksIDEwMSwgMTEwLCAxMTYsIDExNSwgMzIsIDk3LCAxMTQsIDEwMSwgMzIsIDQ4LCA0NCwgMzIsIDQ5LCA0NCwgMzIsIDUwLCA0NCwgMzIsIDQ2LCA0NiwgNDYsIDQ0LCAzMiwgMTEwLCA0NSwgNDksIDMyXQ==\n                None\n              )\n            )\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_parent Store))\n              (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:2 Load)) nil)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &found:3 Store)) (Name &x:3 Load) None)\n            (While\n              (Compare\n                (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &found:3 Load) Load)\n                (list NotEq)\n                (list (Name &found:3 Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &found:3 Store))\n                  (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &found:3 Load) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (While\n              (Compare (Name &x:3 Load) (list NotEq) (list (Name &found:3 Load)))\n              (/seq\n                (Assign\n                  (list (Name &y:3 Store))\n                  (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &x:3 Load) Load)\n                  None\n                )\n                (Assign\n                  (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &x:3 Load) Store))\n                  (Name &found:3 Load)\n                  None\n                )\n                (Assign (list (Name &x:3 Store)) (Name &y:3 Load) None)\n              )\n              nil\n            )\n            (Return (Name &found:3 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:1\n          (arguments nil (list (arg &self:4 None None) (arg &x:4 None None) (arg &y:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:4 Load) s_parent Load)\n                  (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &x:4 Load)) nil)\n                  Store\n                )\n              )\n              (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &y:4 Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &S_prime:0 Store)) (List nil Load) None)\n    (Assign\n      (list (Name &uf:0 Store))\n      (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n      None\n    )\n    (For\n      (Name &index:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &vector_description:0 Store))\n          (BinOp\n            (ListComp\n              (BinOp (Call (Name g_int Load) (list (Name &i:5 Load)) nil) Sub (Constant i1 None))\n              (list\n                (comprehension\n                  (Name &i:5 Store)\n                  (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                  nil\n                  i0\n                )\n              )\n            )\n            Add\n            (List (list (Name &m:0 Load)) Load)\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Subscript (Name &vector_description:0 Load) (Slice (Constant i1 None) (Constant i3 None) None) Load)\n          None\n        )\n        (If\n          (Compare\n            (Call (Attribute (Name &uf:0 Load) s_find Load) (list (Name &u:0 Load)) nil)\n            (list Eq)\n            (list (Call (Attribute (Name &uf:0 Load) s_find Load) (list (Name &v:0 Load)) nil))\n          )\n          (/seq Continue)\n          nil\n        )\n        (Expr (Call (Attribute (Name &S_prime:0 Load) s_append Load) (list (Name &index:0 Load)) nil))\n        (Expr (Call (Attribute (Name &uf:0 Load) s_union Load) (list (Name &u:0 Load) (Name &v:0 Load)) nil))\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &T_size:0 Store))\n      (Call\n        (Name g_pow Load)\n        (list\n          (Constant i2 None)\n          (Call (Name g_len Load) (list (Name &S_prime:0 Load)) nil)\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Name &T_size:0 Load) (Call (Name g_len Load) (list (Name &S_prime:0 Load)) nil))\n        nil\n      )\n    )\n    (Expr\n      (Call (Name g_print Load) (list (Starred (Call (Name g_sorted Load) (list (Name &S_prime:0 Load)) nil) Load)) nil)\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjUsIDExNywgMTE2LCAxMDQsIDExMSwgMTE0LCAzMiwgNDUsIDMyLCA4MywgOTcsIDExNiwgMTE5LCAxMDUsIDEwNywgMzIsIDg0LCAxMDUsIDExOSwgOTcsIDExNCwgMTA1LCAzMiwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNDksIDU3LCAxMTYsIDEwNCwgMzIsIDc0LCA5NywgMTEwLCAzMiwgNDQsIDMyLCA1MCwgNDgsIDUwLCA0OSwgMzIsIDMyLCA0NSwgMzIsIDg0LCAxMTcsIDEwMSwgMTE1LCAxMDAsIDk3LCAxMjEsIDEwXQ==\n        None\n      )\n    )\n    (ImportFrom s___future__ (list (alias &division:0 None) (alias &print_function:0 None)) i0)\n    (Import (list (alias &sys:0 None)))\n    (Import (list (alias &os:0 None)))\n    (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0)\n    (ImportFrom s_heapq (list (alias &*:0 None)) i0)\n    (ImportFrom\n      s_math\n      (list\n        (alias &gcd:0 None)\n        (alias &factorial:0 None)\n        (alias &floor:0 None)\n        (alias &ceil:0 None)\n        (alias &sqrt:0 None)\n        (alias &log2:0 None)\n      )\n      i0\n    )\n    (ImportFrom s_copy (list (alias &deepcopy:0 None)) i0)\n    (ImportFrom s_collections (list (alias &deque:0 None)) i0)\n    (ImportFrom s_bisect (list (alias s_bisect_left &bl:0)) i0)\n    (ImportFrom s_bisect (list (alias s_bisect_right &br:0)) i0)\n    (ImportFrom s_bisect (list (alias &bisect:0 None)) i0)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name &IOBase:0 Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:18 None None) (arg &file:18 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:18 Load) s__fd Store))\n              (Call (Attribute (Name &file:18 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:18 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:18 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:18 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:18 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:18 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:18 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:19 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:19 Store))\n                  (Call\n                    (Attribute (Name &os:0 Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:19 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name &os:0 Load) s_fstat Load)\n                              (list (Attribute (Name &self:19 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:19 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:19 Store))\n                  (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:19 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:19 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:19 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:20 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:20 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:20 Store))\n                  (Call\n                    (Attribute (Name &os:0 Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:20 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name &os:0 Load) s_fstat Load)\n                              (list (Attribute (Name &self:20 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:20 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:20 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:20 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:20 Store))\n                  (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:20 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:20 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:20 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:21 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:21 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &os:0 Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:21 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name &IOBase:0 Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:22 None None) (arg &file:22 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:22 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:22 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:22 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:22 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:22 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:29 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:29 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:22 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:22 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &print:0\n      (arguments nil nil (arg &args:5 None None) nil nil (arg &kwargs:5 None None) nil)\n      (/seq\n        (Expr\n          (Constant\n            s-WzgwLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDExNSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCAxMTUsIDMyLCAxMTYsIDExMSwgMzIsIDk3LCAzMiwgMTE1LCAxMTYsIDExNCwgMTAxLCA5NywgMTA5LCA0NCwgMzIsIDExMSwgMTE0LCAzMiwgMTE2LCAxMTEsIDMyLCAxMTUsIDEyMSwgMTE1LCA0NiwgMTE1LCAxMTYsIDEwMCwgMTExLCAxMTcsIDExNiwgMzIsIDk4LCAxMjEsIDMyLCAxMDAsIDEwMSwgMTAyLCA5NywgMTE3LCAxMDgsIDExNiwgNDZd\n            None\n          )\n        )\n        (Assign\n          (list (Tuple (list (Name &sep:5 Store) (Name &file:5 Store)) Store))\n          (Tuple\n            (list\n              (Call\n                (Attribute (Name &kwargs:5 Load) s_pop Load)\n                (list (Constant s_sep None) (Constant s-WzMyXQ== None))\n                nil\n              )\n              (Call\n                (Attribute (Name &kwargs:5 Load) s_pop Load)\n                (list (Constant s_file None) (Attribute (Name &sys:0 Load) s_stdout Load))\n                nil\n              )\n            )\n            Load\n          )\n          None\n        )\n        (Assign (list (Name &at_start:5 Store)) (Constant True None) None)\n        (For\n          (Name &x:5 Store)\n          (Name &args:5 Load)\n          (/seq\n            (If\n              (UnaryOp Not (Name &at_start:5 Load))\n              (/seq (Expr (Call (Attribute (Name &file:5 Load) s_write Load) (list (Name &sep:5 Load)) nil)))\n              nil\n            )\n            (Expr\n              (Call\n                (Attribute (Name &file:5 Load) s_write Load)\n                (list (Call (Name g_str Load) (list (Name &x:5 Load)) nil))\n                nil\n              )\n            )\n            (Assign (list (Name &at_start:5 Store)) (Constant False None) None)\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &file:5 Load) s_write Load)\n            (list\n              (Call\n                (Attribute (Name &kwargs:5 Load) s_pop Load)\n                (list (Constant s_end None) (Constant s-WzEwXQ== None))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (If\n          (Call (Attribute (Name &kwargs:5 Load) s_pop Load) (list (Constant s_flush None) (Constant False None)) nil)\n          (/seq (Expr (Call (Attribute (Name &file:5 Load) s_flush Load) nil nil)))\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare\n        (Subscript (Attribute (Name &sys:0 Load) s_version_info Load) (Constant i0 None) Load)\n        (list Lt)\n        (list (Constant i3 None))\n      )\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store))\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (Call (Name &FastIO:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil)\n              (Call (Name &FastIO:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)\n            )\n            Load\n          )\n          None\n        )\n      )\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store))\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil)\n              (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)\n            )\n            Load\n          )\n          None\n        )\n      )\n    )\n    (ImportFrom s_types (list (alias &GeneratorType:0 None)) i0)\n    (FunctionDef\n      &iterative:0\n      (arguments nil (list (arg &f:3 None None) (arg &stack:3 None None)) None nil nil None (list (List nil Load)))\n      (/seq\n        (FunctionDef\n          &wrapped_func:3\n          (arguments nil nil (arg &args:23 None None) nil nil (arg &kwargs:23 None None) nil)\n          (/seq\n            (If\n              (Name &stack:3 Load)\n              (/seq\n                (Return\n                  (Call\n                    (Name &f:3 Load)\n                    (list (Starred (Name &args:23 Load) Load))\n                    (list (keyword None (Name &kwargs:23 Load)))\n                  )\n                )\n              )\n              nil\n            )\n            (Assign\n              (list (Name &to:23 Store))\n              (Call\n                (Name &f:3 Load)\n                (list (Starred (Name &args:23 Load) Load))\n                (list (keyword None (Name &kwargs:23 Load)))\n              )\n              None\n            )\n            (While\n              (Constant True None)\n              (/seq\n                (If\n                  (Compare\n                    (Call (Name g_type Load) (list (Name &to:23 Load)) nil)\n                    (list Is)\n                    (list (Name &GeneratorType:0 Load))\n                  )\n                  (/seq\n                    (Expr (Call (Attribute (Name &stack:3 Load) s_append Load) (list (Name &to:23 Load)) nil))\n                    (Assign (list (Name &to:23 Store)) (Call (Name g_next Load) (list (Name &to:23 Load)) nil) None)\n                    Continue\n                  )\n                  nil\n                )\n                (Expr (Call (Attribute (Name &stack:3 Load) s_pop Load) nil nil))\n                (If (UnaryOp Not (Name &stack:3 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &to:23 Store))\n                  (Call\n                    (Attribute (Subscript (Name &stack:3 Load) (UnaryOp USub (Constant i1 None)) Load) s_send Load)\n                    (list (Name &to:23 Load))\n                    nil\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &to:23 Load))\n          )\n          nil\n          None\n          None\n        )\n        (Return (Name &wrapped_func:3 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil)\n              s_rstrip\n              Load\n            )\n            (list (Constant s-WzEzLCAxMF0= None))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &out:0\n      (arguments nil (list (arg &var:6 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Attribute (Name &sys:0 Load) s_stdout Load) s_write Load)\n            (list (Call (Name g_str Load) (list (Name &var:6 Load)) nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lis:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &stringlis:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_str Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sep:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &strsep:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_str Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &testcase:0\n      (arguments nil (list (arg &t:7 None None)) None nil nil None nil)\n      (/seq\n        (For\n          (Name &pp:7 Store)\n          (Call (Name g_range Load) (list (Name &t:7 Load)) nil)\n          (/seq (Expr (Call (Name &solve:0 Load) (list (Name &pp:7 Load)) nil)))\n          nil\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &google:0\n      (arguments nil (list (arg &p:8 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name &print:0 Load)\n            (list\n              (BinOp\n                (BinOp\n                  (Constant s-WzY3LCA5NywgMTE1LCAxMDEsIDMyLCAzNV0= None)\n                  Add\n                  (Call (Name g_str Load) (list (Name &p:8 Load)) nil)\n                )\n                Add\n                (Constant s-WzU4LCAzMl0= None)\n              )\n            )\n            (list (keyword s_end (Constant s_ None)))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lcm:0\n      (arguments nil (list (arg &a:9 None None) (arg &b:9 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp (Name &a:9 Load) Mult (Name &b:9 Load))\n            FloorDiv\n            (Call (Name &gcd:0 Load) (list (Name &a:9 Load) (Name &b:9 Load)) nil)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &power:0\n      (arguments nil (list (arg &x:10 None None) (arg &y:10 None None) (arg &p:10 None None)) None nil nil None nil)\n      (/seq\n        (AugAssign (Name &y:10 Store) Mod (BinOp (Name &p:10 Load) Sub (Constant i1 None)))\n        (Assign (list (Name &res:10 Store)) (Constant i1 None) None)\n        (Assign (list (Name &x:10 Store)) (BinOp (Name &x:10 Load) Mod (Name &p:10 Load)) None)\n        (If (Compare (Name &x:10 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i0 None))) nil)\n        (While\n          (Compare (Name &y:10 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (BinOp (Name &y:10 Load) BitAnd (Constant i1 None)) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (Assign\n                  (list (Name &res:10 Store))\n                  (BinOp (BinOp (Name &res:10 Load) Mult (Name &x:10 Load)) Mod (Name &p:10 Load))\n                  None\n                )\n              )\n              nil\n            )\n            (Assign (list (Name &y:10 Store)) (BinOp (Name &y:10 Load) RShift (Constant i1 None)) None)\n            (Assign\n              (list (Name &x:10 Store))\n              (BinOp (BinOp (Name &x:10 Load) Mult (Name &x:10 Load)) Mod (Name &p:10 Load))\n              None\n            )\n          )\n          nil\n        )\n        (Return (Name &res:10 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ncr:0\n      (arguments nil (list (arg &n:11 None None) (arg &r:11 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (Call (Name &factorial:0 Load) (list (Name &n:11 Load)) nil)\n            FloorDiv\n            (BinOp\n              (Call (Name &factorial:0 Load) (list (Name &r:11 Load)) nil)\n              Mult\n              (Call\n                (Name &factorial:0 Load)\n                (list\n                  (Call (Name g_max Load) (list (BinOp (Name &n:11 Load) Sub (Name &r:11 Load)) (Constant i1 None)) nil)\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &isPrime:0\n      (arguments nil (list (arg &n:12 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &n:12 Load) (list LtE) (list (Constant i1 None))) (/seq (Return (Constant False None))) nil)\n        (If (Compare (Name &n:12 Load) (list LtE) (list (Constant i3 None))) (/seq (Return (Constant True None))) nil)\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare (BinOp (Name &n:12 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n              (Compare (BinOp (Name &n:12 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None)))\n            )\n          )\n          (/seq (Return (Constant False None)))\n          nil\n        )\n        (Assign (list (Name &i:12 Store)) (Constant i5 None) None)\n        (While\n          (Compare (BinOp (Name &i:12 Load) Mult (Name &i:12 Load)) (list LtE) (list (Name &n:12 Load)))\n          (/seq\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare (BinOp (Name &n:12 Load) Mod (Name &i:12 Load)) (list Eq) (list (Constant i0 None)))\n                  (Compare\n                    (BinOp (Name &n:12 Load) Mod (BinOp (Name &i:12 Load) Add (Constant i2 None)))\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                )\n              )\n              (/seq (Return (Constant False None)))\n              nil\n            )\n            (Assign (list (Name &i:12 Store)) (BinOp (Name &i:12 Load) Add (Constant i6 None)) None)\n          )\n          nil\n        )\n        (Return (Constant True None))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &inf:0 Store)) (Call (Name g_pow Load) (list (Constant i10 None) (Constant i21 None)) nil) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (FunctionDef\n      &bucketsort:0\n      (arguments nil (list (arg &order:13 None None) (arg &seq:13 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &buckets:13 Store))\n          (BinOp\n            (List (list (Constant i0 None)) Load)\n            Mult\n            (BinOp (Call (Name g_max Load) (list (Name &seq:13 Load)) nil) Add (Constant i1 None))\n          )\n          None\n        )\n        (For\n          (Name &x:13 Store)\n          (Name &seq:13 Load)\n          (/seq (AugAssign (Subscript (Name &buckets:13 Load) (Name &x:13 Load) Store) Add (Constant i1 None)))\n          nil\n          None\n        )\n        (For\n          (Name &i:13 Store)\n          (Call\n            (Name g_range Load)\n            (list (BinOp (Call (Name g_len Load) (list (Name &buckets:13 Load)) nil) Sub (Constant i1 None)))\n            nil\n          )\n          (/seq\n            (AugAssign\n              (Subscript (Name &buckets:13 Load) (BinOp (Name &i:13 Load) Add (Constant i1 None)) Store)\n              Add\n              (Subscript (Name &buckets:13 Load) (Name &i:13 Load) Load)\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list (Name &new_order:13 Store))\n          (BinOp\n            (List (list (UnaryOp USub (Constant i1 None))) Load)\n            Mult\n            (Call (Name g_len Load) (list (Name &seq:13 Load)) nil)\n          )\n          None\n        )\n        (For\n          (Name &i:13 Store)\n          (Call (Name g_reversed Load) (list (Name &order:13 Load)) nil)\n          (/seq\n            (Assign (list (Name &x:13 Store)) (Subscript (Name &seq:13 Load) (Name &i:13 Load) Load) None)\n            (Assign\n              (list (Name &idx:13 Store) (Subscript (Name &buckets:13 Load) (Name &x:13 Load) Store))\n              (BinOp (Subscript (Name &buckets:13 Load) (Name &x:13 Load) Load) Sub (Constant i1 None))\n              None\n            )\n            (Assign (list (Subscript (Name &new_order:13 Load) (Name &idx:13 Load) Store)) (Name &i:13 Load) None)\n          )\n          nil\n          None\n        )\n        (Return (Name &new_order:13 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ordersort:0\n      (arguments\n        nil\n        (list (arg &order:14 None None) (arg &seq:14 None None) (arg &reverse:14 None None))\n        None\n        nil\n        nil\n        None\n        (list (Constant False None))\n      )\n      (/seq\n        (Assign\n          (list (Name &bit:14 Store))\n          (BinOp\n            (Call (Attribute (Call (Name g_max Load) (list (Name &seq:14 Load)) nil) s_bit_length Load) nil nil)\n            RShift\n            (Constant i1 None)\n          )\n          None\n        )\n        (Assign\n          (list (Name &mask:14 Store))\n          (BinOp (BinOp (Constant i1 None) LShift (Name &bit:14 Load)) Sub (Constant i1 None))\n          None\n        )\n        (Assign\n          (list (Name &order:14 Store))\n          (Call\n            (Name &bucketsort:0 Load)\n            (list\n              (Name &order:14 Load)\n              (ListComp\n                (BinOp (Name &x:30 Load) BitAnd (Name &mask:14 Load))\n                (list (comprehension (Name &x:30 Store) (Name &seq:14 Load) nil i0))\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &order:14 Store))\n          (Call\n            (Name &bucketsort:0 Load)\n            (list\n              (Name &order:14 Load)\n              (ListComp\n                (BinOp (Name &x:31 Load) RShift (Name &bit:14 Load))\n                (list (comprehension (Name &x:31 Store) (Name &seq:14 Load) nil i0))\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If (Name &reverse:14 Load) (/seq (Expr (Call (Attribute (Name &order:14 Load) s_reverse Load) nil nil))) nil)\n        (Return (Name &order:14 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &long_ordersort:0\n      (arguments nil (list (arg &order:15 None None) (arg &seq:15 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &order:15 Store))\n          (Call\n            (Name &ordersort:0 Load)\n            (list\n              (Name &order:15 Load)\n              (ListComp\n                (Call (Name g_int Load) (list (BinOp (Name &i:32 Load) BitAnd (Constant i2147483647 None))) nil)\n                (list (comprehension (Name &i:32 Store) (Name &seq:15 Load) nil i0))\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Return\n          (Call\n            (Name &ordersort:0 Load)\n            (list\n              (Name &order:15 Load)\n              (ListComp\n                (Call (Name g_int Load) (list (BinOp (Name &i:33 Load) RShift (Constant i31 None))) nil)\n                (list (comprehension (Name &i:33 Store) (Name &seq:15 Load) nil i0))\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &multikey_ordersort:0\n      (arguments\n        nil\n        (list (arg &order:16 None None))\n        (arg &seqs:16 None None)\n        (list (arg &sort:16 None None))\n        (list (Name &ordersort:0 Load))\n        None\n        nil\n      )\n      (/seq\n        (For\n          (Name &i:16 Store)\n          (Call\n            (Name g_reversed Load)\n            (list (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &seqs:16 Load)) nil)) nil))\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Name &order:16 Store))\n              (Call\n                (Name &sort:16 Load)\n                (list (Name &order:16 Load) (Subscript (Name &seqs:16 Load) (Name &i:16 Load) Load))\n                nil\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return (Name &order:16 Load))\n      )\n      nil\n      None\n      None\n    )\n    (ClassDef\n      &DisjointSetUnion:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:4\n          (arguments nil (list (arg &self:24 None None) (arg &n:24 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:24 Load) s_parent Store))\n              (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:24 Load)) nil)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:24 Load) s_size Store))\n              (BinOp (List (list (Constant i1 None)) Load) Mult (Name &n:24 Load))\n              None\n            )\n            (Assign (list (Attribute (Name &self:24 Load) s_num_sets Store)) (Name &n:24 Load) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:4\n          (arguments nil (list (arg &self:25 None None) (arg &a:25 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &acopy:25 Store)) (Name &a:25 Load) None)\n            (While\n              (Compare\n                (Name &a:25 Load)\n                (list NotEq)\n                (list (Subscript (Attribute (Name &self:25 Load) s_parent Load) (Name &a:25 Load) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &a:25 Store))\n                  (Subscript (Attribute (Name &self:25 Load) s_parent Load) (Name &a:25 Load) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (While\n              (Compare (Name &acopy:25 Load) (list NotEq) (list (Name &a:25 Load)))\n              (/seq\n                (Assign\n                  (list\n                    (Tuple\n                      (list\n                        (Subscript (Attribute (Name &self:25 Load) s_parent Load) (Name &acopy:25 Load) Store)\n                        (Name &acopy:25 Store)\n                      )\n                      Store\n                    )\n                  )\n                  (Tuple\n                    (list\n                      (Name &a:25 Load)\n                      (Subscript (Attribute (Name &self:25 Load) s_parent Load) (Name &acopy:25 Load) Load)\n                    )\n                    Load\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &a:25 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:4\n          (arguments\n            nil\n            (list (arg &self:26 None None) (arg &a:26 None None) (arg &b:26 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &a:26 Store) (Name &b:26 Store)) Store))\n              (Tuple\n                (list\n                  (Call (Attribute (Name &self:26 Load) s_find Load) (list (Name &a:26 Load)) nil)\n                  (Call (Attribute (Name &self:26 Load) s_find Load) (list (Name &b:26 Load)) nil)\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (Compare (Name &a:26 Load) (list NotEq) (list (Name &b:26 Load)))\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Attribute (Name &self:26 Load) s_size Load) (Name &a:26 Load) Load)\n                    (list Lt)\n                    (list (Subscript (Attribute (Name &self:26 Load) s_size Load) (Name &b:26 Load) Load))\n                  )\n                  (/seq\n                    (Assign\n                      (list (Tuple (list (Name &a:26 Store) (Name &b:26 Store)) Store))\n                      (Tuple (list (Name &b:26 Load) (Name &a:26 Load)) Load)\n                      None\n                    )\n                  )\n                  nil\n                )\n                (AugAssign (Attribute (Name &self:26 Load) s_num_sets Store) Sub (Constant i1 None))\n                (Assign\n                  (list (Subscript (Attribute (Name &self:26 Load) s_parent Load) (Name &b:26 Load) Store))\n                  (Name &a:26 Load)\n                  None\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:26 Load) s_size Load) (Name &a:26 Load) Store)\n                  Add\n                  (Subscript (Attribute (Name &self:26 Load) s_size Load) (Name &b:26 Load) Load)\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &set_size:4\n          (arguments nil (list (arg &self:27 None None) (arg &a:27 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Subscript\n                (Attribute (Name &self:27 Load) s_size Load)\n                (Call (Attribute (Name &self:27 Load) s_find Load) (list (Name &a:27 Load)) nil)\n                Load\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__len__:4\n          (arguments nil (list (arg &self:28 None None)) None nil nil None nil)\n          (/seq (Return (Attribute (Name &self:28 Load) s_num_sets Load)))\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &case:17 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:17 Store) (Name &m:17 Store)) Store))\n          (Call (Name &sep:0 Load) nil nil)\n          None\n        )\n        (Assign\n          (list (Name &dsu:17 Store))\n          (Call (Name &DisjointSetUnion:0 Load) (list (BinOp (Name &m:17 Load) Add (Constant i1 None))) nil)\n          None\n        )\n        (Assign (list (Name &take:17 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &n:17 Load)) None)\n        (For\n          (Name &index:17 Store)\n          (Call (Name g_range Load) (list (Name &n:17 Load)) nil)\n          (/seq\n            (Assign (list (Name &a:17 Store)) (Call (Name &lis:0 Load) nil nil) None)\n            (If\n              (Compare (Subscript (Name &a:17 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &i:17 Store) (Name &j:17 Store)) Store))\n                  (Tuple (list (Constant i0 None) (Subscript (Name &a:17 Load) (Constant i1 None) Load)) Load)\n                  None\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &i:17 Store) (Name &j:17 Store)) Store))\n                  (Tuple\n                    (list\n                      (Subscript (Name &a:17 Load) (Constant i1 None) Load)\n                      (Subscript (Name &a:17 Load) (Constant i2 None) Load)\n                    )\n                    Load\n                  )\n                  None\n                )\n              )\n            )\n            (Assign\n              (list (Name &grp1:17 Store))\n              (Call (Attribute (Name &dsu:17 Load) s_find Load) (list (Name &i:17 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &grp2:17 Store))\n              (Call (Attribute (Name &dsu:17 Load) s_find Load) (list (Name &j:17 Load)) nil)\n              None\n            )\n            (If\n              (Compare (Name &grp1:17 Load) (list Eq) (list (Name &grp2:17 Load)))\n              (/seq\n                (Assign (list (Subscript (Name &take:17 Load) (Name &index:17 Load) Store)) (Constant i0 None) None)\n              )\n              (/seq\n                (Expr\n                  (Call (Attribute (Name &dsu:17 Load) s_union Load) (list (Name &i:17 Load) (Name &j:17 Load)) nil)\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &ans:17 Store)) (List nil Load) None)\n        (For\n          (Name &i:17 Store)\n          (Call (Name g_range Load) (list (Name &n:17 Load)) nil)\n          (/seq\n            (If\n              (Subscript (Name &take:17 Load) (Name &i:17 Load) Load)\n              (/seq (Expr (Call (Attribute (Name &ans:17 Load) s_append Load) (list (Name &i:17 Load)) nil)))\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &ans:17 Store)) (Call (Name g_sorted Load) (list (Name &ans:17 Load)) nil) None)\n        (Expr\n          (Call\n            (Name &print:0 Load)\n            (list\n              (Call\n                (Name &power:0 Load)\n                (list (Constant i2 None) (Call (Name g_len Load) (list (Name &ans:17 Load)) nil) (Name &mod:0 Load))\n                nil\n              )\n              (Call (Name g_len Load) (list (Name &ans:17 Load)) nil)\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Name &print:0 Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                (list\n                  (GeneratorExp\n                    (Call (Name g_str Load) (list (BinOp (Name &i:34 Load) Add (Constant i1 None))) nil)\n                    (list (comprehension (Name &i:34 Store) (Name &ans:17 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &testcase:0 Load) (list (Constant i1 None)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (ClassDef\n      &UnionFind:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:7 None None) (arg &n:7 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:7 Load) s_parent Store))\n              (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:7 Load)) nil)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:8 None None) (arg &a:8 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &acopy:8 Store)) (Name &a:8 Load) None)\n            (While\n              (Compare\n                (Name &a:8 Load)\n                (list NotEq)\n                (list (Subscript (Attribute (Name &self:8 Load) s_parent Load) (Name &a:8 Load) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &a:8 Store))\n                  (Subscript (Attribute (Name &self:8 Load) s_parent Load) (Name &a:8 Load) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (While\n              (Compare (Name &acopy:8 Load) (list NotEq) (list (Name &a:8 Load)))\n              (/seq\n                (Assign\n                  (list\n                    (Tuple\n                      (list\n                        (Subscript (Attribute (Name &self:8 Load) s_parent Load) (Name &acopy:8 Load) Store)\n                        (Name &acopy:8 Store)\n                      )\n                      Store\n                    )\n                  )\n                  (Tuple\n                    (list\n                      (Name &a:8 Load)\n                      (Subscript (Attribute (Name &self:8 Load) s_parent Load) (Name &acopy:8 Load) Load)\n                    )\n                    Load\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &a:8 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:1\n          (arguments nil (list (arg &self:9 None None) (arg &a:9 None None) (arg &b:9 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:9 Load) s_parent Load)\n                  (Call (Attribute (Name &self:9 Load) s_find Load) (list (Name &b:9 Load)) nil)\n                  Store\n                )\n              )\n              (Call (Attribute (Name &self:9 Load) s_find Load) (list (Name &a:9 Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &oneLineArrayPrint:0\n      (arguments nil (list (arg &arr:2 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call (Name g_str Load) (list (BinOp (Name &x:16 Load) Add (Constant i1 None))) nil)\n                    (list (comprehension (Name &x:16 Store) (Name &arr:2 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &canTake:0\n      (arguments\n        nil\n        (list (arg &newEdgesCnt:3 None None) (arg &newVerticesCnt:3 None None) (arg &newHasOne:3 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (If\n          (Name &newHasOne:3 Load)\n          (/seq (Return (Compare (Name &newEdgesCnt:3 Load) (list LtE) (list (Name &newVerticesCnt:3 Load)))))\n          (/seq\n            (Return\n              (Compare\n                (Name &newEdgesCnt:3 Load)\n                (list LtE)\n                (list (BinOp (Name &newVerticesCnt:3 Load) Sub (Constant i1 None)))\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &handleOne:0\n      (arguments\n        nil\n        (list\n          (arg &i:4 None None)\n          (arg &v1:4 None None)\n          (arg &sPrime:4 None None)\n          (arg &cEc:4 None None)\n          (arg &cVc:4 None None)\n          (arg &cHO:4 None None)\n          (arg &vV:4 None None)\n          (arg &uf:4 None None)\n        )\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &parent:4 Store))\n          (Call (Attribute (Name &uf:4 Load) s_find Load) (list (Name &v1:4 Load)) nil)\n          None\n        )\n        (Assign (list (Name &oldEdgesCnt:4 Store)) (Subscript (Name &cEc:4 Load) (Name &parent:4 Load) Load) None)\n        (Assign (list (Name &oldVerticesCnt:4 Store)) (Subscript (Name &cVc:4 Load) (Name &parent:4 Load) Load) None)\n        (Assign (list (Name &newEdgesCnt:4 Store)) (BinOp (Name &oldEdgesCnt:4 Load) Add (Constant i1 None)) None)\n        (If\n          (Compare (Subscript (Name &vV:4 Load) (Name &v1:4 Load) Load) (list Eq) (list (Constant False None)))\n          (/seq\n            (Assign\n              (list (Name &newVerticesCnt:4 Store))\n              (BinOp (Name &oldVerticesCnt:4 Load) Add (Constant i1 None))\n              None\n            )\n          )\n          (/seq (Assign (list (Name &newVerticesCnt:4 Store)) (Name &oldVerticesCnt:4 Load) None))\n        )\n        (If\n          (Call\n            (Name &canTake:0 Load)\n            (list (Name &newEdgesCnt:4 Load) (Name &newVerticesCnt:4 Load) (Constant True None))\n            nil\n          )\n          (/seq\n            (Expr (Call (Attribute (Name &sPrime:4 Load) s_append Load) (list (Name &i:4 Load)) nil))\n            (Assign (list (Subscript (Name &vV:4 Load) (Name &v1:4 Load) Store)) (Constant True None) None)\n            (Assign (list (Subscript (Name &cEc:4 Load) (Name &parent:4 Load) Store)) (Name &newEdgesCnt:4 Load) None)\n            (Assign\n              (list (Subscript (Name &cVc:4 Load) (Name &parent:4 Load) Store))\n              (Name &newVerticesCnt:4 Load)\n              None\n            )\n            (Assign (list (Subscript (Name &cHO:4 Load) (Name &parent:4 Load) Store)) (Constant True None) None)\n          )\n          nil\n        )\n        (Return None)\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &handleTwo:0\n      (arguments\n        nil\n        (list\n          (arg &i:5 None None)\n          (arg &v1:5 None None)\n          (arg &v2:5 None None)\n          (arg &sPrime:5 None None)\n          (arg &cEc:5 None None)\n          (arg &cVc:5 None None)\n          (arg &cHO:5 None None)\n          (arg &vV:5 None None)\n          (arg &uf:5 None None)\n        )\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &parent1:5 Store))\n          (Call (Attribute (Name &uf:5 Load) s_find Load) (list (Name &v1:5 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &parent2:5 Store))\n          (Call (Attribute (Name &uf:5 Load) s_find Load) (list (Name &v2:5 Load)) nil)\n          None\n        )\n        (If\n          (Compare (Name &parent1:5 Load) (list NotEq) (list (Name &parent2:5 Load)))\n          (/seq\n            (Assign\n              (list (Name &oldEdgesCnt:5 Store))\n              (BinOp\n                (Subscript (Name &cEc:5 Load) (Name &parent1:5 Load) Load)\n                Add\n                (Subscript (Name &cEc:5 Load) (Name &parent2:5 Load) Load)\n              )\n              None\n            )\n            (Assign\n              (list (Name &oldVerticesCnt:5 Store))\n              (BinOp\n                (Subscript (Name &cVc:5 Load) (Name &parent1:5 Load) Load)\n                Add\n                (Subscript (Name &cVc:5 Load) (Name &parent2:5 Load) Load)\n              )\n              None\n            )\n          )\n          (/seq\n            (Assign (list (Name &oldEdgesCnt:5 Store)) (Subscript (Name &cEc:5 Load) (Name &parent1:5 Load) Load) None)\n            (Assign\n              (list (Name &oldVerticesCnt:5 Store))\n              (Subscript (Name &cVc:5 Load) (Name &parent1:5 Load) Load)\n              None\n            )\n          )\n        )\n        (Assign (list (Name &newEdgesCnt:5 Store)) (BinOp (Name &oldEdgesCnt:5 Load) Add (Constant i1 None)) None)\n        (Assign (list (Name &newVerticesCnt:5 Store)) (Name &oldVerticesCnt:5 Load) None)\n        (If\n          (Compare (Subscript (Name &vV:5 Load) (Name &v1:5 Load) Load) (list Eq) (list (Constant False None)))\n          (/seq (AugAssign (Name &newVerticesCnt:5 Store) Add (Constant i1 None)))\n          nil\n        )\n        (If\n          (Compare (Subscript (Name &vV:5 Load) (Name &v2:5 Load) Load) (list Eq) (list (Constant False None)))\n          (/seq (AugAssign (Name &newVerticesCnt:5 Store) Add (Constant i1 None)))\n          nil\n        )\n        (If\n          (Call\n            (Name &canTake:0 Load)\n            (list\n              (Name &newEdgesCnt:5 Load)\n              (Name &newVerticesCnt:5 Load)\n              (BoolOp\n                Or\n                (list\n                  (Subscript (Name &cHO:5 Load) (Name &parent1:5 Load) Load)\n                  (Subscript (Name &cHO:5 Load) (Name &parent2:5 Load) Load)\n                )\n              )\n            )\n            nil\n          )\n          (/seq\n            (Expr (Call (Attribute (Name &sPrime:5 Load) s_append Load) (list (Name &i:5 Load)) nil))\n            (Assign (list (Subscript (Name &vV:5 Load) (Name &v1:5 Load) Store)) (Constant True None) None)\n            (Assign (list (Subscript (Name &vV:5 Load) (Name &v2:5 Load) Store)) (Constant True None) None)\n            (Expr (Call (Attribute (Name &uf:5 Load) s_union Load) (list (Name &v1:5 Load) (Name &v2:5 Load)) nil))\n            (Assign\n              (list (Name &newParent:5 Store))\n              (Call (Attribute (Name &uf:5 Load) s_find Load) (list (Name &v1:5 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Subscript (Name &cEc:5 Load) (Name &newParent:5 Load) Store))\n              (Name &newEdgesCnt:5 Load)\n              None\n            )\n            (Assign\n              (list (Subscript (Name &cVc:5 Load) (Name &newParent:5 Load) Store))\n              (Name &newVerticesCnt:5 Load)\n              None\n            )\n            (Assign\n              (list (Subscript (Name &cHO:5 Load) (Name &newParent:5 Load) Store))\n              (BoolOp\n                Or\n                (list\n                  (Subscript (Name &cHO:5 Load) (Name &parent1:5 Load) Load)\n                  (Subscript (Name &cHO:5 Load) (Name &parent2:5 Load) Load)\n                )\n              )\n              None\n            )\n          )\n          nil\n        )\n        (Return None)\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &solveActual:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &uf:6 Store)) (Call (Name &UnionFind:0 Load) (list (Name &m:0 Load)) nil) None)\n        (Assign (list (Name &sPrime:6 Store)) (List nil Load) None)\n        (Assign\n          (list (Name &cEc:6 Store))\n          (ListComp\n            (Constant i0 None)\n            (list (comprehension (Name &_:11 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) nil i0))\n          )\n          None\n        )\n        (Assign\n          (list (Name &cVc:6 Store))\n          (ListComp\n            (Constant i0 None)\n            (list (comprehension (Name &_:12 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) nil i0))\n          )\n          None\n        )\n        (Assign\n          (list (Name &cHO:6 Store))\n          (ListComp\n            (Constant False None)\n            (list (comprehension (Name &_:13 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) nil i0))\n          )\n          None\n        )\n        (Assign\n          (list (Name &vV:6 Store))\n          (ListComp\n            (Constant False None)\n            (list (comprehension (Name &_:14 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) nil i0))\n          )\n          None\n        )\n        (For\n          (Tuple (list (Name &i:6 Store) (Name &x:6 Store)) Store)\n          (Call (Name g_enumerate Load) (list (Name &vS:0 Load)) nil)\n          (/seq\n            (Assign (list (Name &nVertices:6 Store)) (Call (Name g_len Load) (list (Name &x:6 Load)) nil) None)\n            (If\n              (Compare (Name &nVertices:6 Load) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name &handleOne:0 Load)\n                    (list\n                      (Name &i:6 Load)\n                      (Subscript (Name &x:6 Load) (Constant i0 None) Load)\n                      (Name &sPrime:6 Load)\n                      (Name &cEc:6 Load)\n                      (Name &cVc:6 Load)\n                      (Name &cHO:6 Load)\n                      (Name &vV:6 Load)\n                      (Name &uf:6 Load)\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name &handleTwo:0 Load)\n                    (list\n                      (Name &i:6 Load)\n                      (Subscript (Name &x:6 Load) (Constant i0 None) Load)\n                      (Subscript (Name &x:6 Load) (Constant i1 None) Load)\n                      (Name &sPrime:6 Load)\n                      (Name &cEc:6 Load)\n                      (Name &cVc:6 Load)\n                      (Name &cHO:6 Load)\n                      (Name &vV:6 Load)\n                      (Name &uf:6 Load)\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list (Name &TSize:6 Store))\n          (Call\n            (Name g_pow Load)\n            (list (Constant i2 None) (Call (Name g_len Load) (list (Name &sPrime:6 Load)) nil) (Name &MOD:0 Load))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzEyMywgMTI1LCAzMiwgMTIzLCAxMjVd None) s_format Load)\n                (list (Name &TSize:6 Load) (Call (Name g_len Load) (list (Name &sPrime:6 Load)) nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name &oneLineArrayPrint:0 Load) (list (Name &sPrime:6 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:10 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:10 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &vS:0 Store)) (List nil Load) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &xx:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:15 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:15 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (Call (Name g_len Load) (list (Name &xx:0 Load)) nil)) nil)\n          (/seq (AugAssign (Subscript (Name &xx:0 Load) (Name &i:0 Load) Store) Sub (Constant i1 None)))\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &vS:0 Load) s_append Load)\n            (list (Subscript (Name &xx:0 Load) (Slice (Constant i1 None) None None) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name &solveActual:0 Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (ClassDef\n      &UnionFind:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_parent Store))\n              (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:3 Load)) nil)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:4 None None) (arg &a:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &acopy:4 Store)) (Name &a:4 Load) None)\n            (While\n              (Compare\n                (Name &a:4 Load)\n                (list NotEq)\n                (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &a:4 Load) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &a:4 Store))\n                  (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &a:4 Load) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (While\n              (Compare (Name &acopy:4 Load) (list NotEq) (list (Name &a:4 Load)))\n              (/seq\n                (Assign\n                  (list\n                    (Tuple\n                      (list\n                        (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &acopy:4 Load) Store)\n                        (Name &acopy:4 Store)\n                      )\n                      Store\n                    )\n                  )\n                  (Tuple\n                    (list\n                      (Name &a:4 Load)\n                      (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &acopy:4 Load) Load)\n                    )\n                    Load\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &a:4 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:1\n          (arguments nil (list (arg &self:5 None None) (arg &a:5 None None) (arg &b:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:5 Load) s_parent Load)\n                  (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &b:5 Load)) nil)\n                  Store\n                )\n              )\n              (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &a:5 Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &oneLineArrayPrint:0\n      (arguments nil (list (arg &arr:2 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                (list\n                  (ListComp\n                    (Call (Name g_str Load) (list (Name &x:9 Load)) nil)\n                    (list (comprehension (Name &x:9 Store) (Name &arr:2 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:6 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:6 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &uf:0 Store))\n      (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &hasOne:0 Store))\n      (ListComp\n        (Constant False None)\n        (list\n          (comprehension\n            (Name &_:7 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &sPrime:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &inp:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:8 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:8 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (If\n          (Compare (Subscript (Name &inp:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (Assign\n              (list (Name &parent:0 Store))\n              (Call\n                (Attribute (Name &uf:0 Load) s_find Load)\n                (list (Subscript (Name &inp:0 Load) (Constant i1 None) Load))\n                nil\n              )\n              None\n            )\n            (If\n              (Compare\n                (Subscript (Name &hasOne:0 Load) (Name &parent:0 Load) Load)\n                (list Eq)\n                (list (Constant False None))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &sPrime:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n                (Assign (list (Subscript (Name &hasOne:0 Load) (Name &parent:0 Load) Store)) (Constant True None) None)\n              )\n              nil\n            )\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &parent1:0 Store) (Name &parent2:0 Store)) Store))\n              (Tuple\n                (list\n                  (Call\n                    (Attribute (Name &uf:0 Load) s_find Load)\n                    (list (Subscript (Name &inp:0 Load) (Constant i1 None) Load))\n                    nil\n                  )\n                  (Call\n                    (Attribute (Name &uf:0 Load) s_find Load)\n                    (list (Subscript (Name &inp:0 Load) (Constant i2 None) Load))\n                    nil\n                  )\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (Compare (Name &parent1:0 Load) (list NotEq) (list (Name &parent2:0 Load)))\n              (/seq\n                (If\n                  (UnaryOp\n                    Not\n                    (BoolOp\n                      And\n                      (list\n                        (Subscript (Name &hasOne:0 Load) (Name &parent1:0 Load) Load)\n                        (Subscript (Name &hasOne:0 Load) (Name &parent2:0 Load) Load)\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &sPrime:0 Load) s_append Load)\n                        (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &uf:0 Load) s_union Load)\n                        (list\n                          (Subscript (Name &inp:0 Load) (Constant i1 None) Load)\n                          (Subscript (Name &inp:0 Load) (Constant i2 None) Load)\n                        )\n                        nil\n                      )\n                    )\n                    (Assign\n                      (list (Name &newParent:0 Store))\n                      (Call\n                        (Attribute (Name &uf:0 Load) s_find Load)\n                        (list (Subscript (Name &inp:0 Load) (Constant i1 None) Load))\n                        nil\n                      )\n                      None\n                    )\n                    (Assign\n                      (list (Subscript (Name &hasOne:0 Load) (Name &newParent:0 Load) Store))\n                      (BoolOp\n                        Or\n                        (list\n                          (Subscript (Name &hasOne:0 Load) (Name &parent1:0 Load) Load)\n                          (Subscript (Name &hasOne:0 Load) (Name &parent2:0 Load) Load)\n                        )\n                      )\n                      None\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &S_magnitude:0 Store)) (Call (Name g_len Load) (list (Name &sPrime:0 Load)) nil) None)\n    (Assign\n      (list (Name &T_magnitude:0 Store))\n      (Call\n        (Name g_pow Load)\n        (list\n          (Constant i2 None)\n          (Name &S_magnitude:0 Load)\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Attribute (Constant s-WzEyMywgMTI1LCAzMiwgMTIzLCAxMjVd None) s_format Load)\n            (list (Name &T_magnitude:0 Load) (Name &S_magnitude:0 Load))\n            nil\n          )\n        )\n        nil\n      )\n    )\n    (Expr (Call (Name &oneLineArrayPrint:0 Load) (list (Name &sPrime:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (ClassDef\n      &UnionFind:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:3 Load) s_n Store)) (Name &n:3 Load) None)\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_parents Store))\n              (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &n:3 Load))\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:4 None None) (arg &x:4 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Attribute (Name &self:4 Load) s_parents Load) (Name &x:4 Load) Load)\n                (list Lt)\n                (list (Constant i0 None))\n              )\n              (/seq (Return (Name &x:4 Load)))\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:4 Load) s_parents Load) (Name &x:4 Load) Store))\n                  (Call\n                    (Attribute (Name &self:4 Load) s_find Load)\n                    (list (Subscript (Attribute (Name &self:4 Load) s_parents Load) (Name &x:4 Load) Load))\n                    nil\n                  )\n                  None\n                )\n                (Return (Subscript (Attribute (Name &self:4 Load) s_parents Load) (Name &x:4 Load) Load))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:1\n          (arguments nil (list (arg &self:5 None None) (arg &x:5 None None) (arg &y:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &x:5 Store))\n              (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &x:5 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &y:5 Store))\n              (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &y:5 Load)) nil)\n              None\n            )\n            (If (Compare (Name &x:5 Load) (list Eq) (list (Name &y:5 Load))) (/seq (Return None)) nil)\n            (If\n              (Compare\n                (Subscript (Attribute (Name &self:5 Load) s_parents Load) (Name &x:5 Load) Load)\n                (list Gt)\n                (list (Subscript (Attribute (Name &self:5 Load) s_parents Load) (Name &y:5 Load) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &x:5 Store) (Name &y:5 Store)) Store))\n                  (Tuple (list (Name &y:5 Load) (Name &x:5 Load)) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (AugAssign\n              (Subscript (Attribute (Name &self:5 Load) s_parents Load) (Name &x:5 Load) Store)\n              Add\n              (Subscript (Attribute (Name &self:5 Load) s_parents Load) (Name &y:5 Load) Load)\n            )\n            (Assign\n              (list (Subscript (Attribute (Name &self:5 Load) s_parents Load) (Name &y:5 Load) Store))\n              (Name &x:5 Load)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &size:1\n          (arguments nil (list (arg &self:6 None None) (arg &x:6 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (UnaryOp\n                USub\n                (Subscript\n                  (Attribute (Name &self:6 Load) s_parents Load)\n                  (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &x:6 Load)) nil)\n                  Load\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &same:1\n          (arguments nil (list (arg &self:7 None None) (arg &x:7 None None) (arg &y:7 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Compare\n                (Call (Attribute (Name &self:7 Load) s_find Load) (list (Name &x:7 Load)) nil)\n                (list Eq)\n                (list (Call (Attribute (Name &self:7 Load) s_find Load) (list (Name &y:7 Load)) nil))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &members:1\n          (arguments nil (list (arg &self:8 None None) (arg &x:8 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &root:8 Store))\n              (Call (Attribute (Name &self:8 Load) s_find Load) (list (Name &x:8 Load)) nil)\n              None\n            )\n            (Return\n              (ListComp\n                (Name &i:13 Load)\n                (list\n                  (comprehension\n                    (Name &i:13 Store)\n                    (Call (Name g_range Load) (list (Attribute (Name &self:8 Load) s_n Load)) nil)\n                    (list\n                      (Compare\n                        (Call (Attribute (Name &self:8 Load) s_find Load) (list (Name &i:13 Load)) nil)\n                        (list Eq)\n                        (list (Name &root:8 Load))\n                      )\n                    )\n                    i0\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &roots:1\n          (arguments nil (list (arg &self:9 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (ListComp\n                (Name &i:14 Load)\n                (list\n                  (comprehension\n                    (Tuple (list (Name &i:14 Store) (Name &x:14 Store)) Store)\n                    (Call (Name g_enumerate Load) (list (Attribute (Name &self:9 Load) s_parents Load)) nil)\n                    (list (Compare (Name &x:14 Load) (list Lt) (list (Constant i0 None))))\n                    i0\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &group_count:1\n          (arguments nil (list (arg &self:10 None None)) None nil nil None nil)\n          (/seq\n            (Return (Call (Name g_len Load) (list (Call (Attribute (Name &self:10 Load) s_roots Load) nil nil)) nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &all_group_members:1\n          (arguments nil (list (arg &self:11 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &dic:11 Store))\n              (DictComp\n                (Name &r:15 Load)\n                (List nil Load)\n                (list\n                  (comprehension (Name &r:15 Store) (Call (Attribute (Name &self:11 Load) s_roots Load) nil nil) nil i0)\n                )\n              )\n              None\n            )\n            (For\n              (Name &i:11 Store)\n              (Call (Name g_range Load) (list (Attribute (Name &self:11 Load) s_n Load)) nil)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript\n                        (Name &dic:11 Load)\n                        (Call (Attribute (Name &self:11 Load) s_find Load) (list (Name &i:11 Load)) nil)\n                        Load\n                      )\n                      s_append\n                      Load\n                    )\n                    (list (Name &i:11 Load))\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n            (Return (Name &dic:11 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__str__:1\n          (arguments nil (list (arg &self:12 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Call\n                (Attribute (Constant s-WzEwXQ== None) s_join Load)\n                (list\n                  (GeneratorExp\n                    (Call\n                      (Attribute (Constant s-WzEyMywgMTI1LCA1OCwgMzIsIDEyMywgMTI1XQ== None) s_format Load)\n                      (list\n                        (Name &r:16 Load)\n                        (Call (Attribute (Name &self:12 Load) s_members Load) (list (Name &r:16 Load)) nil)\n                      )\n                      nil\n                    )\n                    (list\n                      (comprehension\n                        (Name &r:16 Store)\n                        (Call (Attribute (Name &self:12 Load) s_roots Load) nil nil)\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:2 Store) (Name &m:2 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:2 Store)) (List nil Load) None)\n        (Assign\n          (list (Name &UF:2 Store))\n          (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:2 Load) Add (Constant i1 None))) nil)\n          None\n        )\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:2 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Name &q:2 Store))\n              (Call\n                (Name g_list Load)\n                (list\n                  (Call\n                    (Name g_map Load)\n                    (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                    nil\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Subscript (Name &q:2 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (Assign (list (Name &x:2 Store)) (Constant i0 None) None)\n                (Assign (list (Name &y:2 Store)) (Subscript (Name &q:2 Load) (Constant i1 None) Load) None)\n              )\n              (/seq\n                (Assign (list (Name &x:2 Store)) (Subscript (Name &q:2 Load) (Constant i1 None) Load) None)\n                (Assign (list (Name &y:2 Store)) (Subscript (Name &q:2 Load) (Constant i2 None) Load) None)\n              )\n            )\n            (If\n              (UnaryOp\n                Not\n                (Call (Attribute (Name &UF:2 Load) s_same Load) (list (Name &x:2 Load) (Name &y:2 Load)) nil)\n              )\n              (/seq\n                (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (Name &i:2 Load)) nil))\n                (Expr (Call (Attribute (Name &UF:2 Load) s_union Load) (list (Name &x:2 Load) (Name &y:2 Load)) nil))\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &cnt:2 Store)) (Constant i0 None) None)\n        (For\n          (Name &x:2 Store)\n          (Call (Attribute (Name &UF:2 Load) s_roots Load) nil nil)\n          (/seq\n            (AugAssign\n              (Name &cnt:2 Store)\n              Add\n              (BinOp\n                (Call (Attribute (Name &UF:2 Load) s_size Load) (list (Name &x:2 Load)) nil)\n                Sub\n                (Constant i1 None)\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Assign\n          (list (Name &t:2 Store))\n          (Call (Name g_pow Load) (list (Constant i2 None) (Name &cnt:2 Load) (Name &MOD:0 Load)) nil)\n          None\n        )\n        (Expr\n          (Call (Name g_print Load) (list (Name &t:2 Load) (Call (Name g_len Load) (list (Name &ans:2 Load)) nil)) nil)\n        )\n        (Expr (Call (Name g_print Load) (list (Starred (Name &ans:2 Load) Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None)) nil)\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None) (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (ImportFrom s_collections (list (alias g_deque None)) i0)\n    (FunctionDef\n      &find:0\n      (arguments nil (list (arg &parent:3 None None) (arg &x:3 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &x:3 Load) (list Eq) (list (Subscript (Name &parent:3 Load) (Name &x:3 Load) Load)))\n          (/seq (Return (Name &x:3 Load)))\n          nil\n        )\n        (Assign\n          (list (Subscript (Name &parent:3 Load) (Name &x:3 Load) Store))\n          (Call\n            (Name &find:0 Load)\n            (list (Name &parent:3 Load) (Subscript (Name &parent:3 Load) (Name &x:3 Load) Load))\n            nil\n          )\n          None\n        )\n        (Return (Subscript (Name &parent:3 Load) (Name &x:3 Load) Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &union:0\n      (arguments\n        nil\n        (list (arg &parent:4 None None) (arg &a:4 None None) (arg &b:4 None None) (arg &rank:4 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:4 Store) (Name &b:4 Store)) Store))\n          (Tuple\n            (list\n              (Call (Name &find:0 Load) (list (Name &parent:4 Load) (Name &a:4 Load)) nil)\n              (Call (Name &find:0 Load) (list (Name &parent:4 Load) (Name &b:4 Load)) nil)\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Compare (Name &a:4 Load) (list NotEq) (list (Name &b:4 Load)))\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &rank:4 Load) (Name &a:4 Load) Load)\n                (list Lt)\n                (list (Subscript (Name &rank:4 Load) (Name &b:4 Load) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &a:4 Store) (Name &b:4 Store)) Store))\n                  (Tuple (list (Name &b:4 Load) (Name &a:4 Load)) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (Assign (list (Subscript (Name &parent:4 Load) (Name &b:4 Load) Store)) (Name &a:4 Load) None)\n            (If\n              (Compare\n                (Subscript (Name &rank:4 Load) (Name &a:4 Load) Load)\n                (list Eq)\n                (list (Subscript (Name &rank:4 Load) (Name &b:4 Load) Load))\n              )\n              (/seq (AugAssign (Subscript (Name &rank:4 Load) (Name &a:4 Load) Store) Add (Constant i1 None)))\n              nil\n            )\n            (Return (Constant i1 None))\n          )\n          nil\n        )\n        (Return (Constant i0 None))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:5 Store) (Name &m:5 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (Name &ans:5 Store) (Name &rank:5 Store)) Store))\n          (Tuple (list (List nil Load) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &m:5 Load))) Load)\n          None\n        )\n        (Assign\n          (list (Tuple (list (Name &parent:5 Store) (Name &inde:5 Store) (Name &path:5 Store)) Store))\n          (Tuple\n            (list\n              (ListComp\n                (Name &i:11 Load)\n                (list (comprehension (Name &i:11 Store) (Call (Name g_range Load) (list (Name &m:5 Load)) nil) nil i0))\n              )\n              (BinOp (List (list (Constant i0 None)) Load) Mult (Name &m:5 Load))\n              (ListComp\n                (List nil Load)\n                (list (comprehension (Name &_:12 Store) (Call (Name g_range Load) (list (Name &m:5 Load)) nil) nil i0))\n              )\n            )\n            Load\n          )\n          None\n        )\n        (For\n          (Name &i:5 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:5 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Name &x:5 Store))\n              (Call\n                (Name g_list Load)\n                (list\n                  (Call\n                    (Name g_map Load)\n                    (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                    nil\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (If\n              (Compare (Subscript (Name &x:5 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (Assign\n                  (list (Name &a:5 Store))\n                  (BinOp (Subscript (Name &x:5 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                  None\n                )\n                (If\n                  (UnaryOp Not (Subscript (Name &inde:5 Load) (Name &a:5 Load) Load))\n                  (/seq\n                    (Assign\n                      (list (Name &curr:5 Store))\n                      (Call (Name g_deque Load) (list (List (list (Name &a:5 Load)) Load)) nil)\n                      None\n                    )\n                    (While\n                      (Call (Name g_len Load) (list (Name &curr:5 Load)) nil)\n                      (/seq\n                        (Assign\n                          (list (Name &xx:5 Store))\n                          (Call (Attribute (Name &curr:5 Load) s_popleft Load) nil nil)\n                          None\n                        )\n                        (Assign (list (Subscript (Name &inde:5 Load) (Name &xx:5 Load) Store)) (Constant i1 None) None)\n                        (For\n                          (Name &z:5 Store)\n                          (Subscript (Name &path:5 Load) (Name &xx:5 Load) Load)\n                          (/seq\n                            (If\n                              (UnaryOp Not (Subscript (Name &inde:5 Load) (Name &z:5 Load) Load))\n                              (/seq\n                                (Assign\n                                  (list (Subscript (Name &inde:5 Load) (Name &z:5 Load) Store))\n                                  (Constant i1 None)\n                                  None\n                                )\n                                (Expr (Call (Attribute (Name &curr:5 Load) s_append Load) (list (Name &z:5 Load)) nil))\n                              )\n                              nil\n                            )\n                          )\n                          nil\n                          None\n                        )\n                        (Assign (list (Subscript (Name &path:5 Load) (Name &xx:5 Load) Store)) (List nil Load) None)\n                      )\n                      nil\n                    )\n                    (Expr (Call (Attribute (Name &ans:5 Load) s_append Load) (list (Name &i:5 Load)) nil))\n                  )\n                  nil\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &a:5 Store) (Name &b:5 Store)) Store))\n                  (Tuple\n                    (list\n                      (BinOp (Subscript (Name &x:5 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n                      (BinOp (Subscript (Name &x:5 Load) (Constant i2 None) Load) Sub (Constant i1 None))\n                    )\n                    Load\n                  )\n                  None\n                )\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (BoolOp\n                        Or\n                        (list\n                          (UnaryOp Not (Subscript (Name &inde:5 Load) (Name &a:5 Load) Load))\n                          (UnaryOp Not (Subscript (Name &inde:5 Load) (Name &b:5 Load) Load))\n                        )\n                      )\n                      (Call\n                        (Name &union:0 Load)\n                        (list (Name &parent:5 Load) (Name &a:5 Load) (Name &b:5 Load) (Name &rank:5 Load))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Subscript (Name &path:5 Load) (Name &a:5 Load) Load) s_append Load)\n                        (list (Name &b:5 Load))\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Subscript (Name &path:5 Load) (Name &b:5 Load) Load) s_append Load)\n                        (list (Name &a:5 Load))\n                        nil\n                      )\n                    )\n                    (If\n                      (BoolOp\n                        Or\n                        (list\n                          (Subscript (Name &inde:5 Load) (Name &a:5 Load) Load)\n                          (Subscript (Name &inde:5 Load) (Name &b:5 Load) Load)\n                        )\n                      )\n                      (/seq\n                        (Assign\n                          (list (Name &curr:5 Store))\n                          (Call (Name g_deque Load) (list (List (list (Name &a:5 Load)) Load)) nil)\n                          None\n                        )\n                        (While\n                          (Call (Name g_len Load) (list (Name &curr:5 Load)) nil)\n                          (/seq\n                            (Assign\n                              (list (Name &xx:5 Store))\n                              (Call (Attribute (Name &curr:5 Load) s_popleft Load) nil nil)\n                              None\n                            )\n                            (Assign\n                              (list (Subscript (Name &inde:5 Load) (Name &xx:5 Load) Store))\n                              (Constant i1 None)\n                              None\n                            )\n                            (For\n                              (Name &z:5 Store)\n                              (Subscript (Name &path:5 Load) (Name &xx:5 Load) Load)\n                              (/seq\n                                (If\n                                  (UnaryOp Not (Subscript (Name &inde:5 Load) (Name &z:5 Load) Load))\n                                  (/seq\n                                    (Assign\n                                      (list (Subscript (Name &inde:5 Load) (Name &z:5 Load) Store))\n                                      (Constant i1 None)\n                                      None\n                                    )\n                                    (Expr\n                                      (Call (Attribute (Name &curr:5 Load) s_append Load) (list (Name &z:5 Load)) nil)\n                                    )\n                                  )\n                                  nil\n                                )\n                              )\n                              nil\n                              None\n                            )\n                            (Assign (list (Subscript (Name &path:5 Load) (Name &xx:5 Load) Store)) (List nil Load) None)\n                          )\n                          nil\n                        )\n                      )\n                      nil\n                    )\n                    (Expr (Call (Attribute (Name &ans:5 Load) s_append Load) (list (Name &i:5 Load)) nil))\n                  )\n                  nil\n                )\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Name g_pow Load)\n                (list\n                  (Constant i2 None)\n                  (Call (Name g_len Load) (list (Name &ans:5 Load)) nil)\n                  (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n                )\n                nil\n              )\n              (Call (Name g_len Load) (list (Name &ans:5 Load)) nil)\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name g_print Load) (list (Starred (Name &ans:5 Load) Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:6 None None) (arg &file:6 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:6 Load) s__fd Store))\n              (Call (Attribute (Name &file:6 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:6 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:6 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:6 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:6 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:6 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:6 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:7 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:7 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:7 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:7 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:7 Store))\n                  (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:7 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:7 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:7 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:8 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:8 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:8 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:8 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:8 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:8 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:8 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:8 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:8 Store))\n                  (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:8 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:8 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:8 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:9 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:9 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:9 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:10 None None) (arg &file:10 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:10 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:13 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:13 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0)\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_bisect None)))\n    (Import (list (alias g_math None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &mod:0 Store)) (Constant i1000000007 None) None)\n    (ClassDef\n      &UnionFind:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_parent Store))\n              (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:2 Load)) nil)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &find:1\n          (arguments nil (list (arg &self:3 None None) (arg &a:3 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &acopy:3 Store)) (Name &a:3 Load) None)\n            (While\n              (Compare\n                (Name &a:3 Load)\n                (list NotEq)\n                (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Name &a:3 Store))\n                  (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (While\n              (Compare (Name &acopy:3 Load) (list NotEq) (list (Name &a:3 Load)))\n              (/seq\n                (Assign\n                  (list\n                    (Tuple\n                      (list\n                        (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Store)\n                        (Name &acopy:3 Store)\n                      )\n                      Store\n                    )\n                  )\n                  (Tuple\n                    (list\n                      (Name &a:3 Load)\n                      (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Load)\n                    )\n                    Load\n                  )\n                  None\n                )\n              )\n              nil\n            )\n            (Return (Name &a:3 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &union:1\n          (arguments nil (list (arg &self:4 None None) (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Attribute (Name &self:4 Load) s_parent Load)\n                  (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &b:4 Load)) nil)\n                  Store\n                )\n              )\n              (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &a:4 Load)) nil)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None)\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &UF:0 Store))\n      (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n      None\n    )\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &out:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &l:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Call (Name g_len Load) (list (Name &l:0 Load)) nil) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Assign (list (Name &u:0 Store)) (Constant i0 None) None)\n            (Assign (list (Name &v:0 Store)) (Subscript (Name &l:0 Load) (Constant i1 None) Load) None)\n          )\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &_:0 Store) (Name &u:0 Store) (Name &v:0 Store)) Store))\n              (Name &l:0 Load)\n              None\n            )\n          )\n        )\n        (Assign\n          (list (Name &uu:0 Store))\n          (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &u:0 Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &vv:0 Store))\n          (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &v:0 Load)) nil)\n          None\n        )\n        (If\n          (Compare (Name &uu:0 Load) (list NotEq) (list (Name &vv:0 Load)))\n          (/seq\n            (Expr (Call (Attribute (Name &UF:0 Load) s_union Load) (list (Name &uu:0 Load) (Name &vv:0 Load)) nil))\n            (Expr (Call (Attribute (Name &out:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Name g_pow Load)\n            (list (Constant i2 None) (Call (Name g_len Load) (list (Name &out:0 Load)) nil) (Name &MOD:0 Load))\n            nil\n          )\n          (Call (Name g_len Load) (list (Name &out:0 Load)) nil)\n        )\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Attribute (Constant s-WzMyXQ== None) s_join Load)\n            (list (Call (Name g_map Load) (list (Name g_str Load) (Name &out:0 Load)) nil))\n            nil\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:6 None None) (arg &file:6 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:6 Load) s_newlines Store)) (Constant i0 None) None)\n            (Assign\n              (list (Attribute (Name &self:6 Load) s__fd Store))\n              (Call (Attribute (Name &file:6 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:6 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:6 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:6 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:6 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:6 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:6 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:7 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:7 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:7 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:7 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:7 Store))\n                  (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:7 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:7 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:7 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:8 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:8 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:8 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:8 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:8 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:8 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:8 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:8 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:8 Store))\n                  (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:8 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:8 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:8 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:9 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:9 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:9 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:10 None None) (arg &file:10 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:10 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:11 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:11 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n      )\n      None\n    )\n    (FunctionDef\n      &RL:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute\n                  (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &RLL:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Name g_int Load)\n                  (Call\n                    (Attribute\n                      (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                      s_split\n                      Load\n                    )\n                    nil\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &N:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &S:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &print_list:0\n      (arguments nil (list (arg &l:3 None None)) None nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                (list (Call (Name g_map Load) (list (Name g_str Load) (Name &l:3 Load)) nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &find:0\n      (arguments nil (list (arg &region:4 None None) (arg &u:4 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &path:4 Store)) (List nil Load) None)\n        (While\n          (Compare (Name &u:4 Load) (list NotEq) (list (Subscript (Name &region:4 Load) (Name &u:4 Load) Load)))\n          (/seq\n            (Expr (Call (Attribute (Name &path:4 Load) s_append Load) (list (Name &u:4 Load)) nil))\n            (Assign (list (Name &u:4 Store)) (Subscript (Name &region:4 Load) (Name &u:4 Load) Load) None)\n          )\n          nil\n        )\n        (For\n          (Name &v:4 Store)\n          (Name &path:4 Load)\n          (/seq (Assign (list (Subscript (Name &region:4 Load) (Name &v:4 Load) Store)) (Name &u:4 Load) None))\n          nil\n          None\n        )\n        (Return (Name &u:4 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &union:0\n      (arguments nil (list (arg &region:5 None None) (arg &u:5 None None) (arg &v:5 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:5 Store) (Name &v:5 Store)) Store))\n          (Tuple\n            (list\n              (Call (Name &find:0 Load) (list (Name &region:5 Load) (Name &u:5 Load)) nil)\n              (Call (Name &find:0 Load) (list (Name &region:5 Load) (Name &v:5 Load)) nil)\n            )\n            Load\n          )\n          None\n        )\n        (Assign (list (Subscript (Name &region:5 Load) (Name &u:5 Load) Store)) (Name &v:5 Load) None)\n        (Return (Compare (Name &u:5 Load) (list NotEq) (list (Name &v:5 Load))))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (Call (Name &RL:0 Load) nil nil) None)\n    (Assign\n      (list (Tuple (list (Name &M:0 Store) (Name &ans:0 Store) (Name &res:0 Store) (Name &region:0 Store)) Store))\n      (Tuple\n        (list\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          (List nil Load)\n          (Constant i1 None)\n          (Call\n            (Name g_list Load)\n            (list (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil))\n            nil\n          )\n        )\n        Load\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign (list (Name &s:0 Store)) (Call (Name &RLL:0 Load) nil nil) None)\n        (Assign\n          (list (Name &t:0 Store))\n          (IfExp\n            (Compare (Subscript (Name &s:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i2 None)))\n            (Subscript (Name &s:0 Load) (Constant i2 None) Load)\n            (Constant i0 None)\n          )\n          None\n        )\n        (If\n          (Call\n            (Name &union:0 Load)\n            (list (Name &region:0 Load) (Subscript (Name &s:0 Load) (Constant i1 None) Load) (Name &t:0 Load))\n            nil\n          )\n          (/seq\n            (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &i:0 Load)) nil))\n            (Assign\n              (list (Name &res:0 Store))\n              (BinOp (BinOp (Name &res:0 Load) LShift (Constant i1 None)) Mod (Name &M:0 Load))\n              None\n            )\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call (Name g_print Load) (list (Name &res:0 Load) (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)) nil)\n    )\n    (Expr (Call (Name &print_list:0 Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (ClassDef\n      &UnionFind:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_parent Store))\n              (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &n:2 Load))\n              None\n            )\n            (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Name &n:2 Load) None)\n            (Assign (list (Attribute (Name &self:2 Load) s_cnt Store)) (Name &n:2 Load) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &root:1\n          (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &x:3 Load) Load)\n                (list Lt)\n                (list (Constant i0 None))\n              )\n              (/seq (Return (Name &x:3 Load)))\n              (/seq\n                (Assign\n                  (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &x:3 Load) Store))\n                  (Call\n                    (Attribute (Name &self:3 Load) s_root Load)\n                    (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &x:3 Load) Load))\n                    nil\n                  )\n                  None\n                )\n                (Return (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &x:3 Load) Load))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &merge:1\n          (arguments nil (list (arg &self:4 None None) (arg &x:4 None None) (arg &y:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &x:4 Store))\n              (Call (Attribute (Name &self:4 Load) s_root Load) (list (Name &x:4 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Name &y:4 Store))\n              (Call (Attribute (Name &self:4 Load) s_root Load) (list (Name &y:4 Load)) nil)\n              None\n            )\n            (If (Compare (Name &x:4 Load) (list Eq) (list (Name &y:4 Load))) (/seq (Return (Constant False None))) nil)\n            (If\n              (Compare\n                (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &x:4 Load) Load)\n                (list Gt)\n                (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &y:4 Load) Load))\n              )\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &x:4 Store) (Name &y:4 Store)) Store))\n                  (Tuple (list (Name &y:4 Load) (Name &x:4 Load)) Load)\n                  None\n                )\n              )\n              nil\n            )\n            (AugAssign\n              (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &x:4 Load) Store)\n              Add\n              (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &y:4 Load) Load)\n            )\n            (Assign\n              (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &y:4 Load) Store))\n              (Name &x:4 Load)\n              None\n            )\n            (AugAssign (Attribute (Name &self:4 Load) s_cnt Store) Sub (Constant i1 None))\n            (Return (Constant True None))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &is_same:1\n          (arguments nil (list (arg &self:5 None None) (arg &x:5 None None) (arg &y:5 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Compare\n                (Call (Attribute (Name &self:5 Load) s_root Load) (list (Name &x:5 Load)) nil)\n                (list Eq)\n                (list (Call (Attribute (Name &self:5 Load) s_root Load) (list (Name &y:5 Load)) nil))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &size:1\n          (arguments nil (list (arg &self:6 None None) (arg &x:6 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (UnaryOp\n                USub\n                (Subscript\n                  (Attribute (Name &self:6 Load) s_parent Load)\n                  (Call (Attribute (Name &self:6 Load) s_root Load) (list (Name &x:6 Load)) nil)\n                  Load\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &count:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq (Return (Attribute (Name &self:7 Load) s_cnt Load)))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &groups:1\n          (arguments nil (list (arg &self:8 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &res:8 Store))\n              (ListComp\n                (List nil Load)\n                (list\n                  (comprehension\n                    (Name &_:11 Store)\n                    (Call (Name g_range Load) (list (Attribute (Name &self:8 Load) s_n Load)) nil)\n                    nil\n                    i0\n                  )\n                )\n              )\n              None\n            )\n            (For\n              (Name &i:8 Store)\n              (Call (Name g_range Load) (list (Attribute (Name &self:8 Load) s_n Load)) nil)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript\n                        (Name &res:8 Load)\n                        (Call (Attribute (Name &self:8 Load) s_root Load) (list (Name &i:8 Load)) nil)\n                        Load\n                      )\n                      s_append\n                      Load\n                    )\n                    (list (Name &i:8 Load))\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n            (Return\n              (ListComp\n                (Name &group:10 Load)\n                (list (comprehension (Name &group:10 Store) (Name &res:8 Load) (list (Name &group:10 Load)) i0))\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &info:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (Call\n              (Name g_map Load)\n              (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n              nil\n            )\n          )\n          nil\n        )\n        (list (comprehension (Name &i:9 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &uf:0 Store)) (Call (Name &UnionFind:0 Load) (list (Name &m:0 Load)) nil) None)\n    (Assign (list (Name &start:0 Store)) (List nil Load) None)\n    (Assign (list (Name &res:0 Store)) (List nil Load) None)\n    (For\n      (Tuple (list (Name &i:0 Store) (Tuple (list (Name &k:0 Store) (Starred (Name &vs:0 Store) Store)) Store)) Store)\n      (Call (Name g_enumerate Load) (list (Name &info:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Call (Name g_len Load) (list (Name &vs:0 Load)) nil) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Name &vs:0 Load) None)\n            (AugAssign (Name &u:0 Store) Sub (Constant i1 None))\n            (AugAssign (Name &v:0 Store) Sub (Constant i1 None))\n            (If\n              (UnaryOp\n                Not\n                (Call (Attribute (Name &uf:0 Load) s_is_same Load) (list (Name &u:0 Load) (Name &v:0 Load)) nil)\n              )\n              (/seq\n                (Expr (Call (Attribute (Name &uf:0 Load) s_merge Load) (list (Name &u:0 Load) (Name &v:0 Load)) nil))\n                (Expr\n                  (Call\n                    (Attribute (Name &res:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n          (/seq\n            (Assign\n              (list (Name &u:0 Store))\n              (BinOp (Subscript (Name &vs:0 Load) (Constant i0 None) Load) Sub (Constant i1 None))\n              None\n            )\n            (If\n              (Name &start:0 Load)\n              (/seq\n                (If\n                  (UnaryOp\n                    Not\n                    (Call\n                      (Attribute (Name &uf:0 Load) s_is_same Load)\n                      (list (Subscript (Name &start:0 Load) (UnaryOp USub (Constant i1 None)) Load) (Name &u:0 Load))\n                      nil\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &uf:0 Load) s_merge Load)\n                        (list (Subscript (Name &start:0 Load) (UnaryOp USub (Constant i1 None)) Load) (Name &u:0 Load))\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &res:0 Load) s_append Load)\n                        (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                        nil\n                      )\n                    )\n                    (Expr (Call (Attribute (Name &start:0 Load) s_append Load) (list (Name &u:0 Load)) nil))\n                  )\n                  nil\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &res:0 Load) s_append Load)\n                    (list (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n                (Expr (Call (Attribute (Name &start:0 Load) s_append Load) (list (Name &u:0 Load)) nil))\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Name g_pow Load)\n            (list (Constant i2 None) (Call (Name g_len Load) (list (Name &res:0 Load)) nil) (Name &MOD:0 Load))\n            nil\n          )\n          (Call (Name g_len Load) (list (Name &res:0 Load)) nil)\n        )\n        nil\n      )\n    )\n    (Expr (Call (Name g_print Load) (list (Starred (Name &res:0 Load) Load)) nil))\n  )\n  nil\n)"]