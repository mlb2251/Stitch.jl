["(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &z:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &arr:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &min:0 Store))\n          (BinOp\n            (Subscript (Name &arr:0 Load) (_slice_content (Constant i0 None)) Load)\n            Add\n            (Subscript (Name &arr:0 Load) (_slice_content (Constant i1 None)) Load)\n          )\n          None\n        )\n        (Assign (list (Name &pos:0 Store)) (Constant True None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                (list GtE)\n                (list (Name &min:0 Load))\n              )\n              (/seq\n                (Assign (list (Name &pos:0 Store)) (Constant False None) None)\n                (Assign (list (Name &posf:0 Store)) (Name &i:0 Load) None)\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Name &pos:0 Load)\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant s-WzQ5LCAzMiwgNTBd None))\n                  (_starred_content (BinOp (Name &posf:0 Load) Add (Constant i1 None)))\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &f:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i2 None))\n              (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n                  Add\n                  (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)\n                )\n                (list LtE)\n                (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))\n              )\n              (/seq\n                (Assign (list (Name &f:0 Store)) (Constant i1 None) None)\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (Constant s-WzQ5LCAzMiwgNTBd None))\n                      (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    )\n                    nil\n                  )\n                )\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &f:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (For\n      (Name &t:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load)))\n            nil\n          )\n          (/seq\n            (Assign (list (Name &l:0 Store)) (Name &i:0 Load) None)\n            (Assign (list (Name &r:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None)\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n                  Add\n                  (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)\n                )\n                (list LtE)\n                (list (Subscript (Name &a:0 Load) (_slice_content (Name &l:0 Load)) Load))\n              )\n              (/seq\n                (AugAssign (Name &c:0 Store) Add (Constant i1 None))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (Constant i1 None))\n                      (_starred_content (Constant i2 None))\n                      (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    )\n                    nil\n                  )\n                )\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &inp:0 Store))\n      (Call\n        (Attribute\n          (Call (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_read Load) nil nil)\n          s_split\n          Load\n        )\n        (list (_starred_content (Constant bCg== None)))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &_ii:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n    (Assign (list (Name &_DEBUG:0 Store)) (Constant i0 None) None)\n    (FunctionDef\n      &debug:0\n      (arguments nil nil (arg &args:1 None None) nil nil None nil)\n      (/seq\n        (If\n          (Name &_DEBUG:0 Load)\n          (/seq\n            (Import (list (alias &inspect:1 None)))\n            (Assign\n              (list (Name &frame:1 Store))\n              (Call (Attribute (Name &inspect:1 Load) s_currentframe Load) nil nil)\n              None\n            )\n            (Assign\n              (list (Name &frame:1 Store))\n              (Subscript\n                (Call\n                  (Attribute (Name &inspect:1 Load) s_getouterframes Load)\n                  (list (_starred_content (Name &frame:1 Load)))\n                  nil\n                )\n                (_slice_content (Constant i1 None))\n                Load\n              )\n              None\n            )\n            (Assign\n              (list (Name &string:1 Store))\n              (Call\n                (Attribute\n                  (Subscript\n                    (Attribute\n                      (Call\n                        (Attribute (Name &inspect:1 Load) s_getframeinfo Load)\n                        (list\n                          (_starred_content (Subscript (Name &frame:1 Load) (_slice_content (Constant i0 None)) Load))\n                        )\n                        nil\n                      )\n                      s_code_context\n                      Load\n                    )\n                    (_slice_content (Constant i0 None))\n                    Load\n                  )\n                  s_strip\n                  Load\n                )\n                nil\n                nil\n              )\n              None\n            )\n            (Assign\n              (list (Name &arns:1 Store))\n              (Call\n                (Attribute\n                  (Subscript\n                    (Name &string:1 Load)\n                    (_slice_slice\n                      (Slice\n                        (BinOp\n                          (Call\n                            (Attribute (Name &string:1 Load) s_find Load)\n                            (list (_starred_content (Constant s-WzQwXQ== None)))\n                            nil\n                          )\n                          Add\n                          (Constant i1 None)\n                        )\n                        (UnaryOp USub (Constant i1 None))\n                        None\n                      )\n                    )\n                    Load\n                  )\n                  s_split\n                  Load\n                )\n                (list (_starred_content (Constant s-WzQ0XQ== None)))\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant s-WzMyLCAzMiwgMzIsIDMyLCAzNSwgMTAwLCAxMDEsIDk4LCAxMTcsIDEwMywgNThd None))\n                )\n                (list (keyword s_end (Constant s-WzMyXQ== None)))\n              )\n            )\n            (For\n              (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &j:1 Store))) Store)\n              (Call\n                (Name g_zip Load)\n                (list (_starred_content (Name &arns:1 Load)) (_starred_content (Name &args:1 Load)))\n                nil\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (Name &i:1 Load))\n                      (_starred_content (Constant s-WzMyLCA2MSwgMzJd None))\n                      (_starred_content (Name &j:1 Load))\n                    )\n                    (list (keyword s_end (Constant s-WzQ0LCAzMl0= None)))\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr (Call (Name g_print Load) nil nil))\n          )\n          (/seq)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &rdln:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Global (list s__ii))\n        (AugAssign (Name g__ii Store) Add (Constant i1 None))\n        (Return (Subscript (Name &inp:0 Load) (_slice_content (Name g__ii Load)) Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &inin:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call (Name g_int Load) (list (_starred_content (Call (Name &rdln:0 Load) nil nil))) nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &inar:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (ListComp\n          (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil)\n          (list\n            (comprehension\n              (Name &x:2 Store)\n              (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_split Load) nil nil)\n              nil\n              i0\n            )\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &inst:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_strip Load) nil nil) s_decode Load)\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (Assign (list (Name &_T_:0 Store)) (Call (Name &inin:0 Load) nil nil) None)\n    (For\n      (Name &_t_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &_T_:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &n:0 Store)) (Call (Name &inin:0 Load) nil nil) None)\n        (Assign (list (Name &a:0 Store)) (Call (Name &inar:0 Load) nil nil) None)\n        (Expr\n          (Call (Name &debug:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &a:0 Load))) nil)\n        )\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n              Add\n              (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)\n            )\n            (list Gt)\n            (list (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (Constant i2 None))\n                  (_starred_content (Name &n:0 Load))\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &A:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list\n            (Tuple\n              (list\n                (_starred_content (Name &a:0 Store))\n                (_starred_content (Name &b:0 Store))\n                (_starred_content (Name &c:0 Store))\n              )\n              Store\n            )\n          )\n          (Tuple\n            (list\n              (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load))\n              (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i1 None)) Load))\n              (_starred_content (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Compare (Name &c:0 Load) (list GtE) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load))))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (Constant i2 None))\n                  (_starred_content (Name &n:0 Load))\n                )\n                nil\n              )\n            )\n            (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)\n          )\n          (/seq)\n        )\n        (If\n          (UnaryOp Not (Name &flag:0 Load))\n          (/seq\n            (Assign\n              (list\n                (Tuple\n                  (list\n                    (_starred_content (Name &a:0 Store))\n                    (_starred_content (Name &b:0 Store))\n                    (_starred_content (Name &c:0 Store))\n                  )\n                  Store\n                )\n              )\n              (Tuple\n                (list\n                  (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load))\n                  (_starred_content\n                    (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)\n                  )\n                  (_starred_content\n                    (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)\n                  )\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (Compare (BinOp (Name &c:0 Load) Sub (Name &b:0 Load)) (list GtE) (list (Name &a:0 Load)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (_starred_content (Constant i1 None))\n                      (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))\n                      (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n                    )\n                    nil\n                  )\n                )\n                (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n        (If\n          (UnaryOp Not (Name &flag:0 Load))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (While\n      (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &k:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None)\n        (Assign (list (Name &j:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n        (For\n          (Name &it:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (_starred_content (Constant i1 None))\n              (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load)\n                  Add\n                  (Subscript (Name &a:0 Load) (_slice_content (Name &it:0 Load)) Load)\n                )\n                (list LtE)\n                (list (Subscript (Name &a:0 Load) (_slice_content (Name &k:0 Load)) Load))\n              )\n              (/seq (Assign (list (Name &j:0 Store)) (Name &it:0 Load) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &j:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                  (_starred_content (BinOp (Name &j:0 Load) Add (Constant i1 None)))\n                  (_starred_content (BinOp (Name &k:0 Load) Add (Constant i1 None)))\n                )\n                nil\n              )\n            )\n          )\n        )\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n      )\n      (/seq)\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &array:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &array:0 Load) (_slice_content (Constant i0 None)) Load)\n              Add\n              (Subscript (Name &array:0 Load) (_slice_content (Constant i1 None)) Load)\n            )\n            (list LtE)\n            (list (Subscript (Name &array:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (Constant i2 None))\n                  (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &array:0 Load))) nil))\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (For\n      (Name &_:0 Store)\n      (Call\n        (Name g_range Load)\n        (list\n          (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))\n        )\n        nil\n      )\n      (/seq\n        (Expr (Call (Name g_input Load) nil nil))\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n              Add\n              (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)\n            )\n            (list LtE)\n            (list (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (Constant i2 None))\n                  (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (_starred_content\n                (Call\n                  (Name g_map Load)\n                  (list\n                    (_starred_content (Name g_int Load))\n                    (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                  )\n                  nil\n                )\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load)\n              Add\n              (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)\n            )\n            (list Gt)\n            (list (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (Constant i2 None))\n                  (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign\n      (list (Name &t:0 Store))\n      (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil)\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)\n          None\n        )\n        (Assign\n          (list (Name &x:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil)\n            (list\n              (comprehension\n                (Name &x:1 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load)\n              Add\n              (Subscript (Name &x:0 Load) (_slice_content (Constant i1 None)) Load)\n            )\n            (list LtE)\n            (list (Subscript (Name &x:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (_starred_content (Constant i1 None))\n                  (_starred_content (Constant i2 None))\n                  (_starred_content (Name &n:0 Load))\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"]