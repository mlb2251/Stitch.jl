[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "match_sequences": true,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_choicevar": -1.01,
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                1,
                3,
                "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name %2 Store)) #0 None) (Assign (list (Name %3 Store)) (Call (Attribute (Name %2 Load) s_count Load) (list (Constant s_8 None)) nil) None))",
                "seqS",
                [
                    "E"
                ],
                [
                    "X",
                    "X",
                    "X"
                ]
            ],
            [
                0,
                0,
                "(/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))",
                "seqS",
                [],
                []
            ],
            [
                0,
                0,
                "(Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)",
                "E",
                [],
                []
            ]
        ],
        "programs": [
            "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &n:0 &s:0 &k:0)) (Assign (list (Name &l:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) None) (If (Compare (Name &k:0 Load) (list LtE) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (/seq (Expr (Call (Name g_print Load) (list (Name &k:0 Load)) nil))) (/seq (While (Compare (Name &k:0 Load) (list Gt) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (/seq (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) (AugAssign (Name &l:0 Store) Add (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (Name &k:0 Load) (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))) nil)) nil))))) nil)",
            "(Module (/seq (/splice (fn_1 (Call (Name g_str Load) (list (Call (Name g_input Load) nil nil)) nil) &n:0 &s:0 &p:0)) (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (Assign (list (Name &f:0 Store)) (Call (Name g_min Load) (list (Name &p:0 Load) (Name &q:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Name &f:0 Load)) nil))) nil)",
            "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &a:0 &y:0 &x:0)) (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (BinOp (Name &a:0 Load) FloorDiv (Constant i11 None)) (Name &x:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &nb_8:0 Store)) (Constant i0 None) None) (If (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))) (/seq (While (BinOp (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) BitAnd (Compare (BinOp (Name &n:0 Load) Sub (BinOp (Name &nb_8:0 Load) Mult (Constant i11 None))) (list Gt) (list (Constant i10 None)))) (/seq (If (Compare (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant s_8 None))) (/seq (AugAssign (Name &nb_8:0 Store) Add (Constant i1 None))) nil) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) nil)) nil) (Expr (Call (Name g_print Load) (list (Name &nb_8:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &eights:0 Store)) (Constant i0 None) None) (Assign (list (Name &others:0 Store)) (Constant i0 None) None) (For (Name &elem:0 Store) (Call (Name g_input Load) nil nil) (/seq (If (Compare (Call (Name g_int Load) (list (Name &elem:0 Load)) nil) (list Eq) (list (Constant i8 None))) (/seq (AugAssign (Name &eights:0 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &others:0 Store) Add (Constant i1 None))))) nil None) (Assign (list (Name &answer:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (If (Compare (Name &eights:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq (AugAssign (Name &eights:0 Store) Sub (Constant i1 None)) (If (Compare (Name &others:0 Load) (list GtE) (list (Constant i10 None))) (/seq (AugAssign (Name &others:0 Store) Sub (Constant i10 None)) (AugAssign (Name &answer:0 Store) Add (Constant i1 None))) (/seq (If (Compare (BinOp (Name &eights:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (list GtE) (list (Constant i0 None))) (/seq (AugAssign (Name &eights:0 Store) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (Assign (list (Name &others:0 Store)) (Constant i0 None) None) (AugAssign (Name &answer:0 Store) Add (Constant i1 None))) (/seq Break))))))) nil) (Expr (Call (Name g_print Load) (list (Name &answer:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_os None))) (Import (list (alias g_sys None))) (Import (list (alias g_math None))) (Import (list (alias g_heapq None))) (ImportFrom s_decimal (list (alias g_* None)) i0) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (FunctionDef &r:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil))) nil None None) (FunctionDef &rm:0 (arguments nil nil None nil nil None nil) (/seq (Return (fn_3))) nil None None) (FunctionDef &rl:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (fn_3)) nil))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name &r:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &num:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (AugAssign (Subscript (Name &num:0 Load) (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil) Store) Add (Constant i1 None))) nil None) (If (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list Eq) (list (Constant i0 None))) (fn_2) (/seq (Assign (list (Name &tot:0 Store)) (BinOp (Name &n:0 Load) Sub (Subscript (Name &num:0 Load) (Constant i8 None) Load)) None) (Assign (list (Name &strips:0 Store)) (BinOp (Name &tot:0 Load) FloorDiv (Constant i10 None)) None) (Assign (list (Name &rem:0 Store)) (BinOp (Name &tot:0 Load) Mod (Constant i10 None)) None) (If (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list LtE) (list (Name &strips:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &num:0 Load) (Constant i8 None) Load)) nil))) (/seq (Assign (list (Name &ans:0 Store)) (Name &strips:0 Load) None) (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Sub (Name &strips:0 Load)) (AugAssign (Name &ans:0 Store) Add (BinOp (Subscript (Name &num:0 Load) (Constant i8 None) Load) FloorDiv (Constant i11 None))) (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Mod (Constant i11 None)) (AugAssign (Name &ans:0 Store) Add (IfExp (Compare (BinOp (BinOp (Name &rem:0 Load) Add (Subscript (Name &num:0 Load) (Constant i8 None) Load)) Sub (Constant i1 None)) (list GtE) (list (Constant i10 None))) (Constant i1 None) (Constant i0 None))) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))))))) nil)",
            "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (Call (Name g_input Load) nil nil)) nil) &n:0 &a:0 &k:0)) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (While (BoolOp And (list (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))))) (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None)) (AugAssign (Name &n:0 Store) Sub (Constant i11 None)) (AugAssign (Name &k:0 Store) Sub (Constant i1 None))) nil) (Expr (Call (Name g_print Load) (list (Name &s:0 Load)) nil))) nil)",
            "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &n:0 &s:0 &a:0)) (Assign (list (Name &b:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (Name &a:0 Load) (Name &b:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &n:0 &s:0 &c:0)) (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (If (Compare (Name &c:0 Load) (list GtE) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None))) nil))) (/seq (If (Compare (Name &c:0 Load) (list Lt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil))) (fn_2))))) nil)",
            "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None))) (/seq (Assign (list (Name &count:0 Store)) (BinOp (Name &count:0 Load) Add (Constant i1 None)) None)) nil)) nil None) (If (Compare (Name &count:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &p:0 Store)) (BinOp (Name &N:0 Load) Div (Constant i11 None)) None) (If (Compare (Name &p:0 Load) (list Gt) (list (Name &count:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &count:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &p:0 Load)) nil)) nil))))) (fn_2))) nil)"
        ]
    }
]
