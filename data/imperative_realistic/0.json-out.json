[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                0,
                0,
                "(Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)",
                "E",
                [],
                []
            ],
            [
                0,
                1,
                "(Call (Name g_range Load) (list (BinOp (Name %1 Load) Sub (Constant i1 None))) nil)",
                "E",
                [],
                [
                    "X"
                ]
            ],
            [
                0,
                1,
                "(Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)",
                "S",
                [],
                [
                    "X"
                ]
            ]
        ],
        "programs": [
            "(Module (/seq (fn_3 &m:0) (Assign (list (Name &l:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (For (Name &_:0 Store) (fn_2 &m:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (fn_1) None) (AugAssign (Subscript (Name &l:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &l:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))) nil None) (If (Compare (Constant i2 None) (list In) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (ClassDef &D1AddOnATree:0 nil nil (/seq (FunctionDef &dfs:1 (arguments nil (list (arg &self:2 None None) (arg &start:2 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:2 Load) s_done Load) (Name &start:2 Load) Store)) (Constant i1 None) None) (For (Name &x:2 Store) (Subscript (Attribute (Name &self:2 Load) s_adj Load) (Name &start:2 Load) Load) (/seq (If (Subscript (Attribute (Name &self:2 Load) s_done Load) (Name &x:2 Load) Load) (/seq Continue) nil) (Assign (list (Subscript (Attribute (Name &self:2 Load) s_par Load) (Name &x:2 Load) Store)) (Name &start:2 Load) None) (Expr (Call (Attribute (Name &self:2 Load) s_dfs Load) (list (Name &x:2 Load)) nil))) nil None)) nil None None) (FunctionDef &solve:1 (arguments nil (list (arg &self:3 None None)) None nil nil None nil) (/seq (ImportFrom s_collections (list (alias &defaultdict:3 None)) i0) (Import (list (alias &sys:3 None))) (Expr (Call (Attribute (Name &sys:3 Load) s_setrecursionlimit Load) (list (BinOp (BinOp (Constant i10 None) Pow (Constant i5 None)) Add (Constant i5 None))) nil)) (Assign (list (Name &n:3 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_adj Store)) (Call (Name &defaultdict:3 Load) (list (Name g_list Load)) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_par Store)) (Call (Name &defaultdict:3 Load) (list (Name g_int Load)) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_done Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None) (For (Name &i:3 Store) (fn_2 &n:3) (/seq (Assign (list (Tuple (list (Name &u:3 Store) (Name &v:3 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &_:4 Load)) nil) (list (comprehension (Name &_:4 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &u:3 Load) Load) s_append Load) (list (Name &v:3 Load)) nil)) (Expr (Call (Attribute (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &v:3 Load) Load) s_append Load) (list (Name &u:3 Load)) nil)) (AugAssign (Subscript (Attribute (Name &self:3 Load) s_done Load) (Name &u:3 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Attribute (Name &self:3 Load) s_done Load) (Name &v:3 Load) Store) Add (Constant i1 None))) nil None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:3 Load) Add (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_done Load) (Name &i:3 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) None) (Return None) (Assign (list (Name &v:3 Store)) (Call (Name g_max Load) (list (GeneratorExp (Call (Name g_len Load) (list (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &p:5 Load) Load)) nil) (list (comprehension (Name &p:5 Store) (Attribute (Name &self:3 Load) s_adj Load) nil i0)))) nil) None) (Assign (list (Name &start:3 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &p:3 Store) (Attribute (Name &self:3 Load) s_adj Load) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &p:3 Load) Load)) nil) (list Eq) (list (Name &v:3 Load))) (/seq (Assign (list (Name &start:3 Store)) (Name &p:3 Load) None) Break) nil)) nil None) (Assert (Compare (Name &start:3 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) None) (Expr (Call (Attribute (Name &self:3 Load) s_dfs Load) (list (Name &start:3 Load)) nil)) (Assign (list (Name &cnt:3 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None) (For (Name &k:3 Store) (Attribute (Name &self:3 Load) s_adj Load) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &k:3 Load) Load) (list Eq) (list (Constant i0 None))) (/seq Continue) nil) (If (Compare (Call (Name g_len Load) (list (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &k:3 Load) Load)) nil) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Subscript (Name &cnt:3 Load) (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &k:3 Load) Load) Store) Add (Constant i1 None))) nil)) nil None) (Assign (list (Name &ans:3 Store)) (Constant i0 None) None) (For (Name &x:3 Store) (Name &cnt:3 Load) (/seq (If (Compare (Name &x:3 Load) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &ans:3 Store) Add (Constant i1 None))) nil)) nil None) (If (Compare (Name &ans:3 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))))) nil None None)) nil) (Assign (list (Name &solver:0 Store)) (Call (Name &D1AddOnATree:0 Load) nil nil) None) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Expr (Call (Attribute (Name &solver:0 Load) s_solve Load) nil nil))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &deg:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (fn_1) None) (AugAssign (Name &u:0 Store) Sub (Constant i1 None)) (AugAssign (Name &v:0 Store) Sub (Constant i1 None)) (AugAssign (Subscript (Name &deg:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &deg:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))) nil None) (For (Name &d:0 Store) (Name &deg:0 Load) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)",
            "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (ImportFrom s_heapq (list (alias g_heappush None) (alias g_heappop None)) i0) (ImportFrom s_math (list (alias g_inf None)) i0) (Assign (list (Name &ri:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (fn_1)) None) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (fn_3 &n:1) (Assign (list (Name &cnt:1 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None) (For (Name &_:1 Store) (fn_2 &n:1) (/seq (Assign (list (Tuple (list (Name &x:1 Store) (Name &y:1 Store)) Store)) (Call (Name &ri:0 Load) nil nil) None) (AugAssign (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &cnt:1 Load) (Name &y:1 Load) Store) Add (Constant i1 None))) nil None) (Assign (list (Name &valid:1 Store)) (Constant True None) None) (For (Name &x:1 Store) (Name &cnt:1 Load) (/seq (If (Compare (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None)) nil)) nil None) (If (Name &valid:1 Load) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))))) nil None None) (Assign (list (Name &t:0 Store)) (Constant i1 None) None) (While (Name &t:0 Load) (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Expr (Call (Name &solve:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &tree_nums:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a1:0 Store) (Name &a2:0 Store)) Store)) (fn_1) None) (AugAssign (Subscript (Name &tree_nums:0 Load) (BinOp (Name &a1:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &tree_nums:0 Load) (BinOp (Name &a2:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None))) nil None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Assign (list (Name &ans_is_no:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Subscript (Name &tree_nums:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &ans_is_no:0 Store)) (Constant True None) None) (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) nil)) nil None) (If (UnaryOp Not (Name &ans_is_no:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)))))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &gr:0 Store)) (DictComp (Name &i:1 Load) (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (fn_1) None) (AugAssign (Subscript (Name &gr:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &gr:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))) nil None) (For (Name &i:0 Store) (Name &gr:0 Load) (/seq (If (Compare (Subscript (Name &gr:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &arr:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (For (Name &_:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (fn_1) None) (AugAssign (Subscript (Name &arr:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &arr:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) None)) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &g:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (Assign (list (Name &d:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i100001 None)) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:2 Load)) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (Name &u:0 Load) Load) s_append Load) (list (Name &v:0 Load)) nil)) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (Name &v:0 Load) Load) s_append Load) (list (Name &u:0 Load)) nil)) (AugAssign (Subscript (Name &d:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &d:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))) nil None) (For (Name &i:0 Store) (Name &d:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) None)) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &edges:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (AugAssign (Subscript (Name &edges:0 Load) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &edges:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None))) nil None) (If (Compare (Constant i2 None) (list In) (list (Name &edges:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &l:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (fn_1) None) (AugAssign (Subscript (Name &l:0 Load) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &l:0 Load) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None))) nil None) (For (Name &i:0 Store) (Name &l:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None) (alias g_exit None)) i0) (fn_3 &n:0) (Assign (list (Name &graph:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil) None) (Expr (Call (Attribute (Subscript (Name &graph:0 Load) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) Load) s_append Load) (list (BinOp (Name &v:0 Load) Sub (Constant i1 None))) nil)) (Expr (Call (Attribute (Subscript (Name &graph:0 Load) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) Load) s_append Load) (list (BinOp (Name &u:0 Load) Sub (Constant i1 None))) nil))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &graph:0 Load) (Name &i:0 Load) Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)",
            "(Module (/seq (ImportFrom s_collections (list (alias g_Counter None)) i0) (fn_3 &n:0) (Assign (list (Name &x:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (fn_2 &n:0) (/seq (Expr (Call (Attribute (Name &x:0 Load) s_extend Load) (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil))) nil None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (Constant i2 None) (list In) (list (Call (Attribute (Call (Name g_Counter Load) (list (Name &x:0 Load)) nil) s_values Load) nil nil))) (Constant s_NO None) (Constant s_YES None))) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None) (alias g_os None))) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (ImportFrom s_math (list (alias g_floor None) (alias g_gcd None) (alias g_fabs None) (alias g_factorial None) (alias g_fmod None) (alias g_sqrt None) (alias g_inf None) (alias g_log None)) i0) (ImportFrom s_collections (list (alias s_defaultdict g_dd) (alias g_deque None)) i0) (ImportFrom s_heapq (list (alias g_merge None) (alias g_heapify None) (alias g_heappop None) (alias g_heappush None) (alias g_nsmallest None)) i0) (ImportFrom s_bisect (list (alias s_bisect_left g_bl) (alias s_bisect_right g_br) (alias g_bisect None)) i0) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name g_IOBase Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:10 None None) (arg &file:10 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:10 Load) s__fd Store)) (Call (Attribute (Name &file:10 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:10 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None) (Assign (list (Attribute (Name &self:10 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:10 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:10 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:10 Load) s_write Store)) (IfExp (Attribute (Name &self:10 Load) s_writable Load) (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:11 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:11 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:11 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:11 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:11 Load)) (/seq Break) nil) (Assign (list (Name &ptr:11 Store)) (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_write Load) (list (Name &b:11 Load)) nil) (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_seek Load) (list (Name &ptr:11 Load)) nil)) Load))) nil) (Assign (list (Attribute (Name &self:11 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:12 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:12 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:12 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:12 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:12 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:12 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:12 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:12 Load))) None) (Assign (list (Name &ptr:12 Store)) (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_write Load) (list (Name &b:12 Load)) nil) (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_seek Load) (list (Name &ptr:12 Load)) nil)) Load))) nil) (AugAssign (Attribute (Name &self:12 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:13 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:13 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name g_os Load) s_write Load) (list (Attribute (Name &self:13 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name g_IOBase Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:14 None None) (arg &file:14 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:14 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:14 Load)) nil) None) (Assign (list (Attribute (Name &self:14 Load) s_flush Store)) (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:14 Load) s_writable Store)) (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:14 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:17 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:17 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:14 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:14 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Name &stdin:0 Store) (Name &stdout:0 Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &mod:0 Store)) (BinOp (Call (Name g_pow Load) (list (Constant i10 None) (Constant i9 None)) nil) Add (Constant i7 None)) None) (Assign (list (Name &mod2:0 Store)) (Constant i998244353 None) None) (FunctionDef &inp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Attribute (Name &stdin:0 Load) s_readline Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &iinp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name &inp:0 Load) nil nil)) nil))) nil None None) (FunctionDef &out:0 (arguments nil (list (arg &var:3 None None) (arg &end:3 None None)) None nil nil None (list (Constant s-WzEwXQ== None))) (/seq (Expr (Call (Attribute (Name &stdout:0 Load) s_write Load) (list (BinOp (Call (Name g_str Load) (list (Name &var:3 Load)) nil) Add (Constant s-WzEwXQ== None))) nil))) nil None None) (FunctionDef &outa:0 (arguments nil nil (arg &var:4 None None) (list (arg &end:4 None None)) (list (Constant s-WzEwXQ== None)) None nil) (/seq (Expr (Call (Attribute (Name &stdout:0 Load) s_write Load) (list (BinOp (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &var:4 Load)) nil)) nil) Add (Name &end:4 Load))) nil))) nil None None) (FunctionDef &lmp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name &mp:0 Load) nil nil)) nil))) nil None None) (FunctionDef &mp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &smp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_str Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &l1d:0 (arguments nil (list (arg &n:5 None None) (arg &val:5 None None)) None nil nil None (list (Constant i0 None))) (/seq (Return (ListComp (Name &val:5 Load) (list (comprehension (Name &i:15 Store) (Call (Name g_range Load) (list (Name &n:5 Load)) nil) nil i0))))) nil None None) (FunctionDef &l2d:0 (arguments nil (list (arg &n:6 None None) (arg &m:6 None None) (arg &val:6 None None)) None nil nil None (list (Constant i0 None))) (/seq (Return (ListComp (Call (Name &l1d:0 Load) (list (Name &m:6 Load) (Name &val:6 Load)) nil) (list (comprehension (Name &j:16 Store) (Call (Name g_range Load) (list (Name &n:6 Load)) nil) nil i0))))) nil None None) (FunctionDef &remadd:0 (arguments nil (list (arg &x:7 None None) (arg &y:7 None None)) None nil nil None nil) (/seq (Return (IfExp (BinOp (Name &x:7 Load) Mod (Name &y:7 Load)) (Constant i1 None) (Constant i0 None)))) nil None None) (FunctionDef &ceil:0 (arguments nil (list (arg &a:8 None None) (arg &b:8 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (BinOp (Name &a:8 Load) Add (Name &b:8 Load)) Sub (Constant i1 None)) FloorDiv (Name &b:8 Load)))) nil None None) (Assign (list (Name &S1:0 Store)) (Constant s_abcdefghijklmnopqrstuvwxyz None) None) (Assign (list (Name &S2:0 Store)) (Constant s_ABCDEFGHIJKLMNOPQRSTUVWXYZ None) None) (FunctionDef &isprime:0 (arguments nil (list (arg &x:9 None None)) None nil nil None nil) (/seq (If (Compare (Name &x:9 Load) (list LtE) (list (Constant i1 None))) (/seq (Return (Constant False None))) nil) (If (Compare (Name &x:9 Load) (list In) (list (Tuple (list (Constant i2 None) (Constant i3 None)) Load))) (/seq (Return (Constant True None))) nil) (If (Compare (BinOp (Name &x:9 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant False None))) nil) (For (Name &i:9 Store) (Call (Name g_range Load) (list (Constant i3 None) (BinOp (Call (Name g_int Load) (list (Call (Name g_sqrt Load) (list (Name &x:9 Load)) nil)) nil) Add (Constant i1 None)) (Constant i2 None)) nil) (/seq (If (Compare (BinOp (Name &x:9 Load) Mod (Name &i:9 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant False None))) nil)) nil None) (Return (Constant True None))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name &iinp:0 Load) nil nil) None) (Assign (list (Name &edges:0 Store)) (Call (Name &l1d:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name &mp:0 Load) nil nil) None) (AugAssign (Subscript (Name &edges:0 Load) (Name &x:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &edges:0 Load) (Name &y:0 Load) Store) Add (Constant i1 None))) nil None) (Assign (list (Name &flg:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Name &edges:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &flg:0 Store)) (Constant False None) None) Break) nil)) nil None) (Expr (Call (Name g_print Load) (list (IfExp (Name &flg:0 Load) (Constant s_YES None) (Constant s_NO None))) nil))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &dic:0 Store)) (Dict nil nil) None) (For (Name &x:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (If (Compare (Name &a:0 Load) (list In) (list (Name &dic:0 Load))) (/seq (AugAssign (Subscript (Name &dic:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &dic:0 Load) (Name &a:0 Load) Store)) (Constant i1 None) None))) (If (Compare (Name &b:0 Load) (list In) (list (Name &dic:0 Load))) (/seq (AugAssign (Subscript (Name &dic:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &dic:0 Load) (Name &b:0 Load) Store)) (Constant i1 None) None)))) nil None) (Assign (list (Name &flag:0 Store)) (Constant i5 None) None) (For (Name &it:0 Store) (Name &dic:0 Load) (/seq (If (Compare (Subscript (Name &dic:0 Load) (Name &it:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i6 None) None) Break) nil)) nil None) (If (Compare (Name &flag:0 Load) (list Eq) (list (Constant i6 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &deg:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &j:2 Load)) nil) (list (comprehension (Name &j:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil) nil i0))) None) (AugAssign (Subscript (Name &deg:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &deg:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))) nil None) (Assign (list (Name &ans:0 Store)) (Constant s_YES None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Name &deg:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &ans:0 Store)) (Constant s_NO None) None) Break) nil)) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &neigh:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (fn_1) None) (AugAssign (Name &u:0 Store) Sub (Constant i1 None)) (AugAssign (Name &v:0 Store) Sub (Constant i1 None)) (Expr (Call (Attribute (Subscript (Name &neigh:0 Load) (Name &u:0 Load) Load) s_append Load) (list (Name &v:0 Load)) nil)) (Expr (Call (Attribute (Subscript (Name &neigh:0 Load) (Name &v:0 Load) Load) s_append Load) (list (Name &u:0 Load)) nil))) nil None) (Assign (list (Name &no:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &neigh:0 Load) (Name &i:0 Load) Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &no:0 Store)) (Constant True None) None)) nil)) nil None) (If (Name &no:0 Load) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil)) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &graph:0 Store)) (Dict nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Name &graph:0 Load) (Name &i:0 Load) Store)) (List nil Load) None)) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &n:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (Expr (Call (Attribute (Subscript (Name &graph:0 Load) (Name &a:0 Load) Load) s_append Load) (list (Name &b:0 Load)) nil)) (Expr (Call (Attribute (Subscript (Name &graph:0 Load) (Name &b:0 Load) Load) s_append Load) (list (Name &a:0 Load)) nil))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &graph:0 Load) (Name &i:0 Load) Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) None)) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &node:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Constant i1 None) Add (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &node:0 Load) s_append Load) (list (List nil Load)) nil))) nil None) (For (Name &q:0 Store) (fn_2 &n:0) (/seq (Assign (list (Name &k:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Expr (Call (Attribute (Subscript (Name &node:0 Load) (Subscript (Name &k:0 Load) (Constant i0 None) Load) Load) s_append Load) (list (Subscript (Name &k:0 Load) (Constant i1 None) Load)) nil)) (Expr (Call (Attribute (Subscript (Name &node:0 Load) (Subscript (Name &k:0 Load) (Constant i1 None) Load) Load) s_append Load) (list (Subscript (Name &k:0 Load) (Constant i0 None) Load)) nil))) nil None) (Assign (list (Name &hobe:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &node:0 Load) (Name &i:0 Load) Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &hobe:0 Store)) (Constant False None) None)) nil)) nil None) (If (Name &hobe:0 Load) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (ImportFrom s_math (list (alias g_factorial None)) i0) (ClassDef &Node:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:5 None None) (arg &num:5 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:5 Load) s_num Store)) (Name &num:5 Load) None) (Assign (list (Attribute (Name &self:5 Load) s_binds Store)) (List nil Load) None) (Assign (list (Attribute (Name &self:5 Load) s_marker Store)) (Constant False None) None) (Assign (list (Attribute (Name &self:5 Load) s_val Store)) (Constant None None) None)) nil None None) (FunctionDef &add_bind:1 (arguments nil (list (arg &self:6 None None) (arg &oth:6 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Attribute (Name &self:6 Load) s_binds Load) s_append Load) (list (Name &oth:6 Load)) nil))) nil None None) (FunctionDef &__repr__:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (Return (Call (Attribute (Constant s-WzYwLCAxMjMsIDEyNSwgNTgsIDMyLCAxMjMsIDEyNSwgMTIzLCAxMjUsIDYyXQ== None) s_format Load) (list (Attribute (Name &self:7 Load) s_num Load) (ListComp (Attribute (Name &i:11 Load) s_num Load) (list (comprehension (Name &i:11 Store) (Attribute (Name &self:7 Load) s_binds Load) nil i0))) (IfExp (Compare (Attribute (Name &self:7 Load) s_val Load) (list NotEq) (list (Constant None None))) (Call (Attribute (Constant s-WzQ0LCAzMiwgOSwgMTE4LCA5NywgMTA4LCA1OCwgMzIsIDEyMywgMTI1XQ== None) s_format Load) (list (Attribute (Name &self:7 Load) s_val Load)) nil) (Constant s_ None))) nil))) nil None None)) nil) (ClassDef &Graph:0 nil nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:8 None None) (arg &size:8 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:8 Load) s_size Store)) (Name &size:8 Load) None) (Assign (list (Attribute (Name &self:8 Load) s_nodes Store)) (BinOp (List (list (Constant None None)) Load) Add (ListComp (Call (Name &Node:0 Load) (list (Name &num:12 Load)) nil) (list (comprehension (Name &num:12 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &size:8 Load) Add (Constant i1 None))) nil) nil i0)))) None)) nil None None) (FunctionDef &read_input:2 (arguments nil (list (arg &self:9 None None)) None nil nil None nil) (/seq (For (Name &_:9 Store) (Call (Name g_range Load) (list (Constant i1 None) (Attribute (Name &self:9 Load) s_size Load)) nil) (/seq (Assign (list (Tuple (list (Name &i:9 Store) (Name &j:9 Store)) Store)) (GeneratorExp (Call (Name g_int Load) (list (Name &x:13 Load)) nil) (list (comprehension (Name &x:13 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Subscript (Attribute (Name &self:9 Load) s_nodes Load) (Name &i:9 Load) Load) s_add_bind Load) (list (Subscript (Attribute (Name &self:9 Load) s_nodes Load) (Name &j:9 Load) Load)) nil)) (Expr (Call (Attribute (Subscript (Attribute (Name &self:9 Load) s_nodes Load) (Name &j:9 Load) Load) s_add_bind Load) (list (Subscript (Attribute (Name &self:9 Load) s_nodes Load) (Name &i:9 Load) Load)) nil))) nil None)) nil None None) (FunctionDef &__repr__:2 (arguments nil (list (arg &self:10 None None)) None nil nil None nil) (/seq (Return (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (GeneratorExp (Call (Name g_str Load) (list (Name &node:14 Load)) nil) (list (comprehension (Name &node:14 Store) (Subscript (Attribute (Name &self:10 Load) s_nodes Load) (Slice (Constant i1 None) None None) Load) nil i0)))) nil))) nil None None)) nil) (FunctionDef &pairs:0 (arguments nil (list (arg &n:3 None None)) None nil nil None nil) (/seq (Return (BinOp (Call (Name g_factorial Load) (list (Name &n:3 Load)) nil) FloorDiv (BinOp (Call (Name g_factorial Load) (list (BinOp (Name &n:3 Load) Sub (Constant i2 None))) nil) Mult (Constant i2 None))))) nil None None) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)) nil) None) (Assign (list (Name &g:0 Store)) (Call (Name &Graph:0 Load) (list (Name &N:0 Load)) nil) None) (Expr (Call (Attribute (Name &g:0 Load) s_read_input Load) nil nil)) (Assign (list (Name &ends:0 Store)) (ListComp (Name &node:4 Load) (list (comprehension (Name &node:4 Store) (Subscript (Attribute (Name &g:0 Load) s_nodes Load) (Slice (Constant i1 None) None None) Load) (list (Compare (Call (Name g_len Load) (list (Attribute (Name &node:4 Load) s_binds Load)) nil) (list Eq) (list (Constant i1 None)))) i0))) None) (For (Name &n:0 Store) (Subscript (Attribute (Name &g:0 Load) s_nodes Load) (Slice (Constant i1 None) None None) Load) (/seq (If (Compare (Call (Name g_len Load) (list (Attribute (Name &n:0 Load) s_binds Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) None)) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &a:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &c:0 Store) (Name &d:0 Store)) Store)) (fn_1) None) (AugAssign (Subscript (Name &a:0 Load) (BinOp (Name &c:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &a:0 Load) (BinOp (Name &d:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None))) nil None) (Assign (list (Name &stat:0 Store)) (Compare (Constant i2 None) (list In) (list (Name &a:0 Load))) None) (If (Name &stat:0 Load) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (ImportFrom s_collections (list (alias &deque:0 None)) i0) (ClassDef &Graph:0 (list (Name g_object Load)) nil (/seq (Expr (Constant s-WzEwMCwgMTExLCA5OSwgMTE1LCAxMTYsIDExNCwgMTA1LCAxMTAsIDEwMywgMzIsIDEwMiwgMTExLCAxMTQsIDMyLCA3MSwgMTE0LCA5NywgMTEyLCAxMDRd None)) (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &n:2 None None) (arg &d:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Name &n:2 Load) None) (Assign (list (Attribute (Name &self:2 Load) s_graph Store)) (ListComp (List nil Load) (list (comprehension (Name &i:9 Store) (Call (Name g_range Load) (list (Name &n:2 Load)) nil) nil i0))) None) (Assign (list (Attribute (Name &self:2 Load) s_parent Store)) (ListComp (UnaryOp USub (Constant i1 None)) (list (comprehension (Name &i:10 Store) (Call (Name g_range Load) (list (Name &n:2 Load)) nil) nil i0))) None) (Assign (list (Attribute (Name &self:2 Load) s_directed Store)) (Name &d:2 Load) None)) nil None None) (FunctionDef &addEdge:1 (arguments nil (list (arg &self:3 None None) (arg &x:3 None None) (arg &y:3 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Subscript (Attribute (Name &self:3 Load) s_graph Load) (Name &x:3 Load) Load) s_append Load) (list (Name &y:3 Load)) nil)) (If (UnaryOp Not (Attribute (Name &self:3 Load) s_directed Load)) (/seq (Expr (Call (Attribute (Subscript (Attribute (Name &self:3 Load) s_graph Load) (Name &y:3 Load) Load) s_append Load) (list (Name &x:3 Load)) nil))) nil)) nil None None) (FunctionDef &bfs:1 (arguments nil (list (arg &self:4 None None) (arg &root:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &queue:4 Store)) (List (list (Name &root:4 Load)) Load) None) (Assign (list (Name &queue:4 Store)) (Call (Name &deque:0 Load) (list (Name &queue:4 Load)) nil) None) (Assign (list (Name &vis:4 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Attribute (Name &self:4 Load) s_n Load)) None) (While (Compare (Call (Name g_len Load) (list (Name &queue:4 Load)) nil) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &element:4 Store)) (Call (Attribute (Name &queue:4 Load) s_popleft Load) nil nil) None) (Assign (list (Subscript (Name &vis:4 Load) (Name &element:4 Load) Store)) (Constant i1 None) None) (Assign (list (Name &count:4 Store)) (Constant i0 None) None) (For (Name &i:4 Store) (Subscript (Attribute (Name &self:4 Load) s_graph Load) (Name &element:4 Load) Load) (/seq (If (Compare (Subscript (Name &vis:4 Load) (Name &i:4 Load) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &queue:4 Load) s_append Load) (list (Name &i:4 Load)) nil)) (Assign (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &i:4 Load) Store)) (Name &element:4 Load) None) (Assign (list (Subscript (Name &vis:4 Load) (Name &i:4 Load) Store)) (Constant i1 None) None) (AugAssign (Name &count:4 Store) Add (Constant i1 None))) nil)) nil None) (If (BoolOp And (list (Compare (Name &count:4 Load) (list Eq) (list (Constant i1 None))) (Compare (Name &element:4 Load) (list NotEq) (list (Name &root:4 Load))))) (/seq (Return (Constant False None))) nil)) nil) (Return (Constant True None))) nil None None) (FunctionDef &dfs:1 (arguments nil (list (arg &self:5 None None) (arg &root:5 None None) (arg &ans:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &stack:5 Store)) (List (list (Name &root:5 Load)) Load) None) (Assign (list (Name &vis:5 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Attribute (Name &self:5 Load) s_n Load)) None) (Assign (list (Name &stack2:5 Store)) (List nil Load) None) (While (Compare (Call (Name g_len Load) (list (Name &stack:5 Load)) nil) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &element:5 Store)) (Call (Attribute (Name &stack:5 Load) s_pop Load) nil nil) None) (If (Subscript (Name &vis:5 Load) (Name &element:5 Load) Load) (/seq Continue) nil) (Assign (list (Subscript (Name &vis:5 Load) (Name &element:5 Load) Store)) (Constant i1 None) None) (Expr (Call (Attribute (Name &stack2:5 Load) s_append Load) (list (Name &element:5 Load)) nil)) (For (Name &i:5 Store) (Subscript (Attribute (Name &self:5 Load) s_graph Load) (Name &element:5 Load) Load) (/seq (If (Compare (Subscript (Name &vis:5 Load) (Name &i:5 Load) Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Name &i:5 Load) Store)) (Name &element:5 Load) None) (Expr (Call (Attribute (Name &stack:5 Load) s_append Load) (list (Name &i:5 Load)) nil))) nil)) nil None)) nil) (While (Compare (Call (Name g_len Load) (list (Name &stack2:5 Load)) nil) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &element:5 Store)) (Call (Attribute (Name &stack2:5 Load) s_pop Load) nil nil) None) (Assign (list (Name &m:5 Store)) (Constant i0 None) None) (For (Name &i:5 Store) (Subscript (Attribute (Name &self:5 Load) s_graph Load) (Name &element:5 Load) Load) (/seq (If (Compare (Name &i:5 Load) (list NotEq) (list (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Name &element:5 Load) Load))) (/seq (AugAssign (Name &m:5 Store) Add (Subscript (Name &ans:5 Load) (Name &i:5 Load) Load))) nil)) nil None) (Assign (list (Subscript (Name &ans:5 Load) (Name &element:5 Load) Store)) (Name &m:5 Load) None)) nil) (Return (Name &ans:5 Load))) nil None None) (FunctionDef &shortestpath:1 (arguments nil (list (arg &self:6 None None) (arg &source:6 None None) (arg &dest:6 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name &self:6 Load) s_bfs Load) (list (Name &source:6 Load)) nil)) (Assign (list (Name &path:6 Store)) (List (list (Name &dest:6 Load)) Load) None) (While (Compare (Subscript (Attribute (Name &self:6 Load) s_parent Load) (Subscript (Name &path:6 Load) (UnaryOp USub (Constant i1 None)) Load) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Attribute (Name &path:6 Load) s_append Load) (list (Subscript (Name g_parent Load) (Subscript (Name &path:6 Load) (UnaryOp USub (Constant i1 None)) Load) Load)) nil))) nil) (Return (Subscript (Name &path:6 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load))) nil None None) (FunctionDef &detect_cycle:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (Assign (list (Name &indeg:7 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Attribute (Name &self:7 Load) s_n Load)) None) (For (Name &i:7 Store) (Call (Name g_range Load) (list (Attribute (Name &self:7 Load) s_n Load)) nil) (/seq (For (Name &j:7 Store) (Subscript (Attribute (Name &self:7 Load) s_graph Load) (Name &i:7 Load) Load) (/seq (AugAssign (Subscript (Name &indeg:7 Load) (Name &j:7 Load) Store) Add (Constant i1 None))) nil None)) nil None) (Assign (list (Name &q:7 Store)) (Call (Name &deque:0 Load) nil nil) None) (Assign (list (Name &vis:7 Store)) (Constant i0 None) None) (For (Name &i:7 Store) (Call (Name g_range Load) (list (Attribute (Name &self:7 Load) s_n Load)) nil) (/seq (If (Compare (Subscript (Name &indeg:7 Load) (Name &i:7 Load) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &q:7 Load) s_append Load) (list (Name &i:7 Load)) nil))) nil)) nil None) (While (Compare (Call (Name g_len Load) (list (Name &q:7 Load)) nil) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &e:7 Store)) (Call (Attribute (Name &q:7 Load) s_popleft Load) nil nil) None) (AugAssign (Name &vis:7 Store) Add (Constant i1 None)) (For (Name &i:7 Store) (Subscript (Attribute (Name &self:7 Load) s_graph Load) (Name &e:7 Load) Load) (/seq (AugAssign (Subscript (Name &indeg:7 Load) (Name &i:7 Load) Store) Sub (Constant i1 None)) (If (Compare (Subscript (Name &indeg:7 Load) (Name &i:7 Load) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &q:7 Load) s_append Load) (list (Name &i:7 Load)) nil))) nil)) nil None)) nil) (If (Compare (Name &vis:7 Load) (list NotEq) (list (Attribute (Name &self:7 Load) s_n Load))) (/seq (Return (Constant True None))) nil) (Return (Constant False None))) nil None None) (FunctionDef &reroot:1 (arguments nil (list (arg &self:8 None None) (arg &root:8 None None) (arg &ans:8 None None)) None nil nil None nil) (/seq (Assign (list (Name &stack:8 Store)) (List (list (Name &root:8 Load)) Load) None) (Assign (list (Name &vis:8 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (While (Compare (Call (Name g_len Load) (list (Name &stack:8 Load)) nil) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &e:8 Store)) (Subscript (Name &stack:8 Load) (UnaryOp USub (Constant i1 None)) Load) None) (If (Subscript (Name &vis:8 Load) (Name &e:8 Load) Load) (/seq (Expr (Call (Attribute (Name &stack:8 Load) s_pop Load) nil nil)) Continue) nil) (Assign (list (Subscript (Name &vis:8 Load) (Name &e:8 Load) Store)) (Constant i1 None) None) (For (Name &i:8 Store) (Subscript (Name g_graph Load) (Name &e:8 Load) Load) (/seq (If (UnaryOp Not (Subscript (Name &vis:8 Load) (Name &e:8 Load) Load)) (/seq (Expr (Call (Attribute (Name &stack:8 Load) s_append Load) (list (Name &i:8 Load)) nil))) nil)) nil None) (If (Compare (Subscript (Attribute (Name &self:8 Load) s_parent Load) (Name &e:8 Load) Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq Continue) nil)) nil)) nil None None)) nil) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &g:0 Store)) (Call (Name &Graph:0 Load) (list (Name &n:0 Load) (Constant False None)) nil) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (Expr (Call (Attribute (Name &g:0 Load) s_addEdge Load) (list (BinOp (Name &u:0 Load) Sub (Constant i1 None)) (BinOp (Name &v:0 Load) Sub (Constant i1 None))) nil))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Attribute (Name &g:0 Load) s_graph Load) (Name &i:0 Load) Load)) nil) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &leaf:0 Store)) (Name &i:0 Load) None) Break) nil)) nil None) (If (UnaryOp Not (Call (Attribute (Name &g:0 Load) s_bfs Load) (list (Name &leaf:0 Load)) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &degree:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:2 Load)) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &x:0 Store)) (BinOp (Subscript (Name &a:0 Load) (Constant i0 None) Load) Sub (Constant i1 None)) None) (Assign (list (Name &y:0 Store)) (BinOp (Subscript (Name &a:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) None) (AugAssign (Subscript (Name &degree:0 Load) (Name &x:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &degree:0 Load) (Name &y:0 Load) Store) Add (Constant i1 None))) nil None) (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Subscript (Name &degree:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i1 None) None) Break) nil)) nil None) (If (Compare (Name &flag:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &ar:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (fn_1) None) (AugAssign (Subscript (Name &ar:0 Load) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &ar:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None))) nil None) (Assign (list (Name &ans:0 Store)) (Constant s_YES None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Subscript (Name &ar:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &ans:0 Store)) (Constant s_NO None) None) Break) nil)) nil None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (FunctionDef &getN:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))) nil None None) (FunctionDef &getList:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (ImportFrom s_sys (list (alias &exit:0 None)) i0) (Assign (list (Name &n:0 Store)) (Call (Name &getN:0 Load) nil nil) None) (Assign (list (Name &vertex:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (Call (Name &getList:0 Load) nil nil) None) (Expr (Call (Attribute (Subscript (Name &vertex:0 Load) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) Load) s_append Load) (list (BinOp (Name &b:0 Load) Sub (Constant i1 None))) nil)) (Expr (Call (Attribute (Subscript (Name &vertex:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Load) s_append Load) (list (BinOp (Name &a:0 Load) Sub (Constant i1 None))) nil))) nil None) (For (Name &v:0 Store) (Name &vertex:0 Load) (/seq (If (Compare (Call (Name g_len Load) (list (Name &v:0 Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name &exit:0 Load) nil nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &d:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (fn_1) None) (AugAssign (Subscript (Name &d:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &d:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))) nil None) (For (Name &val:0 Store) (Name &d:0 Load) (/seq (If (Compare (Name &val:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &adj:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Name &iarr:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &u:0 Store)) (BinOp (Subscript (Name &iarr:0 Load) (Constant i0 None) Load) Sub (Constant i1 None)) None) (Assign (list (Name &v:0 Store)) (BinOp (Subscript (Name &iarr:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) None) (AugAssign (Subscript (Name &adj:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &adj:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))) nil None) (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &adj:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i1 None) None) Break) nil)) nil None) (If (Compare (Name &flag:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &d:0 Store)) (Dict nil nil) None) (Assign (list (Tuple (list (Name &o:0 Store) (Name &t:0 Store)) Store)) (Tuple (list (Constant i0 None) (Constant i0 None)) Load) None) (For (Name &_:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &s:0 Store) (Name &e:0 Store)) Store)) (fn_1) None) (If (Compare (Name &s:0 Load) (list In) (list (Name &d:0 Load))) (/seq (AugAssign (Subscript (Name &d:0 Load) (Name &s:0 Load) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &d:0 Load) (Name &s:0 Load) Store)) (Constant i1 None) None))) (If (Compare (Name &e:0 Load) (list In) (list (Name &d:0 Load))) (/seq (AugAssign (Subscript (Name &d:0 Load) (Name &e:0 Load) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &d:0 Load) (Name &e:0 Load) Store)) (Constant i1 None) None)))) nil None) (For (Name &i:0 Store) (Name &d:0 Load) (/seq (If (Compare (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &o:0 Store) Add (Constant i1 None))) (/seq (If (Compare (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None))) nil)))) nil None) (If (Name &t:0 Load) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (If (Compare (BinOp (BinOp (Name &o:0 Load) Mult (BinOp (Name &o:0 Load) Sub (Constant i1 None))) FloorDiv (Constant i2 None)) (list GtE) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))))))) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &degree:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (For (Name &_:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &i:0 Store) (Name &j:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:2 Load)) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (AugAssign (Subscript (Name &degree:0 Load) (Name &i:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &degree:0 Load) (Name &j:0 Load) Store) Add (Constant i1 None))) nil None) (Assign (list (Name &res:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Name &degree:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &res:0 Store)) (Constant True None) None)) nil)) nil None) (If (Name &res:0 Load) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &tree:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (fn_1) None) (Expr (Call (Attribute (Subscript (Name &tree:0 Load) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) Load) s_append Load) (list (BinOp (Name &v:0 Load) Sub (Constant i1 None))) nil)) (Expr (Call (Attribute (Subscript (Name &tree:0 Load) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) Load) s_append Load) (list (BinOp (Name &u:0 Load) Sub (Constant i1 None))) nil))) nil None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &tree:0 Load) (Name &i:0 Load) Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) None)) nil)",
            "(Module (/seq (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (fn_3 &n:0) (Assign (list (Name &g:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &_:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (fn_1) None) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) Load) s_append Load) (list (BinOp (Name &v:0 Load) Sub (Constant i1 None))) nil)) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) Load) s_append Load) (list (BinOp (Name &u:0 Load) Sub (Constant i1 None))) nil))) nil None) (If (Call (Name g_list Load) (list (Call (Name g_filter Load) (list (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Compare (Call (Name g_len Load) (list (Name &x:2 Load)) nil) (list Eq) (list (Constant i2 None)))) (Name &g:0 Load)) nil)) nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &a:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i0 None) (BinOp (Name &n:0 Load) Add (Constant i9 None))) nil) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (Constant i0 None)) nil))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &n:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (fn_1) None) (Assign (list (Subscript (Name &a:0 Load) (Name &u:0 Load) Store)) (BinOp (Subscript (Name &a:0 Load) (Name &u:0 Load) Load) Add (Constant i1 None)) None) (Assign (list (Subscript (Name &a:0 Load) (Name &v:0 Load) Store)) (BinOp (Subscript (Name &a:0 Load) (Name &v:0 Load) Load) Add (Constant i1 None)) None)) nil None) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)) nil)) nil None) (If (Compare (Name &flag:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
            "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (Assign (list (Name &g:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_set Load)) nil) None) (fn_3 &n:0) (For (Name &_:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (fn_1) None) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (Name &u:0 Load) Load) s_add Load) (list (Name &v:0 Load)) nil)) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (Name &v:0 Load) Load) s_add Load) (list (Name &u:0 Load)) nil))) nil None) (FunctionDef &solve:0 (arguments nil (list (arg &n:1 None None) (arg &g:1 None None)) None nil nil None nil) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:1 Load) Add (Constant i1 None))) nil) (/seq (If (BoolOp Or (list (Compare (Call (Name g_len Load) (list (Subscript (Name &g:1 Load) (Name &i:1 Load) Load)) nil) (list Eq) (list (Constant i1 None))) (Compare (Call (Name g_len Load) (list (Subscript (Name &g:1 Load) (Name &i:1 Load) Load)) nil) (list GtE) (list (Constant i3 None))))) (/seq Continue) (/seq (Return (Constant False None))))) nil None) (Return (Constant True None))) nil None None) (Assign (list (Name &solution:0 Store)) (Call (Name &solve:0 Load) (list (Name &n:0 Load) (Name &g:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (IfExp (Name &solution:0 Load) (Constant s_YES None) (Constant s_NO None))) nil))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &l:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &_:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (AugAssign (Subscript (Name &l:0 Load) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &l:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) None)) nil)",
            "(Module (/seq (ImportFrom s_collections (list (alias g_Counter None)) i0) (ImportFrom s_sys (list (alias g_stdin None)) i0) (fn_3 &n:0) (Assign (list (Name &lst:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil) None) (Expr (Call (Attribute (Name &lst:0 Load) s_append Load) (list (Name &a:0 Load)) nil)) (Expr (Call (Attribute (Name &lst:0 Load) s_append Load) (list (Name &b:0 Load)) nil))) nil None) (Assign (list (Name &fg:0 Store)) (Constant i0 None) None) (For (Tuple (list (Name &_:0 Store) (Name &i:0 Store)) Store) (Call (Attribute (Call (Name g_Counter Load) (list (Name &lst:0 Load)) nil) s_items Load) nil nil) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &fg:0 Store)) (Constant i1 None) None) Break) nil)) nil None) (If (Compare (Name &fg:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &edges:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &isPossible:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:1 Load)) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (AugAssign (Subscript (Name &edges:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &edges:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))) nil None) (For (Name &d:0 Store) (Name &edges:0 Load) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &isPossible:0 Store)) (Constant False None) None) Break) nil)) nil None) (Expr (Call (Name g_print Load) (list (IfExp (Name &isPossible:0 Load) (Constant s_YES None) (Constant s_NO None))) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (fn_3 &N:0) (Assign (list (Name &adj_list:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) nil i0))) None) (For (Name &_:0 Store) (fn_2 &N:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (AugAssign (Name &u:0 Store) Sub (Constant i1 None)) (AugAssign (Name &v:0 Store) Sub (Constant i1 None)) (Expr (Call (Attribute (Subscript (Name &adj_list:0 Load) (Name &u:0 Load) Load) s_append Load) (list (Name &v:0 Load)) nil)) (Expr (Call (Attribute (Subscript (Name &adj_list:0 Load) (Name &v:0 Load) Load) s_append Load) (list (Name &u:0 Load)) nil))) nil None) (Assign (list (Name &num_leaf:0 Store)) (Constant i0 None) None) (For (Name &node:0 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &adj_list:0 Load) (Name &node:0 Load) Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Attribute (Name g_sys Load) s_exit Load) (list (Constant i0 None)) nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &a:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &c:0 Store) (Name &d:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (Expr (Call (Attribute (Subscript (Name &a:0 Load) (BinOp (Name &c:0 Load) Sub (Constant i1 None)) Load) s_append Load) (list (BinOp (Name &d:0 Load) Sub (Constant i1 None))) nil)) (Expr (Call (Attribute (Subscript (Name &a:0 Load) (BinOp (Name &d:0 Load) Sub (Constant i1 None)) Load) s_append Load) (list (BinOp (Name &c:0 Load) Sub (Constant i1 None))) nil))) nil None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &a:0 Load) (/seq (If (Compare (Call (Name g_len Load) (list (Name &i:0 Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_exit Load) (list (Call (Name g_print Load) (list (Constant s_NO None)) nil)) nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Import (list (alias g_math None))) (FunctionDef &read_line:0 (arguments nil nil None nil nil None nil) (/seq (Return (Subscript (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) (Slice None (UnaryOp USub (Constant i1 None)) None) Load))) nil None None) (FunctionDef &read_int:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)) nil))) nil None None) (FunctionDef &read_int_line:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (Name &v:1 Load)) nil) (list (comprehension (Name &v:1 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &read_float_line:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_float Load) (list (Name &v:2 Load)) nil) (list (comprehension (Name &v:2 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name &read_int:0 Load) nil nil) None) (Assign (list (Name &d:0 Store)) (Dict nil nil) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Call (Name &read_int_line:0 Load) nil nil) None) (If (Compare (Name &u:0 Load) (list In) (list (Name &d:0 Load))) (/seq (AugAssign (Subscript (Name &d:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &d:0 Load) (Name &u:0 Load) Store)) (Constant i1 None) None))) (If (Compare (Name &v:0 Load) (list In) (list (Name &d:0 Load))) (/seq (AugAssign (Subscript (Name &d:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &d:0 Load) (Name &v:0 Load) Store)) (Constant i1 None) None)))) nil None) (Assign (list (Name &f:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Name &d:0 Load) (/seq (If (Compare (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &f:0 Store)) (Constant True None) None)) nil)) nil None) (If (Name &f:0 Load) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
            "(Module (/seq (FunctionDef &ii:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil))) nil None None) (FunctionDef &ss:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Name &x:1 Load) (list (comprehension (Name &x:1 Store) (Call (Name g_input Load) nil nil) nil i0))))) nil None None) (FunctionDef &si:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (Name &x:3 Load)) nil) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &mi:0 (arguments nil nil None nil nil None nil) (/seq (Return (fn_1))) nil None None) (Assign (list (Name &a:0 Store)) (Call (Name &ii:0 Load) nil nil) None) (Assign (list (Name &s:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &a:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (fn_2 &a:0) (/seq (Assign (list (Tuple (list (Name &c:0 Store) (Name &d:0 Store)) Store)) (ListComp (BinOp (Call (Name g_int Load) (list (Name &x:4 Load)) nil) Sub (Constant i1 None)) (list (comprehension (Name &x:4 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (AugAssign (Subscript (Name &s:0 Load) (Name &c:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &s:0 Load) (Name &d:0 Load) Store) Add (Constant i1 None))) nil None) (If (Compare (Constant i2 None) (list In) (list (Name &s:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (ImportFrom s_collections (list (alias &deque:0 None)) i0) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (Assign (list (Name &Edges:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &_:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Call (Name g_map Load) (list (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (BinOp (Call (Name g_int Load) (list (Name &x:3 Load)) nil) Sub (Constant i1 None))) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (Expr (Call (Attribute (Subscript (Name &Edges:0 Load) (Name &u:0 Load) Load) s_append Load) (list (Name &v:0 Load)) nil)) (Expr (Call (Attribute (Subscript (Name &Edges:0 Load) (Name &v:0 Load) Load) s_append Load) (list (Name &u:0 Load)) nil))) nil None) (For (Tuple (list (Name &i:0 Store) (Name &E:0 Store)) Store) (Call (Name g_enumerate Load) (list (Name &Edges:0 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Name &E:0 Load)) nil) (list GtE) (list (Constant i3 None))) (/seq (Assign (list (Name &root:0 Store)) (Name &i:0 Load) None) Break) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) None) (Assign (list (Name &Chi:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Assign (list (Name &Par:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &q:0 Store)) (Call (Name &deque:0 Load) nil nil) None) (Expr (Call (Attribute (Name &q:0 Load) s_append Load) (list (Name &root:0 Load)) nil)) (Assign (list (Name &Used:0 Store)) (BinOp (List (list (Constant False None)) Load) Mult (Name &n:0 Load)) None) (Assign (list (Subscript (Name &Used:0 Load) (Name &root:0 Load) Store)) (Constant True None) None) (While (Name &q:0 Load) (/seq (Assign (list (Name &v:0 Store)) (Call (Attribute (Name &q:0 Load) s_popleft Load) nil nil) None) (For (Name &c:0 Store) (Subscript (Name &Edges:0 Load) (Name &v:0 Load) Load) (/seq (If (Subscript (Name &Used:0 Load) (Name &c:0 Load) Load) (/seq Continue) nil) (Expr (Call (Attribute (Subscript (Name &Chi:0 Load) (Name &v:0 Load) Load) s_append Load) (list (Name &c:0 Load)) nil)) (Assign (list (Subscript (Name &Par:0 Load) (Name &c:0 Load) Store)) (Name &v:0 Load) None) (Assign (list (Subscript (Name &Used:0 Load) (Name &c:0 Load) Store)) (Constant True None) None) (Expr (Call (Attribute (Name &q:0 Load) s_append Load) (list (Name &c:0 Load)) nil))) nil None)) nil) (Assign (list (Name &Leaf:0 Store)) (List nil Load) None) (For (Tuple (list (Name &v:0 Store) (Name &l:0 Store)) Store) (Call (Name g_enumerate Load) (list (Name &Chi:0 Load)) nil) (/seq (If (UnaryOp Not (Name &l:0 Load)) (/seq (Expr (Call (Attribute (Name &Leaf:0 Load) s_append Load) (list (Name &v:0 Load)) nil))) nil)) nil None) (For (Name &l:0 Store) (Name &Leaf:0 Load) (/seq (While (Constant True None) (/seq (Assign (list (Name &p:0 Store)) (Subscript (Name &Par:0 Load) (Name &l:0 Load) Load) None) (If (Compare (Name &p:0 Load) (list Eq) (list (Name &root:0 Load))) (/seq Break) nil) (If (Compare (Call (Name g_len Load) (list (Subscript (Name &Chi:0 Load) (Name &p:0 Load) Load)) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (Assign (list (Name &l:0 Store)) (Name &p:0 Load) None)) nil)) nil None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &nodes:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Assign (list (Name &edges:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Call (Name g_sorted Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil)) nil) None) (AugAssign (Name &u:0 Store) Sub (Constant i1 None)) (AugAssign (Name &v:0 Store) Sub (Constant i1 None)) (Expr (Call (Attribute (Subscript (Name &nodes:0 Load) (Name &u:0 Load) Load) s_append Load) (list (Name &v:0 Load)) nil)) (Expr (Call (Attribute (Subscript (Name &nodes:0 Load) (Name &v:0 Load) Load) s_append Load) (list (Name &u:0 Load)) nil)) (Assign (list (Name &edge:0 Store)) (List (list (Name &u:0 Load) (Name &v:0 Load)) Load) None) (Expr (Call (Attribute (Name &edges:0 Load) s_append Load) (list (Name &edge:0 Load)) nil))) nil None) (Assign (list (Name &leaf_nodes:0 Store)) (ListComp (Name &node:1 Load) (list (comprehension (Name &node:1 Store) (Name &nodes:0 Load) (list (Compare (Call (Name g_len Load) (list (Name &node:1 Load)) nil) (list Eq) (list (Constant i1 None)))) i0))) None) (Assign (list (Name &num_ads:0 Store)) (ListComp (Call (Name g_len Load) (list (Name &node:3 Load)) nil) (list (comprehension (Name &node:3 Store) (Name &nodes:0 Load) nil i0))) None) (If (Compare (Constant i2 None) (list In) (list (Name &num_ads:0 Load))) (/seq (Assign (list (Name &out:0 Store)) (Constant s_NO None) None)) (/seq (Assign (list (Name &out:0 Store)) (Constant s_YES None) None))) (Expr (Call (Name g_print Load) (list (Name &out:0 Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (fn_3 &n:0) (Assign (list (Name &hash:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_list Load)) nil) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (fn_1) None) (Expr (Call (Attribute (Subscript (Name &hash:0 Load) (Name &a:0 Load) Load) s_append Load) (list (Name &b:0 Load)) nil)) (Expr (Call (Attribute (Subscript (Name &hash:0 Load) (Name &b:0 Load) Load) s_append Load) (list (Name &a:0 Load)) nil))) nil None) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Attribute (Name &hash:0 Load) s_keys Load) nil nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &hash:0 Load) (Name &i:0 Load) Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) Break) nil)) nil None) (If (Name &flag:0 Load) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) (list (comprehension (Name &i:1 Store) (fn_2 &n:0) nil i0))) None) (Assign (list (Name &tree:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Expr (Call (Attribute (Subscript (Name &tree:0 Load) (BinOp (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load) Sub (Constant i1 None)) Load) s_append Load) (list (BinOp (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load) Sub (Constant i1 None))) nil)) (Expr (Call (Attribute (Subscript (Name &tree:0 Load) (BinOp (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load) Sub (Constant i1 None)) Load) s_append Load) (list (BinOp (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load) Sub (Constant i1 None))) nil))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &tree:0 Load) (Name &i:0 Load) Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (fn_3 &num:0) (Assign (list (Name &deg:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &num:0 Load) Add (Constant i1 None))) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &num:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:1 Load)) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (AugAssign (Subscript (Name &deg:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &deg:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &num:0 Load) Add (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Name &deg:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Attribute (Name g_sys Load) s_exit Load) nil nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (ImportFrom s_collections (list (alias g_deque None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (FunctionDef &ii:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))) nil None None) (FunctionDef &mi:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Name &input:0 Load) nil nil) s_rstrip Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &lmi:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Name &input:0 Load) nil nil) s_rstrip Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (FunctionDef &li:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Attribute (Call (Name &input:0 Load) nil nil) s_rstrip Load) nil nil)) nil))) nil None None) (ClassDef &Graph:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &n:3 None None) (arg &Weighted:3 None None) (arg &Directed:3 None None) (arg &Matrix:3 None None)) None nil nil None (list (Constant False None) (Constant True None) (Constant False None))) (/seq (Assign (list (Attribute (Name &self:3 Load) s_sz Store)) (Name &n:3 Load) None) (Assign (list (Attribute (Name &self:3 Load) s_is_Weighted Store)) (Name &Weighted:3 Load) None) (Assign (list (Attribute (Name &self:3 Load) s_is_Directed Store)) (Name &Directed:3 Load) None) (Assign (list (Attribute (Name &self:3 Load) s_is_Matrix Store)) (Name &Matrix:3 Load) None) (If (Name &Matrix:3 Load) (/seq (If (Name &Weighted:3 Load) (/seq (Assign (list (Attribute (Name &self:3 Load) s_graph Store)) (ListComp (ListComp (Constant i0 None) (list (comprehension (Name &_i:14 Store) (Call (Name g_range Load) (list (Name &n:3 Load)) nil) nil i0))) (list (comprehension (Name &_j:12 Store) (Call (Name g_range Load) (list (Name &n:3 Load)) nil) nil i0))) None)) (/seq (Assign (list (Attribute (Name &self:3 Load) s_graph Store)) (ListComp (ListComp (Constant i0 None) (list (comprehension (Name &_i:15 Store) (Call (Name g_range Load) (list (Name &n:3 Load)) nil) nil i0))) (list (comprehension (Name &_j:13 Store) (Call (Name g_range Load) (list (Name &n:3 Load)) nil) nil i0))) None)))) (/seq (Assign (list (Attribute (Name &self:3 Load) s_graph Store)) (ListComp (List nil Load) (list (comprehension (Name &_i:10 Store) (Call (Name g_range Load) (list (Name &n:3 Load)) nil) nil i0))) None)))) nil None None) (FunctionDef &_weighted_add_edge:1 (arguments nil (list (arg &self:4 None None) (arg &x:4 None None) (arg &y:4 None None) (arg &w:4 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:4 Load) s_is_Matrix Load) (/seq (Assign (list (Subscript (Subscript (Attribute (Name &self:4 Load) s_graph Load) (Name &x:4 Load) Load) (Name &y:4 Load) Store)) (Name &w:4 Load) None)) (/seq (Expr (Call (Attribute (Subscript (Attribute (Name &self:4 Load) s_graph Load) (Name &x:4 Load) Load) s_append Load) (list (Tuple (list (Name &y:4 Load) (Name &w:4 Load)) Load)) nil))))) nil None None) (FunctionDef &_unweighted_add_edge:1 (arguments nil (list (arg &self:5 None None) (arg &x:5 None None) (arg &y:5 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:5 Load) s_is_Matrix Load) (/seq (Assign (list (Subscript (Subscript (Attribute (Name &self:5 Load) s_graph Load) (Name &x:5 Load) Load) (Name &y:5 Load) Store)) (Constant i1 None) None)) (/seq (Expr (Call (Attribute (Subscript (Attribute (Name &self:5 Load) s_graph Load) (Name &x:5 Load) Load) s_append Load) (list (Name &y:5 Load)) nil))))) nil None None) (FunctionDef &add_edge:1 (arguments nil (list (arg &self:6 None None) (arg &x:6 None None) (arg &y:6 None None)) (arg &w:6 None None) nil nil None nil) (/seq (If (Attribute (Name &self:6 Load) s_is_Directed Load) (/seq (If (Attribute (Name &self:6 Load) s_is_Weighted Load) (/seq (Expr (Call (Attribute (Name &self:6 Load) s__weighted_add_edge Load) (list (Name &x:6 Load) (Name &y:6 Load) (Subscript (Name &w:6 Load) (Constant i0 None) Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:6 Load) s__unweighted_add_edge Load) (list (Name &x:6 Load) (Name &y:6 Load)) nil))))) (/seq (If (Attribute (Name &self:6 Load) s_is_Weighted Load) (/seq (Expr (Call (Attribute (Name &self:6 Load) s__weighted_add_edge Load) (list (Name &x:6 Load) (Name &y:6 Load) (Subscript (Name &w:6 Load) (Constant i0 None) Load)) nil)) (Expr (Call (Attribute (Name &self:6 Load) s__weighted_add_edge Load) (list (Name &y:6 Load) (Name &x:6 Load) (Subscript (Name &w:6 Load) (Constant i0 None) Load)) nil))) (/seq (Expr (Call (Attribute (Name &self:6 Load) s__unweighted_add_edge Load) (list (Name &x:6 Load) (Name &y:6 Load)) nil)) (Expr (Call (Attribute (Name &self:6 Load) s__unweighted_add_edge Load) (list (Name &y:6 Load) (Name &x:6 Load)) nil))))))) nil None None) (FunctionDef &_convert_to_maxrix:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:7 Load) s_is_Matrix Load) (/seq (Return (Name &self:7 Load))) nil) (Assign (list (Name &mat_g:7 Store)) (Call (Attribute (Name &self:7 Load) s___class__ Load) (list (Attribute (Name &self:7 Load) s_sz Load)) (list (keyword s_Weighted (Attribute (Name &self:7 Load) s_is_Weighted Load)) (keyword s_Directed (Attribute (Name &self:7 Load) s_is_Directed Load)) (keyword s_Matrix (Constant True None)))) None) (If (Attribute (Name &self:7 Load) s_is_Weighted Load) (/seq (For (Name &i:7 Store) (Call (Name g_range Load) (list (Attribute (Name &self:7 Load) s_sz Load)) nil) (/seq (For (Name &j:7 Store) (Subscript (Attribute (Name &self:7 Load) s_graph Load) (Name &i:7 Load) Load) (/seq (Expr (Call (Attribute (Name &mat_g:7 Load) s_add_edge Load) (list (Name &i:7 Load) (Subscript (Name &j:7 Load) (Constant i0 None) Load) (Subscript (Name &j:7 Load) (Constant i1 None) Load)) nil))) nil None)) nil None)) (/seq (For (Name &i:7 Store) (Call (Name g_range Load) (list (Attribute (Name &self:7 Load) s_sz Load)) nil) (/seq (For (Name &j:7 Store) (Subscript (Attribute (Name &self:7 Load) s_graph Load) (Name &i:7 Load) Load) (/seq (Expr (Call (Attribute (Name &mat_g:7 Load) s_add_edge Load) (list (Name &i:7 Load) (Name &j:7 Load)) nil))) nil None)) nil None))) (Return (Name &mat_g:7 Load))) nil None None) (FunctionDef &__getitem__:1 (arguments nil (list (arg &self:8 None None) (arg &n:8 None None)) None nil nil None nil) (/seq (Return (Subscript (Attribute (Name &self:8 Load) s_graph Load) (Name &n:8 Load) Load))) nil None None) (FunctionDef &__str__:1 (arguments nil (list (arg &self:9 None None)) None nil nil None nil) (/seq (Return (Call (Name g_str Load) (list (ListComp (Subscript (Attribute (Name &self:9 Load) s_graph Load) (Name &i:11 Load) Load) (list (comprehension (Name &i:11 Store) (Call (Name g_range Load) (list (Attribute (Name &self:9 Load) s_sz Load)) nil) nil i0)))) nil))) nil None None)) nil) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:2 Store)) (Call (Name &ii:0 Load) nil nil) None) (Assign (list (Name &g:2 Store)) (Call (Name &Graph:0 Load) (list (Name &n:2 Load)) (list (keyword s_Directed (Constant False None)))) None) (For (Name &i:2 Store) (fn_2 &n:2) (/seq (Assign (list (Tuple (list (Name &s:2 Store) (Name &t:2 Store)) Store)) (Call (Name &mi:0 Load) nil nil) None) (Expr (Call (Attribute (Name &g:2 Load) s_add_edge Load) (list (BinOp (Name &s:2 Load) Sub (Constant i1 None)) (BinOp (Name &t:2 Load) Sub (Constant i1 None))) nil))) nil None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:2 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &g:2 Load) (Name &i:2 Load) Load)) nil) (list Eq) (list (Constant i2 None))) (/seq Break) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)) (Expr (Call (Attribute (Name g_sys Load) s_exit Load) nil nil))) None) (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (fn_3 &n:0) (Assign (list (Name &tr:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (fn_1) None) (AugAssign (Subscript (Name &tr:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &tr:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))) nil None) (For (Name &i:0 Store) (Name &tr:0 Load) (/seq (If (Compare (Subscript (Name &tr:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) None)) nil)",
            "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (Import (list (alias g_sys None) (alias g_heapq None) (alias g_bisect None) (alias g_math None) (alias g_itertools None) (alias g_string None) (alias g_queue None) (alias g_copy None) (alias g_time None))) (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (BinOp (Constant i10 None) Pow (Constant i8 None))) nil)) (Assign (list (Name &INF:0 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None) (Assign (list (Name &mod:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &eps:0 Store)) (BinOp (Constant i10 None) Pow (UnaryOp USub (Constant i7 None))) None) (FunctionDef &inp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil))) nil None None) (FunctionDef &inpl:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (fn_1)) nil))) nil None None) (FunctionDef &inpl_str:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (Assign (list (Name &N:0 Store)) (Call (Name &inp:0 Load) nil nil) None) (Assign (list (Name &cnt:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None) (For (Name &_:0 Store) (fn_2 &N:0) (/seq (Assign (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name &inpl:0 Load) nil nil) None) (AugAssign (Subscript (Name &cnt:0 Load) (BinOp (Name &x:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &cnt:0 Load) (BinOp (Name &y:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None))) nil None) (For (Name &c:0 Store) (Name &cnt:0 Load) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) None)) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &g:0 Store)) (Dict nil nil) None) (Assign (list (Name &p:0 Store)) (Dict nil nil) None) (Assign (list (Name &path:0 Store)) (Dict nil nil) None) (Assign (list (Name &flg:0 Store)) (Constant True None) None) (For (Name &_:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (fn_1) None) (If (Compare (Name &u:0 Load) (list NotIn) (list (Name &g:0 Load))) (/seq (Assign (list (Subscript (Name &g:0 Load) (Name &u:0 Load) Store)) (List nil Load) None)) nil) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (Name &u:0 Load) Load) s_append Load) (list (Name &v:0 Load)) nil)) (If (Compare (Name &v:0 Load) (list NotIn) (list (Name &g:0 Load))) (/seq (Assign (list (Subscript (Name &g:0 Load) (Name &v:0 Load) Store)) (List nil Load) None)) nil) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (Name &v:0 Load) Load) s_append Load) (list (Name &u:0 Load)) nil))) nil None) (Assign (list (Name &flg:0 Store)) (Constant s_YES None) None) (For (Name &x:0 Store) (Name &g:0 Load) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &g:0 Load) (Name &x:0 Load) Load)) nil) (list Eq) (list (Constant i1 None))) (/seq Continue) nil) (If (Compare (Call (Name g_len Load) (list (Subscript (Name &g:0 Load) (Name &x:0 Load) Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &flg:0 Store)) (Constant s_NO None) None) Break) nil)) nil None) (Expr (Call (Name g_print Load) (list (Name &flg:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_os None))) (Import (list (alias g_sys None))) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name g_IOBase Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:8 None None) (arg &file:8 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:8 Load) s__fd Store)) (Call (Attribute (Name &file:8 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:8 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None) (Assign (list (Attribute (Name &self:8 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:8 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:8 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:8 Load) s_write Store)) (IfExp (Attribute (Name &self:8 Load) s_writable Load) (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:9 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:9 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:9 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:9 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:9 Load)) (/seq Break) nil) (Assign (list (Name &ptr:9 Store)) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_write Load) (list (Name &b:9 Load)) nil) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_seek Load) (list (Name &ptr:9 Load)) nil)) Load))) nil) (Assign (list (Attribute (Name &self:9 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:10 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:10 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:10 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:10 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:10 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:10 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:10 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:10 Load))) None) (Assign (list (Name &ptr:10 Store)) (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_write Load) (list (Name &b:10 Load)) nil) (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_seek Load) (list (Name &ptr:10 Load)) nil)) Load))) nil) (AugAssign (Attribute (Name &self:10 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:11 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:11 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name g_os Load) s_write Load) (list (Attribute (Name &self:11 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name g_IOBase Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:12 None None) (arg &file:12 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:12 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:12 Load)) nil) None) (Assign (list (Attribute (Name &self:12 Load) s_flush Store)) (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:12 Load) s_writable Store)) (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:12 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:19 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:19 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:12 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:12 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil)) None) (FunctionDef &list2d:0 (arguments nil (list (arg &a:4 None None) (arg &b:4 None None) (arg &c:4 None None)) None nil nil None nil) (/seq (Return (ListComp (BinOp (List (list (Name &c:4 Load)) Load) Mult (Name &b:4 Load)) (list (comprehension (Name &i:14 Store) (Call (Name g_range Load) (list (Name &a:4 Load)) nil) nil i0))))) nil None None) (FunctionDef &list3d:0 (arguments nil (list (arg &a:5 None None) (arg &b:5 None None) (arg &c:5 None None) (arg &d:5 None None)) None nil nil None nil) (/seq (Return (ListComp (ListComp (BinOp (List (list (Name &d:5 Load)) Load) Mult (Name &c:5 Load)) (list (comprehension (Name &j:20 Store) (Call (Name g_range Load) (list (Name &b:5 Load)) nil) nil i0))) (list (comprehension (Name &i:15 Store) (Call (Name g_range Load) (list (Name &a:5 Load)) nil) nil i0))))) nil None None) (FunctionDef &list4d:0 (arguments nil (list (arg &a:6 None None) (arg &b:6 None None) (arg &c:6 None None) (arg &d:6 None None) (arg &e:6 None None)) None nil nil None nil) (/seq (Return (ListComp (ListComp (ListComp (BinOp (List (list (Name &e:6 Load)) Load) Mult (Name &d:6 Load)) (list (comprehension (Name &j:22 Store) (Call (Name g_range Load) (list (Name &c:6 Load)) nil) nil i0))) (list (comprehension (Name &j:21 Store) (Call (Name g_range Load) (list (Name &b:6 Load)) nil) nil i0))) (list (comprehension (Name &i:16 Store) (Call (Name g_range Load) (list (Name &a:6 Load)) nil) nil i0))))) nil None None) (FunctionDef &ceil:0 (arguments nil (list (arg &x:7 None None) (arg &y:7 None None)) None nil nil None (list (Constant i1 None))) (/seq (Return (Call (Name g_int Load) (list (UnaryOp USub (BinOp (UnaryOp USub (Name &x:7 Load)) FloorDiv (Name &y:7 Load)))) nil))) nil None None) (FunctionDef &Yes:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_Yes None)) nil))) nil None None) (FunctionDef &No:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_No None)) nil))) nil None None) (FunctionDef &YES:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil None None) (FunctionDef &NO:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) nil None None) (Assign (list (Name &INF:0 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None) (Assign (list (Name &MOD:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Import (list (alias &threading:0 None))) (Expr (Call (Attribute (Name &threading:0 Load) s_stack_size Load) (list (BinOp (Constant i10 None) Pow (Constant i8 None))) nil)) (Assign (list (Name &Ri:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (ListComp (Call (Name g_int Load) (list (Name &x:17 Load)) nil) (list (comprehension (Name &x:17 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0)))) None) (Assign (list (Name &ri:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil)) None) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:3 Store)) (Call (Name g_int Load) (list (Call (Name &ri:0 Load) nil nil)) nil) None) (Assign (list (Name &g:3 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:18 Store) (Call (Name g_range Load) (list (Name &n:3 Load)) nil) nil i0))) None) (For (Name &i:3 Store) (fn_2 &n:3) (/seq (Assign (list (Tuple (list (Name &a:3 Store) (Name &b:3 Store)) Store)) (Call (Name &Ri:0 Load) nil nil) None) (AugAssign (Name &a:3 Store) Sub (Constant i1 None)) (AugAssign (Name &b:3 Store) Sub (Constant i1 None)) (Expr (Call (Attribute (Subscript (Name &g:3 Load) (Name &a:3 Load) Load) s_append Load) (list (Name &b:3 Load)) nil)) (Expr (Call (Attribute (Subscript (Name &g:3 Load) (Name &b:3 Load) Load) s_append Load) (list (Name &a:3 Load)) nil))) nil None) (Assign (list (Name &flag:3 Store)) (List (list (Constant True None)) Load) None) (FunctionDef &dfs1:3 (arguments nil (list (arg &cur:13 None None) (arg &par:13 None None)) None nil nil None nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &g:3 Load) (Name &cur:13 Load) Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Subscript (Name &flag:3 Load) (Constant i0 None) Store)) (Constant False None) None) (Return None)) nil) (For (Name &child:13 Store) (Subscript (Name &g:3 Load) (Name &cur:13 Load) Load) (/seq (If (Compare (Name &child:13 Load) (list Eq) (list (Name &par:13 Load))) (/seq Continue) nil) (Expr (Call (Name &dfs1:3 Load) (list (Name &child:13 Load) (Name &cur:13 Load)) nil))) nil None) (Return None)) nil None None) (Expr (Call (Name &dfs1:3 Load) (list (Constant i0 None) (UnaryOp USub (Constant i1 None))) nil)) (If (Subscript (Name &flag:3 Load) (Constant i0 None) Load) (/seq (Expr (Call (Name &YES:0 Load) nil nil))) (/seq (Expr (Call (Name &NO:0 Load) nil nil))))) nil None None) (Expr (Call (Attribute (Call (Attribute (Name &threading:0 Load) s_Thread Load) nil (list (keyword s_target (Name &solve:0 Load)))) s_start Load) nil nil))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &deg:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (fn_1) None) (AugAssign (Subscript (Name &deg:0 Load) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &deg:0 Load) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None))) nil None) (If (Call (Name g_all Load) (list (GeneratorExp (Compare (Name &i:1 Load) (list NotEq) (list (Constant i2 None))) (list (comprehension (Name &i:1 Store) (Name &deg:0 Load) nil i0)))) nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_log2 None)) i0) (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Expr (Constant s-WzEwLCAxMDIsIDExMSwgMTE0LCAzMiwgNjcsIDY1LCA4MywgNjksIDgzLCAzMiwgMTA1LCAxMTAsIDMyLCAxMTQsIDk3LCAxMTAsIDEwMywgMTAxLCA0MCwgMTA1LCAxMTAsIDExNiwgNDAsIDEwNSwgMTEwLCAxMTIsIDExNywgMTE2LCA0MCwgNDEsIDQxLCA0MSwgNTgsIDEwLCAxMTAsIDQ0LCAzMiwgMTA5LCAzMiwgNjEsIDMyLCAxMDksIDk3LCAxMTIsIDQwLCAxMDUsIDExMCwgMTE2LCA0NCwgMzIsIDEwNSwgMTEwLCAxMTIsIDExNywgMTE2LCA0MCwgNDEsIDQ2LCAxMTUsIDExMiwgMTA4LCAxMDUsIDExNiwgNDAsIDQxLCA0MSwgMTAsIDExMCwgMzIsIDYxLCAzMiwgMTA1LCAxMTAsIDExNiwgNDAsIDEwNSwgMTEwLCAxMTIsIDExNywgMTE2LCA0MCwgNDEsIDQxLCAxMCwgNjUsIDMyLCA2MSwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDAsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAzMiwgMTA1LCAxMTAsIDExMiwgMTE3LCAxMTYsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCA0MSwgMTAsIDgzLCAzMiwgNjEsIDMyLCAxMDUsIDExMCwgMTEyLCAxMTcsIDExNiwgNDAsIDQxLCA0NiwgMTE1LCAxMTYsIDExNCwgMTA1LCAxMTIsIDQwLCA0MSwgMTAsIDExNSwgMTIxLCAxMTUsIDQ2LCAxMTUsIDExNiwgMTAwLCAxMTEsIDExNywgMTE2LCA0NiwgMTE5LCAxMTQsIDEwNSwgMTE2LCAxMDEsIDQwLCAzNCwgMzIsIDM0LCA0NiwgMTA2LCAxMTEsIDEwNSwgMTEwLCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTE1LCAxMTYsIDExNCwgNDQsIDk3LCAxMTAsIDExNSwgNDEsIDQxLCA0MywgMzQsIDEwLCAzNCwgNDEsIDEwXQ== None)) (Assign (list (Name &inf:0 Store)) (Constant i100000000000000000 None) None) (Assign (list (Name &mod:0 Store)) (Constant i998244353 None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &A:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_list Load)) nil) None) (Assign (list (Name &ru:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (AugAssign (Name &x:0 Store) Sub (Constant i1 None)) (AugAssign (Name &y:0 Store) Sub (Constant i1 None)) (Expr (Call (Attribute (Subscript (Name &A:0 Load) (Name &x:0 Load) Load) s_append Load) (list (Name &y:0 Load)) nil)) (Expr (Call (Attribute (Subscript (Name &A:0 Load) (Name &y:0 Load) Load) s_append Load) (list (Name &x:0 Load)) nil)) (AugAssign (Subscript (Name &ru:0 Load) (Name &x:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &ru:0 Load) (Name &y:0 Load) Store) Add (Constant i1 None))) nil None) (Assign (list (Name &num:0 Store)) (Constant i0 None) None) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Subscript (Name &ru:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)) nil)) nil None) (If (Compare (Name &flag:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_yes None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_no None)) nil))))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &g:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (fn_1) None) (AugAssign (Name &u:0 Store) Sub (Constant i1 None)) (AugAssign (Name &v:0 Store) Sub (Constant i1 None)) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (Name &u:0 Load) Load) s_append Load) (list (Name &v:0 Load)) nil)) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (Name &v:0 Load) Load) s_append Load) (list (Name &u:0 Load)) nil))) nil None) (For (Name &v:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &g:0 Load) (Name &v:0 Load) Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)",
            "(Module (/seq (fn_3 &a:0) (Assign (list (Name &A:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &a:0 Load)) None) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (fn_2 &a:0) (/seq (Assign (list (Tuple (list (Name &q:0 Store) (Name &w:0 Store)) Store)) (fn_1) None) (AugAssign (Subscript (Name &A:0 Load) (BinOp (Name &q:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None)) (If (Compare (Subscript (Name &A:0 Load) (BinOp (Name &q:0 Load) Sub (Constant i1 None)) Load) (list Eq) (list (Constant i2 None))) (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq (If (Compare (Subscript (Name &A:0 Load) (BinOp (Name &q:0 Load) Sub (Constant i1 None)) Load) (list Eq) (list (Constant i3 None))) (/seq (AugAssign (Name &k:0 Store) Sub (Constant i1 None))) nil))) (AugAssign (Subscript (Name &A:0 Load) (BinOp (Name &w:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None)) (If (Compare (Subscript (Name &A:0 Load) (BinOp (Name &w:0 Load) Sub (Constant i1 None)) Load) (list Eq) (list (Constant i2 None))) (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq (If (Compare (Subscript (Name &A:0 Load) (BinOp (Name &w:0 Load) Sub (Constant i1 None)) Load) (list Eq) (list (Constant i3 None))) (/seq (AugAssign (Name &k:0 Store) Sub (Constant i1 None))) nil)))) nil None) (If (Compare (Name &k:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &dep:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &dep:0 Load) s_append Load) (list (Constant i0 None)) nil))) nil None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Name &a:0 Load)) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (Name &b:0 Load)) nil) None) (Assign (list (Subscript (Name &dep:0 Load) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) Store)) (BinOp (Subscript (Name &dep:0 Load) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) Load) Add (Constant i1 None)) None) (Assign (list (Subscript (Name &dep:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Store)) (BinOp (Subscript (Name &dep:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Load) Add (Constant i1 None)) None)) nil None) (Assign (list (Name &good:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Subscript (Name &dep:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &good:0 Store)) (Constant i0 None) None)) nil)) nil None) (If (Compare (Name &good:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_os None))) (Import (list (alias g_sys None))) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:3 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &d:3 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:9 Store) (Call (Name g_range Load) (list (Name &n:3 Load)) nil) nil i0))) None) (For (Name &i:3 Store) (fn_2 &n:3) (/seq (Assign (list (Tuple (list (Name &u:3 Store) (Name &v:3 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (AugAssign (Name &u:3 Store) Sub (Constant i1 None)) (AugAssign (Name &v:3 Store) Sub (Constant i1 None)) (Expr (Call (Attribute (Subscript (Name &d:3 Load) (Name &u:3 Load) Load) s_append Load) (list (Name &v:3 Load)) nil)) (Expr (Call (Attribute (Subscript (Name &d:3 Load) (Name &v:3 Load) Load) s_append Load) (list (Name &u:3 Load)) nil))) nil None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (Name &n:3 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &d:3 Load) (Name &i:3 Load) Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) None)) nil None None) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name g_IOBase Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:4 None None) (arg &file:4 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:4 Load) s__fd Store)) (Call (Attribute (Name &file:4 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:4 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None) (Assign (list (Attribute (Name &self:4 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:4 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:4 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:4 Load) s_write Store)) (IfExp (Attribute (Name &self:4 Load) s_writable Load) (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:5 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:5 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:5 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:5 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:5 Load)) (/seq Break) nil) (Assign (list (Name &ptr:5 Store)) (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load) (list (Name &b:5 Load)) nil) (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load) (list (Name &ptr:5 Load)) nil)) Load))) nil) (Assign (list (Attribute (Name &self:5 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:6 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:6 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:6 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:6 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:6 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:6 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:6 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:6 Load))) None) (Assign (list (Name &ptr:6 Store)) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load) (list (Name &b:6 Load)) nil) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (Name &ptr:6 Load)) nil)) Load))) nil) (AugAssign (Attribute (Name &self:6 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:7 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name g_os Load) s_write Load) (list (Attribute (Name &self:7 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name g_IOBase Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:8 None None) (arg &file:8 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:8 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:8 Load)) nil) None) (Assign (list (Attribute (Name &self:8 Load) s_flush Store)) (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:8 Load) s_writable Store)) (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:8 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:10 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:10 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:8 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:8 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil)) None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &tree:0 Store)) (Dict nil nil) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (Compare (Name &a:0 Load) (list NotIn) (list (Name &tree:0 Load))) (/seq (Assign (list (Subscript (Name &tree:0 Load) (Name &a:0 Load) Store)) (Constant i1 None) None)) (/seq (AugAssign (Subscript (Name &tree:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None)))) (If (Compare (Name &b:0 Load) (list NotIn) (list (Name &tree:0 Load))) (/seq (Assign (list (Subscript (Name &tree:0 Load) (Name &b:0 Load) Store)) (Constant i1 None) None)) (/seq (AugAssign (Subscript (Name &tree:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))))) nil None) (For (Name &item:0 Store) (Name &tree:0 Load) (/seq (If (Compare (Subscript (Name &tree:0 Load) (Name &item:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) None)) nil)",
            "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None) (alias g_Counter None)) i0) (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (ImportFrom s_heapq (list (alias g_heappush None) (alias g_heappop None)) i0) (Import (list (alias g_math None))) (Import (list (alias g_io None))) (Import (list (alias g_os None))) (Import (list (alias g_math None))) (Import (list (alias g_bisect None))) (FunctionDef &isPrime:0 (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i2 None) (Name &x:1 Load)) nil) (/seq (If (Compare (BinOp (Name &i:1 Load) Mult (Name &i:1 Load)) (list Gt) (list (Name &x:1 Load))) (/seq Break) nil) (If (Compare (BinOp (Name &x:1 Load) Mod (Name &i:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant False None))) nil)) nil None) (Return (Constant True None))) nil None None) (FunctionDef &ncr:0 (arguments nil (list (arg &n:2 None None) (arg &r:2 None None) (arg &p:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &num:2 Store) (Name &den:2 Store)) (Constant i1 None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (Name &r:2 Load)) nil) (/seq (Assign (list (Name &num:2 Store)) (BinOp (BinOp (Name &num:2 Load) Mult (BinOp (Name &n:2 Load) Sub (Name &i:2 Load))) Mod (Name &p:2 Load)) None) (Assign (list (Name &den:2 Store)) (BinOp (BinOp (Name &den:2 Load) Mult (BinOp (Name &i:2 Load) Add (Constant i1 None))) Mod (Name &p:2 Load)) None)) nil None) (Return (BinOp (BinOp (Name &num:2 Load) Mult (Call (Name g_pow Load) (list (Name &den:2 Load) (BinOp (Name &p:2 Load) Sub (Constant i2 None)) (Name &p:2 Load)) nil)) Mod (Name &p:2 Load)))) nil None None) (FunctionDef &primeFactors:0 (arguments nil (list (arg &n:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &l:3 Store)) (List nil Load) None) (While (Compare (BinOp (Name &n:3 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &l:3 Load) s_append Load) (list (Constant i2 None)) nil)) (Assign (list (Name &n:3 Store)) (BinOp (Name &n:3 Load) Div (Constant i2 None)) None)) nil) (For (Name &i:3 Store) (Call (Name g_range Load) (list (Constant i3 None) (BinOp (Call (Name g_int Load) (list (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &n:3 Load)) nil)) nil) Add (Constant i1 None)) (Constant i2 None)) nil) (/seq (While (Compare (BinOp (Name &n:3 Load) Mod (Name &i:3 Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &l:3 Load) s_append Load) (list (Call (Name g_int Load) (list (Name &i:3 Load)) nil)) nil)) (Assign (list (Name &n:3 Store)) (BinOp (Name &n:3 Load) Div (Name &i:3 Load)) None)) nil)) nil None) (If (Compare (Name &n:3 Load) (list Gt) (list (Constant i2 None))) (/seq (Expr (Call (Attribute (Name &l:3 Load) s_append Load) (list (Name &n:3 Load)) nil))) nil) (Return (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Name &l:3 Load)) nil)) nil))) nil None None) (FunctionDef &power:0 (arguments nil (list (arg &x:4 None None) (arg &y:4 None None) (arg &p:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &res:4 Store)) (Constant i1 None) None) (Assign (list (Name &x:4 Store)) (BinOp (Name &x:4 Load) Mod (Name &p:4 Load)) None) (If (Compare (Name &x:4 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i0 None))) nil) (While (Compare (Name &y:4 Load) (list Gt) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &y:4 Load) BitAnd (Constant i1 None)) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &res:4 Store)) (BinOp (BinOp (Name &res:4 Load) Mult (Name &x:4 Load)) Mod (Name &p:4 Load)) None)) nil) (Assign (list (Name &y:4 Store)) (BinOp (Name &y:4 Load) RShift (Constant i1 None)) None) (Assign (list (Name &x:4 Store)) (BinOp (BinOp (Name &x:4 Load) Mult (Name &x:4 Load)) Mod (Name &p:4 Load)) None)) nil) (Return (Name &res:4 Load))) nil None None) (FunctionDef &sieve:0 (arguments nil (list (arg &n:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &prime:5 Store)) (ListComp (Constant True None) (list (comprehension (Name &i:8 Store) (Call (Name g_range Load) (list (BinOp (Name &n:5 Load) Add (Constant i1 None))) nil) nil i0))) None) (Assign (list (Name &p:5 Store)) (Constant i2 None) None) (While (Compare (BinOp (Name &p:5 Load) Mult (Name &p:5 Load)) (list LtE) (list (Name &n:5 Load))) (/seq (If (Compare (Subscript (Name &prime:5 Load) (Name &p:5 Load) Load) (list Eq) (list (Constant True None))) (/seq (For (Name &i:5 Store) (Call (Name g_range Load) (list (BinOp (Name &p:5 Load) Mult (Name &p:5 Load)) (BinOp (Name &n:5 Load) Add (Constant i1 None)) (Name &p:5 Load)) nil) (/seq (Assign (list (Subscript (Name &prime:5 Load) (Name &i:5 Load) Store)) (Constant False None) None)) nil None)) nil) (AugAssign (Name &p:5 Store) Add (Constant i1 None))) nil) (Return (Name &prime:5 Load))) nil None None) (FunctionDef &digits:0 (arguments nil (list (arg &n:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &c:6 Store)) (Constant i0 None) None) (While (Compare (Name &n:6 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &n:6 Store) FloorDiv (Constant i10 None)) (AugAssign (Name &c:6 Store) Add (Constant i1 None))) nil) (Return (Name &c:6 Load))) nil None None) (FunctionDef &ceil:0 (arguments nil (list (arg &n:7 None None) (arg &x:7 None None)) None nil nil None nil) (/seq (If (Compare (BinOp (Name &n:7 Load) Mod (Name &x:7 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (BinOp (Name &n:7 Load) FloorDiv (Name &x:7 Load)))) nil) (Return (BinOp (BinOp (Name &n:7 Load) FloorDiv (Name &x:7 Load)) Add (Constant i1 None)))) nil None None) (FunctionDef &mapin:0 (arguments nil nil None nil nil None nil) (/seq (Return (fn_1))) nil None None) (fn_3 &n:0) (Assign (list (Name &d:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &_:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Call (Name &mapin:0 Load) nil nil) None) (AugAssign (Subscript (Name &d:0 Load) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &d:0 Load) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None))) nil None) (If (Compare (Call (Attribute (Name &d:0 Load) s_count Load) (list (Constant i2 None)) nil) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &arr:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i0 None) (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) (/seq (Assign (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (AugAssign (Subscript (Name &arr:0 Load) (BinOp (Name &x:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &arr:0 Load) (BinOp (Name &y:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i0 None) (Name &n:0 Load)) nil) (/seq (If (Compare (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil)) nil) None) (Assign (list (Name &d:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i0 None) (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Call (Attribute (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Tuple (list (BinOp (Call (Name g_int Load) (list (Name &u:0 Load)) nil) Sub (Constant i1 None)) (BinOp (Call (Name g_int Load) (list (Name &v:0 Load)) nil) Sub (Constant i1 None))) Load) None) (Assign (list (Subscript (Name &d:0 Load) (Name &u:0 Load) Store)) (BinOp (Subscript (Name &d:0 Load) (Name &u:0 Load) Load) Add (Constant i1 None)) None) (Assign (list (Subscript (Name &d:0 Load) (Name &v:0 Load) Store)) (BinOp (Subscript (Name &d:0 Load) (Name &v:0 Load) Load) Add (Constant i1 None)) None)) nil None) (If (Compare (Constant i2 None) (list In) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &tr:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (For (Name &i:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (fn_1) None) (AugAssign (Subscript (Name &tr:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &tr:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Name &tr:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_No None)) nil)) Break) nil)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_Yes None)) nil))) None)) nil)",
            "(Module (/seq (fn_3 &n:0) (Assign (list (Name &arr:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i0 None) (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) (/seq (Assign (list (Name &l:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &j:1 Load)) nil) (list (comprehension (Name &j:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil) nil i0))) None) (AugAssign (Subscript (Name &arr:0 Load) (BinOp (Subscript (Name &l:0 Load) (Constant i0 None) Load) Sub (Constant i1 None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &arr:0 Load) (BinOp (Subscript (Name &l:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) Store) Add (Constant i1 None))) nil None) (Expr (Call (Name g_print Load) (list (Subscript (List (list (Constant s_YES None) (Constant s_NO None)) Load) (Compare (Constant i2 None) (list In) (list (Name &arr:0 Load))) Load)) nil))) nil)",
            "(Module (/seq (FunctionDef &add:0 (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (/seq (Global (list s_d s_d2)) (If (Compare (Name &x:1 Load) (list NotIn) (list (Name g_d Load))) (/seq (Assign (list (Subscript (Name g_d Load) (Name &x:1 Load) Store)) (Constant i0 None) None)) nil) (AugAssign (Subscript (Name g_d Load) (Name &x:1 Load) Store) Add (Constant i1 None)) (If (Compare (Subscript (Name g_d Load) (Name &x:1 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Subscript (Name g_d2 Load) (Name &x:1 Load) Store)) (Name &a:0 Load) None)) nil) (If (Compare (Subscript (Name g_d Load) (Name &x:1 Load) Load) (list Eq) (list (Constant i3 None))) (/seq (Delete (list (Subscript (Name g_d2 Load) (Name &x:1 Load) Del)))) nil)) nil None None) (Import (list (alias &sys:0 None))) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil)) nil) None) (Assign (list (Name &d:0 Store)) (Dict nil nil) None) (Assign (list (Name &d2:0 Store)) (Dict nil nil) None) (For (Name &_:0 Store) (fn_2 &n:0) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil) None) (Expr (Call (Name &add:0 Load) (list (Name &a:0 Load)) nil)) (Expr (Call (Name &add:0 Load) (list (Name &b:0 Load)) nil))) nil None) (Assign (list (Name &res:0 Store)) (Constant s_YES None) None) (For (Name &k:0 Store) (Name &d2:0 Load) (/seq (Assign (list (Name &res:0 Store)) (Constant s_NO None) None) Break) nil None) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))) nil)"
        ]
    }
]
