[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "match_sequences": true,
            "dfa": "data_for_testing/dfa_imp.json",
            "max_arity": 3,
            "application_utility_choicevar": -1.01,
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                0,
                1,
                "(Assign (list (Name %1 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None)",
                "S",
                [],
                [
                    "X"
                ]
            ],
            [
                2,
                1,
                "(If (Compare (BinOp (Subscript (Name %1 Load) (Constant i0 None) Load) Add (Subscript (Name %1 Load) (Constant i1 None) Load)) (list LtE) (list (Subscript (Name %1 Load) #1 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) #0) nil))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))))",
                "S",
                [
                    "E",
                    "E"
                ],
                [
                    "X"
                ]
            ],
            [
                0,
                0,
                "(/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))",
                "S",
                [],
                []
            ]
        ],
        "programs": [
            "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &z:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (fn_1 &arr:0) (Assign (list (Name &min:0 Store)) (BinOp (Subscript (Name &arr:0 Load) (Constant i0 None) Load) Add (Subscript (Name &arr:0 Load) (Constant i1 None) Load)) None) (Assign (list (Name &pos:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i2 None) (Name &n:0 Load)) nil) (/seq (If (Compare (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (list GtE) (list (Name &min:0 Load))) (/seq (Assign (list (Name &pos:0 Store)) (Constant False None) None) (Assign (list (Name &posf:0 Store)) (Name &i:0 Load) None) Break) nil)) nil None) (If (Name &pos:0 Load) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ5LCAzMiwgNTBd None) (BinOp (Name &posf:0 Load) Add (Constant i1 None))) nil))))) nil None)) nil)",
            "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (fn_1 &a:0) (Assign (list (Name &f:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil) (/seq (If (Compare (BinOp (Subscript (Name &a:0 Load) (Constant i0 None) Load) Add (Subscript (Name &a:0 Load) (Constant i1 None) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))) (/seq (Assign (list (Name &f:0 Store)) (Constant i1 None) None) (Expr (Call (Name g_print Load) (list (Constant s-WzQ5LCAzMiwgNTBd None) (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) Break) nil)) nil None) (If (Compare (Name &f:0 Load) (list Eq) (list (Constant i0 None))) (fn_3) nil)) nil None)) nil)",
            "(Module (/seq (For (Name &t:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (fn_1 &a:0) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i2 None) (Name &n:0 Load)) nil) (/seq (Assign (list (Name &l:0 Store)) (Name &i:0 Load) None) (Assign (list (Name &r:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (If (Compare (BinOp (Subscript (Name &a:0 Load) (Constant i0 None) Load) Add (Subscript (Name &a:0 Load) (Constant i1 None) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (Name &l:0 Load) Load))) (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None)) (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) Break) nil)) nil None) (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (fn_3) nil)) nil None)) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &inp:0 Store)) (Call (Attribute (Call (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_read Load) nil nil) s_split Load) (list (Constant bCg== None)) nil) None) (Assign (list (Name &_ii:0 Store)) (UnaryOp USub (Constant i1 None)) None) (Assign (list (Name &_DEBUG:0 Store)) (Constant i0 None) None) (FunctionDef &debug:0 (arguments nil nil (arg &args:1 None None) nil nil None nil) (/seq (If (Name &_DEBUG:0 Load) (/seq (Import (list (alias &inspect:1 None))) (Assign (list (Name &frame:1 Store)) (Call (Attribute (Name &inspect:1 Load) s_currentframe Load) nil nil) None) (Assign (list (Name &frame:1 Store)) (Subscript (Call (Attribute (Name &inspect:1 Load) s_getouterframes Load) (list (Name &frame:1 Load)) nil) (Constant i1 None) Load) None) (Assign (list (Name &string:1 Store)) (Call (Attribute (Subscript (Attribute (Call (Attribute (Name &inspect:1 Load) s_getframeinfo Load) (list (Subscript (Name &frame:1 Load) (Constant i0 None) Load)) nil) s_code_context Load) (Constant i0 None) Load) s_strip Load) nil nil) None) (Assign (list (Name &arns:1 Store)) (Call (Attribute (Subscript (Name &string:1 Load) (Slice (BinOp (Call (Attribute (Name &string:1 Load) s_find Load) (list (Constant s-WzQwXQ== None)) nil) Add (Constant i1 None)) (UnaryOp USub (Constant i1 None)) None) Load) s_split Load) (list (Constant s-WzQ0XQ== None)) nil) None) (Expr (Call (Name g_print Load) (list (Constant s-WzMyLCAzMiwgMzIsIDMyLCAzNSwgMTAwLCAxMDEsIDk4LCAxMTcsIDEwMywgNThd None)) (list (keyword s_end (Constant s-WzMyXQ== None))))) (For (Tuple (list (Name &i:1 Store) (Name &j:1 Store)) Store) (Call (Name g_zip Load) (list (Name &arns:1 Load) (Name &args:1 Load)) nil) (/seq (Expr (Call (Name g_print Load) (list (Name &i:1 Load) (Constant s-WzMyLCA2MSwgMzJd None) (Name &j:1 Load)) (list (keyword s_end (Constant s-WzQ0LCAzMl0= None)))))) nil None) (Expr (Call (Name g_print Load) nil nil))) nil)) nil None None) (FunctionDef &rdln:0 (arguments nil nil None nil nil None nil) (/seq (Global (list s__ii)) (AugAssign (Name g__ii Store) Add (Constant i1 None)) (Return (Subscript (Name &inp:0 Load) (Name g__ii Load) Load))) nil None None) (Assign (list (Name &inin:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_int Load) (list (Call (Name &rdln:0 Load) nil nil)) nil)) None) (Assign (list (Name &inar:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (ListComp (Call (Name g_int Load) (list (Name &x:2 Load)) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_split Load) nil nil) nil i0)))) None) (Assign (list (Name &inst:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_strip Load) nil nil) s_decode Load) nil nil)) None) (Assign (list (Name &_T_:0 Store)) (Call (Name &inin:0 Load) nil nil) None) (For (Name &_t_:0 Store) (Call (Name g_range Load) (list (Name &_T_:0 Load)) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name &inin:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name &inar:0 Load) nil nil) None) (Expr (Call (Name &debug:0 Load) (list (Name &n:0 Load) (Name &a:0 Load)) nil)) (If (Compare (BinOp (Subscript (Name &a:0 Load) (Constant i0 None) Load) Add (Subscript (Name &a:0 Load) (Constant i1 None) Load)) (list Gt) (list (Subscript (Name &a:0 Load) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Load))) (fn_3) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) (Name &n:0 Load)) nil))))) nil None)) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load) None) (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &A:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Tuple (list (Subscript (Name &A:0 Load) (Constant i0 None) Load) (Subscript (Name &A:0 Load) (Constant i1 None) Load) (Subscript (Name &A:0 Load) (UnaryOp USub (Constant i1 None)) Load)) Load) None) (If (Compare (Name &c:0 Load) (list GtE) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) (Name &n:0 Load)) nil)) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) nil) (If (UnaryOp Not (Name &flag:0 Load)) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Tuple (list (Subscript (Name &A:0 Load) (Constant i0 None) Load) (Subscript (Name &A:0 Load) (UnaryOp USub (Constant i2 None)) Load) (Subscript (Name &A:0 Load) (UnaryOp USub (Constant i1 None)) Load)) Load) None) (If (Compare (BinOp (Name &c:0 Load) Sub (Name &b:0 Load)) (list GtE) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Sub (Constant i2 None)) (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) nil)) nil) (If (UnaryOp Not (Name &flag:0 Load)) (fn_3) nil)) nil None)) nil)",
            "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (While (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (fn_1 &a:0) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &k:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (Assign (list (Name &j:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &it:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) (/seq (If (Compare (BinOp (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) Add (Subscript (Name &a:0 Load) (Name &it:0 Load) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (Name &k:0 Load) Load))) (/seq (Assign (list (Name &j:0 Store)) (Name &it:0 Load) None) Break) nil)) nil None) (If (Compare (Name &j:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (fn_3) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)) (BinOp (Name &j:0 Load) Add (Constant i1 None)) (BinOp (Name &k:0 Load) Add (Constant i1 None))) nil)))) (AugAssign (Name &t:0 Store) Sub (Constant i1 None))) nil)) nil)",
            "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (fn_1 &array:0) (fn_2 (Call (Name g_len Load) (list (Name &array:0 Load)) nil) (UnaryOp USub (Constant i1 None)) &array:0)) nil None)) nil)",
            "(Module (/seq (For (Name &_:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Expr (Call (Name g_input Load) nil nil)) (fn_1 &a:0) (fn_2 (Call (Name g_len Load) (list (Name &a:0 Load)) nil) (UnaryOp USub (Constant i1 None)) &a:0)) nil None)) nil)",
            "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (fn_1 &a:0) (If (Compare (BinOp (Subscript (Name &a:0 Load) (Constant i0 None) Load) Add (Subscript (Name &a:0 Load) (Constant i1 None) Load)) (list Gt) (list (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Load))) (fn_3) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil))))) nil None)) nil)",
            "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (fn_2 (Name &n:0 Load) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) &x:0)) nil None)) nil)"
        ]
    }
]
