[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                0,
                0,
                "(BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))",
                "E",
                [],
                []
            ],
            [
                0,
                1,
                "(Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name %1 Load) nil nil) s_split Load) nil nil)) nil)",
                "E",
                [],
                [
                    "X"
                ]
            ],
            [
                0,
                3,
                "(Expr (Tuple (list (Call (Attribute (Attribute (Name %2 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name %2 Load) s_buffer Load) s_write Load) (list (Name %3 Load)) nil) (Call (Attribute (Attribute (Name %2 Load) s_buffer Load) s_seek Load) (list (Name %1 Load)) nil)) Load))",
                "S",
                [],
                [
                    "X",
                    "X",
                    "X"
                ]
            ]
        ],
        "programs": [
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load) None) (FunctionDef &_find:0 (arguments nil (list (arg &s:1 None None) (arg &u:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &p:1 Store)) (List nil Load) None) (While (Compare (Subscript (Name &s:1 Load) (Name &u:1 Load) Load) (list NotEq) (list (Name &u:1 Load))) (/seq (Expr (Call (Attribute (Name &p:1 Load) s_append Load) (list (Name &u:1 Load)) nil)) (Assign (list (Name &u:1 Store)) (Subscript (Name &s:1 Load) (Name &u:1 Load) Load) None)) nil) (For (Name &v:1 Store) (Name &p:1 Load) (/seq (Assign (list (Subscript (Name &s:1 Load) (Name &v:1 Load) Store)) (Name &u:1 Load) None)) nil None) (Return (Name &u:1 Load))) nil None None) (FunctionDef &_union:0 (arguments nil (list (arg &s:2 None None) (arg &u:2 None None) (arg &v:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &su:2 Store) (Name &sv:2 Store)) Store)) (Tuple (list (Call (Name &_find:0 Load) (list (Name &s:2 Load) (Name &u:2 Load)) nil) (Call (Name &_find:0 Load) (list (Name &s:2 Load) (Name &v:2 Load)) nil)) Load) None) (If (Compare (Name &su:2 Load) (list NotEq) (list (Name &sv:2 Load))) (/seq (Assign (list (Subscript (Name &s:2 Load) (Name &su:2 Load) Store)) (Name &sv:2 Load) None)) nil) (Return (Compare (Name &su:2 Load) (list NotEq) (list (Name &sv:2 Load))))) nil None None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Tuple (list (Name &s:0 Store) (Name &solo:0 Store)) Store)) (Tuple (list (Call (Name g_list Load) (list (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)) nil) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &m:0 Load) Add (Constant i1 None)))) Load) None) (Assign (list (Tuple (list (Name &res:0 Store) (Name &pos:0 Store)) Store)) (Tuple (list (List nil Load) (Call (Name g_set Load) nil nil)) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &p:0 Store)) (Call (Name g_list Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Subscript (Name &p:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &pos:0 Load) s_add Load) (list (Subscript (Name &p:0 Load) (Constant i1 None) Load)) nil)) (Assign (list (Name &p1:0 Store)) (Call (Name &_find:0 Load) (list (Name &s:0 Load) (Subscript (Name &p:0 Load) (Constant i1 None) Load)) nil) None) (If (UnaryOp Not (Subscript (Name &solo:0 Load) (Name &p1:0 Load) Load)) (/seq (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) (Assign (list (Subscript (Name &solo:0 Load) (Name &p1:0 Load) Store)) (Constant i1 None) None)) nil)) (/seq (Expr (Call (Attribute (Name &pos:0 Load) s_add Load) (list (Subscript (Name &p:0 Load) (Constant i1 None) Load)) nil)) (Expr (Call (Attribute (Name &pos:0 Load) s_add Load) (list (Subscript (Name &p:0 Load) (Constant i2 None) Load)) nil)) (Assign (list (Tuple (list (Name &p1:0 Store) (Name &p2:0 Store)) Store)) (Tuple (list (Call (Name &_find:0 Load) (list (Name &s:0 Load) (Subscript (Name &p:0 Load) (Constant i1 None) Load)) nil) (Call (Name &_find:0 Load) (list (Name &s:0 Load) (Subscript (Name &p:0 Load) (Constant i2 None) Load)) nil)) Load) None) (If (UnaryOp Not (BoolOp Or (list (Compare (Name &p1:0 Load) (list Eq) (list (Name &p2:0 Load))) (BoolOp And (list (Subscript (Name &solo:0 Load) (Name &p1:0 Load) Load) (Subscript (Name &solo:0 Load) (Name &p2:0 Load) Load)))))) (/seq (Expr (Call (Name &_union:0 Load) (list (Name &s:0 Load) (Name &p1:0 Load) (Name &p2:0 Load)) nil)) (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) (If (BoolOp Or (list (Subscript (Name &solo:0 Load) (Name &p1:0 Load) Load) (Subscript (Name &solo:0 Load) (Name &p2:0 Load) Load))) (/seq (Assign (list (Subscript (Name &solo:0 Load) (Call (Name &_find:0 Load) (list (Name &s:0 Load) (Name &p1:0 Load)) nil) Store)) (Constant i1 None) None)) nil)) nil)))) nil None) (Assign (list (Name &cc:0 Store)) (Constant i0 None) None) (For (Name &u:0 Store) (Name &pos:0 Load) (/seq (Assign (list (Name &su:0 Store)) (Call (Name &_find:0 Load) (list (Name &s:0 Load) (Name &u:0 Load)) nil) None) (AugAssign (Name &cc:0 Store) Add (Constant i1 None)) (If (BoolOp And (list (UnaryOp Not (Subscript (Name &solo:0 Load) (Name &su:0 Load) Load)) (Compare (Name &su:0 Load) (list Eq) (list (Name &u:0 Load))))) (/seq (AugAssign (Name &cc:0 Store) Sub (Constant i1 None))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Name &cc:0 Load) (fn_1)) nil) (Call (Name g_len Load) (list (Name &res:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Starred (Name &res:0 Load) Load)) nil))) nil)",
            "(Module (/seq (ClassDef &UnionFind:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_parent Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:2 Load)) nil)) nil) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:3 None None) (arg &a:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &acopy:3 Store)) (Name &a:3 Load) None) (While (Compare (Name &a:3 Load) (list NotEq) (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load))) (/seq (Assign (list (Name &a:3 Store)) (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load) None)) nil) (While (Compare (Name &acopy:3 Load) (list NotEq) (list (Name &a:3 Load))) (/seq (Assign (list (Tuple (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Store) (Name &acopy:3 Store)) Store)) (Tuple (list (Name &a:3 Load) (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Load)) Load) None)) nil) (Return (Name &a:3 Load))) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &self:4 None None) (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &b:4 Load)) nil) Store)) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &a:4 Load)) nil) None)) nil None None)) nil) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &UF:0 Store)) (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &MOD:0 Store)) (fn_1) None) (Assign (list (Name &out:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Call (Name g_len Load) (list (Name &l:0 Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &u:0 Store)) (Constant i0 None) None) (Assign (list (Name &v:0 Store)) (Subscript (Name &l:0 Load) (Constant i1 None) Load) None)) (/seq (Assign (list (Tuple (list (Name &_:0 Store) (Name &u:0 Store) (Name &v:0 Store)) Store)) (Name &l:0 Load) None))) (Assign (list (Name &uu:0 Store)) (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &u:0 Load)) nil) None) (Assign (list (Name &vv:0 Store)) (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &v:0 Load)) nil) None) (If (Compare (Name &uu:0 Load) (list NotEq) (list (Name &vv:0 Load))) (/seq (Expr (Call (Attribute (Name &UF:0 Load) s_union Load) (list (Name &uu:0 Load) (Name &vv:0 Load)) nil)) (Expr (Call (Attribute (Name &out:0 Load) s_append Load) (list (Name &i:0 Load)) nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &out:0 Load)) nil) (Name &MOD:0 Load)) nil) (Call (Name g_len Load) (list (Name &out:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &out:0 Load)) nil)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load) None) (FunctionDef &prog:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &n:1 Store) (Name &m:1 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &mod:1 Store)) (fn_1) None) (Assign (list (Name &has_one:1 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &m:1 Load) Add (Constant i1 None))) None) (Assign (list (Name &basis:1 Store)) (List nil Load) None) (Assign (list (Name &sizes:1 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (BinOp (Name &m:1 Load) Add (Constant i1 None))) None) (Assign (list (Name &parent:1 Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (BinOp (Name &m:1 Load) Add (Constant i1 None))) nil)) nil) None) (FunctionDef &find_parent:1 (arguments nil (list (arg &v:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &v:2 Load) (list Eq) (list (Subscript (Name &parent:1 Load) (Name &v:2 Load) Load))) (/seq (Return (Name &v:2 Load))) nil) (Assign (list (Name &v:2 Store)) (Call (Name &find_parent:1 Load) (list (Subscript (Name &parent:1 Load) (Name &v:2 Load) Load)) nil) None) (Return (Name &v:2 Load))) nil None None) (FunctionDef &union_sets:1 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &a:3 Store)) (Call (Name &find_parent:1 Load) (list (Name &a:3 Load)) nil) None) (Assign (list (Name &b:3 Store)) (Call (Name &find_parent:1 Load) (list (Name &b:3 Load)) nil) None) (If (BoolOp And (list (Compare (Name &a:3 Load) (list NotEq) (list (Name &b:3 Load))) (BoolOp Or (list (UnaryOp Not (Subscript (Name &has_one:1 Load) (Name &a:3 Load) Load)) (UnaryOp Not (Subscript (Name &has_one:1 Load) (Name &b:3 Load) Load)))))) (/seq (If (Compare (Subscript (Name &sizes:1 Load) (Name &a:3 Load) Load) (list Lt) (list (Subscript (Name &sizes:1 Load) (Name &b:3 Load) Load))) (/seq (Assign (list (Tuple (list (Name &a:3 Store) (Name &b:3 Store)) Store)) (Tuple (list (Name &b:3 Load) (Name &a:3 Load)) Load) None)) nil) (Assign (list (Subscript (Name &parent:1 Load) (Name &b:3 Load) Store)) (Name &a:3 Load) None) (AugAssign (Subscript (Name &sizes:1 Load) (Name &a:3 Load) Store) Add (Subscript (Name &sizes:1 Load) (Name &b:3 Load) Load)) (Assign (list (Subscript (Name &has_one:1 Load) (Name &a:3 Load) Store)) (BinOp (Subscript (Name &has_one:1 Load) (Name &a:3 Load) Load) BitOr (Subscript (Name &has_one:1 Load) (Name &b:3 Load) Load)) None) (Return (Constant True None))) (/seq (Return (Constant False None))))) nil None None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:1 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &a:1 Store)) (Call (Name g_list Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Subscript (Name &a:1 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &par:1 Store)) (Call (Name &find_parent:1 Load) (list (Subscript (Name &a:1 Load) (Constant i1 None) Load)) nil) None) (If (UnaryOp Not (Subscript (Name &has_one:1 Load) (Name &par:1 Load) Load)) (/seq (Assign (list (Subscript (Name &has_one:1 Load) (Name &par:1 Load) Store)) (Constant i1 None) None) (Expr (Call (Attribute (Name &basis:1 Load) s_append Load) (list (Name &i:1 Load)) nil))) nil)) (/seq (If (Call (Name &union_sets:1 Load) (list (Subscript (Name &a:1 Load) (Constant i1 None) Load) (Subscript (Name &a:1 Load) (Constant i2 None) Load)) nil) (/seq (Expr (Call (Attribute (Name &basis:1 Load) s_append Load) (list (Name &i:1 Load)) nil))) nil)))) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &basis:1 Load)) nil) (Name &mod:1 Load)) nil) (Call (Name g_len Load) (list (Name &basis:1 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Starred (Name &basis:1 Load) Load)) nil))) nil None None) (Expr (Call (Name &prog:0 Load) nil nil))) nil)",
            "(Module (/seq (Assign (list (Name &MOD:0 Store)) (fn_1) None) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load) None) (ClassDef &UnionFind:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:4 None None) (arg &n:4 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:4 Load) s_parent Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:4 Load)) nil)) nil) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:5 None None) (arg &a:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &acopy:5 Store)) (Name &a:5 Load) None) (While (Compare (Name &a:5 Load) (list NotEq) (list (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Name &a:5 Load) Load))) (/seq (Assign (list (Name &a:5 Store)) (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Name &a:5 Load) Load) None)) nil) (While (Compare (Name &acopy:5 Load) (list NotEq) (list (Name &a:5 Load))) (/seq (Assign (list (Tuple (list (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Name &acopy:5 Load) Store) (Name &acopy:5 Store)) Store)) (Tuple (list (Name &a:5 Load) (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Name &acopy:5 Load) Load)) Load) None)) nil) (Return (Name &a:5 Load))) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &self:6 None None) (arg &a:6 None None) (arg &b:6 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:6 Load) s_parent Load) (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &b:6 Load)) nil) Store)) (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &a:6 Load)) nil) None)) nil None None)) nil) (FunctionDef &oneLineArrayPrint:0 (arguments nil (list (arg &arr:2 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (BinOp (Name &x:9 Load) Add (Constant i1 None))) nil) (list (comprehension (Name &x:9 Store) (Name &arr:2 Load) nil i0)))) nil)) nil))) nil None None) (FunctionDef &solveActual:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &uf:3 Store)) (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i2 None))) nil) None) (For (Tuple (list (Name &i:3 Store) (Name &x:3 Store)) Store) (Call (Name g_enumerate Load) (list (Name &vS:0 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Name &x:3 Load)) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &x:3 Load) s_append Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil))) nil) (Expr (Call (Attribute (Name &x:3 Load) s_append Load) (list (Name &i:3 Load)) nil))) nil None) (Expr (Call (Attribute (Name &vS:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:10 None None)) None nil nil None nil) (Subscript (Name &x:10 Load) (Constant i2 None) Load)))))) (Assign (list (Name &sPrime:3 Store)) (List nil Load) None) (For (Tuple (list (Name &p1:3 Store) (Name &p2:3 Store) (Name &index:3 Store)) Store) (Name &vS:0 Load) (/seq (If (Compare (Call (Attribute (Name &uf:3 Load) s_find Load) (list (Name &p1:3 Load)) nil) (list NotEq) (list (Call (Attribute (Name &uf:3 Load) s_find Load) (list (Name &p2:3 Load)) nil))) (/seq (Expr (Call (Attribute (Name &uf:3 Load) s_union Load) (list (Name &p1:3 Load) (Name &p2:3 Load)) nil)) (Expr (Call (Attribute (Name &sPrime:3 Load) s_append Load) (list (Name &index:3 Load)) nil))) nil)) nil None) (Assign (list (Name &TSize:3 Store)) (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &sPrime:3 Load)) nil) (Name &MOD:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgMTI1LCAzMiwgMTIzLCAxMjVd None) s_format Load) (list (Name &TSize:3 Load) (Call (Name g_len Load) (list (Name &sPrime:3 Load)) nil)) nil)) nil)) (Expr (Call (Name &oneLineArrayPrint:0 Load) (list (Name &sPrime:3 Load)) nil))) nil None None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:7 Load)) nil) (list (comprehension (Name &x:7 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &vS:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &xx:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:8 Load)) nil) (list (comprehension (Name &x:8 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (Call (Name g_len Load) (list (Name &xx:0 Load)) nil)) nil) (/seq (AugAssign (Subscript (Name &xx:0 Load) (Name &i:0 Load) Store) Sub (Constant i1 None))) nil None) (Expr (Call (Attribute (Name &vS:0 Load) s_append Load) (list (Subscript (Name &xx:0 Load) (Slice (Constant i1 None) None None) Load)) nil))) nil None) (Expr (Call (Name &solveActual:0 Load) nil nil))) nil)",
            "(Module (/seq (ClassDef &UnionFind:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_parent Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:2 Load)) nil)) nil) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:3 None None) (arg &a:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &acopy:3 Store)) (Name &a:3 Load) None) (While (Compare (Name &a:3 Load) (list NotEq) (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load))) (/seq (Assign (list (Name &a:3 Store)) (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load) None)) nil) (While (Compare (Name &acopy:3 Load) (list NotEq) (list (Name &a:3 Load))) (/seq (Assign (list (Tuple (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Store) (Name &acopy:3 Store)) Store)) (Tuple (list (Name &a:3 Load) (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Load)) Load) None)) nil) (Return (Name &a:3 Load))) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &self:4 None None) (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &b:4 Load)) nil) Store)) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &a:4 Load)) nil) None)) nil None None)) nil) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &UF:0 Store)) (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &MOD:0 Store)) (fn_1) None) (Assign (list (Name &out:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Call (Name g_len Load) (list (Name &l:0 Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &u:0 Store)) (Constant i0 None) None) (Assign (list (Name &v:0 Store)) (Subscript (Name &l:0 Load) (Constant i1 None) Load) None)) (/seq (Assign (list (Tuple (list (Name &_:0 Store) (Name &u:0 Store) (Name &v:0 Store)) Store)) (Name &l:0 Load) None))) (Assign (list (Name &uu:0 Store)) (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &u:0 Load)) nil) None) (Assign (list (Name &vv:0 Store)) (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &v:0 Load)) nil) None) (If (Compare (Name &uu:0 Load) (list NotEq) (list (Name &vv:0 Load))) (/seq (Expr (Call (Attribute (Name &UF:0 Load) s_union Load) (list (Name &uu:0 Load) (Name &vv:0 Load)) nil)) (Expr (Call (Attribute (Name &out:0 Load) s_append Load) (list (Name &i:0 Load)) nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &out:0 Load)) nil) (Name &MOD:0 Load)) nil) (Call (Name g_len Load) (list (Name &out:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &out:0 Load)) nil)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &mod:0 Store)) (Constant i1000000007 None) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (Assign (list (Name &groupi:0 Store)) (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (BinOp (Name &m:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &groups:0 Store)) (BinOp (List (list (Constant i2 None)) Load) Mult (Name &m:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Subscript (Name &groups:0 Load) (Name &i:0 Load) Store)) (List nil Load) None)) nil None) (Assign (list (Name &cur:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_list Load) (list (fn_2 &input:0)) nil) None) (Assign (list (Name &k:0 Store)) (Call (Attribute (Name &x:0 Load) s_pop Load) (list (Constant i0 None)) nil) None) (If (Compare (Name &k:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &x:0 Load) (Constant i0 None) Load) None) (If (Compare (Subscript (Name &groupi:0 Load) (Name &x:0 Load) Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Assign (list (Subscript (Name &groupi:0 Load) (Name &x:0 Load) Store)) (Constant i0 None) None) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))) nil) (If (Compare (Subscript (Name &groupi:0 Load) (Name &x:0 Load) Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &ind:0 Store)) (Subscript (Name &groupi:0 Load) (Name &x:0 Load) Load) None) (For (Name &y:0 Store) (Subscript (Name &groups:0 Load) (Name &ind:0 Load) Load) (/seq (Assign (list (Subscript (Name &groupi:0 Load) (Name &y:0 Load) Store)) (Constant i0 None) None)) nil None) (Assign (list (Subscript (Name &groupi:0 Load) (Name &x:0 Load) Store)) (Constant i0 None) None) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))) nil)) nil) (If (Compare (Name &k:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Tuple (list (Name &x1:0 Store) (Name &x2:0 Store)) Store)) (Tuple (list (Subscript (Name &x:0 Load) (Constant i0 None) Load) (Subscript (Name &x:0 Load) (Constant i1 None) Load)) Load) None) (If (Compare (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (If (Compare (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Assign (list (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Store)) (Name &cur:0 Load) None) (Assign (list (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Store)) (Name &cur:0 Load) None) (Assign (list (Subscript (Name &groups:0 Load) (Name &cur:0 Load) Store)) (List (list (Name &x1:0 Load) (Name &x2:0 Load)) Load) None) (AugAssign (Name &cur:0 Store) Add (Constant i1 None)) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))) (/seq (If (Compare (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Store)) (Constant i0 None) None) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))) (/seq (Assign (list (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Store)) (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load) None) (Expr (Call (Attribute (Subscript (Name &groups:0 Load) (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load) Load) s_append Load) (list (Name &x1:0 Load)) nil)) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))))))) (/seq (If (Compare (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (If (Compare (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Store)) (Constant i0 None) None) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))) (/seq (Assign (list (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Store)) (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load) None) (Expr (Call (Attribute (Subscript (Name &groups:0 Load) (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load) Load) s_append Load) (list (Name &x2:0 Load)) nil)) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))))) (/seq (If (Compare (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load) (list NotEq) (list (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load))) (/seq (If (BoolOp Or (list (Compare (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load) (list Eq) (list (Constant i0 None))) (Compare (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load) (list Eq) (list (Constant i0 None))))) (/seq (If (Compare (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load) (list Eq) (list (Constant i0 None))) (/seq (For (Name &y:0 Store) (Subscript (Name &groups:0 Load) (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load) Load) (/seq (Assign (list (Subscript (Name &groupi:0 Load) (Name &y:0 Load) Store)) (Constant i0 None) None)) nil None)) (/seq (For (Name &y:0 Store) (Subscript (Name &groups:0 Load) (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load) Load) (/seq (Assign (list (Subscript (Name &groupi:0 Load) (Name &y:0 Load) Store)) (Constant i0 None) None)) nil None)))) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &groups:0 Load) (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load) Load)) nil) (list Lt) (list (Call (Name g_len Load) (list (Subscript (Name &groups:0 Load) (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load) Load)) nil))) (/seq (Assign (list (Tuple (list (Name &x1:0 Store) (Name &x2:0 Store)) Store)) (Tuple (list (Name &x2:0 Load) (Name &x1:0 Load)) Load) None)) nil) (For (Name &y:0 Store) (Subscript (Name &groups:0 Load) (Subscript (Name &groupi:0 Load) (Name &x2:0 Load) Load) Load) (/seq (Assign (list (Subscript (Name &groupi:0 Load) (Name &y:0 Load) Store)) (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load) None) (Expr (Call (Attribute (Subscript (Name &groups:0 Load) (Subscript (Name &groupi:0 Load) (Name &x1:0 Load) Load) Load) s_append Load) (list (Name &y:0 Load)) nil))) nil None))) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))) nil)))))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &ans:0 Load)) nil) (Name &mod:0 Load)) nil) (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (FunctionDef &input:0 (arguments nil nil None nil nil None nil) (/seq (Return (Subscript (Call (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load) nil nil) (Slice None (UnaryOp USub (Constant i1 None)) None) Load))) nil None None) (ClassDef &UnionFind:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &size:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_table Store)) (ListComp (UnaryOp USub (Constant i1 None)) (list (comprehension (Name &_:6 Store) (Call (Name g_range Load) (list (Name &size:2 Load)) nil) nil i0))) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil) (/seq (While (Compare (Subscript (Attribute (Name &self:3 Load) s_table Load) (Name &x:3 Load) Load) (list GtE) (list (Constant i0 None))) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_table Load) (Subscript (Attribute (Name &self:3 Load) s_table Load) (Name &x:3 Load) Load) Load) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Attribute (Name &self:3 Load) s_table Load) (Name &x:3 Load) Store)) (Subscript (Attribute (Name &self:3 Load) s_table Load) (Subscript (Attribute (Name &self:3 Load) s_table Load) (Name &x:3 Load) Load) Load) None)) nil) (Assign (list (Name &x:3 Store)) (Subscript (Attribute (Name &self:3 Load) s_table Load) (Name &x:3 Load) Load) None)) nil) (Return (Name &x:3 Load))) nil None None) (FunctionDef &same:1 (arguments nil (list (arg &self:4 None None) (arg &x:4 None None) (arg &y:4 None None)) None nil nil None nil) (/seq (Return (Compare (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &x:4 Load)) nil) (list Eq) (list (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &y:4 Load)) nil))))) nil None None) (FunctionDef &unite:1 (arguments nil (list (arg &self:5 None None) (arg &x:5 None None) (arg &y:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &s1:5 Store)) (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &x:5 Load)) nil) None) (Assign (list (Name &s2:5 Store)) (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &y:5 Load)) nil) None) (If (Compare (Name &s1:5 Load) (list NotEq) (list (Name &s2:5 Load))) (/seq (Assign (list (Name &r1:5 Store)) (Subscript (Attribute (Name &self:5 Load) s_table Load) (Name &s1:5 Load) Load) None) (Assign (list (Name &r2:5 Store)) (Subscript (Attribute (Name &self:5 Load) s_table Load) (Name &s2:5 Load) Load) None) (If (Compare (Name &r1:5 Load) (list LtE) (list (Name &r2:5 Load))) (/seq (Assign (list (Subscript (Attribute (Name &self:5 Load) s_table Load) (Name &s2:5 Load) Store)) (Name &s1:5 Load) None) (If (Compare (Name &r1:5 Load) (list Eq) (list (Name &r2:5 Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:5 Load) s_table Load) (Name &s1:5 Load) Store) Sub (Constant i1 None))) nil)) (/seq (Assign (list (Subscript (Attribute (Name &self:5 Load) s_table Load) (Name &s1:5 Load) Store)) (Name &s2:5 Load) None)))) nil) (Return None)) nil None None)) nil) (Assign (list (Tuple (list (Name &m:0 Store) (Name &n:0 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &uf:0 Store)) (Call (Name &UnionFind:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &q:0 Store)) (Call (Name g_list Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Subscript (Name &q:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None))) (/seq (If (Call (Attribute (Name &uf:0 Load) s_same Load) (list (BinOp (Subscript (Name &q:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) (Name &n:0 Load)) nil) (/seq Continue) (/seq (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &i:0 Load)) nil)) (Expr (Call (Attribute (Name &uf:0 Load) s_unite Load) (list (BinOp (Subscript (Name &q:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) (Name &n:0 Load)) nil))))) (/seq (If (Call (Attribute (Name &uf:0 Load) s_same Load) (list (BinOp (Subscript (Name &q:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) (BinOp (Subscript (Name &q:0 Load) (Constant i2 None) Load) Sub (Constant i1 None))) nil) (/seq Continue) (/seq (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &i:0 Load)) nil)) (Expr (Call (Attribute (Name &uf:0 Load) s_unite Load) (list (BinOp (Subscript (Name &q:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) (BinOp (Subscript (Name &q:0 Load) (Constant i2 None) Load) Sub (Constant i1 None))) nil))))))) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &ans:0 Load)) nil) (fn_1)) nil) (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load) None) (FunctionDef &prog:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &n:1 Store) (Name &m:1 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &mod:1 Store)) (fn_1) None) (Assign (list (Name &has_one:1 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &m:1 Load) Add (Constant i1 None))) None) (Assign (list (Name &basis:1 Store)) (List nil Load) None) (Assign (list (Name &sizes:1 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (BinOp (Name &m:1 Load) Add (Constant i1 None))) None) (Assign (list (Name &parent:1 Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (BinOp (Name &m:1 Load) Add (Constant i1 None))) nil)) nil) None) (FunctionDef &find_parent:1 (arguments nil (list (arg &v:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &v:2 Load) (list Eq) (list (Subscript (Name &parent:1 Load) (Name &v:2 Load) Load))) (/seq (Return (Name &v:2 Load))) nil) (Assign (list (Name &v:2 Store)) (Call (Name &find_parent:1 Load) (list (Subscript (Name &parent:1 Load) (Name &v:2 Load) Load)) nil) None) (Return (Name &v:2 Load))) nil None None) (FunctionDef &union_sets:1 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &a:3 Store)) (Call (Name &find_parent:1 Load) (list (Name &a:3 Load)) nil) None) (Assign (list (Name &b:3 Store)) (Call (Name &find_parent:1 Load) (list (Name &b:3 Load)) nil) None) (If (BoolOp And (list (Compare (Name &a:3 Load) (list NotEq) (list (Name &b:3 Load))) (BoolOp Or (list (UnaryOp Not (Subscript (Name &has_one:1 Load) (Name &a:3 Load) Load)) (UnaryOp Not (Subscript (Name &has_one:1 Load) (Name &b:3 Load) Load)))))) (/seq (If (Compare (Subscript (Name &sizes:1 Load) (Name &a:3 Load) Load) (list Lt) (list (Subscript (Name &sizes:1 Load) (Name &b:3 Load) Load))) (/seq (Assign (list (Tuple (list (Name &a:3 Store) (Name &b:3 Store)) Store)) (Tuple (list (Name &b:3 Load) (Name &a:3 Load)) Load) None)) nil) (Assign (list (Subscript (Name &parent:1 Load) (Name &b:3 Load) Store)) (Name &a:3 Load) None) (AugAssign (Subscript (Name &sizes:1 Load) (Name &a:3 Load) Store) Add (Subscript (Name &sizes:1 Load) (Name &b:3 Load) Load)) (Assign (list (Subscript (Name &has_one:1 Load) (Name &a:3 Load) Store)) (BinOp (Subscript (Name &has_one:1 Load) (Name &a:3 Load) Load) BitOr (Subscript (Name &has_one:1 Load) (Name &b:3 Load) Load)) None) (Return (Constant True None))) (/seq (Return (Constant False None))))) nil None None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:1 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &a:1 Store)) (Call (Name g_list Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Subscript (Name &a:1 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &par:1 Store)) (Call (Name &find_parent:1 Load) (list (Subscript (Name &a:1 Load) (Constant i1 None) Load)) nil) None) (If (UnaryOp Not (Subscript (Name &has_one:1 Load) (Name &par:1 Load) Load)) (/seq (Assign (list (Subscript (Name &has_one:1 Load) (Name &par:1 Load) Store)) (Constant i1 None) None) (Expr (Call (Attribute (Name &basis:1 Load) s_append Load) (list (Name &i:1 Load)) nil))) nil)) (/seq (If (Call (Name &union_sets:1 Load) (list (Subscript (Name &a:1 Load) (Constant i1 None) Load) (Subscript (Name &a:1 Load) (Constant i2 None) Load)) nil) (/seq (Expr (Call (Attribute (Name &basis:1 Load) s_append Load) (list (Name &i:1 Load)) nil))) nil)))) nil None) (Expr (Call (Attribute (Name &basis:1 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &basis:1 Load)) nil) (Name &mod:1 Load)) nil) (Call (Name g_len Load) (list (Name &basis:1 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Starred (Name &basis:1 Load) Load)) nil))) nil None None) (Expr (Call (Name &prog:0 Load) nil nil))) nil)",
            "(Module (/seq (Import (list (alias g_io None))) (Import (list (alias g_os None))) (Assign (list (Name &input:0 Store)) (Attribute (Call (Attribute (Name g_io Load) s_BytesIO Load) (list (Call (Attribute (Name g_os Load) s_read Load) (list (Constant i0 None) (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil) s_st_size Load)) nil)) nil) s_readline Load) None) (ClassDef &DSU:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_parent Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:3 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_size Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &n:3 Load)) None) (Assign (list (Attribute (Name &self:3 Load) s_has_loop Store)) (BinOp (List (list (Constant False None)) Load) Mult (Name &n:3 Load)) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:4 None None) (arg &v:4 None None)) None nil nil None nil) (/seq (If (Compare (Name &v:4 Load) (list Eq) (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &v:4 Load) Load))) (/seq (Return (Name &v:4 Load))) nil) (Assign (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &v:4 Load) Store)) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &v:4 Load) Load)) nil) None) (Return (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &v:4 Load) Load))) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &self:5 None None) (arg &a:5 None None) (arg &b:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &a:5 Store)) (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &a:5 Load)) nil) None) (Assign (list (Name &b:5 Store)) (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &b:5 Load)) nil) None) (If (Compare (Name &a:5 Load) (list NotEq) (list (Name &b:5 Load))) (/seq (If (Compare (Subscript (Attribute (Name &self:5 Load) s_size Load) (Name &a:5 Load) Load) (list Lt) (list (Subscript (Attribute (Name &self:5 Load) s_size Load) (Name &b:5 Load) Load))) (/seq (Assign (list (Tuple (list (Name &a:5 Store) (Name &b:5 Store)) Store)) (Tuple (list (Name &b:5 Load) (Name &a:5 Load)) Load) None)) nil) (Assign (list (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Name &b:5 Load) Store)) (Name &a:5 Load) None) (AugAssign (Subscript (Attribute (Name &self:5 Load) s_size Load) (Name &a:5 Load) Store) Add (Subscript (Attribute (Name &self:5 Load) s_size Load) (Name &b:5 Load) Load)) (Assign (list (Subscript (Attribute (Name &self:5 Load) s_has_loop Load) (Name &b:5 Load) Store) (Subscript (Attribute (Name &self:5 Load) s_has_loop Load) (Name &a:5 Load) Store)) (BoolOp Or (list (Subscript (Attribute (Name &self:5 Load) s_has_loop Load) (Name &a:5 Load) Load) (Subscript (Attribute (Name &self:5 Load) s_has_loop Load) (Name &b:5 Load) Load))) None)) nil)) nil None None)) nil) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &n:2 Store) (Name &m:2 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &dsu:2 Store)) (Call (Name &DSU:0 Load) (list (Name &m:2 Load)) nil) None) (Assign (list (Name &ans:2 Store)) (List nil Load) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:2 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:2 Store) (Starred (Name &r:2 Store) Store)) Store)) (fn_2 &input:0) None) (If (Compare (Name &k:2 Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &x:2 Store)) (BinOp (Subscript (Name &r:2 Load) (Constant i0 None) Load) Sub (Constant i1 None)) None) (If (UnaryOp Not (Subscript (Attribute (Name &dsu:2 Load) s_has_loop Load) (Call (Attribute (Name &dsu:2 Load) s_find Load) (list (Name &x:2 Load)) nil) Load)) (/seq (Assign (list (Subscript (Attribute (Name &dsu:2 Load) s_has_loop Load) (Call (Attribute (Name &dsu:2 Load) s_find Load) (list (Name &x:2 Load)) nil) Store)) (Constant True None) None) (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (BinOp (Name &i:2 Load) Add (Constant i1 None))) nil))) nil)) (/seq (Assign (list (Tuple (list (Name &u:2 Store) (Name &v:2 Store)) Store)) (Tuple (list (BinOp (Subscript (Name &r:2 Load) (Constant i0 None) Load) Sub (Constant i1 None)) (BinOp (Subscript (Name &r:2 Load) (Constant i1 None) Load) Sub (Constant i1 None))) Load) None) (If (BoolOp And (list (Compare (Call (Attribute (Name &dsu:2 Load) s_find Load) (list (Name &u:2 Load)) nil) (list NotEq) (list (Call (Attribute (Name &dsu:2 Load) s_find Load) (list (Name &v:2 Load)) nil))) (UnaryOp Not (BoolOp And (list (Subscript (Attribute (Name &dsu:2 Load) s_has_loop Load) (Call (Attribute (Name &dsu:2 Load) s_find Load) (list (Name &u:2 Load)) nil) Load) (Subscript (Attribute (Name &dsu:2 Load) s_has_loop Load) (Call (Attribute (Name &dsu:2 Load) s_find Load) (list (Name &v:2 Load)) nil) Load)))))) (/seq (Expr (Call (Attribute (Name &dsu:2 Load) s_union Load) (list (Name &u:2 Load) (Name &v:2 Load)) nil)) (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (BinOp (Name &i:2 Load) Add (Constant i1 None))) nil))) nil)))) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &ans:2 Load)) nil) (fn_1)) nil) (Call (Name g_len Load) (list (Name &ans:2 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:2 Load) Load)) nil))) nil None None) (Assign (list (Name &t:0 Store)) (Constant i1 None) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (Expr (Call (Name &solve:0 Load) nil nil))) nil None)) nil)",
            "(Module (/seq (Import (list (alias g_sys None) (alias g_io None) (alias g_os None))) (ImportFrom s_collections (list (alias g_deque None)) i0) (Try (/seq (Assign (list (Name &Z:0 Store)) (Attribute (Call (Attribute (Name g_io Load) s_BytesIO Load) (list (Call (Attribute (Name g_os Load) s_read Load) (list (Constant i0 None) (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil) s_st_size Load)) nil)) nil) s_readline Load) None)) (list (ExceptHandler None None (/seq (Assign (list (Name &Z:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_encode Load) nil nil)) None)))) nil nil) (Assign (list (Name &Y:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (fn_2 &Z:0)) None) (Assign (list (Name &M:0 Store)) (fn_1) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &N:0 Store)) Store)) (Call (Name &Y:0 Load) nil nil) None) (FunctionDef &path:0 (arguments nil (list (arg &R:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &H:1 Store)) (Call (Name g_deque Load) nil nil) None) (Expr (Call (Attribute (Name &H:1 Load) s_append Load) (list (Name &R:1 Load)) nil)) (While (Compare (Subscript (Name &P:0 Load) (Name &R:1 Load) Load) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Name &R:1 Store)) (Subscript (Name &P:0 Load) (Name &R:1 Load) Load) None) (Expr (Call (Attribute (Name &H:1 Load) s_append Load) (list (Name &R:1 Load)) nil)) (If (Compare (Call (Name g_len Load) (list (Name &H:1 Load)) nil) (list Gt) (list (Constant i2 None))) (/seq (Assign (list (Subscript (Name &P:0 Load) (Call (Attribute (Name &H:1 Load) s_popleft Load) nil nil) Store)) (Subscript (Name &H:1 Load) (UnaryOp USub (Constant i1 None)) Load) None)) nil)) nil) (Return (Name &R:1 Load))) nil None None) (Assign (list (Name &K:0 Store)) (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &N:0 Load)) None) (Assign (list (Name &P:0 Store)) (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &N:0 Load)) None) (Assign (list (Name &S:0 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &N:0 Load)) None) (Assign (list (Name &R:0 Store)) (Constant i0 None) None) (Assign (list (Name &B:0 Store)) (List nil Load) None) (Assign (list (Name &alr:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &k:0 Store)) (Tuple (list (Starred (Call (Name &Y:0 Load) nil nil) Load)) Load) None) (If (Compare (Subscript (Name &k:0 Load) (Constant i0 None) Load) (list Lt) (list (Constant i2 None))) (/seq (Assign (list (Name &a:0 Store)) (BinOp (Subscript (Name &k:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) None) (If (Compare (Subscript (Name &K:0 Load) (Name &a:0 Load) Load) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Name &v:0 Store)) (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Load)) nil) None) (If (UnaryOp Not (Subscript (Name &alr:0 Load) (Name &v:0 Load) Load)) (/seq (Assign (list (Subscript (Name &alr:0 Load) (Name &v:0 Load) Store)) (Constant i1 None) None)) (/seq Continue))) (/seq (Assign (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Store)) (Name &R:0 Load) None) (Assign (list (Name &v:0 Store)) (Name &R:0 Load) None) (Assign (list (Subscript (Name &alr:0 Load) (Name &R:0 Load) Store)) (Constant i1 None) None) (AugAssign (Name &R:0 Store) Add (Constant i1 None)))) (Expr (Call (Attribute (Name &B:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) Continue) nil) (Assign (list (Name &a:0 Store)) (BinOp (Subscript (Name &k:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) None) (Assign (list (Name &b:0 Store)) (BinOp (Subscript (Name &k:0 Load) (Constant i2 None) Load) Sub (Constant i1 None)) None) (If (Compare (Subscript (Name &K:0 Load) (Name &a:0 Load) Load) (list GtE) (list (Constant i0 None))) (/seq (If (Compare (Subscript (Name &K:0 Load) (Name &b:0 Load) Load) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Tuple (list (Name &va:0 Store) (Name &vb:0 Store)) Store)) (Tuple (list (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Load)) nil) (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Load)) nil)) Load) None) (If (BoolOp Or (list (Compare (Name &va:0 Load) (list Eq) (list (Name &vb:0 Load))) (BoolOp And (list (Subscript (Name &alr:0 Load) (Name &va:0 Load) Load) (Subscript (Name &alr:0 Load) (Name &vb:0 Load) Load))))) (/seq Pass) (/seq (Assign (list (Tuple (list (Name &sa:0 Store) (Name &sb:0 Store)) Store)) (Tuple (list (Subscript (Name &S:0 Load) (Name &va:0 Load) Load) (Subscript (Name &S:0 Load) (Name &vb:0 Load) Load)) Load) None) (If (Compare (Name &sa:0 Load) (list Gt) (list (Name &sb:0 Load))) (/seq (Assign (list (Subscript (Name &P:0 Load) (Name &vb:0 Load) Store)) (Name &va:0 Load) None)) (/seq (Assign (list (Subscript (Name &P:0 Load) (Name &va:0 Load) Store)) (Name &vb:0 Load) None) (If (Compare (Name &sa:0 Load) (list Eq) (list (Name &sb:0 Load))) (/seq (AugAssign (Subscript (Name &S:0 Load) (Name &vb:0 Load) Store) Add (Constant i1 None))) nil))) (Expr (Call (Attribute (Name &B:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) (If (Subscript (Name &alr:0 Load) (Name &va:0 Load) Load) (/seq (Assign (list (Subscript (Name &alr:0 Load) (Name &vb:0 Load) Store)) (Constant i1 None) None)) nil) (If (Subscript (Name &alr:0 Load) (Name &vb:0 Load) Load) (/seq (Assign (list (Subscript (Name &alr:0 Load) (Name &va:0 Load) Store)) (Constant i1 None) None)) nil)))) (/seq (Assign (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Store)) (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Load)) nil) None) (Expr (Call (Attribute (Name &B:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))))) (/seq (If (Compare (Subscript (Name &K:0 Load) (Name &b:0 Load) Load) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Name &vb:0 Store) (Subscript (Name &K:0 Load) (Name &a:0 Load) Store)) (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Load)) nil) None) (Expr (Call (Attribute (Name &B:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))) (/seq (Assign (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Store)) (Name &R:0 Load) None) (Assign (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Store)) (Name &R:0 Load) None) (AugAssign (Name &R:0 Store) Add (Constant i1 None)) (Expr (Call (Attribute (Name &B:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))))))) nil None) (Expr (Call (Attribute (Name &B:0 Load) s_sort Load) nil nil)) (Assign (list (Name &s:0 Store)) (Call (Name g_len Load) (list (Name &B:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Name &s:0 Load) (Name &M:0 Load)) nil) (Name &s:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &B:0 Load)) nil)) nil)) nil))) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:4 Load)) nil) (list (comprehension (Name &i:4 Store) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &l:0 Store)) (List nil Load) None) (Assign (list (Name &d1:0 Store)) (Dict nil nil) None) (Assign (list (Name &a:0 Store)) (List nil Load) None) (Assign (list (Name &p:0 Store)) (ListComp (Name &i:1 Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) nil i0))) None) (Assign (list (Name &r:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:5 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) nil i0))) None) (Assign (list (Name &mod:0 Store)) (fn_1) None) (FunctionDef &find:0 (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (/seq (While (Compare (Subscript (Name &p:0 Load) (Name &x:2 Load) Load) (list NotEq) (list (Name &x:2 Load))) (/seq (Assign (list (Name &x:2 Store)) (Subscript (Name &p:0 Load) (Name &x:2 Load) Load) None)) nil) (Return (Name &x:2 Load))) nil None None) (FunctionDef &power:0 (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &f:3 Store)) (Constant i1 None) None) (Assign (list (Name &ct:3 Store)) (Constant i2 None) None) (While (Name &x:3 Load) (/seq (If (Compare (BinOp (Name &x:3 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &f:3 Store)) (BinOp (Name &f:3 Load) Mult (Name &ct:3 Load)) None) (AugAssign (Name &f:3 Store) Mod (Name &mod:0 Load))) nil) (Assign (list (Name &ct:3 Store)) (BinOp (Name &ct:3 Load) Mult (Name &ct:3 Load)) None) (AugAssign (Name &ct:3 Store) Mod (Name &mod:0 Load)) (AugAssign (Name &x:3 Store) FloorDiv (Constant i2 None))) nil) (Return (Name &f:3 Load))) nil None None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &x:0 Store)) (Subscript (ListComp (BinOp (Call (Name g_int Load) (list (Name &j:6 Load)) nil) Sub (Constant i1 None)) (list (comprehension (Name &j:6 Store) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0))) (Slice (Constant i1 None) None None) Load) None) (If (Compare (Call (Name g_len Load) (list (Name &x:0 Load)) nil) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Subscript (Name &x:0 Load) (Constant i0 None) Store)) (Call (Name &find:0 Load) (list (Subscript (Name &x:0 Load) (Constant i0 None) Load)) nil) None) (If (Compare (Call (Attribute (Name &d1:0 Load) s_get Load) (list (Subscript (Name &x:0 Load) (Constant i0 None) Load) (Constant i0 None)) nil) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (Name &i:0 Load)) nil)) (Assign (list (Subscript (Name &d1:0 Load) (Subscript (Name &x:0 Load) (Constant i0 None) Load) Store)) (Constant i1 None) None)) nil)) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Tuple (list (Call (Name &find:0 Load) (list (Subscript (Name &x:0 Load) (Constant i0 None) Load)) nil) (Call (Name &find:0 Load) (list (Subscript (Name &x:0 Load) (Constant i1 None) Load)) nil)) Load) None) (If (BoolOp And (list (Compare (Call (Attribute (Name &d1:0 Load) s_get Load) (list (Name &u:0 Load) (Constant i0 None)) nil) (list Eq) (list (Constant i1 None))) (Compare (Call (Attribute (Name &d1:0 Load) s_get Load) (list (Name &v:0 Load) (Constant i0 None)) nil) (list Eq) (list (Constant i1 None))))) (/seq Continue) (/seq (If (Compare (Name &u:0 Load) (list Eq) (list (Name &v:0 Load))) (/seq Continue) (/seq (If (Compare (Call (Attribute (Name &d1:0 Load) s_get Load) (list (Name &u:0 Load) (Constant i0 None)) nil) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Subscript (Name &d1:0 Load) (Name &v:0 Load) Store)) (Constant i1 None) None) (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (Name &i:0 Load)) nil))) (/seq (If (Compare (Call (Attribute (Name &d1:0 Load) s_get Load) (list (Name &v:0 Load) (Constant i0 None)) nil) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Subscript (Name &d1:0 Load) (Name &u:0 Load) Store)) (Constant i1 None) None) (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (Name &i:0 Load)) nil))) (/seq (Assign (list (Name &px:0 Store)) (Name &u:0 Load) None) (Assign (list (Name &py:0 Store)) (Name &v:0 Load) None) (If (Compare (Subscript (Name &r:0 Load) (Name &px:0 Load) Load) (list Gt) (list (Subscript (Name &r:0 Load) (Name &py:0 Load) Load))) (/seq (Assign (list (Subscript (Name &p:0 Load) (Name &py:0 Load) Store)) (Name &px:0 Load) None)) (/seq (If (Compare (Subscript (Name &r:0 Load) (Name &px:0 Load) Load) (list Lt) (list (Subscript (Name &r:0 Load) (Name &py:0 Load) Load))) (/seq (Assign (list (Subscript (Name &p:0 Load) (Name &px:0 Load) Store)) (Name &py:0 Load) None)) (/seq (Assign (list (Subscript (Name &p:0 Load) (Name &py:0 Load) Store)) (Name &px:0 Load) None) (AugAssign (Subscript (Name &r:0 Load) (Name &px:0 Load) Store) Add (Constant i1 None)))))) (Expr (Call (Attribute (Name &l:0 Load) s_append Load) (list (Name &i:0 Load)) nil))))))))))))) nil None) (Expr (Call (Attribute (Name g_stdout Load) s_write Load) (list (BinOp (BinOp (BinOp (Call (Name g_str Load) (list (Call (Name &power:0 Load) (list (Call (Name g_len Load) (list (Name &l:0 Load)) nil)) nil)) nil) Add (Constant s-WzMyXQ== None)) Add (Call (Name g_str Load) (list (Call (Name g_len Load) (list (Name &l:0 Load)) nil)) nil)) Add (Constant s-WzEwXQ== None))) nil)) (For (Name &i:0 Store) (Name &l:0 Load) (/seq (Expr (Call (Attribute (Name g_stdout Load) s_write Load) (list (BinOp (Call (Name g_str Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil) Add (Constant s-WzMyXQ== None))) nil))) nil None)) nil)",
            "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (ClassDef &UF:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &N:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_par Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &N:2 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:2 Load) s_sz Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &N:2 Load)) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &x:3 Load) Load) (list NotEq) (list (Name &x:3 Load))) (/seq (Assign (list (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &x:3 Load) Store)) (Call (Attribute (Name &self:3 Load) s_find Load) (list (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &x:3 Load) Load)) nil) None)) nil) (Return (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &x:3 Load) Load))) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &self:4 None None) (arg &x:4 None None) (arg &y:4 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &xr:4 Store) (Name &yr:4 Store)) Store)) (Tuple (list (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &x:4 Load)) nil) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &y:4 Load)) nil)) Load) None) (If (Compare (Name &xr:4 Load) (list Eq) (list (Name &yr:4 Load))) (/seq (Return (Constant False None))) nil) (If (Compare (Subscript (Attribute (Name &self:4 Load) s_sz Load) (Name &xr:4 Load) Load) (list Lt) (list (Subscript (Attribute (Name &self:4 Load) s_sz Load) (Name &yr:4 Load) Load))) (/seq (Assign (list (Tuple (list (Name &xr:4 Store) (Name &yr:4 Store)) Store)) (Tuple (list (Name &yr:4 Load) (Name &xr:4 Load)) Load) None)) nil) (Assign (list (Subscript (Attribute (Name &self:4 Load) s_par Load) (Name &yr:4 Load) Store)) (Name &xr:4 Load) None) (AugAssign (Subscript (Attribute (Name &self:4 Load) s_sz Load) (Name &xr:4 Load) Store) Add (Subscript (Attribute (Name &self:4 Load) s_sz Load) (Name &yr:4 Load) Load)) (Return (Constant True None))) nil None None) (FunctionDef &size:1 (arguments nil (list (arg &self:5 None None) (arg &x:5 None None)) None nil nil None nil) (/seq (Return (Subscript (Attribute (Name &self:5 Load) s_sz Load) (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &x:5 Load)) nil) Load))) nil None None) (FunctionDef &connected:1 (arguments nil (list (arg &self:6 None None) (arg &x:6 None None) (arg &y:6 None None)) None nil nil None nil) (/seq (Return (Compare (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &x:6 Load)) nil) (list Eq) (list (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &y:6 Load)) nil))))) nil None None)) nil) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil)) nil) None) (Assign (list (Name &cur_count:0 Store)) (Constant i1 None) None) (Assign (list (Name &cur_lst:0 Store)) (List nil Load) None) (Assign (list (Name &uf:0 Store)) (Call (Name &UF:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i2 None))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &bit_lst:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil)) nil) None) (Assign (list (Name &bit1:0 Store)) (Subscript (Name &bit_lst:0 Load) (Constant i1 None) Load) None) (Assign (list (Name &bit2:0 Store)) (BinOp (Name &m:0 Load) Add (Constant i1 None)) None) (If (Compare (Subscript (Name &bit_lst:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &bit2:0 Store)) (Subscript (Name &bit_lst:0 Load) (Constant i2 None) Load) None)) nil) (If (Call (Attribute (Name &uf:0 Load) s_union Load) (list (Name &bit1:0 Load) (Name &bit2:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &cur_lst:0 Load) s_append Load) (list (Call (Name g_str Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) nil)) (AugAssign (Name &cur_count:0 Store) Mult (Constant i2 None)) (AugAssign (Name &cur_count:0 Store) Mod (fn_1))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Name &cur_count:0 Load) (Call (Name g_len Load) (list (Name &cur_lst:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Name &cur_lst:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load) None) (FunctionDef &_find:0 (arguments nil (list (arg &s:1 None None) (arg &u:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &p:1 Store)) (List nil Load) None) (While (Compare (Subscript (Name &s:1 Load) (Name &u:1 Load) Load) (list NotEq) (list (Name &u:1 Load))) (/seq (Expr (Call (Attribute (Name &p:1 Load) s_append Load) (list (Name &u:1 Load)) nil)) (Assign (list (Name &u:1 Store)) (Subscript (Name &s:1 Load) (Name &u:1 Load) Load) None)) nil) (For (Name &v:1 Store) (Name &p:1 Load) (/seq (Assign (list (Subscript (Name &s:1 Load) (Name &v:1 Load) Store)) (Name &u:1 Load) None)) nil None) (Return (Name &u:1 Load))) nil None None) (FunctionDef &_union:0 (arguments nil (list (arg &s:2 None None) (arg &u:2 None None) (arg &v:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &su:2 Store) (Name &sv:2 Store)) Store)) (Tuple (list (Call (Name &_find:0 Load) (list (Name &s:2 Load) (Name &u:2 Load)) nil) (Call (Name &_find:0 Load) (list (Name &s:2 Load) (Name &v:2 Load)) nil)) Load) None) (If (Compare (Name &su:2 Load) (list NotEq) (list (Name &sv:2 Load))) (/seq (Assign (list (Subscript (Name &s:2 Load) (Name &su:2 Load) Store)) (Name &sv:2 Load) None)) nil)) nil None None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Tuple (list (Name &s:0 Store) (Name &res:0 Store)) Store)) (Tuple (list (Call (Name g_list Load) (list (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)) nil) (List nil Load)) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &p:0 Store)) (Call (Name g_list Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Subscript (Name &p:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Tuple (list (Constant i0 None) (Subscript (Name &p:0 Load) (Constant i1 None) Load)) Load) None)) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Tuple (list (Subscript (Name &p:0 Load) (Constant i1 None) Load) (Subscript (Name &p:0 Load) (Constant i2 None) Load)) Load) None))) (Assign (list (Tuple (list (Name &su:0 Store) (Name &sv:0 Store)) Store)) (Tuple (list (Call (Name &_find:0 Load) (list (Name &s:0 Load) (Name &u:0 Load)) nil) (Call (Name &_find:0 Load) (list (Name &s:0 Load) (Name &v:0 Load)) nil)) Load) None) (If (Compare (Name &su:0 Load) (list NotEq) (list (Name &sv:0 Load))) (/seq (Expr (Call (Name &_union:0 Load) (list (Name &s:0 Load) (Name &su:0 Load) (Name &sv:0 Load)) nil)) (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &res:0 Load)) nil) (fn_1)) nil) (Call (Name g_len Load) (list (Name &res:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Starred (Name &res:0 Load) Load)) nil))) nil)",
            "(Module (/seq (ClassDef &UnionFind:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_parent Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:2 Load)) nil)) nil) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:3 None None) (arg &a:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &acopy:3 Store)) (Name &a:3 Load) None) (While (Compare (Name &a:3 Load) (list NotEq) (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load))) (/seq (Assign (list (Name &a:3 Store)) (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load) None)) nil) (While (Compare (Name &acopy:3 Load) (list NotEq) (list (Name &a:3 Load))) (/seq (Assign (list (Tuple (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Store) (Name &acopy:3 Store)) Store)) (Tuple (list (Name &a:3 Load) (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Load)) Load) None)) nil) (Return (Name &a:3 Load))) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &self:4 None None) (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &b:4 Load)) nil) Store)) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &a:4 Load)) nil) None)) nil None None)) nil) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &UF:0 Store)) (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &MOD:0 Store)) (fn_1) None) (Assign (list (Name &out:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Call (Name g_len Load) (list (Name &l:0 Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &u:0 Store)) (Constant i0 None) None) (Assign (list (Name &v:0 Store)) (Subscript (Name &l:0 Load) (Constant i1 None) Load) None)) (/seq (Assign (list (Tuple (list (Name &_:0 Store) (Name &u:0 Store) (Name &v:0 Store)) Store)) (Name &l:0 Load) None))) (Assign (list (Name &uu:0 Store)) (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &u:0 Load)) nil) None) (Assign (list (Name &vv:0 Store)) (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &v:0 Load)) nil) None) (If (Compare (Name &uu:0 Load) (list NotEq) (list (Name &vv:0 Load))) (/seq (Expr (Call (Attribute (Name &UF:0 Load) s_union Load) (list (Name &uu:0 Load) (Name &vv:0 Load)) nil)) (Expr (Call (Attribute (Name &out:0 Load) s_append Load) (list (Name &i:0 Load)) nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &out:0 Load)) nil) (Name &MOD:0 Load)) nil) (Call (Name g_len Load) (list (Name &out:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &out:0 Load)) nil)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Tuple (list (Name &N:0 Store) (Name &M:0 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &mod:0 Store)) (fn_1) None) (Assign (list (Name &base:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &M:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &e:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (BinOp (Name &M:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (Assign (list (Name &res:0 Store)) (List nil Load) None) (ClassDef &UnionFind:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_n Store)) (Name &n:3 Load) None) (Assign (list (Attribute (Name &self:3 Load) s_root Store)) (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None) (Assign (list (Attribute (Name &self:3 Load) s_rnk Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None)) nil None None) (FunctionDef &Find_Root:1 (arguments nil (list (arg &self:4 None None) (arg &x:4 None None)) None nil nil None nil) (/seq (If (Compare (Subscript (Attribute (Name &self:4 Load) s_root Load) (Name &x:4 Load) Load) (list Lt) (list (Constant i0 None))) (/seq (Return (Name &x:4 Load))) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s_root Load) (Name &x:4 Load) Store)) (Call (Attribute (Name &self:4 Load) s_Find_Root Load) (list (Subscript (Attribute (Name &self:4 Load) s_root Load) (Name &x:4 Load) Load)) nil) None) (Return (Subscript (Attribute (Name &self:4 Load) s_root Load) (Name &x:4 Load) Load))))) nil None None) (FunctionDef &Unite:1 (arguments nil (list (arg &self:5 None None) (arg &x:5 None None) (arg &y:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &x:5 Store)) (Call (Attribute (Name &self:5 Load) s_Find_Root Load) (list (Name &x:5 Load)) nil) None) (Assign (list (Name &y:5 Store)) (Call (Attribute (Name &self:5 Load) s_Find_Root Load) (list (Name &y:5 Load)) nil) None) (If (Compare (Name &x:5 Load) (list Eq) (list (Name &y:5 Load))) (/seq (Return None)) (/seq (If (Compare (Subscript (Attribute (Name &self:5 Load) s_rnk Load) (Name &x:5 Load) Load) (list Gt) (list (Subscript (Attribute (Name &self:5 Load) s_rnk Load) (Name &y:5 Load) Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:5 Load) s_root Load) (Name &x:5 Load) Store) Add (Subscript (Attribute (Name &self:5 Load) s_root Load) (Name &y:5 Load) Load)) (Assign (list (Subscript (Attribute (Name &self:5 Load) s_root Load) (Name &y:5 Load) Store)) (Name &x:5 Load) None)) (/seq (AugAssign (Subscript (Attribute (Name &self:5 Load) s_root Load) (Name &y:5 Load) Store) Add (Subscript (Attribute (Name &self:5 Load) s_root Load) (Name &x:5 Load) Load)) (Assign (list (Subscript (Attribute (Name &self:5 Load) s_root Load) (Name &x:5 Load) Store)) (Name &y:5 Load) None) (If (Compare (Subscript (Attribute (Name &self:5 Load) s_rnk Load) (Name &x:5 Load) Load) (list Eq) (list (Subscript (Attribute (Name &self:5 Load) s_rnk Load) (Name &y:5 Load) Load))) (/seq (AugAssign (Subscript (Attribute (Name &self:5 Load) s_rnk Load) (Name &y:5 Load) Store) Add (Constant i1 None))) nil)))))) nil None None) (FunctionDef &isSameGroup:1 (arguments nil (list (arg &self:6 None None) (arg &x:6 None None) (arg &y:6 None None)) None nil nil None nil) (/seq (Return (Compare (Call (Attribute (Name &self:6 Load) s_Find_Root Load) (list (Name &x:6 Load)) nil) (list Eq) (list (Call (Attribute (Name &self:6 Load) s_Find_Root Load) (list (Name &y:6 Load)) nil))))) nil None None) (FunctionDef &Count:1 (arguments nil (list (arg &self:7 None None) (arg &x:7 None None)) None nil nil None nil) (/seq (Return (UnaryOp USub (Subscript (Attribute (Name &self:7 Load) s_root Load) (Call (Attribute (Name &self:7 Load) s_Find_Root Load) (list (Name &x:7 Load)) nil) Load)))) nil None None)) nil) (Assign (list (Name &uf:0 Store)) (Call (Name &UnionFind:0 Load) (list (Name &M:0 Load)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &N:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Subscript (Name &a:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (Constant i0 None)) nil))) nil) (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Subscript (Name &a:0 Load) (Slice (Constant i1 None) None None) Load) None) (If (Call (Attribute (Name &uf:0 Load) s_isSameGroup Load) (list (Name &u:0 Load) (Name &v:0 Load)) nil) (/seq Continue) (/seq (Expr (Call (Attribute (Name &uf:0 Load) s_Unite Load) (list (Name &u:0 Load) (Name &v:0 Load)) nil)) (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (Name &i:0 Load)) nil))))) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &res:0 Load)) nil) (Name &mod:0 Load)) nil) (Call (Name g_len Load) (list (Name &res:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Starred (Name &res:0 Load) Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &mod:0 Store)) (fn_1) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &Group:0 Store)) (ListComp (Name &i:1 Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (Assign (list (Name &GroupOne:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &m:0 Load) Add (Constant i1 None))) None) (Assign (list (Name &Nodes:0 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (BinOp (Name &m:0 Load) Add (Constant i1 None))) None) (FunctionDef &find:0 (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (/seq (While (Compare (Subscript (Name &Group:0 Load) (Name &x:2 Load) Load) (list NotEq) (list (Name &x:2 Load))) (/seq (Assign (list (Name &x:2 Store)) (Subscript (Name &Group:0 Load) (Name &x:2 Load) Load) None)) nil) (Return (Name &x:2 Load))) nil None None) (FunctionDef &Union:0 (arguments nil (list (arg &x:3 None None) (arg &y:3 None None)) None nil nil None nil) (/seq (If (Compare (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) (list NotEq) (list (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil))) (/seq (If (Compare (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Load) (list Lt) (list (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Load))) (/seq (AugAssign (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Store) Add (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Load)) (Assign (list (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Store)) (Constant i0 None) None) (If (BoolOp Or (list (Compare (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Load) (list Eq) (list (Constant i1 None))) (Compare (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Load) (list Eq) (list (Constant i1 None))))) (/seq (Assign (list (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Store)) (Constant i1 None) None) (Assign (list (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Store)) (Constant i1 None) None)) nil) (Assign (list (Subscript (Name &Group:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Store)) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) None)) (/seq (AugAssign (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Store) Add (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Load)) (Assign (list (Subscript (Name &Nodes:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Store)) (Constant i0 None) None) (If (BoolOp Or (list (Compare (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Load) (list Eq) (list (Constant i1 None))) (Compare (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Load) (list Eq) (list (Constant i1 None))))) (/seq (Assign (list (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) Store)) (Constant i1 None) None) (Assign (list (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Store)) (Constant i1 None) None)) nil) (Assign (list (Subscript (Name &Group:0 Load) (Call (Name &find:0 Load) (list (Name &y:3 Load)) nil) Store)) (Call (Name &find:0 Load) (list (Name &x:3 Load)) nil) None)))) nil)) nil None None) (Assign (list (Name &ANS:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &V:0 Store)) (Call (Name g_tuple Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Subscript (Name &V:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &V:0 Load) (Constant i1 None) Load) None) (If (Compare (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &x:0 Load)) nil) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &ANS:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) (Assign (list (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &x:0 Load)) nil) Store)) (Constant i1 None) None)) (/seq Continue))) (/seq (Assign (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store)) (Tuple (list (Subscript (Name &V:0 Load) (Constant i1 None) Load) (Subscript (Name &V:0 Load) (Constant i2 None) Load)) Load) None) (If (BoolOp Or (list (Compare (Call (Name &find:0 Load) (list (Name &x:0 Load)) nil) (list Eq) (list (Call (Name &find:0 Load) (list (Name &y:0 Load)) nil))) (BoolOp And (list (Compare (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &x:0 Load)) nil) Load) (list Eq) (list (Constant i1 None))) (Compare (Subscript (Name &GroupOne:0 Load) (Call (Name &find:0 Load) (list (Name &y:0 Load)) nil) Load) (list Eq) (list (Constant i1 None))))))) (/seq Continue) (/seq (Expr (Call (Name &Union:0 Load) (list (Name &x:0 Load) (Name &y:0 Load)) nil)) (Expr (Call (Attribute (Name &ANS:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))))))) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &ANS:0 Load)) nil) (Name &mod:0 Load)) nil) (Call (Name g_len Load) (list (Name &ANS:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Starred (Name &ANS:0 Load) Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &readline:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (ClassDef &UF:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &num:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_par Store)) (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &num:2 Load)) None) (Assign (list (Attribute (Name &self:2 Load) s_color Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &num:2 Load)) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &x:3 Load) Load) (list Lt) (list (Constant i0 None))) (/seq (Return (Name &x:3 Load))) (/seq (Assign (list (Name &stack:3 Store)) (List nil Load) None) (While (Compare (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &x:3 Load) Load) (list GtE) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &stack:3 Load) s_append Load) (list (Name &x:3 Load)) nil)) (Assign (list (Name &x:3 Store)) (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &x:3 Load) Load) None)) nil) (For (Name &xi:3 Store) (Name &stack:3 Load) (/seq (Assign (list (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &xi:3 Load) Store)) (Name &x:3 Load) None)) nil None) (Return (Name &x:3 Load))))) nil None None) (FunctionDef &col:1 (arguments nil (list (arg &self:4 None None) (arg &x:4 None None)) None nil nil None nil) (/seq (Return (Subscript (Attribute (Name &self:4 Load) s_color Load) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &x:4 Load)) nil) Load))) nil None None) (FunctionDef &paint:1 (arguments nil (list (arg &self:5 None None) (arg &x:5 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:5 Load) s_color Load) (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &x:5 Load)) nil) Store)) (Constant i1 None) None)) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &self:6 None None) (arg &x:6 None None) (arg &y:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &rx:6 Store)) (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &x:6 Load)) nil) None) (Assign (list (Name &ry:6 Store)) (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &y:6 Load)) nil) None) (If (Compare (Name &rx:6 Load) (list NotEq) (list (Name &ry:6 Load))) (/seq (If (Compare (Subscript (Attribute (Name &self:6 Load) s_par Load) (Name &rx:6 Load) Load) (list Gt) (list (Subscript (Attribute (Name &self:6 Load) s_par Load) (Name &ry:6 Load) Load))) (/seq (Assign (list (Tuple (list (Name &rx:6 Store) (Name &ry:6 Store)) Store)) (Tuple (list (Name &ry:6 Load) (Name &rx:6 Load)) Load) None)) nil) (AugAssign (Subscript (Attribute (Name &self:6 Load) s_par Load) (Name &rx:6 Load) Store) Add (Subscript (Attribute (Name &self:6 Load) s_par Load) (Name &ry:6 Load) Load)) (Assign (list (Subscript (Attribute (Name &self:6 Load) s_par Load) (Name &ry:6 Load) Store)) (Name &rx:6 Load) None) (AugAssign (Subscript (Attribute (Name &self:6 Load) s_color Load) (Name &rx:6 Load) Store) BitOr (Subscript (Attribute (Name &self:6 Load) s_color Load) (Name &ry:6 Load) Load)) (Return (Constant True None))) nil) (Return (Constant False None))) nil None None)) nil) (Assign (list (Tuple (list (Name &N:0 Store) (Name &M:0 Store)) Store)) (fn_2 &readline:0) None) (Assign (list (Name &MOD:0 Store)) (fn_1) None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (Assign (list (Name &T:0 Store)) (Call (Name &UF:0 Load) (list (Name &M:0 Load)) nil) None) (For (Name &m:0 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Starred (Name &x:0 Store) Store)) Store)) (fn_2 &readline:0) None) (If (Compare (Name &k:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &u:0 Store)) (BinOp (Subscript (Name &x:0 Load) (Constant i0 None) Load) Sub (Constant i1 None)) None) (If (UnaryOp Not (Call (Attribute (Name &T:0 Load) s_col Load) (list (Name &u:0 Load)) nil)) (/seq (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)) (Expr (Call (Attribute (Name &T:0 Load) s_paint Load) (list (Name &u:0 Load)) nil))) nil)) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Tuple (list (BinOp (Subscript (Name &x:0 Load) (Constant i0 None) Load) Sub (Constant i1 None)) (BinOp (Subscript (Name &x:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))) Load) None) (If (BoolOp And (list (Call (Attribute (Name &T:0 Load) s_col Load) (list (Name &u:0 Load)) nil) (Call (Attribute (Name &T:0 Load) s_col Load) (list (Name &v:0 Load)) nil))) (/seq Continue) nil) (If (Call (Attribute (Name &T:0 Load) s_union Load) (list (Name &u:0 Load) (Name &v:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil))) nil)))) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &ans:0 Load)) nil) (Name &MOD:0 Load)) nil) (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &ans:0 Load)) nil)) nil)) nil))) nil)",
            "(Module (/seq (ClassDef &UnionFindVerSize:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &N:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s__parent Store)) (ListComp (Name &n:9 Load) (list (comprehension (Name &n:9 Store) (Call (Name g_range Load) (list (Constant i0 None) (Name &N:2 Load)) nil) nil i0))) None) (Assign (list (Attribute (Name &self:2 Load) s__size Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &N:2 Load)) None) (Assign (list (Attribute (Name &self:2 Load) s_source Store)) (BinOp (List (list (Constant False None)) Load) Mult (Name &N:2 Load)) None) (Assign (list (Attribute (Name &self:2 Load) s_group Store)) (Name &N:2 Load) None)) nil None None) (FunctionDef &find_root:1 (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s__parent Load) (Name &x:3 Load) Load) (list Eq) (list (Name &x:3 Load))) (/seq (Return (Name &x:3 Load))) nil) (Assign (list (Subscript (Attribute (Name &self:3 Load) s__parent Load) (Name &x:3 Load) Store)) (Call (Attribute (Name &self:3 Load) s_find_root Load) (list (Subscript (Attribute (Name &self:3 Load) s__parent Load) (Name &x:3 Load) Load)) nil) None) (Assign (list (Name &stack:3 Store)) (List (list (Name &x:3 Load)) Load) None) (While (Compare (Subscript (Attribute (Name &self:3 Load) s__parent Load) (Subscript (Name &stack:3 Load) (UnaryOp USub (Constant i1 None)) Load) Load) (list NotEq) (list (Subscript (Name &stack:3 Load) (UnaryOp USub (Constant i1 None)) Load))) (/seq (Expr (Call (Attribute (Name &stack:3 Load) s_append Load) (list (Subscript (Attribute (Name &self:3 Load) s__parent Load) (Subscript (Name &stack:3 Load) (UnaryOp USub (Constant i1 None)) Load) Load)) nil))) nil) (For (Name &v:3 Store) (Name &stack:3 Load) (/seq (Assign (list (Subscript (Attribute (Name &self:3 Load) s__parent Load) (Name &v:3 Load) Store)) (Subscript (Name &stack:3 Load) (UnaryOp USub (Constant i1 None)) Load) None)) nil None) (Return (Subscript (Attribute (Name &self:3 Load) s__parent Load) (Name &x:3 Load) Load))) nil None None) (FunctionDef &unite:1 (arguments nil (list (arg &self:4 None None) (arg &x:4 None None) (arg &y:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &gx:4 Store)) (Call (Attribute (Name &self:4 Load) s_find_root Load) (list (Name &x:4 Load)) nil) None) (Assign (list (Name &gy:4 Store)) (Call (Attribute (Name &self:4 Load) s_find_root Load) (list (Name &y:4 Load)) nil) None) (If (Compare (Name &gx:4 Load) (list Eq) (list (Name &gy:4 Load))) (/seq (Return None)) nil) (AugAssign (Attribute (Name &self:4 Load) s_group Store) Sub (Constant i1 None)) (If (Compare (Subscript (Attribute (Name &self:4 Load) s__size Load) (Name &gx:4 Load) Load) (list Lt) (list (Subscript (Attribute (Name &self:4 Load) s__size Load) (Name &gy:4 Load) Load))) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s__parent Load) (Name &gx:4 Load) Store)) (Name &gy:4 Load) None) (AugAssign (Subscript (Attribute (Name &self:4 Load) s__size Load) (Name &gy:4 Load) Store) Add (Subscript (Attribute (Name &self:4 Load) s__size Load) (Name &gx:4 Load) Load)) (AugAssign (Subscript (Attribute (Name &self:4 Load) s_source Load) (Name &gy:4 Load) Store) BitOr (Subscript (Attribute (Name &self:4 Load) s_source Load) (Name &gx:4 Load) Load))) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s__parent Load) (Name &gy:4 Load) Store)) (Name &gx:4 Load) None) (AugAssign (Subscript (Attribute (Name &self:4 Load) s__size Load) (Name &gx:4 Load) Store) Add (Subscript (Attribute (Name &self:4 Load) s__size Load) (Name &gy:4 Load) Load)) (AugAssign (Subscript (Attribute (Name &self:4 Load) s_source Load) (Name &gx:4 Load) Store) BitOr (Subscript (Attribute (Name &self:4 Load) s_source Load) (Name &gy:4 Load) Load))))) nil None None) (FunctionDef &add_size:1 (arguments nil (list (arg &self:5 None None) (arg &x:5 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:5 Load) s_source Load) (Call (Attribute (Name &self:5 Load) s_find_root Load) (list (Name &x:5 Load)) nil) Store)) (Constant True None) None)) nil None None) (FunctionDef &get_size:1 (arguments nil (list (arg &self:6 None None) (arg &x:6 None None)) None nil nil None nil) (/seq (Return (Subscript (Attribute (Name &self:6 Load) s__size Load) (Call (Attribute (Name &self:6 Load) s_find_root Load) (list (Name &x:6 Load)) nil) Load))) nil None None) (FunctionDef &get_source:1 (arguments nil (list (arg &self:7 None None) (arg &x:7 None None)) None nil nil None nil) (/seq (Return (Subscript (Attribute (Name &self:7 Load) s_source Load) (Call (Attribute (Name &self:7 Load) s_find_root Load) (list (Name &x:7 Load)) nil) Load))) nil None None) (FunctionDef &is_same_group:1 (arguments nil (list (arg &self:8 None None) (arg &x:8 None None) (arg &y:8 None None)) None nil nil None nil) (/seq (Return (Compare (Call (Attribute (Name &self:8 Load) s_find_root Load) (list (Name &x:8 Load)) nil) (list Eq) (list (Call (Attribute (Name &self:8 Load) s_find_root Load) (list (Name &y:8 Load)) nil))))) nil None None)) nil) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load) None) (Assign (list (Tuple (list (Name &m:0 Store) (Name &n:0 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &uf:0 Store)) (Call (Name &UnionFindVerSize:0 Load) (list (Name &n:0 Load)) nil) None) (Assign (list (Name &S:0 Store)) (List nil Load) None) (Assign (list (Name &source:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Name &edge:0 Store)) (Call (Name g_tuple Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Subscript (Name &edge:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &v:0 Store)) (Subscript (Name &edge:0 Load) (Constant i1 None) Load) None) (If (UnaryOp Not (Call (Attribute (Name &uf:0 Load) s_get_source Load) (list (BinOp (Name &v:0 Load) Sub (Constant i1 None))) nil)) (/seq (Expr (Call (Attribute (Name &uf:0 Load) s_add_size Load) (list (BinOp (Name &v:0 Load) Sub (Constant i1 None))) nil)) (Expr (Call (Attribute (Name &S:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))) nil)) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Tuple (list (Subscript (Name &edge:0 Load) (Constant i1 None) Load) (Subscript (Name &edge:0 Load) (Constant i2 None) Load)) Load) None) (If (BoolOp And (list (UnaryOp Not (Call (Attribute (Name &uf:0 Load) s_is_same_group Load) (list (BinOp (Name &u:0 Load) Sub (Constant i1 None)) (BinOp (Name &v:0 Load) Sub (Constant i1 None))) nil)) (BoolOp Or (list (UnaryOp Not (Call (Attribute (Name &uf:0 Load) s_get_source Load) (list (BinOp (Name &u:0 Load) Sub (Constant i1 None))) nil)) (UnaryOp Not (Call (Attribute (Name &uf:0 Load) s_get_source Load) (list (BinOp (Name &v:0 Load) Sub (Constant i1 None))) nil)))))) (/seq (Expr (Call (Attribute (Name &uf:0 Load) s_unite Load) (list (BinOp (Name &u:0 Load) Sub (Constant i1 None)) (BinOp (Name &v:0 Load) Sub (Constant i1 None))) nil)) (Expr (Call (Attribute (Name &S:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))) nil)))) nil None) (Assign (list (Name &ans:0 Store)) (Constant i1 None) None) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (Assign (list (Name &mod:0 Store)) (fn_1) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Call (Attribute (Name &uf:0 Load) s_find_root Load) (list (Name &i:0 Load)) nil) (list Eq) (list (Name &i:0 Load))) (/seq (If (Call (Attribute (Name &uf:0 Load) s_get_source Load) (list (Name &i:0 Load)) nil) (/seq (AugAssign (Name &k:0 Store) Add (Call (Attribute (Name &uf:0 Load) s_get_size Load) (list (Name &i:0 Load)) nil))) (/seq (AugAssign (Name &k:0 Store) Add (BinOp (Call (Attribute (Name &uf:0 Load) s_get_size Load) (list (Name &i:0 Load)) nil) Sub (Constant i1 None)))))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Name &k:0 Load) (Name &mod:0 Load)) nil) (Call (Name g_len Load) (list (Name &S:0 Load)) nil)) nil)) (Expr (Call (Attribute (Name &S:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Starred (Name &S:0 Load) Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None) (alias g_io None) (alias g_os None))) (ImportFrom s_collections (list (alias g_deque None)) i0) (Try (/seq (Assign (list (Name &Z:0 Store)) (Attribute (Call (Attribute (Name g_io Load) s_BytesIO Load) (list (Call (Attribute (Name g_os Load) s_read Load) (list (Constant i0 None) (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil) s_st_size Load)) nil)) nil) s_readline Load) None)) (list (ExceptHandler None None (/seq (Assign (list (Name &Z:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_encode Load) nil nil)) None)))) nil nil) (Assign (list (Name &Y:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (fn_2 &Z:0)) None) (Assign (list (Name &M:0 Store)) (fn_1) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &N:0 Store)) Store)) (Call (Name &Y:0 Load) nil nil) None) (FunctionDef &path:0 (arguments nil (list (arg &R:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &H:1 Store)) (Call (Name g_deque Load) nil nil) None) (Expr (Call (Attribute (Name &H:1 Load) s_append Load) (list (Name &R:1 Load)) nil)) (While (Compare (Subscript (Name &P:0 Load) (Name &R:1 Load) Load) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Name &R:1 Store)) (Subscript (Name &P:0 Load) (Name &R:1 Load) Load) None) (Expr (Call (Attribute (Name &H:1 Load) s_append Load) (list (Name &R:1 Load)) nil)) (If (Compare (Call (Name g_len Load) (list (Name &H:1 Load)) nil) (list Gt) (list (Constant i2 None))) (/seq (Assign (list (Subscript (Name &P:0 Load) (Call (Attribute (Name &H:1 Load) s_popleft Load) nil nil) Store)) (Subscript (Name &H:1 Load) (UnaryOp USub (Constant i1 None)) Load) None)) nil)) nil) (Return (Name &R:1 Load))) nil None None) (Assign (list (Name &K:0 Store)) (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &N:0 Load)) None) (Assign (list (Name &P:0 Store)) (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &N:0 Load)) None) (Assign (list (Name &S:0 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &N:0 Load)) None) (Assign (list (Name &R:0 Store)) (Constant i0 None) None) (Assign (list (Name &B:0 Store)) (List nil Load) None) (Assign (list (Name &alr:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &k:0 Store)) (Tuple (list (Starred (Call (Name &Y:0 Load) nil nil) Load)) Load) None) (If (Compare (Subscript (Name &k:0 Load) (Constant i0 None) Load) (list Lt) (list (Constant i2 None))) (/seq (Assign (list (Name &a:0 Store)) (BinOp (Subscript (Name &k:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) None) (If (Compare (Subscript (Name &K:0 Load) (Name &a:0 Load) Load) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Name &v:0 Store)) (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Load)) nil) None) (If (UnaryOp Not (Subscript (Name &alr:0 Load) (Name &v:0 Load) Load)) (/seq (Assign (list (Subscript (Name &alr:0 Load) (Name &v:0 Load) Store)) (Constant i1 None) None)) (/seq Continue))) (/seq (Assign (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Store)) (Name &R:0 Load) None) (Assign (list (Name &v:0 Store)) (Name &R:0 Load) None) (Assign (list (Subscript (Name &alr:0 Load) (Name &R:0 Load) Store)) (Constant i1 None) None) (AugAssign (Name &R:0 Store) Add (Constant i1 None)))) (Expr (Call (Attribute (Name &B:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) Continue) nil) (Assign (list (Name &a:0 Store)) (BinOp (Subscript (Name &k:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) None) (Assign (list (Name &b:0 Store)) (BinOp (Subscript (Name &k:0 Load) (Constant i2 None) Load) Sub (Constant i1 None)) None) (If (Compare (Subscript (Name &K:0 Load) (Name &a:0 Load) Load) (list GtE) (list (Constant i0 None))) (/seq (If (Compare (Subscript (Name &K:0 Load) (Name &b:0 Load) Load) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Tuple (list (Name &va:0 Store) (Name &vb:0 Store)) Store)) (Tuple (list (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Load)) nil) (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Load)) nil)) Load) None) (If (BoolOp Or (list (Compare (Name &va:0 Load) (list Eq) (list (Name &vb:0 Load))) (BoolOp And (list (Subscript (Name &alr:0 Load) (Name &va:0 Load) Load) (Subscript (Name &alr:0 Load) (Name &vb:0 Load) Load))))) (/seq Pass) (/seq (Assign (list (Tuple (list (Name &sa:0 Store) (Name &sb:0 Store)) Store)) (Tuple (list (Subscript (Name &S:0 Load) (Name &va:0 Load) Load) (Subscript (Name &S:0 Load) (Name &vb:0 Load) Load)) Load) None) (If (Compare (Name &sa:0 Load) (list Gt) (list (Name &sb:0 Load))) (/seq (Assign (list (Subscript (Name &P:0 Load) (Name &vb:0 Load) Store)) (Name &va:0 Load) None)) (/seq (Assign (list (Subscript (Name &P:0 Load) (Name &va:0 Load) Store)) (Name &vb:0 Load) None) (If (Compare (Name &sa:0 Load) (list Eq) (list (Name &sb:0 Load))) (/seq (AugAssign (Subscript (Name &S:0 Load) (Name &vb:0 Load) Store) Add (Constant i1 None))) nil))) (Expr (Call (Attribute (Name &B:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) (If (Subscript (Name &alr:0 Load) (Name &va:0 Load) Load) (/seq (Assign (list (Subscript (Name &alr:0 Load) (Name &vb:0 Load) Store)) (Constant i1 None) None)) nil) (If (Subscript (Name &alr:0 Load) (Name &vb:0 Load) Load) (/seq (Assign (list (Subscript (Name &alr:0 Load) (Name &va:0 Load) Store)) (Constant i1 None) None)) nil)))) (/seq (Assign (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Store)) (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Load)) nil) None) (Expr (Call (Attribute (Name &B:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))))) (/seq (If (Compare (Subscript (Name &K:0 Load) (Name &b:0 Load) Load) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Name &vb:0 Store) (Subscript (Name &K:0 Load) (Name &a:0 Load) Store)) (Call (Name &path:0 Load) (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Load)) nil) None) (Expr (Call (Attribute (Name &B:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))) (/seq (Assign (list (Subscript (Name &K:0 Load) (Name &a:0 Load) Store)) (Name &R:0 Load) None) (Assign (list (Subscript (Name &K:0 Load) (Name &b:0 Load) Store)) (Name &R:0 Load) None) (AugAssign (Name &R:0 Store) Add (Constant i1 None)) (Expr (Call (Attribute (Name &B:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))))))) nil None) (Assign (list (Name &s:0 Store)) (Call (Name g_len Load) (list (Name &B:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Name &s:0 Load) (Name &M:0 Load)) nil) (Name &s:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &B:0 Load)) nil)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_io None))) (Import (list (alias g_os None))) (ImportFrom s_collections (list (alias g_Counter None) (alias g_defaultdict None) (alias g_deque None)) i0) (Assign (list (Name &MOD:0 Store)) (fn_1) None) (ClassDef &UnionFind:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &N:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_p Store)) (ListComp (UnaryOp USub (Constant i1 None)) (list (comprehension (Name &i:7 Store) (Call (Name g_range Load) (list (Name &N:3 Load)) nil) nil i0))) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:4 None None) (arg &i:4 None None)) None nil nil None nil) (/seq (If (Compare (Subscript (Attribute (Name &self:4 Load) s_p Load) (Name &i:4 Load) Load) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s_p Load) (Name &i:4 Load) Store)) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Subscript (Attribute (Name &self:4 Load) s_p Load) (Name &i:4 Load) Load)) nil) None) (Return (Subscript (Attribute (Name &self:4 Load) s_p Load) (Name &i:4 Load) Load))) (/seq (Return (Name &i:4 Load))))) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &self:5 None None) (arg &i:5 None None) (arg &j:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &root1:5 Store)) (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &j:5 Load)) nil) None) (Assign (list (Name &root2:5 Store)) (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &i:5 Load)) nil) None) (If (Compare (Name &root1:5 Load) (list Eq) (list (Name &root2:5 Load))) (/seq (Return None)) nil) (Assign (list (Name &size1:5 Store)) (UnaryOp USub (Subscript (Attribute (Name &self:5 Load) s_p Load) (Name &root1:5 Load) Load)) None) (Assign (list (Name &size2:5 Store)) (UnaryOp USub (Subscript (Attribute (Name &self:5 Load) s_p Load) (Name &root2:5 Load) Load)) None) (If (Compare (Name &size1:5 Load) (list Lt) (list (Name &size2:5 Load))) (/seq (Assign (list (Subscript (Attribute (Name &self:5 Load) s_p Load) (Name &root1:5 Load) Store)) (Name &root2:5 Load) None) (Assign (list (Subscript (Attribute (Name &self:5 Load) s_p Load) (Name &root2:5 Load) Store)) (UnaryOp USub (BinOp (Name &size1:5 Load) Add (Name &size2:5 Load))) None)) (/seq (Assign (list (Subscript (Attribute (Name &self:5 Load) s_p Load) (Name &root2:5 Load) Store)) (Name &root1:5 Load) None) (Assign (list (Subscript (Attribute (Name &self:5 Load) s_p Load) (Name &root1:5 Load) Store)) (UnaryOp USub (BinOp (Name &size1:5 Load) Add (Name &size2:5 Load))) None)))) nil None None) (FunctionDef &getComponentSize:1 (arguments nil (list (arg &self:6 None None) (arg &i:6 None None)) None nil nil None nil) (/seq (Return (UnaryOp USub (Subscript (Attribute (Name &self:6 Load) s_p Load) (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &i:6 Load)) nil) Load)))) nil None None)) nil) (FunctionDef &solve:0 (arguments nil (list (arg &N:2 None None) (arg &M:2 None None) (arg &vectors:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &uf:2 Store)) (Call (Name &UnionFind:0 Load) (list (BinOp (Name &M:2 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &DUMMY_COMP:2 Store)) (Name &M:2 Load) None) (Assign (list (Name &ans:2 Store)) (List nil Load) None) (For (Tuple (list (Name &i:2 Store) (Name &v:2 Store)) Store) (Call (Name g_enumerate Load) (list (Name &vectors:2 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Name &v:2 Load)) nil) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Tuple (list (Name &a:2 Store)) Store)) (Name &v:2 Load) None) (If (Compare (Call (Attribute (Name &uf:2 Load) s_find Load) (list (Name &a:2 Load)) nil) (list NotEq) (list (Call (Attribute (Name &uf:2 Load) s_find Load) (list (Name &DUMMY_COMP:2 Load)) nil))) (/seq (Expr (Call (Attribute (Name &uf:2 Load) s_union Load) (list (Name &a:2 Load) (Name &DUMMY_COMP:2 Load)) nil)) (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (Name &i:2 Load)) nil))) nil)) (/seq (Assert (Compare (Call (Name g_len Load) (list (Name &v:2 Load)) nil) (list Eq) (list (Constant i2 None))) None) (Assign (list (Tuple (list (Name &a:2 Store) (Name &b:2 Store)) Store)) (Name &v:2 Load) None) (If (Compare (Call (Attribute (Name &uf:2 Load) s_find Load) (list (Name &a:2 Load)) nil) (list NotEq) (list (Call (Attribute (Name &uf:2 Load) s_find Load) (list (Name &b:2 Load)) nil))) (/seq (Expr (Call (Attribute (Name &uf:2 Load) s_union Load) (list (Name &a:2 Load) (Name &b:2 Load)) nil)) (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (Name &i:2 Load)) nil))) nil)))) nil None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (Name &M:2 Load)) nil) (/seq (Expr (Call (Attribute (Name &uf:2 Load) s_find Load) (list (Name &i:2 Load)) nil))) nil None) (Assign (list (Name &T:2 Store)) (Call (Name g_pow Load) (list (Constant i2 None) (BinOp (Call (Attribute (Name &uf:2 Load) s_getComponentSize Load) (list (Name &DUMMY_COMP:2 Load)) nil) Sub (Constant i1 None)) (Name &MOD:0 Load)) nil) None) (AugAssign (Name &T:2 Store) Mod (Name &MOD:0 Load)) (Assign (list (Name &seen:2 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (Name &M:2 Load)) nil) (/seq (Assign (list (Name &comp:2 Store)) (Call (Attribute (Name &uf:2 Load) s_find Load) (list (Name &i:2 Load)) nil) None) (If (BoolOp And (list (Compare (Name &comp:2 Load) (list NotEq) (list (Call (Attribute (Name &uf:2 Load) s_find Load) (list (Name &DUMMY_COMP:2 Load)) nil))) (Compare (Name &comp:2 Load) (list NotIn) (list (Name &seen:2 Load))))) (/seq (AugAssign (Name &T:2 Store) Mult (Call (Name g_pow Load) (list (Constant i2 None) (BinOp (Call (Attribute (Name &uf:2 Load) s_getComponentSize Load) (list (Name &i:2 Load)) nil) Sub (Constant i1 None)) (Name &MOD:0 Load)) nil)) (AugAssign (Name &T:2 Store) Mod (Name &MOD:0 Load)) (Expr (Call (Attribute (Name &seen:2 Load) s_add Load) (list (Name &comp:2 Load)) nil))) nil)) nil None) (Return (BinOp (BinOp (BinOp (BinOp (Call (Name g_str Load) (list (Name &T:2 Load)) nil) Add (Constant s-WzMyXQ== None)) Add (Call (Name g_str Load) (list (Call (Name g_len Load) (list (Name &ans:2 Load)) nil)) nil)) Add (Constant s-WzEwXQ== None)) Add (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (GeneratorExp (Call (Name g_str Load) (list (BinOp (Name &i:10 Load) Add (Constant i1 None))) nil) (list (comprehension (Name &i:10 Store) (Name &ans:2 Load) nil i0)))) nil)))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Name &input:0 Store)) (Attribute (Call (Attribute (Name g_io Load) s_BytesIO Load) (list (Call (Attribute (Name g_os Load) s_read Load) (list (Constant i0 None) (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil) s_st_size Load)) nil)) nil) s_readline Load) None) (Assign (list (Name &TC:0 Store)) (Constant i1 None) None) (For (Name &tc:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &TC:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Tuple (list (Name &N:0 Store) (Name &M:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:8 Load)) nil) (list (comprehension (Name &x:8 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &vectors:0 Store)) (ListComp (Subscript (ListComp (BinOp (Call (Name g_int Load) (list (Name &x:11 Load)) nil) Sub (Constant i1 None)) (list (comprehension (Name &x:11 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) (Slice (Constant i1 None) None None) Load) (list (comprehension (Name &i:9 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) nil i0))) None) (Assign (list (Name &ans:0 Store)) (Call (Name &solve:0 Load) (list (Name &N:0 Load) (Name &M:0 Load) (Name &vectors:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil None)) nil)) nil)",
            "(Module (/seq (Import (list (alias g_os None))) (Import (list (alias g_sys None))) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name g_IOBase Load)) nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:6 None None) (arg &file:6 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:6 Load) s_newlines Store)) (Constant i0 None) None) (Assign (list (Attribute (Name &self:6 Load) s__fd Store)) (Call (Attribute (Name &file:6 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:6 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None) (Assign (list (Attribute (Name &self:6 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:6 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:6 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:6 Load) s_write Store)) (IfExp (Attribute (Name &self:6 Load) s_writable Load) (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:7 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:7 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:7 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:7 Load)) (/seq Break) nil) (Assign (list (Name &ptr:7 Store)) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_tell Load) nil nil) None) (fn_3 &ptr:7 &self:7 &b:7)) nil) (Assign (list (Attribute (Name &self:7 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:8 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:8 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:8 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:8 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:8 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:8 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:8 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:8 Load))) None) (Assign (list (Name &ptr:8 Store)) (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_tell Load) nil nil) None) (fn_3 &ptr:8 &self:8 &b:8)) nil) (AugAssign (Attribute (Name &self:8 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:9 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:9 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name g_os Load) s_write Load) (list (Attribute (Name &self:9 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name g_IOBase Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:10 None None) (arg &file:10 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:10 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:10 Load)) nil) None) (Assign (list (Attribute (Name &self:10 Load) s_flush Store)) (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:10 Load) s_writable Store)) (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:10 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:11 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:11 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:10 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:10 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)) None) (FunctionDef &RL:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &RLL:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (FunctionDef &N:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))) nil None None) (FunctionDef &S:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &print_list:0 (arguments nil (list (arg &l:3 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &l:3 Load)) nil)) nil)) nil))) nil None None) (FunctionDef &find:0 (arguments nil (list (arg &region:4 None None) (arg &u:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &path:4 Store)) (List nil Load) None) (While (Compare (Subscript (Name &region:4 Load) (Name &u:4 Load) Load) (list NotEq) (list (Name &u:4 Load))) (/seq (Expr (Call (Attribute (Name &path:4 Load) s_append Load) (list (Name &u:4 Load)) nil)) (Assign (list (Name &u:4 Store)) (Subscript (Name &region:4 Load) (Name &u:4 Load) Load) None)) nil) (For (Name &v:4 Store) (Name &path:4 Load) (/seq (Assign (list (Subscript (Name &region:4 Load) (Name &v:4 Load) Store)) (Name &u:4 Load) None)) nil None) (Return (Name &u:4 Load))) nil None None) (FunctionDef &union:0 (arguments nil (list (arg &region:5 None None) (arg &u:5 None None) (arg &v:5 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &u:5 Store) (Name &v:5 Store)) Store)) (Tuple (list (Call (Name &find:0 Load) (list (Name &region:5 Load) (Name &u:5 Load)) nil) (Call (Name &find:0 Load) (list (Name &region:5 Load) (Name &v:5 Load)) nil)) Load) None) (Assign (list (Subscript (Name &region:5 Load) (Name &u:5 Load) Store)) (Name &v:5 Load) None) (Return (Compare (Name &u:5 Load) (list NotEq) (list (Name &v:5 Load))))) nil None None) (Assign (list (Name &M:0 Store)) (fn_1) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (Call (Name &RL:0 Load) nil nil) None) (Assign (list (Name &region:0 Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)) nil) None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &s:0 Store)) (Call (Name &RLL:0 Load) nil nil) None) (Assign (list (Name &t:0 Store)) (IfExp (Compare (Subscript (Name &s:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i2 None))) (Subscript (Name &s:0 Load) (Constant i2 None) Load) (Constant i0 None)) None) (If (Call (Name &union:0 Load) (list (Name &region:0 Load) (Subscript (Name &s:0 Load) (Constant i1 None) Load) (Name &t:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &i:0 Load)) nil))) nil)) nil None) (Assign (list (Name &res:0 Store)) (Constant i1 None) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)) nil) (/seq (Assign (list (Name &res:0 Store)) (BinOp (BinOp (Name &res:0 Load) LShift (Constant i1 None)) Mod (Name &M:0 Load)) None)) nil None) (Expr (Call (Name g_print Load) (list (Name &res:0 Load) (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)) nil)) (Expr (Call (Name &print_list:0 Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_os None))) (Import (list (alias g_sys None))) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (ClassDef &UnionFind:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:5 None None) (arg &n:5 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:5 Load) s_parent Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:5 Load)) nil)) nil) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:6 None None) (arg &a:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &acopy:6 Store)) (Name &a:6 Load) None) (While (Compare (Name &a:6 Load) (list NotEq) (list (Subscript (Attribute (Name &self:6 Load) s_parent Load) (Name &a:6 Load) Load))) (/seq (Assign (list (Name &a:6 Store)) (Subscript (Attribute (Name &self:6 Load) s_parent Load) (Name &a:6 Load) Load) None)) nil) (While (Compare (Name &acopy:6 Load) (list NotEq) (list (Name &a:6 Load))) (/seq (Assign (list (Tuple (list (Subscript (Attribute (Name &self:6 Load) s_parent Load) (Name &acopy:6 Load) Store) (Name &acopy:6 Store)) Store)) (Tuple (list (Name &a:6 Load) (Subscript (Attribute (Name &self:6 Load) s_parent Load) (Name &acopy:6 Load) Load)) Load) None)) nil) (Return (Name &a:6 Load))) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &self:7 None None) (arg &a:7 None None) (arg &b:7 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:7 Load) s_parent Load) (Call (Attribute (Name &self:7 Load) s_find Load) (list (Name &b:7 Load)) nil) Store)) (Call (Attribute (Name &self:7 Load) s_find Load) (list (Name &a:7 Load)) nil) None)) nil None None)) nil) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &m:4 Store) (Name &n:4 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &ans:4 Store)) (Constant i0 None) None) (Assign (list (Name &ans2:4 Store)) (List nil Load) None) (Assign (list (Name &color:4 Store)) (Call (Name &UnionFind:0 Load) (list (BinOp (Name &n:4 Load) Add (Constant i1 None))) nil) None) (For (Name &i:4 Store) (Call (Name g_range Load) (list (Name &m:4 Load)) nil) (/seq (Assign (list (Name &t:4 Store)) (Call (Name g_list Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Subscript (Name &t:4 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None))) (/seq (If (Compare (Call (Attribute (Name &color:4 Load) s_find Load) (list (Name &n:4 Load)) nil) (list NotEq) (list (Call (Attribute (Name &color:4 Load) s_find Load) (list (BinOp (Subscript (Name &t:4 Load) (Constant i1 None) Load) Sub (Constant i1 None))) nil))) (/seq (Expr (Call (Attribute (Name &ans2:4 Load) s_append Load) (list (BinOp (Name &i:4 Load) Add (Constant i1 None))) nil)) (Expr (Call (Attribute (Name &color:4 Load) s_union Load) (list (Name &n:4 Load) (BinOp (Subscript (Name &t:4 Load) (Constant i1 None) Load) Sub (Constant i1 None))) nil))) nil)) (/seq (If (Compare (Call (Attribute (Name &color:4 Load) s_find Load) (list (BinOp (Subscript (Name &t:4 Load) (Constant i2 None) Load) Sub (Constant i1 None))) nil) (list NotEq) (list (Call (Attribute (Name &color:4 Load) s_find Load) (list (BinOp (Subscript (Name &t:4 Load) (Constant i1 None) Load) Sub (Constant i1 None))) nil))) (/seq (Expr (Call (Attribute (Name &ans2:4 Load) s_append Load) (list (BinOp (Name &i:4 Load) Add (Constant i1 None))) nil)) (Expr (Call (Attribute (Name &color:4 Load) s_union Load) (list (BinOp (Subscript (Name &t:4 Load) (Constant i2 None) Load) Sub (Constant i1 None)) (BinOp (Subscript (Name &t:4 Load) (Constant i1 None) Load) Sub (Constant i1 None))) nil))) nil)))) nil None) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (Call (Name g_str Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &ans2:4 Load)) nil) (fn_1)) nil)) nil) Add (Constant s-WzMyXQ== None)) Add (Call (Name g_str Load) (list (Call (Name g_len Load) (list (Name &ans2:4 Load)) nil)) nil))) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &ans2:4 Load)) nil)) nil)) nil))) nil None None) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name g_IOBase Load)) nil (/seq (Assign (list (Name &newlines:2 Store)) (Constant i0 None) None) (FunctionDef &__init__:2 (arguments nil (list (arg &self:8 None None) (arg &file:8 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:8 Load) s__fd Store)) (Call (Attribute (Name &file:8 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:8 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None) (Assign (list (Attribute (Name &self:8 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:8 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:8 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:8 Load) s_write Store)) (IfExp (Attribute (Name &self:8 Load) s_writable Load) (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:2 (arguments nil (list (arg &self:9 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:9 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:9 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:9 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:9 Load)) (/seq Break) nil) (Assign (list (Name &ptr:9 Store)) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_tell Load) nil nil) None) (fn_3 &ptr:9 &self:9 &b:9)) nil) (Assign (list (Attribute (Name &self:9 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:2 (arguments nil (list (arg &self:10 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:10 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:10 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:10 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:10 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:10 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:10 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:10 Load))) None) (Assign (list (Name &ptr:10 Store)) (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_tell Load) nil nil) None) (fn_3 &ptr:10 &self:10 &b:10)) nil) (AugAssign (Attribute (Name &self:10 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:2 (arguments nil (list (arg &self:11 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:11 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name g_os Load) s_write Load) (list (Attribute (Name &self:11 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name g_IOBase Load)) nil (/seq (FunctionDef &__init__:3 (arguments nil (list (arg &self:12 None None) (arg &file:12 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:12 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:12 Load)) nil) None) (Assign (list (Attribute (Name &self:12 Load) s_flush Store)) (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:12 Load) s_writable Store)) (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:12 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:13 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:13 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:12 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:12 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil)) None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Call (Name g_iter Load) (list (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_read Load) nil nil) s_splitlines Load) nil nil)) nil) s___next__ Load) None) (ClassDef &UnionFind:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzMyLCAxMDEsIDEwOCwgMTAxLCAxMDksIDEwMSwgMTEwLCAxMTYsIDExNSwgMzIsIDk3LCAxMTQsIDEwMSwgMzIsIDQ4LCA0NCwgMzIsIDQ5LCA0NCwgMzIsIDUwLCA0NCwgMzIsIDQ2LCA0NiwgNDYsIDQ0LCAzMiwgMTEwLCA0NSwgNDksIDMyXQ== None)) (Assign (list (Attribute (Name &self:2 Load) s_parent Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:2 Load)) nil)) nil) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &found:3 Store)) (Name &x:3 Load) None) (While (Compare (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &found:3 Load) Load) (list NotEq) (list (Name &found:3 Load))) (/seq (Assign (list (Name &found:3 Store)) (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &found:3 Load) Load) None)) nil) (While (Compare (Name &x:3 Load) (list NotEq) (list (Name &found:3 Load))) (/seq (Assign (list (Name &y:3 Store)) (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &x:3 Load) Load) None) (Assign (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &x:3 Load) Store)) (Name &found:3 Load) None) (Assign (list (Name &x:3 Store)) (Name &y:3 Load) None)) nil) (Return (Name &found:3 Load))) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &self:4 None None) (arg &x:4 None None) (arg &y:4 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &x:4 Load)) nil) Store)) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &y:4 Load)) nil) None)) nil None None)) nil) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &S_prime:0 Store)) (List nil Load) None) (Assign (list (Name &uf:0 Store)) (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil) None) (For (Name &index:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &vector_description:0 Store)) (BinOp (ListComp (BinOp (Call (Name g_int Load) (list (Name &i:5 Load)) nil) Sub (Constant i1 None)) (list (comprehension (Name &i:5 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) Add (List (list (Name &m:0 Load)) Load)) None) (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Subscript (Name &vector_description:0 Load) (Slice (Constant i1 None) (Constant i3 None) None) Load) None) (If (Compare (Call (Attribute (Name &uf:0 Load) s_find Load) (list (Name &u:0 Load)) nil) (list Eq) (list (Call (Attribute (Name &uf:0 Load) s_find Load) (list (Name &v:0 Load)) nil))) (/seq Continue) nil) (Expr (Call (Attribute (Name &S_prime:0 Load) s_append Load) (list (Name &index:0 Load)) nil)) (Expr (Call (Attribute (Name &uf:0 Load) s_union Load) (list (Name &u:0 Load) (Name &v:0 Load)) nil))) nil None) (Assign (list (Name &T_size:0 Store)) (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &S_prime:0 Load)) nil) (fn_1)) nil) None) (Expr (Call (Name g_print Load) (list (Name &T_size:0 Load) (Call (Name g_len Load) (list (Name &S_prime:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Starred (Call (Name g_sorted Load) (list (Name &S_prime:0 Load)) nil) Load)) nil))) nil)",
            "(Module (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjUsIDExNywgMTE2LCAxMDQsIDExMSwgMTE0LCAzMiwgNDUsIDMyLCA4MywgOTcsIDExNiwgMTE5LCAxMDUsIDEwNywgMzIsIDg0LCAxMDUsIDExOSwgOTcsIDExNCwgMTA1LCAzMiwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNDksIDU3LCAxMTYsIDEwNCwgMzIsIDc0LCA5NywgMTEwLCAzMiwgNDQsIDMyLCA1MCwgNDgsIDUwLCA0OSwgMzIsIDMyLCA0NSwgMzIsIDg0LCAxMTcsIDEwMSwgMTE1LCAxMDAsIDk3LCAxMjEsIDEwXQ== None)) (ImportFrom s___future__ (list (alias &division:0 None) (alias &print_function:0 None)) i0) (Import (list (alias &sys:0 None))) (Import (list (alias &os:0 None))) (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0) (ImportFrom s_heapq (list (alias &*:0 None)) i0) (ImportFrom s_math (list (alias &gcd:0 None) (alias &factorial:0 None) (alias &floor:0 None) (alias &ceil:0 None) (alias &sqrt:0 None) (alias &log2:0 None)) i0) (ImportFrom s_copy (list (alias &deepcopy:0 None)) i0) (ImportFrom s_collections (list (alias &deque:0 None)) i0) (ImportFrom s_bisect (list (alias s_bisect_left &bl:0)) i0) (ImportFrom s_bisect (list (alias s_bisect_right &br:0)) i0) (ImportFrom s_bisect (list (alias &bisect:0 None)) i0) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name &IOBase:0 Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:18 None None) (arg &file:18 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:18 Load) s__fd Store)) (Call (Attribute (Name &file:18 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:18 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None) (Assign (list (Attribute (Name &self:18 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:18 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:18 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:18 Load) s_write Store)) (IfExp (Attribute (Name &self:18 Load) s_writable Load) (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:19 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:19 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (Attribute (Name &self:19 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (Attribute (Name &self:19 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:19 Load)) (/seq Break) nil) (Assign (list (Name &ptr:19 Store)) (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_tell Load) nil nil) None) (fn_3 &ptr:19 &self:19 &b:19)) nil) (Assign (list (Attribute (Name &self:19 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:20 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:20 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:20 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (Attribute (Name &self:20 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (Attribute (Name &self:20 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:20 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:20 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:20 Load))) None) (Assign (list (Name &ptr:20 Store)) (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_tell Load) nil nil) None) (fn_3 &ptr:20 &self:20 &b:20)) nil) (AugAssign (Attribute (Name &self:20 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:21 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:21 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name &os:0 Load) s_write Load) (list (Attribute (Name &self:21 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name &IOBase:0 Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:22 None None) (arg &file:22 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:22 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:22 Load)) nil) None) (Assign (list (Attribute (Name &self:22 Load) s_flush Store)) (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:22 Load) s_writable Store)) (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:22 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:29 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:29 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:22 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:22 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (FunctionDef &print:0 (arguments nil nil (arg &args:5 None None) nil nil (arg &kwargs:5 None None) nil) (/seq (Expr (Constant s-WzgwLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDExNSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCAxMTUsIDMyLCAxMTYsIDExMSwgMzIsIDk3LCAzMiwgMTE1LCAxMTYsIDExNCwgMTAxLCA5NywgMTA5LCA0NCwgMzIsIDExMSwgMTE0LCAzMiwgMTE2LCAxMTEsIDMyLCAxMTUsIDEyMSwgMTE1LCA0NiwgMTE1LCAxMTYsIDEwMCwgMTExLCAxMTcsIDExNiwgMzIsIDk4LCAxMjEsIDMyLCAxMDAsIDEwMSwgMTAyLCA5NywgMTE3LCAxMDgsIDExNiwgNDZd None)) (Assign (list (Tuple (list (Name &sep:5 Store) (Name &file:5 Store)) Store)) (Tuple (list (Call (Attribute (Name &kwargs:5 Load) s_pop Load) (list (Constant s_sep None) (Constant s-WzMyXQ== None)) nil) (Call (Attribute (Name &kwargs:5 Load) s_pop Load) (list (Constant s_file None) (Attribute (Name &sys:0 Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &at_start:5 Store)) (Constant True None) None) (For (Name &x:5 Store) (Name &args:5 Load) (/seq (If (UnaryOp Not (Name &at_start:5 Load)) (/seq (Expr (Call (Attribute (Name &file:5 Load) s_write Load) (list (Name &sep:5 Load)) nil))) nil) (Expr (Call (Attribute (Name &file:5 Load) s_write Load) (list (Call (Name g_str Load) (list (Name &x:5 Load)) nil)) nil)) (Assign (list (Name &at_start:5 Store)) (Constant False None) None)) nil None) (Expr (Call (Attribute (Name &file:5 Load) s_write Load) (list (Call (Attribute (Name &kwargs:5 Load) s_pop Load) (list (Constant s_end None) (Constant s-WzEwXQ== None)) nil)) nil)) (If (Call (Attribute (Name &kwargs:5 Load) s_pop Load) (list (Constant s_flush None) (Constant False None)) nil) (/seq (Expr (Call (Attribute (Name &file:5 Load) s_flush Load) nil nil))) nil)) nil None None) (If (Compare (Subscript (Attribute (Name &sys:0 Load) s_version_info Load) (Constant i0 None) Load) (list Lt) (list (Constant i3 None))) (/seq (Assign (list (Tuple (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &FastIO:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil) (Call (Name &FastIO:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)) Load) None)) (/seq (Assign (list (Tuple (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)) Load) None))) (ImportFrom s_types (list (alias &GeneratorType:0 None)) i0) (FunctionDef &iterative:0 (arguments nil (list (arg &f:3 None None) (arg &stack:3 None None)) None nil nil None (list (List nil Load))) (/seq (FunctionDef &wrapped_func:3 (arguments nil nil (arg &args:23 None None) nil nil (arg &kwargs:23 None None) nil) (/seq (If (Name &stack:3 Load) (/seq (Return (Call (Name &f:3 Load) (list (Starred (Name &args:23 Load) Load)) (list (keyword None (Name &kwargs:23 Load)))))) nil) (Assign (list (Name &to:23 Store)) (Call (Name &f:3 Load) (list (Starred (Name &args:23 Load) Load)) (list (keyword None (Name &kwargs:23 Load)))) None) (While (Constant True None) (/seq (If (Compare (Call (Name g_type Load) (list (Name &to:23 Load)) nil) (list Is) (list (Name &GeneratorType:0 Load))) (/seq (Expr (Call (Attribute (Name &stack:3 Load) s_append Load) (list (Name &to:23 Load)) nil)) (Assign (list (Name &to:23 Store)) (Call (Name g_next Load) (list (Name &to:23 Load)) nil) None) Continue) nil) (Expr (Call (Attribute (Name &stack:3 Load) s_pop Load) nil nil)) (If (UnaryOp Not (Name &stack:3 Load)) (/seq Break) nil) (Assign (list (Name &to:23 Store)) (Call (Attribute (Subscript (Name &stack:3 Load) (UnaryOp USub (Constant i1 None)) Load) s_send Load) (list (Name &to:23 Load)) nil) None)) nil) (Return (Name &to:23 Load))) nil None None) (Return (Name &wrapped_func:3 Load))) nil None None) (FunctionDef &inp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil))) nil None None) (FunctionDef &out:0 (arguments nil (list (arg &var:6 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Attribute (Name &sys:0 Load) s_stdout Load) s_write Load) (list (Call (Name g_str Load) (list (Name &var:6 Load)) nil)) nil))) nil None None) (FunctionDef &lis:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (fn_2 &inp:0)) nil))) nil None None) (FunctionDef &stringlis:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (FunctionDef &sep:0 (arguments nil nil None nil nil None nil) (/seq (Return (fn_2 &inp:0))) nil None None) (FunctionDef &strsep:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_str Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &testcase:0 (arguments nil (list (arg &t:7 None None)) None nil nil None nil) (/seq (For (Name &pp:7 Store) (Call (Name g_range Load) (list (Name &t:7 Load)) nil) (/seq (Expr (Call (Name &solve:0 Load) (list (Name &pp:7 Load)) nil))) nil None)) nil None None) (FunctionDef &google:0 (arguments nil (list (arg &p:8 None None)) None nil nil None nil) (/seq (Expr (Call (Name &print:0 Load) (list (BinOp (BinOp (Constant s-WzY3LCA5NywgMTE1LCAxMDEsIDMyLCAzNV0= None) Add (Call (Name g_str Load) (list (Name &p:8 Load)) nil)) Add (Constant s-WzU4LCAzMl0= None))) (list (keyword s_end (Constant s_ None)))))) nil None None) (FunctionDef &lcm:0 (arguments nil (list (arg &a:9 None None) (arg &b:9 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &a:9 Load) Mult (Name &b:9 Load)) FloorDiv (Call (Name &gcd:0 Load) (list (Name &a:9 Load) (Name &b:9 Load)) nil)))) nil None None) (FunctionDef &power:0 (arguments nil (list (arg &x:10 None None) (arg &y:10 None None) (arg &p:10 None None)) None nil nil None nil) (/seq (AugAssign (Name &y:10 Store) Mod (BinOp (Name &p:10 Load) Sub (Constant i1 None))) (Assign (list (Name &res:10 Store)) (Constant i1 None) None) (Assign (list (Name &x:10 Store)) (BinOp (Name &x:10 Load) Mod (Name &p:10 Load)) None) (If (Compare (Name &x:10 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i0 None))) nil) (While (Compare (Name &y:10 Load) (list Gt) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &y:10 Load) BitAnd (Constant i1 None)) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &res:10 Store)) (BinOp (BinOp (Name &res:10 Load) Mult (Name &x:10 Load)) Mod (Name &p:10 Load)) None)) nil) (Assign (list (Name &y:10 Store)) (BinOp (Name &y:10 Load) RShift (Constant i1 None)) None) (Assign (list (Name &x:10 Store)) (BinOp (BinOp (Name &x:10 Load) Mult (Name &x:10 Load)) Mod (Name &p:10 Load)) None)) nil) (Return (Name &res:10 Load))) nil None None) (FunctionDef &ncr:0 (arguments nil (list (arg &n:11 None None) (arg &r:11 None None)) None nil nil None nil) (/seq (Return (BinOp (Call (Name &factorial:0 Load) (list (Name &n:11 Load)) nil) FloorDiv (BinOp (Call (Name &factorial:0 Load) (list (Name &r:11 Load)) nil) Mult (Call (Name &factorial:0 Load) (list (Call (Name g_max Load) (list (BinOp (Name &n:11 Load) Sub (Name &r:11 Load)) (Constant i1 None)) nil)) nil))))) nil None None) (FunctionDef &isPrime:0 (arguments nil (list (arg &n:12 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:12 Load) (list LtE) (list (Constant i1 None))) (/seq (Return (Constant False None))) nil) (If (Compare (Name &n:12 Load) (list LtE) (list (Constant i3 None))) (/seq (Return (Constant True None))) nil) (If (BoolOp Or (list (Compare (BinOp (Name &n:12 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Name &n:12 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))))) (/seq (Return (Constant False None))) nil) (Assign (list (Name &i:12 Store)) (Constant i5 None) None) (While (Compare (BinOp (Name &i:12 Load) Mult (Name &i:12 Load)) (list LtE) (list (Name &n:12 Load))) (/seq (If (BoolOp Or (list (Compare (BinOp (Name &n:12 Load) Mod (Name &i:12 Load)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Name &n:12 Load) Mod (BinOp (Name &i:12 Load) Add (Constant i2 None))) (list Eq) (list (Constant i0 None))))) (/seq (Return (Constant False None))) nil) (Assign (list (Name &i:12 Store)) (BinOp (Name &i:12 Load) Add (Constant i6 None)) None)) nil) (Return (Constant True None))) nil None None) (Assign (list (Name &inf:0 Store)) (Call (Name g_pow Load) (list (Constant i10 None) (Constant i21 None)) nil) None) (Assign (list (Name &mod:0 Store)) (fn_1) None) (FunctionDef &bucketsort:0 (arguments nil (list (arg &order:13 None None) (arg &seq:13 None None)) None nil nil None nil) (/seq (Assign (list (Name &buckets:13 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Call (Name g_max Load) (list (Name &seq:13 Load)) nil) Add (Constant i1 None))) None) (For (Name &x:13 Store) (Name &seq:13 Load) (/seq (AugAssign (Subscript (Name &buckets:13 Load) (Name &x:13 Load) Store) Add (Constant i1 None))) nil None) (For (Name &i:13 Store) (Call (Name g_range Load) (list (BinOp (Call (Name g_len Load) (list (Name &buckets:13 Load)) nil) Sub (Constant i1 None))) nil) (/seq (AugAssign (Subscript (Name &buckets:13 Load) (BinOp (Name &i:13 Load) Add (Constant i1 None)) Store) Add (Subscript (Name &buckets:13 Load) (Name &i:13 Load) Load))) nil None) (Assign (list (Name &new_order:13 Store)) (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Call (Name g_len Load) (list (Name &seq:13 Load)) nil)) None) (For (Name &i:13 Store) (Call (Name g_reversed Load) (list (Name &order:13 Load)) nil) (/seq (Assign (list (Name &x:13 Store)) (Subscript (Name &seq:13 Load) (Name &i:13 Load) Load) None) (Assign (list (Name &idx:13 Store) (Subscript (Name &buckets:13 Load) (Name &x:13 Load) Store)) (BinOp (Subscript (Name &buckets:13 Load) (Name &x:13 Load) Load) Sub (Constant i1 None)) None) (Assign (list (Subscript (Name &new_order:13 Load) (Name &idx:13 Load) Store)) (Name &i:13 Load) None)) nil None) (Return (Name &new_order:13 Load))) nil None None) (FunctionDef &ordersort:0 (arguments nil (list (arg &order:14 None None) (arg &seq:14 None None) (arg &reverse:14 None None)) None nil nil None (list (Constant False None))) (/seq (Assign (list (Name &bit:14 Store)) (BinOp (Call (Attribute (Call (Name g_max Load) (list (Name &seq:14 Load)) nil) s_bit_length Load) nil nil) RShift (Constant i1 None)) None) (Assign (list (Name &mask:14 Store)) (BinOp (BinOp (Constant i1 None) LShift (Name &bit:14 Load)) Sub (Constant i1 None)) None) (Assign (list (Name &order:14 Store)) (Call (Name &bucketsort:0 Load) (list (Name &order:14 Load) (ListComp (BinOp (Name &x:30 Load) BitAnd (Name &mask:14 Load)) (list (comprehension (Name &x:30 Store) (Name &seq:14 Load) nil i0)))) nil) None) (Assign (list (Name &order:14 Store)) (Call (Name &bucketsort:0 Load) (list (Name &order:14 Load) (ListComp (BinOp (Name &x:31 Load) RShift (Name &bit:14 Load)) (list (comprehension (Name &x:31 Store) (Name &seq:14 Load) nil i0)))) nil) None) (If (Name &reverse:14 Load) (/seq (Expr (Call (Attribute (Name &order:14 Load) s_reverse Load) nil nil))) nil) (Return (Name &order:14 Load))) nil None None) (FunctionDef &long_ordersort:0 (arguments nil (list (arg &order:15 None None) (arg &seq:15 None None)) None nil nil None nil) (/seq (Assign (list (Name &order:15 Store)) (Call (Name &ordersort:0 Load) (list (Name &order:15 Load) (ListComp (Call (Name g_int Load) (list (BinOp (Name &i:32 Load) BitAnd (Constant i2147483647 None))) nil) (list (comprehension (Name &i:32 Store) (Name &seq:15 Load) nil i0)))) nil) None) (Return (Call (Name &ordersort:0 Load) (list (Name &order:15 Load) (ListComp (Call (Name g_int Load) (list (BinOp (Name &i:33 Load) RShift (Constant i31 None))) nil) (list (comprehension (Name &i:33 Store) (Name &seq:15 Load) nil i0)))) nil))) nil None None) (FunctionDef &multikey_ordersort:0 (arguments nil (list (arg &order:16 None None)) (arg &seqs:16 None None) (list (arg &sort:16 None None)) (list (Name &ordersort:0 Load)) None nil) (/seq (For (Name &i:16 Store) (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &seqs:16 Load)) nil)) nil)) nil) (/seq (Assign (list (Name &order:16 Store)) (Call (Name &sort:16 Load) (list (Name &order:16 Load) (Subscript (Name &seqs:16 Load) (Name &i:16 Load) Load)) nil) None)) nil None) (Return (Name &order:16 Load))) nil None None) (ClassDef &DisjointSetUnion:0 nil nil (/seq (FunctionDef &__init__:4 (arguments nil (list (arg &self:24 None None) (arg &n:24 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:24 Load) s_parent Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:24 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:24 Load) s_size Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &n:24 Load)) None) (Assign (list (Attribute (Name &self:24 Load) s_num_sets Store)) (Name &n:24 Load) None)) nil None None) (FunctionDef &find:4 (arguments nil (list (arg &self:25 None None) (arg &a:25 None None)) None nil nil None nil) (/seq (Assign (list (Name &acopy:25 Store)) (Name &a:25 Load) None) (While (Compare (Name &a:25 Load) (list NotEq) (list (Subscript (Attribute (Name &self:25 Load) s_parent Load) (Name &a:25 Load) Load))) (/seq (Assign (list (Name &a:25 Store)) (Subscript (Attribute (Name &self:25 Load) s_parent Load) (Name &a:25 Load) Load) None)) nil) (While (Compare (Name &acopy:25 Load) (list NotEq) (list (Name &a:25 Load))) (/seq (Assign (list (Tuple (list (Subscript (Attribute (Name &self:25 Load) s_parent Load) (Name &acopy:25 Load) Store) (Name &acopy:25 Store)) Store)) (Tuple (list (Name &a:25 Load) (Subscript (Attribute (Name &self:25 Load) s_parent Load) (Name &acopy:25 Load) Load)) Load) None)) nil) (Return (Name &a:25 Load))) nil None None) (FunctionDef &union:4 (arguments nil (list (arg &self:26 None None) (arg &a:26 None None) (arg &b:26 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &a:26 Store) (Name &b:26 Store)) Store)) (Tuple (list (Call (Attribute (Name &self:26 Load) s_find Load) (list (Name &a:26 Load)) nil) (Call (Attribute (Name &self:26 Load) s_find Load) (list (Name &b:26 Load)) nil)) Load) None) (If (Compare (Name &a:26 Load) (list NotEq) (list (Name &b:26 Load))) (/seq (If (Compare (Subscript (Attribute (Name &self:26 Load) s_size Load) (Name &a:26 Load) Load) (list Lt) (list (Subscript (Attribute (Name &self:26 Load) s_size Load) (Name &b:26 Load) Load))) (/seq (Assign (list (Tuple (list (Name &a:26 Store) (Name &b:26 Store)) Store)) (Tuple (list (Name &b:26 Load) (Name &a:26 Load)) Load) None)) nil) (AugAssign (Attribute (Name &self:26 Load) s_num_sets Store) Sub (Constant i1 None)) (Assign (list (Subscript (Attribute (Name &self:26 Load) s_parent Load) (Name &b:26 Load) Store)) (Name &a:26 Load) None) (AugAssign (Subscript (Attribute (Name &self:26 Load) s_size Load) (Name &a:26 Load) Store) Add (Subscript (Attribute (Name &self:26 Load) s_size Load) (Name &b:26 Load) Load))) nil)) nil None None) (FunctionDef &set_size:4 (arguments nil (list (arg &self:27 None None) (arg &a:27 None None)) None nil nil None nil) (/seq (Return (Subscript (Attribute (Name &self:27 Load) s_size Load) (Call (Attribute (Name &self:27 Load) s_find Load) (list (Name &a:27 Load)) nil) Load))) nil None None) (FunctionDef &__len__:4 (arguments nil (list (arg &self:28 None None)) None nil nil None nil) (/seq (Return (Attribute (Name &self:28 Load) s_num_sets Load))) nil None None)) nil) (FunctionDef &solve:0 (arguments nil (list (arg &case:17 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &n:17 Store) (Name &m:17 Store)) Store)) (Call (Name &sep:0 Load) nil nil) None) (Assign (list (Name &dsu:17 Store)) (Call (Name &DisjointSetUnion:0 Load) (list (BinOp (Name &m:17 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &take:17 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &n:17 Load)) None) (For (Name &index:17 Store) (Call (Name g_range Load) (list (Name &n:17 Load)) nil) (/seq (Assign (list (Name &a:17 Store)) (Call (Name &lis:0 Load) nil nil) None) (If (Compare (Subscript (Name &a:17 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Tuple (list (Name &i:17 Store) (Name &j:17 Store)) Store)) (Tuple (list (Constant i0 None) (Subscript (Name &a:17 Load) (Constant i1 None) Load)) Load) None)) (/seq (Assign (list (Tuple (list (Name &i:17 Store) (Name &j:17 Store)) Store)) (Tuple (list (Subscript (Name &a:17 Load) (Constant i1 None) Load) (Subscript (Name &a:17 Load) (Constant i2 None) Load)) Load) None))) (Assign (list (Name &grp1:17 Store)) (Call (Attribute (Name &dsu:17 Load) s_find Load) (list (Name &i:17 Load)) nil) None) (Assign (list (Name &grp2:17 Store)) (Call (Attribute (Name &dsu:17 Load) s_find Load) (list (Name &j:17 Load)) nil) None) (If (Compare (Name &grp1:17 Load) (list Eq) (list (Name &grp2:17 Load))) (/seq (Assign (list (Subscript (Name &take:17 Load) (Name &index:17 Load) Store)) (Constant i0 None) None)) (/seq (Expr (Call (Attribute (Name &dsu:17 Load) s_union Load) (list (Name &i:17 Load) (Name &j:17 Load)) nil))))) nil None) (Assign (list (Name &ans:17 Store)) (List nil Load) None) (For (Name &i:17 Store) (Call (Name g_range Load) (list (Name &n:17 Load)) nil) (/seq (If (Subscript (Name &take:17 Load) (Name &i:17 Load) Load) (/seq (Expr (Call (Attribute (Name &ans:17 Load) s_append Load) (list (Name &i:17 Load)) nil))) nil)) nil None) (Assign (list (Name &ans:17 Store)) (Call (Name g_sorted Load) (list (Name &ans:17 Load)) nil) None) (Expr (Call (Name &print:0 Load) (list (Call (Name &power:0 Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &ans:17 Load)) nil) (Name &mod:0 Load)) nil) (Call (Name g_len Load) (list (Name &ans:17 Load)) nil)) nil)) (Expr (Call (Name &print:0 Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (GeneratorExp (Call (Name g_str Load) (list (BinOp (Name &i:34 Load) Add (Constant i1 None))) nil) (list (comprehension (Name &i:34 Store) (Name &ans:17 Load) nil i0)))) nil)) nil))) nil None None) (Expr (Call (Name &testcase:0 Load) (list (Constant i1 None)) nil))) nil)",
            "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (Assign (list (Name &MOD:0 Store)) (fn_1) None) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load) None) (ClassDef &UnionFind:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:7 None None) (arg &n:7 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:7 Load) s_parent Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:7 Load)) nil)) nil) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:8 None None) (arg &a:8 None None)) None nil nil None nil) (/seq (Assign (list (Name &acopy:8 Store)) (Name &a:8 Load) None) (While (Compare (Name &a:8 Load) (list NotEq) (list (Subscript (Attribute (Name &self:8 Load) s_parent Load) (Name &a:8 Load) Load))) (/seq (Assign (list (Name &a:8 Store)) (Subscript (Attribute (Name &self:8 Load) s_parent Load) (Name &a:8 Load) Load) None)) nil) (While (Compare (Name &acopy:8 Load) (list NotEq) (list (Name &a:8 Load))) (/seq (Assign (list (Tuple (list (Subscript (Attribute (Name &self:8 Load) s_parent Load) (Name &acopy:8 Load) Store) (Name &acopy:8 Store)) Store)) (Tuple (list (Name &a:8 Load) (Subscript (Attribute (Name &self:8 Load) s_parent Load) (Name &acopy:8 Load) Load)) Load) None)) nil) (Return (Name &a:8 Load))) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &self:9 None None) (arg &a:9 None None) (arg &b:9 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:9 Load) s_parent Load) (Call (Attribute (Name &self:9 Load) s_find Load) (list (Name &b:9 Load)) nil) Store)) (Call (Attribute (Name &self:9 Load) s_find Load) (list (Name &a:9 Load)) nil) None)) nil None None)) nil) (FunctionDef &oneLineArrayPrint:0 (arguments nil (list (arg &arr:2 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (BinOp (Name &x:16 Load) Add (Constant i1 None))) nil) (list (comprehension (Name &x:16 Store) (Name &arr:2 Load) nil i0)))) nil)) nil))) nil None None) (FunctionDef &canTake:0 (arguments nil (list (arg &newEdgesCnt:3 None None) (arg &newVerticesCnt:3 None None) (arg &newHasOne:3 None None)) None nil nil None nil) (/seq (If (Name &newHasOne:3 Load) (/seq (Return (Compare (Name &newEdgesCnt:3 Load) (list LtE) (list (Name &newVerticesCnt:3 Load))))) (/seq (Return (Compare (Name &newEdgesCnt:3 Load) (list LtE) (list (BinOp (Name &newVerticesCnt:3 Load) Sub (Constant i1 None)))))))) nil None None) (FunctionDef &handleOne:0 (arguments nil (list (arg &i:4 None None) (arg &v1:4 None None) (arg &sPrime:4 None None) (arg &cEc:4 None None) (arg &cVc:4 None None) (arg &cHO:4 None None) (arg &vV:4 None None) (arg &uf:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &parent:4 Store)) (Call (Attribute (Name &uf:4 Load) s_find Load) (list (Name &v1:4 Load)) nil) None) (Assign (list (Name &oldEdgesCnt:4 Store)) (Subscript (Name &cEc:4 Load) (Name &parent:4 Load) Load) None) (Assign (list (Name &oldVerticesCnt:4 Store)) (Subscript (Name &cVc:4 Load) (Name &parent:4 Load) Load) None) (Assign (list (Name &newEdgesCnt:4 Store)) (BinOp (Name &oldEdgesCnt:4 Load) Add (Constant i1 None)) None) (If (Compare (Subscript (Name &vV:4 Load) (Name &v1:4 Load) Load) (list Eq) (list (Constant False None))) (/seq (Assign (list (Name &newVerticesCnt:4 Store)) (BinOp (Name &oldVerticesCnt:4 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &newVerticesCnt:4 Store)) (Name &oldVerticesCnt:4 Load) None))) (If (Call (Name &canTake:0 Load) (list (Name &newEdgesCnt:4 Load) (Name &newVerticesCnt:4 Load) (Constant True None)) nil) (/seq (Expr (Call (Attribute (Name &sPrime:4 Load) s_append Load) (list (Name &i:4 Load)) nil)) (Assign (list (Subscript (Name &vV:4 Load) (Name &v1:4 Load) Store)) (Constant True None) None) (Assign (list (Subscript (Name &cEc:4 Load) (Name &parent:4 Load) Store)) (Name &newEdgesCnt:4 Load) None) (Assign (list (Subscript (Name &cVc:4 Load) (Name &parent:4 Load) Store)) (Name &newVerticesCnt:4 Load) None) (Assign (list (Subscript (Name &cHO:4 Load) (Name &parent:4 Load) Store)) (Constant True None) None)) nil) (Return None)) nil None None) (FunctionDef &handleTwo:0 (arguments nil (list (arg &i:5 None None) (arg &v1:5 None None) (arg &v2:5 None None) (arg &sPrime:5 None None) (arg &cEc:5 None None) (arg &cVc:5 None None) (arg &cHO:5 None None) (arg &vV:5 None None) (arg &uf:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &parent1:5 Store)) (Call (Attribute (Name &uf:5 Load) s_find Load) (list (Name &v1:5 Load)) nil) None) (Assign (list (Name &parent2:5 Store)) (Call (Attribute (Name &uf:5 Load) s_find Load) (list (Name &v2:5 Load)) nil) None) (If (Compare (Name &parent1:5 Load) (list NotEq) (list (Name &parent2:5 Load))) (/seq (Assign (list (Name &oldEdgesCnt:5 Store)) (BinOp (Subscript (Name &cEc:5 Load) (Name &parent1:5 Load) Load) Add (Subscript (Name &cEc:5 Load) (Name &parent2:5 Load) Load)) None) (Assign (list (Name &oldVerticesCnt:5 Store)) (BinOp (Subscript (Name &cVc:5 Load) (Name &parent1:5 Load) Load) Add (Subscript (Name &cVc:5 Load) (Name &parent2:5 Load) Load)) None)) (/seq (Assign (list (Name &oldEdgesCnt:5 Store)) (Subscript (Name &cEc:5 Load) (Name &parent1:5 Load) Load) None) (Assign (list (Name &oldVerticesCnt:5 Store)) (Subscript (Name &cVc:5 Load) (Name &parent1:5 Load) Load) None))) (Assign (list (Name &newEdgesCnt:5 Store)) (BinOp (Name &oldEdgesCnt:5 Load) Add (Constant i1 None)) None) (Assign (list (Name &newVerticesCnt:5 Store)) (Name &oldVerticesCnt:5 Load) None) (If (Compare (Subscript (Name &vV:5 Load) (Name &v1:5 Load) Load) (list Eq) (list (Constant False None))) (/seq (AugAssign (Name &newVerticesCnt:5 Store) Add (Constant i1 None))) nil) (If (Compare (Subscript (Name &vV:5 Load) (Name &v2:5 Load) Load) (list Eq) (list (Constant False None))) (/seq (AugAssign (Name &newVerticesCnt:5 Store) Add (Constant i1 None))) nil) (If (Call (Name &canTake:0 Load) (list (Name &newEdgesCnt:5 Load) (Name &newVerticesCnt:5 Load) (BoolOp Or (list (Subscript (Name &cHO:5 Load) (Name &parent1:5 Load) Load) (Subscript (Name &cHO:5 Load) (Name &parent2:5 Load) Load)))) nil) (/seq (Expr (Call (Attribute (Name &sPrime:5 Load) s_append Load) (list (Name &i:5 Load)) nil)) (Assign (list (Subscript (Name &vV:5 Load) (Name &v1:5 Load) Store)) (Constant True None) None) (Assign (list (Subscript (Name &vV:5 Load) (Name &v2:5 Load) Store)) (Constant True None) None) (Expr (Call (Attribute (Name &uf:5 Load) s_union Load) (list (Name &v1:5 Load) (Name &v2:5 Load)) nil)) (Assign (list (Name &newParent:5 Store)) (Call (Attribute (Name &uf:5 Load) s_find Load) (list (Name &v1:5 Load)) nil) None) (Assign (list (Subscript (Name &cEc:5 Load) (Name &newParent:5 Load) Store)) (Name &newEdgesCnt:5 Load) None) (Assign (list (Subscript (Name &cVc:5 Load) (Name &newParent:5 Load) Store)) (Name &newVerticesCnt:5 Load) None) (Assign (list (Subscript (Name &cHO:5 Load) (Name &newParent:5 Load) Store)) (BoolOp Or (list (Subscript (Name &cHO:5 Load) (Name &parent1:5 Load) Load) (Subscript (Name &cHO:5 Load) (Name &parent2:5 Load) Load))) None)) nil) (Return None)) nil None None) (FunctionDef &solveActual:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &uf:6 Store)) (Call (Name &UnionFind:0 Load) (list (Name &m:0 Load)) nil) None) (Assign (list (Name &sPrime:6 Store)) (List nil Load) None) (Assign (list (Name &cEc:6 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:11 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) nil i0))) None) (Assign (list (Name &cVc:6 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:12 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) nil i0))) None) (Assign (list (Name &cHO:6 Store)) (ListComp (Constant False None) (list (comprehension (Name &_:13 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) nil i0))) None) (Assign (list (Name &vV:6 Store)) (ListComp (Constant False None) (list (comprehension (Name &_:14 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) nil i0))) None) (For (Tuple (list (Name &i:6 Store) (Name &x:6 Store)) Store) (Call (Name g_enumerate Load) (list (Name &vS:0 Load)) nil) (/seq (Assign (list (Name &nVertices:6 Store)) (Call (Name g_len Load) (list (Name &x:6 Load)) nil) None) (If (Compare (Name &nVertices:6 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name &handleOne:0 Load) (list (Name &i:6 Load) (Subscript (Name &x:6 Load) (Constant i0 None) Load) (Name &sPrime:6 Load) (Name &cEc:6 Load) (Name &cVc:6 Load) (Name &cHO:6 Load) (Name &vV:6 Load) (Name &uf:6 Load)) nil))) (/seq (Expr (Call (Name &handleTwo:0 Load) (list (Name &i:6 Load) (Subscript (Name &x:6 Load) (Constant i0 None) Load) (Subscript (Name &x:6 Load) (Constant i1 None) Load) (Name &sPrime:6 Load) (Name &cEc:6 Load) (Name &cVc:6 Load) (Name &cHO:6 Load) (Name &vV:6 Load) (Name &uf:6 Load)) nil))))) nil None) (Assign (list (Name &TSize:6 Store)) (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &sPrime:6 Load)) nil) (Name &MOD:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgMTI1LCAzMiwgMTIzLCAxMjVd None) s_format Load) (list (Name &TSize:6 Load) (Call (Name g_len Load) (list (Name &sPrime:6 Load)) nil)) nil)) nil)) (Expr (Call (Name &oneLineArrayPrint:0 Load) (list (Name &sPrime:6 Load)) nil))) nil None None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:10 Load)) nil) (list (comprehension (Name &x:10 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &vS:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &xx:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:15 Load)) nil) (list (comprehension (Name &x:15 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (Call (Name g_len Load) (list (Name &xx:0 Load)) nil)) nil) (/seq (AugAssign (Subscript (Name &xx:0 Load) (Name &i:0 Load) Store) Sub (Constant i1 None))) nil None) (Expr (Call (Attribute (Name &vS:0 Load) s_append Load) (list (Subscript (Name &xx:0 Load) (Slice (Constant i1 None) None None) Load)) nil))) nil None) (Expr (Call (Name &solveActual:0 Load) nil nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load) None) (ClassDef &UnionFind:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_parent Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:3 Load)) nil)) nil) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:4 None None) (arg &a:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &acopy:4 Store)) (Name &a:4 Load) None) (While (Compare (Name &a:4 Load) (list NotEq) (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &a:4 Load) Load))) (/seq (Assign (list (Name &a:4 Store)) (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &a:4 Load) Load) None)) nil) (While (Compare (Name &acopy:4 Load) (list NotEq) (list (Name &a:4 Load))) (/seq (Assign (list (Tuple (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &acopy:4 Load) Store) (Name &acopy:4 Store)) Store)) (Tuple (list (Name &a:4 Load) (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &acopy:4 Load) Load)) Load) None)) nil) (Return (Name &a:4 Load))) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &self:5 None None) (arg &a:5 None None) (arg &b:5 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &b:5 Load)) nil) Store)) (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &a:5 Load)) nil) None)) nil None None)) nil) (FunctionDef &oneLineArrayPrint:0 (arguments nil (list (arg &arr:2 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:9 Load)) nil) (list (comprehension (Name &x:9 Store) (Name &arr:2 Load) nil i0)))) nil)) nil))) nil None None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:6 Load)) nil) (list (comprehension (Name &x:6 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &uf:0 Store)) (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &hasOne:0 Store)) (ListComp (Constant False None) (list (comprehension (Name &_:7 Store) (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (Assign (list (Name &sPrime:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &inp:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:8 Load)) nil) (list (comprehension (Name &x:8 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (Compare (Subscript (Name &inp:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &parent:0 Store)) (Call (Attribute (Name &uf:0 Load) s_find Load) (list (Subscript (Name &inp:0 Load) (Constant i1 None) Load)) nil) None) (If (Compare (Subscript (Name &hasOne:0 Load) (Name &parent:0 Load) Load) (list Eq) (list (Constant False None))) (/seq (Expr (Call (Attribute (Name &sPrime:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) (Assign (list (Subscript (Name &hasOne:0 Load) (Name &parent:0 Load) Store)) (Constant True None) None)) nil)) (/seq (Assign (list (Tuple (list (Name &parent1:0 Store) (Name &parent2:0 Store)) Store)) (Tuple (list (Call (Attribute (Name &uf:0 Load) s_find Load) (list (Subscript (Name &inp:0 Load) (Constant i1 None) Load)) nil) (Call (Attribute (Name &uf:0 Load) s_find Load) (list (Subscript (Name &inp:0 Load) (Constant i2 None) Load)) nil)) Load) None) (If (Compare (Name &parent1:0 Load) (list NotEq) (list (Name &parent2:0 Load))) (/seq (If (UnaryOp Not (BoolOp And (list (Subscript (Name &hasOne:0 Load) (Name &parent1:0 Load) Load) (Subscript (Name &hasOne:0 Load) (Name &parent2:0 Load) Load)))) (/seq (Expr (Call (Attribute (Name &sPrime:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) (Expr (Call (Attribute (Name &uf:0 Load) s_union Load) (list (Subscript (Name &inp:0 Load) (Constant i1 None) Load) (Subscript (Name &inp:0 Load) (Constant i2 None) Load)) nil)) (Assign (list (Name &newParent:0 Store)) (Call (Attribute (Name &uf:0 Load) s_find Load) (list (Subscript (Name &inp:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Subscript (Name &hasOne:0 Load) (Name &newParent:0 Load) Store)) (BoolOp Or (list (Subscript (Name &hasOne:0 Load) (Name &parent1:0 Load) Load) (Subscript (Name &hasOne:0 Load) (Name &parent2:0 Load) Load))) None)) nil)) nil)))) nil None) (Assign (list (Name &S_magnitude:0 Store)) (Call (Name g_len Load) (list (Name &sPrime:0 Load)) nil) None) (Assign (list (Name &T_magnitude:0 Store)) (Call (Name g_pow Load) (list (Constant i2 None) (Name &S_magnitude:0 Load) (fn_1)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgMTI1LCAzMiwgMTIzLCAxMjVd None) s_format Load) (list (Name &T_magnitude:0 Load) (Name &S_magnitude:0 Load)) nil)) nil)) (Expr (Call (Name &oneLineArrayPrint:0 Load) (list (Name &sPrime:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &MOD:0 Store)) (fn_1) None) (ClassDef &UnionFind:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &n:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_n Store)) (Name &n:3 Load) None) (Assign (list (Attribute (Name &self:3 Load) s_parents Store)) (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &n:3 Load)) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:4 None None) (arg &x:4 None None)) None nil nil None nil) (/seq (If (Compare (Subscript (Attribute (Name &self:4 Load) s_parents Load) (Name &x:4 Load) Load) (list Lt) (list (Constant i0 None))) (/seq (Return (Name &x:4 Load))) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s_parents Load) (Name &x:4 Load) Store)) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Subscript (Attribute (Name &self:4 Load) s_parents Load) (Name &x:4 Load) Load)) nil) None) (Return (Subscript (Attribute (Name &self:4 Load) s_parents Load) (Name &x:4 Load) Load))))) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &self:5 None None) (arg &x:5 None None) (arg &y:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &x:5 Store)) (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &x:5 Load)) nil) None) (Assign (list (Name &y:5 Store)) (Call (Attribute (Name &self:5 Load) s_find Load) (list (Name &y:5 Load)) nil) None) (If (Compare (Name &x:5 Load) (list Eq) (list (Name &y:5 Load))) (/seq (Return None)) nil) (If (Compare (Subscript (Attribute (Name &self:5 Load) s_parents Load) (Name &x:5 Load) Load) (list Gt) (list (Subscript (Attribute (Name &self:5 Load) s_parents Load) (Name &y:5 Load) Load))) (/seq (Assign (list (Tuple (list (Name &x:5 Store) (Name &y:5 Store)) Store)) (Tuple (list (Name &y:5 Load) (Name &x:5 Load)) Load) None)) nil) (AugAssign (Subscript (Attribute (Name &self:5 Load) s_parents Load) (Name &x:5 Load) Store) Add (Subscript (Attribute (Name &self:5 Load) s_parents Load) (Name &y:5 Load) Load)) (Assign (list (Subscript (Attribute (Name &self:5 Load) s_parents Load) (Name &y:5 Load) Store)) (Name &x:5 Load) None)) nil None None) (FunctionDef &size:1 (arguments nil (list (arg &self:6 None None) (arg &x:6 None None)) None nil nil None nil) (/seq (Return (UnaryOp USub (Subscript (Attribute (Name &self:6 Load) s_parents Load) (Call (Attribute (Name &self:6 Load) s_find Load) (list (Name &x:6 Load)) nil) Load)))) nil None None) (FunctionDef &same:1 (arguments nil (list (arg &self:7 None None) (arg &x:7 None None) (arg &y:7 None None)) None nil nil None nil) (/seq (Return (Compare (Call (Attribute (Name &self:7 Load) s_find Load) (list (Name &x:7 Load)) nil) (list Eq) (list (Call (Attribute (Name &self:7 Load) s_find Load) (list (Name &y:7 Load)) nil))))) nil None None) (FunctionDef &members:1 (arguments nil (list (arg &self:8 None None) (arg &x:8 None None)) None nil nil None nil) (/seq (Assign (list (Name &root:8 Store)) (Call (Attribute (Name &self:8 Load) s_find Load) (list (Name &x:8 Load)) nil) None) (Return (ListComp (Name &i:13 Load) (list (comprehension (Name &i:13 Store) (Call (Name g_range Load) (list (Attribute (Name &self:8 Load) s_n Load)) nil) (list (Compare (Call (Attribute (Name &self:8 Load) s_find Load) (list (Name &i:13 Load)) nil) (list Eq) (list (Name &root:8 Load)))) i0))))) nil None None) (FunctionDef &roots:1 (arguments nil (list (arg &self:9 None None)) None nil nil None nil) (/seq (Return (ListComp (Name &i:14 Load) (list (comprehension (Tuple (list (Name &i:14 Store) (Name &x:14 Store)) Store) (Call (Name g_enumerate Load) (list (Attribute (Name &self:9 Load) s_parents Load)) nil) (list (Compare (Name &x:14 Load) (list Lt) (list (Constant i0 None)))) i0))))) nil None None) (FunctionDef &group_count:1 (arguments nil (list (arg &self:10 None None)) None nil nil None nil) (/seq (Return (Call (Name g_len Load) (list (Call (Attribute (Name &self:10 Load) s_roots Load) nil nil)) nil))) nil None None) (FunctionDef &all_group_members:1 (arguments nil (list (arg &self:11 None None)) None nil nil None nil) (/seq (Assign (list (Name &dic:11 Store)) (DictComp (Name &r:15 Load) (List nil Load) (list (comprehension (Name &r:15 Store) (Call (Attribute (Name &self:11 Load) s_roots Load) nil nil) nil i0))) None) (For (Name &i:11 Store) (Call (Name g_range Load) (list (Attribute (Name &self:11 Load) s_n Load)) nil) (/seq (Expr (Call (Attribute (Subscript (Name &dic:11 Load) (Call (Attribute (Name &self:11 Load) s_find Load) (list (Name &i:11 Load)) nil) Load) s_append Load) (list (Name &i:11 Load)) nil))) nil None) (Return (Name &dic:11 Load))) nil None None) (FunctionDef &__str__:1 (arguments nil (list (arg &self:12 None None)) None nil nil None nil) (/seq (Return (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (GeneratorExp (Call (Attribute (Constant s-WzEyMywgMTI1LCA1OCwgMzIsIDEyMywgMTI1XQ== None) s_format Load) (list (Name &r:16 Load) (Call (Attribute (Name &self:12 Load) s_members Load) (list (Name &r:16 Load)) nil)) nil) (list (comprehension (Name &r:16 Store) (Call (Attribute (Name &self:12 Load) s_roots Load) nil nil) nil i0)))) nil))) nil None None)) nil) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &n:2 Store) (Name &m:2 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &ans:2 Store)) (List nil Load) None) (Assign (list (Name &UF:2 Store)) (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:2 Load) Add (Constant i1 None))) nil) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:2 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &q:2 Store)) (Call (Name g_list Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Subscript (Name &q:2 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &x:2 Store)) (Constant i0 None) None) (Assign (list (Name &y:2 Store)) (Subscript (Name &q:2 Load) (Constant i1 None) Load) None)) (/seq (Assign (list (Name &x:2 Store)) (Subscript (Name &q:2 Load) (Constant i1 None) Load) None) (Assign (list (Name &y:2 Store)) (Subscript (Name &q:2 Load) (Constant i2 None) Load) None))) (If (UnaryOp Not (Call (Attribute (Name &UF:2 Load) s_same Load) (list (Name &x:2 Load) (Name &y:2 Load)) nil)) (/seq (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (Name &i:2 Load)) nil)) (Expr (Call (Attribute (Name &UF:2 Load) s_union Load) (list (Name &x:2 Load) (Name &y:2 Load)) nil))) nil)) nil None) (Assign (list (Name &cnt:2 Store)) (Constant i0 None) None) (For (Name &x:2 Store) (Call (Attribute (Name &UF:2 Load) s_roots Load) nil nil) (/seq (AugAssign (Name &cnt:2 Store) Add (BinOp (Call (Attribute (Name &UF:2 Load) s_size Load) (list (Name &x:2 Load)) nil) Sub (Constant i1 None)))) nil None) (Assign (list (Name &t:2 Store)) (Call (Name g_pow Load) (list (Constant i2 None) (Name &cnt:2 Load) (Name &MOD:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Name &t:2 Load) (Call (Name g_len Load) (list (Name &ans:2 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:2 Load) Load)) nil))) nil None None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Constant i1 None)) nil) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil None)) nil)",
            "(Module (/seq (Import (list (alias g_os None) (alias g_sys None))) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (ImportFrom s_collections (list (alias g_deque None)) i0) (FunctionDef &find:0 (arguments nil (list (arg &parent:3 None None) (arg &x:3 None None)) None nil nil None nil) (/seq (If (Compare (Name &x:3 Load) (list Eq) (list (Subscript (Name &parent:3 Load) (Name &x:3 Load) Load))) (/seq (Return (Name &x:3 Load))) nil) (Assign (list (Subscript (Name &parent:3 Load) (Name &x:3 Load) Store)) (Call (Name &find:0 Load) (list (Name &parent:3 Load) (Subscript (Name &parent:3 Load) (Name &x:3 Load) Load)) nil) None) (Return (Subscript (Name &parent:3 Load) (Name &x:3 Load) Load))) nil None None) (FunctionDef &union:0 (arguments nil (list (arg &parent:4 None None) (arg &a:4 None None) (arg &b:4 None None) (arg &rank:4 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &a:4 Store) (Name &b:4 Store)) Store)) (Tuple (list (Call (Name &find:0 Load) (list (Name &parent:4 Load) (Name &a:4 Load)) nil) (Call (Name &find:0 Load) (list (Name &parent:4 Load) (Name &b:4 Load)) nil)) Load) None) (If (Compare (Name &a:4 Load) (list NotEq) (list (Name &b:4 Load))) (/seq (If (Compare (Subscript (Name &rank:4 Load) (Name &a:4 Load) Load) (list Lt) (list (Subscript (Name &rank:4 Load) (Name &b:4 Load) Load))) (/seq (Assign (list (Tuple (list (Name &a:4 Store) (Name &b:4 Store)) Store)) (Tuple (list (Name &b:4 Load) (Name &a:4 Load)) Load) None)) nil) (Assign (list (Subscript (Name &parent:4 Load) (Name &b:4 Load) Store)) (Name &a:4 Load) None) (If (Compare (Subscript (Name &rank:4 Load) (Name &a:4 Load) Load) (list Eq) (list (Subscript (Name &rank:4 Load) (Name &b:4 Load) Load))) (/seq (AugAssign (Subscript (Name &rank:4 Load) (Name &a:4 Load) Store) Add (Constant i1 None))) nil) (Return (Constant i1 None))) nil) (Return (Constant i0 None))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &n:5 Store) (Name &m:5 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Tuple (list (Name &ans:5 Store) (Name &rank:5 Store)) Store)) (Tuple (list (List nil Load) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &m:5 Load))) Load) None) (Assign (list (Tuple (list (Name &parent:5 Store) (Name &inde:5 Store) (Name &path:5 Store)) Store)) (Tuple (list (ListComp (Name &i:11 Load) (list (comprehension (Name &i:11 Store) (Call (Name g_range Load) (list (Name &m:5 Load)) nil) nil i0))) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &m:5 Load)) (ListComp (List nil Load) (list (comprehension (Name &_:12 Store) (Call (Name g_range Load) (list (Name &m:5 Load)) nil) nil i0)))) Load) None) (For (Name &i:5 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:5 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &x:5 Store)) (Call (Name g_list Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Subscript (Name &x:5 Load) (Constant i0 None) Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &a:5 Store)) (BinOp (Subscript (Name &x:5 Load) (Constant i1 None) Load) Sub (Constant i1 None)) None) (If (UnaryOp Not (Subscript (Name &inde:5 Load) (Name &a:5 Load) Load)) (/seq (Assign (list (Name &curr:5 Store)) (Call (Name g_deque Load) (list (List (list (Name &a:5 Load)) Load)) nil) None) (While (Call (Name g_len Load) (list (Name &curr:5 Load)) nil) (/seq (Assign (list (Name &xx:5 Store)) (Call (Attribute (Name &curr:5 Load) s_popleft Load) nil nil) None) (Assign (list (Subscript (Name &inde:5 Load) (Name &xx:5 Load) Store)) (Constant i1 None) None) (For (Name &z:5 Store) (Subscript (Name &path:5 Load) (Name &xx:5 Load) Load) (/seq (If (UnaryOp Not (Subscript (Name &inde:5 Load) (Name &z:5 Load) Load)) (/seq (Assign (list (Subscript (Name &inde:5 Load) (Name &z:5 Load) Store)) (Constant i1 None) None) (Expr (Call (Attribute (Name &curr:5 Load) s_append Load) (list (Name &z:5 Load)) nil))) nil)) nil None) (Assign (list (Subscript (Name &path:5 Load) (Name &xx:5 Load) Store)) (List nil Load) None)) nil) (Expr (Call (Attribute (Name &ans:5 Load) s_append Load) (list (Name &i:5 Load)) nil))) nil)) (/seq (Assign (list (Tuple (list (Name &a:5 Store) (Name &b:5 Store)) Store)) (Tuple (list (BinOp (Subscript (Name &x:5 Load) (Constant i1 None) Load) Sub (Constant i1 None)) (BinOp (Subscript (Name &x:5 Load) (Constant i2 None) Load) Sub (Constant i1 None))) Load) None) (If (BoolOp And (list (BoolOp Or (list (UnaryOp Not (Subscript (Name &inde:5 Load) (Name &a:5 Load) Load)) (UnaryOp Not (Subscript (Name &inde:5 Load) (Name &b:5 Load) Load)))) (Call (Name &union:0 Load) (list (Name &parent:5 Load) (Name &a:5 Load) (Name &b:5 Load) (Name &rank:5 Load)) nil))) (/seq (Expr (Call (Attribute (Subscript (Name &path:5 Load) (Name &a:5 Load) Load) s_append Load) (list (Name &b:5 Load)) nil)) (Expr (Call (Attribute (Subscript (Name &path:5 Load) (Name &b:5 Load) Load) s_append Load) (list (Name &a:5 Load)) nil)) (If (BoolOp Or (list (Subscript (Name &inde:5 Load) (Name &a:5 Load) Load) (Subscript (Name &inde:5 Load) (Name &b:5 Load) Load))) (/seq (Assign (list (Name &curr:5 Store)) (Call (Name g_deque Load) (list (List (list (Name &a:5 Load)) Load)) nil) None) (While (Call (Name g_len Load) (list (Name &curr:5 Load)) nil) (/seq (Assign (list (Name &xx:5 Store)) (Call (Attribute (Name &curr:5 Load) s_popleft Load) nil nil) None) (Assign (list (Subscript (Name &inde:5 Load) (Name &xx:5 Load) Store)) (Constant i1 None) None) (For (Name &z:5 Store) (Subscript (Name &path:5 Load) (Name &xx:5 Load) Load) (/seq (If (UnaryOp Not (Subscript (Name &inde:5 Load) (Name &z:5 Load) Load)) (/seq (Assign (list (Subscript (Name &inde:5 Load) (Name &z:5 Load) Store)) (Constant i1 None) None) (Expr (Call (Attribute (Name &curr:5 Load) s_append Load) (list (Name &z:5 Load)) nil))) nil)) nil None) (Assign (list (Subscript (Name &path:5 Load) (Name &xx:5 Load) Store)) (List nil Load) None)) nil)) nil) (Expr (Call (Attribute (Name &ans:5 Load) s_append Load) (list (Name &i:5 Load)) nil))) nil)))) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &ans:5 Load)) nil) (fn_1)) nil) (Call (Name g_len Load) (list (Name &ans:5 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:5 Load) Load)) nil))) nil None None) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name g_IOBase Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:6 None None) (arg &file:6 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:6 Load) s__fd Store)) (Call (Attribute (Name &file:6 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:6 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None) (Assign (list (Attribute (Name &self:6 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:6 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:6 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:6 Load) s_write Store)) (IfExp (Attribute (Name &self:6 Load) s_writable Load) (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:7 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:7 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:7 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:7 Load)) (/seq Break) nil) (Assign (list (Name &ptr:7 Store)) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_tell Load) nil nil) None) (fn_3 &ptr:7 &self:7 &b:7)) nil) (Assign (list (Attribute (Name &self:7 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:8 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:8 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:8 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:8 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:8 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:8 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:8 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:8 Load))) None) (Assign (list (Name &ptr:8 Store)) (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_tell Load) nil nil) None) (fn_3 &ptr:8 &self:8 &b:8)) nil) (AugAssign (Attribute (Name &self:8 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:9 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:9 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name g_os Load) s_write Load) (list (Attribute (Name &self:9 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name g_IOBase Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:10 None None) (arg &file:10 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:10 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:10 Load)) nil) None) (Assign (list (Attribute (Name &self:10 Load) s_flush Store)) (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:10 Load) s_writable Store)) (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:10 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:13 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:13 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:10 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:10 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil)) None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (Import (list (alias g_sys None))) (Import (list (alias g_bisect None))) (Import (list (alias g_math None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &mod:0 Store)) (Constant i1000000007 None) None) (ClassDef &UnionFind:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_parent Store)) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:2 Load)) nil)) nil) None)) nil None None) (FunctionDef &find:1 (arguments nil (list (arg &self:3 None None) (arg &a:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &acopy:3 Store)) (Name &a:3 Load) None) (While (Compare (Name &a:3 Load) (list NotEq) (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load))) (/seq (Assign (list (Name &a:3 Store)) (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &a:3 Load) Load) None)) nil) (While (Compare (Name &acopy:3 Load) (list NotEq) (list (Name &a:3 Load))) (/seq (Assign (list (Tuple (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Store) (Name &acopy:3 Store)) Store)) (Tuple (list (Name &a:3 Load) (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &acopy:3 Load) Load)) Load) None)) nil) (Return (Name &a:3 Load))) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &self:4 None None) (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &b:4 Load)) nil) Store)) (Call (Attribute (Name &self:4 Load) s_find Load) (list (Name &a:4 Load)) nil) None)) nil None None)) nil) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &UF:0 Store)) (Call (Name &UnionFind:0 Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil) None) (Assign (list (Name &MOD:0 Store)) (fn_1) None) (Assign (list (Name &out:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &l:0 Store)) (Call (Name g_list Load) (list (fn_2 &input:0)) nil) None) (If (Compare (Call (Name g_len Load) (list (Name &l:0 Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &u:0 Store)) (Constant i0 None) None) (Assign (list (Name &v:0 Store)) (Subscript (Name &l:0 Load) (Constant i1 None) Load) None)) (/seq (Assign (list (Tuple (list (Name &_:0 Store) (Name &u:0 Store) (Name &v:0 Store)) Store)) (Name &l:0 Load) None))) (Assign (list (Name &uu:0 Store)) (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &u:0 Load)) nil) None) (Assign (list (Name &vv:0 Store)) (Call (Attribute (Name &UF:0 Load) s_find Load) (list (Name &v:0 Load)) nil) None) (If (Compare (Name &uu:0 Load) (list NotEq) (list (Name &vv:0 Load))) (/seq (Expr (Call (Attribute (Name &UF:0 Load) s_union Load) (list (Name &uu:0 Load) (Name &vv:0 Load)) nil)) (Expr (Call (Attribute (Name &out:0 Load) s_append Load) (list (Name &i:0 Load)) nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &out:0 Load)) nil) (Name &MOD:0 Load)) nil) (Call (Name g_len Load) (list (Name &out:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &out:0 Load)) nil)) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_os None))) (Import (list (alias g_sys None))) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name g_IOBase Load)) nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:6 None None) (arg &file:6 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:6 Load) s_newlines Store)) (Constant i0 None) None) (Assign (list (Attribute (Name &self:6 Load) s__fd Store)) (Call (Attribute (Name &file:6 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:6 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None) (Assign (list (Attribute (Name &self:6 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:6 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:6 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:6 Load) s_write Store)) (IfExp (Attribute (Name &self:6 Load) s_writable Load) (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:7 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:7 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:7 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:7 Load)) (/seq Break) nil) (Assign (list (Name &ptr:7 Store)) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_tell Load) nil nil) None) (fn_3 &ptr:7 &self:7 &b:7)) nil) (Assign (list (Attribute (Name &self:7 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:8 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:8 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:8 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:8 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:8 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:8 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:8 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:8 Load))) None) (Assign (list (Name &ptr:8 Store)) (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_tell Load) nil nil) None) (fn_3 &ptr:8 &self:8 &b:8)) nil) (AugAssign (Attribute (Name &self:8 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:9 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:9 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name g_os Load) s_write Load) (list (Attribute (Name &self:9 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name g_IOBase Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:10 None None) (arg &file:10 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:10 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:10 Load)) nil) None) (Assign (list (Attribute (Name &self:10 Load) s_flush Store)) (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:10 Load) s_writable Store)) (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:10 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:11 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:11 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:10 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:10 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)) None) (FunctionDef &RL:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &RLL:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (FunctionDef &N:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))) nil None None) (FunctionDef &S:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &print_list:0 (arguments nil (list (arg &l:3 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &l:3 Load)) nil)) nil)) nil))) nil None None) (FunctionDef &find:0 (arguments nil (list (arg &region:4 None None) (arg &u:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &path:4 Store)) (List nil Load) None) (While (Compare (Name &u:4 Load) (list NotEq) (list (Subscript (Name &region:4 Load) (Name &u:4 Load) Load))) (/seq (Expr (Call (Attribute (Name &path:4 Load) s_append Load) (list (Name &u:4 Load)) nil)) (Assign (list (Name &u:4 Store)) (Subscript (Name &region:4 Load) (Name &u:4 Load) Load) None)) nil) (For (Name &v:4 Store) (Name &path:4 Load) (/seq (Assign (list (Subscript (Name &region:4 Load) (Name &v:4 Load) Store)) (Name &u:4 Load) None)) nil None) (Return (Name &u:4 Load))) nil None None) (FunctionDef &union:0 (arguments nil (list (arg &region:5 None None) (arg &u:5 None None) (arg &v:5 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &u:5 Store) (Name &v:5 Store)) Store)) (Tuple (list (Call (Name &find:0 Load) (list (Name &region:5 Load) (Name &u:5 Load)) nil) (Call (Name &find:0 Load) (list (Name &region:5 Load) (Name &v:5 Load)) nil)) Load) None) (Assign (list (Subscript (Name &region:5 Load) (Name &u:5 Load) Store)) (Name &v:5 Load) None) (Return (Compare (Name &u:5 Load) (list NotEq) (list (Name &v:5 Load))))) nil None None) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (Call (Name &RL:0 Load) nil nil) None) (Assign (list (Tuple (list (Name &M:0 Store) (Name &ans:0 Store) (Name &res:0 Store) (Name &region:0 Store)) Store)) (Tuple (list (fn_1) (List nil Load) (Constant i1 None) (Call (Name g_list Load) (list (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)) nil)) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &s:0 Store)) (Call (Name &RLL:0 Load) nil nil) None) (Assign (list (Name &t:0 Store)) (IfExp (Compare (Subscript (Name &s:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i2 None))) (Subscript (Name &s:0 Load) (Constant i2 None) Load) (Constant i0 None)) None) (If (Call (Name &union:0 Load) (list (Name &region:0 Load) (Subscript (Name &s:0 Load) (Constant i1 None) Load) (Name &t:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &i:0 Load)) nil)) (Assign (list (Name &res:0 Store)) (BinOp (BinOp (Name &res:0 Load) LShift (Constant i1 None)) Mod (Name &M:0 Load)) None)) nil)) nil None) (Expr (Call (Name g_print Load) (list (Name &res:0 Load) (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)) nil)) (Expr (Call (Name &print_list:0 Load) (list (Name &ans:0 Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load) None) (ClassDef &UnionFind:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None) (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_parent Store)) (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &n:2 Load)) None) (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Name &n:2 Load) None) (Assign (list (Attribute (Name &self:2 Load) s_cnt Store)) (Name &n:2 Load) None)) nil None None) (FunctionDef &root:1 (arguments nil (list (arg &self:3 None None) (arg &x:3 None None)) None nil nil None nil) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &x:3 Load) Load) (list Lt) (list (Constant i0 None))) (/seq (Return (Name &x:3 Load))) (/seq (Assign (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &x:3 Load) Store)) (Call (Attribute (Name &self:3 Load) s_root Load) (list (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &x:3 Load) Load)) nil) None) (Return (Subscript (Attribute (Name &self:3 Load) s_parent Load) (Name &x:3 Load) Load))))) nil None None) (FunctionDef &merge:1 (arguments nil (list (arg &self:4 None None) (arg &x:4 None None) (arg &y:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &x:4 Store)) (Call (Attribute (Name &self:4 Load) s_root Load) (list (Name &x:4 Load)) nil) None) (Assign (list (Name &y:4 Store)) (Call (Attribute (Name &self:4 Load) s_root Load) (list (Name &y:4 Load)) nil) None) (If (Compare (Name &x:4 Load) (list Eq) (list (Name &y:4 Load))) (/seq (Return (Constant False None))) nil) (If (Compare (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &x:4 Load) Load) (list Gt) (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &y:4 Load) Load))) (/seq (Assign (list (Tuple (list (Name &x:4 Store) (Name &y:4 Store)) Store)) (Tuple (list (Name &y:4 Load) (Name &x:4 Load)) Load) None)) nil) (AugAssign (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &x:4 Load) Store) Add (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &y:4 Load) Load)) (Assign (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &y:4 Load) Store)) (Name &x:4 Load) None) (AugAssign (Attribute (Name &self:4 Load) s_cnt Store) Sub (Constant i1 None)) (Return (Constant True None))) nil None None) (FunctionDef &is_same:1 (arguments nil (list (arg &self:5 None None) (arg &x:5 None None) (arg &y:5 None None)) None nil nil None nil) (/seq (Return (Compare (Call (Attribute (Name &self:5 Load) s_root Load) (list (Name &x:5 Load)) nil) (list Eq) (list (Call (Attribute (Name &self:5 Load) s_root Load) (list (Name &y:5 Load)) nil))))) nil None None) (FunctionDef &size:1 (arguments nil (list (arg &self:6 None None) (arg &x:6 None None)) None nil nil None nil) (/seq (Return (UnaryOp USub (Subscript (Attribute (Name &self:6 Load) s_parent Load) (Call (Attribute (Name &self:6 Load) s_root Load) (list (Name &x:6 Load)) nil) Load)))) nil None None) (FunctionDef &count:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (Return (Attribute (Name &self:7 Load) s_cnt Load))) nil None None) (FunctionDef &groups:1 (arguments nil (list (arg &self:8 None None)) None nil nil None nil) (/seq (Assign (list (Name &res:8 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:11 Store) (Call (Name g_range Load) (list (Attribute (Name &self:8 Load) s_n Load)) nil) nil i0))) None) (For (Name &i:8 Store) (Call (Name g_range Load) (list (Attribute (Name &self:8 Load) s_n Load)) nil) (/seq (Expr (Call (Attribute (Subscript (Name &res:8 Load) (Call (Attribute (Name &self:8 Load) s_root Load) (list (Name &i:8 Load)) nil) Load) s_append Load) (list (Name &i:8 Load)) nil))) nil None) (Return (ListComp (Name &group:10 Load) (list (comprehension (Name &group:10 Store) (Name &res:8 Load) (list (Name &group:10 Load)) i0))))) nil None None)) nil) (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (fn_2 &input:0) None) (Assign (list (Name &info:0 Store)) (ListComp (Call (Name g_list Load) (list (fn_2 &input:0)) nil) (list (comprehension (Name &i:9 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Assign (list (Name &MOD:0 Store)) (fn_1) None) (Assign (list (Name &uf:0 Store)) (Call (Name &UnionFind:0 Load) (list (Name &m:0 Load)) nil) None) (Assign (list (Name &start:0 Store)) (List nil Load) None) (Assign (list (Name &res:0 Store)) (List nil Load) None) (For (Tuple (list (Name &i:0 Store) (Tuple (list (Name &k:0 Store) (Starred (Name &vs:0 Store) Store)) Store)) Store) (Call (Name g_enumerate Load) (list (Name &info:0 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Name &vs:0 Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Name &vs:0 Load) None) (AugAssign (Name &u:0 Store) Sub (Constant i1 None)) (AugAssign (Name &v:0 Store) Sub (Constant i1 None)) (If (UnaryOp Not (Call (Attribute (Name &uf:0 Load) s_is_same Load) (list (Name &u:0 Load) (Name &v:0 Load)) nil)) (/seq (Expr (Call (Attribute (Name &uf:0 Load) s_merge Load) (list (Name &u:0 Load) (Name &v:0 Load)) nil)) (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil))) nil)) (/seq (Assign (list (Name &u:0 Store)) (BinOp (Subscript (Name &vs:0 Load) (Constant i0 None) Load) Sub (Constant i1 None)) None) (If (Name &start:0 Load) (/seq (If (UnaryOp Not (Call (Attribute (Name &uf:0 Load) s_is_same Load) (list (Subscript (Name &start:0 Load) (UnaryOp USub (Constant i1 None)) Load) (Name &u:0 Load)) nil)) (/seq (Expr (Call (Attribute (Name &uf:0 Load) s_merge Load) (list (Subscript (Name &start:0 Load) (UnaryOp USub (Constant i1 None)) Load) (Name &u:0 Load)) nil)) (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) (Expr (Call (Attribute (Name &start:0 Load) s_append Load) (list (Name &u:0 Load)) nil))) nil)) (/seq (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) (Expr (Call (Attribute (Name &start:0 Load) s_append Load) (list (Name &u:0 Load)) nil))))))) nil None) (Expr (Call (Name g_print Load) (list (Call (Name g_pow Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &res:0 Load)) nil) (Name &MOD:0 Load)) nil) (Call (Name g_len Load) (list (Name &res:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Starred (Name &res:0 Load) Load)) nil))) nil)"
        ]
    }
]
