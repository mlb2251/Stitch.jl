["(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n      None\n    )\n    (Assign (list (Name &l:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) None)\n    (If\n      (Compare (Name &k:0 Load) (list LtE) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))))\n      (/seq (Expr (Call (Name g_print Load) (list (Name &k:0 Load)) nil)))\n      (/seq\n        (While\n          (Compare (Name &k:0 Load) (list Gt) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))))\n          (/seq\n            (AugAssign (Name &k:0 Store) Sub (Constant i1 None))\n            (AugAssign (Name &l:0 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call (Name g_min Load) (list (Name &k:0 Load) (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))) nil)\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_str Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &p:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n      None\n    )\n    (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None)\n    (Assign (list (Name &f:0 Store)) (Call (Name g_min Load) (list (Name &p:0 Load) (Name &q:0 Load)) nil) None)\n    (Expr (Call (Name g_print Load) (list (Name &f:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &y:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call (Attribute (Name &y:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call (Name g_min Load) (list (BinOp (Name &a:0 Load) FloorDiv (Constant i11 None)) (Name &x:0 Load)) nil)\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &nb_8:0 Store)) (Constant i0 None) None)\n    (If\n      (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None)))\n      (/seq\n        (While\n          (BinOp\n            (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load)))\n            BitAnd\n            (Compare\n              (BinOp (Name &n:0 Load) Sub (BinOp (Name &nb_8:0 Load) Mult (Constant i11 None)))\n              (list Gt)\n              (list (Constant i10 None))\n            )\n          )\n          (/seq\n            (If\n              (Compare (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant s_8 None)))\n              (/seq (AugAssign (Name &nb_8:0 Store) Add (Constant i1 None)))\n              nil\n            )\n            (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n      )\n      nil\n    )\n    (Expr (Call (Name g_print Load) (list (Name &nb_8:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &eights:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &others:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &elem:0 Store)\n      (Call (Name g_input Load) nil nil)\n      (/seq\n        (If\n          (Compare (Call (Name g_int Load) (list (Name &elem:0 Load)) nil) (list Eq) (list (Constant i8 None)))\n          (/seq (AugAssign (Name &eights:0 Store) Add (Constant i1 None)))\n          (/seq (AugAssign (Name &others:0 Store) Add (Constant i1 None)))\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &answer:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (If\n          (Compare (Name &eights:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq Break)\n          (/seq\n            (AugAssign (Name &eights:0 Store) Sub (Constant i1 None))\n            (If\n              (Compare (Name &others:0 Load) (list GtE) (list (Constant i10 None)))\n              (/seq\n                (AugAssign (Name &others:0 Store) Sub (Constant i10 None))\n                (AugAssign (Name &answer:0 Store) Add (Constant i1 None))\n              )\n              (/seq\n                (If\n                  (Compare\n                    (BinOp (Name &eights:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load)))\n                    (list GtE)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (AugAssign (Name &eights:0 Store) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load)))\n                    (Assign (list (Name &others:0 Store)) (Constant i0 None) None)\n                    (AugAssign (Name &answer:0 Store) Add (Constant i1 None))\n                  )\n                  (/seq Break)\n                )\n              )\n            )\n          )\n        )\n      )\n      nil\n    )\n    (Expr (Call (Name g_print Load) (list (Name &answer:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_heapq None)))\n    (ImportFrom s_decimal (list (alias g_* None)) i0)\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0)\n    (FunctionDef\n      &r:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &rm:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &rl:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name &r:0 Load) nil nil) None)\n    (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &num:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (AugAssign\n          (Subscript\n            (Name &num:0 Load)\n            (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil)\n            Store\n          )\n          Add\n          (Constant i1 None)\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n      (/seq\n        (Assign\n          (list (Name &tot:0 Store))\n          (BinOp (Name &n:0 Load) Sub (Subscript (Name &num:0 Load) (Constant i8 None) Load))\n          None\n        )\n        (Assign (list (Name &strips:0 Store)) (BinOp (Name &tot:0 Load) FloorDiv (Constant i10 None)) None)\n        (Assign (list (Name &rem:0 Store)) (BinOp (Name &tot:0 Load) Mod (Constant i10 None)) None)\n        (If\n          (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list LtE) (list (Name &strips:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &num:0 Load) (Constant i8 None) Load)) nil)))\n          (/seq\n            (Assign (list (Name &ans:0 Store)) (Name &strips:0 Load) None)\n            (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Sub (Name &strips:0 Load))\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (BinOp (Subscript (Name &num:0 Load) (Constant i8 None) Load) FloorDiv (Constant i11 None))\n            )\n            (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Mod (Constant i11 None))\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (IfExp\n                (Compare\n                  (BinOp\n                    (BinOp (Name &rem:0 Load) Add (Subscript (Name &num:0 Load) (Constant i8 None) Load))\n                    Sub\n                    (Constant i1 None)\n                  )\n                  (list GtE)\n                  (list (Constant i10 None))\n                )\n                (Constant i1 None)\n                (Constant i0 None)\n              )\n            )\n            (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Attribute (Name &a:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (While\n      (BoolOp\n        And\n        (list\n          (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None)))\n          (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None)))\n        )\n      )\n      (/seq\n        (AugAssign (Name &s:0 Store) Add (Constant i1 None))\n        (AugAssign (Name &n:0 Store) Sub (Constant i11 None))\n        (AugAssign (Name &k:0 Store) Sub (Constant i1 None))\n      )\n      nil\n    )\n    (Expr (Call (Name g_print Load) (list (Name &s:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None)\n    (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (Name &a:0 Load) (Name &b:0 Load)) nil)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &c:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n      None\n    )\n    (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None)\n    (If\n      (Compare (Name &c:0 Load) (list GtE) (list (Name &x:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &c:0 Load) (list Lt) (list (Name &x:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &s:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None)))\n          (/seq (Assign (list (Name &count:0 Store)) (BinOp (Name &count:0 Load) Add (Constant i1 None)) None))\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Name &count:0 Load) (list NotEq) (list (Constant i0 None)))\n      (/seq\n        (Assign (list (Name &p:0 Store)) (BinOp (Name &N:0 Load) Div (Constant i11 None)) None)\n        (If\n          (Compare (Name &p:0 Load) (list Gt) (list (Name &count:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &count:0 Load)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &p:0 Load)) nil)) nil)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n    )\n  )\n  nil\n)"]