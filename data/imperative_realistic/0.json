["(Module\n  (/seq\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &l:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &l:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Constant i2 None) (list In) (list (Name &l:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (ClassDef\n      &D1AddOnATree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &dfs:1\n          (arguments nil (list (arg &self:2 None None) (arg &start:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Subscript (Attribute (Name &self:2 Load) s_done Load) (Name &start:2 Load) Store))\n              (Constant i1 None)\n              None\n            )\n            (For\n              (Name &x:2 Store)\n              (Subscript (Attribute (Name &self:2 Load) s_adj Load) (Name &start:2 Load) Load)\n              (/seq\n                (If (Subscript (Attribute (Name &self:2 Load) s_done Load) (Name &x:2 Load) Load) (/seq Continue) nil)\n                (Assign\n                  (list (Subscript (Attribute (Name &self:2 Load) s_par Load) (Name &x:2 Load) Store))\n                  (Name &start:2 Load)\n                  None\n                )\n                (Expr (Call (Attribute (Name &self:2 Load) s_dfs Load) (list (Name &x:2 Load)) nil))\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &solve:1\n          (arguments nil (list (arg &self:3 None None)) None nil nil None nil)\n          (/seq\n            (ImportFrom s_collections (list (alias &defaultdict:3 None)) i0)\n            (Import (list (alias &sys:3 None)))\n            (Expr\n              (Call\n                (Attribute (Name &sys:3 Load) s_setrecursionlimit Load)\n                (list (BinOp (BinOp (Constant i10 None) Pow (Constant i5 None)) Add (Constant i5 None)))\n                nil\n              )\n            )\n            (Assign\n              (list (Name &n:3 Store))\n              (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_adj Store))\n              (Call (Name &defaultdict:3 Load) (list (Name g_list Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_par Store))\n              (Call (Name &defaultdict:3 Load) (list (Name g_int Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_done Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None)))\n              None\n            )\n            (For\n              (Name &i:3 Store)\n              (Call (Name g_range Load) (list (BinOp (Name &n:3 Load) Sub (Constant i1 None))) nil)\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &u:3 Store) (Name &v:3 Store)) Store))\n                  (ListComp\n                    (Call (Name g_int Load) (list (Name &_:4 Load)) nil)\n                    (list\n                      (comprehension\n                        (Name &_:4 Store)\n                        (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &u:3 Load) Load)\n                      s_append\n                      Load\n                    )\n                    (list (Name &v:3 Load))\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &v:3 Load) Load)\n                      s_append\n                      Load\n                    )\n                    (list (Name &u:3 Load))\n                    nil\n                  )\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:3 Load) s_done Load) (Name &u:3 Load) Store)\n                  Add\n                  (Constant i1 None)\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:3 Load) s_done Load) (Name &v:3 Load) Store)\n                  Add\n                  (Constant i1 None)\n                )\n              )\n              nil\n              None\n            )\n            (For\n              (Name &i:3 Store)\n              (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:3 Load) Add (Constant i1 None))) nil)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Attribute (Name &self:3 Load) s_done Load) (Name &i:3 Load) Load)\n                    (list Eq)\n                    (list (Constant i2 None))\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break)\n                  nil\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n              None\n            )\n            (Return None)\n            (Assign\n              (list (Name &v:3 Store))\n              (Call\n                (Name g_max Load)\n                (list\n                  (GeneratorExp\n                    (Call\n                      (Name g_len Load)\n                      (list (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &p:5 Load) Load))\n                      nil\n                    )\n                    (list (comprehension (Name &p:5 Store) (Attribute (Name &self:3 Load) s_adj Load) nil i0))\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &start:3 Store)) (UnaryOp USub (Constant i1 None)) None)\n            (For\n              (Name &p:3 Store)\n              (Attribute (Name &self:3 Load) s_adj Load)\n              (/seq\n                (If\n                  (Compare\n                    (Call\n                      (Name g_len Load)\n                      (list (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &p:3 Load) Load))\n                      nil\n                    )\n                    (list Eq)\n                    (list (Name &v:3 Load))\n                  )\n                  (/seq (Assign (list (Name &start:3 Store)) (Name &p:3 Load) None) Break)\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Assert (Compare (Name &start:3 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) None)\n            (Expr (Call (Attribute (Name &self:3 Load) s_dfs Load) (list (Name &start:3 Load)) nil))\n            (Assign\n              (list (Name &cnt:3 Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None)))\n              None\n            )\n            (For\n              (Name &k:3 Store)\n              (Attribute (Name &self:3 Load) s_adj Load)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &k:3 Load) Load)\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq Continue)\n                  nil\n                )\n                (If\n                  (Compare\n                    (Call\n                      (Name g_len Load)\n                      (list (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &k:3 Load) Load))\n                      nil\n                    )\n                    (list Eq)\n                    (list (Constant i1 None))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript\n                        (Name &cnt:3 Load)\n                        (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &k:3 Load) Load)\n                        Store\n                      )\n                      Add\n                      (Constant i1 None)\n                    )\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (Assign (list (Name &ans:3 Store)) (Constant i0 None) None)\n            (For\n              (Name &x:3 Store)\n              (Name &cnt:3 Load)\n              (/seq\n                (If\n                  (Compare (Name &x:3 Load) (list Eq) (list (Constant i1 None)))\n                  (/seq (AugAssign (Name &ans:3 Store) Add (Constant i1 None)))\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (If\n              (Compare (Name &ans:3 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &solver:0 Store)) (Call (Name &D1AddOnATree:0 Load) nil nil) None)\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Expr (Call (Attribute (Name &solver:0 Load) s_solve Load) nil nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &deg:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &u:0 Store) Sub (Constant i1 None))\n        (AugAssign (Name &v:0 Store) Sub (Constant i1 None))\n        (AugAssign (Subscript (Name &deg:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &deg:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (For\n      (Name &d:0 Store)\n      (Name &deg:0 Load)\n      (/seq\n        (If\n          (Compare (Name &d:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n            (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0)\n    (ImportFrom s_heapq (list (alias g_heappush None) (alias g_heappop None)) i0)\n    (ImportFrom s_math (list (alias g_inf None)) i0)\n    (Assign\n      (list (Name &ri:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n          nil\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign (list (Name &cnt:1 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None)\n        (For\n          (Name &_:1 Store)\n          (Call (Name g_range Load) (list (BinOp (Name &n:1 Load) Sub (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &x:1 Store) (Name &y:1 Store)) Store))\n              (Call (Name &ri:0 Load) nil nil)\n              None\n            )\n            (AugAssign (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Store) Add (Constant i1 None))\n            (AugAssign (Subscript (Name &cnt:1 Load) (Name &y:1 Load) Store) Add (Constant i1 None))\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &valid:1 Store)) (Constant True None) None)\n        (For\n          (Name &x:1 Store)\n          (Name &cnt:1 Load)\n          (/seq\n            (If\n              (Compare (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Load) (list Eq) (list (Constant i2 None)))\n              (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None))\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (If\n          (Name &valid:1 Load)\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Constant i1 None) None)\n    (While\n      (Name &t:0 Load)\n      (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Expr (Call (Name &solve:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &tree_nums:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a1:0 Store) (Name &a2:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &tree_nums:0 Load) (BinOp (Name &a1:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &tree_nums:0 Load) (BinOp (Name &a2:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      (/seq\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n          (/seq\n            (Assign (list (Name &ans_is_no:0 Store)) (Constant False None) None)\n            (For\n              (Name &i:0 Store)\n              (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &tree_nums:0 Load) (Name &i:0 Load) Load)\n                    (list Eq)\n                    (list (Constant i2 None))\n                  )\n                  (/seq\n                    (Assign (list (Name &ans_is_no:0 Store)) (Constant True None) None)\n                    (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n                    Break\n                  )\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (If\n              (UnaryOp Not (Name &ans_is_no:0 Load))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n              nil\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &gr:0 Store))\n      (DictComp\n        (Name &i:1 Load)\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &gr:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &gr:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &gr:0 Load)\n      (/seq\n        (If\n          (Compare (Subscript (Name &gr:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n            (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &arr:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &arr:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &arr:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break)\n          nil\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &g:0 Store))\n      (ListComp\n        (List nil Load)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &d:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i100001 None)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &i:2 Load)) nil)\n            (list\n              (comprehension\n                (Name &i:2 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &g:0 Load) (Name &u:0 Load) Load) s_append Load)\n            (list (Name &v:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &g:0 Load) (Name &v:0 Load) Load) s_append Load)\n            (list (Name &u:0 Load))\n            nil\n          )\n        )\n        (AugAssign (Subscript (Name &d:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &d:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &d:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break)\n          nil\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &edges:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &edges:0 Load) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &edges:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Constant i2 None) (list In) (list (Name &edges:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &l:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &l:0 Load) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &l:0 Load) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &l:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None) (alias g_exit None)) i0)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &graph:0 Store))\n      (ListComp\n        (List nil Load)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute\n              (Subscript (Name &graph:0 Load) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) Load)\n              s_append\n              Load\n            )\n            (list (BinOp (Name &v:0 Load) Sub (Constant i1 None)))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute\n              (Subscript (Name &graph:0 Load) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) Load)\n              s_append\n              Load\n            )\n            (list (BinOp (Name &u:0 Load) Sub (Constant i1 None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (Subscript (Name &graph:0 Load) (Name &i:0 Load) Load)) nil)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_Counter None)) i0)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &x:0 Store)) (List nil Load) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &x:0 Load) s_extend Load)\n            (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (IfExp\n            (Compare\n              (Constant i2 None)\n              (list In)\n              (list (Call (Attribute (Call (Name g_Counter Load) (list (Name &x:0 Load)) nil) s_values Load) nil nil))\n            )\n            (Constant s_NO None)\n            (Constant s_YES None)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None) (alias g_os None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (ImportFrom\n      s_math\n      (list\n        (alias g_floor None)\n        (alias g_gcd None)\n        (alias g_fabs None)\n        (alias g_factorial None)\n        (alias g_fmod None)\n        (alias g_sqrt None)\n        (alias g_inf None)\n        (alias g_log None)\n      )\n      i0\n    )\n    (ImportFrom s_collections (list (alias s_defaultdict g_dd) (alias g_deque None)) i0)\n    (ImportFrom\n      s_heapq\n      (list\n        (alias g_merge None)\n        (alias g_heapify None)\n        (alias g_heappop None)\n        (alias g_heappush None)\n        (alias g_nsmallest None)\n      )\n      i0\n    )\n    (ImportFrom s_bisect (list (alias s_bisect_left g_bl) (alias s_bisect_right g_br) (alias g_bisect None)) i0)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:10 None None) (arg &file:10 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:10 Load) s__fd Store))\n              (Call (Attribute (Name &file:10 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:10 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:10 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:10 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:10 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:10 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:11 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:11 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:11 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:11 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:11 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:11 Store))\n                  (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:11 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:11 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:11 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:12 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:12 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:12 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:12 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:12 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:12 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:12 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:12 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:12 Store))\n                  (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:12 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:12 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:12 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:13 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:13 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:13 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:13 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:14 None None) (arg &file:14 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:14 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:14 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:14 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:14 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:14 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:17 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:17 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:14 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:14 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:14 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list (Tuple (list (Name &stdin:0 Store) (Name &stdout:0 Store)) Store))\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (Call (Name g_pow Load) (list (Constant i10 None) (Constant i9 None)) nil) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &mod2:0 Store)) (Constant i998244353 None) None)\n    (FunctionDef\n      &inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return (Call (Attribute (Call (Attribute (Name &stdin:0 Load) s_readline Load) nil nil) s_strip Load) nil nil))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &iinp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &inp:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &out:0\n      (arguments\n        nil\n        (list (arg &var:3 None None) (arg &end:3 None None))\n        None\n        nil\n        nil\n        None\n        (list (Constant s-WzEwXQ== None))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &stdout:0 Load) s_write Load)\n            (list (BinOp (Call (Name g_str Load) (list (Name &var:3 Load)) nil) Add (Constant s-WzEwXQ== None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &outa:0\n      (arguments\n        nil\n        nil\n        (arg &var:4 None None)\n        (list (arg &end:4 None None))\n        (list (Constant s-WzEwXQ== None))\n        None\n        nil\n      )\n      (/seq\n        (Expr\n          (Call\n            (Attribute (Name &stdout:0 Load) s_write Load)\n            (list\n              (BinOp\n                (Call\n                  (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                  (list (Call (Name g_map Load) (list (Name g_str Load) (Name &var:4 Load)) nil))\n                  nil\n                )\n                Add\n                (Name &end:4 Load)\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lmp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_list Load) (list (Call (Name &mp:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &mp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &smp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_str Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &l1d:0\n      (arguments nil (list (arg &n:5 None None) (arg &val:5 None None)) None nil nil None (list (Constant i0 None)))\n      (/seq\n        (Return\n          (ListComp\n            (Name &val:5 Load)\n            (list (comprehension (Name &i:15 Store) (Call (Name g_range Load) (list (Name &n:5 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &l2d:0\n      (arguments\n        nil\n        (list (arg &n:6 None None) (arg &m:6 None None) (arg &val:6 None None))\n        None\n        nil\n        nil\n        None\n        (list (Constant i0 None))\n      )\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name &l1d:0 Load) (list (Name &m:6 Load) (Name &val:6 Load)) nil)\n            (list (comprehension (Name &j:16 Store) (Call (Name g_range Load) (list (Name &n:6 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &remadd:0\n      (arguments nil (list (arg &x:7 None None) (arg &y:7 None None)) None nil nil None nil)\n      (/seq (Return (IfExp (BinOp (Name &x:7 Load) Mod (Name &y:7 Load)) (Constant i1 None) (Constant i0 None))))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ceil:0\n      (arguments nil (list (arg &a:8 None None) (arg &b:8 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp (BinOp (BinOp (Name &a:8 Load) Add (Name &b:8 Load)) Sub (Constant i1 None)) FloorDiv (Name &b:8 Load))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &S1:0 Store)) (Constant s_abcdefghijklmnopqrstuvwxyz None) None)\n    (Assign (list (Name &S2:0 Store)) (Constant s_ABCDEFGHIJKLMNOPQRSTUVWXYZ None) None)\n    (FunctionDef\n      &isprime:0\n      (arguments nil (list (arg &x:9 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &x:9 Load) (list LtE) (list (Constant i1 None))) (/seq (Return (Constant False None))) nil)\n        (If\n          (Compare (Name &x:9 Load) (list In) (list (Tuple (list (Constant i2 None) (Constant i3 None)) Load)))\n          (/seq (Return (Constant True None)))\n          nil\n        )\n        (If\n          (Compare (BinOp (Name &x:9 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq (Return (Constant False None)))\n          nil\n        )\n        (For\n          (Name &i:9 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Constant i3 None)\n              (BinOp\n                (Call (Name g_int Load) (list (Call (Name g_sqrt Load) (list (Name &x:9 Load)) nil)) nil)\n                Add\n                (Constant i1 None)\n              )\n              (Constant i2 None)\n            )\n            nil\n          )\n          (/seq\n            (If\n              (Compare (BinOp (Name &x:9 Load) Mod (Name &i:9 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq (Return (Constant False None)))\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (Constant True None))\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name &iinp:0 Load) nil nil) None)\n    (Assign\n      (list (Name &edges:0 Store))\n      (Call (Name &l1d:0 Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name &mp:0 Load) nil nil) None)\n        (AugAssign (Subscript (Name &edges:0 Load) (Name &x:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &edges:0 Load) (Name &y:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &flg:0 Store)) (Constant True None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &edges:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &flg:0 Store)) (Constant False None) None) Break)\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (IfExp (Name &flg:0 Load) (Constant s_YES None) (Constant s_NO None))) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &dic:0 Store)) (Dict nil nil) None)\n    (For\n      (Name &x:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &a:0 Load) (list In) (list (Name &dic:0 Load)))\n          (/seq (AugAssign (Subscript (Name &dic:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None)))\n          (/seq (Assign (list (Subscript (Name &dic:0 Load) (Name &a:0 Load) Store)) (Constant i1 None) None))\n        )\n        (If\n          (Compare (Name &b:0 Load) (list In) (list (Name &dic:0 Load)))\n          (/seq (AugAssign (Subscript (Name &dic:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None)))\n          (/seq (Assign (list (Subscript (Name &dic:0 Load) (Name &b:0 Load) Store)) (Constant i1 None) None))\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &flag:0 Store)) (Constant i5 None) None)\n    (For\n      (Name &it:0 Store)\n      (Name &dic:0 Load)\n      (/seq\n        (If\n          (Compare (Subscript (Name &dic:0 Load) (Name &it:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &flag:0 Store)) (Constant i6 None) None) Break)\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Name &flag:0 Load) (list Eq) (list (Constant i6 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &deg:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &j:2 Load)) nil)\n            (list\n              (comprehension\n                (Name &j:2 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &deg:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &deg:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant s_YES None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &deg:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &ans:0 Store)) (Constant s_NO None) None) Break)\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &neigh:0 Store))\n      (ListComp\n        (List nil Load)\n        (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &u:0 Store) Sub (Constant i1 None))\n        (AugAssign (Name &v:0 Store) Sub (Constant i1 None))\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &neigh:0 Load) (Name &u:0 Load) Load) s_append Load)\n            (list (Name &v:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &neigh:0 Load) (Name &v:0 Load) Load) s_append Load)\n            (list (Name &u:0 Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &no:0 Store)) (Constant False None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (Subscript (Name &neigh:0 Load) (Name &i:0 Load) Load)) nil)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq (Assign (list (Name &no:0 Store)) (Constant True None) None))\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Name &no:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load)\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign (list (Name &graph:0 Store)) (Dict nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq (Assign (list (Subscript (Name &graph:0 Load) (Name &i:0 Load) Store)) (List nil Load) None))\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &graph:0 Load) (Name &a:0 Load) Load) s_append Load)\n            (list (Name &b:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &graph:0 Load) (Name &b:0 Load) Load) s_append Load)\n            (list (Name &a:0 Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (Subscript (Name &graph:0 Load) (Name &i:0 Load) Load)) nil)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break)\n          nil\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &node:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Constant i1 None) Add (Name &n:0 Load))) nil)\n      (/seq (Expr (Call (Attribute (Name &node:0 Load) s_append Load) (list (List nil Load)) nil)))\n      nil\n      None\n    )\n    (For\n      (Name &q:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &k:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute\n              (Subscript (Name &node:0 Load) (Subscript (Name &k:0 Load) (Constant i0 None) Load) Load)\n              s_append\n              Load\n            )\n            (list (Subscript (Name &k:0 Load) (Constant i1 None) Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute\n              (Subscript (Name &node:0 Load) (Subscript (Name &k:0 Load) (Constant i1 None) Load) Load)\n              s_append\n              Load\n            )\n            (list (Subscript (Name &k:0 Load) (Constant i0 None) Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &hobe:0 Store)) (Constant True None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (Subscript (Name &node:0 Load) (Name &i:0 Load) Load)) nil)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq (Assign (list (Name &hobe:0 Store)) (Constant False None) None))\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Name &hobe:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_math (list (alias g_factorial None)) i0)\n    (ClassDef\n      &Node:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:5 None None) (arg &num:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:5 Load) s_num Store)) (Name &num:5 Load) None)\n            (Assign (list (Attribute (Name &self:5 Load) s_binds Store)) (List nil Load) None)\n            (Assign (list (Attribute (Name &self:5 Load) s_marker Store)) (Constant False None) None)\n            (Assign (list (Attribute (Name &self:5 Load) s_val Store)) (Constant None None) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add_bind:1\n          (arguments nil (list (arg &self:6 None None) (arg &oth:6 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Attribute (Name &self:6 Load) s_binds Load) s_append Load)\n                (list (Name &oth:6 Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__repr__:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Call\n                (Attribute\n                  (Constant s-WzYwLCAxMjMsIDEyNSwgNTgsIDMyLCAxMjMsIDEyNSwgMTIzLCAxMjUsIDYyXQ== None)\n                  s_format\n                  Load\n                )\n                (list\n                  (Attribute (Name &self:7 Load) s_num Load)\n                  (ListComp\n                    (Attribute (Name &i:11 Load) s_num Load)\n                    (list (comprehension (Name &i:11 Store) (Attribute (Name &self:7 Load) s_binds Load) nil i0))\n                  )\n                  (IfExp\n                    (Compare (Attribute (Name &self:7 Load) s_val Load) (list NotEq) (list (Constant None None)))\n                    (Call\n                      (Attribute\n                        (Constant s-WzQ0LCAzMiwgOSwgMTE4LCA5NywgMTA4LCA1OCwgMzIsIDEyMywgMTI1XQ== None)\n                        s_format\n                        Load\n                      )\n                      (list (Attribute (Name &self:7 Load) s_val Load))\n                      nil\n                    )\n                    (Constant s_ None)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &Graph:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:8 None None) (arg &size:8 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:8 Load) s_size Store)) (Name &size:8 Load) None)\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_nodes Store))\n              (BinOp\n                (List (list (Constant None None)) Load)\n                Add\n                (ListComp\n                  (Call (Name &Node:0 Load) (list (Name &num:12 Load)) nil)\n                  (list\n                    (comprehension\n                      (Name &num:12 Store)\n                      (Call\n                        (Name g_range Load)\n                        (list (Constant i1 None) (BinOp (Name &size:8 Load) Add (Constant i1 None)))\n                        nil\n                      )\n                      nil\n                      i0\n                    )\n                  )\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read_input:2\n          (arguments nil (list (arg &self:9 None None)) None nil nil None nil)\n          (/seq\n            (For\n              (Name &_:9 Store)\n              (Call (Name g_range Load) (list (Constant i1 None) (Attribute (Name &self:9 Load) s_size Load)) nil)\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &i:9 Store) (Name &j:9 Store)) Store))\n                  (GeneratorExp\n                    (Call (Name g_int Load) (list (Name &x:13 Load)) nil)\n                    (list\n                      (comprehension\n                        (Name &x:13 Store)\n                        (Call\n                          (Attribute\n                            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                            s_split\n                            Load\n                          )\n                          nil\n                          nil\n                        )\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript (Attribute (Name &self:9 Load) s_nodes Load) (Name &i:9 Load) Load)\n                      s_add_bind\n                      Load\n                    )\n                    (list (Subscript (Attribute (Name &self:9 Load) s_nodes Load) (Name &j:9 Load) Load))\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript (Attribute (Name &self:9 Load) s_nodes Load) (Name &j:9 Load) Load)\n                      s_add_bind\n                      Load\n                    )\n                    (list (Subscript (Attribute (Name &self:9 Load) s_nodes Load) (Name &i:9 Load) Load))\n                    nil\n                  )\n                )\n              )\n              nil\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__repr__:2\n          (arguments nil (list (arg &self:10 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Call\n                (Attribute (Constant s-WzEwXQ== None) s_join Load)\n                (list\n                  (GeneratorExp\n                    (Call (Name g_str Load) (list (Name &node:14 Load)) nil)\n                    (list\n                      (comprehension\n                        (Name &node:14 Store)\n                        (Subscript\n                          (Attribute (Name &self:10 Load) s_nodes Load)\n                          (Slice (Constant i1 None) None None)\n                          Load\n                        )\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &pairs:0\n      (arguments nil (list (arg &n:3 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (Call (Name g_factorial Load) (list (Name &n:3 Load)) nil)\n            FloorDiv\n            (BinOp\n              (Call (Name g_factorial Load) (list (BinOp (Name &n:3 Load) Sub (Constant i2 None))) nil)\n              Mult\n              (Constant i2 None)\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &N:0 Store))\n      (Call\n        (Name g_int Load)\n        (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &g:0 Store)) (Call (Name &Graph:0 Load) (list (Name &N:0 Load)) nil) None)\n    (Expr (Call (Attribute (Name &g:0 Load) s_read_input Load) nil nil))\n    (Assign\n      (list (Name &ends:0 Store))\n      (ListComp\n        (Name &node:4 Load)\n        (list\n          (comprehension\n            (Name &node:4 Store)\n            (Subscript (Attribute (Name &g:0 Load) s_nodes Load) (Slice (Constant i1 None) None None) Load)\n            (list\n              (Compare\n                (Call (Name g_len Load) (list (Attribute (Name &node:4 Load) s_binds Load)) nil)\n                (list Eq)\n                (list (Constant i1 None))\n              )\n            )\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &n:0 Store)\n      (Subscript (Attribute (Name &g:0 Load) s_nodes Load) (Slice (Constant i1 None) None None) Load)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (Attribute (Name &n:0 Load) s_binds Load)) nil)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break)\n          nil\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &a:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &c:0 Store) (Name &d:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &a:0 Load) (BinOp (Name &c:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &a:0 Load) (BinOp (Name &d:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &stat:0 Store)) (Compare (Constant i2 None) (list In) (list (Name &a:0 Load))) None)\n    (If\n      (Name &stat:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (ImportFrom s_collections (list (alias &deque:0 None)) i0)\n    (ClassDef\n      &Graph:0\n      (list (Name g_object Load))\n      nil\n      (/seq\n        (Expr\n          (Constant\n            s-WzEwMCwgMTExLCA5OSwgMTE1LCAxMTYsIDExNCwgMTA1LCAxMTAsIDEwMywgMzIsIDEwMiwgMTExLCAxMTQsIDMyLCA3MSwgMTE0LCA5NywgMTEyLCAxMDRd\n            None\n          )\n        )\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:2 None None) (arg &n:2 None None) (arg &d:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Attribute (Name &self:2 Load) s_n Store)) (Name &n:2 Load) None)\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_graph Store))\n              (ListComp\n                (List nil Load)\n                (list (comprehension (Name &i:9 Store) (Call (Name g_range Load) (list (Name &n:2 Load)) nil) nil i0))\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:2 Load) s_parent Store))\n              (ListComp\n                (UnaryOp USub (Constant i1 None))\n                (list (comprehension (Name &i:10 Store) (Call (Name g_range Load) (list (Name &n:2 Load)) nil) nil i0))\n              )\n              None\n            )\n            (Assign (list (Attribute (Name &self:2 Load) s_directed Store)) (Name &d:2 Load) None)\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &addEdge:1\n          (arguments nil (list (arg &self:3 None None) (arg &x:3 None None) (arg &y:3 None None)) None nil nil None nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Subscript (Attribute (Name &self:3 Load) s_graph Load) (Name &x:3 Load) Load) s_append Load)\n                (list (Name &y:3 Load))\n                nil\n              )\n            )\n            (If\n              (UnaryOp Not (Attribute (Name &self:3 Load) s_directed Load))\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript (Attribute (Name &self:3 Load) s_graph Load) (Name &y:3 Load) Load)\n                      s_append\n                      Load\n                    )\n                    (list (Name &x:3 Load))\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &bfs:1\n          (arguments nil (list (arg &self:4 None None) (arg &root:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign (list (Name &queue:4 Store)) (List (list (Name &root:4 Load)) Load) None)\n            (Assign (list (Name &queue:4 Store)) (Call (Name &deque:0 Load) (list (Name &queue:4 Load)) nil) None)\n            (Assign\n              (list (Name &vis:4 Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (Attribute (Name &self:4 Load) s_n Load))\n              None\n            )\n            (While\n              (Compare (Call (Name g_len Load) (list (Name &queue:4 Load)) nil) (list NotEq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &element:4 Store))\n                  (Call (Attribute (Name &queue:4 Load) s_popleft Load) nil nil)\n                  None\n                )\n                (Assign (list (Subscript (Name &vis:4 Load) (Name &element:4 Load) Store)) (Constant i1 None) None)\n                (Assign (list (Name &count:4 Store)) (Constant i0 None) None)\n                (For\n                  (Name &i:4 Store)\n                  (Subscript (Attribute (Name &self:4 Load) s_graph Load) (Name &element:4 Load) Load)\n                  (/seq\n                    (If\n                      (Compare (Subscript (Name &vis:4 Load) (Name &i:4 Load) Load) (list Eq) (list (Constant i0 None)))\n                      (/seq\n                        (Expr (Call (Attribute (Name &queue:4 Load) s_append Load) (list (Name &i:4 Load)) nil))\n                        (Assign\n                          (list (Subscript (Attribute (Name &self:4 Load) s_parent Load) (Name &i:4 Load) Store))\n                          (Name &element:4 Load)\n                          None\n                        )\n                        (Assign (list (Subscript (Name &vis:4 Load) (Name &i:4 Load) Store)) (Constant i1 None) None)\n                        (AugAssign (Name &count:4 Store) Add (Constant i1 None))\n                      )\n                      nil\n                    )\n                  )\n                  nil\n                  None\n                )\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare (Name &count:4 Load) (list Eq) (list (Constant i1 None)))\n                      (Compare (Name &element:4 Load) (list NotEq) (list (Name &root:4 Load)))\n                    )\n                  )\n                  (/seq (Return (Constant False None)))\n                  nil\n                )\n              )\n              nil\n            )\n            (Return (Constant True None))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &dfs:1\n          (arguments\n            nil\n            (list (arg &self:5 None None) (arg &root:5 None None) (arg &ans:5 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign (list (Name &stack:5 Store)) (List (list (Name &root:5 Load)) Load) None)\n            (Assign\n              (list (Name &vis:5 Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (Attribute (Name &self:5 Load) s_n Load))\n              None\n            )\n            (Assign (list (Name &stack2:5 Store)) (List nil Load) None)\n            (While\n              (Compare (Call (Name g_len Load) (list (Name &stack:5 Load)) nil) (list NotEq) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &element:5 Store)) (Call (Attribute (Name &stack:5 Load) s_pop Load) nil nil) None)\n                (If (Subscript (Name &vis:5 Load) (Name &element:5 Load) Load) (/seq Continue) nil)\n                (Assign (list (Subscript (Name &vis:5 Load) (Name &element:5 Load) Store)) (Constant i1 None) None)\n                (Expr (Call (Attribute (Name &stack2:5 Load) s_append Load) (list (Name &element:5 Load)) nil))\n                (For\n                  (Name &i:5 Store)\n                  (Subscript (Attribute (Name &self:5 Load) s_graph Load) (Name &element:5 Load) Load)\n                  (/seq\n                    (If\n                      (Compare (Subscript (Name &vis:5 Load) (Name &i:5 Load) Load) (list Eq) (list (Constant i0 None)))\n                      (/seq\n                        (Assign\n                          (list (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Name &i:5 Load) Store))\n                          (Name &element:5 Load)\n                          None\n                        )\n                        (Expr (Call (Attribute (Name &stack:5 Load) s_append Load) (list (Name &i:5 Load)) nil))\n                      )\n                      nil\n                    )\n                  )\n                  nil\n                  None\n                )\n              )\n              nil\n            )\n            (While\n              (Compare (Call (Name g_len Load) (list (Name &stack2:5 Load)) nil) (list NotEq) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &element:5 Store)) (Call (Attribute (Name &stack2:5 Load) s_pop Load) nil nil) None)\n                (Assign (list (Name &m:5 Store)) (Constant i0 None) None)\n                (For\n                  (Name &i:5 Store)\n                  (Subscript (Attribute (Name &self:5 Load) s_graph Load) (Name &element:5 Load) Load)\n                  (/seq\n                    (If\n                      (Compare\n                        (Name &i:5 Load)\n                        (list NotEq)\n                        (list (Subscript (Attribute (Name &self:5 Load) s_parent Load) (Name &element:5 Load) Load))\n                      )\n                      (/seq (AugAssign (Name &m:5 Store) Add (Subscript (Name &ans:5 Load) (Name &i:5 Load) Load)))\n                      nil\n                    )\n                  )\n                  nil\n                  None\n                )\n                (Assign (list (Subscript (Name &ans:5 Load) (Name &element:5 Load) Store)) (Name &m:5 Load) None)\n              )\n              nil\n            )\n            (Return (Name &ans:5 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &shortestpath:1\n          (arguments\n            nil\n            (list (arg &self:6 None None) (arg &source:6 None None) (arg &dest:6 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Expr (Call (Attribute (Name &self:6 Load) s_bfs Load) (list (Name &source:6 Load)) nil))\n            (Assign (list (Name &path:6 Store)) (List (list (Name &dest:6 Load)) Load) None)\n            (While\n              (Compare\n                (Subscript\n                  (Attribute (Name &self:6 Load) s_parent Load)\n                  (Subscript (Name &path:6 Load) (UnaryOp USub (Constant i1 None)) Load)\n                  Load\n                )\n                (list NotEq)\n                (list (UnaryOp USub (Constant i1 None)))\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &path:6 Load) s_append Load)\n                    (list\n                      (Subscript\n                        (Name g_parent Load)\n                        (Subscript (Name &path:6 Load) (UnaryOp USub (Constant i1 None)) Load)\n                        Load\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              nil\n            )\n            (Return (Subscript (Name &path:6 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &detect_cycle:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Name &indeg:7 Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (Attribute (Name &self:7 Load) s_n Load))\n              None\n            )\n            (For\n              (Name &i:7 Store)\n              (Call (Name g_range Load) (list (Attribute (Name &self:7 Load) s_n Load)) nil)\n              (/seq\n                (For\n                  (Name &j:7 Store)\n                  (Subscript (Attribute (Name &self:7 Load) s_graph Load) (Name &i:7 Load) Load)\n                  (/seq (AugAssign (Subscript (Name &indeg:7 Load) (Name &j:7 Load) Store) Add (Constant i1 None)))\n                  nil\n                  None\n                )\n              )\n              nil\n              None\n            )\n            (Assign (list (Name &q:7 Store)) (Call (Name &deque:0 Load) nil nil) None)\n            (Assign (list (Name &vis:7 Store)) (Constant i0 None) None)\n            (For\n              (Name &i:7 Store)\n              (Call (Name g_range Load) (list (Attribute (Name &self:7 Load) s_n Load)) nil)\n              (/seq\n                (If\n                  (Compare (Subscript (Name &indeg:7 Load) (Name &i:7 Load) Load) (list Eq) (list (Constant i0 None)))\n                  (/seq (Expr (Call (Attribute (Name &q:7 Load) s_append Load) (list (Name &i:7 Load)) nil)))\n                  nil\n                )\n              )\n              nil\n              None\n            )\n            (While\n              (Compare (Call (Name g_len Load) (list (Name &q:7 Load)) nil) (list NotEq) (list (Constant i0 None)))\n              (/seq\n                (Assign (list (Name &e:7 Store)) (Call (Attribute (Name &q:7 Load) s_popleft Load) nil nil) None)\n                (AugAssign (Name &vis:7 Store) Add (Constant i1 None))\n                (For\n                  (Name &i:7 Store)\n                  (Subscript (Attribute (Name &self:7 Load) s_graph Load) (Name &e:7 Load) Load)\n                  (/seq\n                    (AugAssign (Subscript (Name &indeg:7 Load) (Name &i:7 Load) Store) Sub (Constant i1 None))\n                    (If\n                      (Compare\n                        (Subscript (Name &indeg:7 Load) (Name &i:7 Load) Load)\n                        (list Eq)\n                        (list (Constant i0 None))\n                      )\n                      (/seq (Expr (Call (Attribute (Name &q:7 Load) s_append Load) (list (Name &i:7 Load)) nil)))\n                      nil\n                    )\n                  )\n                  nil\n                  None\n                )\n              )\n              nil\n            )\n            (If\n              (Compare (Name &vis:7 Load) (list NotEq) (list (Attribute (Name &self:7 Load) s_n Load)))\n              (/seq (Return (Constant True None)))\n              nil\n            )\n            (Return (Constant False None))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &reroot:1\n          (arguments\n            nil\n            (list (arg &self:8 None None) (arg &root:8 None None) (arg &ans:8 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (Assign (list (Name &stack:8 Store)) (List (list (Name &root:8 Load)) Load) None)\n            (Assign (list (Name &vis:8 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n            (While\n              (Compare (Call (Name g_len Load) (list (Name &stack:8 Load)) nil) (list NotEq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &e:8 Store))\n                  (Subscript (Name &stack:8 Load) (UnaryOp USub (Constant i1 None)) Load)\n                  None\n                )\n                (If\n                  (Subscript (Name &vis:8 Load) (Name &e:8 Load) Load)\n                  (/seq (Expr (Call (Attribute (Name &stack:8 Load) s_pop Load) nil nil)) Continue)\n                  nil\n                )\n                (Assign (list (Subscript (Name &vis:8 Load) (Name &e:8 Load) Store)) (Constant i1 None) None)\n                (For\n                  (Name &i:8 Store)\n                  (Subscript (Name g_graph Load) (Name &e:8 Load) Load)\n                  (/seq\n                    (If\n                      (UnaryOp Not (Subscript (Name &vis:8 Load) (Name &e:8 Load) Load))\n                      (/seq (Expr (Call (Attribute (Name &stack:8 Load) s_append Load) (list (Name &i:8 Load)) nil)))\n                      nil\n                    )\n                  )\n                  nil\n                  None\n                )\n                (If\n                  (Compare\n                    (Subscript (Attribute (Name &self:8 Load) s_parent Load) (Name &e:8 Load) Load)\n                    (list Eq)\n                    (list (UnaryOp USub (Constant i1 None)))\n                  )\n                  (/seq Continue)\n                  nil\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign (list (Name &g:0 Store)) (Call (Name &Graph:0 Load) (list (Name &n:0 Load) (Constant False None)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Name &g:0 Load) s_addEdge Load)\n            (list (BinOp (Name &u:0 Load) Sub (Constant i1 None)) (BinOp (Name &v:0 Load) Sub (Constant i1 None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare\n            (Call\n              (Name g_len Load)\n              (list (Subscript (Attribute (Name &g:0 Load) s_graph Load) (Name &i:0 Load) Load))\n              nil\n            )\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq (Assign (list (Name &leaf:0 Store)) (Name &i:0 Load) None) Break)\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (UnaryOp Not (Call (Attribute (Name &g:0 Load) s_bfs Load) (list (Name &leaf:0 Load)) nil))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &degree:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &a:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &i:2 Load)) nil)\n            (list\n              (comprehension\n                (Name &i:2 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign\n          (list (Name &x:0 Store))\n          (BinOp (Subscript (Name &a:0 Load) (Constant i0 None) Load) Sub (Constant i1 None))\n          None\n        )\n        (Assign\n          (list (Name &y:0 Store))\n          (BinOp (Subscript (Name &a:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n          None\n        )\n        (AugAssign (Subscript (Name &degree:0 Load) (Name &x:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &degree:0 Load) (Name &y:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &degree:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &flag:0 Store)) (Constant i1 None) None) Break)\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Name &flag:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &ar:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &ar:0 Load) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &ar:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant s_YES None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &ar:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &ans:0 Store)) (Constant s_NO None) None) Break)\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (FunctionDef\n      &getN:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &getList:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (ImportFrom s_sys (list (alias &exit:0 None)) i0)\n    (Assign (list (Name &n:0 Store)) (Call (Name &getN:0 Load) nil nil) None)\n    (Assign\n      (list (Name &vertex:0 Store))\n      (ListComp\n        (List nil Load)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call (Name &getList:0 Load) nil nil)\n          None\n        )\n        (Expr\n          (Call\n            (Attribute\n              (Subscript (Name &vertex:0 Load) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) Load)\n              s_append\n              Load\n            )\n            (list (BinOp (Name &b:0 Load) Sub (Constant i1 None)))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute\n              (Subscript (Name &vertex:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Load)\n              s_append\n              Load\n            )\n            (list (BinOp (Name &a:0 Load) Sub (Constant i1 None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &v:0 Store)\n      (Name &vertex:0 Load)\n      (/seq\n        (If\n          (Compare (Call (Name g_len Load) (list (Name &v:0 Load)) nil) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n            (Expr (Call (Name &exit:0 Load) nil nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &d:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &d:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &d:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (For\n      (Name &val:0 Store)\n      (Name &d:0 Load)\n      (/seq\n        (If\n          (Compare (Name &val:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &adj:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &iarr:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &u:0 Store))\n          (BinOp (Subscript (Name &iarr:0 Load) (Constant i0 None) Load) Sub (Constant i1 None))\n          None\n        )\n        (Assign\n          (list (Name &v:0 Store))\n          (BinOp (Subscript (Name &iarr:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n          None\n        )\n        (AugAssign (Subscript (Name &adj:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &adj:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &adj:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &flag:0 Store)) (Constant i1 None) None) Break)\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Name &flag:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &d:0 Store)) (Dict nil nil) None)\n    (Assign\n      (list (Tuple (list (Name &o:0 Store) (Name &t:0 Store)) Store))\n      (Tuple (list (Constant i0 None) (Constant i0 None)) Load)\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &s:0 Store) (Name &e:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &s:0 Load) (list In) (list (Name &d:0 Load)))\n          (/seq (AugAssign (Subscript (Name &d:0 Load) (Name &s:0 Load) Store) Add (Constant i1 None)))\n          (/seq (Assign (list (Subscript (Name &d:0 Load) (Name &s:0 Load) Store)) (Constant i1 None) None))\n        )\n        (If\n          (Compare (Name &e:0 Load) (list In) (list (Name &d:0 Load)))\n          (/seq (AugAssign (Subscript (Name &d:0 Load) (Name &e:0 Load) Store) Add (Constant i1 None)))\n          (/seq (Assign (list (Subscript (Name &d:0 Load) (Name &e:0 Load) Store)) (Constant i1 None) None))\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &d:0 Load)\n      (/seq\n        (If\n          (Compare (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i1 None)))\n          (/seq (AugAssign (Name &o:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n              (/seq (AugAssign (Name &t:0 Store) Add (Constant i1 None)))\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Name &t:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq\n        (If\n          (Compare\n            (BinOp\n              (BinOp (Name &o:0 Load) Mult (BinOp (Name &o:0 Load) Sub (Constant i1 None)))\n              FloorDiv\n              (Constant i2 None)\n            )\n            (list GtE)\n            (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n        )\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &degree:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &i:0 Store) (Name &j:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &i:2 Load)) nil)\n            (list\n              (comprehension\n                (Name &i:2 Store)\n                (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &degree:0 Load) (Name &i:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &degree:0 Load) (Name &j:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (Constant False None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &degree:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &res:0 Store)) (Constant True None) None))\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Name &res:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &tree:0 Store))\n      (ListComp\n        (List nil Load)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute\n              (Subscript (Name &tree:0 Load) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) Load)\n              s_append\n              Load\n            )\n            (list (BinOp (Name &v:0 Load) Sub (Constant i1 None)))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute\n              (Subscript (Name &tree:0 Load) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) Load)\n              s_append\n              Load\n            )\n            (list (BinOp (Name &u:0 Load) Sub (Constant i1 None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)) (Expr (Call (Name g_exit Load) nil nil)))\n      nil\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (Subscript (Name &tree:0 Load) (Name &i:0 Load) Load)) nil)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break)\n          nil\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq\n        (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &g:0 Store))\n          (ListComp\n            (List nil Load)\n            (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n          )\n          None\n        )\n        (For\n          (Name &_:0 Store)\n          (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Attribute\n                  (Subscript (Name &g:0 Load) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) Load)\n                  s_append\n                  Load\n                )\n                (list (BinOp (Name &v:0 Load) Sub (Constant i1 None)))\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Attribute\n                  (Subscript (Name &g:0 Load) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) Load)\n                  s_append\n                  Load\n                )\n                (list (BinOp (Name &u:0 Load) Sub (Constant i1 None)))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (If\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_filter Load)\n                (list\n                  (Lambda\n                    (arguments nil (list (arg &x:2 None None)) None nil nil None nil)\n                    (Compare (Call (Name g_len Load) (list (Name &x:2 Load)) nil) (list Eq) (list (Constant i2 None)))\n                  )\n                  (Name &g:0 Load)\n                )\n                nil\n              )\n            )\n            nil\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n        )\n      )\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &a:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i0 None) (BinOp (Name &n:0 Load) Add (Constant i9 None))) nil)\n      (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (Constant i0 None)) nil)))\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Subscript (Name &a:0 Load) (Name &u:0 Load) Store))\n          (BinOp (Subscript (Name &a:0 Load) (Name &u:0 Load) Load) Add (Constant i1 None))\n          None\n        )\n        (Assign\n          (list (Subscript (Name &a:0 Load) (Name &v:0 Load) Store))\n          (BinOp (Subscript (Name &a:0 Load) (Name &v:0 Load) Load) Add (Constant i1 None))\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None))\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Name &flag:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (Assign (list (Name &g:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_set Load)) nil) None)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call (Attribute (Subscript (Name &g:0 Load) (Name &u:0 Load) Load) s_add Load) (list (Name &v:0 Load)) nil)\n        )\n        (Expr\n          (Call (Attribute (Subscript (Name &g:0 Load) (Name &v:0 Load) Load) s_add Load) (list (Name &u:0 Load)) nil)\n        )\n      )\n      nil\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &n:1 None None) (arg &g:1 None None)) None nil nil None nil)\n      (/seq\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:1 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (If\n              (BoolOp\n                Or\n                (list\n                  (Compare\n                    (Call (Name g_len Load) (list (Subscript (Name &g:1 Load) (Name &i:1 Load) Load)) nil)\n                    (list Eq)\n                    (list (Constant i1 None))\n                  )\n                  (Compare\n                    (Call (Name g_len Load) (list (Subscript (Name &g:1 Load) (Name &i:1 Load) Load)) nil)\n                    (list GtE)\n                    (list (Constant i3 None))\n                  )\n                )\n              )\n              (/seq Continue)\n              (/seq (Return (Constant False None)))\n            )\n          )\n          nil\n          None\n        )\n        (Return (Constant True None))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &solution:0 Store))\n      (Call (Name &solve:0 Load) (list (Name &n:0 Load) (Name &g:0 Load)) nil)\n      None\n    )\n    (Expr\n      (Call (Name g_print Load) (list (IfExp (Name &solution:0 Load) (Constant s_YES None) (Constant s_NO None))) nil)\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &l:0 Load) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &l:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break)\n          nil\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_Counter None)) i0)\n    (ImportFrom s_sys (list (alias g_stdin None)) i0)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &lst:0 Store)) (List nil Load) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Attribute (Name &lst:0 Load) s_append Load) (list (Name &a:0 Load)) nil))\n        (Expr (Call (Attribute (Name &lst:0 Load) s_append Load) (list (Name &b:0 Load)) nil))\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &fg:0 Store)) (Constant i0 None) None)\n    (For\n      (Tuple (list (Name &_:0 Store) (Name &i:0 Store)) Store)\n      (Call (Attribute (Call (Name g_Counter Load) (list (Name &lst:0 Load)) nil) s_items Load) nil nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &fg:0 Store)) (Constant i1 None) None) Break)\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Name &fg:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &edges:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (Assign (list (Name &isPossible:0 Store)) (Constant True None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n            (list\n              (comprehension\n                (Name &i:1 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &edges:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &edges:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (For\n      (Name &d:0 Store)\n      (Name &edges:0 Load)\n      (/seq\n        (If\n          (Compare (Name &d:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &isPossible:0 Store)) (Constant False None) None) Break)\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call (Name g_print Load) (list (IfExp (Name &isPossible:0 Load) (Constant s_YES None) (Constant s_NO None))) nil)\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &adj_list:0 Store))\n      (ListComp\n        (List nil Load)\n        (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (Name &N:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &N:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &u:0 Store) Sub (Constant i1 None))\n        (AugAssign (Name &v:0 Store) Sub (Constant i1 None))\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &adj_list:0 Load) (Name &u:0 Load) Load) s_append Load)\n            (list (Name &v:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &adj_list:0 Load) (Name &v:0 Load) Load) s_append Load)\n            (list (Name &u:0 Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &num_leaf:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &node:0 Store)\n      (Call (Name g_range Load) (list (Name &N:0 Load)) nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (Subscript (Name &adj_list:0 Load) (Name &node:0 Load) Load)) nil)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n            (Expr (Call (Attribute (Name g_sys Load) s_exit Load) (list (Constant i0 None)) nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_sys (list (alias g_stdin None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (List nil Load)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &c:0 Store) (Name &d:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &a:0 Load) (BinOp (Name &c:0 Load) Sub (Constant i1 None)) Load) s_append Load)\n            (list (BinOp (Name &d:0 Load) Sub (Constant i1 None)))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &a:0 Load) (BinOp (Name &d:0 Load) Sub (Constant i1 None)) Load) s_append Load)\n            (list (BinOp (Name &c:0 Load) Sub (Constant i1 None)))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      (/seq\n        (Assign (list (Name &k:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Name &a:0 Load)\n          (/seq\n            (If\n              (Compare (Call (Name g_len Load) (list (Name &i:0 Load)) nil) (list Eq) (list (Constant i2 None)))\n              (/seq\n                (Expr (Call (Name g_exit Load) (list (Call (Name g_print Load) (list (Constant s_NO None)) nil)) nil))\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_math None)))\n    (FunctionDef\n      &read_line:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Subscript\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            (Slice None (UnaryOp USub (Constant i1 None)) None)\n            Load\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &read_int:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &read_int_line:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (Name &v:1 Load)) nil)\n            (list\n              (comprehension\n                (Name &v:1 Store)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                    s_split\n                    Load\n                  )\n                  nil\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &read_float_line:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_float Load) (list (Name &v:2 Load)) nil)\n            (list\n              (comprehension\n                (Name &v:2 Store)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                    s_split\n                    Load\n                  )\n                  nil\n                  nil\n                )\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name &read_int:0 Load) nil nil) None)\n    (Assign (list (Name &d:0 Store)) (Dict nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call (Name &read_int_line:0 Load) nil nil)\n          None\n        )\n        (If\n          (Compare (Name &u:0 Load) (list In) (list (Name &d:0 Load)))\n          (/seq (AugAssign (Subscript (Name &d:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None)))\n          (/seq (Assign (list (Subscript (Name &d:0 Load) (Name &u:0 Load) Store)) (Constant i1 None) None))\n        )\n        (If\n          (Compare (Name &v:0 Load) (list In) (list (Name &d:0 Load)))\n          (/seq (AugAssign (Subscript (Name &d:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None)))\n          (/seq (Assign (list (Subscript (Name &d:0 Load) (Name &v:0 Load) Store)) (Constant i1 None) None))\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &f:0 Store)) (Constant False None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &d:0 Load)\n      (/seq\n        (If\n          (Compare (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &f:0 Store)) (Constant True None) None))\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Name &f:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &ii:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ss:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp (Name &x:1 Load) (list (comprehension (Name &x:1 Store) (Call (Name g_input Load) nil nil) nil i0)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &si:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:3 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:3 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &mi:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &a:0 Store)) (Call (Name &ii:0 Load) nil nil) None)\n    (Assign\n      (list (Name &s:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &a:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &a:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &c:0 Store) (Name &d:0 Store)) Store))\n          (ListComp\n            (BinOp (Call (Name g_int Load) (list (Name &x:4 Load)) nil) Sub (Constant i1 None))\n            (list\n              (comprehension\n                (Name &x:4 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &s:0 Load) (Name &c:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &s:0 Load) (Name &d:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Constant i2 None) (list In) (list (Name &s:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (ImportFrom s_collections (list (alias &deque:0 None)) i0)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)) (Expr (Call (Name g_exit Load) nil nil)))\n      nil\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) nil nil)))\n      nil\n    )\n    (Assign\n      (list (Name &Edges:0 Store))\n      (ListComp\n        (List nil Load)\n        (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Lambda\n                (arguments nil (list (arg &x:3 None None)) None nil nil None nil)\n                (BinOp (Call (Name g_int Load) (list (Name &x:3 Load)) nil) Sub (Constant i1 None))\n              )\n              (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            )\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &Edges:0 Load) (Name &u:0 Load) Load) s_append Load)\n            (list (Name &v:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &Edges:0 Load) (Name &v:0 Load) Load) s_append Load)\n            (list (Name &u:0 Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Tuple (list (Name &i:0 Store) (Name &E:0 Store)) Store)\n      (Call (Name g_enumerate Load) (list (Name &Edges:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Call (Name g_len Load) (list (Name &E:0 Load)) nil) (list GtE) (list (Constant i3 None)))\n          (/seq (Assign (list (Name &root:0 Store)) (Name &i:0 Load) None) Break)\n          nil\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) nil nil)))\n      None\n    )\n    (Assign\n      (list (Name &Chi:0 Store))\n      (ListComp\n        (List nil Load)\n        (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign (list (Name &Par:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (Assign (list (Name &q:0 Store)) (Call (Name &deque:0 Load) nil nil) None)\n    (Expr (Call (Attribute (Name &q:0 Load) s_append Load) (list (Name &root:0 Load)) nil))\n    (Assign (list (Name &Used:0 Store)) (BinOp (List (list (Constant False None)) Load) Mult (Name &n:0 Load)) None)\n    (Assign (list (Subscript (Name &Used:0 Load) (Name &root:0 Load) Store)) (Constant True None) None)\n    (While\n      (Name &q:0 Load)\n      (/seq\n        (Assign (list (Name &v:0 Store)) (Call (Attribute (Name &q:0 Load) s_popleft Load) nil nil) None)\n        (For\n          (Name &c:0 Store)\n          (Subscript (Name &Edges:0 Load) (Name &v:0 Load) Load)\n          (/seq\n            (If (Subscript (Name &Used:0 Load) (Name &c:0 Load) Load) (/seq Continue) nil)\n            (Expr\n              (Call\n                (Attribute (Subscript (Name &Chi:0 Load) (Name &v:0 Load) Load) s_append Load)\n                (list (Name &c:0 Load))\n                nil\n              )\n            )\n            (Assign (list (Subscript (Name &Par:0 Load) (Name &c:0 Load) Store)) (Name &v:0 Load) None)\n            (Assign (list (Subscript (Name &Used:0 Load) (Name &c:0 Load) Store)) (Constant True None) None)\n            (Expr (Call (Attribute (Name &q:0 Load) s_append Load) (list (Name &c:0 Load)) nil))\n          )\n          nil\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &Leaf:0 Store)) (List nil Load) None)\n    (For\n      (Tuple (list (Name &v:0 Store) (Name &l:0 Store)) Store)\n      (Call (Name g_enumerate Load) (list (Name &Chi:0 Load)) nil)\n      (/seq\n        (If\n          (UnaryOp Not (Name &l:0 Load))\n          (/seq (Expr (Call (Attribute (Name &Leaf:0 Load) s_append Load) (list (Name &v:0 Load)) nil)))\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &l:0 Store)\n      (Name &Leaf:0 Load)\n      (/seq\n        (While\n          (Constant True None)\n          (/seq\n            (Assign (list (Name &p:0 Store)) (Subscript (Name &Par:0 Load) (Name &l:0 Load) Load) None)\n            (If (Compare (Name &p:0 Load) (list Eq) (list (Name &root:0 Load))) (/seq Break) nil)\n            (If\n              (Compare\n                (Call (Name g_len Load) (list (Subscript (Name &Chi:0 Load) (Name &p:0 Load) Load)) nil)\n                (list Eq)\n                (list (Constant i1 None))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              nil\n            )\n            (Assign (list (Name &l:0 Store)) (Name &p:0 Load) None)\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &nodes:0 Store))\n      (ListComp\n        (List nil Load)\n        (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign (list (Name &edges:0 Store)) (List nil Load) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Name g_int Load)\n                  (Call\n                    (Attribute (Call (Name g_input Load) nil nil) s_split Load)\n                    (list (Constant s-WzMyXQ== None))\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &u:0 Store) Sub (Constant i1 None))\n        (AugAssign (Name &v:0 Store) Sub (Constant i1 None))\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &nodes:0 Load) (Name &u:0 Load) Load) s_append Load)\n            (list (Name &v:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &nodes:0 Load) (Name &v:0 Load) Load) s_append Load)\n            (list (Name &u:0 Load))\n            nil\n          )\n        )\n        (Assign (list (Name &edge:0 Store)) (List (list (Name &u:0 Load) (Name &v:0 Load)) Load) None)\n        (Expr (Call (Attribute (Name &edges:0 Load) s_append Load) (list (Name &edge:0 Load)) nil))\n      )\n      nil\n      None\n    )\n    (Assign\n      (list (Name &leaf_nodes:0 Store))\n      (ListComp\n        (Name &node:1 Load)\n        (list\n          (comprehension\n            (Name &node:1 Store)\n            (Name &nodes:0 Load)\n            (list (Compare (Call (Name g_len Load) (list (Name &node:1 Load)) nil) (list Eq) (list (Constant i1 None))))\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &num_ads:0 Store))\n      (ListComp\n        (Call (Name g_len Load) (list (Name &node:3 Load)) nil)\n        (list (comprehension (Name &node:3 Store) (Name &nodes:0 Load) nil i0))\n      )\n      None\n    )\n    (If\n      (Compare (Constant i2 None) (list In) (list (Name &num_ads:0 Load)))\n      (/seq (Assign (list (Name &out:0 Store)) (Constant s_NO None) None))\n      (/seq (Assign (list (Name &out:0 Store)) (Constant s_YES None) None))\n    )\n    (Expr (Call (Name g_print Load) (list (Name &out:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &hash:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_list Load)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &hash:0 Load) (Name &a:0 Load) Load) s_append Load)\n            (list (Name &b:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &hash:0 Load) (Name &b:0 Load) Load) s_append Load)\n            (list (Name &a:0 Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Attribute (Name &hash:0 Load) s_keys Load) nil nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (Subscript (Name &hash:0 Load) (Name &i:0 Load) Load)) nil)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) Break)\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Name &flag:0 Load)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call\n          (Name g_list Load)\n          (list\n            (Call\n              (Name g_map Load)\n              (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n              nil\n            )\n          )\n          nil\n        )\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &tree:0 Store))\n      (ListComp\n        (List nil Load)\n        (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Expr\n          (Call\n            (Attribute\n              (Subscript\n                (Name &tree:0 Load)\n                (BinOp\n                  (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n                  Sub\n                  (Constant i1 None)\n                )\n                Load\n              )\n              s_append\n              Load\n            )\n            (list\n              (BinOp\n                (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n                Sub\n                (Constant i1 None)\n              )\n            )\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute\n              (Subscript\n                (Name &tree:0 Load)\n                (BinOp\n                  (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)\n                  Sub\n                  (Constant i1 None)\n                )\n                Load\n              )\n              s_append\n              Load\n            )\n            (list\n              (BinOp\n                (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)\n                Sub\n                (Constant i1 None)\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (Subscript (Name &tree:0 Load) (Name &i:0 Load) Load)) nil)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &num:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &deg:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &num:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (Name &num:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n            (list\n              (comprehension\n                (Name &i:1 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &deg:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &deg:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &num:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &deg:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n            (Expr (Call (Attribute (Name g_sys Load) s_exit Load) nil nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_collections (list (alias g_deque None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (FunctionDef\n      &ii:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &mi:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute (Call (Attribute (Call (Name &input:0 Load) nil nil) s_rstrip Load) nil nil) s_split Load)\n                nil\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &lmi:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list\n                  (Name g_int Load)\n                  (Call\n                    (Attribute\n                      (Call (Attribute (Call (Name &input:0 Load) nil nil) s_rstrip Load) nil nil)\n                      s_split\n                      Load\n                    )\n                    nil\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &li:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list (Call (Attribute (Call (Name &input:0 Load) nil nil) s_rstrip Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (ClassDef\n      &Graph:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:1\n          (arguments\n            nil\n            (list\n              (arg &self:3 None None)\n              (arg &n:3 None None)\n              (arg &Weighted:3 None None)\n              (arg &Directed:3 None None)\n              (arg &Matrix:3 None None)\n            )\n            None\n            nil\n            nil\n            None\n            (list (Constant False None) (Constant True None) (Constant False None))\n          )\n          (/seq\n            (Assign (list (Attribute (Name &self:3 Load) s_sz Store)) (Name &n:3 Load) None)\n            (Assign (list (Attribute (Name &self:3 Load) s_is_Weighted Store)) (Name &Weighted:3 Load) None)\n            (Assign (list (Attribute (Name &self:3 Load) s_is_Directed Store)) (Name &Directed:3 Load) None)\n            (Assign (list (Attribute (Name &self:3 Load) s_is_Matrix Store)) (Name &Matrix:3 Load) None)\n            (If\n              (Name &Matrix:3 Load)\n              (/seq\n                (If\n                  (Name &Weighted:3 Load)\n                  (/seq\n                    (Assign\n                      (list (Attribute (Name &self:3 Load) s_graph Store))\n                      (ListComp\n                        (ListComp\n                          (Constant i0 None)\n                          (list\n                            (comprehension\n                              (Name &_i:14 Store)\n                              (Call (Name g_range Load) (list (Name &n:3 Load)) nil)\n                              nil\n                              i0\n                            )\n                          )\n                        )\n                        (list\n                          (comprehension\n                            (Name &_j:12 Store)\n                            (Call (Name g_range Load) (list (Name &n:3 Load)) nil)\n                            nil\n                            i0\n                          )\n                        )\n                      )\n                      None\n                    )\n                  )\n                  (/seq\n                    (Assign\n                      (list (Attribute (Name &self:3 Load) s_graph Store))\n                      (ListComp\n                        (ListComp\n                          (Constant i0 None)\n                          (list\n                            (comprehension\n                              (Name &_i:15 Store)\n                              (Call (Name g_range Load) (list (Name &n:3 Load)) nil)\n                              nil\n                              i0\n                            )\n                          )\n                        )\n                        (list\n                          (comprehension\n                            (Name &_j:13 Store)\n                            (Call (Name g_range Load) (list (Name &n:3 Load)) nil)\n                            nil\n                            i0\n                          )\n                        )\n                      )\n                      None\n                    )\n                  )\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Attribute (Name &self:3 Load) s_graph Store))\n                  (ListComp\n                    (List nil Load)\n                    (list\n                      (comprehension (Name &_i:10 Store) (Call (Name g_range Load) (list (Name &n:3 Load)) nil) nil i0)\n                    )\n                  )\n                  None\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_weighted_add_edge:1\n          (arguments\n            nil\n            (list (arg &self:4 None None) (arg &x:4 None None) (arg &y:4 None None) (arg &w:4 None None))\n            None\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Attribute (Name &self:4 Load) s_is_Matrix Load)\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Subscript (Attribute (Name &self:4 Load) s_graph Load) (Name &x:4 Load) Load)\n                      (Name &y:4 Load)\n                      Store\n                    )\n                  )\n                  (Name &w:4 Load)\n                  None\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript (Attribute (Name &self:4 Load) s_graph Load) (Name &x:4 Load) Load)\n                      s_append\n                      Load\n                    )\n                    (list (Tuple (list (Name &y:4 Load) (Name &w:4 Load)) Load))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_unweighted_add_edge:1\n          (arguments nil (list (arg &self:5 None None) (arg &x:5 None None) (arg &y:5 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:5 Load) s_is_Matrix Load)\n              (/seq\n                (Assign\n                  (list\n                    (Subscript\n                      (Subscript (Attribute (Name &self:5 Load) s_graph Load) (Name &x:5 Load) Load)\n                      (Name &y:5 Load)\n                      Store\n                    )\n                  )\n                  (Constant i1 None)\n                  None\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript (Attribute (Name &self:5 Load) s_graph Load) (Name &x:5 Load) Load)\n                      s_append\n                      Load\n                    )\n                    (list (Name &y:5 Load))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &add_edge:1\n          (arguments\n            nil\n            (list (arg &self:6 None None) (arg &x:6 None None) (arg &y:6 None None))\n            (arg &w:6 None None)\n            nil\n            nil\n            None\n            nil\n          )\n          (/seq\n            (If\n              (Attribute (Name &self:6 Load) s_is_Directed Load)\n              (/seq\n                (If\n                  (Attribute (Name &self:6 Load) s_is_Weighted Load)\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &self:6 Load) s__weighted_add_edge Load)\n                        (list (Name &x:6 Load) (Name &y:6 Load) (Subscript (Name &w:6 Load) (Constant i0 None) Load))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &self:6 Load) s__unweighted_add_edge Load)\n                        (list (Name &x:6 Load) (Name &y:6 Load))\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Attribute (Name &self:6 Load) s_is_Weighted Load)\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &self:6 Load) s__weighted_add_edge Load)\n                        (list (Name &x:6 Load) (Name &y:6 Load) (Subscript (Name &w:6 Load) (Constant i0 None) Load))\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &self:6 Load) s__weighted_add_edge Load)\n                        (list (Name &y:6 Load) (Name &x:6 Load) (Subscript (Name &w:6 Load) (Constant i0 None) Load))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &self:6 Load) s__unweighted_add_edge Load)\n                        (list (Name &x:6 Load) (Name &y:6 Load))\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &self:6 Load) s__unweighted_add_edge Load)\n                        (list (Name &y:6 Load) (Name &x:6 Load))\n                        nil\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &_convert_to_maxrix:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq\n            (If (Attribute (Name &self:7 Load) s_is_Matrix Load) (/seq (Return (Name &self:7 Load))) nil)\n            (Assign\n              (list (Name &mat_g:7 Store))\n              (Call\n                (Attribute (Name &self:7 Load) s___class__ Load)\n                (list (Attribute (Name &self:7 Load) s_sz Load))\n                (list\n                  (keyword s_Weighted (Attribute (Name &self:7 Load) s_is_Weighted Load))\n                  (keyword s_Directed (Attribute (Name &self:7 Load) s_is_Directed Load))\n                  (keyword s_Matrix (Constant True None))\n                )\n              )\n              None\n            )\n            (If\n              (Attribute (Name &self:7 Load) s_is_Weighted Load)\n              (/seq\n                (For\n                  (Name &i:7 Store)\n                  (Call (Name g_range Load) (list (Attribute (Name &self:7 Load) s_sz Load)) nil)\n                  (/seq\n                    (For\n                      (Name &j:7 Store)\n                      (Subscript (Attribute (Name &self:7 Load) s_graph Load) (Name &i:7 Load) Load)\n                      (/seq\n                        (Expr\n                          (Call\n                            (Attribute (Name &mat_g:7 Load) s_add_edge Load)\n                            (list\n                              (Name &i:7 Load)\n                              (Subscript (Name &j:7 Load) (Constant i0 None) Load)\n                              (Subscript (Name &j:7 Load) (Constant i1 None) Load)\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      nil\n                      None\n                    )\n                  )\n                  nil\n                  None\n                )\n              )\n              (/seq\n                (For\n                  (Name &i:7 Store)\n                  (Call (Name g_range Load) (list (Attribute (Name &self:7 Load) s_sz Load)) nil)\n                  (/seq\n                    (For\n                      (Name &j:7 Store)\n                      (Subscript (Attribute (Name &self:7 Load) s_graph Load) (Name &i:7 Load) Load)\n                      (/seq\n                        (Expr\n                          (Call\n                            (Attribute (Name &mat_g:7 Load) s_add_edge Load)\n                            (list (Name &i:7 Load) (Name &j:7 Load))\n                            nil\n                          )\n                        )\n                      )\n                      nil\n                      None\n                    )\n                  )\n                  nil\n                  None\n                )\n              )\n            )\n            (Return (Name &mat_g:7 Load))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__getitem__:1\n          (arguments nil (list (arg &self:8 None None) (arg &n:8 None None)) None nil nil None nil)\n          (/seq (Return (Subscript (Attribute (Name &self:8 Load) s_graph Load) (Name &n:8 Load) Load)))\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &__str__:1\n          (arguments nil (list (arg &self:9 None None)) None nil nil None nil)\n          (/seq\n            (Return\n              (Call\n                (Name g_str Load)\n                (list\n                  (ListComp\n                    (Subscript (Attribute (Name &self:9 Load) s_graph Load) (Name &i:11 Load) Load)\n                    (list\n                      (comprehension\n                        (Name &i:11 Store)\n                        (Call (Name g_range Load) (list (Attribute (Name &self:9 Load) s_sz Load)) nil)\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:2 Store)) (Call (Name &ii:0 Load) nil nil) None)\n        (Assign\n          (list (Name &g:2 Store))\n          (Call (Name &Graph:0 Load) (list (Name &n:2 Load)) (list (keyword s_Directed (Constant False None))))\n          None\n        )\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (BinOp (Name &n:2 Load) Sub (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &s:2 Store) (Name &t:2 Store)) Store))\n              (Call (Name &mi:0 Load) nil nil)\n              None\n            )\n            (Expr\n              (Call\n                (Attribute (Name &g:2 Load) s_add_edge Load)\n                (list (BinOp (Name &s:2 Load) Sub (Constant i1 None)) (BinOp (Name &t:2 Load) Sub (Constant i1 None)))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (Name &n:2 Load)) nil)\n          (/seq\n            (If\n              (Compare\n                (Call (Name g_len Load) (list (Subscript (Name &g:2 Load) (Name &i:2 Load) Load)) nil)\n                (list Eq)\n                (list (Constant i2 None))\n              )\n              (/seq Break)\n              nil\n            )\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n            (Expr (Call (Attribute (Name g_sys Load) s_exit Load) nil nil))\n          )\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &tr:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &tr:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &tr:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &tr:0 Load)\n      (/seq\n        (If\n          (Compare (Subscript (Name &tr:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break)\n          nil\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0)\n    (Import\n      (list\n        (alias g_sys None)\n        (alias g_heapq None)\n        (alias g_bisect None)\n        (alias g_math None)\n        (alias g_itertools None)\n        (alias g_string None)\n        (alias g_queue None)\n        (alias g_copy None)\n        (alias g_time None)\n      )\n    )\n    (Expr\n      (Call\n        (Attribute (Name g_sys Load) s_setrecursionlimit Load)\n        (list (BinOp (Constant i10 None) Pow (Constant i8 None)))\n        nil\n      )\n    )\n    (Assign (list (Name &INF:0 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign (list (Name &eps:0 Store)) (BinOp (Constant i10 None) Pow (UnaryOp USub (Constant i7 None))) None)\n    (FunctionDef\n      &inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &inpl:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &inpl_str:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &N:0 Store)) (Call (Name &inp:0 Load) nil nil) None)\n    (Assign (list (Name &cnt:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &N:0 Load)) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &N:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name &inpl:0 Load) nil nil) None)\n        (AugAssign\n          (Subscript (Name &cnt:0 Load) (BinOp (Name &x:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &cnt:0 Load) (BinOp (Name &y:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &c:0 Store)\n      (Name &cnt:0 Load)\n      (/seq\n        (If\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break)\n          nil\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &g:0 Store)) (Dict nil nil) None)\n    (Assign (list (Name &p:0 Store)) (Dict nil nil) None)\n    (Assign (list (Name &path:0 Store)) (Dict nil nil) None)\n    (Assign (list (Name &flg:0 Store)) (Constant True None) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &u:0 Load) (list NotIn) (list (Name &g:0 Load)))\n          (/seq (Assign (list (Subscript (Name &g:0 Load) (Name &u:0 Load) Store)) (List nil Load) None))\n          nil\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &g:0 Load) (Name &u:0 Load) Load) s_append Load)\n            (list (Name &v:0 Load))\n            nil\n          )\n        )\n        (If\n          (Compare (Name &v:0 Load) (list NotIn) (list (Name &g:0 Load)))\n          (/seq (Assign (list (Subscript (Name &g:0 Load) (Name &v:0 Load) Store)) (List nil Load) None))\n          nil\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &g:0 Load) (Name &v:0 Load) Load) s_append Load)\n            (list (Name &u:0 Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &flg:0 Store)) (Constant s_YES None) None)\n    (For\n      (Name &x:0 Store)\n      (Name &g:0 Load)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (Subscript (Name &g:0 Load) (Name &x:0 Load) Load)) nil)\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq Continue)\n          nil\n        )\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (Subscript (Name &g:0 Load) (Name &x:0 Load) Load)) nil)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq (Assign (list (Name &flg:0 Store)) (Constant s_NO None) None) Break)\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &flg:0 Load)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:8 None None) (arg &file:8 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:8 Load) s__fd Store))\n              (Call (Attribute (Name &file:8 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:8 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:8 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:8 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:8 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:9 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:9 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:9 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:9 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:9 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:9 Store))\n                  (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:9 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:9 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:9 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:10 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:10 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:10 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:10 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:10 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:10 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:10 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:10 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:10 Store))\n                  (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:10 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:10 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:10 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:10 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:11 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:11 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:11 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:11 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:12 None None) (arg &file:12 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:12 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:12 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:12 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:12 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:12 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:19 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:19 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:12 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:12 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:12 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &list2d:0\n      (arguments nil (list (arg &a:4 None None) (arg &b:4 None None) (arg &c:4 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (ListComp\n            (BinOp (List (list (Name &c:4 Load)) Load) Mult (Name &b:4 Load))\n            (list (comprehension (Name &i:14 Store) (Call (Name g_range Load) (list (Name &a:4 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &list3d:0\n      (arguments\n        nil\n        (list (arg &a:5 None None) (arg &b:5 None None) (arg &c:5 None None) (arg &d:5 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Return\n          (ListComp\n            (ListComp\n              (BinOp (List (list (Name &d:5 Load)) Load) Mult (Name &c:5 Load))\n              (list (comprehension (Name &j:20 Store) (Call (Name g_range Load) (list (Name &b:5 Load)) nil) nil i0))\n            )\n            (list (comprehension (Name &i:15 Store) (Call (Name g_range Load) (list (Name &a:5 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &list4d:0\n      (arguments\n        nil\n        (list (arg &a:6 None None) (arg &b:6 None None) (arg &c:6 None None) (arg &d:6 None None) (arg &e:6 None None))\n        None\n        nil\n        nil\n        None\n        nil\n      )\n      (/seq\n        (Return\n          (ListComp\n            (ListComp\n              (ListComp\n                (BinOp (List (list (Name &e:6 Load)) Load) Mult (Name &d:6 Load))\n                (list (comprehension (Name &j:22 Store) (Call (Name g_range Load) (list (Name &c:6 Load)) nil) nil i0))\n              )\n              (list (comprehension (Name &j:21 Store) (Call (Name g_range Load) (list (Name &b:6 Load)) nil) nil i0))\n            )\n            (list (comprehension (Name &i:16 Store) (Call (Name g_range Load) (list (Name &a:6 Load)) nil) nil i0))\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ceil:0\n      (arguments nil (list (arg &x:7 None None) (arg &y:7 None None)) None nil nil None (list (Constant i1 None)))\n      (/seq\n        (Return\n          (Call\n            (Name g_int Load)\n            (list (UnaryOp USub (BinOp (UnaryOp USub (Name &x:7 Load)) FloorDiv (Name &y:7 Load))))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &Yes:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_Yes None)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &No:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_No None)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &YES:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &NO:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &INF:0 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None)\n    (Assign\n      (list (Name &MOD:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Import (list (alias &threading:0 None)))\n    (Expr\n      (Call\n        (Attribute (Name &threading:0 Load) s_stack_size Load)\n        (list (BinOp (Constant i10 None) Pow (Constant i8 None)))\n        nil\n      )\n    )\n    (Assign\n      (list (Name &Ri:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (ListComp\n          (Call (Name g_int Load) (list (Name &x:17 Load)) nil)\n          (list\n            (comprehension\n              (Name &x:17 Store)\n              (Call\n                (Attribute\n                  (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n              nil\n              i0\n            )\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &ri:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load)\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:3 Store)) (Call (Name g_int Load) (list (Call (Name &ri:0 Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &g:3 Store))\n          (ListComp\n            (List nil Load)\n            (list (comprehension (Name &i:18 Store) (Call (Name g_range Load) (list (Name &n:3 Load)) nil) nil i0))\n          )\n          None\n        )\n        (For\n          (Name &i:3 Store)\n          (Call (Name g_range Load) (list (BinOp (Name &n:3 Load) Sub (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &a:3 Store) (Name &b:3 Store)) Store))\n              (Call (Name &Ri:0 Load) nil nil)\n              None\n            )\n            (AugAssign (Name &a:3 Store) Sub (Constant i1 None))\n            (AugAssign (Name &b:3 Store) Sub (Constant i1 None))\n            (Expr\n              (Call\n                (Attribute (Subscript (Name &g:3 Load) (Name &a:3 Load) Load) s_append Load)\n                (list (Name &b:3 Load))\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Attribute (Subscript (Name &g:3 Load) (Name &b:3 Load) Load) s_append Load)\n                (list (Name &a:3 Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (Assign (list (Name &flag:3 Store)) (List (list (Constant True None)) Load) None)\n        (FunctionDef\n          &dfs1:3\n          (arguments nil (list (arg &cur:13 None None) (arg &par:13 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Compare\n                (Call (Name g_len Load) (list (Subscript (Name &g:3 Load) (Name &cur:13 Load) Load)) nil)\n                (list Eq)\n                (list (Constant i2 None))\n              )\n              (/seq\n                (Assign (list (Subscript (Name &flag:3 Load) (Constant i0 None) Store)) (Constant False None) None)\n                (Return None)\n              )\n              nil\n            )\n            (For\n              (Name &child:13 Store)\n              (Subscript (Name &g:3 Load) (Name &cur:13 Load) Load)\n              (/seq\n                (If (Compare (Name &child:13 Load) (list Eq) (list (Name &par:13 Load))) (/seq Continue) nil)\n                (Expr (Call (Name &dfs1:3 Load) (list (Name &child:13 Load) (Name &cur:13 Load)) nil))\n              )\n              nil\n              None\n            )\n            (Return None)\n          )\n          nil\n          None\n          None\n        )\n        (Expr (Call (Name &dfs1:3 Load) (list (Constant i0 None) (UnaryOp USub (Constant i1 None))) nil))\n        (If\n          (Subscript (Name &flag:3 Load) (Constant i0 None) Load)\n          (/seq (Expr (Call (Name &YES:0 Load) nil nil)))\n          (/seq (Expr (Call (Name &NO:0 Load) nil nil)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Call\n        (Attribute\n          (Call (Attribute (Name &threading:0 Load) s_Thread Load) nil (list (keyword s_target (Name &solve:0 Load))))\n          s_start\n          Load\n        )\n        nil\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &deg:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &deg:0 Load) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &deg:0 Load) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Call\n        (Name g_all Load)\n        (list\n          (GeneratorExp\n            (Compare (Name &i:1 Load) (list NotEq) (list (Constant i2 None)))\n            (list (comprehension (Name &i:1 Store) (Name &deg:0 Load) nil i0))\n          )\n        )\n        nil\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_log2 None)) i0)\n    (ImportFrom s_collections (list (alias g_defaultdict None)) i0)\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Expr\n      (Constant\n        s-WzEwLCAxMDIsIDExMSwgMTE0LCAzMiwgNjcsIDY1LCA4MywgNjksIDgzLCAzMiwgMTA1LCAxMTAsIDMyLCAxMTQsIDk3LCAxMTAsIDEwMywgMTAxLCA0MCwgMTA1LCAxMTAsIDExNiwgNDAsIDEwNSwgMTEwLCAxMTIsIDExNywgMTE2LCA0MCwgNDEsIDQxLCA0MSwgNTgsIDEwLCAxMTAsIDQ0LCAzMiwgMTA5LCAzMiwgNjEsIDMyLCAxMDksIDk3LCAxMTIsIDQwLCAxMDUsIDExMCwgMTE2LCA0NCwgMzIsIDEwNSwgMTEwLCAxMTIsIDExNywgMTE2LCA0MCwgNDEsIDQ2LCAxMTUsIDExMiwgMTA4LCAxMDUsIDExNiwgNDAsIDQxLCA0MSwgMTAsIDExMCwgMzIsIDYxLCAzMiwgMTA1LCAxMTAsIDExNiwgNDAsIDEwNSwgMTEwLCAxMTIsIDExNywgMTE2LCA0MCwgNDEsIDQxLCAxMCwgNjUsIDMyLCA2MSwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDAsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAzMiwgMTA1LCAxMTAsIDExMiwgMTE3LCAxMTYsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCA0MSwgMTAsIDgzLCAzMiwgNjEsIDMyLCAxMDUsIDExMCwgMTEyLCAxMTcsIDExNiwgNDAsIDQxLCA0NiwgMTE1LCAxMTYsIDExNCwgMTA1LCAxMTIsIDQwLCA0MSwgMTAsIDExNSwgMTIxLCAxMTUsIDQ2LCAxMTUsIDExNiwgMTAwLCAxMTEsIDExNywgMTE2LCA0NiwgMTE5LCAxMTQsIDEwNSwgMTE2LCAxMDEsIDQwLCAzNCwgMzIsIDM0LCA0NiwgMTA2LCAxMTEsIDEwNSwgMTEwLCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTE1LCAxMTYsIDExNCwgNDQsIDk3LCAxMTAsIDExNSwgNDEsIDQxLCA0MywgMzQsIDEwLCAzNCwgNDEsIDEwXQ==\n        None\n      )\n    )\n    (Assign (list (Name &inf:0 Store)) (Constant i100000000000000000 None) None)\n    (Assign (list (Name &mod:0 Store)) (Constant i998244353 None) None)\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign (list (Name &A:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_list Load)) nil) None)\n    (Assign (list (Name &ru:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &x:0 Store) Sub (Constant i1 None))\n        (AugAssign (Name &y:0 Store) Sub (Constant i1 None))\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &A:0 Load) (Name &x:0 Load) Load) s_append Load)\n            (list (Name &y:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &A:0 Load) (Name &y:0 Load) Load) s_append Load)\n            (list (Name &x:0 Load))\n            nil\n          )\n        )\n        (AugAssign (Subscript (Name &ru:0 Load) (Name &x:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &ru:0 Load) (Name &y:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &num:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &ru:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &flag:0 Store)) (Constant i0 None) None))\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Name &flag:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_yes None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_no None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &g:0 Store))\n      (ListComp\n        (List nil Load)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &u:0 Store) Sub (Constant i1 None))\n        (AugAssign (Name &v:0 Store) Sub (Constant i1 None))\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &g:0 Load) (Name &u:0 Load) Load) s_append Load)\n            (list (Name &v:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &g:0 Load) (Name &v:0 Load) Load) s_append Load)\n            (list (Name &u:0 Load))\n            nil\n          )\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &v:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare\n            (Call (Name g_len Load) (list (Subscript (Name &g:0 Load) (Name &v:0 Load) Load)) nil)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n            (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &A:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &a:0 Load)) None)\n    (Assign (list (Name &k:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &a:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &q:0 Store) (Name &w:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &A:0 Load) (BinOp (Name &q:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (If\n          (Compare\n            (Subscript (Name &A:0 Load) (BinOp (Name &q:0 Load) Sub (Constant i1 None)) Load)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &A:0 Load) (BinOp (Name &q:0 Load) Sub (Constant i1 None)) Load)\n                (list Eq)\n                (list (Constant i3 None))\n              )\n              (/seq (AugAssign (Name &k:0 Store) Sub (Constant i1 None)))\n              nil\n            )\n          )\n        )\n        (AugAssign\n          (Subscript (Name &A:0 Load) (BinOp (Name &w:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (If\n          (Compare\n            (Subscript (Name &A:0 Load) (BinOp (Name &w:0 Load) Sub (Constant i1 None)) Load)\n            (list Eq)\n            (list (Constant i2 None))\n          )\n          (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None)))\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &A:0 Load) (BinOp (Name &w:0 Load) Sub (Constant i1 None)) Load)\n                (list Eq)\n                (list (Constant i3 None))\n              )\n              (/seq (AugAssign (Name &k:0 Store) Sub (Constant i1 None)))\n              nil\n            )\n          )\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Name &k:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &dep:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq (Expr (Call (Attribute (Name &dep:0 Load) s_append Load) (list (Constant i0 None)) nil)))\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n          None\n        )\n        (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Name &a:0 Load)) nil) None)\n        (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (Name &b:0 Load)) nil) None)\n        (Assign\n          (list (Subscript (Name &dep:0 Load) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) Store))\n          (BinOp\n            (Subscript (Name &dep:0 Load) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) Load)\n            Add\n            (Constant i1 None)\n          )\n          None\n        )\n        (Assign\n          (list (Subscript (Name &dep:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Store))\n          (BinOp\n            (Subscript (Name &dep:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Load)\n            Add\n            (Constant i1 None)\n          )\n          None\n        )\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &good:0 Store)) (Constant i1 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &dep:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Name &good:0 Store)) (Constant i0 None) None))\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Name &good:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:3 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &d:3 Store))\n          (ListComp\n            (List nil Load)\n            (list (comprehension (Name &_:9 Store) (Call (Name g_range Load) (list (Name &n:3 Load)) nil) nil i0))\n          )\n          None\n        )\n        (For\n          (Name &i:3 Store)\n          (Call (Name g_range Load) (list (BinOp (Name &n:3 Load) Sub (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &u:3 Store) (Name &v:3 Store)) Store))\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n              None\n            )\n            (AugAssign (Name &u:3 Store) Sub (Constant i1 None))\n            (AugAssign (Name &v:3 Store) Sub (Constant i1 None))\n            (Expr\n              (Call\n                (Attribute (Subscript (Name &d:3 Load) (Name &u:3 Load) Load) s_append Load)\n                (list (Name &v:3 Load))\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Attribute (Subscript (Name &d:3 Load) (Name &v:3 Load) Load) s_append Load)\n                (list (Name &u:3 Load))\n                nil\n              )\n            )\n          )\n          nil\n          None\n        )\n        (For\n          (Name &i:3 Store)\n          (Call (Name g_range Load) (list (Name &n:3 Load)) nil)\n          (/seq\n            (If\n              (Compare\n                (Call (Name g_len Load) (list (Subscript (Name &d:3 Load) (Name &i:3 Load) Load)) nil)\n                (list Eq)\n                (list (Constant i2 None))\n              )\n              (/seq\n                (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n                (Expr (Call (Name g_exit Load) nil nil))\n              )\n              nil\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:4 None None) (arg &file:4 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:4 Load) s__fd Store))\n              (Call (Attribute (Name &file:4 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:4 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:4 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:4 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:4 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:4 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:5 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:5 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:5 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:5 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:5 Load)) (/seq Break) nil)\n                (Assign\n                  (list (Name &ptr:5 Store))\n                  (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:5 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:5 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (Assign (list (Attribute (Name &self:5 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:6 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:6 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:6 Store))\n                  (Call\n                    (Attribute (Name g_os Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:6 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name g_os Load) s_fstat Load)\n                              (list (Attribute (Name &self:6 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:6 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:6 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:6 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:6 Store))\n                  (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:6 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:6 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n            (AugAssign (Attribute (Name &self:6 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:7 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name g_os Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:7 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              nil\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name g_IOBase Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:8 None None) (arg &file:8 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:8 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:10 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:10 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:8 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      nil\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &tree:0 Store)) (Dict nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:1 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (If\n          (Compare (Name &a:0 Load) (list NotIn) (list (Name &tree:0 Load)))\n          (/seq (Assign (list (Subscript (Name &tree:0 Load) (Name &a:0 Load) Store)) (Constant i1 None) None))\n          (/seq (AugAssign (Subscript (Name &tree:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None)))\n        )\n        (If\n          (Compare (Name &b:0 Load) (list NotIn) (list (Name &tree:0 Load)))\n          (/seq (Assign (list (Subscript (Name &tree:0 Load) (Name &b:0 Load) Store)) (Constant i1 None) None))\n          (/seq (AugAssign (Subscript (Name &tree:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None)))\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &item:0 Store)\n      (Name &tree:0 Load)\n      (/seq\n        (If\n          (Compare (Subscript (Name &tree:0 Load) (Name &item:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break)\n          nil\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None) (alias g_Counter None)) i0)\n    (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0)\n    (ImportFrom s_heapq (list (alias g_heappush None) (alias g_heappop None)) i0)\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_io None)))\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_bisect None)))\n    (FunctionDef\n      &isPrime:0\n      (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n      (/seq\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Constant i2 None) (Name &x:1 Load)) nil)\n          (/seq\n            (If\n              (Compare (BinOp (Name &i:1 Load) Mult (Name &i:1 Load)) (list Gt) (list (Name &x:1 Load)))\n              (/seq Break)\n              nil\n            )\n            (If\n              (Compare (BinOp (Name &x:1 Load) Mod (Name &i:1 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq (Return (Constant False None)))\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (Return (Constant True None))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ncr:0\n      (arguments nil (list (arg &n:2 None None) (arg &r:2 None None) (arg &p:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &num:2 Store) (Name &den:2 Store)) (Constant i1 None) None)\n        (For\n          (Name &i:2 Store)\n          (Call (Name g_range Load) (list (Name &r:2 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &num:2 Store))\n              (BinOp (BinOp (Name &num:2 Load) Mult (BinOp (Name &n:2 Load) Sub (Name &i:2 Load))) Mod (Name &p:2 Load))\n              None\n            )\n            (Assign\n              (list (Name &den:2 Store))\n              (BinOp\n                (BinOp (Name &den:2 Load) Mult (BinOp (Name &i:2 Load) Add (Constant i1 None)))\n                Mod\n                (Name &p:2 Load)\n              )\n              None\n            )\n          )\n          nil\n          None\n        )\n        (Return\n          (BinOp\n            (BinOp\n              (Name &num:2 Load)\n              Mult\n              (Call\n                (Name g_pow Load)\n                (list (Name &den:2 Load) (BinOp (Name &p:2 Load) Sub (Constant i2 None)) (Name &p:2 Load))\n                nil\n              )\n            )\n            Mod\n            (Name &p:2 Load)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &primeFactors:0\n      (arguments nil (list (arg &n:3 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &l:3 Store)) (List nil Load) None)\n        (While\n          (Compare (BinOp (Name &n:3 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Expr (Call (Attribute (Name &l:3 Load) s_append Load) (list (Constant i2 None)) nil))\n            (Assign (list (Name &n:3 Store)) (BinOp (Name &n:3 Load) Div (Constant i2 None)) None)\n          )\n          nil\n        )\n        (For\n          (Name &i:3 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Constant i3 None)\n              (BinOp\n                (Call\n                  (Name g_int Load)\n                  (list (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &n:3 Load)) nil))\n                  nil\n                )\n                Add\n                (Constant i1 None)\n              )\n              (Constant i2 None)\n            )\n            nil\n          )\n          (/seq\n            (While\n              (Compare (BinOp (Name &n:3 Load) Mod (Name &i:3 Load)) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &l:3 Load) s_append Load)\n                    (list (Call (Name g_int Load) (list (Name &i:3 Load)) nil))\n                    nil\n                  )\n                )\n                (Assign (list (Name &n:3 Store)) (BinOp (Name &n:3 Load) Div (Name &i:3 Load)) None)\n              )\n              nil\n            )\n          )\n          nil\n          None\n        )\n        (If\n          (Compare (Name &n:3 Load) (list Gt) (list (Constant i2 None)))\n          (/seq (Expr (Call (Attribute (Name &l:3 Load) s_append Load) (list (Name &n:3 Load)) nil)))\n          nil\n        )\n        (Return (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Name &l:3 Load)) nil)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &power:0\n      (arguments nil (list (arg &x:4 None None) (arg &y:4 None None) (arg &p:4 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &res:4 Store)) (Constant i1 None) None)\n        (Assign (list (Name &x:4 Store)) (BinOp (Name &x:4 Load) Mod (Name &p:4 Load)) None)\n        (If (Compare (Name &x:4 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i0 None))) nil)\n        (While\n          (Compare (Name &y:4 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (If\n              (Compare (BinOp (Name &y:4 Load) BitAnd (Constant i1 None)) (list Eq) (list (Constant i1 None)))\n              (/seq\n                (Assign\n                  (list (Name &res:4 Store))\n                  (BinOp (BinOp (Name &res:4 Load) Mult (Name &x:4 Load)) Mod (Name &p:4 Load))\n                  None\n                )\n              )\n              nil\n            )\n            (Assign (list (Name &y:4 Store)) (BinOp (Name &y:4 Load) RShift (Constant i1 None)) None)\n            (Assign\n              (list (Name &x:4 Store))\n              (BinOp (BinOp (Name &x:4 Load) Mult (Name &x:4 Load)) Mod (Name &p:4 Load))\n              None\n            )\n          )\n          nil\n        )\n        (Return (Name &res:4 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sieve:0\n      (arguments nil (list (arg &n:5 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &prime:5 Store))\n          (ListComp\n            (Constant True None)\n            (list\n              (comprehension\n                (Name &i:8 Store)\n                (Call (Name g_range Load) (list (BinOp (Name &n:5 Load) Add (Constant i1 None))) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Assign (list (Name &p:5 Store)) (Constant i2 None) None)\n        (While\n          (Compare (BinOp (Name &p:5 Load) Mult (Name &p:5 Load)) (list LtE) (list (Name &n:5 Load)))\n          (/seq\n            (If\n              (Compare (Subscript (Name &prime:5 Load) (Name &p:5 Load) Load) (list Eq) (list (Constant True None)))\n              (/seq\n                (For\n                  (Name &i:5 Store)\n                  (Call\n                    (Name g_range Load)\n                    (list\n                      (BinOp (Name &p:5 Load) Mult (Name &p:5 Load))\n                      (BinOp (Name &n:5 Load) Add (Constant i1 None))\n                      (Name &p:5 Load)\n                    )\n                    nil\n                  )\n                  (/seq\n                    (Assign (list (Subscript (Name &prime:5 Load) (Name &i:5 Load) Store)) (Constant False None) None)\n                  )\n                  nil\n                  None\n                )\n              )\n              nil\n            )\n            (AugAssign (Name &p:5 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Return (Name &prime:5 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &digits:0\n      (arguments nil (list (arg &n:6 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &c:6 Store)) (Constant i0 None) None)\n        (While\n          (Compare (Name &n:6 Load) (list Gt) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &n:6 Store) FloorDiv (Constant i10 None))\n            (AugAssign (Name &c:6 Store) Add (Constant i1 None))\n          )\n          nil\n        )\n        (Return (Name &c:6 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ceil:0\n      (arguments nil (list (arg &n:7 None None) (arg &x:7 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (BinOp (Name &n:7 Load) Mod (Name &x:7 Load)) (list Eq) (list (Constant i0 None)))\n          (/seq (Return (BinOp (Name &n:7 Load) FloorDiv (Name &x:7 Load))))\n          nil\n        )\n        (Return (BinOp (BinOp (Name &n:7 Load) FloorDiv (Name &x:7 Load)) Add (Constant i1 None)))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &mapin:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &d:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call (Name &mapin:0 Load) nil nil)\n          None\n        )\n        (AugAssign\n          (Subscript (Name &d:0 Load) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &d:0 Load) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare\n        (Call (Attribute (Name &d:0 Load) s_count Load) (list (Constant i2 None)) nil)\n        (list Eq)\n        (list (Constant i0 None))\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &arr:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i0 None) (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &arr:0 Load) (BinOp (Name &x:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &arr:0 Load) (BinOp (Name &y:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i0 None) (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          nil\n        )\n      )\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)", "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &n:0 Store))\n      (Call\n        (Name g_int Load)\n        (list\n          (Call\n            (Attribute\n              (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n              s_strip\n              Load\n            )\n            nil\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &d:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i0 None) (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Attribute\n              (Call\n                (Attribute\n                  (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                  s_strip\n                  Load\n                )\n                nil\n                nil\n              )\n              s_split\n              Load\n            )\n            nil\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Tuple\n            (list\n              (BinOp (Call (Name g_int Load) (list (Name &u:0 Load)) nil) Sub (Constant i1 None))\n              (BinOp (Call (Name g_int Load) (list (Name &v:0 Load)) nil) Sub (Constant i1 None))\n            )\n            Load\n          )\n          None\n        )\n        (Assign\n          (list (Subscript (Name &d:0 Load) (Name &u:0 Load) Store))\n          (BinOp (Subscript (Name &d:0 Load) (Name &u:0 Load) Load) Add (Constant i1 None))\n          None\n        )\n        (Assign\n          (list (Subscript (Name &d:0 Load) (Name &v:0 Load) Store))\n          (BinOp (Subscript (Name &d:0 Load) (Name &v:0 Load) Load) Add (Constant i1 None))\n          None\n        )\n      )\n      nil\n      None\n    )\n    (If\n      (Compare (Constant i2 None) (list In) (list (Name &d:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &tr:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &tr:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &tr:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))\n      )\n      nil\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &tr:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_No None)) nil)) Break)\n          nil\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_Yes None)) nil)))\n      None\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &arr:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i0 None) (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &l:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &j:1 Load)) nil)\n            (list\n              (comprehension\n                (Name &j:1 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (AugAssign\n          (Subscript\n            (Name &arr:0 Load)\n            (BinOp (Subscript (Name &l:0 Load) (Constant i0 None) Load) Sub (Constant i1 None))\n            Store\n          )\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript\n            (Name &arr:0 Load)\n            (BinOp (Subscript (Name &l:0 Load) (Constant i1 None) Load) Sub (Constant i1 None))\n            Store\n          )\n          Add\n          (Constant i1 None)\n        )\n      )\n      nil\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Subscript\n            (List (list (Constant s_YES None) (Constant s_NO None)) Load)\n            (Compare (Constant i2 None) (list In) (list (Name &arr:0 Load)))\n            Load\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)", "(Module\n  (/seq\n    (FunctionDef\n      &add:0\n      (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n      (/seq\n        (Global (list s_d s_d2))\n        (If\n          (Compare (Name &x:1 Load) (list NotIn) (list (Name g_d Load)))\n          (/seq (Assign (list (Subscript (Name g_d Load) (Name &x:1 Load) Store)) (Constant i0 None) None))\n          nil\n        )\n        (AugAssign (Subscript (Name g_d Load) (Name &x:1 Load) Store) Add (Constant i1 None))\n        (If\n          (Compare (Subscript (Name g_d Load) (Name &x:1 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Assign (list (Subscript (Name g_d2 Load) (Name &x:1 Load) Store)) (Name &a:0 Load) None))\n          nil\n        )\n        (If\n          (Compare (Subscript (Name g_d Load) (Name &x:1 Load) Load) (list Eq) (list (Constant i3 None)))\n          (/seq (Delete (list (Subscript (Name g_d2 Load) (Name &x:1 Load) Del))))\n          nil\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign\n      (list (Name &n:0 Store))\n      (Call\n        (Name g_int Load)\n        (list (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &d:0 Store)) (Dict nil nil) None)\n    (Assign (list (Name &d2:0 Store)) (Dict nil nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute\n                  (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil)\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Expr (Call (Name &add:0 Load) (list (Name &a:0 Load)) nil))\n        (Expr (Call (Name &add:0 Load) (list (Name &b:0 Load)) nil))\n      )\n      nil\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (Constant s_YES None) None)\n    (For\n      (Name &k:0 Store)\n      (Name &d2:0 Load)\n      (/seq (Assign (list (Name &res:0 Store)) (Constant s_NO None) None) Break)\n      nil\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))\n  )\n  nil\n)"]