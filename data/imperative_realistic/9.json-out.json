[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "match_sequences": true,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_choicevar": -1.01,
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                2,
                0,
                "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None)) (_starred_content (Call (Name g_min Load) (list (_starred_content #0) (_starred_content #1)) nil)) (_starred_content (Call (Name g_max Load) (list (_starred_content #0) (_starred_content #1)) nil))) (list (keyword s_sep (Constant s-WzEwXQ== None))))))",
                "seqS",
                [
                    "E",
                    "E"
                ],
                []
            ],
            [
                0,
                4,
                "(If (Compare (Name %1 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name %2 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name %4 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (UnaryOp USub (Name %4 Load)) Div (Name %2 Load)))) nil))))) (/seq ?0 (Assign (list (Name %3 Store)) (BinOp (BinOp (Name %2 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name %1 Load)) Mult (Name %4 Load))) None) (If (Compare (Name %3 Load) (list Gt) (list (Constant i0 None))) (/seq ?1) (/seq (If (Compare (Name %3 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (UnaryOp USub (Name %2 Load)) Div (BinOp (Constant i2 None) Mult (Name %1 Load))))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))))))",
                "S",
                [],
                [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ]
            ],
            [
                1,
                0,
                "(/subseq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content #0)) nil)))",
                "seqS",
                [
                    "E"
                ],
                []
            ]
        ],
        "programs": [
            "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_float Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &D:0 Store)) (BinOp (BinOp (Name &b:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) None) (If (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x0:0 Store)) (BinOp (Name &c:0 Load) Div (UnaryOp USub (Name &b:0 Load))) None) (/splice (fn_3 (Name &x0:0 Load)))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (/splice (fn_3 (Constant i0 None)))) (/seq (If (BoolOp And (list (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None))) (BoolOp Or (list (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None))))))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (/splice (fn_3 (Name &x:0 Load)))) (/seq (If (BoolOp And (list (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None))) (BoolOp Or (list (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None))))))) (/seq (Assign (list (Name &x1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &x2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Assign (list (Name &g:0 Store)) (List (list (_starred_content (Name &x1:0 Load)) (_starred_content (Name &x2:0 Load))) Load) None) (For (Name &i:0 Store) (Call (Name g_sorted Load) (list (_starred_content (Name &g:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil))) (/seq) None)) (/seq))))))))))))))) nil)",
            "(Module (/seq (Assign (list (Name &s:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &n:1 Load))) nil) (list (comprehension (Name &n:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) (list NotEq) (list (Constant i0 None))))) (/seq (/splice (fn_3 (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) Div (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load))))) (/seq (If (BoolOp And (list (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)) (list NotEq) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Assign (list (Name &a:0 Store)) (Constant i0 None) None) (Assign (list (Name &b:0 Store)) (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)) Div (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) None) (Assign (list (Name &p:0 Store)) (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Call (Name g_min Load) (list (_starred_content (Name &p:0 Load))) nil)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Call (Name g_max Load) (list (_starred_content (Name &p:0 Load))) nil)))) nil))) (/seq (If (BoolOp And (list (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) (list Lt) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Assign (list (Name &p:0 Store)) (List (list (_starred_content (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) Div (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) Pow (Constant f0.5 None))) (_starred_content (UnaryOp USub (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) Div (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) Pow (Constant f0.5 None))))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Call (Name g_min Load) (list (_starred_content (Name &p:0 Load))) nil)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Call (Name g_max Load) (list (_starred_content (Name &p:0 Load))) nil)))) nil))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq Eq Eq) (list (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (If (Compare (BinOp (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) (list NotEq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) Pow (Constant i2 None)) (list Lt) (list (BinOp (Constant i4 None) Mult (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) Pow (Constant i2 None)) (list Eq) (list (BinOp (Constant i4 None) Mult (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load))))) (/seq (/splice (fn_3 (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)) Div (BinOp (Constant i2 None) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load))))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Assign (list (Name &j:0 Store)) (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)) Add (BinOp (BinOp (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load))) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load))) None) (Assign (list (Name &k:0 Store)) (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)) Sub (BinOp (BinOp (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load))) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load))) None) (Assign (list (Name &p:0 Store)) (List (list (_starred_content (Name &j:0 Load)) (_starred_content (Name &k:0 Load))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Call (Name g_min Load) (list (_starred_content (Name &p:0 Load))) nil)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Call (Name g_max Load) (list (_starred_content (Name &p:0 Load))) nil)))) nil))))))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq Eq) (list (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load) (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) (list NotEq) (list (Constant i0 None))))) (/seq (/splice (fn_3 (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Constant i0 None))))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load) (list Eq Eq) (list (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) (list NotEq) (list (Constant i0 None))))) (/seq (/splice (fn_3 (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Constant i0 None))))) (/seq (If (BoolOp And (list (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) (list NotEq) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Constant i0 None))))) (/seq (If (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (UnaryOp USub (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) Div (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) Pow (Constant f0.5 None)))))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) Div (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) Pow (Constant f0.5 None))))) nil))))) (/seq))))))))))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (fn_2 &a:0 &b:0 &d:0 &c:0 (/choiceseq) (/choiceseq (Assign (list (Name &x1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &x2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (If (Compare (Name &x1:0 Load) (list Lt) (list (Name &x2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &x1:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x2:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &x2:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x1:0 Load))) nil))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &b:0 Load))) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &c:0 Load))) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant f0.0 None))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))))))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant f0.0 None))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) (fn_1 (Constant f0.0 None) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &a:0 Load))))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &c:0 Load) Div (Name &a:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (fn_1 (UnaryOp USub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)))) nil)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)))) nil)))) (/seq (If (Compare (BinOp (Name &b:0 Load) Pow (Constant i2 None)) (list Lt) (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (BinOp (Name &b:0 Load) Pow (Constant i2 None)) (list Eq) (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) (fn_1 (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (BinOp (Name &b:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))))) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (BinOp (Name &b:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))))) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &ch1:0 Store)) (_starred_content (Name &ch2:0 Store)) (_starred_content (Name &ch3:0 Store))) Store)) (Tuple (list (_starred_content (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))) (_starred_content (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))) (_starred_content (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) Load) None) (If (BoolOp And (list (Name &ch1:0 Load) (Name &ch2:0 Load) (Name &ch3:0 Load))) (/seq (Assign (list (Name &answer:0 Store)) (UnaryOp USub (Constant i1 None)) None)) (/seq (If (BoolOp And (list (Name &ch1:0 Load) (Name &ch2:0 Load))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None)) (/seq (If (BoolOp Or (list (BoolOp And (list (Name &ch1:0 Load) (Name &ch3:0 Load))) (BoolOp And (list (Name &ch2:0 Load) (Name &ch3:0 Load))))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i1 None) None) (Assign (list (Name &answers:0 Store)) (List (list (_starred_content (Constant i0 None))) Load) None)) (/seq (If (Name &ch1:0 Load) (/seq (Assign (list (Name &answer:0 Store)) (Constant i1 None) None) (Assign (list (Name &answers:0 Store)) (List (list (_starred_content (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))) Load) None)) (/seq (If (Name &ch2:0 Load) (/seq (If (Compare (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i2 None) None) (Assign (list (Name &answers:0 Store)) (List (list (_starred_content (UnaryOp USub (BinOp (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)) Pow (Constant f0.5 None)))) (_starred_content (BinOp (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)) Pow (Constant f0.5 None)))) Load) None)) (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None)))) (/seq (If (Name &ch3:0 Load) (/seq (Assign (list (Name &answer:0 Store)) (Constant i2 None) None) (Assign (list (Name &answers:0 Store)) (List (list (_starred_content (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &a:0 Load))) (_starred_content (Constant i0 None))) Load) None)) (/seq (Assign (list (Name &D:0 Store)) (BinOp (BinOp (Name &b:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) None) (If (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i2 None) None) (Assign (list (Name &answers:0 Store)) (List (list (_starred_content (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) (_starred_content (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) Load) None)) (/seq (If (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i1 None) None) (Assign (list (Name &answers:0 Store)) (List (list (_starred_content (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) Load) None)) (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None))))))))))))))))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &answer:0 Load))) nil)) (If (Compare (Name &answer:0 Load) (list Gt) (list (Constant i0 None))) (/seq (For (Name &i:0 Store) (Call (Name g_sorted Load) (list (_starred_content (Name &answers:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil))) (/seq) None)) (/seq))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Import (list (alias &sys:0 None))) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))))) (/seq (/splice (fn_3 (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))))) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &b:0 Load) Div (Name &a:0 Load))) (_starred_content (BinOp (Name &c:0 Load) Div (Name &a:0 Load)))) Load) None) (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (/splice (fn_3 (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (_starred_content (Constant i0 None))) nil))) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq)) (If (Compare (Name &c:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (_starred_content (UnaryOp USub (BinOp (Name &c:0 Load) Pow (Constant f0.5 None))))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (_starred_content (BinOp (Name &c:0 Load) Pow (Constant f0.5 None)))) nil))) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq)) (If (Compare (Name &c:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &nicli:0 Store)) (Call (Name g_set Load) (list (_starred_content (List (list (_starred_content (Constant i0 None))) Load))) nil) None) (Expr (Call (Attribute (Name &nicli:0 Load) s_add Load) (list (_starred_content (UnaryOp USub (Name &b:0 Load)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &nicli:0 Load))) nil))) nil)) (For (Name &e:0 Store) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Name &nicli:0 Load))) nil))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (_starred_content (Name &e:0 Load))) nil))) nil))) (/seq) None) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &d:0 Store)) (BinOp (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Call (Name g_abs Load) (list (_starred_content (Name &d:0 Load))) nil) (list Lt) (list (BinOp (Constant i10 None) Pow (UnaryOp USub (Constant i12 None))))) (/seq (/splice (fn_3 (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (_starred_content (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) nil))) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &x1:0 Store)) (Call (Name g_max Load) (list (_starred_content (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) (_starred_content (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) nil) None) (Assign (list (Name &x2:0 Store)) (BinOp (Name &c:0 Load) Div (Name &x1:0 Load)) None) (Assign (list (Name &koreni:0 Store)) (Call (Name g_set Load) nil nil) None) (Expr (Call (Attribute (Name &koreni:0 Load) s_add Load) (list (_starred_content (Call (Name g_round Load) (list (_starred_content (Name &x1:0 Load)) (_starred_content (Constant i10 None))) nil))) nil)) (Expr (Call (Attribute (Name &koreni:0 Load) s_add Load) (list (_starred_content (Call (Name g_round Load) (list (_starred_content (Name &x2:0 Load)) (_starred_content (Constant i10 None))) nil))) nil)) (Assign (list (Name &koreni:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Name &koreni:0 Load))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &koreni:0 Load))) nil))) nil)) (For (Name &e:0 Store) (Name &koreni:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (_starred_content (Name &e:0 Load))) nil))) nil))) (/seq) None) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))))))))))))) nil)",
            "(Module (/seq (ImportFrom s_decimal (list (alias g_* None)) i0) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (BinOp (Name &b:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &arr:0 Store)) (List (list (_starred_content (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (BinOp (BinOp (Name &b:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) (_starred_content (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (BinOp (BinOp (Name &b:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) Load) None) (If (Compare (Call (Name g_max Load) (list (_starred_content (Name &arr:0 Load))) nil) (list Eq) (list (Call (Name g_min Load) (list (_starred_content (Name &arr:0 Load))) nil))) (/seq (/splice (fn_3 (Call (Name g_float Load) (list (_starred_content (Call (Name g_Decimal Load) (list (_starred_content (Subscript (Name &arr:0 Load) (_slice_content (Constant i0 None)) Load))) nil))) nil)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &arr:0 Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Call (Name g_Decimal Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &arr:0 Load))) nil))) nil))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Call (Name g_Decimal Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &arr:0 Load))) nil))) nil))) nil))) nil))))))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (/splice (fn_3 (Call (Name g_float Load) (list (_starred_content (Call (Name g_Decimal Load) (list (_starred_content (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))) nil))) nil)))) (/seq (If (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Name &c:0 Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))))))) nil)",
            "(Module (/seq (Expr (Constant s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA4MywgOTcsIDExNiwgMzIsIDc0LCAxMTcsIDExMCwgMzIsIDQ5LCA1NCwgMzIsIDQ4LCA1MSwgNTgsIDUxLCA1NiwgNTgsIDUyLCA0OCwgMzIsIDUwLCA0OCwgNDksIDU2LCAxMCwgMTAsIDY0LCA5NywgMTE3LCAxMTYsIDEwNCwgMTExLCAxMTQsIDU4LCAzMiwgOTcsIDExMCwgMTE1LCAxMDQsIDExNywgMTA4LCAxMF0= None)) (ImportFrom s_math (list (alias &sqrt:0 None)) i0) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq (Assign (list (Name &d:0 Store)) (BinOp (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Assign (list (Name &d:0 Store)) (Call (Name &sqrt:0 Load) (list (_starred_content (Name &d:0 Load))) nil) None) (Assign (list (Name &ans1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Name &d:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &ans2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &d:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (If (Compare (Name &ans1:0 Load) (list Lt) (list (Name &ans2:0 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &ans1:0 Store)) (_starred_content (Name &ans2:0 Store))) Store)) (Tuple (list (_starred_content (Name &ans2:0 Load)) (_starred_content (Name &ans1:0 Load))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans2:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans1:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Assign (list (Name &ans:0 Store)) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &d:0 Store)) (BinOp (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (Constant s-WzQ5LCAxMF0= None) (FormattedValue (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) i-1 None))))) nil))))))) (/seq (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Set (list (_starred_content (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) (_starred_content (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))))))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))) nil)) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &i:0 Load) i-1 (JoinedStr (list (Constant s_.5f None)))))))) nil))) (/seq) None)))))) nil)",
            "(Module (/seq (Import (list (alias s_math g_m))) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &s:1 Load))) nil) (list (comprehension (Name &s:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (fn_2 &a:0 &b:0 &d:0 &c:0 (/choiceseq (If (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (UnaryOp USub (Name &a:0 Load))) (_starred_content (UnaryOp USub (Name &b:0 Load))) (_starred_content (UnaryOp USub (Name &c:0 Load)))) Load) None)) (/seq))) (/choiceseq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Attribute (Name g_m Load) s_sqrt Load) (list (_starred_content (Name &d:0 Load))) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_m Load) s_sqrt Load) (list (_starred_content (Name &d:0 Load))) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) nil))))) nil)"
        ]
    },
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "match_sequences": true,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_choicevar": -1.01,
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json",
            "dfa_metavariable_allow_anything": true,
            "dfa_valid_root_states": "any"
        },
        "abstractions": [
            [
                1,
                0,
                "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None)) (_starred_content (Call (Name g_min Load) #0 nil)) (_starred_content (Call (Name g_max Load) #0 nil))) (list (keyword s_sep (Constant s-WzEwXQ== None))))))",
                "seqS",
                [
                    "[StarredRoot]"
                ],
                []
            ],
            [
                1,
                2,
                "(list (_starred_content (BinOp (BinOp (UnaryOp USub (Name %2 Load)) Add (BinOp #0 Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name %1 Load)))) (_starred_content (BinOp (BinOp (UnaryOp USub (Name %2 Load)) Sub (BinOp #0 Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name %1 Load)))))",
                "[StarredRoot]",
                [
                    "E"
                ],
                [
                    "Name",
                    "Name"
                ]
            ],
            [
                0,
                4,
                "(If (Compare (Name %1 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name %2 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name %4 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (UnaryOp USub (Name %4 Load)) Div (Name %2 Load)))) nil))))) (/seq ?0 (Assign (list (Name %3 Store)) (BinOp (BinOp (Name %2 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name %1 Load)) Mult (Name %4 Load))) None) (If (Compare (Name %3 Load) (list Gt) (list (Constant i0 None))) (/seq ?1) (/seq (If (Compare (Name %3 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (UnaryOp USub (Name %2 Load)) Div (BinOp (Constant i2 None) Mult (Name %1 Load))))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))))))",
                "S",
                [],
                [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ]
            ]
        ],
        "programs": [
            "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_float Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &D:0 Store)) (BinOp (BinOp (Name &b:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) None) (If (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x0:0 Store)) (BinOp (Name &c:0 Load) Div (UnaryOp USub (Name &b:0 Load))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x0:0 Load))) nil))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None))) (BoolOp Or (list (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None))))))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil))) (/seq (If (BoolOp And (list (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None))) (BoolOp Or (list (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None))))))) (/seq (Assign (list (Name &x1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &x2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Assign (list (Name &g:0 Store)) (List (list (_starred_content (Name &x1:0 Load)) (_starred_content (Name &x2:0 Load))) Load) None) (For (Name &i:0 Store) (Call (Name g_sorted Load) (list (_starred_content (Name &g:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil))) (/seq) None)) (/seq))))))))))))))) nil)",
            "(Module (/seq (Assign (list (Name &s:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &n:1 Load))) nil) (list (comprehension (Name &n:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) Div (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)))) nil))) (/seq (If (BoolOp And (list (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)) (list NotEq) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Assign (list (Name &a:0 Store)) (Constant i0 None) None) (Assign (list (Name &b:0 Store)) (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)) Div (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) None) (Assign (list (Name &p:0 Store)) (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Call (Name g_min Load) (list (_starred_content (Name &p:0 Load))) nil)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Call (Name g_max Load) (list (_starred_content (Name &p:0 Load))) nil)))) nil))) (/seq (If (BoolOp And (list (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) (list Lt) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Assign (list (Name &p:0 Store)) (List (list (_starred_content (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) Div (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) Pow (Constant f0.5 None))) (_starred_content (UnaryOp USub (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) Div (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) Pow (Constant f0.5 None))))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Call (Name g_min Load) (list (_starred_content (Name &p:0 Load))) nil)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Call (Name g_max Load) (list (_starred_content (Name &p:0 Load))) nil)))) nil))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq Eq Eq) (list (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (If (Compare (BinOp (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) (list NotEq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) Pow (Constant i2 None)) (list Lt) (list (BinOp (Constant i4 None) Mult (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) Pow (Constant i2 None)) (list Eq) (list (BinOp (Constant i4 None) Mult (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)) Div (BinOp (Constant i2 None) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)))))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Assign (list (Name &j:0 Store)) (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)) Add (BinOp (BinOp (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load))) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load))) None) (Assign (list (Name &k:0 Store)) (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load)) Sub (BinOp (BinOp (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load))) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load))) None) (Assign (list (Name &p:0 Store)) (List (list (_starred_content (Name &j:0 Load)) (_starred_content (Name &k:0 Load))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Call (Name g_min Load) (list (_starred_content (Name &p:0 Load))) nil)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Call (Name g_max Load) (list (_starred_content (Name &p:0 Load))) nil)))) nil))))))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) (list Eq Eq) (list (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load) (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Constant i0 None)))) nil))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load) (list Eq Eq) (list (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Constant i0 None)))) nil))) (/seq (If (BoolOp And (list (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) (list NotEq) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Constant i0 None))))) (/seq (If (Compare (BinOp (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (UnaryOp USub (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) Div (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) Pow (Constant f0.5 None)))))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (_slice_content (Constant i2 None)) Load)) Div (Subscript (Name &s:0 Load) (_slice_content (Constant i0 None)) Load)) Pow (Constant f0.5 None))))) nil))))) (/seq))))))))))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (fn_3 &a:0 &b:0 &d:0 &c:0 (/choiceseq) (/choiceseq (Assign (list (Name &x1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &x2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (If (Compare (Name &x1:0 Load) (list Lt) (list (Name &x2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &x1:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x2:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &x2:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x1:0 Load))) nil))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &b:0 Load))) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &c:0 Load))) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant f0.0 None))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))))))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant f0.0 None))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) (fn_1 (list (_starred_content (Constant f0.0 None)) (_starred_content (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &a:0 Load))))))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &c:0 Load) Div (Name &a:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (fn_1 (list (_starred_content (UnaryOp USub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)))) nil))) (_starred_content (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)))) nil)))))) (/seq (If (Compare (BinOp (Name &b:0 Load) Pow (Constant i2 None)) (list Lt) (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (BinOp (Name &b:0 Load) Pow (Constant i2 None)) (list Eq) (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) (fn_1 (list (_starred_content (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (BinOp (Name &b:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))))) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) (_starred_content (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (BinOp (Name &b:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))))) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))))))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &ch1:0 Store)) (_starred_content (Name &ch2:0 Store)) (_starred_content (Name &ch3:0 Store))) Store)) (Tuple (list (_starred_content (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))) (_starred_content (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None)))) (_starred_content (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) Load) None) (If (BoolOp And (list (Name &ch1:0 Load) (Name &ch2:0 Load) (Name &ch3:0 Load))) (/seq (Assign (list (Name &answer:0 Store)) (UnaryOp USub (Constant i1 None)) None)) (/seq (If (BoolOp And (list (Name &ch1:0 Load) (Name &ch2:0 Load))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None)) (/seq (If (BoolOp Or (list (BoolOp And (list (Name &ch1:0 Load) (Name &ch3:0 Load))) (BoolOp And (list (Name &ch2:0 Load) (Name &ch3:0 Load))))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i1 None) None) (Assign (list (Name &answers:0 Store)) (List (list (_starred_content (Constant i0 None))) Load) None)) (/seq (If (Name &ch1:0 Load) (/seq (Assign (list (Name &answer:0 Store)) (Constant i1 None) None) (Assign (list (Name &answers:0 Store)) (List (list (_starred_content (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))) Load) None)) (/seq (If (Name &ch2:0 Load) (/seq (If (Compare (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i2 None) None) (Assign (list (Name &answers:0 Store)) (List (list (_starred_content (UnaryOp USub (BinOp (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)) Pow (Constant f0.5 None)))) (_starred_content (BinOp (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)) Pow (Constant f0.5 None)))) Load) None)) (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None)))) (/seq (If (Name &ch3:0 Load) (/seq (Assign (list (Name &answer:0 Store)) (Constant i2 None) None) (Assign (list (Name &answers:0 Store)) (List (list (_starred_content (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &a:0 Load))) (_starred_content (Constant i0 None))) Load) None)) (/seq (Assign (list (Name &D:0 Store)) (BinOp (BinOp (Name &b:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) None) (If (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i2 None) None) (Assign (list (Name &answers:0 Store)) (List (fn_2 (Name &D:0 Load) &a:0 &b:0) Load) None)) (/seq (If (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i1 None) None) (Assign (list (Name &answers:0 Store)) (List (list (_starred_content (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) Load) None)) (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None))))))))))))))))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &answer:0 Load))) nil)) (If (Compare (Name &answer:0 Load) (list Gt) (list (Constant i0 None))) (/seq (For (Name &i:0 Store) (Call (Name g_sorted Load) (list (_starred_content (Name &answers:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil))) (/seq) None)) (/seq))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Import (list (alias &sys:0 None))) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))))) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &b:0 Load) Div (Name &a:0 Load))) (_starred_content (BinOp (Name &c:0 Load) Div (Name &a:0 Load)))) Load) None) (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (_starred_content (Constant i0 None))) nil))) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq)) (If (Compare (Name &c:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (_starred_content (UnaryOp USub (BinOp (Name &c:0 Load) Pow (Constant f0.5 None))))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (_starred_content (BinOp (Name &c:0 Load) Pow (Constant f0.5 None)))) nil))) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq)) (If (Compare (Name &c:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &nicli:0 Store)) (Call (Name g_set Load) (list (_starred_content (List (list (_starred_content (Constant i0 None))) Load))) nil) None) (Expr (Call (Attribute (Name &nicli:0 Load) s_add Load) (list (_starred_content (UnaryOp USub (Name &b:0 Load)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &nicli:0 Load))) nil))) nil)) (For (Name &e:0 Store) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Name &nicli:0 Load))) nil))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (_starred_content (Name &e:0 Load))) nil))) nil))) (/seq) None) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &d:0 Store)) (BinOp (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Call (Name g_abs Load) (list (_starred_content (Name &d:0 Load))) nil) (list Lt) (list (BinOp (Constant i10 None) Pow (UnaryOp USub (Constant i12 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (_starred_content (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) nil))) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &x1:0 Store)) (Call (Name g_max Load) (fn_2 (Name &d:0 Load) &a:0 &b:0) nil) None) (Assign (list (Name &x2:0 Store)) (BinOp (Name &c:0 Load) Div (Name &x1:0 Load)) None) (Assign (list (Name &koreni:0 Store)) (Call (Name g_set Load) nil nil) None) (Expr (Call (Attribute (Name &koreni:0 Load) s_add Load) (list (_starred_content (Call (Name g_round Load) (list (_starred_content (Name &x1:0 Load)) (_starred_content (Constant i10 None))) nil))) nil)) (Expr (Call (Attribute (Name &koreni:0 Load) s_add Load) (list (_starred_content (Call (Name g_round Load) (list (_starred_content (Name &x2:0 Load)) (_starred_content (Constant i10 None))) nil))) nil)) (Assign (list (Name &koreni:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Name &koreni:0 Load))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &koreni:0 Load))) nil))) nil)) (For (Name &e:0 Store) (Name &koreni:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (_starred_content (Name &e:0 Load))) nil))) nil))) (/seq) None) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (_starred_content (Constant i0 None))) nil))))))))))))) nil)",
            "(Module (/seq (ImportFrom s_decimal (list (alias g_* None)) i0) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (BinOp (Name &b:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &arr:0 Store)) (List (fn_2 (BinOp (BinOp (Name &b:0 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) &a:0 &b:0) Load) None) (If (Compare (Call (Name g_max Load) (list (_starred_content (Name &arr:0 Load))) nil) (list Eq) (list (Call (Name g_min Load) (list (_starred_content (Name &arr:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Call (Name g_Decimal Load) (list (_starred_content (Subscript (Name &arr:0 Load) (_slice_content (Constant i0 None)) Load))) nil))) nil))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &arr:0 Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Call (Name g_Decimal Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &arr:0 Load))) nil))) nil))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Call (Name g_Decimal Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &arr:0 Load))) nil))) nil))) nil))) nil))))))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Call (Name g_Decimal Load) (list (_starred_content (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))) nil))) nil))) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Name &c:0 Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))))))) nil)",
            "(Module (/seq (Expr (Constant s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA4MywgOTcsIDExNiwgMzIsIDc0LCAxMTcsIDExMCwgMzIsIDQ5LCA1NCwgMzIsIDQ4LCA1MSwgNTgsIDUxLCA1NiwgNTgsIDUyLCA0OCwgMzIsIDUwLCA0OCwgNDksIDU2LCAxMCwgMTAsIDY0LCA5NywgMTE3LCAxMTYsIDEwNCwgMTExLCAxMTQsIDU4LCAzMiwgOTcsIDExMCwgMTE1LCAxMDQsIDExNywgMTA4LCAxMF0= None)) (ImportFrom s_math (list (alias &sqrt:0 None)) i0) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq (Assign (list (Name &d:0 Store)) (BinOp (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Assign (list (Name &d:0 Store)) (Call (Name &sqrt:0 Load) (list (_starred_content (Name &d:0 Load))) nil) None) (Assign (list (Name &ans1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Name &d:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &ans2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &d:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (If (Compare (Name &ans1:0 Load) (list Lt) (list (Name &ans2:0 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &ans1:0 Store)) (_starred_content (Name &ans2:0 Store))) Store)) (Tuple (list (_starred_content (Name &ans2:0 Load)) (_starred_content (Name &ans1:0 Load))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans2:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans1:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Assign (list (Name &ans:0 Store)) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &d:0 Store)) (BinOp (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (Constant s-WzQ5LCAxMF0= None) (FormattedValue (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) i-1 None))))) nil))))))) (/seq (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Set (fn_2 (Name &d:0 Load) &a:0 &b:0)))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &s:0 Load))) nil))) nil)) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &i:0 Load) i-1 (JoinedStr (list (Constant s_.5f None)))))))) nil))) (/seq) None)))))) nil)",
            "(Module (/seq (Import (list (alias s_math g_m))) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &s:1 Load))) nil) (list (comprehension (Name &s:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (fn_3 &a:0 &b:0 &d:0 &c:0 (/choiceseq (If (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (UnaryOp USub (Name &a:0 Load))) (_starred_content (UnaryOp USub (Name &b:0 Load))) (_starred_content (UnaryOp USub (Name &c:0 Load)))) Load) None)) (/seq))) (/choiceseq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i2 None))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Attribute (Name g_m Load) s_sqrt Load) (list (_starred_content (Name &d:0 Load))) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_m Load) s_sqrt Load) (list (_starred_content (Name &d:0 Load))) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) nil))))) nil)"
        ]
    }
]
