[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                0,
                3,
                "(BinOp (BinOp (Name %3 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name %2 Load)) Mult (Name %1 Load)))",
                "E",
                [],
                [
                    "X",
                    "X",
                    "X"
                ]
            ],
            [
                0,
                3,
                "(BinOp (BinOp (Name %3 Load) Mult (Name %3 Load)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name %2 Load)) Mult (Name %1 Load)))",
                "E",
                [],
                [
                    "X",
                    "X",
                    "X"
                ]
            ],
            [
                1,
                2,
                "(BinOp (BinOp (UnaryOp USub (Name %2 Load)) Sub #0) Div (BinOp (Constant i2 None) Mult (Name %1 Load)))",
                "E",
                [
                    "E"
                ],
                [
                    "X",
                    "X"
                ]
            ]
        ],
        "programs": [
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_float Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &D:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x0:0 Store)) (BinOp (Name &c:0 Load) Div (UnaryOp USub (Name &b:0 Load))) None) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Name &x0:0 Load)) nil))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (BoolOp And (list (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None))) (BoolOp Or (list (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None))))))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Name &x:0 Load)) nil))) (/seq (If (BoolOp And (list (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None))) (BoolOp Or (list (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None))))))) (/seq (Assign (list (Name &x1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &x2:0 Store)) (fn_3 (BinOp (Name &D:0 Load) Pow (Constant f0.5 None)) &a:0 &b:0) None) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &g:0 Store)) (List (list (Name &x1:0 Load) (Name &x2:0 Load)) Load) None) (For (Name &i:0 Store) (Call (Name g_sorted Load) (list (Name &g:0 Load)) nil) (/seq (Expr (Call (Name g_print Load) (list (Name &i:0 Load)) nil))) nil None)) nil)))))))))))))) nil)",
            "(Module (/seq (Assign (list (Name &s:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &n:1 Load)) nil) (list (comprehension (Name &n:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Subscript (Name &s:0 Load) (Constant i1 None) Load) Mult (Subscript (Name &s:0 Load) (Constant i2 None) Load)) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i2 None) Load)) Div (Subscript (Name &s:0 Load) (Constant i1 None) Load))) nil))) (/seq (If (BoolOp And (list (Compare (BinOp (Subscript (Name &s:0 Load) (Constant i0 None) Load) Mult (Subscript (Name &s:0 Load) (Constant i1 None) Load)) (list NotEq) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (Constant i2 None) Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &a:0 Store)) (Constant i0 None) None) (Assign (list (Name &b:0 Store)) (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i1 None) Load)) Div (Subscript (Name &s:0 Load) (Constant i0 None) Load)) None) (Assign (list (Name &p:0 Store)) (List (list (Name &a:0 Load) (Name &b:0 Load)) Load) None) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Call (Name g_min Load) (list (Name &p:0 Load)) nil))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Call (Name g_max Load) (list (Name &p:0 Load)) nil))) nil))) (/seq (If (BoolOp And (list (Compare (BinOp (Subscript (Name &s:0 Load) (Constant i0 None) Load) Mult (Subscript (Name &s:0 Load) (Constant i2 None) Load)) (list Lt) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (Constant i1 None) Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &p:0 Store)) (List (list (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i2 None) Load)) Div (Subscript (Name &s:0 Load) (Constant i0 None) Load)) Pow (Constant f0.5 None)) (UnaryOp USub (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i2 None) Load)) Div (Subscript (Name &s:0 Load) (Constant i0 None) Load)) Pow (Constant f0.5 None)))) Load) None) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Call (Name g_min Load) (list (Name &p:0 Load)) nil))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Call (Name g_max Load) (list (Name &p:0 Load)) nil))) nil))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (Constant i1 None) Load) (list Eq) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (Constant i2 None) Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Subscript (Name &s:0 Load) (Constant i0 None) Load) (list Eq Eq Eq) (list (Subscript (Name &s:0 Load) (Constant i1 None) Load) (Subscript (Name &s:0 Load) (Constant i2 None) Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (Compare (BinOp (BinOp (Subscript (Name &s:0 Load) (Constant i0 None) Load) Mult (Subscript (Name &s:0 Load) (Constant i1 None) Load)) Mult (Subscript (Name &s:0 Load) (Constant i2 None) Load)) (list NotEq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Subscript (Name &s:0 Load) (Constant i1 None) Load) Pow (Constant i2 None)) (list Lt) (list (BinOp (Constant i4 None) Mult (BinOp (Subscript (Name &s:0 Load) (Constant i0 None) Load) Mult (Subscript (Name &s:0 Load) (Constant i2 None) Load))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (BinOp (Subscript (Name &s:0 Load) (Constant i1 None) Load) Pow (Constant i2 None)) (list Eq) (list (BinOp (Constant i4 None) Mult (BinOp (Subscript (Name &s:0 Load) (Constant i0 None) Load) Mult (Subscript (Name &s:0 Load) (Constant i2 None) Load))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i1 None) Load)) Div (BinOp (Constant i2 None) Mult (Subscript (Name &s:0 Load) (Constant i0 None) Load))))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &j:0 Store)) (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i1 None) Load)) Add (BinOp (BinOp (BinOp (Subscript (Name &s:0 Load) (Constant i1 None) Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Subscript (Name &s:0 Load) (Constant i0 None) Load)) Mult (Subscript (Name &s:0 Load) (Constant i2 None) Load))) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Subscript (Name &s:0 Load) (Constant i0 None) Load))) None) (Assign (list (Name &k:0 Store)) (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i1 None) Load)) Sub (BinOp (BinOp (BinOp (Subscript (Name &s:0 Load) (Constant i1 None) Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Subscript (Name &s:0 Load) (Constant i0 None) Load)) Mult (Subscript (Name &s:0 Load) (Constant i2 None) Load))) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Subscript (Name &s:0 Load) (Constant i0 None) Load))) None) (Assign (list (Name &p:0 Store)) (List (list (Name &j:0 Load) (Name &k:0 Load)) Load) None) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Call (Name g_min Load) (list (Name &p:0 Load)) nil))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Call (Name g_max Load) (list (Name &p:0 Load)) nil))) nil))))))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (Constant i0 None) Load) (list Eq Eq) (list (Subscript (Name &s:0 Load) (Constant i2 None) Load) (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (Constant i1 None) Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Constant i0 None))) nil))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &s:0 Load) (Constant i2 None) Load) (list Eq Eq) (list (Subscript (Name &s:0 Load) (Constant i1 None) Load) (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (Constant i0 None) Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (Constant i0 None))) nil))) (/seq (If (BoolOp And (list (Compare (BinOp (Subscript (Name &s:0 Load) (Constant i0 None) Load) Mult (Subscript (Name &s:0 Load) (Constant i2 None) Load)) (list NotEq) (list (Constant i0 None))) (Compare (Subscript (Name &s:0 Load) (Constant i1 None) Load) (list Eq) (list (Constant i0 None))))) (/seq (If (Compare (BinOp (Subscript (Name &s:0 Load) (Constant i0 None) Load) Mult (Subscript (Name &s:0 Load) (Constant i2 None) Load)) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (UnaryOp USub (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i2 None) Load)) Div (Subscript (Name &s:0 Load) (Constant i0 None) Load)) Pow (Constant f0.5 None))))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA1NCwgMTAyXQ== None) Mod (BinOp (BinOp (UnaryOp USub (Subscript (Name &s:0 Load) (Constant i2 None) Load)) Div (Subscript (Name &s:0 Load) (Constant i0 None) Load)) Pow (Constant f0.5 None)))) nil))))) nil)))))))))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))))) (/seq (Assign (list (Name &d:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &x1:0 Store)) (fn_3 (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)) &a:0 &b:0) None) (Assign (list (Name &x2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (If (Compare (Name &x1:0 Load) (list Lt) (list (Name &x2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &x1:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Name &x2:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Name &x2:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Name &x1:0 Load)) nil))))) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Name &a:0 Load)) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (Name &b:0 Load)) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (Name &c:0 Load)) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant f0.0 None)) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))))))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant f0.0 None)) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None) (Call (Name g_min Load) (list (Constant f0.0 None) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &a:0 Load))) nil) (Call (Name g_max Load) (list (Constant f0.0 None) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &a:0 Load))) nil)) (list (keyword s_sep (Constant s-WzEwXQ== None)))))))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &c:0 Load) Div (Name &a:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None) (Call (Name g_min Load) (list (UnaryOp USub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load))) nil)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load))) nil)) nil) (Call (Name g_max Load) (list (UnaryOp USub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load))) nil)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load))) nil)) nil)) (list (keyword s_sep (Constant s-WzEwXQ== None)))))))) (/seq (If (Compare (BinOp (Name &b:0 Load) Pow (Constant i2 None)) (list Lt) (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (BinOp (Name &b:0 Load) Pow (Constant i2 None)) (list Eq) (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None) (Call (Name g_min Load) (list (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil) &a:0 &b:0) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil) (Call (Name g_max Load) (list (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil) &a:0 &b:0) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil)) (list (keyword s_sep (Constant s-WzEwXQ== None)))))))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Tuple (list (Name &ch1:0 Store) (Name &ch2:0 Store) (Name &ch3:0 Store)) Store)) (Tuple (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))) Load) None) (If (BoolOp And (list (Name &ch1:0 Load) (Name &ch2:0 Load) (Name &ch3:0 Load))) (/seq (Assign (list (Name &answer:0 Store)) (UnaryOp USub (Constant i1 None)) None)) (/seq (If (BoolOp And (list (Name &ch1:0 Load) (Name &ch2:0 Load))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None)) (/seq (If (BoolOp Or (list (BoolOp And (list (Name &ch1:0 Load) (Name &ch3:0 Load))) (BoolOp And (list (Name &ch2:0 Load) (Name &ch3:0 Load))))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i1 None) None) (Assign (list (Name &answers:0 Store)) (List (list (Constant i0 None)) Load) None)) (/seq (If (Name &ch1:0 Load) (/seq (Assign (list (Name &answer:0 Store)) (Constant i1 None) None) (Assign (list (Name &answers:0 Store)) (List (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) Load) None)) (/seq (If (Name &ch2:0 Load) (/seq (If (Compare (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i2 None) None) (Assign (list (Name &answers:0 Store)) (List (list (UnaryOp USub (BinOp (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)) Pow (Constant f0.5 None))) (BinOp (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load)) Pow (Constant f0.5 None))) Load) None)) (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None)))) (/seq (If (Name &ch3:0 Load) (/seq (Assign (list (Name &answer:0 Store)) (Constant i2 None) None) (Assign (list (Name &answers:0 Store)) (List (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &a:0 Load)) (Constant i0 None)) Load) None)) (/seq (Assign (list (Name &D:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i2 None) None) (Assign (list (Name &answers:0 Store)) (List (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (fn_3 (BinOp (Name &D:0 Load) Pow (Constant f0.5 None)) &a:0 &b:0)) Load) None)) (/seq (If (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &answer:0 Store)) (Constant i1 None) None) (Assign (list (Name &answers:0 Store)) (List (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) Load) None)) (/seq (Assign (list (Name &answer:0 Store)) (Constant i0 None) None))))))))))))))))) (Expr (Call (Name g_print Load) (list (Name &answer:0 Load)) nil)) (If (Compare (Name &answer:0 Load) (list Gt) (list (Constant i0 None))) (/seq (For (Name &i:0 Store) (Call (Name g_sorted Load) (list (Name &answers:0 Load)) nil) (/seq (Expr (Call (Name g_print Load) (list (Name &i:0 Load)) nil))) nil None)) nil)) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Import (list (alias &sys:0 None))) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))))) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Tuple (list (Constant i1 None) (BinOp (Name &b:0 Load) Div (Name &a:0 Load)) (BinOp (Name &c:0 Load) Div (Name &a:0 Load))) Load) None) (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Constant i0 None)) nil)) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))) nil) (If (Compare (Name &c:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (UnaryOp USub (BinOp (Name &c:0 Load) Pow (Constant f0.5 None)))) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (BinOp (Name &c:0 Load) Pow (Constant f0.5 None))) nil)) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))) nil) (If (Compare (Name &c:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) nil)) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &nicli:0 Store)) (Call (Name g_set Load) (list (List (list (Constant i0 None)) Load)) nil) None) (Expr (Call (Attribute (Name &nicli:0 Load) s_add Load) (list (UnaryOp USub (Name &b:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &nicli:0 Load)) nil)) nil)) (For (Name &e:0 Store) (Call (Name g_sorted Load) (list (Call (Name g_list Load) (list (Name &nicli:0 Load)) nil)) nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Name &e:0 Load)) nil)) nil))) nil None) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))) (/seq (Assign (list (Name &d:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Call (Name g_abs Load) (list (Name &d:0 Load)) nil) (list Lt) (list (BinOp (Constant i10 None) Pow (UnaryOp USub (Constant i12 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil)) nil)) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))) (/seq (Assign (list (Name &x1:0 Store)) (Call (Name g_max Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (fn_3 (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)) &a:0 &b:0)) nil) None) (Assign (list (Name &x2:0 Store)) (BinOp (Name &c:0 Load) Div (Name &x1:0 Load)) None) (Assign (list (Name &koreni:0 Store)) (Call (Name g_set Load) nil nil) None) (Expr (Call (Attribute (Name &koreni:0 Load) s_add Load) (list (Call (Name g_round Load) (list (Name &x1:0 Load) (Constant i10 None)) nil)) nil)) (Expr (Call (Attribute (Name &koreni:0 Load) s_add Load) (list (Call (Name g_round Load) (list (Name &x2:0 Load) (Constant i10 None)) nil)) nil)) (Assign (list (Name &koreni:0 Store)) (Call (Name g_sorted Load) (list (Call (Name g_list Load) (list (Name &koreni:0 Load)) nil)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &koreni:0 Load)) nil)) nil)) (For (Name &e:0 Store) (Name &koreni:0 Load) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Name &e:0 Load)) nil)) nil))) nil None) (Expr (Call (Attribute (Name &sys:0 Load) s_exit Load) (list (Constant i0 None)) nil))))))))))))) nil)",
            "(Module (/seq (ImportFrom s_decimal (list (alias g_* None)) i0) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (If (Compare (fn_1 &c:0 &a:0 &b:0) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Assign (list (Name &arr:0 Store)) (List (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (fn_1 &c:0 &a:0 &b:0) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (fn_3 (BinOp (fn_1 &c:0 &a:0 &b:0) Pow (Constant f0.5 None)) &a:0 &b:0)) Load) None) (If (Compare (Call (Name g_max Load) (list (Name &arr:0 Load)) nil) (list Eq) (list (Call (Name g_min Load) (list (Name &arr:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_float Load) (list (Call (Name g_Decimal Load) (list (Subscript (Name &arr:0 Load) (Constant i0 None) Load)) nil)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &arr:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_float Load) (list (Call (Name g_Decimal Load) (list (Call (Name g_min Load) (list (Name &arr:0 Load)) nil)) nil)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_float Load) (list (Call (Name g_Decimal Load) (list (Call (Name g_max Load) (list (Name &arr:0 Load)) nil)) nil)) nil)) nil))))))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_float Load) (list (Call (Name g_Decimal Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)) nil)) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Name &c:0 Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))))) nil)",
            "(Module (/seq (Expr (Constant s-WzEwLCA2NywgMTE0LCAxMDEsIDk3LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCA4MywgOTcsIDExNiwgMzIsIDc0LCAxMTcsIDExMCwgMzIsIDQ5LCA1NCwgMzIsIDQ4LCA1MSwgNTgsIDUxLCA1NiwgNTgsIDUyLCA0OCwgMzIsIDUwLCA0OCwgNDksIDU2LCAxMCwgMTAsIDY0LCA5NywgMTE3LCAxMTYsIDEwNCwgMTExLCAxMTQsIDU4LCAzMiwgOTcsIDExMCwgMTE1LCAxMDQsIDExNywgMTA4LCAxMF0= None)) (ImportFrom s_math (list (alias &sqrt:0 None)) i0) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) (/seq (Assign (list (Name &d:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &d:0 Store)) (Call (Name &sqrt:0 Load) (list (Name &d:0 Load)) nil) None) (Assign (list (Name &ans1:0 Store)) (fn_3 (Name &d:0 Load) &a:0 &b:0) None) (Assign (list (Name &ans2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &d:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (If (Compare (Name &ans1:0 Load) (list Lt) (list (Name &ans2:0 Load))) (/seq (Assign (list (Tuple (list (Name &ans1:0 Store) (Name &ans2:0 Store)) Store)) (Tuple (list (Name &ans2:0 Load) (Name &ans1:0 Load)) Load) None)) nil) (Expr (Call (Name g_print Load) (list (Name &ans2:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Name &ans1:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Assign (list (Name &ans:0 Store)) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &d:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (JoinedStr (list (Constant s-WzQ5LCAxMF0= None) (FormattedValue (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) i-1 None)))) nil))))))) (/seq (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Assign (list (Name &s:0 Store)) (Call (Name g_sorted Load) (list (Set (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (fn_3 (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)) &a:0 &b:0)))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &s:0 Load)) nil)) nil)) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (Expr (Call (Name g_print Load) (list (JoinedStr (list (FormattedValue (Name &i:0 Load) i-1 (JoinedStr (list (Constant s_.5f None))))))) nil))) nil None)))))) nil)",
            "(Module (/seq (Import (list (alias s_math g_m))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &s:1 Load)) nil) (list (comprehension (Name &s:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))))) (/seq (If (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Tuple (list (UnaryOp USub (Name &a:0 Load)) (UnaryOp USub (Name &b:0 Load)) (UnaryOp USub (Name &c:0 Load))) Load) None)) nil) (Assign (list (Name &d:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (fn_3 (Call (Attribute (Name g_m Load) s_sqrt Load) (list (Name &d:0 Load)) nil) &a:0 &b:0)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_m Load) s_sqrt Load) (list (Name &d:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil))) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))))) nil)",
            "(Module (/seq (FunctionDef &shovel:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil) (/seq (If (BoolOp And (list (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:1 Load) (list Eq) (list (Constant i0 None))))) (/seq (Return (UnaryOp USub (Constant i1 None)))) nil) (If (BoolOp And (list (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None))))) (/seq (Return (Constant i0 None))) nil) (If (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Return (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (BinOp (UnaryOp USub (Name &c:1 Load)) Div (Name &b:1 Load))))) nil) (If (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Return (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Constant i0 None)))) nil)) nil) (Assign (list (Name &x:1 Store)) (fn_2 &c:1 &a:1 &b:1) None) (If (Compare (Name &x:1 Load) (list Lt) (list (Constant i0 None))) (/seq (Return (Constant i0 None))) nil) (If (Compare (Name &x:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Return (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (BinOp (UnaryOp USub (Name &b:1 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load)))))) nil) (Assign (list (Name &y:1 Store)) (fn_3 (BinOp (Name &x:1 Load) Pow (Constant f0.5 None)) &a:1 &b:1) None) (Assign (list (Name &z:1 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:1 Load)) Add (BinOp (Name &x:1 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load))) None) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (If (Compare (Name &y:1 Load) (list Lt) (list (Name &z:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &y:1 Load))) nil)) (Return (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &z:1 Load)))) nil) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &z:1 Load))) nil)) (Return (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &y:1 Load)))) nil None None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name &shovel:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &d:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Constant i0 None) (Name &c:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp Or (list (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (Compare (Name &a:0 Load) (list Eq Eq) (list (Name &b:0 Load) (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Call (Name g_round Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (Constant i5 None)) nil)) nil)) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Assign (list (Name &x:0 Store)) (Call (Name g_round Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) (Constant i5 None)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Name &x:0 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &x:0 Store)) (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Call (Name g_round Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (Constant i5 None)) nil)) nil) None) (Assign (list (Name &y:0 Store)) (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Call (Name g_round Load) (list (fn_3 (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)) &a:0 &b:0) (Constant i5 None)) nil)) nil) None) (Assign (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_sorted Load) (list (List (list (Name &x:0 Load) (Name &y:0 Load)) Load)) nil) None) (If (Compare (Name &x:0 Load) (list NotEq) (list (Name &y:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &x:0 Load) (Name &y:0 Load)) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) (/seq (Expr (Call (Name g_print Load) (list (Name &x:0 Load)) nil))))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (Compare (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)) (list Lt) (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (UnaryOp USub (BinOp (Name &c:0 Load) Div (Name &b:0 Load)))) nil)) nil))))) (/seq (Assign (list (Name &d:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (Assign (list (Name &x1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &x2:0 Store)) (fn_3 (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)) &a:0 &b:0) None) (If (Compare (Name &x1:0 Load) (list Eq) (list (Name &x2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x1:0 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Call (Name g_min Load) (list (Name &x1:0 Load) (Name &x2:0 Load)) nil)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Call (Name g_max Load) (list (Name &x1:0 Load) (Name &x2:0 Load)) nil)) nil)) nil))))))))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None)) i0) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &det:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Assign (list (Name &p:0 Store)) (Call (Name g_round Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) (Constant i5 None)) nil) None) (Expr (Call (Name g_print Load) (list (Name &p:0 Load)) nil))))))) (/seq (If (Compare (Name &det:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &det:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Assign (list (Name &p:0 Store)) (Call (Name g_round Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Name &a:0 Load) Mult (Constant i2 None))) (Constant i5 None)) nil) None) (Expr (Call (Name g_print Load) (list (Name &p:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &neu:0 Store)) (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Name g_sqrt Load) (list (Name &det:0 Load)) nil)) None) (Assign (list (Name &p:0 Store)) (Call (Name g_round Load) (list (BinOp (Name &neu:0 Load) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (Constant i5 None)) nil) None) (Assign (list (Name &neu:0 Store)) (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Name g_sqrt Load) (list (Name &det:0 Load)) nil)) None) (Assign (list (Name &q:0 Store)) (Call (Name g_round Load) (list (BinOp (Name &neu:0 Load) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (Constant i5 None)) nil) None) (If (Compare (Name &p:0 Load) (list Gt) (list (Name &q:0 Load))) (/seq (Assign (list (Tuple (list (Name &p:0 Store) (Name &q:0 Store)) Store)) (Tuple (list (Name &q:0 Load) (Name &p:0 Load)) Load) None)) nil) (Expr (Call (Name g_print Load) (list (Name &p:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Name &q:0 Load)) nil)))))))) (Expr (Constant s-WzEwLCA2NSwgMTEwLCAxMDAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMDQsIDk3LCAxMDAsIDExMSwgMTE5LCAzMiwgMTExLCAxMDIsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTAwLCA5NywgMTIxLCAxMCwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMDEsIDEwOSwgOTgsIDExNCwgOTcsIDk5LCAxMDEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE5LCAxMTEsIDExNCwgMTAwLCAzMiwgMTA1LCAxMTAsIDMyLCAxMDMsIDExNCwgMTAxLCAxMjEsIDEwLCA2NSwgMTEwLCAxMDAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTcsIDExMCwgMzIsIDExOSwgMTA1LCAxMDgsIDEwOCwgMzIsIDExNSwgMTAxLCAxMTYsIDMyLCAxMDIsIDExMSwgMTE0LCAzMiwgMTIxLCAxMTEsIDExNywgMTBd None))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &a:1 Load)) nil) (list (comprehension (Name &a:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))))) (/seq (Assign (list (Name &D:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil))) (/seq (If (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &ans:0 Store)) (Call (Name g_sorted Load) (list (List (list (fn_3 (BinOp (Name &D:0 Load) Pow (Constant f0.5 None)) &a:0 &b:0) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &D:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) Load)) nil) None) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) (list (keyword s_sep (Constant s-WzEwXQ== None)))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x:0 Load)) nil)) nil))))))) (/seq (Assign (list (Name &delta:0 Store)) (BinOp (Call (Name g_pow Load) (list (Name &b:0 Load) (Constant i2 None)) nil) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) None) (If (Compare (Name &delta:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &delta:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x:0 Load)) nil)) nil))) (/seq (Assign (list (Name &x1:0 Store)) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &delta:0 Load)) nil) &a:0 &b:0) None) (Assign (list (Name &x2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &delta:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (If (Compare (Name &x1:0 Load) (list Gt) (list (Name &x2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x2:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x1:0 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x1:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x2:0 Load)) nil)) nil))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (If (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &k:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &k:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Assign (list (Name &a1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &k:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &a2:0 Store)) (fn_3 (BinOp (Name &k:0 Load) Pow (Constant f0.5 None)) &a:0 &b:0) None) (If (Compare (Name &a1:0 Load) (list Eq) (list (Name &a2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_str Load) (list (Name &a1:0 Load)) nil) Add (BinOp (Constant s_0 None) Mult (Constant i5 None)))) nil))) nil) (If (Compare (Name &a1:0 Load) (list NotEq) (list (Name &a2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_str Load) (list (Call (Name g_min Load) (list (Name &a1:0 Load) (Name &a2:0 Load)) nil)) nil) Add (BinOp (Constant s_0 None) Mult (Constant i5 None)))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_str Load) (list (Call (Name g_max Load) (list (Name &a1:0 Load) (Name &a2:0 Load)) nil)) nil) Add (BinOp (Constant s_0 None) Mult (Constant i5 None)))) nil))) nil)))) (/seq (If (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &k:0 Store)) (Call (Name g_str Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Name &k:0 Load) Add (BinOp (Constant s_0 None) Mult (Constant i5 None)))) nil))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &sqr:0 Store)) (Call (Name g_float Load) (list (fn_1 &c:0 &a:0 &b:0)) nil) None) (If (Compare (Name &sqr:0 Load) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Name &e:0 Store)) (Call (Name g_float Load) (list (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &sqr:0 Load)) nil)) nil) None) (If (Compare (Name &e:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Try (/seq (Assign (list (Name &root1:0 Store)) (Call (Name g_float Load) (list (fn_3 (Name &e:0 Load) &a:0 &b:0)) nil) None) (Assign (list (Name &root:0 Store)) (Constant i1 None) None) (Expr (Call (Name g_print Load) (list (Name &root:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &root1:0 Load))) nil))) (list (ExceptHandler (Name g_ZeroDivisionError Load) &zd:0 (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))) (/seq (If (Compare (BinOp (Name &a:0 Load) BitAnd (Name &b:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq Pass))))))) nil nil)) (/seq (If (Compare (Name &e:0 Load) (list Eq) (list (Constant f13.416407864998739 None))) (/seq (Try (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &root:0 Store)) (Constant i1 None) None) (Expr (Call (Name g_print Load) (list (Name &root:0 Load)) nil)) (Assign (list (Name &res:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))) (/seq (Assign (list (Name &root1:0 Store)) (Call (Name g_float Load) (list (fn_3 (Name &e:0 Load) &a:0 &b:0)) nil) None) (Assign (list (Name &root2:0 Store)) (Call (Name g_float Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &e:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil) None) (Assign (list (Name &roots:0 Store)) (Constant i2 None) None) (Expr (Call (Name g_print Load) (list (Name &roots:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root2:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root1:0 Load))) nil))))) (list (ExceptHandler (Name g_ZeroDivisionError Load) &zd:0 (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))))) nil nil)) (/seq (If (Compare (Name &e:0 Load) (list Eq) (list (Constant f5.0 None))) (/seq (Try (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &root:0 Store)) (Constant i1 None) None) (Expr (Call (Name g_print Load) (list (Name &root:0 Load)) nil)) (Assign (list (Name &res:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))) (/seq (Assign (list (Name &root1:0 Store)) (Call (Name g_float Load) (list (fn_3 (Name &e:0 Load) &a:0 &b:0)) nil) None) (Assign (list (Name &root2:0 Store)) (Call (Name g_float Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &e:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil) None) (Assign (list (Name &roots:0 Store)) (Constant i2 None) None) (Expr (Call (Name g_print Load) (list (Name &roots:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root2:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root1:0 Load))) nil))))) (list (ExceptHandler (Name g_ZeroDivisionError Load) &zd:0 (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))))) nil nil)) (/seq (If (Compare (Name &e:0 Load) (list Eq) (list (Constant f4.0 None))) (/seq (Try (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &root:0 Store)) (Constant i1 None) None) (Expr (Call (Name g_print Load) (list (Name &root:0 Load)) nil)) (Assign (list (Name &res:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))) (/seq (Assign (list (Name &root1:0 Store)) (Call (Name g_float Load) (list (fn_3 (Name &e:0 Load) &a:0 &b:0)) nil) None) (Assign (list (Name &root2:0 Store)) (Call (Name g_float Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &e:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil) None) (Assign (list (Name &roots:0 Store)) (Constant i2 None) None) (Expr (Call (Name g_print Load) (list (Name &roots:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root2:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root1:0 Load))) nil))))) (list (ExceptHandler (Name g_ZeroDivisionError Load) &zd:0 (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))))) nil nil)) (/seq (Try (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &root:0 Store)) (Constant i1 None) None) (Expr (Call (Name g_print Load) (list (Name &root:0 Load)) nil)) (Assign (list (Name &res:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))) (/seq (Assign (list (Name &root1:0 Store)) (Call (Name g_float Load) (list (fn_3 (Name &e:0 Load) &a:0 &b:0)) nil) None) (Assign (list (Name &root2:0 Store)) (Call (Name g_float Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &e:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil) None) (Assign (list (Name &roots:0 Store)) (Constant i2 None) None) (Expr (Call (Name g_print Load) (list (Name &roots:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root1:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root2:0 Load))) nil))))) (list (ExceptHandler (Name g_ZeroDivisionError Load) &zd:0 (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))))) nil nil)))))))))) (/seq (If (Compare (Name &sqr:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq Pass))))) nil)",
            "(Module (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &a:0 Store)) (Subscript (Name &x:0 Load) (Constant i0 None) Load) None) (Assign (list (Name &b:0 Store)) (Subscript (Name &x:0 Load) (Constant i1 None) Load) None) (Assign (list (Name &c:0 Store)) (Subscript (Name &x:0 Load) (Constant i2 None) Load) None) (Import (list (alias &math:0 None))) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (If (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &r:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None)) (/seq (Assign (list (Name &r:0 Store)) (Call (Name g_abs Load) (list (BinOp (Name &c:0 Load) Div (Name &b:0 Load))) nil) None))) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &r:0 Load)) nil)) nil))))) (/seq (Assign (list (Name &d:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Assign (list (Name &r:0 Store)) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &r:0 Load)) nil)) nil))) (/seq (Assign (list (Name &r1:0 Store)) (Call (Attribute (Name &math:0 Load) s_sqrt Load) (list (Name &d:0 Load)) nil) None) (Assign (list (Name &r11:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &r1:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &r12:0 Store)) (fn_3 (Name &r1:0 Load) &a:0 &b:0) None) (Assign (list (Name &r:0 Store)) (List nil Load) None) (Expr (Call (Attribute (Name &r:0 Load) s_append Load) (list (Call (Name g_min Load) (list (Name &r11:0 Load) (Name &r12:0 Load)) nil)) nil)) (Expr (Call (Attribute (Name &r:0 Load) s_append Load) (list (Call (Name g_max Load) (list (Name &r11:0 Load) (Name &r12:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (For (Name &i:0 Store) (Name &r:0 Load) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &i:0 Load)) nil)) nil))) nil None)))))))) nil)",
            "(Module (/seq (Assign (list (Name &__author__:0 Store)) (Constant s-WzEwLCAxMCwgMzIsIDEwLCAzMiwgMzIsIDMyLCA0MiwgNDIsIDQyLCAzMiwgMzIsIDMyLCA5LCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCA0MiwgMTAsIDMyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgNDIsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNDIsIDksIDMyLCA0MiwgNDIsIDQyLCA0MiwgOSwgMzIsIDQyLCA0MiwgNDIsIDQyLCAzMiwgMzIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgMzIsIDMyLCAzMiwgMzIsIDQyLCA0MiwgNDIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNDIsIDksIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDMyLCAzMiwgMzIsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNDIsIDksIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDEwLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDksIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDEwLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDksIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgNDIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCA0MiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgNDIsIDMyLCAzMiwgMTAsIDMyLCA0MiwgNDIsIDQyLCA5LCAzMiwgNDIsIDQyLCA0MiwgMzIsIDQyLCAzMiwgMzIsIDQyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDMyLCAzMiwgMzIsIDMyLCA0MiwgNDIsIDQyLCAzMiwgNDIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDQyLCAzMiwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCA0MiwgMTAsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgNDIsIDQyLCA0MiwgMzIsIDMyLCAxMF0= None) None) (Expr (Constant s-WzEyMSwgOTcsIDMyLCAxMTIsIDk3LCAxMTQsIDIzMSwgOTcsIDEwOCwgOTcsIDEyMSwgOTcsIDk5LCA5NywgMTA5LCAzMiwgMTIxLCA5NywgMzIsIDExMiwgOTcsIDExNCwgMjMxLCA5NywgMTA4LCA5NywgMTIxLCA5NywgOTksIDk3LCAxMDksIDMyLCAxMjEsIDk3LCAzMiwgMTAwLCA5NywgMzIsIDExMiwgOTcsIDExNCwgMjMxLCA5NywgMTA4LCA5NywgMTIxLCA5NywgOTksIDk3LCAxMDksIDEwOSwgMTA5LCAzMiwgNTgsIDQxXQ== None)) (ImportFrom s_math (list (alias s_sqrt &jarbay:0)) i0) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &delta:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Assign (list (Name &u:0 Store)) (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &u:0 Load))) nil))))) (/seq (If (Compare (Name &delta:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &delta:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Assign (list (Name &u:0 Store)) (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &u:0 Load))) nil))) (/seq (Assign (list (Name &x1:0 Store)) (BinOp (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load)) Add (Call (Name &jarbay:0 Load) (list (Name &delta:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &x2:0 Store)) (BinOp (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load)) Sub (Call (Name &jarbay:0 Load) (list (Name &delta:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (If (Compare (Name &x1:0 Load) (list Gt) (list (Name &x2:0 Load))) (/seq (Assign (list (Tuple (list (Name &x1:0 Store) (Name &x2:0 Store)) Store)) (Tuple (list (Name &x2:0 Load) (Name &x1:0 Load)) Load) None)) nil) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x1:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x2:0 Load))) nil))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTUsIDEwMl0= None) Mod (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))) nil))))) (/seq (Assign (list (Name &r:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &r:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (If (Compare (Name &r:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTUsIDEwMl0= None) Mod (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil)) (If (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTUsIDEwMl0= None) Mod (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &r:0 Load)) nil) &a:0 &b:0))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTUsIDEwMl0= None) Mod (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &r:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) nil))) (/seq (If (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTUsIDEwMl0= None) Mod (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &r:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTUsIDEwMl0= None) Mod (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &r:0 Load)) nil) &a:0 &b:0))) nil))) nil)))))))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_* None)) i0) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Tuple (list (Call (Name g_int Load) (list (Name &a:0 Load)) nil) (Call (Name g_int Load) (list (Name &b:0 Load)) nil) (Call (Name g_int Load) (list (Name &c:0 Load)) nil)) Load) None) (Assign (list (Name &d_2:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &d_2:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Assign (list (Name &x_1:0 Store)) (UnaryOp USub (BinOp (Call (Name g_float Load) (list (Name &c:0 Load)) nil) Div (Call (Name g_float Load) (list (Name &b:0 Load)) nil))) None) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x_1:0 Load))) nil))) (/seq (If (Compare (Name &d_2:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil)) (Assign (list (Name &x_small:0 Store)) (BinOp (Call (Name g_float Load) (list (BinOp (UnaryOp USub (Call (Name g_float Load) (list (Name &b:0 Load)) nil)) Sub (Call (Name g_sqrt Load) (list (Name &d_2:0 Load)) nil))) nil) Div (Call (Name g_float Load) (list (BinOp (Constant i2 None) Mult (Name &a:0 Load))) nil)) None) (Assign (list (Name &x_big:0 Store)) (BinOp (Call (Name g_float Load) (list (BinOp (UnaryOp USub (Call (Name g_float Load) (list (Name &b:0 Load)) nil)) Add (Call (Name g_sqrt Load) (list (Name &d_2:0 Load)) nil))) nil) Div (Call (Name g_float Load) (list (BinOp (Constant i2 None) Mult (Name &a:0 Load))) nil)) None) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Call (Name g_min Load) (list (Name &x_small:0 Load) (Name &x_big:0 Load)) nil)) Add (Constant s-WzEwXQ== None)) Add (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Call (Name g_max Load) (list (Name &x_big:0 Load) (Name &x_small:0 Load)) nil)))) nil))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)))) (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))) nil) (Assign (list (Name &D:0 Store)) (BinOp (Call (Name g_pow Load) (list (Name &b:0 Load) (Constant i2 None)) nil) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) None) (Assign (list (Name &x:0 Store)) (UnaryOp USub (Name &b:0 Load)) None) (Assign (list (Name &y:0 Store)) (Call (Name g_pow Load) (list (Name &D:0 Load) (BinOp (Constant i1 None) Div (Constant i2 None))) nil) None) (Assign (list (Name &z:0 Store)) (BinOp (Constant i2 None) Mult (Name &a:0 Load)) None) (Assign (list (Name &r:0 Store)) (Constant i0 None) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)) (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))) nil) (If (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &r:0 Load)) nil)) (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))) nil) (If (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &r:0 Store)) (Constant i1 None) None) (Assign (list (Name &e1:0 Store)) (BinOp (BinOp (Name &x:0 Load) Sub (Name &y:0 Load)) Div (Name &z:0 Load)) None) (Expr (Call (Name g_print Load) (list (Name &r:0 Load) (Name &e1:0 Load)) nil))) (/seq (Assign (list (Name &r:0 Store)) (Constant i2 None) None) (Assign (list (Name &e1:0 Store)) (BinOp (BinOp (Name &x:0 Load) Add (Name &y:0 Load)) Div (Name &z:0 Load)) None) (Assign (list (Name &e2:0 Store)) (BinOp (BinOp (Name &x:0 Load) Sub (Name &y:0 Load)) Div (Name &z:0 Load)) None) (If (Compare (Name &e2:0 Load) (list Lt) (list (Name &e1:0 Load))) (/seq (Assign (list (Tuple (list (Name &e1:0 Store) (Name &e2:0 Store)) Store)) (Tuple (list (Name &e2:0 Load) (Name &e1:0 Load)) Load) None)) nil) (Expr (Call (Name g_print Load) (list (Name &r:0 Load) (Name &e1:0 Load) (Name &e2:0 Load)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)) nil))) (/seq (Assign (list (Name &root1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (fn_1 &c:0 &a:0 &b:0) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &root2:0 Store)) (fn_3 (BinOp (fn_1 &c:0 &a:0 &b:0) Pow (Constant f0.5 None)) &a:0 &b:0) None) (If (Compare (Name &root1:0 Load) (list Eq) (list (Name &root2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &root1:0 Load)) nil)) nil))) (/seq (If (BoolOp And (list (Compare (Call (Name g_type Load) (list (Name &root1:0 Load)) nil) (list Eq) (list (Name g_complex Load))) (Compare (Call (Name g_type Load) (list (Name &root2:0 Load)) nil) (list Eq) (list (Name g_complex Load))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Call (Name g_type Load) (list (Name &root1:0 Load)) nil) (list Eq) (list (Name g_complex Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &root2:0 Load)) nil)) nil))) (/seq (If (Compare (Call (Name g_type Load) (list (Name &root2:0 Load)) nil) (list Eq) (list (Name g_complex Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &root1:0 Load)) nil)) nil))) (/seq (If (Compare (Name &root1:0 Load) (list Gt) (list (Name &root2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &root2:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &root1:0 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &root1:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &root2:0 Load)) nil)) nil))))))))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None) (alias g_math None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzQ5LCAxMCwgMTIzLCA1OCwgNDYsIDU0LCAxMDIsIDEyNV0= None) s_format Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)) nil))))) (/seq (Assign (list (Name &delta:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &delta:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &delta:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzQ5LCAxMCwgMTIzLCA1OCwgNDYsIDU0LCAxMDIsIDEyNV0= None) s_format Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil)) nil))) (/seq (Assign (list (Name &x1:0 Store)) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &delta:0 Load)) nil) &a:0 &b:0) None) (Assign (list (Name &x2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &delta:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjUsIDEwLCAxMjMsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load) (list (Call (Name g_min Load) (list (Name &x1:0 Load) (Name &x2:0 Load)) nil) (Call (Name g_max Load) (list (Name &x1:0 Load) (Name &x2:0 Load)) nil)) nil)) nil))))))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None)) i0) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (If (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Name &c:0 Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (Assign (list (Name &d:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Constant i2 None)) Div (Name &a:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &e:0 Store)) (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Name g_sqrt Load) (list (Name &d:0 Load)) nil)) Div (Constant i2 None)) Div (Name &a:0 Load)) None) (Assign (list (Name &f:0 Store)) (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Name g_sqrt Load) (list (Name &d:0 Load)) nil)) Div (Constant i2 None)) Div (Name &a:0 Load)) None) (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (Name &e:0 Load) (Name &f:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Name &e:0 Load) (Name &f:0 Load)) nil)) nil))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_float Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &d:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) (/seq (Assign (list (Name &x:0 Store)) (List (list (Call (Name g_float Load) (list (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Constant i2 None)) Div (Name &a:0 Load))) nil)) Load) None) (Assign (list (Name &v1:0 Store)) (Call (Name g_float Load) (list (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Constant i2 None)) Div (Name &a:0 Load))) nil) None) (If (UnaryOp Not (Compare (Name &v1:0 Load) (list In) (list (Name &x:0 Load)))) (/seq (AugAssign (Name &x:0 Store) Add (List (list (Name &v1:0 Load)) Load))) nil) (Expr (Call (Attribute (Name &x:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &x:0 Load)) nil)) nil)) (For (Name &v:0 Store) (Name &x:0 Load) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Call (Name g_float Load) (list (Name &v:0 Load)) nil))) nil))) nil None)))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Import (list (alias &math:0 None))) (Assign (list (Name &D:0 Store)) (fn_2 &C:0 &A:0 &B:0) None) (If (BoolOp And (list (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &C:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &C:0 Load)) Div (Name &B:0 Load)) None) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA1MiwgNDYsIDUzLCAxMDJd None) Mod (Name &x:0 Load))) nil))) (/seq (If (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &x1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &B:0 Load)) Add (Call (Attribute (Name &math:0 Load) s_sqrt Load) (list (Name &D:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load))) None) (Assign (list (Name &x2:0 Store)) (fn_3 (Call (Attribute (Name &math:0 Load) s_sqrt Load) (list (Name &D:0 Load)) nil) &A:0 &B:0) None) (Assign (list (Tuple (list (Name &x1:0 Store) (Name &x2:0 Store)) Store)) (IfExp (Compare (Name &x1:0 Load) (list Lt) (list (Name &x2:0 Load))) (Tuple (list (Name &x1:0 Load) (Name &x2:0 Load)) Load) (Tuple (list (Name &x2:0 Load) (Name &x1:0 Load)) Load)) None) (Assign (list (Name &a:0 Store)) (BinOp (Constant s-WzM3LCA1MiwgNDYsIDUzLCAxMDJd None) Mod (Name &x1:0 Load)) None) (Assign (list (Name &b:0 Store)) (BinOp (Constant s-WzM3LCA1MiwgNDYsIDUzLCAxMDJd None) Mod (Name &x2:0 Load)) None) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Name &a:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Name &b:0 Load)) nil))) (/seq (If (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &B:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load))) None) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA1MiwgNDYsIDUzLCAxMDJd None) Mod (Name &x:0 Load))) nil))) nil)))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &coefficients:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &coefficients:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &coefficients:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &coefficients:0 Load) (Constant i2 None) Load)) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp Or (list (Compare (fn_1 &c:0 &a:0 &b:0) (list Lt) (list (Constant i0 None))) (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))) nil))) (/seq (Assign (list (Name &root1:0 Store)) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil) &a:0 &b:0) None) (Assign (list (Name &root2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &min_root:0 Store)) (Call (Name g_min Load) (list (Name &root1:0 Load) (Name &root2:0 Load)) nil) None) (Assign (list (Name &max_root:0 Store)) (Call (Name g_max Load) (list (Name &root1:0 Load) (Name &root2:0 Load)) nil) None) (If (Compare (fn_1 &c:0 &a:0 &b:0) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &root1:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &min_root:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &max_root:0 Load))) nil))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) (/seq (If (Compare (fn_2 &c:0 &a:0 &b:0) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (fn_2 &c:0 &a:0 &b:0) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &d:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (fn_2 &c:0 &a:0 &b:0)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &e:0 Store)) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (fn_2 &c:0 &a:0 &b:0)) nil) &a:0 &b:0) None) (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (Name &e:0 Load) (Name &d:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Name &e:0 Load) (Name &d:0 Load)) nil)) nil))))))))))))) nil)",
            "(Module (/seq (FunctionDef &find_roots:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil) (/seq (If (Compare (Tuple (list (Name &a:1 Load) (Name &b:1 Load) (Name &c:1 Load)) Load) (list Eq) (list (Tuple (list (Constant i0 None) (Constant i0 None) (Constant i0 None)) Load))) (/seq (Return (Constant None None))) nil) (If (Compare (Tuple (list (Name &a:1 Load) (Name &b:1 Load)) Load) (list Eq) (list (Tuple (list (Constant i0 None) (Constant i0 None)) Load))) (/seq (Return (List nil Load))) nil) (If (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (List (list (BinOp (UnaryOp USub (Name &c:1 Load)) Div (Name &b:1 Load))) Load))) nil) (Assign (list (Name &d:1 Store)) (BinOp (BinOp (BinOp (Name &b:1 Load) Pow (Constant i2 None)) Div (BinOp (Constant i4 None) Mult (BinOp (Name &a:1 Load) Pow (Constant i2 None)))) Sub (BinOp (Name &c:1 Load) Div (Name &a:1 Load))) None) (If (Compare (Name &d:1 Load) (list Lt) (list (Constant i0 None))) (/seq (Return (List nil Load))) nil) (Assign (list (Name &m:1 Store)) (BinOp (UnaryOp USub (Name &b:1 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load))) None) (If (Compare (Name &d:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (List (list (Name &m:1 Load)) Load))) nil) (Return (List (list (BinOp (Name &m:1 Load) Sub (BinOp (Name &d:1 Load) Pow (Constant f0.5 None))) (BinOp (Name &m:1 Load) Add (BinOp (Name &d:1 Load) Pow (Constant f0.5 None)))) Load))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_float Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &roots:0 Store)) (Call (Name &find_roots:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil) None) (If (Compare (Name &roots:0 Load) (list Is) (list (Constant None None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &roots:0 Load)) nil)) nil)) (For (Name &r:0 Store) (Name &roots:0 Load) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNDgsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &r:0 Load)) nil)) nil))) nil None)))) nil)) nil)",
            "(Module (/seq (ImportFrom s_decimal (list (alias g_* None)) i0) (ImportFrom s_math (list (alias g_sqrt None)) i0) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_Decimal Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (If (Compare (fn_1 &c:0 &a:0 &b:0) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Assign (list (Name &arr:0 Store)) (List (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Name g_Decimal Load) (list (Call (Name g_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (fn_3 (Call (Name g_Decimal Load) (list (Call (Name g_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil)) nil) &a:0 &b:0)) Load) None) (If (Compare (Call (Name g_max Load) (list (Name &arr:0 Load)) nil) (list Eq) (list (Call (Name g_min Load) (list (Name &arr:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Subscript (Name &arr:0 Load) (Constant i0 None) Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &arr:0 Load)) nil) (Starred (Call (Name g_sorted Load) (list (Name &arr:0 Load)) nil) Load)) nil))))))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Name &c:0 Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None)) i0) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil)) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))) (/seq (If (Compare (BinOp (Name &b:0 Load) Pow (Constant i2 None)) (list Eq) (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil))) (/seq (If (Compare (BinOp (Name &b:0 Load) Pow (Constant i2 None)) (list Lt) (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &r1:0 Store)) (BinOp (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load)) Sub (Call (Name g_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &r2:0 Store)) (BinOp (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load)) Add (Call (Name g_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (If (Compare (Name &r1:0 Load) (list Lt) (list (Name &r2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &r1:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Name &r2:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Name &r2:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Name &r1:0 Load)) nil))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &d:0 Store)) (Constant i0 None) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &d:0 Store) Sub (Name &c:0 Load)) (AugAssign (Name &d:0 Store) Div (Name &b:0 Load)) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (If (Compare (Name &d:0 Load) (list Eq) (list (UnaryOp USub (Constant i0 None)))) (/seq (Assign (list (Name &d:0 Store)) (Constant i0 None) None)) nil) (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (Assign (list (Name &d:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (AugAssign (Name &d:0 Store) Sub (Name &b:0 Load)) (AugAssign (Name &d:0 Store) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &q:0 Store)) (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)) None) (AugAssign (Name &q:0 Store) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (Assign (list (Name &w:0 Store)) (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)) None) (AugAssign (Name &w:0 Store) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (If (Compare (Name &q:0 Load) (list Gt) (list (Name &w:0 Load))) (/seq (Assign (list (Tuple (list (Name &q:0 Store) (Name &w:0 Store)) Store)) (Tuple (list (Name &w:0 Load) (Name &q:0 Load)) Load) None)) nil) (Expr (Call (Name g_print Load) (list (Name &q:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Name &w:0 Load)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil)) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &t:0 Store)) (IfExp (Name &b:0 Load) (List (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) Load) (List (list (UnaryOp USub (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) Load)) None) (If (Name &a:0 Load) (/seq (Assign (list (Tuple (list (Name &d:0 Store) (Name &x:0 Store)) Store)) (Tuple (list (fn_2 &c:0 &a:0 &b:0) (BinOp (UnaryOp USub (Constant i2 None)) Mult (Name &a:0 Load))) Load) None) (If (Name &d:0 Load) (/seq (Assign (list (Name &t:0 Store)) (IfExp (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (List (list (Constant i0 None)) Load) (BinOp (List (list (Constant i2 None)) Load) Add (Call (Name g_sorted Load) (list (List (list (BinOp (BinOp (Name &b:0 Load) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Name &x:0 Load)) (BinOp (BinOp (Name &b:0 Load) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Name &x:0 Load))) Load)) nil))) None)) (/seq (Assign (list (Name &t:0 Store)) (List (list (Constant i1 None) (BinOp (Name &b:0 Load) Div (Name &x:0 Load))) Load) None)))) nil) (Expr (Call (Name g_print Load) (list (Starred (Name &t:0 Load) Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_os None))) (Import (list (alias g_sys None))) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (Import (list (alias g_math None))) (ImportFrom s_queue (list (alias g_Queue None)) i0) (Import (list (alias g_collections None))) (Import (list (alias g_itertools None))) (Import (list (alias g_bisect None))) (Import (list (alias g_heapq None))) (Import (list (alias g_random None))) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq Pass) nil None None) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name g_IOBase Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:19 None None) (arg &file:19 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:19 Load) s__fd Store)) (Call (Attribute (Name &file:19 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:19 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None) (Assign (list (Attribute (Name &self:19 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:19 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:19 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:19 Load) s_write Store)) (IfExp (Attribute (Name &self:19 Load) s_writable Load) (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:20 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:20 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:20 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:20 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:20 Load)) (/seq Break) nil) (Assign (list (Name &ptr:20 Store)) (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_write Load) (list (Name &b:20 Load)) nil) (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_seek Load) (list (Name &ptr:20 Load)) nil)) Load))) nil) (Assign (list (Attribute (Name &self:20 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:20 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:21 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:21 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:21 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:21 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:21 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:21 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:21 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:21 Load))) None) (Assign (list (Name &ptr:21 Store)) (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_write Load) (list (Name &b:21 Load)) nil) (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_seek Load) (list (Name &ptr:21 Load)) nil)) Load))) nil) (AugAssign (Attribute (Name &self:21 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:21 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:22 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:22 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name g_os Load) s_write Load) (list (Attribute (Name &self:22 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:22 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name g_IOBase Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:23 None None) (arg &file:23 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:23 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:23 Load)) nil) None) (Assign (list (Attribute (Name &self:23 Load) s_flush Store)) (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:23 Load) s_writable Store)) (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:23 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:24 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:24 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:23 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:23 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:23 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil)) None) (FunctionDef &binary:0 (arguments nil (list (arg &n:3 None None)) None nil nil None nil) (/seq (Return (Call (Attribute (Call (Name g_bin Load) (list (Name &n:3 Load)) nil) s_replace Load) (list (Constant s_0b None) (Constant s_ None)) nil))) nil None None) (FunctionDef &decimal:0 (arguments nil (list (arg &s:4 None None)) None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Name &s:4 Load) (Constant i2 None)) nil))) nil None None) (FunctionDef &pow2:0 (arguments nil (list (arg &n:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &p:5 Store)) (Constant i0 None) None) (While (Compare (Name &n:5 Load) (list Gt) (list (Constant i1 None))) (/seq (AugAssign (Name &n:5 Store) FloorDiv (Constant i2 None)) (AugAssign (Name &p:5 Store) Add (Constant i1 None))) nil) (Return (Name &p:5 Load))) nil None None) (FunctionDef &primeFactors:0 (arguments nil (list (arg &n:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &l:6 Store)) (List nil Load) None) (While (Compare (BinOp (Name &n:6 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &l:6 Load) s_append Load) (list (Constant i2 None)) nil)) (Assign (list (Name &n:6 Store)) (BinOp (Name &n:6 Load) Div (Constant i2 None)) None)) nil) (For (Name &i:6 Store) (Call (Name g_range Load) (list (Constant i3 None) (BinOp (Call (Name g_int Load) (list (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &n:6 Load)) nil)) nil) Add (Constant i1 None)) (Constant i2 None)) nil) (/seq (While (Compare (BinOp (Name &n:6 Load) Mod (Name &i:6 Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &l:6 Load) s_append Load) (list (Name &i:6 Load)) nil)) (Assign (list (Name &n:6 Store)) (BinOp (Name &n:6 Load) Div (Name &i:6 Load)) None)) nil)) nil None) (If (Compare (Name &n:6 Load) (list Gt) (list (Constant i2 None))) (/seq (Expr (Call (Attribute (Name &l:6 Load) s_append Load) (list (Call (Name g_int Load) (list (Name &n:6 Load)) nil)) nil))) nil) (Return (Name &l:6 Load))) nil None None) (FunctionDef &isPrime:0 (arguments nil (list (arg &n:7 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:7 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant False None))) (/seq (Assign (list (Name &root:7 Store)) (Call (Name g_int Load) (list (BinOp (Name &n:7 Load) Pow (Constant f0.5 None))) nil) None) (AugAssign (Name &root:7 Store) Add (Constant i1 None)) (For (Name &i:7 Store) (Call (Name g_range Load) (list (Constant i2 None) (Name &root:7 Load)) nil) (/seq (If (Compare (BinOp (Name &n:7 Load) Mod (Name &i:7 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant False None))) nil)) nil None) (Return (Constant True None))))) nil None None) (FunctionDef &maxPrimeFactors:0 (arguments nil (list (arg &n:8 None None)) None nil nil None nil) (/seq (Assign (list (Name &maxPrime:8 Store)) (UnaryOp USub (Constant i1 None)) None) (While (Compare (BinOp (Name &n:8 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &maxPrime:8 Store)) (Constant i2 None) None) (AugAssign (Name &n:8 Store) RShift (Constant i1 None))) nil) (For (Name &i:8 Store) (Call (Name g_range Load) (list (Constant i3 None) (BinOp (Call (Name g_int Load) (list (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &n:8 Load)) nil)) nil) Add (Constant i1 None)) (Constant i2 None)) nil) (/seq (While (Compare (BinOp (Name &n:8 Load) Mod (Name &i:8 Load)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &maxPrime:8 Store)) (Name &i:8 Load) None) (Assign (list (Name &n:8 Store)) (BinOp (Name &n:8 Load) Div (Name &i:8 Load)) None)) nil)) nil None) (If (Compare (Name &n:8 Load) (list Gt) (list (Constant i2 None))) (/seq (Assign (list (Name &maxPrime:8 Store)) (Name &n:8 Load) None)) nil) (Return (Call (Name g_int Load) (list (Name &maxPrime:8 Load)) nil))) nil None None) (FunctionDef &countcon:0 (arguments nil (list (arg &s:9 None None) (arg &i:9 None None)) None nil nil None nil) (/seq (Assign (list (Name &c:9 Store)) (Constant i0 None) None) (Assign (list (Name &ch:9 Store)) (Subscript (Name &s:9 Load) (Name &i:9 Load) Load) None) (For (Name &i:9 Store) (Call (Name g_range Load) (list (Name &i:9 Load) (Call (Name g_len Load) (list (Name &s:9 Load)) nil)) nil) (/seq (If (Compare (Subscript (Name &s:9 Load) (Name &i:9 Load) Load) (list Eq) (list (Name &ch:9 Load))) (/seq (AugAssign (Name &c:9 Store) Add (Constant i1 None))) (/seq Break))) nil None) (Return (Name &c:9 Load))) nil None None) (FunctionDef &lis:0 (arguments nil (list (arg &arr:10 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:10 Store)) (Call (Name g_len Load) (list (Name &arr:10 Load)) nil) None) (Assign (list (Name &lis:10 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Name &n:10 Load)) None) (For (Name &i:10 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &n:10 Load)) nil) (/seq (For (Name &j:10 Store) (Call (Name g_range Load) (list (Constant i0 None) (Name &i:10 Load)) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &arr:10 Load) (Name &i:10 Load) Load) (list Gt) (list (Subscript (Name &arr:10 Load) (Name &j:10 Load) Load))) (Compare (Subscript (Name &lis:10 Load) (Name &i:10 Load) Load) (list Lt) (list (BinOp (Subscript (Name &lis:10 Load) (Name &j:10 Load) Load) Add (Constant i1 None)))))) (/seq (Assign (list (Subscript (Name &lis:10 Load) (Name &i:10 Load) Store)) (BinOp (Subscript (Name &lis:10 Load) (Name &j:10 Load) Load) Add (Constant i1 None)) None)) nil)) nil None)) nil None) (Assign (list (Name &maximum:10 Store)) (Constant i0 None) None) (For (Name &i:10 Store) (Call (Name g_range Load) (list (Name &n:10 Load)) nil) (/seq (Assign (list (Name &maximum:10 Store)) (Call (Name g_max Load) (list (Name &maximum:10 Load) (Subscript (Name &lis:10 Load) (Name &i:10 Load) Load)) nil) None)) nil None) (Return (Name &maximum:10 Load))) nil None None) (FunctionDef &isSubSequence:0 (arguments nil (list (arg &str1:11 None None) (arg &str2:11 None None)) None nil nil None nil) (/seq (Assign (list (Name &m:11 Store)) (Call (Name g_len Load) (list (Name &str1:11 Load)) nil) None) (Assign (list (Name &n:11 Store)) (Call (Name g_len Load) (list (Name &str2:11 Load)) nil) None) (Assign (list (Name &j:11 Store)) (Constant i0 None) None) (Assign (list (Name &i:11 Store)) (Constant i0 None) None) (While (BoolOp And (list (Compare (Name &j:11 Load) (list Lt) (list (Name &m:11 Load))) (Compare (Name &i:11 Load) (list Lt) (list (Name &n:11 Load))))) (/seq (If (Compare (Subscript (Name &str1:11 Load) (Name &j:11 Load) Load) (list Eq) (list (Subscript (Name &str2:11 Load) (Name &i:11 Load) Load))) (/seq (Assign (list (Name &j:11 Store)) (BinOp (Name &j:11 Load) Add (Constant i1 None)) None)) nil) (Assign (list (Name &i:11 Store)) (BinOp (Name &i:11 Load) Add (Constant i1 None)) None)) nil) (Return (Compare (Name &j:11 Load) (list Eq) (list (Name &m:11 Load))))) nil None None) (FunctionDef &maxfac:0 (arguments nil (list (arg &n:12 None None)) None nil nil None nil) (/seq (Assign (list (Name &root:12 Store)) (Call (Name g_int Load) (list (BinOp (Name &n:12 Load) Pow (Constant f0.5 None))) nil) None) (For (Name &i:12 Store) (Call (Name g_range Load) (list (Constant i2 None) (BinOp (Name &root:12 Load) Add (Constant i1 None))) nil) (/seq (If (Compare (BinOp (Name &n:12 Load) Mod (Name &i:12 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (BinOp (Name &n:12 Load) FloorDiv (Name &i:12 Load)))) nil)) nil None) (Return (Name &n:12 Load))) nil None None) (FunctionDef &p2:0 (arguments nil (list (arg &n:13 None None)) None nil nil None nil) (/seq (Assign (list (Name &c:13 Store)) (Constant i0 None) None) (While (Compare (BinOp (Name &n:13 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &n:13 Store) FloorDiv (Constant i2 None)) (AugAssign (Name &c:13 Store) Add (Constant i1 None))) nil) (Return (Name &c:13 Load))) nil None None) (FunctionDef &seive:0 (arguments nil (list (arg &n:14 None None)) None nil nil None nil) (/seq (Assign (list (Name &primes:14 Store)) (BinOp (List (list (Constant True None)) Load) Mult (BinOp (Name &n:14 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name &primes:14 Load) (Constant i1 None) Store) (Subscript (Name &primes:14 Load) (Constant i0 None) Store)) (Constant False None) None) (Assign (list (Name &i:14 Store)) (Constant i2 None) None) (While (Compare (BinOp (Name &i:14 Load) Mult (Name &i:14 Load)) (list LtE) (list (Name &n:14 Load))) (/seq (If (Compare (Subscript (Name &primes:14 Load) (Name &i:14 Load) Load) (list Eq) (list (Constant True None))) (/seq (For (Name &j:14 Store) (Call (Name g_range Load) (list (BinOp (Name &i:14 Load) Mult (Name &i:14 Load)) (BinOp (Name &n:14 Load) Add (Constant i1 None)) (Name &i:14 Load)) nil) (/seq (Assign (list (Subscript (Name &primes:14 Load) (Name &j:14 Load) Store)) (Constant False None) None)) nil None)) nil) (AugAssign (Name &i:14 Store) Add (Constant i1 None))) nil) (Assign (list (Name &pr:14 Store)) (List nil Load) None) (For (Name &i:14 Store) (Call (Name g_range Load) (list (Constant i0 None) (BinOp (Name &n:14 Load) Add (Constant i1 None))) nil) (/seq (If (Subscript (Name &primes:14 Load) (Name &i:14 Load) Load) (/seq (Expr (Call (Attribute (Name &pr:14 Load) s_append Load) (list (Name &i:14 Load)) nil))) nil)) nil None) (Return (Name &pr:14 Load))) nil None None) (FunctionDef &ncr:0 (arguments nil (list (arg &n:15 None None) (arg &r:15 None None) (arg &p:15 None None)) None nil nil None nil) (/seq (Assign (list (Name &num:15 Store) (Name &den:15 Store)) (Constant i1 None) None) (For (Name &i:15 Store) (Call (Name g_range Load) (list (Name &r:15 Load)) nil) (/seq (Assign (list (Name &num:15 Store)) (BinOp (BinOp (Name &num:15 Load) Mult (BinOp (Name &n:15 Load) Sub (Name &i:15 Load))) Mod (Name &p:15 Load)) None) (Assign (list (Name &den:15 Store)) (BinOp (BinOp (Name &den:15 Load) Mult (BinOp (Name &i:15 Load) Add (Constant i1 None))) Mod (Name &p:15 Load)) None)) nil None) (Return (BinOp (BinOp (Name &num:15 Load) Mult (Call (Name g_pow Load) (list (Name &den:15 Load) (BinOp (Name &p:15 Load) Sub (Constant i2 None)) (Name &p:15 Load)) nil)) Mod (Name &p:15 Load)))) nil None None) (FunctionDef &denofactinverse:0 (arguments nil (list (arg &n:16 None None) (arg &m:16 None None)) None nil nil None nil) (/seq (Assign (list (Name &fac:16 Store)) (Constant i1 None) None) (For (Name &i:16 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:16 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &fac:16 Store)) (BinOp (BinOp (Name &fac:16 Load) Mult (Name &i:16 Load)) Mod (Name &m:16 Load)) None)) nil None) (Return (Call (Name g_pow Load) (list (Name &fac:16 Load) (BinOp (Name &m:16 Load) Sub (Constant i2 None)) (Name &m:16 Load)) nil))) nil None None) (FunctionDef &numofact:0 (arguments nil (list (arg &n:17 None None) (arg &m:17 None None)) None nil nil None nil) (/seq (Assign (list (Name &fac:17 Store)) (Constant i1 None) None) (For (Name &i:17 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:17 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &fac:17 Store)) (BinOp (BinOp (Name &fac:17 Load) Mult (Name &i:17 Load)) Mod (Name &m:17 Load)) None)) nil None) (Return (Name &fac:17 Load))) nil None None) (FunctionDef &sod:0 (arguments nil (list (arg &n:18 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:18 Store)) (Constant i0 None) None) (While (Compare (Name &n:18 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &s:18 Store) Add (BinOp (Name &n:18 Load) Mod (Constant i10 None))) (AugAssign (Name &n:18 Store) FloorDiv (Constant i10 None))) nil) (Return (Name &s:18 Load))) nil None None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &d:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))))))) (/seq (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil))) (/seq (Assign (list (Name &t:0 Store)) (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)) None) (Assign (list (Name &r1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &t:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &r2:0 Store)) (fn_3 (Name &t:0 Load) &a:0 &b:0) None) (Assign (list (Tuple (list (Name &r1:0 Store) (Name &r2:0 Store)) Store)) (Tuple (list (Call (Name g_min Load) (list (Name &r1:0 Load) (Name &r2:0 Load)) nil) (Call (Name g_max Load) (list (Name &r1:0 Load) (Name &r2:0 Load)) nil)) Load) None) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Name &r1:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Name &r2:0 Load)) nil))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil) None) (If (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &C:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &C:0 Load)) Div (Name &B:0 Load))) nil))))) (/seq (Assign (list (Name &D:0 Store)) (fn_2 &C:0 &A:0 &B:0) None) (If (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &B:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load)))) nil))) (/seq (Assign (list (Name &X:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &B:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &D:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load))) None) (Assign (list (Name &Y:0 Store)) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &D:0 Load)) nil) &A:0 &B:0) None) (If (Compare (Name &X:0 Load) (list Gt) (list (Name &Y:0 Load))) (/seq (Assign (list (Tuple (list (Name &X:0 Store) (Name &Y:0 Store)) Store)) (Tuple (list (Name &Y:0 Load) (Name &X:0 Load)) Load) None)) nil) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load) (list (Name &X:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load) (list (Name &Y:0 Load)) nil)) nil))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (ListComp (Call (Name g_float Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil) nil i0))) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Constant i0 None))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))) nil))))) (/seq (Assign (list (Name &aux:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &aux:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &arr:0 Store)) (List (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &aux:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &aux:0 Load)) nil) &a:0 &b:0)) Load) None) (Expr (Call (Attribute (Name &arr:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Subscript (Name &arr:0 Load) (Constant i0 None) Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Subscript (Name &arr:0 Load) (Constant i1 None) Load))) nil))) (/seq (If (Compare (Name &aux:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Constant i0 None))) nil))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzQ5LCAxMF0= None) Add (Call (Name g_str Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) nil))))) (/seq (If (Compare (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)) (list Eq) (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil)) nil))) (/seq (If (Compare (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)) (list Lt) (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &d:0 Store)) (BinOp (BinOp (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)) Sub (BinOp (BinOp (Constant f4.0 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) Pow (Constant f0.5 None)) None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNSwgMTAsIDEyMywgNDksIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Starred (Call (Name g_sorted Load) (list (List (list (fn_3 (Name &d:0 Load) &a:0 &b:0) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &d:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) Load)) nil) Load)) nil)) nil))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:1 Load)) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &d:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) (/seq (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &b:0 Store)) (BinOp (Name &b:0 Load) Div (Name &a:0 Load)) None) (Assign (list (Name &d:0 Store)) (BinOp (Name &d:0 Load) Div (BinOp (Name &a:0 Load) Pow (Constant i2 None))) None) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Constant i2 None))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Constant i2 None))) nil))))))))))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_* None)) i0) (FunctionDef &kv:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &q:1 Store) (Name &w:1 Store) (Name &e:1 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (BinOp (BinOp (Compare (Name &q:1 Load) (list Eq) (list (Constant i0 None))) BitAnd (Compare (Name &w:1 Load) (list Eq) (list (Constant i0 None)))) BitAnd (Compare (Name &e:1 Load) (list Eq) (list (Constant i0 None)))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BinOp (Compare (Name &q:1 Load) (list Eq) (list (Constant i0 None))) BitAnd (Compare (Name &w:1 Load) (list Eq) (list (Constant i0 None)))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &q:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (BinOp (UnaryOp USub (Name &e:1 Load)) Div (Name &w:1 Load)))) nil))) (/seq (Assign (list (Name &d:1 Store)) (fn_2 &e:1 &q:1 &w:1) None) (If (Compare (Name &d:1 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (If (Compare (Name &d:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (BinOp (UnaryOp USub (Name &w:1 Load)) Div (BinOp (Constant i2 None) Mult (Name &q:1 Load))))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil)) (Assign (list (Name &a:1 Store)) (List (list (fn_3 (Call (Name g_sqrt Load) (list (Name &d:1 Load)) nil) &q:1 &w:1) (BinOp (BinOp (UnaryOp USub (Name &w:1 Load)) Add (Call (Name g_sqrt Load) (list (Name &d:1 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &q:1 Load)))) Load) None) (Expr (Call (Attribute (Name &a:1 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Subscript (Name &a:1 Load) (Constant i0 None) Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Subscript (Name &a:1 Load) (Constant i1 None) Load))) nil))))))))))))) nil None None) (Expr (Call (Name &kv:0 Load) nil nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None)) i0) (Assign (list (Name &abc:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &abc:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &abc:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &abc:0 Load) (Constant i2 None) Load)) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))))) (/seq (If (Compare (fn_1 &c:0 &a:0 &b:0) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (If (Compare (fn_1 &c:0 &a:0 &b:0) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Constant i2 None)) Div (Name &a:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil)) (Assign (list (Name &p1:0 Store)) (Call (Name g_min Load) (list (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Name g_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil)) Div (Constant i2 None)) Div (Name &a:0 Load)) (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Name g_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil)) Div (Constant i2 None)) Div (Name &a:0 Load))) nil) None) (Assign (list (Name &p2:0 Store)) (Call (Name g_max Load) (list (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Name g_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil)) Div (Constant i2 None)) Div (Name &a:0 Load)) (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Name g_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil)) Div (Constant i2 None)) Div (Name &a:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load) (list (Name &p1:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load) (list (Name &p2:0 Load)) nil)) nil))))))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_* None)) i0) (ImportFrom s_decimal (list (alias g_* None)) i0) (Assign (list (Attribute (Call (Name g_getcontext Load) nil nil) s_prec Store)) (Constant i10 None) None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (List (list (Call (Name g_int Load) (list (Name &a:0 Load)) nil) (Call (Name g_int Load) (list (Name &b:0 Load)) nil) (Call (Name g_int Load) (list (Name &c:0 Load)) nil)) Load) None) (Assign (list (Name &d:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &res1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Name g_sqrt Load) (list (Name &d:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &res2:0 Store)) (fn_3 (Call (Name g_sqrt Load) (list (Name &d:0 Load)) nil) &a:0 &b:0) None) (If (Compare (Name &res1:0 Load) (list Eq) (list (Name &res2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &res1:0 Load))) nil))) (/seq (If (Compare (Name &res1:0 Load) (list Lt) (list (Name &res2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &res1:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &res2:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &res2:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &res1:0 Load))) nil))))))) (/seq (Assign (list (Name &res1:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &res1:0 Load))) nil))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &A:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store)) (Tuple (list (UnaryOp USub (Name &A:0 Load)) (UnaryOp USub (Name &B:0 Load)) (UnaryOp USub (Name &C:0 Load))) Load) None)) nil) (If (Compare (Name &A:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &some_num:0 Store)) (BinOp (BinOp (BinOp (Name &B:0 Load) Mult (Name &B:0 Load)) Div (BinOp (Constant i4 None) Mult (Name &A:0 Load))) Sub (Name &C:0 Load)) None)) nil) (If (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &C:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (Compare (Name &B:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &C:0 Load)) Div (Name &B:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))) (/seq (If (Compare (Name &some_num:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &some_num:0 Load)) nil)) Sub (BinOp (Name &B:0 Load) Div (BinOp (Constant i2 None) Mult (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &A:0 Load)) nil)))) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &A:0 Load)) nil))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &some_num:0 Load)) nil) Sub (BinOp (Name &B:0 Load) Div (BinOp (Constant i2 None) Mult (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &A:0 Load)) nil)))) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &A:0 Load)) nil))) nil))) (/seq (If (Compare (UnaryOp USub (Constant f1e-08 None)) (list Lt Lt) (list (Name &some_num:0 Load) (Constant f1e-08 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &B:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_float Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) (/seq (If (Compare (fn_2 &c:0 &a:0 &b:0) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Assign (list (Tuple (list (Name &a1:0 Store) (Name &a2:0 Store)) Store)) (Tuple (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (BinOp (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)) Sub (BinOp (BinOp (Name &a:0 Load) Mult (Constant i4 None)) Mult (Name &c:0 Load))) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (fn_3 (BinOp (BinOp (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)) Sub (BinOp (BinOp (Name &a:0 Load) Mult (Constant i4 None)) Mult (Name &c:0 Load))) Pow (Constant f0.5 None)) &a:0 &b:0)) Load) None) (If (Compare (Name &a1:0 Load) (list Eq) (list (Name &a2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &a1:0 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load) (list (Call (Name g_min Load) (list (Name &a1:0 Load) (Name &a2:0 Load)) nil)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load) (list (Call (Name g_max Load) (list (Name &a1:0 Load) (Name &a2:0 Load)) nil)) nil)) nil))))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))) nil))))) (/seq (Assign (list (Name &d:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &l:0 Store)) (List (list (fn_3 (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)) &a:0 &b:0) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) Load) None) (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Subscript (Name &l:0 Load) (Constant i0 None) Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Subscript (Name &l:0 Load) (Constant i1 None) Load))) nil))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &data:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &a:0 Store)) (Subscript (Name &data:0 Load) (Constant i0 None) Load) None) (Assign (list (Name &b:0 Store)) (Subscript (Name &data:0 Load) (Constant i1 None) Load) None) (Assign (list (Name &c:0 Store)) (Subscript (Name &data:0 Load) (Constant i2 None) Load) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) (/seq (If (Compare (fn_1 &c:0 &a:0 &b:0) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Assign (list (Name &ans1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &ans2:0 Store)) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil) &a:0 &b:0) None) (If (Compare (Name &ans1:0 Load) (list Eq) (list (Name &ans2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Name &ans1:0 Load)) nil))) (/seq (Assign (list (Name &answers:0 Store)) (List (list (Name &ans1:0 Load) (Name &ans2:0 Load)) Load) None) (Expr (Call (Attribute (Name &answers:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Subscript (Name &answers:0 Load) (Constant i0 None) Load)) nil)) (Expr (Call (Name g_print Load) (list (Subscript (Name &answers:0 Load) (Constant i1 None) Load)) nil))))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Import (list (alias g_time None))) (Import (list (alias g_sys None))) (Import (list (alias g_os None))) (ImportFrom s_math (list (alias g_gcd None) (alias g_floor None) (alias g_sqrt None) (alias g_log None)) i0) (Assign (list (Name &start_time:0 Store)) (Call (Attribute (Name g_time Load) s_time Load) nil nil) None) (FunctionDef &iin:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil))) nil None None) (FunctionDef &sin:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &listin:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (FunctionDef &liststr:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (FunctionDef &ceill:0 (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (/seq (Return (IfExp (Compare (Name &x:1 Load) (list Eq) (list (Call (Name g_int Load) (list (Name &x:1 Load)) nil))) (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (BinOp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) Add (Constant i1 None))))) nil None None) (FunctionDef &ceilldiv:0 (arguments nil (list (arg &x:2 None None) (arg &d:2 None None)) None nil nil None nil) (/seq (Expr (IfExp (Compare (BinOp (Name &x:2 Load) Mod (Name &d:2 Load)) (list Eq) (list (Constant i0 None))) (BinOp (Name &x:2 Load) FloorDiv (Name &d:2 Load)) (BinOp (BinOp (Name &x:2 Load) FloorDiv (Name &d:2 Load)) Add (Constant i1 None))))) nil None None) (FunctionDef &LCM:0 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &a:3 Load) Mult (Name &b:3 Load)) FloorDiv (Call (Name g_gcd Load) (list (Name &a:3 Load) (Name &b:3 Load)) nil)))) nil None None) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &a:4 Store) (Name &b:4 Store) (Name &c:4 Store)) Store)) (Call (Name &listin:0 Load) nil nil) None) (If (Compare (Name &a:4 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:4 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:4 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)) (Return None)) nil) (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Return None)) nil) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:4 Load)) Div (Name &b:4 Load))) nil)) nil)) (Return None)) nil) (Assign (list (Name &d:4 Store)) (fn_1 &c:4 &a:4 &b:4) None) (If (Compare (Name &d:4 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Return None)) nil) (Assign (list (Name &x:4 Store)) (Call (Name g_set Load) nil nil) None) (Expr (Call (Attribute (Name &x:4 Load) s_add Load) (list (BinOp (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:4 Load)) Sub (Call (Name g_sqrt Load) (list (Name &d:4 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:4 Load)))) nil)) (Expr (Call (Attribute (Name &x:4 Load) s_add Load) (list (BinOp (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:4 Load)) Add (Call (Name g_sqrt Load) (list (Name &d:4 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:4 Load)))) nil)) (Assign (list (Name &x:4 Store)) (Call (Name g_list Load) (list (Name &x:4 Load)) nil) None) (Expr (Call (Attribute (Name &x:4 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &x:4 Load)) nil)) nil)) (For (Name &i:4 Store) (Name &x:4 Load) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Name &i:4 Load)) nil)) nil))) nil None)) nil None None) (Assign (list (Name &t:0 Store)) (Constant i1 None) None) (For (Name &hula:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (Expr (Call (Name &solve:0 Load) nil nil))) nil None) (Expr (Call (Attribute (Attribute (Name g_sys Load) s_stderr Load) s_write Load) (list (Call (Name g_str Load) (list (BinOp (Call (Attribute (Name g_time Load) s_time Load) nil nil) Sub (Name &start_time:0 Load))) nil)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_float Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &d:0 Store)) (BinOp (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)) Sub (BinOp (BinOp (Constant f4.0 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load))) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (Assign (list (Name &x1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)) Div (BinOp (Constant f2.0 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &x2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)) Div (BinOp (Constant f2.0 None) Mult (Name &a:0 Load))) None) (If (Compare (Name &x1:0 Load) (list Eq) (list (Name &x2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x1:0 Load)) nil)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (If (Compare (Name &x1:0 Load) (list Lt) (list (Name &x2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x1:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x2:0 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x2:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTQsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x1:0 Load)) nil)) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Import (list (alias g_math None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (FunctionDef &inp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))) nil None None) (FunctionDef &inlt:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Name &q:0 Store)) (Call (Name &inlt:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Subscript (Name &q:0 Load) (Constant i0 None) Load) None) (Assign (list (Name &b:0 Store)) (Subscript (Name &q:0 Load) (Constant i1 None) Load) None) (Assign (list (Name &c:0 Store)) (Subscript (Name &q:0 Load) (Constant i2 None) Load) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load) (list (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &b:0 Load))) nil)) nil))))))) (/seq (Assign (list (Name &d:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil)) (Assign (list (Name &bb:0 Store)) (List (list (BinOp (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (BinOp (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load)) Sub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) Load) None) (Expr (Call (Attribute (Name &bb:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load) (list (Subscript (Name &bb:0 Load) (Constant i0 None) Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load) (list (Subscript (Name &bb:0 Load) (Constant i1 None) Load)) nil)) nil))) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))))))) nil)) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &D:0 Store)) (Call (Name g_int Load) (list (fn_2 &c:0 &a:0 &b:0)) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (If (Compare (BinOp (UnaryOp USub (BinOp (Name &b:0 Load) Add (BinOp (Name &D:0 Load) Pow (Constant f0.5 None)))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (list Lt) (list (BinOp (UnaryOp USub (BinOp (Name &b:0 Load) Sub (BinOp (Name &D:0 Load) Mult (Constant f0.5 None)))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (BinOp (Name &b:0 Load) Add (BinOp (Name &D:0 Load) Pow (Constant f0.5 None)))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (BinOp (Name &b:0 Load) Sub (BinOp (Name &D:0 Load) Pow (Constant f0.5 None)))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (BinOp (Name &b:0 Load) Sub (BinOp (Name &D:0 Load) Pow (Constant f0.5 None)))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (BinOp (Name &b:0 Load) Add (BinOp (Name &D:0 Load) Pow (Constant f0.5 None)))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil))))) (/seq (If (BoolOp And (list (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil)) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None)) i0) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:3 Load)) nil) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil) nil i0))) None) (FunctionDef &number_solutions:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &d:1 Store)) (fn_1 &c:1 &a:1 &b:1) None) (If (BoolOp And (list (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:1 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Return (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:1 Load) (list Eq) (list (Constant i0 None))))) (/seq (Return (UnaryOp USub (Constant i1 None)))) (/seq (If (BoolOp And (list (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:1 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Return (Constant i1 None))) (/seq (If (Compare (Name &d:1 Load) (list Gt) (list (Constant i0 None))) (/seq (Return (Constant i2 None))) (/seq (If (Compare (Name &d:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i1 None))) (/seq (Return (Constant i0 None))))))))))))) nil None None) (FunctionDef &quadratic:0 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &ans:2 Store)) (List nil Load) None) (If (Compare (Name &a:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (BinOp (UnaryOp USub (Name &c:2 Load)) Div (Name &b:2 Load))) nil))) (/seq (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:2 Load)) Add (Call (Name g_sqrt Load) (list (fn_1 &c:2 &a:2 &b:2)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:2 Load)))) nil)) (Expr (Call (Attribute (Name &ans:2 Load) s_append Load) (list (fn_3 (Call (Name g_sqrt Load) (list (fn_1 &c:2 &a:2 &b:2)) nil) &a:2 &b:2)) nil)))) (Return (Name &ans:2 Load))) nil None None) (If (Compare (Call (Name &number_solutions:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (Compare (Call (Name &number_solutions:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (For (Name &q:0 Store) (Call (Name g_sorted Load) (list (Call (Name &quadratic:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil)) nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Name &q:0 Load)) nil)) nil))) nil None)) (/seq (If (Compare (Call (Name &number_solutions:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Subscript (Call (Name &quadratic:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil) (Constant i0 None) Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None)) i0) (FunctionDef &equation:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &a:1 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &d:1 Store)) (fn_1 &c:1 &a:1 &b:1) None) (If (BoolOp And (list (Compare (Name &d:1 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &a:1 Load) (list Gt) (list (Constant i0 None))))) (/seq (Assign (list (Name &x1:1 Store)) (fn_3 (Call (Name g_sqrt Load) (list (Name &d:1 Load)) nil) &a:1 &b:1) None) (Assign (list (Name &x2:1 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:1 Load)) Add (Call (Name g_sqrt Load) (list (Name &d:1 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load))) None) (Return (Tuple (list (Constant i2 None) (Name &x1:1 Load) (Name &x2:1 Load)) Load))) (/seq (If (BoolOp And (list (Compare (Name &d:1 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &a:1 Load) (list Lt) (list (Constant i0 None))))) (/seq (Assign (list (Name &x1:1 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:1 Load)) Add (Call (Name g_sqrt Load) (list (Name &d:1 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load))) None) (Assign (list (Name &x2:1 Store)) (fn_3 (Call (Name g_sqrt Load) (list (Name &d:1 Load)) nil) &a:1 &b:1) None) (Return (Tuple (list (Constant i2 None) (Name &x1:1 Load) (Name &x2:1 Load)) Load))) (/seq (If (Compare (Name &d:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:1 Store)) (BinOp (UnaryOp USub (Name &b:1 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load))) None) (Return (Tuple (list (Constant i1 None) (Name &x:1 Load)) Load))) (/seq (Return (List (list (Constant i0 None)) Load))))))))) (/seq (If (Compare (Name &b:1 Load) (list Eq Eq) (list (Name &c:1 Load) (Constant i0 None))) (/seq (Return (List (list (UnaryOp USub (Constant i1 None))) Load))) (/seq (If (Compare (Name &b:1 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:1 Store)) (BinOp (UnaryOp USub (Name &c:1 Load)) Div (Name &b:1 Load)) None) (Return (Tuple (list (Constant i1 None) (Name &x:1 Load)) Load))) (/seq (Return (List (list (Constant i0 None)) Load))))))))) nil None None) (Assign (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:2 Load)) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (Starred (Call (Name &equation:0 Load) (list (Name &A:0 Load) (Name &B:0 Load) (Name &C:0 Load)) nil) Load)) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &D:0 Store)) (fn_2 &C:0 &A:0 &B:0) None) (If (BoolOp And (list (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &C:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &C:0 Load)) Div (Name &B:0 Load)) None) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA1MywgNDYsIDUzLCAxMDJd None) Mod (Name &x:0 Load))) nil))) (/seq (If (Compare (Name &D:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &D:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &x1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &B:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &D:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load))) None) (Assign (list (Name &x2:0 Store)) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &D:0 Load)) nil) &A:0 &B:0) None) (If (Compare (Name &x1:0 Load) (list Lt) (list (Name &x2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA1MywgNDYsIDUzLCAxMDJd None) Mod (Name &x1:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA1MywgNDYsIDUzLCAxMDJd None) Mod (Name &x2:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA1MywgNDYsIDUzLCAxMDJd None) Mod (Name &x2:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA1MywgNDYsIDUzLCAxMDJd None) Mod (Name &x1:0 Load))) nil)))) (Expr (Constant s-WzExOCwgMTIxLCAxMTgsIDExMSwgMTAwLCAxMjAsIDQ5LCA2MSwgMzksIDM3LCA1MywgNDYsIDUzLCAxMDIsIDM5LCAzNywgMTIwLCA0OSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMTgsIDEyMSwgMTE4LCAxMTEsIDEwMCwgMTIwLCA1MCwgNjEsIDM5LCAzNywgNTMsIDQ2LCA1MywgMTAyLCAzOSwgMzcsIDEyMCwgNTBd None)) (Expr (Constant s-WzExMiwgMTE0LCAxMDUsIDExMCwgMTE2LCA0MCwgMTE4LCAxMjEsIDExOCwgMTExLCAxMDAsIDEyMCwgNDksIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDExMiwgMTE0LCAxMDUsIDExMCwgMTE2LCA0MCwgMTE4LCAxMjEsIDExOCwgMTExLCAxMDAsIDEyMCwgNTAsIDQxXQ== None))) (/seq (If (Compare (Name &D:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &B:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load))) None) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA1MywgNDYsIDUzLCAxMDJd None) Mod (Name &x:0 Load))) nil))) nil)))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (FunctionDef &solve_const:0 (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &x:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) nil None None) (FunctionDef &solve_lineal:0 (arguments nil (list (arg &x:2 None None) (arg &y:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &y:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &y:2 Load)) Div (Name &x:2 Load))) nil))))) nil None None) (FunctionDef &solve_square:0 (arguments nil (list (arg &x:3 None None) (arg &y:3 None None) (arg &z:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &d:3 Store)) (fn_2 &z:3 &x:3 &y:3) None) (If (Compare (Name &d:3 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &d:3 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &x1:3 Store)) (BinOp (BinOp (UnaryOp USub (Name &y:3 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:3 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &x:3 Load))) None) (Assign (list (Name &x2:3 Store)) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:3 Load)) nil) &x:3 &y:3) None) (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (Name &x1:3 Load) (Name &x2:3 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Name &x1:3 Load) (Name &x2:3 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &y:3 Load)) Div (BinOp (Constant i2 None) Mult (Name &x:3 Load)))) nil))))))) nil None None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name &solve_const:0 Load) (list (Name &c:0 Load)) nil))) (/seq (Expr (Call (Name &solve_lineal:0 Load) (list (Name &b:0 Load) (Name &c:0 Load)) nil))))) (/seq (Expr (Call (Name &solve_square:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (IfExp (Name &c:0 Load) (Constant s_0 None) (Constant s-WzQ1LCA0OV0= None))) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) (/seq (Assign (list (Tuple (list (Name &d:0 Store) (Name &x:0 Store)) Store)) (Tuple (list (fn_1 &c:0 &a:0 &b:0) (BinOp (Constant i2 None) Mult (Name &a:0 Load))) Load) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &x:0 Load))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) (/seq (Assign (list (Name &r:0 Store)) (Call (Name g_sorted Load) (list (Tuple (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Name &x:0 Load)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Name &x:0 Load))) Load)) nil) None) (Expr (Call (Name g_print Load) (list (Constant s_2 None) (Subscript (Name &r:0 Load) (Constant i0 None) Load) (Subscript (Name &r:0 Load) (Constant i1 None) Load)) (list (keyword s_sep (Constant s-WzEwXQ== None)))))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))))) (/seq (Assign (list (Name &disc:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (Assign (list (Name &denom:0 Store)) (BinOp (Constant i2 None) Mult (Name &a:0 Load)) None) (If (Compare (Name &disc:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Name &denom:0 Load))) nil))) (/seq (If (Compare (Name &disc:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (If (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &disc:0 Load) Pow (Constant f0.5 None))) Div (Name &denom:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &disc:0 Load) Pow (Constant f0.5 None))) Div (Name &denom:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &disc:0 Load) Pow (Constant f0.5 None))) Div (Name &denom:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &disc:0 Load) Pow (Constant f0.5 None))) Div (Name &denom:0 Load))) nil))))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &a:0 Store)) (UnaryOp USub (Name &a:0 Load)) None) (Assign (list (Name &b:0 Store)) (UnaryOp USub (Name &b:0 Load)) None) (Assign (list (Name &c:0 Store)) (UnaryOp USub (Name &c:0 Load)) None)) nil) (Assign (list (Name &x:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (JoinedStr (list (FormattedValue (BinOp (BinOp (UnaryOp USub (Name &c:0 Load)) Mult (Constant f1.0 None)) Div (Name &b:0 Load)) i-1 (JoinedStr (list (Constant s_.7f None))))))) nil))))) (/seq (If (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (JoinedStr (list (FormattedValue (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) i-1 (JoinedStr (list (Constant s_.7f None))))))) nil))) (/seq (If (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None))) (/seq (ImportFrom s_math (list (alias &sqrt:0 None)) i0) (Assign (list (Name &x:0 Store)) (Call (Name &sqrt:0 Load) (list (Name &x:0 Load)) nil) None) (Assign (list (Name &a1:0 Store)) (fn_3 (Name &x:0 Load) &a:0 &b:0) None) (Assign (list (Name &a2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &x:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (JoinedStr (list (FormattedValue (Name &a1:0 Load) i-1 (JoinedStr (list (Constant s_.7f None))))))) nil)) (Expr (Call (Name g_print Load) (list (JoinedStr (list (FormattedValue (Name &a2:0 Load) i-1 (JoinedStr (list (Constant s_.7f None))))))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:1 Load)) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &X:0 Store)) (fn_2 &C:0 &A:0 &B:0) None) (If (BoolOp And (list (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &C:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (BinOp (UnaryOp USub (Name &C:0 Load)) Div (Name &B:0 Load)) (Constant i6 None)) nil)) nil))) (/seq (If (Compare (Name &X:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &X:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (BinOp (UnaryOp USub (Name &B:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load)))) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &ans:0 Store)) (Call (Name g_sorted Load) (list (List (list (BinOp (UnaryOp USub (BinOp (Name &B:0 Load) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &X:0 Load)) nil))) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load))) (BinOp (UnaryOp USub (BinOp (Name &B:0 Load) Sub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &X:0 Load)) nil))) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load)))) Load)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Subscript (Name &ans:0 Load) (Constant i0 None) Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Subscript (Name &ans:0 Load) (Constant i1 None) Load)) nil)) nil))))))))))))) nil)",
            "(Module (/seq (Assign (list (Name &R:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name &R:0 Load) nil nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))) (/seq (If (Compare (BinOp (Name &b:0 Load) Pow (Constant i2 None)) (list Lt) (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (UnaryOp USub (BinOp (Name &c:0 Load) Div (Name &b:0 Load)))) nil)) nil))))) (/seq (Assign (list (Name &d:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (Assign (list (Name &r1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Name g_pow Load) (list (Name &d:0 Load) (Constant f0.5 None)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &r2:0 Store)) (fn_3 (Call (Name g_pow Load) (list (Name &d:0 Load) (Constant f0.5 None)) nil) &a:0 &b:0) None) (If (Compare (Name &r1:0 Load) (list Eq) (list (Name &r2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Call (Name g_min Load) (list (Name &r1:0 Load) (Name &r2:0 Load)) nil)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Call (Name g_min Load) (list (Name &r1:0 Load) (Name &r2:0 Load)) nil)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Call (Name g_max Load) (list (Name &r1:0 Load) (Name &r2:0 Load)) nil)) nil)) nil))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (If (Compare (fn_1 &c:0 &a:0 &b:0) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Name &root1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (fn_1 &c:0 &a:0 &b:0) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &root2:0 Store)) (fn_3 (BinOp (fn_1 &c:0 &a:0 &b:0) Pow (Constant f0.5 None)) &a:0 &b:0) None) (Assign (list (Name &list:0 Store)) (List (list (Name &root1:0 Load) (Name &root2:0 Load)) Load) None) (If (Compare (Name &root1:0 Load) (list Eq) (list (Name &root2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Name &root1:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (Name &list:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Name &list:0 Load)) nil)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) nil) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) nil) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) nil)))) nil)) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store) (Name &z:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:1 Load)) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &a:0 Store)) (fn_1 &z:0 &x:0 &y:0) None) (If (BoolOp And (list (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &z:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &z:0 Load)) Div (Name &y:0 Load))) nil))) (/seq (If (Compare (Name &a:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &y:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &x:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &y:0 Store)) (BinOp (Name &y:0 Load) Div (Name &x:0 Load)) None) (Assign (list (Name &a:0 Store)) (BinOp (Name &a:0 Load) Div (BinOp (Name &x:0 Load) Pow (Constant i2 None))) None) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &y:0 Load)) Sub (BinOp (Name &a:0 Load) Pow (Constant f0.5 None))) Div (Constant i2 None))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &y:0 Load)) Add (BinOp (Name &a:0 Load) Pow (Constant f0.5 None))) Div (Constant i2 None))) nil))))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (BoolOp And (list (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x:0 Load))) nil))))))) (/seq (Assign (list (Name &d:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &ans:0 Store)) (List nil Load) None) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil)) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil) &a:0 &b:0)) nil)) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Attribute (Name &ans:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Subscript (Name &ans:0 Load) (Constant i0 None) Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Subscript (Name &ans:0 Load) (Constant i1 None) Load))) nil))) (/seq (Assign (list (Name &y:0 Store)) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil) &a:0 &b:0) None) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &y:0 Load))) nil))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil)) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil)) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Assign (list (Name &d:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &x1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &x2:0 Store)) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:0 Load)) nil) &a:0 &b:0) None) (If (Compare (Name &x1:0 Load) (list Gt) (list (Name &x2:0 Load))) (/seq (Assign (list (Tuple (list (Name &x1:0 Store) (Name &x2:0 Store)) Store)) (Tuple (list (Name &x2:0 Load) (Name &x1:0 Load)) Load) None)) nil) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x1:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x2:0 Load)) nil)) nil))) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (Name &x:0 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (Name &A:0 Store) (Name &B:0 Store) (Name &C:0 Store)) Store)) (Tuple (list (Call (Name g_float Load) (list (Name &A:0 Load)) nil) (Call (Name g_float Load) (list (Name &B:0 Load)) nil) (Call (Name g_float Load) (list (Name &C:0 Load)) nil)) Load) None) (If (BoolOp And (list (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (If (Compare (Name &C:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (If (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (BinOp (UnaryOp USub (Name &C:0 Load)) Div (Name &B:0 Load)))) nil))) (/seq (Assign (list (Name &det:0 Store)) (fn_2 &C:0 &A:0 &B:0) None) (If (Compare (Name &det:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &det:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &B:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load))) None) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &x1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &B:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &det:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load))) None) (Assign (list (Name &x2:0 Store)) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &det:0 Load)) nil) &A:0 &B:0) None) (If (Compare (Name &x1:0 Load) (list Lt) (list (Name &x2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x1:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x2:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x2:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x1:0 Load))) nil))))))))))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None)) i0) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Name &c:0 Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq Eq) (list (Name &b:0 Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) (/seq (If (Compare (BinOp (Name &b:0 Load) Pow (Constant i2 None)) (list Eq) (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil))) (/seq (If (Compare (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)) (list Gt) (list (BinOp (Name &b:0 Load) Pow (Constant i2 None)))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &x:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Name g_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &y:0 Store)) (fn_3 (Call (Name g_sqrt Load) (list (fn_1 &c:0 &a:0 &b:0)) nil) &a:0 &b:0) None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDU0LCAxMDIsIDEyNV0= None) s_format Load) (list (Call (Name g_min Load) (list (Name &x:0 Load) (Name &y:0 Load)) nil)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDU0LCAxMDIsIDEyNV0= None) s_format Load) (list (Call (Name g_max Load) (list (Name &x:0 Load) (Name &y:0 Load)) nil)) nil)) nil))))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Name &a:0 Load)) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (Name &b:0 Load)) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (Name &c:0 Load)) nil) None) (If (BoolOp Or (list (BoolOp And (list (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None))) (Compare (BinOp (Name &b:0 Load) Mult (Name &b:0 Load)) (list Lt) (list (BinOp (BinOp (Constant i4 None) Mult (Name &a:0 Load)) Mult (Name &c:0 Load)))))) (BoolOp And (list (Compare (Name &a:0 Load) (list Eq Eq) (list (Name &b:0 Load) (Constant i0 None))) (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))))))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq Eq Eq) (list (Name &b:0 Load) (Name &c:0 Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Assign (list (Name &a1:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (Call (Name g_format Load) (list (Name &a1:0 Load) (Constant s_.5f None)) nil)) nil))) (/seq (Assign (list (Name &a1:0 Store)) (fn_3 (BinOp (fn_2 &c:0 &a:0 &b:0) Pow (Constant f0.5 None)) &a:0 &b:0) None) (Assign (list (Name &a2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (fn_2 &c:0 &a:0 &b:0) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (If (Compare (Name &a1:0 Load) (list Lt) (list (Name &a2:0 Load))) (/seq (Assign (list (Tuple (list (Name &a1:0 Store) (Name &a2:0 Store)) Store)) (Tuple (list (Name &a2:0 Load) (Name &a1:0 Load)) Load) None)) nil) (If (Compare (Name &a1:0 Load) (list NotEq) (list (Name &a2:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_format Load) (list (Name &a2:0 Load) (Constant s_.5f None)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_format Load) (list (Name &a1:0 Load) (Constant s_.5f None)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_format Load) (list (Name &a1:0 Load) (Constant s_.5f None)) nil)) nil))))))))))) nil)",
            "(Module (/seq (Assign (list (Name &__author__:0 Store)) (Constant s_linh None) None) (Import (list (alias &math:0 None))) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &A:1 Store)) (Call (Name g_int Load) (list (Subscript (Name &n:1 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &B:1 Store)) (Call (Name g_int Load) (list (Subscript (Name &n:1 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &C:1 Store)) (Call (Name g_int Load) (list (Subscript (Name &n:1 Load) (Constant i2 None) Load)) nil) None) (If (Compare (Name &A:1 Load) (list Eq Eq Eq) (list (Name &B:1 Load) (Name &C:1 Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (Compare (Name &A:1 Load) (list Eq Eq) (list (Name &B:1 Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &A:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (BinOp (UnaryOp USub (Name &C:1 Load)) Div (Name &B:1 Load))) nil)) nil))) (/seq (Assign (list (Name &delta:1 Store)) (fn_1 &C:1 &A:1 &B:1) None) (If (Compare (Name &delta:1 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &delta:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTMsIDEwMiwgMTI1XQ== None) s_format Load) (list (BinOp (UnaryOp USub (Name &B:1 Load)) Div (BinOp (Constant i2 None) Mult (Name &A:1 Load)))) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &x1:1 Store)) (fn_3 (Call (Attribute (Name &math:0 Load) s_sqrt Load) (list (Name &delta:1 Load)) nil) &A:1 &B:1) None) (Assign (list (Name &x2:1 Store)) (BinOp (BinOp (UnaryOp USub (Name &B:1 Load)) Add (Call (Attribute (Name &math:0 Load) s_sqrt Load) (list (Name &delta:1 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &A:1 Load))) None) (If (Compare (Name &x1:1 Load) (list Lt) (list (Name &x2:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTAsIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Name &x1:1 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTAsIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Name &x2:1 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTAsIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Name &x2:1 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNTAsIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Name &x1:1 Load)) nil)) nil))))))))))))))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &delta:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &delta:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (If (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &x1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &delta:0 Load)) nil)) Div (BinOp (Name &a:0 Load) Mult (Constant i2 None))) None) (Assign (list (Name &x2:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &delta:0 Load)) nil)) Div (BinOp (Name &a:0 Load) Mult (Constant i2 None))) None) (If (Compare (Name &delta:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x1:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil)) (If (Compare (Name &x1:0 Load) (list Gt) (list (Name &x2:0 Load))) (/seq (Assign (list (Tuple (list (Name &x1:0 Store) (Name &x2:0 Store)) Store)) (Tuple (list (Name &x2:0 Load) (Name &x1:0 Load)) Load) None)) nil) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x1:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x2:0 Load))) nil))))) (/seq (If (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x:0 Load))) nil))) (/seq (If (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_os None) (alias g_sys None))) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (ImportFrom s_math (list (alias g_sqrt None)) i0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &a:3 Store) (Name &b:3 Store) (Name &c:3 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:3 Load) (list Eq Eq Eq) (list (Name &b:3 Load) (Name &c:3 Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (Compare (Name &a:3 Load) (list Eq Eq) (list (Name &b:3 Load) (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &a:3 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (BinOp (UnaryOp USub (Name &c:3 Load)) Div (Name &b:3 Load)))) nil))) (/seq (Assign (list (Name &d2:3 Store)) (fn_2 &c:3 &a:3 &b:3) None) (If (Compare (Name &d2:3 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &d2:3 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (BinOp (UnaryOp USub (Name &b:3 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:3 Load))))) nil))) (/seq (Assign (list (Name &d:3 Store)) (Call (Name g_sqrt Load) (list (Name &d2:3 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (If (Compare (Name &a:3 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (fn_3 (Name &d:3 Load) &a:3 &b:3))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (BinOp (BinOp (UnaryOp USub (Name &b:3 Load)) Add (Name &d:3 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:3 Load))))) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (BinOp (BinOp (UnaryOp USub (Name &b:3 Load)) Add (Name &d:3 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:3 Load))))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (fn_3 (Name &d:3 Load) &a:3 &b:3))) nil))))))))))))))) nil None None) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name g_IOBase Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:4 None None) (arg &file:4 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:4 Load) s__fd Store)) (Call (Attribute (Name &file:4 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:4 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None) (Assign (list (Attribute (Name &self:4 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:4 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:4 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:4 Load) s_write Store)) (IfExp (Attribute (Name &self:4 Load) s_writable Load) (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:5 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:5 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:5 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:5 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:5 Load)) (/seq Break) nil) (Assign (list (Name &ptr:5 Store)) (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load) (list (Name &b:5 Load)) nil) (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load) (list (Name &ptr:5 Load)) nil)) Load))) nil) (Assign (list (Attribute (Name &self:5 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:6 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:6 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:6 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:6 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:6 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:6 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:6 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:6 Load))) None) (Assign (list (Name &ptr:6 Store)) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load) (list (Name &b:6 Load)) nil) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (Name &ptr:6 Load)) nil)) Load))) nil) (AugAssign (Attribute (Name &self:6 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:7 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name g_os Load) s_write Load) (list (Attribute (Name &self:7 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name g_IOBase Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:8 None None) (arg &file:8 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:8 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:8 Load)) nil) None) (Assign (list (Attribute (Name &self:8 Load) s_flush Store)) (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:8 Load) s_writable Store)) (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:8 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:9 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:9 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:8 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:8 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil)) None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_* None)) i0) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &i:1 Load)) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (BoolOp And (list (Compare (Subscript (Name &a:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i0 None))) (Compare (Subscript (Name &a:0 Load) (Constant i1 None) Load) (list Eq) (list (Constant i0 None))) (Compare (Subscript (Name &a:0 Load) (Constant i2 None) Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (BoolOp And (list (Compare (Subscript (Name &a:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i0 None))) (Compare (Subscript (Name &a:0 Load) (Constant i1 None) Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Subscript (Name &a:0 Load) (Constant i2 None) Load)) Div (Subscript (Name &a:0 Load) (Constant i1 None) Load))) nil))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &a:0 Load) (Constant i0 None) Load) (list Eq) (list (Constant i0 None))) (Compare (Subscript (Name &a:0 Load) (Constant i1 None) Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq (If (Compare (BinOp (BinOp (Subscript (Name &a:0 Load) (Constant i1 None) Load) Mult (Subscript (Name &a:0 Load) (Constant i1 None) Load)) Sub (BinOp (BinOp (Constant i4 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load)) Mult (Subscript (Name &a:0 Load) (Constant i2 None) Load))) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (If (Compare (BinOp (BinOp (Subscript (Name &a:0 Load) (Constant i1 None) Load) Mult (Subscript (Name &a:0 Load) (Constant i1 None) Load)) Sub (BinOp (BinOp (Constant i4 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load)) Mult (Subscript (Name &a:0 Load) (Constant i2 None) Load))) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Subscript (Name &a:0 Load) (Constant i1 None) Load)) Div (BinOp (Constant i2 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (BinOp (BinOp (UnaryOp USub (Subscript (Name &a:0 Load) (Constant i1 None) Load)) Add (Call (Name g_sqrt Load) (list (BinOp (BinOp (Subscript (Name &a:0 Load) (Constant i1 None) Load) Mult (Subscript (Name &a:0 Load) (Constant i1 None) Load)) Sub (BinOp (BinOp (Constant i4 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load)) Mult (Subscript (Name &a:0 Load) (Constant i2 None) Load)))) nil)) Div (BinOp (Constant i2 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load))) (BinOp (BinOp (UnaryOp USub (Subscript (Name &a:0 Load) (Constant i1 None) Load)) Sub (Call (Name g_sqrt Load) (list (BinOp (BinOp (Subscript (Name &a:0 Load) (Constant i1 None) Load) Mult (Subscript (Name &a:0 Load) (Constant i1 None) Load)) Sub (BinOp (BinOp (Constant i4 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load)) Mult (Subscript (Name &a:0 Load) (Constant i2 None) Load)))) nil)) Div (BinOp (Constant i2 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load)))) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (BinOp (BinOp (UnaryOp USub (Subscript (Name &a:0 Load) (Constant i1 None) Load)) Add (Call (Name g_sqrt Load) (list (BinOp (BinOp (Subscript (Name &a:0 Load) (Constant i1 None) Load) Mult (Subscript (Name &a:0 Load) (Constant i1 None) Load)) Sub (BinOp (BinOp (Constant i4 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load)) Mult (Subscript (Name &a:0 Load) (Constant i2 None) Load)))) nil)) Div (BinOp (Constant i2 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load))) (BinOp (BinOp (UnaryOp USub (Subscript (Name &a:0 Load) (Constant i1 None) Load)) Sub (Call (Name g_sqrt Load) (list (BinOp (BinOp (Subscript (Name &a:0 Load) (Constant i1 None) Load) Mult (Subscript (Name &a:0 Load) (Constant i1 None) Load)) Sub (BinOp (BinOp (Constant i4 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load)) Mult (Subscript (Name &a:0 Load) (Constant i2 None) Load)))) nil)) Div (BinOp (Constant i2 None) Mult (Subscript (Name &a:0 Load) (Constant i0 None) Load)))) nil)) nil))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Name &a:0 Load) (/seq (If (Compare (fn_2 &c:0 &a:0 &b:0) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (fn_2 &c:0 &a:0 &b:0)) nil)) Div (Constant i2 None)) Div (Name &a:0 Load)) (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (fn_2 &c:0 &a:0 &b:0)) nil)) Div (Constant i2 None)) Div (Name &a:0 Load))) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (fn_2 &c:0 &a:0 &b:0)) nil)) Div (Constant i2 None)) Div (Name &a:0 Load)) (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (fn_2 &c:0 &a:0 &b:0)) nil)) Div (Constant i2 None)) Div (Name &a:0 Load))) nil)) nil))) (/seq (If (Compare (fn_2 &c:0 &a:0 &b:0) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_round Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Constant i2 None)) Div (Name &a:0 Load)) (Constant i5 None)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))) (/seq (If (Name &b:0 Load) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (IfExp (Name &c:0 Load) (Constant i0 None) (UnaryOp USub (Constant i1 None)))) nil))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (FunctionDef &solver:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &d:1 Store)) (fn_1 &c:1 &a:1 &b:1) None) (If (BoolOp And (list (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:1 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (BinOp (UnaryOp USub (Name &c:1 Load)) Div (Name &b:1 Load)))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:1 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:1 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (If (Compare (Name &d:1 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (BoolOp And (list (Compare (Name &d:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &a:1 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Assign (list (Name &x1:1 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:1 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:1 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load))) None) (Assign (list (Name &x2:1 Store)) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:1 Load)) nil) &a:1 &b:1) None) (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x1:1 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil)) (Assign (list (Name &x1:1 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:1 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:1 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load))) None) (Assign (list (Name &x2:1 Store)) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:1 Load)) nil) &a:1 &b:1) None) (Assign (list (Tuple (list (Name &x1:1 Store) (Name &x2:1 Store)) Store)) (Tuple (list (Call (Name g_min Load) (list (Name &x1:1 Load) (Name &x2:1 Load)) nil) (Call (Name g_max Load) (list (Name &x1:1 Load) (Name &x2:1 Load)) nil)) Load) None) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x1:1 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNTMsIDEwMl0= None) Mod (Name &x2:1 Load))) nil))))))))))))) nil None None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Expr (Call (Name &solver:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))))) (/seq (Assign (list (Name &square:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &square:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &square:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &term:0 Store)) (BinOp (Name &square:0 Load) Pow (Constant f0.5 None)) None) (Assign (list (Name &roots:0 Store)) (Call (Name g_sorted Load) (list (List (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Name &term:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (fn_3 (Name &term:0 Load) &a:0 &b:0)) Load)) nil) None) (Expr (Call (Name g_print Load) (list (Subscript (Name &roots:0 Load) (Constant i0 None) Load)) nil)) (Expr (Call (Name g_print Load) (list (Subscript (Name &roots:0 Load) (Constant i1 None) Load)) nil))))))))) nil)",
            "(Module (/seq (Import (list (alias g_re None))) (Assign (list (Name &arr:0 Store)) (Call (Attribute (Name g_re Load) s_split Load) (list (Constant s-WzMyXQ== None) (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &A:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &arr:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &B:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &arr:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &C:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &arr:0 Load) (Constant i2 None) Load)) nil) None) (Assign (list (Name &dis:0 Store)) (fn_2 &C:0 &A:0 &B:0) None) (If (BoolOp And (list (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &C:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &B:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &A:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &C:0 Load)) Div (Name &B:0 Load))) nil))) (/seq (If (Compare (Name &dis:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &dis:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &B:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (If (Compare (Name &A:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (fn_3 (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None)) &A:0 &B:0)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &B:0 Load)) Add (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &B:0 Load)) Add (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &A:0 Load)))) nil)) (Expr (Call (Name g_print Load) (list (fn_3 (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None)) &A:0 &B:0)) nil))))))))))))))) nil)",
            "(Module (/seq (Assign (list (Name &R:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name &R:0 Load) nil nil) None) (If (Name &b:0 Load) (/seq (Assign (list (Name &t:0 Store)) (List (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) Load) None)) (/seq (Assign (list (Name &t:0 Store)) (List (list (UnaryOp USub (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) Load) None))) (If (Name &a:0 Load) (/seq (Assign (list (Tuple (list (Name &d:0 Store) (Name &x:0 Store)) Store)) (Tuple (list (fn_2 &c:0 &a:0 &b:0) (BinOp (UnaryOp USub (Constant i2 None)) Mult (Name &a:0 Load))) Load) None) (If (Name &d:0 Load) (/seq (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &t:0 Store)) (List (list (Constant i0 None)) Load) None)) (/seq (Assign (list (Name &t:0 Store)) (BinOp (List (list (Constant i2 None)) Load) Add (Call (Name g_sorted Load) (list (List (list (BinOp (BinOp (Name &b:0 Load) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Name &x:0 Load)) (BinOp (BinOp (Name &b:0 Load) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Name &x:0 Load))) Load)) nil)) None)))) (/seq (Assign (list (Name &t:0 Store)) (List (list (Constant i1 None) (BinOp (Name &b:0 Load) Div (Name &x:0 Load))) Load) None)))) nil) (If (Compare (Call (Name g_len Load) (list (Name &t:0 Load)) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Starred (Name &t:0 Load) Load)) nil))) (/seq (If (Compare (Call (Name g_len Load) (list (Name &t:0 Load)) nil) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &t:0 Load) (Constant i0 None) Load)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Subscript (Name &t:0 Load) (Constant i1 None) Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &t:0 Load) (Constant i0 None) Load)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Subscript (Name &t:0 Load) (Constant i1 None) Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Subscript (Name &t:0 Load) (Constant i2 None) Load))) nil))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &t:0 Store)) (IfExp (Name &b:0 Load) (List (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) Load) (List (list (UnaryOp USub (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) Load)) None) (If (Name &a:0 Load) (/seq (Assign (list (Tuple (list (Name &d:0 Store) (Name &x:0 Store)) Store)) (Tuple (list (fn_2 &c:0 &a:0 &b:0) (BinOp (UnaryOp USub (Constant i2 None)) Mult (Name &a:0 Load))) Load) None) (If (Name &d:0 Load) (/seq (Assign (list (Name &t:0 Store)) (IfExp (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (List (list (Constant i0 None)) Load) (BinOp (List (list (Constant i2 None)) Load) Add (Call (Name g_sorted Load) (list (List (list (BinOp (BinOp (Name &b:0 Load) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Name &x:0 Load)) (BinOp (BinOp (Name &b:0 Load) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Name &x:0 Load))) Load)) nil))) None)) (/seq (Assign (list (Name &t:0 Store)) (List (list (Constant i1 None) (BinOp (Name &b:0 Load) Div (Name &x:0 Load))) Load) None)))) nil) (Expr (Call (Name g_print Load) (list (Starred (Name &t:0 Load) Load)) nil))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None)) i0) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (UnaryOp USub (BinOp (Name &c:0 Load) Div (Name &b:0 Load)))) nil)) nil))) (/seq (Assign (list (Name &delta:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &delta:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &x1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Name g_sqrt Load) (list (Name &delta:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &x2:0 Store)) (fn_3 (Call (Name g_sqrt Load) (list (Name &delta:0 Load)) nil) &a:0 &b:0) None) (If (Compare (Name &x1:0 Load) (list Gt) (list (Name &x2:0 Load))) (/seq (Assign (list (Tuple (list (Name &x1:0 Store) (Name &x2:0 Store)) Store)) (Tuple (list (Name &x2:0 Load) (Name &x1:0 Load)) Load) None)) nil) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Name &x1:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Name &x2:0 Load)) nil)) nil))) (/seq (If (Compare (Name &delta:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Assign (list (Name &x1:0 Store)) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Name &x1:0 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Name &nl:0 Store)) (Call (Name g_list Load) (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &nl:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &nl:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &nl:0 Load) (Constant i2 None) Load)) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (If (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0OSwgNDgsIDQ2LCA1MywgMTAyXQ== None) Mod (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (Assign (list (Name &sqrt:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &sqrt:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0OSwgNDgsIDQ2LCA1MywgMTAyXQ== None) Mod (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Constant i2 None)) Div (Name &a:0 Load)))) nil))) (/seq (If (Compare (Name &sqrt:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &roots:0 Store)) (List (list (BinOp (BinOp (BinOp (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &sqrt:0 Load)) nil) Sub (Name &b:0 Load)) Div (Constant i2 None)) Div (Name &a:0 Load)) (BinOp (BinOp (BinOp (UnaryOp USub (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &sqrt:0 Load)) nil)) Sub (Name &b:0 Load)) Div (Constant i2 None)) Div (Name &a:0 Load))) Load) None) (Expr (Call (Attribute (Name &roots:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0OSwgNDgsIDQ2LCA1MywgMTAyXQ== None) Mod (Subscript (Name &roots:0 Load) (Constant i0 None) Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0OSwgNDgsIDQ2LCA1MywgMTAyXQ== None) Mod (Subscript (Name &roots:0 Load) (Constant i1 None) Load))) nil))))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None)) i0) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &disc:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp Or (list (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (Compare (Name &disc:0 Load) (list Lt) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) (/seq (If (Compare (Name &disc:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Div (Constant i2 None)) Div (Name &a:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &res:0 Store)) (List (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (Call (Name g_sqrt Load) (list (Name &disc:0 Load)) nil)) Div (BinOp (Constant f2.0 None) Mult (Name &a:0 Load))) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Name g_sqrt Load) (list (Name &disc:0 Load)) nil)) Div (BinOp (Constant f2.0 None) Mult (Name &a:0 Load)))) Load) None) (Expr (Call (Attribute (Name &res:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDU1LCAxMDIsIDEyNV0= None) s_format Load) (list (Subscript (Name &res:0 Load) (Constant i0 None) Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDU1LCAxMDIsIDEyNV0= None) s_format Load) (list (Subscript (Name &res:0 Load) (Constant i1 None) Load)) nil)) nil))))))))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Import (list (alias g_collections None))) (Import (list (alias g_random None))) (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (Constant i30000 None)) nil)) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (Name &a:1 Store) (Name &b:1 Store) (Name &c:1 Store)) Store)) (ListComp (Call (Name g_float Load) (list (Name &it:2 Load)) nil) (list (comprehension (Name &it:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) (list (Constant s-WzQ1LCA0OSwgMzIsIDEwXQ== None)) nil))) (/seq (Expr (Call (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) (list (Constant s-WzQ4LCAzMiwgMTBd None)) nil))))) (/seq (Assign (list (Name &x:1 Store)) (BinOp (BinOp (Name &c:1 Load) Div (Name &b:1 Load)) Mult (UnaryOp USub (Constant f1.0 None))) None) (If (Compare (Name &x:1 Load) (list Eq) (list (UnaryOp USub (Constant f0.0 None)))) (/seq (Assign (list (Name &x:1 Store)) (Constant f0.0 None) None)) nil) (Expr (Call (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) (list (BinOp (Constant s-WzQ5LCAzMiwgMTAsIDM3LCA0NiwgNTMsIDEwMiwgMzIsIDEwXQ== None) Mod (Name &x:1 Load))) nil))))) (/seq (If (Compare (Name &a:1 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &d:1 Store)) (fn_2 &c:1 &a:1 &b:1) None) (If (Compare (Name &d:1 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) (list (Constant s-WzQ4LCAxMF0= None)) nil))) (/seq (If (Compare (Name &d:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:1 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:1 Load)) Div (Constant i2 None)) Div (Name &a:1 Load)) None) (Expr (Call (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) (list (BinOp (Constant s-WzQ5LCAzMiwgMTAsIDM3LCA0NiwgNTMsIDEwMiwgMzIsIDEwXQ== None) Mod (Name &x:1 Load))) nil))) (/seq (If (Compare (Name &d:1 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &x1:1 Store)) (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:1 Load)) Add (BinOp (Name &d:1 Load) Pow (Constant f0.5 None))) Div (Constant i2 None)) Div (Name &a:1 Load)) None) (Assign (list (Name &x2:1 Store)) (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:1 Load)) Sub (BinOp (Name &d:1 Load) Pow (Constant f0.5 None))) Div (Constant i2 None)) Div (Name &a:1 Load)) None) (If (Compare (Name &x1:1 Load) (list Gt) (list (Name &x2:1 Load))) (/seq (Assign (list (Tuple (list (Name &x1:1 Store) (Name &x2:1 Store)) Store)) (Tuple (list (Name &x2:1 Load) (Name &x1:1 Load)) Load) None)) nil) (Expr (Call (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) (list (BinOp (Constant s-WzUwLCAzMiwgMTAsIDM3LCA0NiwgNTMsIDEwMiwgMzIsIDEwLCAzNywgNDYsIDUzLCAxMDIsIDMyLCAxMF0= None) Mod (Tuple (list (Name &x1:1 Load) (Name &x2:1 Load)) Load))) nil))) nil)))))) nil)))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None)) i0) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))) (/seq (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Name &c:0 Load)) nil)) nil))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Name &x:0 Load)) nil)) nil))))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Name &c:0 Load)) nil)) nil))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &a:0 Load)) None) (If (Compare (Name &x:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Name &x:0 Load)) nil)) nil))))))) (/seq (Assign (list (Name &result:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &result:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load)) Sub (Call (Name g_sqrt Load) (list (Name &result:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &y:0 Store)) (BinOp (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:0 Load)) Add (Call (Name g_sqrt Load) (list (Name &result:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (If (Compare (Name &x:0 Load) (list Eq) (list (Name &y:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Name &x:0 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (If (Compare (Name &x:0 Load) (list Lt) (list (Name &y:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Name &x:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Name &y:0 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Name &y:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MywgMTAyLCAxMjVd None) s_format Load) (list (Name &x:0 Load)) nil)) nil))))))))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Name &a:0 Load) (/seq (Assign (list (Name &d:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &ans:0 Store)) (List (list (Constant i0 None)) Load) None)) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &ans:0 Store)) (List (list (Constant i1 None) (BinOp (UnaryOp USub (Name &b:0 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) Load) None)) (/seq (Assign (list (Name &ans:0 Store)) (BinOp (List (list (Constant i2 None)) Load) Add (Call (Name g_sorted Load) (list (List (list (BinOp (UnaryOp USub (BinOp (Name &b:0 Load) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) (BinOp (UnaryOp USub (BinOp (Name &b:0 Load) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) Load)) nil)) None)))))) (/seq (If (Name &b:0 Load) (/seq (Assign (list (Name &ans:0 Store)) (List (list (Constant i1 None) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) Load) None)) (/seq (If (Name &c:0 Load) (/seq (Assign (list (Name &ans:0 Store)) (List (list (Constant i0 None)) Load) None)) (/seq (Assign (list (Name &ans:0 Store)) (List (list (UnaryOp USub (Constant i1 None))) Load) None))))))) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &dis:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))))) (/seq (If (Compare (Name &dis:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil))) (/seq (If (Compare (Name &dis:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (fn_3 (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None)) &a:0 &b:0) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (fn_3 (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None)) &a:0 &b:0) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &dis:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load)))) nil)) nil))))))))) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_sqrt None)) i0) (Assign (list (Name &x:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &y:0 Store)) (Call (Attribute (Name &x:0 Load) s_split Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &y:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &y:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &y:0 Load) (Constant i2 None) Load)) nil) None) (Assign (list (Name &det:0 Store)) (fn_1 &c:0 &a:0 &b:0) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) nil)) nil) (If (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Expr (Call (Name g_print Load) (list (UnaryOp USub (Call (Name g_sqrt Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (Call (Name g_sqrt Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &a:0 Load))) nil)) nil))) nil)) nil) (If (Compare (Name &det:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) nil) (If (Compare (Name &det:0 Load) (list Eq) (list (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &b:0 Load)) Mult (BinOp (BinOp (Constant i2 None) Mult (Name &a:0 Load)) Pow (UnaryOp USub (Constant i1 None))))) nil))))))) nil) (If (Compare (Name &det:0 Load) (list Gt) (list (Constant i0 None))) (/seq (If (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (Assign (list (Name &X:0 Store)) (fn_3 (Call (Name g_sqrt Load) (list (Name &det:0 Load)) nil) &a:0 &b:0) None) (Assign (list (Name &Y:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (Call (Name g_sqrt Load) (list (Name &det:0 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (If (Compare (Name &X:0 Load) (list Gt) (list (Name &Y:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &Y:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Name &X:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Name &X:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Name &Y:0 Load)) nil))))) nil)) nil)) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (FunctionDef &quadroot:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &roots:1 Store)) (List nil Load) None) (Assign (list (Name &negb:1 Store)) (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &b:1 Load)) None) (Assign (list (Name &discriminant:1 Store)) (BinOp (fn_1 &c:1 &a:1 &b:1) Pow (BinOp (Constant i1 None) Div (Constant i2 None))) None) (Assign (list (Name &bottom:1 Store)) (BinOp (Constant i2 None) Mult (Name &a:1 Load)) None) (Expr (Call (Attribute (Name &roots:1 Load) s_append Load) (list (Call (Name g_format Load) (list (BinOp (BinOp (Name &negb:1 Load) Sub (Name &discriminant:1 Load)) Div (Name &bottom:1 Load)) (Constant s_.6f None)) nil)) nil)) (Expr (Call (Attribute (Name &roots:1 Load) s_append Load) (list (Call (Name g_format Load) (list (BinOp (BinOp (Name &negb:1 Load) Add (Name &discriminant:1 Load)) Div (Name &bottom:1 Load)) (Constant s_.6f None)) nil)) nil)) (Return (Name &roots:1 Load))) nil None None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (If (BoolOp Or (list (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Name &b:0 Load))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))))) (Compare (fn_1 &c:0 &a:0 &b:0) (list Lt) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) nil) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (BinOp (BinOp (UnaryOp USub (Constant i1 None)) Mult (Name &c:0 Load)) Div (Name &b:0 Load))) nil))) (/seq (Assign (list (Name &ans:0 Store)) (Call (Name &quadroot:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil) None))) (For (Name &root:0 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &ans:0 Load)) nil)) nil) (/seq (Assign (list (Subscript (Name &ans:0 Load) (Name &root:0 Load) Store)) (Call (Name g_float Load) (list (Subscript (Name &ans:0 Load) (Name &root:0 Load) Load)) nil) None)) nil None) (Assign (list (Name &ans1:0 Store)) (Call (Name g_list Load) (list (Call (Name g_set Load) (list (Call (Name g_sorted Load) (list (Name &ans:0 Load)) nil)) nil)) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_len Load) (list (Name &ans1:0 Load)) nil)) nil)) (For (Name &i:0 Store) (Name &ans1:0 Load) (/seq (Expr (Call (Name g_print Load) (list (JoinedStr (list (FormattedValue (Name &i:0 Load) i-1 (JoinedStr (list (Constant s_.6f None))))))) nil))) nil None)) nil)",
            "(Module (/seq (ClassDef &CodeforcesTask20BSolution:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_result Store)) (Constant s_ None) None) (Assign (list (Attribute (Name &self:2 Load) s_a_b_c Store)) (List nil Load) None)) nil None None) (FunctionDef &read_input:1 (arguments nil (list (arg &self:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s_a_b_c Store)) (ListComp (Call (Name g_int Load) (list (Name &x:6 Load)) nil) (list (comprehension (Name &x:6 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil) nil i0))) None)) nil None None) (FunctionDef &process_task:1 (arguments nil (list (arg &self:4 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i0 None) Load)) (/seq (If (UnaryOp Not (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i1 None) Load)) (/seq (If (UnaryOp Not (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i2 None) Load)) (/seq (Assign (list (Attribute (Name &self:4 Load) s_result Store)) (Constant s-WzQ1LCA0OV0= None) None)) (/seq (Assign (list (Attribute (Name &self:4 Load) s_result Store)) (Constant s_0 None) None)))) (/seq (Assign (list (Attribute (Name &self:4 Load) s_result Store)) (Call (Attribute (Constant s-WzQ5LCAxMCwgMTIzLCA0OCwgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load) (list (BinOp (UnaryOp USub (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i2 None) Load)) Div (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i1 None) Load))) nil) None)))) (/seq (Assign (list (Name &delta:4 Store)) (BinOp (BinOp (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i1 None) Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i0 None) Load)) Mult (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i2 None) Load))) None) (If (UnaryOp Not (Name &delta:4 Load)) (/seq (Import (list (alias &math:4 None))) (Assign (list (Name &root:4 Store)) (Call (Attribute (Name &math:4 Load) s_sqrt Load) (list (BinOp (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i2 None) Load) Div (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i0 None) Load))) nil) None) (If (Compare (BinOp (BinOp (BinOp (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i0 None) Load) Mult (BinOp (Name &root:4 Load) Pow (Constant i2 None))) Add (BinOp (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i1 None) Load) Mult (Name &root:4 Load))) Add (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i2 None) Load)) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &root:4 Store)) (UnaryOp USub (Name &root:4 Load)) None)) nil) (Assign (list (Attribute (Name &self:4 Load) s_result Store)) (Call (Attribute (Constant s-WzQ5LCAxMCwgMTIzLCA0OCwgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load) (list (Name &root:4 Load)) nil) None)) (/seq (If (Compare (Name &delta:4 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Attribute (Name &self:4 Load) s_result Store)) (Constant s_0 None) None)) (/seq (Import (list (alias &math:4 None))) (Assign (list (Name &s_delta:4 Store)) (Call (Attribute (Name &math:4 Load) s_sqrt Load) (list (Name &delta:4 Load)) nil) None) (Assign (list (Name &roots:4 Store)) (List (list (BinOp (BinOp (UnaryOp USub (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i1 None) Load)) Sub (Name &s_delta:4 Load)) Div (BinOp (Constant i2 None) Mult (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i0 None) Load))) (BinOp (BinOp (UnaryOp USub (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i1 None) Load)) Add (Name &s_delta:4 Load)) Div (BinOp (Constant i2 None) Mult (Subscript (Attribute (Name &self:4 Load) s_a_b_c Load) (Constant i0 None) Load)))) Load) None) (Expr (Call (Attribute (Name &roots:4 Load) s_sort Load) nil nil)) (Assign (list (Attribute (Name &self:4 Load) s_result Store)) (Call (Attribute (Constant s-WzUwLCAxMCwgMTIzLCA0OCwgNTgsIDQ2LCA1NCwgMTAyLCAxMjUsIDEwLCAxMjMsIDQ5LCA1OCwgNDYsIDU0LCAxMDIsIDEyNV0= None) s_format Load) (list (Subscript (Name &roots:4 Load) (Constant i0 None) Load) (Subscript (Name &roots:4 Load) (Constant i1 None) Load)) nil) None)))))))) nil None None) (FunctionDef &get_result:1 (arguments nil (list (arg &self:5 None None)) None nil nil None nil) (/seq (Return (Attribute (Name &self:5 Load) s_result Load))) nil None None)) nil) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Name &Solution:0 Store)) (Call (Name &CodeforcesTask20BSolution:0 Load) nil nil) None) (Expr (Call (Attribute (Name &Solution:0 Load) s_read_input Load) nil nil)) (Expr (Call (Attribute (Name &Solution:0 Load) s_process_task Load) nil nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Name &Solution:0 Load) s_get_result Load) nil nil)) nil))) nil)) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a1:0 Store) (Name &a2:0 Store) (Name &a3:0 Store)) Store)) (Call (Attribute (Call (Name g_input Load) (list (Constant s_ None)) nil) s_split Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Name &a1:0 Load)) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_int Load) (list (Name &a2:0 Load)) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (Name &a3:0 Load)) nil) None) (Assign (list (Name &d:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))) (/seq (If (BoolOp Or (list (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (If (BoolOp And (list (Compare (Name &d:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Assign (list (Name &r1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Assign (list (Name &r2:0 Store)) (fn_3 (BinOp (Name &d:0 Load) Pow (Constant f0.5 None)) &a:0 &b:0) None) (Assign (list (Name &mi:0 Store)) (Call (Name g_min Load) (list (Name &r1:0 Load) (Name &r2:0 Load)) nil) None) (Assign (list (Name &ma:0 Store)) (Call (Name g_max Load) (list (Name &r1:0 Load) (Name &r2:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Constant s_2 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Name &mi:0 Load)) nil)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Name &ma:0 Load)) nil)) nil))) nil) (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) nil) (If (BoolOp And (list (Compare (Name &d:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &a:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Assign (list (Name &r1:0 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:0 Load))) None) (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Name &r1:0 Load)) nil)) nil))) nil) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Assign (list (Name &r1:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (Constant s_1 None)) nil)) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDU4LCA0NiwgNDksIDQ4LCAxMDIsIDEyNV0= None) s_format Load) (list (Name &r1:0 Load)) nil)) nil))) nil) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))) nil)) nil)))) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil) None) (FunctionDef &root:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &d:1 Store)) (fn_1 &c:1 &a:1 &b:1) None) (If (Compare (Name &d:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:1 Store)) (BinOp (UnaryOp USub (Name &b:1 Load)) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load))) None) (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x:1 Load))) nil))) (/seq (If (Compare (Name &d:1 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &x:1 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:1 Load)) Add (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:1 Load)) nil)) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load))) None) (Assign (list (Name &y:1 Store)) (fn_3 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (Name &d:1 Load)) nil) &a:1 &b:1) None) (Expr (Call (Name g_print Load) (list (Constant i2 None)) nil)) (If (Compare (Name &x:1 Load) (list Gt) (list (Name &y:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &y:1 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x:1 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x:1 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &y:1 Load))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_0 None)) nil))))))) nil None None) (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)) (Assign (list (Name &x:0 Store)) (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load)) None) (Expr (Call (Name g_print Load) (list (BinOp (Constant s-WzM3LCA0NiwgNDksIDQ4LCAxMDJd None) Mod (Name &x:0 Load))) nil))) (/seq (If (BoolOp And (list (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:0 Load) (list NotEq) (list (Constant i0 None))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name &root:0 Load) (list (Name &a:0 Load) (Name &b:0 Load) (Name &c:0 Load)) nil))))))))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &d:0 Store)) (fn_2 &c:0 &a:0 &b:0) None) (If (UnaryOp Not (Name &a:0 Load)) (/seq (If (UnaryOp Not (Name &b:0 Load)) (/seq (If (UnaryOp Not (Name &c:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (Expr (BoolOp Or (list (Call (Name g_print Load) (list (Constant i1 None)) nil) (Call (Name g_print Load) (list (BinOp (UnaryOp USub (Name &c:0 Load)) Div (Name &b:0 Load))) nil))))))) (/seq (If (Compare (Name &d:0 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (UnaryOp Not (Name &d:0 Load)) (/seq (Expr (BoolOp Or (list (Call (Name g_print Load) (list (Constant i1 None)) nil) (Call (Name g_print Load) (list (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Constant i2 None)) Div (Name &a:0 Load))) nil))))) (/seq (Expr (BoolOp Or (list (Call (Name g_print Load) (list (Constant i2 None)) nil) (Call (Name g_print Load) (list (Call (Name g_min Load) (list (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Constant i2 None)) Div (Name &a:0 Load)) (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Constant i2 None)) Div (Name &a:0 Load))) nil)) nil) (Call (Name g_print Load) (list (Call (Name g_max Load) (list (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Sub (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Constant i2 None)) Div (Name &a:0 Load)) (BinOp (BinOp (BinOp (UnaryOp USub (Name &b:0 Load)) Add (BinOp (Name &d:0 Load) Pow (Constant f0.5 None))) Div (Constant i2 None)) Div (Name &a:0 Load))) nil)) nil))))))))))) nil)"
        ]
    }
]
