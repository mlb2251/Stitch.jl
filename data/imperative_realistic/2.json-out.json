[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                0,
                0,
                "(Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)",
                "E",
                [],
                []
            ],
            [
                0,
                1,
                "(Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)",
                "S",
                [],
                [
                    "X"
                ]
            ],
            [
                0,
                1,
                "(ListComp (Call (Name g_int Load) (list (Name %1 Load)) nil) (list (comprehension (Name %1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0)))",
                "E",
                [],
                [
                    "X"
                ]
            ]
        ],
        "programs": [
            "(Module (/seq (ImportFrom s_collections (list (alias g_Counter None)) i0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &a:1 Store)) (Call (Name &readIntArr:0 Load) nil nil) None) (Assign (list (Name &b:1 Store)) (Call (Name g_sorted Load) (list (Name &a:1 Load)) (list (keyword s_reverse (Constant True None)))) None) (Assign (list (Name &m:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &allans:1 Store)) (List nil Load) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (Name &m:1 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:1 Store) (Name &pos:1 Store)) Store)) (Call (Name &readIntArr:0 Load) nil nil) None) (Assign (list (Name &cnt:1 Store)) (Call (Name g_Counter Load) (list (Subscript (Name &b:1 Load) (Slice None (Name &k:1 Load) None) Load)) nil) None) (Assign (list (Name &totalCnts:1 Store)) (Constant i0 None) None) (For (Name &x:1 Store) (Name &a:1 Load) (/seq (If (Compare (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Store) Sub (Constant i1 None)) (AugAssign (Name &totalCnts:1 Store) Add (Constant i1 None)) (If (Compare (Name &totalCnts:1 Load) (list Eq) (list (Name &pos:1 Load))) (/seq (Expr (Call (Attribute (Name &allans:1 Load) s_append Load) (list (Name &x:1 Load)) nil)) Break) nil)) nil)) nil None)) nil None) (Expr (Call (Name &multiLineArrayPrint:0 Load) (list (Name &allans:1 Load)) nil)) (Return None)) nil None None) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_buffer Load) s_readline Load) None) (FunctionDef &oneLineArrayPrint:0 (arguments nil (list (arg &arr:2 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:11 Load)) nil) (list (comprehension (Name &x:11 Store) (Name &arr:2 Load) nil i0)))) nil)) nil))) nil None None) (FunctionDef &multiLineArrayPrint:0 (arguments nil (list (arg &arr:3 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:12 Load)) nil) (list (comprehension (Name &x:12 Store) (Name &arr:3 Load) nil i0)))) nil)) nil))) nil None None) (FunctionDef &multiLineArrayOfArraysPrint:0 (arguments nil (list (arg &arr:4 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (ListComp (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:15 Load)) nil) (list (comprehension (Name &x:15 Store) (Name &y:13 Load) nil i0)))) nil) (list (comprehension (Name &y:13 Store) (Name &arr:4 Load) nil i0)))) nil)) nil))) nil None None) (FunctionDef &readIntArr:0 (arguments nil nil None nil nil None nil) (/seq (Return (ListComp (Call (Name g_int Load) (list (Name &x:8 Load)) nil) (list (comprehension (Name &x:8 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))))) nil None None) (FunctionDef &makeArr:0 (arguments nil (list (arg &defaultValFactory:5 None None) (arg &dimensionArr:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &dv:5 Store)) (Name &defaultValFactory:5 Load) None) (Assign (list (Name &da:5 Store)) (Name &dimensionArr:5 Load) None) (If (Compare (Call (Name g_len Load) (list (Name &da:5 Load)) nil) (list Eq) (list (Constant i1 None))) (/seq (Return (ListComp (Call (Name &dv:5 Load) nil nil) (list (comprehension (Name &_:9 Store) (Call (Name g_range Load) (list (Subscript (Name &da:5 Load) (Constant i0 None) Load)) nil) nil i0))))) (/seq (Return (ListComp (Call (Name &makeArr:0 Load) (list (Name &dv:5 Load) (Subscript (Name &da:5 Load) (Slice (Constant i1 None) None None) Load)) nil) (list (comprehension (Name &_:10 Store) (Call (Name g_range Load) (list (Subscript (Name &da:5 Load) (Constant i0 None) Load)) nil) nil i0))))))) nil None None) (FunctionDef &queryInteractive:0 (arguments nil (list (arg &i:6 None None) (arg &j:6 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzYzLCAzMiwgMTIzLCAxMjUsIDMyLCAxMjMsIDEyNV0= None) s_format Load) (list (Name &i:6 Load) (Name &j:6 Load)) nil)) nil)) (Expr (Call (Attribute (Attribute (Name &sys:0 Load) s_stdout Load) s_flush Load) nil nil)) (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))) nil None None) (FunctionDef &answerInteractive:0 (arguments nil (list (arg &ans:7 None None)) None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzMzLCAzMiwgMTIzLCAxMjVd None) s_format Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (ListComp (Call (Name g_str Load) (list (Name &x:14 Load)) nil) (list (comprehension (Name &x:14 Store) (Name &ans:7 Load) nil i0)))) nil)) nil)) nil)) (Expr (Call (Attribute (Attribute (Name &sys:0 Load) s_stdout Load) s_flush Load) nil nil))) nil None None) (Assign (list (Name &inf:0 Store)) (Call (Name g_float Load) (list (Constant s_inf None)) nil) None) (Assign (list (Name &MOD:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (For (Name &_abc:0 Store) (Call (Name g_range Load) (list (Constant i1 None)) nil) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil None)) nil)",
            "(Module (/seq (FunctionDef &min_s:0 (arguments nil (list (arg &a:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &res:1 Store)) (Call (Attribute (Name &a:1 Load) s_copy Load) nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (BinOp (Call (Name g_len Load) (list (Name &a:1 Load)) nil) Sub (Name &k:1 Load))) nil) (/seq (Assign (list (Name &m:1 Store)) (Call (Name g_min Load) (list (Name &res:1 Load)) nil) None) (Expr (Call (Attribute (Name &res:1 Load) s_reverse Load) nil nil)) (Expr (Call (Attribute (Name &res:1 Load) s_remove Load) (list (Name &m:1 Load)) nil)) (Expr (Call (Attribute (Name &res:1 Load) s_reverse Load) nil nil))) nil None) (Return (Name &res:1 Load))) nil None None) (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (fn_3 &x:2) None) (fn_2 &m:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_3 &x:3) None) (Assign (list (Name &l:0 Store)) (Call (Name &min_s:0 Load) (list (Name &a:0 Load) (Name &k:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Subscript (Name &l:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &q:0) (Assign (list (Name &qs:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (fn_1) None) (Expr (Call (Attribute (Name &qs:0 Load) s_append Load) (list (List (list (Name &a:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) (Name &i:0 Load)) Load)) nil))) nil None) (Expr (Call (Attribute (Name &qs:0 Load) s_sort Load) nil nil)) (Assign (list (Name &ret:0 Store)) (List nil Load) None) (Assign (list (Name &used:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Assign (list (Name &ans:0 Store)) (ListComp (UnaryOp USub (Constant i1 None)) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) nil i0))) None) (For (Name &z:0 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &l:0 Store) (Name &pos:0 Store) (Name &o:0 Store)) Store)) (Subscript (Name &qs:0 Load) (Name &z:0 Load) Load) None) (While (Compare (Call (Name g_len Load) (list (Name &ret:0 Load)) nil) (list Lt) (list (Name &l:0 Load))) (/seq (Assign (list (Name &mx:0 Store)) (Constant i0 None) None) (Assign (list (Name &ind:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (UnaryOp Not (Subscript (Name &used:0 Load) (Name &i:0 Load) Load)) (/seq (If (Compare (Name &mx:0 Load) (list Lt) (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load))) (/seq (Assign (list (Name &mx:0 Store)) (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) None) (Assign (list (Name &ind:0 Store)) (Name &i:0 Load) None)) nil)) nil)) nil None) (Assign (list (Subscript (Name &used:0 Load) (Name &ind:0 Load) Store)) (Constant i1 None) None) (Expr (Call (Attribute (Name &ret:0 Load) s_append Load) (list (Name &mx:0 Load)) nil))) nil) (Assign (list (Name &c:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Subscript (Name &used:0 Load) (Name &i:0 Load) Load) (/seq (Expr (Call (Attribute (Name &c:0 Load) s_append Load) (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load)) nil))) nil)) nil None) (Assign (list (Subscript (Name &ans:0 Load) (Subscript (Subscript (Name &qs:0 Load) (Name &z:0 Load) Load) (Constant i2 None) Load) Store)) (Subscript (Name &c:0 Load) (Name &pos:0 Load) Load) None)) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &ans:0 Load) (Name &i:0 Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &a1:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (UnaryOp USub (Name &x:1 Load)))))) None) (fn_2 &q:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (AugAssign (Name &pos:0 Store) Sub (Constant i1 None)) (Assign (list (Name &notused:0 Store)) (Dict nil nil) None) (For (Name &j:0 Store) (Subscript (Name &a1:0 Load) (Slice None (Name &k:0 Load) None) Load) (/seq (If (Compare (Name &j:0 Load) (list In) (list (Name &notused:0 Load))) (/seq (AugAssign (Subscript (Name &notused:0 Load) (Name &j:0 Load) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &notused:0 Load) (Name &j:0 Load) Store)) (Constant i1 None) None)))) nil None) (For (Name &j:0 Store) (Name &a:0 Load) (/seq (If (Compare (Name &j:0 Load) (list In) (list (Name &notused:0 Load))) (/seq (If (Compare (Name &pos:0 Load) (list Gt) (list (Constant i0 None))) (/seq (If (Compare (Subscript (Name &notused:0 Load) (Name &j:0 Load) Load) (list Gt) (list (Constant i1 None))) (/seq (AugAssign (Subscript (Name &notused:0 Load) (Name &j:0 Load) Store) Sub (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &notused:0 Load) s_pop Load) (list (Name &j:0 Load)) nil)))) (AugAssign (Name &pos:0 Store) Sub (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &j:0 Load)) nil)) Break))) nil)) nil None)) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &line:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &m:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &lf:0 Store)) (Subscript (Name &line:0 Load) (Slice None None None) Load) None) (While (Compare (Call (Name g_len Load) (list (Name &lf:0 Load)) nil) (list Gt) (list (Name &k:0 Load))) (/seq (Assign (list (Name &j:0 Store)) (UnaryOp USub (Constant i1 None)) None) (Assign (list (Name &x:0 Store)) (Call (Name g_min Load) (list (Name &lf:0 Load)) nil) None) (While (Compare (Name &j:0 Load) (list Gt) (list (BinOp (UnaryOp USub (Call (Name g_len Load) (list (Name &lf:0 Load)) nil)) Sub (Constant i1 None)))) (/seq (If (Compare (Subscript (Name &lf:0 Load) (Name &j:0 Load) Load) (list Eq) (list (Name &x:0 Load))) (/seq (Delete (list (Subscript (Name &lf:0 Load) (Name &j:0 Load) Del))) (If (Compare (Call (Name g_len Load) (list (Name &lf:0 Load)) nil) (list Eq) (list (Name &k:0 Load))) (/seq Break) nil)) (/seq (AugAssign (Name &j:0 Store) Sub (Constant i1 None))))) nil)) nil) (Expr (Call (Name g_print Load) (list (Subscript (Name &lf:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &arr:0 Store)) (ListComp (Tuple (list (Name &i:1 Load) (Name &num:1 Load)) Load) (list (comprehension (Tuple (list (Name &num:1 Store) (Name &i:1 Store)) Store) (Call (Name g_enumerate Load) (list (Name &arr:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &arr:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Tuple (list (UnaryOp USub (Subscript (Name &x:2 Load) (Constant i0 None) Load)) (Subscript (Name &x:2 Load) (Constant i1 None) Load)) Load)))))) (fn_2 &m:0) (For (Name &q:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (Call (Name g_tuple Load) (list (fn_1)) nil) None) (Assign (list (Name &now:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Name &arr:0 Load) (/seq (If (Compare (Call (Name g_len Load) (list (Name &now:0 Load)) nil) (list Eq) (list (Name &k:0 Load))) (/seq Break) nil) (Expr (Call (Attribute (Name &now:0 Load) s_append Load) (list (Name &i:0 Load)) nil))) nil None) (Expr (Call (Attribute (Name &now:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (Subscript (Name &x:3 Load) (Constant i1 None) Load)))))) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &now:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &m:0) (Assign (list (Name &x:0 Store)) (ListComp (List (list (Subscript (Name &a:0 Load) (Name &i:1 Load) Load) (Name &i:1 Load)) Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &x:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Subscript (Name &x:2 Load) (Constant i0 None) Load))) (keyword s_reverse (Constant True None))))) (For (Name &_i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &p:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Call (Name g_sorted Load) (list (Subscript (Name &x:0 Load) (Slice None (Name &k:0 Load) None) Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (Subscript (Name &x:3 Load) (Constant i1 None) Load))))) (BinOp (Name &p:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &data:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &m:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &s:0 Store)) (Subscript (Name &data:0 Load) (Slice None None None) Load) None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) (/seq (Assign (list (Name &x:0 Store)) (Call (Attribute (Name &s:0 Load) s_index Load) (list (Call (Name g_max Load) (list (Name &s:0 Load)) nil)) nil) None) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &x:0 Load)) nil)) (Assign (list (Subscript (Name &s:0 Load) (Name &x:0 Load) Store)) (UnaryOp USub (Constant i1 None)) None)) nil None) (Expr (Call (Attribute (Name &ans:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Subscript (Name &data:0 Load) (Subscript (Name &ans:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (fn_3 &i:1) None) (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) nil) None) (Assign (list (Name &c:0 Store)) (List nil Load) None) (Expr (Call (Attribute (Name &c:0 Load) s_append Load) (list (Name &a:0 Load)) nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &k:0 Store)) (BinOp (BinOp (Call (Name g_len Load) (list (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)) nil) Sub (Constant i1 None)) Sub (Call (Attribute (Subscript (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load) s_index Load) (list (Subscript (Name &b:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load)) nil)) None) (Expr (Call (Attribute (Name &c:0 Load) s_append Load) (list (BinOp (Subscript (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load) (Slice (Constant i0 None) (Name &k:0 Load) None) Load) Add (Subscript (Subscript (Name &c:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load) (Slice (BinOp (Name &k:0 Load) Add (Constant i1 None)) None None) Load))) nil))) nil None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &c:0 Load) (BinOp (BinOp (Call (Name g_len Load) (list (Name &c:0 Load)) nil) Sub (Name &k:0 Load)) Sub (Constant i1 None)) Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (Import (list (alias g_math None))) (FunctionDef &getFirstSetBitPos:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (Return (BinOp (Call (Attribute (Name g_math Load) s_log2 Load) (list (BinOp (Name &n:1 Load) BitAnd (UnaryOp USub (Name &n:1 Load)))) nil) Add (Constant i1 None)))) nil None None) (FunctionDef &find_div:0 (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &ls:2 Store)) (List nil Load) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (Constant i2 None) (BinOp (Call (Name g_int Load) (list (BinOp (Name &x:2 Load) Pow (Constant f0.5 None))) nil) Add (Constant i1 None))) nil) (/seq (If (Compare (BinOp (Name &x:2 Load) Mod (Name &i:2 Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &ls:2 Load) s_append Load) (list (Name &i:2 Load)) nil)) (If (Compare (Name &i:2 Load) (list NotEq) (list (BinOp (Name &x:2 Load) FloorDiv (Name &i:2 Load)))) (/seq (Expr (Call (Attribute (Name &ls:2 Load) s_append Load) (list (BinOp (Name &x:2 Load) FloorDiv (Name &i:2 Load))) nil))) nil)) nil)) nil None) (Return (Call (Name g_sorted Load) (list (Name &ls:2 Load)) nil))) nil None None) (ImportFrom s_collections (list (alias &Counter:0 None)) i0) (fn_2 &n:0) (Assign (list (Name &ar:0 Store)) (ListComp (Tuple (list (Call (Name g_int Load) (list (Name &x:3 Load)) nil) (Name &i:3 Load)) Load) (list (comprehension (Tuple (list (Name &i:3 Store) (Name &x:3 Store)) Store) (Call (Name g_enumerate Load) (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) nil i0))) None) (Assign (list (Name &arr:0 Store)) (Call (Name g_sorted Load) (list (Name &ar:0 Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:4 None None)) None nil nil None nil) (Tuple (list (Subscript (Name &x:4 Load) (Constant i0 None) Load) (BinOp (UnaryOp USub (Constant i1 None)) Mult (Subscript (Name &x:4 Load) (Constant i1 None) Load))) Load))))) None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &ls:0 Store)) (Call (Name g_sorted Load) (list (Subscript (Name &arr:0 Load) (Slice (UnaryOp USub (Name &k:0 Load)) None None) Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:5 None None)) None nil nil None nil) (Subscript (Name &x:5 Load) (Constant i1 None) Load))))) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &ls:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (FunctionDef &mergesort:0 (arguments nil (list (arg &l:1 None None) (arg &r:1 None None) (arg &arr:1 None None) (arg &pos:1 None None)) None nil nil None nil) (/seq (If (Compare (BinOp (Name &r:1 Load) Sub (Name &l:1 Load)) (list Eq) (list (Constant i1 None))) (/seq (Return (Tuple (list (Name &arr:1 Load) (Name &pos:1 Load)) Load))) nil) (Assign (list (Name &m:1 Store)) (BinOp (BinOp (Name &l:1 Load) Add (Name &r:1 Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Tuple (list (Name &arr:1 Store) (Name &pos:1 Store)) Store)) (Call (Name &mergesort:0 Load) (list (Name &l:1 Load) (Name &m:1 Load) (Name &arr:1 Load) (Name &pos:1 Load)) nil) None) (Assign (list (Tuple (list (Name &arr:1 Store) (Name &pos:1 Store)) Store)) (Call (Name &mergesort:0 Load) (list (Name &m:1 Load) (Name &r:1 Load) (Name &arr:1 Load) (Name &pos:1 Load)) nil) None) (Assign (list (Name &c:1 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (Name &r:1 Load)) nil) nil i0))) None) (Assign (list (Name &d:1 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:5 Store) (Call (Name g_range Load) (list (Name &r:1 Load)) nil) nil i0))) None) (Assign (list (Name &poi_a:1 Store)) (Name &l:1 Load) None) (Assign (list (Name &poi_b:1 Store)) (Name &m:1 Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Name &l:1 Load) (Name &r:1 Load)) nil) (/seq (If (Compare (Name &poi_a:1 Load) (list Eq) (list (Name &m:1 Load))) (/seq (Assign (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &arr:1 Load) (Name &poi_b:1 Load) Load) None) (Assign (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &pos:1 Load) (Name &poi_b:1 Load) Load) None) (AugAssign (Name &poi_b:1 Store) Add (Constant i1 None))) (/seq (If (Compare (Name &poi_b:1 Load) (list Eq) (list (Name &r:1 Load))) (/seq (Assign (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &arr:1 Load) (Name &poi_a:1 Load) Load) None) (Assign (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &pos:1 Load) (Name &poi_a:1 Load) Load) None) (AugAssign (Name &poi_a:1 Store) Add (Constant i1 None))) (/seq (If (Compare (Subscript (Name &a:0 Load) (Name &poi_a:1 Load) Load) (list Gt) (list (Subscript (Name &arr:1 Load) (Name &poi_b:1 Load) Load))) (/seq (Assign (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &arr:1 Load) (Name &poi_a:1 Load) Load) None) (Assign (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &pos:1 Load) (Name &poi_a:1 Load) Load) None) (AugAssign (Name &poi_a:1 Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &arr:1 Load) (Name &poi_b:1 Load) Load) None) (Assign (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &pos:1 Load) (Name &poi_b:1 Load) Load) None) (AugAssign (Name &poi_b:1 Store) Add (Constant i1 None))))))))) nil None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Name &l:1 Load) (Name &r:1 Load)) nil) (/seq (Assign (list (Subscript (Name &arr:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &c:1 Load) (Name &i:1 Load) Load) None) (Assign (list (Subscript (Name &pos:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &d:1 Load) (Name &i:1 Load) Load) None)) nil None) (Return (Tuple (list (Name &arr:1 Load) (Name &pos:1 Load)) Load))) nil None None) (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &p:0 Store)) (ListComp (Name &i:2 Load) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Assign (list (Name &temp:0 Store)) (Subscript (Name &a:0 Load) (Slice None None None) Load) None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &p:0 Store)) Store)) (Call (Name &mergesort:0 Load) (list (Constant i0 None) (Name &n:0 Load) (Name &a:0 Load) (Name &p:0 Load)) nil) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (While (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) (/seq (Assign (list (Name &j:0 Store)) (BinOp (Name &i:0 Load) Add (Constant i1 None)) None) (While (BoolOp And (list (Compare (Name &j:0 Load) (list Lt) (list (Name &n:0 Load))) (Compare (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Subscript (Name &a:0 Load) (Name &j:0 Load) Load))))) (/seq (AugAssign (Name &j:0 Store) Add (Constant i1 None))) nil) (Assign (list (Subscript (Name &p:0 Load) (Slice (Name &i:0 Load) (Name &j:0 Load) None) Store)) (Call (Name g_sorted Load) (list (Subscript (Name &p:0 Load) (Slice (Name &i:0 Load) (Name &j:0 Load) None) Load)) nil) None) (Assign (list (Name &i:0 Store)) (Name &j:0 Load) None)) nil) (Assign (list (Name &pref:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Name &pref:0 Load) (Name &i:0 Load) Store)) (BinOp (List (list (Constant i0 None)) Load) Add (Call (Name g_sorted Load) (list (Subscript (Name &p:0 Load) (Slice None (Name &i:0 Load) None) Load)) nil)) None)) nil None) (For (Name &m:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Subscript (Name &temp:0 Load) (Subscript (Subscript (Name &pref:0 Load) (Name &k:0 Load) Load) (Name &pos:0 Load) Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (fn_3 &i:1) None) (Assign (list (Name &b:0 Store)) (ListComp (Tuple (list (Subscript (Name &a:0 Load) (Name &i:2 Load) Load) (BinOp (Name &n:0 Load) Sub (Name &i:2 Load))) Load) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (Assign (list (Name &b:0 Store)) (ListComp (Tuple (list (Subscript (Subscript (Name &b:0 Load) (Name &i:3 Load) Load) (Constant i0 None) Load) (BinOp (Name &n:0 Load) Sub (Subscript (Subscript (Name &b:0 Load) (Name &i:3 Load) Load) (Constant i1 None) Load))) Load) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (fn_2 &m:0) (For (Name &qu:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &p:0 Store)) Store)) (fn_1) None) (Assign (list (Name &c:0 Store)) (Subscript (Name &b:0 Load) (Slice None (Name &k:0 Load) None) Load) None) (Expr (Call (Attribute (Name &c:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:4 None None)) None nil nil None nil) (Subscript (Name &x:4 Load) (Constant i1 None) Load)))))) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &c:0 Load) (BinOp (Name &p:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (Import (list (alias s_sys g__sys))) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &t:1 Store)) (Constant i1 None) None) (For (Name &i_t:1 Store) (Call (Name g_range Load) (list (Name &t:1 Load)) nil) (/seq (Assign (list (Tuple (list (Name &n:1 Store)) Store)) (Call (Name &_read_ints:0 Load) nil nil) None) (Assign (list (Name &a:1 Store)) (Call (Name g_tuple Load) (list (Call (Name &_read_ints:0 Load) nil nil)) nil) None) (Assign (list (Tuple (list (Name &m:1 Store)) Store)) (Call (Name &_read_ints:0 Load) nil nil) None) (Assign (list (Name &queries:1 Store)) (GeneratorExp (Call (Name g_tuple Load) (list (Call (Name &_read_ints:0 Load) nil nil)) nil) (list (comprehension (Name &i_query:5 Store) (Call (Name g_range Load) (list (Name &m:1 Load)) nil) nil i0))) None) (Assign (list (Name &result:1 Store)) (Call (Name &process_queries:0 Load) (list (Name &a:1 Load) (Name &queries:1 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Starred (Name &result:1 Load) Load)) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) nil None)) nil None None) (FunctionDef &_read_line:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &result:2 Store)) (Call (Attribute (Attribute (Name g__sys Load) s_stdin Load) s_readline Load) nil nil) None) (Assert (Compare (Subscript (Name &result:2 Load) (UnaryOp USub (Constant i1 None)) Load) (list Eq) (list (Constant s-WzEwXQ== None))) None) (Return (Subscript (Name &result:2 Load) (Slice None (UnaryOp USub (Constant i1 None)) None) Load))) nil None None) (FunctionDef &_read_ints:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &_read_line:0 Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &process_queries:0 (arguments nil (list (arg &sequence:3 None None) (arg &queries:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &sequence:3 Store)) (Call (Name g_tuple Load) (list (Name &sequence:3 Load)) nil) None) (Assign (list (Name &sorted_sequence:3 Store)) (Call (Name g_sorted Load) (list (Name &sequence:3 Load)) (list (keyword s_reverse (Constant True None)))) None) (For (Tuple (list (Name &k:3 Store) (Name &pos:3 Store)) Store) (Name &queries:3 Load) (/seq (AugAssign (Name &pos:3 Store) Sub (Constant i1 None)) (Assign (list (Name &k_max_elems:3 Store)) (Subscript (Subscript (Name &sorted_sequence:3 Load) (Slice None (Name &k:3 Load) None) Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Name &seq:3 Store)) (Name &sequence:3 Load) None) (Assign (list (Name &subseq:3 Store)) (List nil Load) None) (While (Compare (Call (Name g_len Load) (list (Name &subseq:3 Load)) nil) (list Lt) (list (Name &k:3 Load))) (/seq (For (Name &i_next_elem:3 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &k_max_elems:3 Load)) nil)) nil) (/seq (Assign (list (Name &next_elem:3 Store)) (Subscript (Name &k_max_elems:3 Load) (Name &i_next_elem:3 Load) Load) None) (Assign (list (Name &seq_after:3 Store)) (Subscript (Name &seq:3 Load) (Slice (BinOp (Call (Attribute (Name &seq:3 Load) s_index Load) (list (Name &next_elem:3 Load)) nil) Add (Constant i1 None)) None None) Load) None) (Assign (list (Name &elems_remain:3 Store)) (BinOp (Subscript (Name &k_max_elems:3 Load) (Slice None (Name &i_next_elem:3 Load) None) Load) Add (Subscript (Name &k_max_elems:3 Load) (Slice (BinOp (Name &i_next_elem:3 Load) Add (Constant i1 None)) None None) Load)) None) (If (Call (Name &_contains_elems:0 Load) (list (Name &seq_after:3 Load) (Name &elems_remain:3 Load)) nil) (/seq (Assign (list (Name &seq:3 Store)) (Name &seq_after:3 Load) None) (Assign (list (Name &k_max_elems:3 Store)) (Name &elems_remain:3 Load) None) (Expr (Call (Attribute (Name &subseq:3 Load) s_append Load) (list (Name &next_elem:3 Load)) nil)) Break) nil)) nil None)) nil) (Expr (Yield (Subscript (Name &subseq:3 Load) (Name &pos:3 Load) Load)))) nil None)) nil None None) (FunctionDef &_contains_elems:0 (arguments nil (list (arg &seq:4 None None) (arg &elems:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &seq:4 Store)) (Call (Name g_sorted Load) (list (Name &seq:4 Load)) nil) None) (Assign (list (Name &subseq:4 Store)) (Call (Name g_sorted Load) (list (Name &elems:4 Load)) nil) None) (Assign (list (Name &i_seq:4 Store)) (Constant i0 None) None) (Assign (list (Name &i_subseq:4 Store)) (Constant i0 None) None) (While (BoolOp And (list (Compare (Name &i_seq:4 Load) (list Lt) (list (Call (Name g_len Load) (list (Name &seq:4 Load)) nil))) (Compare (Name &i_subseq:4 Load) (list Lt) (list (Call (Name g_len Load) (list (Name &subseq:4 Load)) nil))))) (/seq (If (Compare (Subscript (Name &seq:4 Load) (Name &i_seq:4 Load) Load) (list Eq) (list (Subscript (Name &subseq:4 Load) (Name &i_subseq:4 Load) Load))) (/seq (AugAssign (Name &i_subseq:4 Store) Add (Constant i1 None))) nil) (AugAssign (Name &i_seq:4 Store) Add (Constant i1 None))) nil) (Return (Compare (Name &i_subseq:4 Load) (list Eq) (list (Call (Name g_len Load) (list (Name &subseq:4 Load)) nil))))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjUsIDExNywgMTE2LCAxMDQsIDExMSwgMTE0LCAzMiwgNDUsIDMyLCA4MywgOTcsIDExNiwgMTE5LCAxMDUsIDEwNywgMzIsIDg0LCAxMDUsIDExOSwgOTcsIDExNCwgMTA1LCAzMiwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNDksIDU2LCAxMTYsIDEwNCwgMzIsIDcwLCAxMDEsIDk4LCAzMiwgNDQsIDMyLCA1MCwgNDgsIDUwLCA0OSwgMzIsIDMyLCA0NSwgMzIsIDg0LCAxMDQsIDExNywgMTE0LCAxMTUsIDEwMCwgOTcsIDEyMSwgMTBd None)) (ImportFrom s___future__ (list (alias &division:0 None) (alias &print_function:0 None)) i0) (ImportFrom s_fractions (list (alias &Fraction:0 None)) i0) (Import (list (alias &sys:0 None))) (Import (list (alias &os:0 None))) (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0) (ImportFrom s_functools (list (alias &cmp_to_key:0 None)) i0) (ImportFrom s_heapq (list (alias &*:0 None)) i0) (ImportFrom s_math (list (alias &gcd:0 None) (alias &factorial:0 None) (alias &floor:0 None) (alias &ceil:0 None) (alias &sqrt:0 None) (alias &log2:0 None)) i0) (ImportFrom s_copy (list (alias &deepcopy:0 None)) i0) (ImportFrom s_collections (list (alias &deque:0 None)) i0) (ImportFrom s_bisect (list (alias s_bisect_left &bl:0)) i0) (ImportFrom s_bisect (list (alias s_bisect_right &br:0)) i0) (ImportFrom s_bisect (list (alias &bisect:0 None)) i0) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name &IOBase:0 Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:15 None None) (arg &file:15 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:15 Load) s__fd Store)) (Call (Attribute (Name &file:15 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:15 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None) (Assign (list (Attribute (Name &self:15 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:15 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:15 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:15 Load) s_write Store)) (IfExp (Attribute (Name &self:15 Load) s_writable Load) (Attribute (Attribute (Name &self:15 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:16 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:16 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (Attribute (Name &self:16 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (Attribute (Name &self:16 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:16 Load)) (/seq Break) nil) (Assign (list (Name &ptr:16 Store)) (Call (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_write Load) (list (Name &b:16 Load)) nil) (Call (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_seek Load) (list (Name &ptr:16 Load)) nil)) Load))) nil) (Assign (list (Attribute (Name &self:16 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:16 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:17 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:17 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:17 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (Attribute (Name &self:17 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (Attribute (Name &self:17 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:17 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:17 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:17 Load))) None) (Assign (list (Name &ptr:17 Store)) (Call (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_write Load) (list (Name &b:17 Load)) nil) (Call (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_seek Load) (list (Name &ptr:17 Load)) nil)) Load))) nil) (AugAssign (Attribute (Name &self:17 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:17 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:18 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:18 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name &os:0 Load) s_write Load) (list (Attribute (Name &self:18 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:18 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name &IOBase:0 Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:19 None None) (arg &file:19 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:19 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:19 Load)) nil) None) (Assign (list (Attribute (Name &self:19 Load) s_flush Store)) (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:19 Load) s_writable Store)) (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:19 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:50 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:50 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:19 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:19 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:19 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (FunctionDef &print:0 (arguments nil nil (arg &args:6 None None) nil nil (arg &kwargs:6 None None) nil) (/seq (Expr (Constant s-WzgwLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDExNSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCAxMTUsIDMyLCAxMTYsIDExMSwgMzIsIDk3LCAzMiwgMTE1LCAxMTYsIDExNCwgMTAxLCA5NywgMTA5LCA0NCwgMzIsIDExMSwgMTE0LCAzMiwgMTE2LCAxMTEsIDMyLCAxMTUsIDEyMSwgMTE1LCA0NiwgMTE1LCAxMTYsIDEwMCwgMTExLCAxMTcsIDExNiwgMzIsIDk4LCAxMjEsIDMyLCAxMDAsIDEwMSwgMTAyLCA5NywgMTE3LCAxMDgsIDExNiwgNDZd None)) (Assign (list (Tuple (list (Name &sep:6 Store) (Name &file:6 Store)) Store)) (Tuple (list (Call (Attribute (Name &kwargs:6 Load) s_pop Load) (list (Constant s_sep None) (Constant s-WzMyXQ== None)) nil) (Call (Attribute (Name &kwargs:6 Load) s_pop Load) (list (Constant s_file None) (Attribute (Name &sys:0 Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &at_start:6 Store)) (Constant True None) None) (For (Name &x:6 Store) (Name &args:6 Load) (/seq (If (UnaryOp Not (Name &at_start:6 Load)) (/seq (Expr (Call (Attribute (Name &file:6 Load) s_write Load) (list (Name &sep:6 Load)) nil))) nil) (Expr (Call (Attribute (Name &file:6 Load) s_write Load) (list (Call (Name g_str Load) (list (Name &x:6 Load)) nil)) nil)) (Assign (list (Name &at_start:6 Store)) (Constant False None) None)) nil None) (Expr (Call (Attribute (Name &file:6 Load) s_write Load) (list (Call (Attribute (Name &kwargs:6 Load) s_pop Load) (list (Constant s_end None) (Constant s-WzEwXQ== None)) nil)) nil)) (If (Call (Attribute (Name &kwargs:6 Load) s_pop Load) (list (Constant s_flush None) (Constant False None)) nil) (/seq (Expr (Call (Attribute (Name &file:6 Load) s_flush Load) nil nil))) nil)) nil None None) (If (Compare (Subscript (Attribute (Name &sys:0 Load) s_version_info Load) (Constant i0 None) Load) (list Lt) (list (Constant i3 None))) (/seq (Assign (list (Tuple (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &FastIO:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil) (Call (Name &FastIO:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)) Load) None)) (/seq (Assign (list (Tuple (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)) Load) None))) (ImportFrom s_types (list (alias &GeneratorType:0 None)) i0) (FunctionDef &iterative:0 (arguments nil (list (arg &f:3 None None) (arg &stack:3 None None)) None nil nil None (list (List nil Load))) (/seq (FunctionDef &wrapped_func:3 (arguments nil nil (arg &args:20 None None) nil nil (arg &kwargs:20 None None) nil) (/seq (If (Name &stack:3 Load) (/seq (Return (Call (Name &f:3 Load) (list (Starred (Name &args:20 Load) Load)) (list (keyword None (Name &kwargs:20 Load)))))) nil) (Assign (list (Name &to:20 Store)) (Call (Name &f:3 Load) (list (Starred (Name &args:20 Load) Load)) (list (keyword None (Name &kwargs:20 Load)))) None) (While (Constant True None) (/seq (If (Compare (Call (Name g_type Load) (list (Name &to:20 Load)) nil) (list Is) (list (Name &GeneratorType:0 Load))) (/seq (Expr (Call (Attribute (Name &stack:3 Load) s_append Load) (list (Name &to:20 Load)) nil)) (Assign (list (Name &to:20 Store)) (Call (Name g_next Load) (list (Name &to:20 Load)) nil) None) Continue) nil) (Expr (Call (Attribute (Name &stack:3 Load) s_pop Load) nil nil)) (If (UnaryOp Not (Name &stack:3 Load)) (/seq Break) nil) (Assign (list (Name &to:20 Store)) (Call (Attribute (Subscript (Name &stack:3 Load) (UnaryOp USub (Constant i1 None)) Load) s_send Load) (list (Name &to:20 Load)) nil) None)) nil) (Return (Name &to:20 Load))) nil None None) (Return (Name &wrapped_func:3 Load))) nil None None) (FunctionDef &inp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil))) nil None None) (FunctionDef &out:0 (arguments nil (list (arg &var:7 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Attribute (Name &sys:0 Load) s_stdout Load) s_write Load) (list (Call (Name g_str Load) (list (Name &var:7 Load)) nil)) nil))) nil None None) (FunctionDef &lis:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (FunctionDef &stringlis:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (FunctionDef &sep:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &strsep:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_str Load) (Call (Attribute (Call (Name &inp:0 Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &testcase:0 (arguments nil (list (arg &t:8 None None)) None nil nil None nil) (/seq (For (Name &pp:8 Store) (Call (Name g_range Load) (list (Name &t:8 Load)) nil) (/seq (Expr (Call (Name &solve:0 Load) (list (Name &pp:8 Load)) nil))) nil None)) nil None None) (FunctionDef &google:0 (arguments nil (list (arg &p:9 None None)) None nil nil None nil) (/seq (Expr (Call (Name &print:0 Load) (list (BinOp (BinOp (Constant s-WzY3LCA5NywgMTE1LCAxMDEsIDMyLCAzNV0= None) Add (Call (Name g_str Load) (list (Name &p:9 Load)) nil)) Add (Constant s-WzU4LCAzMl0= None))) (list (keyword s_end (Constant s_ None)))))) nil None None) (FunctionDef &lcm:0 (arguments nil (list (arg &a:10 None None) (arg &b:10 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &a:10 Load) Mult (Name &b:10 Load)) FloorDiv (Call (Name &gcd:0 Load) (list (Name &a:10 Load) (Name &b:10 Load)) nil)))) nil None None) (FunctionDef &power:0 (arguments nil (list (arg &x:11 None None) (arg &y:11 None None) (arg &p:11 None None)) None nil nil None nil) (/seq (AugAssign (Name &y:11 Store) Mod (BinOp (Name &p:11 Load) Sub (Constant i1 None))) (Assign (list (Name &res:11 Store)) (Constant i1 None) None) (Assign (list (Name &x:11 Store)) (BinOp (Name &x:11 Load) Mod (Name &p:11 Load)) None) (If (Compare (Name &x:11 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i0 None))) nil) (While (Compare (Name &y:11 Load) (list Gt) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &y:11 Load) BitAnd (Constant i1 None)) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &res:11 Store)) (BinOp (BinOp (Name &res:11 Load) Mult (Name &x:11 Load)) Mod (Name &p:11 Load)) None)) nil) (Assign (list (Name &y:11 Store)) (BinOp (Name &y:11 Load) RShift (Constant i1 None)) None) (Assign (list (Name &x:11 Store)) (BinOp (BinOp (Name &x:11 Load) Mult (Name &x:11 Load)) Mod (Name &p:11 Load)) None)) nil) (Return (Name &res:11 Load))) nil None None) (FunctionDef &ncr:0 (arguments nil (list (arg &n:12 None None) (arg &r:12 None None)) None nil nil None nil) (/seq (Return (BinOp (Call (Name &factorial:0 Load) (list (Name &n:12 Load)) nil) FloorDiv (BinOp (Call (Name &factorial:0 Load) (list (Name &r:12 Load)) nil) Mult (Call (Name &factorial:0 Load) (list (Call (Name g_max Load) (list (BinOp (Name &n:12 Load) Sub (Name &r:12 Load)) (Constant i1 None)) nil)) nil))))) nil None None) (FunctionDef &isPrime:0 (arguments nil (list (arg &n:13 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:13 Load) (list LtE) (list (Constant i1 None))) (/seq (Return (Constant False None))) nil) (If (Compare (Name &n:13 Load) (list LtE) (list (Constant i3 None))) (/seq (Return (Constant True None))) nil) (If (BoolOp Or (list (Compare (BinOp (Name &n:13 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Name &n:13 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))))) (/seq (Return (Constant False None))) nil) (Assign (list (Name &i:13 Store)) (Constant i5 None) None) (While (Compare (BinOp (Name &i:13 Load) Mult (Name &i:13 Load)) (list LtE) (list (Name &n:13 Load))) (/seq (If (BoolOp Or (list (Compare (BinOp (Name &n:13 Load) Mod (Name &i:13 Load)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Name &n:13 Load) Mod (BinOp (Name &i:13 Load) Add (Constant i2 None))) (list Eq) (list (Constant i0 None))))) (/seq (Return (Constant False None))) nil) (Assign (list (Name &i:13 Store)) (BinOp (Name &i:13 Load) Add (Constant i6 None)) None)) nil) (Return (Constant True None))) nil None None) (Assign (list (Name &inf:0 Store)) (Call (Name g_pow Load) (list (Constant i10 None) (Constant i20 None)) nil) None) (Assign (list (Name &mod:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (ClassDef &FenwickTree:0 nil nil (/seq (FunctionDef &__init__:4 (arguments nil (list (arg &self:21 None None) (arg &x:21 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzExNiwgMTE0LCA5NywgMTEwLCAxMTUsIDEwMiwgMTExLCAxMTQsIDEwOSwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgMzIsIDEwNSwgMTEwLCAxMTYsIDExMSwgMzIsIDY2LCA3MywgODRd None)) (Assign (list (Attribute (Name &self:21 Load) s_bit Store)) (Name &x:21 Load) None) (For (Name &i:21 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &x:21 Load)) nil)) nil) (/seq (Assign (list (Name &j:21 Store)) (BinOp (Name &i:21 Load) BitOr (BinOp (Name &i:21 Load) Add (Constant i1 None))) None) (If (Compare (Name &j:21 Load) (list Lt) (list (Call (Name g_len Load) (list (Name &x:21 Load)) nil))) (/seq (AugAssign (Subscript (Name &x:21 Load) (Name &j:21 Load) Store) Add (Subscript (Name &x:21 Load) (Name &i:21 Load) Load))) nil)) nil None)) nil None None) (FunctionDef &update:4 (arguments nil (list (arg &self:22 None None) (arg &idx:22 None None) (arg &x:22 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzExNywgMTEyLCAxMDAsIDk3LCAxMTYsIDEwMSwgMTE1LCAzMiwgOTgsIDEwNSwgMTE2LCA5MSwgMTA1LCAxMDAsIDEyMCwgOTMsIDMyLCA0MywgNjEsIDMyLCAxMjBd None)) (While (Compare (Name &idx:22 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:22 Load) s_bit Load)) nil))) (/seq (AugAssign (Subscript (Attribute (Name &self:22 Load) s_bit Load) (Name &idx:22 Load) Store) Add (Name &x:22 Load)) (AugAssign (Name &idx:22 Store) BitOr (BinOp (Name &idx:22 Load) Add (Constant i1 None)))) nil)) nil None None) (FunctionDef &query:4 (arguments nil (list (arg &self:23 None None) (arg &end:23 None None)) None nil nil None nil) (/seq (Expr (Constant s-Wzk5LCA5NywgMTA4LCA5OSwgMzIsIDExNSwgMTE3LCAxMDksIDQwLCA5OCwgMTA1LCAxMTYsIDkxLCA1OCwgMTAxLCAxMTAsIDEwMCwgNDEsIDQxXQ== None)) (Assign (list (Name &x:23 Store)) (Constant i0 None) None) (While (Name &end:23 Load) (/seq (AugAssign (Name &x:23 Store) Add (Subscript (Attribute (Name &self:23 Load) s_bit Load) (BinOp (Name &end:23 Load) Sub (Constant i1 None)) Load)) (AugAssign (Name &end:23 Store) BitAnd (BinOp (Name &end:23 Load) Sub (Constant i1 None)))) nil) (Return (Name &x:23 Load))) nil None None) (FunctionDef &findkth:4 (arguments nil (list (arg &self:24 None None) (arg &k:24 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzcwLCAxMDUsIDExMCwgMTAwLCAzMiwgMTA4LCA5NywgMTE0LCAxMDMsIDEwMSwgMTE1LCAxMTYsIDMyLCAxMDUsIDEwMCwgMTIwLCAzMiwgMTE1LCAxMTcsIDk5LCAxMDQsIDMyLCAxMTYsIDEwNCwgOTcsIDExNiwgMzIsIDExNSwgMTE3LCAxMDksIDQwLCA5OCwgMTA1LCAxMTYsIDkxLCA1OCwgMTA1LCAxMDAsIDEyMCwgOTMsIDQxLCAzMiwgNjAsIDYxLCAzMiwgMTA3XQ== None)) (Assign (list (Name &idx:24 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &d:24 Store) (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Call (Attribute (Call (Name g_len Load) (list (Attribute (Name &self:24 Load) s_bit Load)) nil) s_bit_length Load) nil nil)) nil)) nil) (/seq (Assign (list (Name &right_idx:24 Store)) (BinOp (Name &idx:24 Load) Add (BinOp (Constant i1 None) LShift (Name &d:24 Load))) None) (If (BoolOp And (list (Compare (Name &right_idx:24 Load) (list Lt) (list (Call (Name g_len Load) (list (Attribute (Name &self:24 Load) s_bit Load)) nil))) (Compare (Name &k:24 Load) (list GtE) (list (Subscript (Attribute (Name &self:24 Load) s_bit Load) (Name &right_idx:24 Load) Load))))) (/seq (Assign (list (Name &idx:24 Store)) (Name &right_idx:24 Load) None) (AugAssign (Name &k:24 Store) Sub (Subscript (Attribute (Name &self:24 Load) s_bit Load) (Name &idx:24 Load) Load))) nil)) nil None) (Return (BinOp (Name &idx:24 Load) Add (Constant i1 None)))) nil None None) (FunctionDef &printpref:4 (arguments nil (list (arg &self:25 None None)) None nil nil None nil) (/seq (Assign (list (Name &out:25 Store)) (List nil Load) None) (For (Name &i:25 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Call (Name g_len Load) (list (Attribute (Name &self:25 Load) s_bit Load)) nil) Add (Constant i1 None))) nil) (/seq (Expr (Call (Attribute (Name &out:25 Load) s_append Load) (list (Call (Attribute (Name &self:25 Load) s_query Load) (list (Name &i:25 Load)) nil)) nil))) nil None) (Expr (Call (Name &print:0 Load) (list (Name &out:25 Load)) nil))) nil None None)) nil) (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExNSwgMTA3LCAzMiwgMTEzLCAxMTcsIDEwMSwgMTE0LCAxMjEsIDQwLCAxMDUsIDQzLCA0OSwgNDEsIDMyLCA0NSwgNDUsIDQ1LCA0NSwgNjIsIDYyLCA2MiwgMzIsIDQ5LCAzMiwgMTA1LCAxMTAsIDEwMCwgMTAxLCAxMjAsIDEwMSwgMTAwLCAzMiwgOTgsIDk3LCAxMTUsIDEwMSwgMTAwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDExNywgMTEyLCAxMDAsIDk3LCAxMTYsIDEwMSwgNDAsIDEwNSwgNDQsIDEyMCwgNDEsIDMyLCA0NSwgNDUsIDQ1LCA2MiwgNjIsIDYyLCAzMiwgNDgsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCAxMDEsIDEwMCwgMzIsIDk4LCA5NywgMTE1LCAxMDEsIDEwMCwgMzIsIDEwXQ== None)) (ClassDef &SortedList:0 nil nil (/seq (FunctionDef &__init__:5 (arguments nil (list (arg &self:26 None None) (arg &iterable:26 None None) (arg &_load:26 None None)) None nil nil None (list (List nil Load) (Constant i200 None))) (/seq (Expr (Constant s-WzczLCAxMTAsIDEwNSwgMTE2LCAxMDUsIDk3LCAxMDgsIDEwNSwgMTIyLCAxMDEsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCAzMiwgMTA1LCAxMTAsIDExNSwgMTE2LCA5NywgMTEwLCA5OSwgMTAxLCA0Nl0= None)) (Assign (list (Name &values:26 Store)) (Call (Name g_sorted Load) (list (Name &iterable:26 Load)) nil) None) (Assign (list (Attribute (Name &self:26 Load) s__len Store) (Name &_len:26 Store)) (Call (Name g_len Load) (list (Name &values:26 Load)) nil) None) (Assign (list (Attribute (Name &self:26 Load) s__load Store)) (Name &_load:26 Load) None) (Assign (list (Attribute (Name &self:26 Load) s__lists Store) (Name &_lists:26 Store)) (ListComp (Subscript (Name &values:26 Load) (Slice (Name &i:51 Load) (BinOp (Name &i:51 Load) Add (Name &_load:26 Load)) None) Load) (list (comprehension (Name &i:51 Store) (Call (Name g_range Load) (list (Constant i0 None) (Name &_len:26 Load) (Name &_load:26 Load)) nil) nil i0))) None) (Assign (list (Attribute (Name &self:26 Load) s__list_lens Store)) (ListComp (Call (Name g_len Load) (list (Name &_list:52 Load)) nil) (list (comprehension (Name &_list:52 Store) (Name &_lists:26 Load) nil i0))) None) (Assign (list (Attribute (Name &self:26 Load) s__mins Store)) (ListComp (Subscript (Name &_list:53 Load) (Constant i0 None) Load) (list (comprehension (Name &_list:53 Store) (Name &_lists:26 Load) nil i0))) None) (Assign (list (Attribute (Name &self:26 Load) s__fen_tree Store)) (List nil Load) None) (Assign (list (Attribute (Name &self:26 Load) s__rebuild Store)) (Constant True None) None)) nil None None) (FunctionDef &_fen_build:5 (arguments nil (list (arg &self:27 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY2LCAxMTcsIDEwNSwgMTA4LCAxMDAsIDMyLCA5NywgMzIsIDEwMiwgMTAxLCAxMTAsIDExOSwgMTA1LCA5OSwgMTA3LCAzMiwgMTE2LCAxMTQsIDEwMSwgMTAxLCAzMiwgMTA1LCAxMTAsIDExNSwgMTE2LCA5NywgMTEwLCA5OSwgMTAxLCA0Nl0= None)) (Assign (list (Subscript (Attribute (Name &self:27 Load) s__fen_tree Load) (Slice None None None) Store)) (Attribute (Name &self:27 Load) s__list_lens Load) None) (Assign (list (Name &_fen_tree:27 Store)) (Attribute (Name &self:27 Load) s__fen_tree Load) None) (For (Name &i:27 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &_fen_tree:27 Load)) nil)) nil) (/seq (If (Compare (BinOp (Name &i:27 Load) BitOr (BinOp (Name &i:27 Load) Add (Constant i1 None))) (list Lt) (list (Call (Name g_len Load) (list (Name &_fen_tree:27 Load)) nil))) (/seq (AugAssign (Subscript (Name &_fen_tree:27 Load) (BinOp (Name &i:27 Load) BitOr (BinOp (Name &i:27 Load) Add (Constant i1 None))) Store) Add (Subscript (Name &_fen_tree:27 Load) (Name &i:27 Load) Load))) nil)) nil None) (Assign (list (Attribute (Name &self:27 Load) s__rebuild Store)) (Constant False None) None)) nil None None) (FunctionDef &_fen_update:5 (arguments nil (list (arg &self:28 None None) (arg &index:28 None None) (arg &value:28 None None)) None nil nil None nil) (/seq (Expr (Constant s-Wzg1LCAxMTIsIDEwMCwgOTcsIDExNiwgMTAxLCAzMiwgOTYsIDEwMiwgMTAxLCAxMTAsIDk1LCAxMTYsIDExNCwgMTAxLCAxMDEsIDkxLCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgOTMsIDMyLCA0MywgNjEsIDMyLCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgNDZd None)) (If (UnaryOp Not (Attribute (Name &self:28 Load) s__rebuild Load)) (/seq (Assign (list (Name &_fen_tree:28 Store)) (Attribute (Name &self:28 Load) s__fen_tree Load) None) (While (Compare (Name &index:28 Load) (list Lt) (list (Call (Name g_len Load) (list (Name &_fen_tree:28 Load)) nil))) (/seq (AugAssign (Subscript (Name &_fen_tree:28 Load) (Name &index:28 Load) Store) Add (Name &value:28 Load)) (AugAssign (Name &index:28 Store) BitOr (BinOp (Name &index:28 Load) Add (Constant i1 None)))) nil)) nil)) nil None None) (FunctionDef &_fen_query:5 (arguments nil (list (arg &self:29 None None) (arg &end:29 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk2LCAxMTUsIDExNywgMTA5LCA0MCwgOTUsIDEwMiwgMTAxLCAxMTAsIDk1LCAxMTYsIDExNCwgMTAxLCAxMDEsIDkxLCA1OCwgMTAxLCAxMTAsIDEwMCwgOTMsIDQxLCA5NiwgNDZd None)) (If (Attribute (Name &self:29 Load) s__rebuild Load) (/seq (Expr (Call (Attribute (Name &self:29 Load) s__fen_build Load) nil nil))) nil) (Assign (list (Name &_fen_tree:29 Store)) (Attribute (Name &self:29 Load) s__fen_tree Load) None) (Assign (list (Name &x:29 Store)) (Constant i0 None) None) (While (Name &end:29 Load) (/seq (AugAssign (Name &x:29 Store) Add (Subscript (Name &_fen_tree:29 Load) (BinOp (Name &end:29 Load) Sub (Constant i1 None)) Load)) (AugAssign (Name &end:29 Store) BitAnd (BinOp (Name &end:29 Load) Sub (Constant i1 None)))) nil) (Return (Name &x:29 Load))) nil None None) (FunctionDef &_fen_findkth:5 (arguments nil (list (arg &self:30 None None) (arg &k:30 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAzMiwgMTEyLCA5NywgMTA1LCAxMTQsIDMyLCAxMTEsIDEwMiwgMzIsIDQwLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA4LCA5NywgMTE0LCAxMDMsIDEwMSwgMTE1LCAxMTYsIDMyLCA5NiwgMTA1LCAxMDAsIDEyMCwgOTYsIDMyLCAxMTUsIDExNywgOTksIDEwNCwgMzIsIDExNiwgMTA0LCA5NywgMTE2LCAzMiwgOTYsIDExNSwgMTE3LCAxMDksIDQwLCA5NSwgMTAyLCAxMDEsIDExMCwgOTUsIDExNiwgMTE0LCAxMDEsIDEwMSwgOTEsIDU4LCAxMDUsIDEwMCwgMTIwLCA5MywgNDEsIDMyLCA2MCwgNjEsIDMyLCAxMDcsIDk2LCA0NCwgMzIsIDk2LCAxMDcsIDMyLCA0NSwgMzIsIDExNSwgMTE3LCAxMDksIDQwLCA5NSwgMTAyLCAxMDEsIDExMCwgOTUsIDExNiwgMTE0LCAxMDEsIDEwMSwgOTEsIDU4LCAxMDUsIDEwMCwgMTIwLCA5MywgNDEsIDk2LCA0MSwgNDZd None)) (Assign (list (Name &_list_lens:30 Store)) (Attribute (Name &self:30 Load) s__list_lens Load) None) (If (Compare (Name &k:30 Load) (list Lt) (list (Subscript (Name &_list_lens:30 Load) (Constant i0 None) Load))) (/seq (Return (Tuple (list (Constant i0 None) (Name &k:30 Load)) Load))) nil) (If (Compare (Name &k:30 Load) (list GtE) (list (BinOp (Attribute (Name &self:30 Load) s__len Load) Sub (Subscript (Name &_list_lens:30 Load) (UnaryOp USub (Constant i1 None)) Load)))) (/seq (Return (Tuple (list (BinOp (Call (Name g_len Load) (list (Name &_list_lens:30 Load)) nil) Sub (Constant i1 None)) (BinOp (BinOp (Name &k:30 Load) Add (Subscript (Name &_list_lens:30 Load) (UnaryOp USub (Constant i1 None)) Load)) Sub (Attribute (Name &self:30 Load) s__len Load))) Load))) nil) (If (Attribute (Name &self:30 Load) s__rebuild Load) (/seq (Expr (Call (Attribute (Name &self:30 Load) s__fen_build Load) nil nil))) nil) (Assign (list (Name &_fen_tree:30 Store)) (Attribute (Name &self:30 Load) s__fen_tree Load) None) (Assign (list (Name &idx:30 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &d:30 Store) (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Call (Attribute (Call (Name g_len Load) (list (Name &_fen_tree:30 Load)) nil) s_bit_length Load) nil nil)) nil)) nil) (/seq (Assign (list (Name &right_idx:30 Store)) (BinOp (Name &idx:30 Load) Add (BinOp (Constant i1 None) LShift (Name &d:30 Load))) None) (If (BoolOp And (list (Compare (Name &right_idx:30 Load) (list Lt) (list (Call (Name g_len Load) (list (Name &_fen_tree:30 Load)) nil))) (Compare (Name &k:30 Load) (list GtE) (list (Subscript (Name &_fen_tree:30 Load) (Name &right_idx:30 Load) Load))))) (/seq (Assign (list (Name &idx:30 Store)) (Name &right_idx:30 Load) None) (AugAssign (Name &k:30 Store) Sub (Subscript (Name &_fen_tree:30 Load) (Name &idx:30 Load) Load))) nil)) nil None) (Return (Tuple (list (BinOp (Name &idx:30 Load) Add (Constant i1 None)) (Name &k:30 Load)) Load))) nil None None) (FunctionDef &_delete:5 (arguments nil (list (arg &self:31 None None) (arg &pos:31 None None) (arg &idx:31 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY4LCAxMDEsIDEwOCwgMTAxLCAxMTYsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMywgMTA1LCAxMTgsIDEwMSwgMTEwLCAzMiwgOTYsIDQwLCAxMTIsIDExMSwgMTE1LCA0NCwgMzIsIDEwNSwgMTAwLCAxMjAsIDQxLCA5NiwgNDZd None)) (Assign (list (Name &_lists:31 Store)) (Attribute (Name &self:31 Load) s__lists Load) None) (Assign (list (Name &_mins:31 Store)) (Attribute (Name &self:31 Load) s__mins Load) None) (Assign (list (Name &_list_lens:31 Store)) (Attribute (Name &self:31 Load) s__list_lens Load) None) (AugAssign (Attribute (Name &self:31 Load) s__len Store) Sub (Constant i1 None)) (Expr (Call (Attribute (Name &self:31 Load) s__fen_update Load) (list (Name &pos:31 Load) (UnaryOp USub (Constant i1 None))) nil)) (Delete (list (Subscript (Subscript (Name &_lists:31 Load) (Name &pos:31 Load) Load) (Name &idx:31 Load) Del))) (AugAssign (Subscript (Name &_list_lens:31 Load) (Name &pos:31 Load) Store) Sub (Constant i1 None)) (If (Subscript (Name &_list_lens:31 Load) (Name &pos:31 Load) Load) (/seq (Assign (list (Subscript (Name &_mins:31 Load) (Name &pos:31 Load) Store)) (Subscript (Subscript (Name &_lists:31 Load) (Name &pos:31 Load) Load) (Constant i0 None) Load) None)) (/seq (Delete (list (Subscript (Name &_lists:31 Load) (Name &pos:31 Load) Del))) (Delete (list (Subscript (Name &_list_lens:31 Load) (Name &pos:31 Load) Del))) (Delete (list (Subscript (Name &_mins:31 Load) (Name &pos:31 Load) Del))) (Assign (list (Attribute (Name &self:31 Load) s__rebuild Store)) (Constant True None) None)))) nil None None) (FunctionDef &_loc_left:5 (arguments nil (list (arg &self:32 None None) (arg &value:32 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAxMTAsIDMyLCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgMzIsIDExMiwgOTcsIDEwNSwgMTE0LCAzMiwgMTE2LCAxMDQsIDk3LCAxMTYsIDMyLCA5OSwgMTExLCAxMTQsIDExNCwgMTAxLCAxMTUsIDExMiwgMTExLCAxMTAsIDEwMCwgMTE1LCAzMiwgMTE2LCAxMTEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTAyLCAxMDUsIDExNCwgMTE1LCAxMTYsIDMyLCAxMTIsIDExMSwgMTE1LCAxMDUsIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExMSwgMTAyLCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd None)) (If (UnaryOp Not (Attribute (Name &self:32 Load) s__len Load)) (/seq (Return (Tuple (list (Constant i0 None) (Constant i0 None)) Load))) nil) (Assign (list (Name &_lists:32 Store)) (Attribute (Name &self:32 Load) s__lists Load) None) (Assign (list (Name &_mins:32 Store)) (Attribute (Name &self:32 Load) s__mins Load) None) (Assign (list (Tuple (list (Name &lo:32 Store) (Name &pos:32 Store)) Store)) (Tuple (list (UnaryOp USub (Constant i1 None)) (BinOp (Call (Name g_len Load) (list (Name &_lists:32 Load)) nil) Sub (Constant i1 None))) Load) None) (While (Compare (BinOp (Name &lo:32 Load) Add (Constant i1 None)) (list Lt) (list (Name &pos:32 Load))) (/seq (Assign (list (Name &mi:32 Store)) (BinOp (BinOp (Name &lo:32 Load) Add (Name &pos:32 Load)) RShift (Constant i1 None)) None) (If (Compare (Name &value:32 Load) (list LtE) (list (Subscript (Name &_mins:32 Load) (Name &mi:32 Load) Load))) (/seq (Assign (list (Name &pos:32 Store)) (Name &mi:32 Load) None)) (/seq (Assign (list (Name &lo:32 Store)) (Name &mi:32 Load) None)))) nil) (If (BoolOp And (list (Name &pos:32 Load) (Compare (Name &value:32 Load) (list LtE) (list (Subscript (Subscript (Name &_lists:32 Load) (BinOp (Name &pos:32 Load) Sub (Constant i1 None)) Load) (UnaryOp USub (Constant i1 None)) Load))))) (/seq (AugAssign (Name &pos:32 Store) Sub (Constant i1 None))) nil) (Assign (list (Name &_list:32 Store)) (Subscript (Name &_lists:32 Load) (Name &pos:32 Load) Load) None) (Assign (list (Tuple (list (Name &lo:32 Store) (Name &idx:32 Store)) Store)) (Tuple (list (UnaryOp USub (Constant i1 None)) (Call (Name g_len Load) (list (Name &_list:32 Load)) nil)) Load) None) (While (Compare (BinOp (Name &lo:32 Load) Add (Constant i1 None)) (list Lt) (list (Name &idx:32 Load))) (/seq (Assign (list (Name &mi:32 Store)) (BinOp (BinOp (Name &lo:32 Load) Add (Name &idx:32 Load)) RShift (Constant i1 None)) None) (If (Compare (Name &value:32 Load) (list LtE) (list (Subscript (Name &_list:32 Load) (Name &mi:32 Load) Load))) (/seq (Assign (list (Name &idx:32 Store)) (Name &mi:32 Load) None)) (/seq (Assign (list (Name &lo:32 Store)) (Name &mi:32 Load) None)))) nil) (Return (Tuple (list (Name &pos:32 Load) (Name &idx:32 Load)) Load))) nil None None) (FunctionDef &_loc_right:5 (arguments nil (list (arg &self:33 None None) (arg &value:33 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAxMTAsIDMyLCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgMzIsIDExMiwgOTcsIDEwNSwgMTE0LCAzMiwgMTE2LCAxMDQsIDk3LCAxMTYsIDMyLCA5OSwgMTExLCAxMTQsIDExNCwgMTAxLCAxMTUsIDExMiwgMTExLCAxMTAsIDEwMCwgMTE1LCAzMiwgMTE2LCAxMTEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA4LCA5NywgMTE1LCAxMTYsIDMyLCAxMTIsIDExMSwgMTE1LCAxMDUsIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExMSwgMTAyLCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd None)) (If (UnaryOp Not (Attribute (Name &self:33 Load) s__len Load)) (/seq (Return (Tuple (list (Constant i0 None) (Constant i0 None)) Load))) nil) (Assign (list (Name &_lists:33 Store)) (Attribute (Name &self:33 Load) s__lists Load) None) (Assign (list (Name &_mins:33 Store)) (Attribute (Name &self:33 Load) s__mins Load) None) (Assign (list (Tuple (list (Name &pos:33 Store) (Name &hi:33 Store)) Store)) (Tuple (list (Constant i0 None) (Call (Name g_len Load) (list (Name &_lists:33 Load)) nil)) Load) None) (While (Compare (BinOp (Name &pos:33 Load) Add (Constant i1 None)) (list Lt) (list (Name &hi:33 Load))) (/seq (Assign (list (Name &mi:33 Store)) (BinOp (BinOp (Name &pos:33 Load) Add (Name &hi:33 Load)) RShift (Constant i1 None)) None) (If (Compare (Name &value:33 Load) (list Lt) (list (Subscript (Name &_mins:33 Load) (Name &mi:33 Load) Load))) (/seq (Assign (list (Name &hi:33 Store)) (Name &mi:33 Load) None)) (/seq (Assign (list (Name &pos:33 Store)) (Name &mi:33 Load) None)))) nil) (Assign (list (Name &_list:33 Store)) (Subscript (Name &_lists:33 Load) (Name &pos:33 Load) Load) None) (Assign (list (Tuple (list (Name &lo:33 Store) (Name &idx:33 Store)) Store)) (Tuple (list (UnaryOp USub (Constant i1 None)) (Call (Name g_len Load) (list (Name &_list:33 Load)) nil)) Load) None) (While (Compare (BinOp (Name &lo:33 Load) Add (Constant i1 None)) (list Lt) (list (Name &idx:33 Load))) (/seq (Assign (list (Name &mi:33 Store)) (BinOp (BinOp (Name &lo:33 Load) Add (Name &idx:33 Load)) RShift (Constant i1 None)) None) (If (Compare (Name &value:33 Load) (list Lt) (list (Subscript (Name &_list:33 Load) (Name &mi:33 Load) Load))) (/seq (Assign (list (Name &idx:33 Store)) (Name &mi:33 Load) None)) (/seq (Assign (list (Name &lo:33 Store)) (Name &mi:33 Load) None)))) nil) (Return (Tuple (list (Name &pos:33 Load) (Name &idx:33 Load)) Load))) nil None None) (FunctionDef &add:5 (arguments nil (list (arg &self:34 None None) (arg &value:34 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY1LCAxMDAsIDEwMCwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDExNiwgMTExLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd None)) (Assign (list (Name &_load:34 Store)) (Attribute (Name &self:34 Load) s__load Load) None) (Assign (list (Name &_lists:34 Store)) (Attribute (Name &self:34 Load) s__lists Load) None) (Assign (list (Name &_mins:34 Store)) (Attribute (Name &self:34 Load) s__mins Load) None) (Assign (list (Name &_list_lens:34 Store)) (Attribute (Name &self:34 Load) s__list_lens Load) None) (AugAssign (Attribute (Name &self:34 Load) s__len Store) Add (Constant i1 None)) (If (Name &_lists:34 Load) (/seq (Assign (list (Tuple (list (Name &pos:34 Store) (Name &idx:34 Store)) Store)) (Call (Attribute (Name &self:34 Load) s__loc_right Load) (list (Name &value:34 Load)) nil) None) (Expr (Call (Attribute (Name &self:34 Load) s__fen_update Load) (list (Name &pos:34 Load) (Constant i1 None)) nil)) (Assign (list (Name &_list:34 Store)) (Subscript (Name &_lists:34 Load) (Name &pos:34 Load) Load) None) (Expr (Call (Attribute (Name &_list:34 Load) s_insert Load) (list (Name &idx:34 Load) (Name &value:34 Load)) nil)) (AugAssign (Subscript (Name &_list_lens:34 Load) (Name &pos:34 Load) Store) Add (Constant i1 None)) (Assign (list (Subscript (Name &_mins:34 Load) (Name &pos:34 Load) Store)) (Subscript (Name &_list:34 Load) (Constant i0 None) Load) None) (If (Compare (BinOp (Name &_load:34 Load) Add (Name &_load:34 Load)) (list Lt) (list (Call (Name g_len Load) (list (Name &_list:34 Load)) nil))) (/seq (Expr (Call (Attribute (Name &_lists:34 Load) s_insert Load) (list (BinOp (Name &pos:34 Load) Add (Constant i1 None)) (Subscript (Name &_list:34 Load) (Slice (Name &_load:34 Load) None None) Load)) nil)) (Expr (Call (Attribute (Name &_list_lens:34 Load) s_insert Load) (list (BinOp (Name &pos:34 Load) Add (Constant i1 None)) (BinOp (Call (Name g_len Load) (list (Name &_list:34 Load)) nil) Sub (Name &_load:34 Load))) nil)) (Expr (Call (Attribute (Name &_mins:34 Load) s_insert Load) (list (BinOp (Name &pos:34 Load) Add (Constant i1 None)) (Subscript (Name &_list:34 Load) (Name &_load:34 Load) Load)) nil)) (Assign (list (Subscript (Name &_list_lens:34 Load) (Name &pos:34 Load) Store)) (Name &_load:34 Load) None) (Delete (list (Subscript (Name &_list:34 Load) (Slice (Name &_load:34 Load) None None) Del))) (Assign (list (Attribute (Name &self:34 Load) s__rebuild Store)) (Constant True None) None)) nil)) (/seq (Expr (Call (Attribute (Name &_lists:34 Load) s_append Load) (list (List (list (Name &value:34 Load)) Load)) nil)) (Expr (Call (Attribute (Name &_mins:34 Load) s_append Load) (list (Name &value:34 Load)) nil)) (Expr (Call (Attribute (Name &_list_lens:34 Load) s_append Load) (list (Constant i1 None)) nil)) (Assign (list (Attribute (Name &self:34 Load) s__rebuild Store)) (Constant True None) None)))) nil None None) (FunctionDef &discard:5 (arguments nil (list (arg &self:35 None None) (arg &value:35 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDEwMiwgMTE0LCAxMTEsIDEwOSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDMyLCAxMDUsIDEwMiwgMzIsIDEwNSwgMTE2LCAzMiwgMTA1LCAxMTUsIDMyLCA5NywgMzIsIDEwOSwgMTAxLCAxMDksIDk4LCAxMDEsIDExNCwgNDZd None)) (Assign (list (Name &_lists:35 Store)) (Attribute (Name &self:35 Load) s__lists Load) None) (If (Name &_lists:35 Load) (/seq (Assign (list (Tuple (list (Name &pos:35 Store) (Name &idx:35 Store)) Store)) (Call (Attribute (Name &self:35 Load) s__loc_right Load) (list (Name &value:35 Load)) nil) None) (If (BoolOp And (list (Name &idx:35 Load) (Compare (Subscript (Subscript (Name &_lists:35 Load) (Name &pos:35 Load) Load) (BinOp (Name &idx:35 Load) Sub (Constant i1 None)) Load) (list Eq) (list (Name &value:35 Load))))) (/seq (Expr (Call (Attribute (Name &self:35 Load) s__delete Load) (list (Name &pos:35 Load) (BinOp (Name &idx:35 Load) Sub (Constant i1 None))) nil))) nil)) nil)) nil None None) (FunctionDef &remove:5 (arguments nil (list (arg &self:36 None None) (arg &value:36 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDEwMiwgMTE0LCAxMTEsIDEwOSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDU5LCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA5LCAxMTcsIDExNSwgMTE2LCAzMiwgOTgsIDEwMSwgMzIsIDk3LCAzMiwgMTA5LCAxMDEsIDEwOSwgOTgsIDEwMSwgMTE0LCA0Nl0= None)) (Assign (list (Name &_len:36 Store)) (Attribute (Name &self:36 Load) s__len Load) None) (Expr (Call (Attribute (Name &self:36 Load) s_discard Load) (list (Name &value:36 Load)) nil)) (If (Compare (Name &_len:36 Load) (list Eq) (list (Attribute (Name &self:36 Load) s__len Load))) (/seq (Raise (Call (Name g_ValueError Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDMzLCAxMTQsIDEyNSwgMzIsIDExMCwgMTExLCAxMTYsIDMyLCAxMDUsIDExMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNl0= None) s_format Load) (list (Name &value:36 Load)) nil)) nil) None)) nil)) nil None None) (FunctionDef &pop:5 (arguments nil (list (arg &self:37 None None) (arg &index:37 None None)) None nil nil None (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Constant s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDk3LCAxMTAsIDEwMCwgMzIsIDExNCwgMTAxLCAxMTYsIDExNywgMTE0LCAxMTAsIDMyLCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCAzMiwgOTcsIDExNiwgMzIsIDk2LCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgOTYsIDMyLCAxMDUsIDExMCwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ== None)) (Assign (list (Tuple (list (Name &pos:37 Store) (Name &idx:37 Store)) Store)) (Call (Attribute (Name &self:37 Load) s__fen_findkth Load) (list (IfExp (Compare (Name &index:37 Load) (list Lt) (list (Constant i0 None))) (BinOp (Attribute (Name &self:37 Load) s__len Load) Add (Name &index:37 Load)) (Name &index:37 Load))) nil) None) (Assign (list (Name &value:37 Store)) (Subscript (Subscript (Attribute (Name &self:37 Load) s__lists Load) (Name &pos:37 Load) Load) (Name &idx:37 Load) Load) None) (Expr (Call (Attribute (Name &self:37 Load) s__delete Load) (list (Name &pos:37 Load) (Name &idx:37 Load)) nil)) (Return (Name &value:37 Load))) nil None None) (FunctionDef &bisect_left:5 (arguments nil (list (arg &self:38 None None) (arg &value:38 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDIsIDEwNSwgMTE0LCAxMTUsIDExNiwgMzIsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCAzMiwgMTE2LCAxMTEsIDMyLCAxMDUsIDExMCwgMTE1LCAxMDEsIDExNCwgMTE2LCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd None)) (Assign (list (Tuple (list (Name &pos:38 Store) (Name &idx:38 Store)) Store)) (Call (Attribute (Name &self:38 Load) s__loc_left Load) (list (Name &value:38 Load)) nil) None) (Return (BinOp (Call (Attribute (Name &self:38 Load) s__fen_query Load) (list (Name &pos:38 Load)) nil) Add (Name &idx:38 Load)))) nil None None) (FunctionDef &bisect_right:5 (arguments nil (list (arg &self:39 None None) (arg &value:39 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDgsIDk3LCAxMTUsIDExNiwgMzIsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCAzMiwgMTE2LCAxMTEsIDMyLCAxMDUsIDExMCwgMTE1LCAxMDEsIDExNCwgMTE2LCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd None)) (Assign (list (Tuple (list (Name &pos:39 Store) (Name &idx:39 Store)) Store)) (Call (Attribute (Name &self:39 Load) s__loc_right Load) (list (Name &value:39 Load)) nil) None) (Return (BinOp (Call (Attribute (Name &self:39 Load) s__fen_query Load) (list (Name &pos:39 Load)) nil) Add (Name &idx:39 Load)))) nil None None) (FunctionDef &count:5 (arguments nil (list (arg &self:40 None None) (arg &value:40 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExMCwgMTE3LCAxMDksIDk4LCAxMDEsIDExNCwgMzIsIDExMSwgMTAyLCAzMiwgMTExLCA5OSwgOTksIDExNywgMTE0LCAxMTQsIDEwMSwgMTEwLCA5OSwgMTAxLCAxMTUsIDMyLCAxMTEsIDEwMiwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDEwNSwgMTEwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ== None)) (Return (BinOp (Call (Attribute (Name &self:40 Load) s_bisect_right Load) (list (Name &value:40 Load)) nil) Sub (Call (Attribute (Name &self:40 Load) s_bisect_left Load) (list (Name &value:40 Load)) nil)))) nil None None) (FunctionDef &__len__:5 (arguments nil (list (arg &self:41 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDEwNSwgMTIyLCAxMDEsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCA0Nl0= None)) (Return (Attribute (Name &self:41 Load) s__len Load))) nil None None) (FunctionDef &__getitem__:5 (arguments nil (list (arg &self:42 None None) (arg &index:42 None None)) None nil nil None nil) (/seq (Expr (Constant s-Wzc2LCAxMTEsIDExMSwgMTA3LCAxMTcsIDExMiwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDMyLCA5NywgMTE2LCAzMiwgOTYsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCA5NiwgMzIsIDEwNSwgMTEwLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd None)) (Assign (list (Tuple (list (Name &pos:42 Store) (Name &idx:42 Store)) Store)) (Call (Attribute (Name &self:42 Load) s__fen_findkth Load) (list (IfExp (Compare (Name &index:42 Load) (list Lt) (list (Constant i0 None))) (BinOp (Attribute (Name &self:42 Load) s__len Load) Add (Name &index:42 Load)) (Name &index:42 Load))) nil) None) (Return (Subscript (Subscript (Attribute (Name &self:42 Load) s__lists Load) (Name &pos:42 Load) Load) (Name &idx:42 Load) Load))) nil None None) (FunctionDef &__delitem__:5 (arguments nil (list (arg &self:43 None None) (arg &index:43 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDMyLCA5NywgMTE2LCAzMiwgOTYsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCA5NiwgMzIsIDEwMiwgMTE0LCAxMTEsIDEwOSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ== None)) (Assign (list (Tuple (list (Name &pos:43 Store) (Name &idx:43 Store)) Store)) (Call (Attribute (Name &self:43 Load) s__fen_findkth Load) (list (IfExp (Compare (Name &index:43 Load) (list Lt) (list (Constant i0 None))) (BinOp (Attribute (Name &self:43 Load) s__len Load) Add (Name &index:43 Load)) (Name &index:43 Load))) nil) None) (Expr (Call (Attribute (Name &self:43 Load) s__delete Load) (list (Name &pos:43 Load) (Name &idx:43 Load)) nil))) nil None None) (FunctionDef &__contains__:5 (arguments nil (list (arg &self:44 None None) (arg &value:44 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTE0LCAxMTcsIDEwMSwgMzIsIDEwNSwgMTAyLCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTUsIDMyLCA5NywgMTEwLCAzMiwgMTAxLCAxMDgsIDEwMSwgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTExLCAxMDIsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd None)) (Assign (list (Name &_lists:44 Store)) (Attribute (Name &self:44 Load) s__lists Load) None) (If (Name &_lists:44 Load) (/seq (Assign (list (Tuple (list (Name &pos:44 Store) (Name &idx:44 Store)) Store)) (Call (Attribute (Name &self:44 Load) s__loc_left Load) (list (Name &value:44 Load)) nil) None) (Return (BoolOp And (list (Compare (Name &idx:44 Load) (list Lt) (list (Call (Name g_len Load) (list (Subscript (Name &_lists:44 Load) (Name &pos:44 Load) Load)) nil))) (Compare (Subscript (Subscript (Name &_lists:44 Load) (Name &pos:44 Load) Load) (Name &idx:44 Load) Load) (list Eq) (list (Name &value:44 Load))))))) nil) (Return (Constant False None))) nil None None) (FunctionDef &__iter__:5 (arguments nil (list (arg &self:45 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAxMTAsIDMyLCAxMDUsIDExNiwgMTAxLCAxMTQsIDk3LCAxMTYsIDExMSwgMTE0LCAzMiwgMTExLCAxMTgsIDEwMSwgMTE0LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ== None)) (Return (GeneratorExp (Name &value:48 Load) (list (comprehension (Name &_list:54 Store) (Attribute (Name &self:45 Load) s__lists Load) nil i0) (comprehension (Name &value:48 Store) (Name &_list:54 Load) nil i0))))) nil None None) (FunctionDef &__reversed__:5 (arguments nil (list (arg &self:46 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAzMiwgMTE0LCAxMDEsIDExOCwgMTAxLCAxMTQsIDExNSwgMTAxLCAzMiwgMTA1LCAxMTYsIDEwMSwgMTE0LCA5NywgMTE2LCAxMTEsIDExNCwgMzIsIDExMSwgMTE4LCAxMDEsIDExNCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCA0Nl0= None)) (Return (GeneratorExp (Name &value:49 Load) (list (comprehension (Name &_list:55 Store) (Call (Name g_reversed Load) (list (Attribute (Name &self:46 Load) s__lists Load)) nil) nil i0) (comprehension (Name &value:49 Store) (Call (Name g_reversed Load) (list (Name &_list:55 Load)) nil) nil i0))))) nil None None) (FunctionDef &__repr__:5 (arguments nil (list (arg &self:47 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNSwgMTE2LCAxMTQsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTQsIDEwMSwgMTEyLCAxMTQsIDEwMSwgMTE1LCAxMDEsIDExMCwgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTExLCAxMDIsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCA0Nl0= None)) (Return (Call (Attribute (Constant s-WzgzLCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgNzYsIDEwNSwgMTE1LCAxMTYsIDQwLCAxMjMsIDQ4LCAxMjUsIDQxXQ== None) s_format Load) (list (Call (Name g_list Load) (list (Name &self:47 Load)) nil)) nil))) nil None None)) nil) (FunctionDef &solve:0 (arguments nil (list (arg &case:14 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:14 Store)) (Call (Name g_int Load) (list (Call (Name &inp:0 Load) nil nil)) nil) None) (Assign (list (Name &a:14 Store)) (Call (Name &lis:0 Load) nil nil) None) (Assign (list (Name &queries:14 Store)) (List nil Load) None) (Assign (list (Name &m:14 Store)) (Call (Name g_int Load) (list (Call (Name &inp:0 Load) nil nil)) nil) None) (For (Name &i:14 Store) (Call (Name g_range Load) (list (Name &m:14 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:14 Store) (Name &pos:14 Store)) Store)) (Call (Name &sep:0 Load) nil nil) None) (Expr (Call (Attribute (Name &queries:14 Load) s_append Load) (list (Tuple (list (Name &k:14 Load) (Name &pos:14 Load) (Name &i:14 Load)) Load)) nil))) nil None) (Expr (Call (Attribute (Name &queries:14 Load) s_sort Load) nil nil)) (Assign (list (Name &b:14 Store)) (Subscript (Call (Name g_sorted Load) (list (Name &a:14 Load)) nil) (Slice None None (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Name &ind:14 Store)) (Dict nil nil) None) (For (Name &i:14 Store) (Call (Name g_range Load) (list (Name &n:14 Load)) nil) (/seq (If (Compare (Subscript (Name &a:14 Load) (Name &i:14 Load) Load) (list NotIn) (list (Name &ind:14 Load))) (/seq (Assign (list (Subscript (Name &ind:14 Load) (Subscript (Name &a:14 Load) (Name &i:14 Load) Load) Store)) (Call (Name &deque:0 Load) (list (List (list (Name &i:14 Load)) Load)) nil) None)) (/seq (Expr (Call (Attribute (Subscript (Name &ind:14 Load) (Subscript (Name &a:14 Load) (Name &i:14 Load) Load) Load) s_append Load) (list (Name &i:14 Load)) nil))))) nil None) (Assign (list (Name &sl:14 Store)) (Call (Name &SortedList:0 Load) nil nil) None) (Assign (list (Name &currind:14 Store)) (Constant i0 None) None) (Assign (list (Name &ans:14 Store)) (BinOp (List (list (UnaryOp USub (Constant i1 None))) Load) Mult (Name &m:14 Load)) None) (For (Tuple (list (Name &k:14 Store) (Name &pos:14 Store) (Name &where:14 Store)) Store) (Name &queries:14 Load) (/seq (While (Compare (Name &currind:14 Load) (list Lt) (list (Name &k:14 Load))) (/seq (Expr (Call (Attribute (Name &sl:14 Load) s_add Load) (list (Call (Attribute (Subscript (Name &ind:14 Load) (Subscript (Name &b:14 Load) (Name &currind:14 Load) Load) Load) s_popleft Load) nil nil)) nil)) (AugAssign (Name &currind:14 Store) Add (Constant i1 None))) nil) (Assign (list (Subscript (Name &ans:14 Load) (Name &where:14 Load) Store)) (Subscript (Name &a:14 Load) (Subscript (Name &sl:14 Load) (BinOp (Name &pos:14 Load) Sub (Constant i1 None)) Load) Load) None)) nil None) (For (Name &i:14 Store) (Name &ans:14 Load) (/seq (Expr (Call (Name &print:0 Load) (list (Name &i:14 Load)) nil))) nil None)) nil None None) (Expr (Call (Name &testcase:0 Load) (list (Constant i1 None)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)) nil) None) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &l:0 Store)) (ListComp (Name &i:1 Load) (list (comprehension (Name &i:1 Store) (Name &arr:0 Load) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Store)) (List (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Name &i:0 Load))) Load) None)) nil None) (Expr (Call (Attribute (Name &arr:0 Load) s_sort Load) nil nil)) (Assign (list (Name &dic:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_list Load)) nil) None) (Expr (Constant s-WzEwMiwgMTExLCAxMTQsIDMyLCAxMDUsIDMyLCAxMDUsIDExMCwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDEsIDQwLCA0OSwgNDQsIDExMCwgNDMsIDQ5LCA0MSwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMTAwLCAxMDUsIDk5LCA5MSwgMTA1LCA5MywgNjEsIDEwMCwgMTA1LCA5OSwgOTEsIDEwNSwgNDUsIDQ5LCA5MywgNDMsIDkxLCA0NSwgOTcsIDExNCwgMTE0LCA5MSwgMTEwLCA0NSwgMTA1LCA5MywgOTEsIDQ5LCA5MywgOTMsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMTAwLCAxMDUsIDk5LCA5MSwgMTA1LCA5MywgNDYsIDExNSwgMTExLCAxMTQsIDExNiwgNDAsIDQxXQ== None)) (Assign (list (Name &z:0 Store)) (Call (Name g_len Load) (list (Name &arr:0 Load)) nil) None) (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &pos:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Subscript (Name &dic:0 Load) (Name &n:0 Load) Load) (list NotEq) (list (List nil Load))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &l:0 Load) (Subscript (Subscript (Name &dic:0 Load) (Name &n:0 Load) Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) Load)) nil))) (/seq (Assign (list (Subscript (Name &dic:0 Load) (Name &n:0 Load) Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Assign (list (Name &ind:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &z:0 Load) Sub (Constant i1 None)) (BinOp (BinOp (Name &z:0 Load) Sub (Name &n:0 Load)) Sub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Subscript (Name &dic:0 Load) (Name &n:0 Load) Load) (Name &ind:0 Load) Store)) (UnaryOp USub (Subscript (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)) None) (AugAssign (Name &ind:0 Store) Sub (Constant i1 None))) nil None) (Expr (Call (Attribute (Subscript (Name &dic:0 Load) (Name &n:0 Load) Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Subscript (Name &l:0 Load) (Subscript (Subscript (Name &dic:0 Load) (Name &n:0 Load) Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) Load)) nil))))) nil None)) nil)",
            "(Module (/seq (Import (list (alias g_os None))) (Import (list (alias g_sys None))) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (ClassDef &SortedList:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:5 None None) (arg &iterable:5 None None) (arg &_load:5 None None)) None nil nil None (list (Constant None None) (Constant i200 None))) (/seq (Expr (Constant s-WzczLCAxMTAsIDEwNSwgMTE2LCAxMDUsIDk3LCAxMDgsIDEwNSwgMTIyLCAxMDEsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCAzMiwgMTA1LCAxMTAsIDExNSwgMTE2LCA5NywgMTEwLCA5OSwgMTAxLCA0Nl0= None)) (If (Compare (Name &iterable:5 Load) (list Is) (list (Constant None None))) (/seq (Assign (list (Name &iterable:5 Store)) (List nil Load) None)) nil) (Assign (list (Name &values:5 Store)) (Call (Name g_sorted Load) (list (Name &iterable:5 Load)) nil) None) (Assign (list (Attribute (Name &self:5 Load) s__len Store) (Name &_len:5 Store)) (Call (Name g_len Load) (list (Name &values:5 Load)) nil) None) (Assign (list (Attribute (Name &self:5 Load) s__load Store)) (Name &_load:5 Load) None) (Assign (list (Attribute (Name &self:5 Load) s__lists Store) (Name &_lists:5 Store)) (ListComp (Subscript (Name &values:5 Load) (Slice (Name &i:35 Load) (BinOp (Name &i:35 Load) Add (Name &_load:5 Load)) None) Load) (list (comprehension (Name &i:35 Store) (Call (Name g_range Load) (list (Constant i0 None) (Name &_len:5 Load) (Name &_load:5 Load)) nil) nil i0))) None) (Assign (list (Attribute (Name &self:5 Load) s__list_lens Store)) (ListComp (Call (Name g_len Load) (list (Name &_list:36 Load)) nil) (list (comprehension (Name &_list:36 Store) (Name &_lists:5 Load) nil i0))) None) (Assign (list (Attribute (Name &self:5 Load) s__mins Store)) (ListComp (Subscript (Name &_list:37 Load) (Constant i0 None) Load) (list (comprehension (Name &_list:37 Store) (Name &_lists:5 Load) nil i0))) None) (Assign (list (Attribute (Name &self:5 Load) s__fen_tree Store)) (List nil Load) None) (Assign (list (Attribute (Name &self:5 Load) s__rebuild Store)) (Constant True None) None)) nil None None) (FunctionDef &_fen_build:1 (arguments nil (list (arg &self:6 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY2LCAxMTcsIDEwNSwgMTA4LCAxMDAsIDMyLCA5NywgMzIsIDEwMiwgMTAxLCAxMTAsIDExOSwgMTA1LCA5OSwgMTA3LCAzMiwgMTE2LCAxMTQsIDEwMSwgMTAxLCAzMiwgMTA1LCAxMTAsIDExNSwgMTE2LCA5NywgMTEwLCA5OSwgMTAxLCA0Nl0= None)) (Assign (list (Subscript (Attribute (Name &self:6 Load) s__fen_tree Load) (Slice None None None) Store)) (Attribute (Name &self:6 Load) s__list_lens Load) None) (Assign (list (Name &_fen_tree:6 Store)) (Attribute (Name &self:6 Load) s__fen_tree Load) None) (For (Name &i:6 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &_fen_tree:6 Load)) nil)) nil) (/seq (If (Compare (BinOp (Name &i:6 Load) BitOr (BinOp (Name &i:6 Load) Add (Constant i1 None))) (list Lt) (list (Call (Name g_len Load) (list (Name &_fen_tree:6 Load)) nil))) (/seq (AugAssign (Subscript (Name &_fen_tree:6 Load) (BinOp (Name &i:6 Load) BitOr (BinOp (Name &i:6 Load) Add (Constant i1 None))) Store) Add (Subscript (Name &_fen_tree:6 Load) (Name &i:6 Load) Load))) nil)) nil None) (Assign (list (Attribute (Name &self:6 Load) s__rebuild Store)) (Constant False None) None)) nil None None) (FunctionDef &_fen_update:1 (arguments nil (list (arg &self:7 None None) (arg &index:7 None None) (arg &value:7 None None)) None nil nil None nil) (/seq (Expr (Constant s-Wzg1LCAxMTIsIDEwMCwgOTcsIDExNiwgMTAxLCAzMiwgOTYsIDEwMiwgMTAxLCAxMTAsIDk1LCAxMTYsIDExNCwgMTAxLCAxMDEsIDkxLCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgOTMsIDMyLCA0MywgNjEsIDMyLCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgNDZd None)) (If (UnaryOp Not (Attribute (Name &self:7 Load) s__rebuild Load)) (/seq (Assign (list (Name &_fen_tree:7 Store)) (Attribute (Name &self:7 Load) s__fen_tree Load) None) (While (Compare (Name &index:7 Load) (list Lt) (list (Call (Name g_len Load) (list (Name &_fen_tree:7 Load)) nil))) (/seq (AugAssign (Subscript (Name &_fen_tree:7 Load) (Name &index:7 Load) Store) Add (Name &value:7 Load)) (AugAssign (Name &index:7 Store) BitOr (BinOp (Name &index:7 Load) Add (Constant i1 None)))) nil)) nil)) nil None None) (FunctionDef &_fen_query:1 (arguments nil (list (arg &self:8 None None) (arg &end:8 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk2LCAxMTUsIDExNywgMTA5LCA0MCwgOTUsIDEwMiwgMTAxLCAxMTAsIDk1LCAxMTYsIDExNCwgMTAxLCAxMDEsIDkxLCA1OCwgMTAxLCAxMTAsIDEwMCwgOTMsIDQxLCA5NiwgNDZd None)) (If (Attribute (Name &self:8 Load) s__rebuild Load) (/seq (Expr (Call (Attribute (Name &self:8 Load) s__fen_build Load) nil nil))) nil) (Assign (list (Name &_fen_tree:8 Store)) (Attribute (Name &self:8 Load) s__fen_tree Load) None) (Assign (list (Name &x:8 Store)) (Constant i0 None) None) (While (Name &end:8 Load) (/seq (AugAssign (Name &x:8 Store) Add (Subscript (Name &_fen_tree:8 Load) (BinOp (Name &end:8 Load) Sub (Constant i1 None)) Load)) (AugAssign (Name &end:8 Store) BitAnd (BinOp (Name &end:8 Load) Sub (Constant i1 None)))) nil) (Return (Name &x:8 Load))) nil None None) (FunctionDef &_fen_findkth:1 (arguments nil (list (arg &self:9 None None) (arg &k:9 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAzMiwgMTEyLCA5NywgMTA1LCAxMTQsIDMyLCAxMTEsIDEwMiwgMzIsIDQwLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA4LCA5NywgMTE0LCAxMDMsIDEwMSwgMTE1LCAxMTYsIDMyLCA5NiwgMTA1LCAxMDAsIDEyMCwgOTYsIDMyLCAxMTUsIDExNywgOTksIDEwNCwgMzIsIDExNiwgMTA0LCA5NywgMTE2LCAzMiwgOTYsIDExNSwgMTE3LCAxMDksIDQwLCA5NSwgMTAyLCAxMDEsIDExMCwgOTUsIDExNiwgMTE0LCAxMDEsIDEwMSwgOTEsIDU4LCAxMDUsIDEwMCwgMTIwLCA5MywgNDEsIDMyLCA2MCwgNjEsIDMyLCAxMDcsIDk2LCA0NCwgMzIsIDk2LCAxMDcsIDMyLCA0NSwgMzIsIDExNSwgMTE3LCAxMDksIDQwLCA5NSwgMTAyLCAxMDEsIDExMCwgOTUsIDExNiwgMTE0LCAxMDEsIDEwMSwgOTEsIDU4LCAxMDUsIDEwMCwgMTIwLCA5MywgNDEsIDk2LCA0MSwgNDZd None)) (Assign (list (Name &_list_lens:9 Store)) (Attribute (Name &self:9 Load) s__list_lens Load) None) (If (Compare (Name &k:9 Load) (list Lt) (list (Subscript (Name &_list_lens:9 Load) (Constant i0 None) Load))) (/seq (Return (Tuple (list (Constant i0 None) (Name &k:9 Load)) Load))) nil) (If (Compare (Name &k:9 Load) (list GtE) (list (BinOp (Attribute (Name &self:9 Load) s__len Load) Sub (Subscript (Name &_list_lens:9 Load) (UnaryOp USub (Constant i1 None)) Load)))) (/seq (Return (Tuple (list (BinOp (Call (Name g_len Load) (list (Name &_list_lens:9 Load)) nil) Sub (Constant i1 None)) (BinOp (BinOp (Name &k:9 Load) Add (Subscript (Name &_list_lens:9 Load) (UnaryOp USub (Constant i1 None)) Load)) Sub (Attribute (Name &self:9 Load) s__len Load))) Load))) nil) (If (Attribute (Name &self:9 Load) s__rebuild Load) (/seq (Expr (Call (Attribute (Name &self:9 Load) s__fen_build Load) nil nil))) nil) (Assign (list (Name &_fen_tree:9 Store)) (Attribute (Name &self:9 Load) s__fen_tree Load) None) (Assign (list (Name &idx:9 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &d:9 Store) (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Call (Attribute (Call (Name g_len Load) (list (Name &_fen_tree:9 Load)) nil) s_bit_length Load) nil nil)) nil)) nil) (/seq (Assign (list (Name &right_idx:9 Store)) (BinOp (Name &idx:9 Load) Add (BinOp (Constant i1 None) LShift (Name &d:9 Load))) None) (If (BoolOp And (list (Compare (Name &right_idx:9 Load) (list Lt) (list (Call (Name g_len Load) (list (Name &_fen_tree:9 Load)) nil))) (Compare (Name &k:9 Load) (list GtE) (list (Subscript (Name &_fen_tree:9 Load) (Name &right_idx:9 Load) Load))))) (/seq (Assign (list (Name &idx:9 Store)) (Name &right_idx:9 Load) None) (AugAssign (Name &k:9 Store) Sub (Subscript (Name &_fen_tree:9 Load) (Name &idx:9 Load) Load))) nil)) nil None) (Return (Tuple (list (BinOp (Name &idx:9 Load) Add (Constant i1 None)) (Name &k:9 Load)) Load))) nil None None) (FunctionDef &_delete:1 (arguments nil (list (arg &self:10 None None) (arg &pos:10 None None) (arg &idx:10 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY4LCAxMDEsIDEwOCwgMTAxLCAxMTYsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMywgMTA1LCAxMTgsIDEwMSwgMTEwLCAzMiwgOTYsIDQwLCAxMTIsIDExMSwgMTE1LCA0NCwgMzIsIDEwNSwgMTAwLCAxMjAsIDQxLCA5NiwgNDZd None)) (Assign (list (Name &_lists:10 Store)) (Attribute (Name &self:10 Load) s__lists Load) None) (Assign (list (Name &_mins:10 Store)) (Attribute (Name &self:10 Load) s__mins Load) None) (Assign (list (Name &_list_lens:10 Store)) (Attribute (Name &self:10 Load) s__list_lens Load) None) (AugAssign (Attribute (Name &self:10 Load) s__len Store) Sub (Constant i1 None)) (Expr (Call (Attribute (Name &self:10 Load) s__fen_update Load) (list (Name &pos:10 Load) (UnaryOp USub (Constant i1 None))) nil)) (Delete (list (Subscript (Subscript (Name &_lists:10 Load) (Name &pos:10 Load) Load) (Name &idx:10 Load) Del))) (AugAssign (Subscript (Name &_list_lens:10 Load) (Name &pos:10 Load) Store) Sub (Constant i1 None)) (If (Subscript (Name &_list_lens:10 Load) (Name &pos:10 Load) Load) (/seq (Assign (list (Subscript (Name &_mins:10 Load) (Name &pos:10 Load) Store)) (Subscript (Subscript (Name &_lists:10 Load) (Name &pos:10 Load) Load) (Constant i0 None) Load) None)) (/seq (Delete (list (Subscript (Name &_lists:10 Load) (Name &pos:10 Load) Del))) (Delete (list (Subscript (Name &_list_lens:10 Load) (Name &pos:10 Load) Del))) (Delete (list (Subscript (Name &_mins:10 Load) (Name &pos:10 Load) Del))) (Assign (list (Attribute (Name &self:10 Load) s__rebuild Store)) (Constant True None) None)))) nil None None) (FunctionDef &_loc_left:1 (arguments nil (list (arg &self:11 None None) (arg &value:11 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAxMTAsIDMyLCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgMzIsIDExMiwgOTcsIDEwNSwgMTE0LCAzMiwgMTE2LCAxMDQsIDk3LCAxMTYsIDMyLCA5OSwgMTExLCAxMTQsIDExNCwgMTAxLCAxMTUsIDExMiwgMTExLCAxMTAsIDEwMCwgMTE1LCAzMiwgMTE2LCAxMTEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTAyLCAxMDUsIDExNCwgMTE1LCAxMTYsIDMyLCAxMTIsIDExMSwgMTE1LCAxMDUsIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExMSwgMTAyLCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd None)) (If (UnaryOp Not (Attribute (Name &self:11 Load) s__len Load)) (/seq (Return (Tuple (list (Constant i0 None) (Constant i0 None)) Load))) nil) (Assign (list (Name &_lists:11 Store)) (Attribute (Name &self:11 Load) s__lists Load) None) (Assign (list (Name &_mins:11 Store)) (Attribute (Name &self:11 Load) s__mins Load) None) (Assign (list (Tuple (list (Name &lo:11 Store) (Name &pos:11 Store)) Store)) (Tuple (list (UnaryOp USub (Constant i1 None)) (BinOp (Call (Name g_len Load) (list (Name &_lists:11 Load)) nil) Sub (Constant i1 None))) Load) None) (While (Compare (BinOp (Name &lo:11 Load) Add (Constant i1 None)) (list Lt) (list (Name &pos:11 Load))) (/seq (Assign (list (Name &mi:11 Store)) (BinOp (BinOp (Name &lo:11 Load) Add (Name &pos:11 Load)) RShift (Constant i1 None)) None) (If (Compare (Name &value:11 Load) (list LtE) (list (Subscript (Name &_mins:11 Load) (Name &mi:11 Load) Load))) (/seq (Assign (list (Name &pos:11 Store)) (Name &mi:11 Load) None)) (/seq (Assign (list (Name &lo:11 Store)) (Name &mi:11 Load) None)))) nil) (If (BoolOp And (list (Name &pos:11 Load) (Compare (Name &value:11 Load) (list LtE) (list (Subscript (Subscript (Name &_lists:11 Load) (BinOp (Name &pos:11 Load) Sub (Constant i1 None)) Load) (UnaryOp USub (Constant i1 None)) Load))))) (/seq (AugAssign (Name &pos:11 Store) Sub (Constant i1 None))) nil) (Assign (list (Name &_list:11 Store)) (Subscript (Name &_lists:11 Load) (Name &pos:11 Load) Load) None) (Assign (list (Tuple (list (Name &lo:11 Store) (Name &idx:11 Store)) Store)) (Tuple (list (UnaryOp USub (Constant i1 None)) (Call (Name g_len Load) (list (Name &_list:11 Load)) nil)) Load) None) (While (Compare (BinOp (Name &lo:11 Load) Add (Constant i1 None)) (list Lt) (list (Name &idx:11 Load))) (/seq (Assign (list (Name &mi:11 Store)) (BinOp (BinOp (Name &lo:11 Load) Add (Name &idx:11 Load)) RShift (Constant i1 None)) None) (If (Compare (Name &value:11 Load) (list LtE) (list (Subscript (Name &_list:11 Load) (Name &mi:11 Load) Load))) (/seq (Assign (list (Name &idx:11 Store)) (Name &mi:11 Load) None)) (/seq (Assign (list (Name &lo:11 Store)) (Name &mi:11 Load) None)))) nil) (Return (Tuple (list (Name &pos:11 Load) (Name &idx:11 Load)) Load))) nil None None) (FunctionDef &_loc_right:1 (arguments nil (list (arg &self:12 None None) (arg &value:12 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAxMTAsIDMyLCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgMzIsIDExMiwgOTcsIDEwNSwgMTE0LCAzMiwgMTE2LCAxMDQsIDk3LCAxMTYsIDMyLCA5OSwgMTExLCAxMTQsIDExNCwgMTAxLCAxMTUsIDExMiwgMTExLCAxMTAsIDEwMCwgMTE1LCAzMiwgMTE2LCAxMTEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA4LCA5NywgMTE1LCAxMTYsIDMyLCAxMTIsIDExMSwgMTE1LCAxMDUsIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExMSwgMTAyLCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd None)) (If (UnaryOp Not (Attribute (Name &self:12 Load) s__len Load)) (/seq (Return (Tuple (list (Constant i0 None) (Constant i0 None)) Load))) nil) (Assign (list (Name &_lists:12 Store)) (Attribute (Name &self:12 Load) s__lists Load) None) (Assign (list (Name &_mins:12 Store)) (Attribute (Name &self:12 Load) s__mins Load) None) (Assign (list (Tuple (list (Name &pos:12 Store) (Name &hi:12 Store)) Store)) (Tuple (list (Constant i0 None) (Call (Name g_len Load) (list (Name &_lists:12 Load)) nil)) Load) None) (While (Compare (BinOp (Name &pos:12 Load) Add (Constant i1 None)) (list Lt) (list (Name &hi:12 Load))) (/seq (Assign (list (Name &mi:12 Store)) (BinOp (BinOp (Name &pos:12 Load) Add (Name &hi:12 Load)) RShift (Constant i1 None)) None) (If (Compare (Name &value:12 Load) (list Lt) (list (Subscript (Name &_mins:12 Load) (Name &mi:12 Load) Load))) (/seq (Assign (list (Name &hi:12 Store)) (Name &mi:12 Load) None)) (/seq (Assign (list (Name &pos:12 Store)) (Name &mi:12 Load) None)))) nil) (Assign (list (Name &_list:12 Store)) (Subscript (Name &_lists:12 Load) (Name &pos:12 Load) Load) None) (Assign (list (Tuple (list (Name &lo:12 Store) (Name &idx:12 Store)) Store)) (Tuple (list (UnaryOp USub (Constant i1 None)) (Call (Name g_len Load) (list (Name &_list:12 Load)) nil)) Load) None) (While (Compare (BinOp (Name &lo:12 Load) Add (Constant i1 None)) (list Lt) (list (Name &idx:12 Load))) (/seq (Assign (list (Name &mi:12 Store)) (BinOp (BinOp (Name &lo:12 Load) Add (Name &idx:12 Load)) RShift (Constant i1 None)) None) (If (Compare (Name &value:12 Load) (list Lt) (list (Subscript (Name &_list:12 Load) (Name &mi:12 Load) Load))) (/seq (Assign (list (Name &idx:12 Store)) (Name &mi:12 Load) None)) (/seq (Assign (list (Name &lo:12 Store)) (Name &mi:12 Load) None)))) nil) (Return (Tuple (list (Name &pos:12 Load) (Name &idx:12 Load)) Load))) nil None None) (FunctionDef &add:1 (arguments nil (list (arg &self:13 None None) (arg &value:13 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY1LCAxMDAsIDEwMCwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDExNiwgMTExLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd None)) (Assign (list (Name &_load:13 Store)) (Attribute (Name &self:13 Load) s__load Load) None) (Assign (list (Name &_lists:13 Store)) (Attribute (Name &self:13 Load) s__lists Load) None) (Assign (list (Name &_mins:13 Store)) (Attribute (Name &self:13 Load) s__mins Load) None) (Assign (list (Name &_list_lens:13 Store)) (Attribute (Name &self:13 Load) s__list_lens Load) None) (AugAssign (Attribute (Name &self:13 Load) s__len Store) Add (Constant i1 None)) (If (Name &_lists:13 Load) (/seq (Assign (list (Tuple (list (Name &pos:13 Store) (Name &idx:13 Store)) Store)) (Call (Attribute (Name &self:13 Load) s__loc_right Load) (list (Name &value:13 Load)) nil) None) (Expr (Call (Attribute (Name &self:13 Load) s__fen_update Load) (list (Name &pos:13 Load) (Constant i1 None)) nil)) (Assign (list (Name &_list:13 Store)) (Subscript (Name &_lists:13 Load) (Name &pos:13 Load) Load) None) (Expr (Call (Attribute (Name &_list:13 Load) s_insert Load) (list (Name &idx:13 Load) (Name &value:13 Load)) nil)) (AugAssign (Subscript (Name &_list_lens:13 Load) (Name &pos:13 Load) Store) Add (Constant i1 None)) (Assign (list (Subscript (Name &_mins:13 Load) (Name &pos:13 Load) Store)) (Subscript (Name &_list:13 Load) (Constant i0 None) Load) None) (If (Compare (BinOp (Name &_load:13 Load) Add (Name &_load:13 Load)) (list Lt) (list (Call (Name g_len Load) (list (Name &_list:13 Load)) nil))) (/seq (Expr (Call (Attribute (Name &_lists:13 Load) s_insert Load) (list (BinOp (Name &pos:13 Load) Add (Constant i1 None)) (Subscript (Name &_list:13 Load) (Slice (Name &_load:13 Load) None None) Load)) nil)) (Expr (Call (Attribute (Name &_list_lens:13 Load) s_insert Load) (list (BinOp (Name &pos:13 Load) Add (Constant i1 None)) (BinOp (Call (Name g_len Load) (list (Name &_list:13 Load)) nil) Sub (Name &_load:13 Load))) nil)) (Expr (Call (Attribute (Name &_mins:13 Load) s_insert Load) (list (BinOp (Name &pos:13 Load) Add (Constant i1 None)) (Subscript (Name &_list:13 Load) (Name &_load:13 Load) Load)) nil)) (Assign (list (Subscript (Name &_list_lens:13 Load) (Name &pos:13 Load) Store)) (Name &_load:13 Load) None) (Delete (list (Subscript (Name &_list:13 Load) (Slice (Name &_load:13 Load) None None) Del))) (Assign (list (Attribute (Name &self:13 Load) s__rebuild Store)) (Constant True None) None)) nil)) (/seq (Expr (Call (Attribute (Name &_lists:13 Load) s_append Load) (list (List (list (Name &value:13 Load)) Load)) nil)) (Expr (Call (Attribute (Name &_mins:13 Load) s_append Load) (list (Name &value:13 Load)) nil)) (Expr (Call (Attribute (Name &_list_lens:13 Load) s_append Load) (list (Constant i1 None)) nil)) (Assign (list (Attribute (Name &self:13 Load) s__rebuild Store)) (Constant True None) None)))) nil None None) (FunctionDef &discard:1 (arguments nil (list (arg &self:14 None None) (arg &value:14 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDEwMiwgMTE0LCAxMTEsIDEwOSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDMyLCAxMDUsIDEwMiwgMzIsIDEwNSwgMTE2LCAzMiwgMTA1LCAxMTUsIDMyLCA5NywgMzIsIDEwOSwgMTAxLCAxMDksIDk4LCAxMDEsIDExNCwgNDZd None)) (Assign (list (Name &_lists:14 Store)) (Attribute (Name &self:14 Load) s__lists Load) None) (If (Name &_lists:14 Load) (/seq (Assign (list (Tuple (list (Name &pos:14 Store) (Name &idx:14 Store)) Store)) (Call (Attribute (Name &self:14 Load) s__loc_right Load) (list (Name &value:14 Load)) nil) None) (If (BoolOp And (list (Name &idx:14 Load) (Compare (Subscript (Subscript (Name &_lists:14 Load) (Name &pos:14 Load) Load) (BinOp (Name &idx:14 Load) Sub (Constant i1 None)) Load) (list Eq) (list (Name &value:14 Load))))) (/seq (Expr (Call (Attribute (Name &self:14 Load) s__delete Load) (list (Name &pos:14 Load) (BinOp (Name &idx:14 Load) Sub (Constant i1 None))) nil))) nil)) nil)) nil None None) (FunctionDef &remove:1 (arguments nil (list (arg &self:15 None None) (arg &value:15 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDEwMiwgMTE0LCAxMTEsIDEwOSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDU5LCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA5LCAxMTcsIDExNSwgMTE2LCAzMiwgOTgsIDEwMSwgMzIsIDk3LCAzMiwgMTA5LCAxMDEsIDEwOSwgOTgsIDEwMSwgMTE0LCA0Nl0= None)) (Assign (list (Name &_len:15 Store)) (Attribute (Name &self:15 Load) s__len Load) None) (Expr (Call (Attribute (Name &self:15 Load) s_discard Load) (list (Name &value:15 Load)) nil)) (If (Compare (Name &_len:15 Load) (list Eq) (list (Attribute (Name &self:15 Load) s__len Load))) (/seq (Raise (Call (Name g_ValueError Load) (list (Call (Attribute (Constant s-WzEyMywgNDgsIDMzLCAxMTQsIDEyNSwgMzIsIDExMCwgMTExLCAxMTYsIDMyLCAxMDUsIDExMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNl0= None) s_format Load) (list (Name &value:15 Load)) nil)) nil) None)) nil)) nil None None) (FunctionDef &pop:1 (arguments nil (list (arg &self:16 None None) (arg &index:16 None None)) None nil nil None (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Constant s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDk3LCAxMTAsIDEwMCwgMzIsIDExNCwgMTAxLCAxMTYsIDExNywgMTE0LCAxMTAsIDMyLCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCAzMiwgOTcsIDExNiwgMzIsIDk2LCAxMDUsIDExMCwgMTAwLCAxMDEsIDEyMCwgOTYsIDMyLCAxMDUsIDExMCwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ== None)) (Assign (list (Tuple (list (Name &pos:16 Store) (Name &idx:16 Store)) Store)) (Call (Attribute (Name &self:16 Load) s__fen_findkth Load) (list (IfExp (Compare (Name &index:16 Load) (list Lt) (list (Constant i0 None))) (BinOp (Attribute (Name &self:16 Load) s__len Load) Add (Name &index:16 Load)) (Name &index:16 Load))) nil) None) (Assign (list (Name &value:16 Store)) (Subscript (Subscript (Attribute (Name &self:16 Load) s__lists Load) (Name &pos:16 Load) Load) (Name &idx:16 Load) Load) None) (Expr (Call (Attribute (Name &self:16 Load) s__delete Load) (list (Name &pos:16 Load) (Name &idx:16 Load)) nil)) (Return (Name &value:16 Load))) nil None None) (FunctionDef &bisect_left:1 (arguments nil (list (arg &self:17 None None) (arg &value:17 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDIsIDEwNSwgMTE0LCAxMTUsIDExNiwgMzIsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCAzMiwgMTE2LCAxMTEsIDMyLCAxMDUsIDExMCwgMTE1LCAxMDEsIDExNCwgMTE2LCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd None)) (Assign (list (Tuple (list (Name &pos:17 Store) (Name &idx:17 Store)) Store)) (Call (Attribute (Name &self:17 Load) s__loc_left Load) (list (Name &value:17 Load)) nil) None) (Return (BinOp (Call (Attribute (Name &self:17 Load) s__fen_query Load) (list (Name &pos:17 Load)) nil) Add (Name &idx:17 Load)))) nil None None) (FunctionDef &bisect_right:1 (arguments nil (list (arg &self:18 None None) (arg &value:18 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDgsIDk3LCAxMTUsIDExNiwgMzIsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCAzMiwgMTE2LCAxMTEsIDMyLCAxMDUsIDExMCwgMTE1LCAxMDEsIDExNCwgMTE2LCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd None)) (Assign (list (Tuple (list (Name &pos:18 Store) (Name &idx:18 Store)) Store)) (Call (Attribute (Name &self:18 Load) s__loc_right Load) (list (Name &value:18 Load)) nil) None) (Return (BinOp (Call (Attribute (Name &self:18 Load) s__fen_query Load) (list (Name &pos:18 Load)) nil) Add (Name &idx:18 Load)))) nil None None) (FunctionDef &count:1 (arguments nil (list (arg &self:19 None None) (arg &value:19 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExMCwgMTE3LCAxMDksIDk4LCAxMDEsIDExNCwgMzIsIDExMSwgMTAyLCAzMiwgMTExLCA5OSwgOTksIDExNywgMTE0LCAxMTQsIDEwMSwgMTEwLCA5OSwgMTAxLCAxMTUsIDMyLCAxMTEsIDEwMiwgMzIsIDk2LCAxMTgsIDk3LCAxMDgsIDExNywgMTAxLCA5NiwgMzIsIDEwNSwgMTEwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ== None)) (Return (BinOp (Call (Attribute (Name &self:19 Load) s_bisect_right Load) (list (Name &value:19 Load)) nil) Sub (Call (Attribute (Name &self:19 Load) s_bisect_left Load) (list (Name &value:19 Load)) nil)))) nil None None) (FunctionDef &__len__:1 (arguments nil (list (arg &self:20 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDEwNSwgMTIyLCAxMDEsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCA0Nl0= None)) (Return (Attribute (Name &self:20 Load) s__len Load))) nil None None) (FunctionDef &__getitem__:1 (arguments nil (list (arg &self:21 None None) (arg &index:21 None None)) None nil nil None nil) (/seq (Expr (Constant s-Wzc2LCAxMTEsIDExMSwgMTA3LCAxMTcsIDExMiwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDMyLCA5NywgMTE2LCAzMiwgOTYsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCA5NiwgMzIsIDEwNSwgMTEwLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd None)) (Assign (list (Tuple (list (Name &pos:21 Store) (Name &idx:21 Store)) Store)) (Call (Attribute (Name &self:21 Load) s__fen_findkth Load) (list (IfExp (Compare (Name &index:21 Load) (list Lt) (list (Constant i0 None))) (BinOp (Attribute (Name &self:21 Load) s__len Load) Add (Name &index:21 Load)) (Name &index:21 Load))) nil) None) (Return (Subscript (Subscript (Attribute (Name &self:21 Load) s__lists Load) (Name &pos:21 Load) Load) (Name &idx:21 Load) Load))) nil None None) (FunctionDef &__delitem__:1 (arguments nil (list (arg &self:22 None None) (arg &index:22 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDMyLCA5NywgMTE2LCAzMiwgOTYsIDEwNSwgMTEwLCAxMDAsIDEwMSwgMTIwLCA5NiwgMzIsIDEwMiwgMTE0LCAxMTEsIDEwOSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ== None)) (Assign (list (Tuple (list (Name &pos:22 Store) (Name &idx:22 Store)) Store)) (Call (Attribute (Name &self:22 Load) s__fen_findkth Load) (list (IfExp (Compare (Name &index:22 Load) (list Lt) (list (Constant i0 None))) (BinOp (Attribute (Name &self:22 Load) s__len Load) Add (Name &index:22 Load)) (Name &index:22 Load))) nil) None) (Expr (Call (Attribute (Name &self:22 Load) s__delete Load) (list (Name &pos:22 Load) (Name &idx:22 Load)) nil))) nil None None) (FunctionDef &__contains__:1 (arguments nil (list (arg &self:23 None None) (arg &value:23 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTE0LCAxMTcsIDEwMSwgMzIsIDEwNSwgMTAyLCAzMiwgOTYsIDExOCwgOTcsIDEwOCwgMTE3LCAxMDEsIDk2LCAzMiwgMTA1LCAxMTUsIDMyLCA5NywgMTEwLCAzMiwgMTAxLCAxMDgsIDEwMSwgMTA5LCAxMDEsIDExMCwgMTE2LCAzMiwgMTExLCAxMDIsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgNDZd None)) (Assign (list (Name &_lists:23 Store)) (Attribute (Name &self:23 Load) s__lists Load) None) (If (Name &_lists:23 Load) (/seq (Assign (list (Tuple (list (Name &pos:23 Store) (Name &idx:23 Store)) Store)) (Call (Attribute (Name &self:23 Load) s__loc_left Load) (list (Name &value:23 Load)) nil) None) (Return (BoolOp And (list (Compare (Name &idx:23 Load) (list Lt) (list (Call (Name g_len Load) (list (Subscript (Name &_lists:23 Load) (Name &pos:23 Load) Load)) nil))) (Compare (Subscript (Subscript (Name &_lists:23 Load) (Name &pos:23 Load) Load) (Name &idx:23 Load) Load) (list Eq) (list (Name &value:23 Load))))))) nil) (Return (Constant False None))) nil None None) (FunctionDef &__iter__:1 (arguments nil (list (arg &self:24 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAxMTAsIDMyLCAxMDUsIDExNiwgMTAxLCAxMTQsIDk3LCAxMTYsIDExMSwgMTE0LCAzMiwgMTExLCAxMTgsIDEwMSwgMTE0LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQ2XQ== None)) (Return (GeneratorExp (Name &value:32 Load) (list (comprehension (Name &_list:38 Store) (Attribute (Name &self:24 Load) s__lists Load) nil i0) (comprehension (Name &value:32 Store) (Name &_list:38 Load) nil i0))))) nil None None) (FunctionDef &__reversed__:1 (arguments nil (list (arg &self:25 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDk3LCAzMiwgMTE0LCAxMDEsIDExOCwgMTAxLCAxMTQsIDExNSwgMTAxLCAzMiwgMTA1LCAxMTYsIDEwMSwgMTE0LCA5NywgMTE2LCAxMTEsIDExNCwgMzIsIDExMSwgMTE4LCAxMDEsIDExNCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCA0Nl0= None)) (Return (GeneratorExp (Name &value:33 Load) (list (comprehension (Name &_list:39 Store) (Call (Name g_reversed Load) (list (Attribute (Name &self:25 Load) s__lists Load)) nil) nil i0) (comprehension (Name &value:33 Store) (Call (Name g_reversed Load) (list (Name &_list:39 Load)) nil) nil i0))))) nil None None) (FunctionDef &__repr__:1 (arguments nil (list (arg &self:26 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNSwgMTE2LCAxMTQsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTQsIDEwMSwgMTEyLCAxMTQsIDEwMSwgMTE1LCAxMDEsIDExMCwgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTExLCAxMDIsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCA0Nl0= None)) (Return (Call (Attribute (Constant s-WzgzLCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgNzYsIDEwNSwgMTE1LCAxMTYsIDQwLCAxMjMsIDQ4LCAxMjUsIDQxXQ== None) s_format Load) (list (Call (Name g_list Load) (list (Name &self:26 Load)) nil)) nil))) nil None None)) nil) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:4 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &aa:4 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &a:4 Store)) (ListComp (Tuple (list (Name &v:34 Load) (BinOp (BinOp (Name &n:4 Load) Sub (Name &i:34 Load)) Sub (Constant i1 None))) Load) (list (comprehension (Tuple (list (Name &i:34 Store) (Name &v:34 Store)) Store) (Call (Name g_enumerate Load) (list (Name &aa:4 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &a:4 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &a:4 Load) s_reverse Load) nil nil)) (Assign (list (Name &q:4 Store)) (List nil Load) None) (For (Name &i:4 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &x:4 Store) (Name &y:4 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (Expr (Call (Attribute (Name &q:4 Load) s_append Load) (list (Tuple (list (Name &x:4 Load) (Name &y:4 Load) (Name &i:4 Load)) Load)) nil))) nil None) (Expr (Call (Attribute (Name &q:4 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:41 None None)) None nil nil None nil) (Subscript (Name &x:41 Load) (Constant i0 None) Load)))))) (Assign (list (Name &b:4 Store)) (Call (Name &SortedList:0 Load) nil nil) None) (Assign (list (Name &ans:4 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Call (Name g_len Load) (list (Name &q:4 Load)) nil)) None) (Assign (list (Name &j:4 Store)) (Constant i0 None) None) (For (Name &i:4 Store) (Name &q:4 Load) (/seq (While (Compare (Name &j:4 Load) (list Lt) (list (Subscript (Name &i:4 Load) (Constant i0 None) Load))) (/seq (Expr (Call (Attribute (Name &b:4 Load) s_add Load) (list (UnaryOp USub (BinOp (BinOp (Subscript (Subscript (Name &a:4 Load) (Name &j:4 Load) Load) (Constant i1 None) Load) Sub (Name &n:4 Load)) Add (Constant i1 None)))) nil)) (AugAssign (Name &j:4 Store) Add (Constant i1 None))) nil) (Assign (list (Subscript (Name &ans:4 Load) (Subscript (Name &i:4 Load) (Constant i2 None) Load) Store)) (Subscript (Name &aa:4 Load) (Subscript (Name &b:4 Load) (BinOp (Subscript (Name &i:4 Load) (Constant i1 None) Load) Sub (Constant i1 None)) Load) Load) None)) nil None) (For (Name &i:4 Store) (Name &ans:4 Load) (/seq (Expr (Call (Name g_print Load) (list (Name &i:4 Load)) nil))) nil None)) nil None None) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name g_IOBase Load)) nil (/seq (Assign (list (Name &newlines:2 Store)) (Constant i0 None) None) (FunctionDef &__init__:2 (arguments nil (list (arg &self:27 None None) (arg &file:27 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:27 Load) s__fd Store)) (Call (Attribute (Name &file:27 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:27 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None) (Assign (list (Attribute (Name &self:27 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:27 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:27 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:27 Load) s_write Store)) (IfExp (Attribute (Name &self:27 Load) s_writable Load) (Attribute (Attribute (Name &self:27 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:2 (arguments nil (list (arg &self:28 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:28 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:28 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:28 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:28 Load)) (/seq Break) nil) (Assign (list (Name &ptr:28 Store)) (Call (Attribute (Attribute (Name &self:28 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:28 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:28 Load) s_buffer Load) s_write Load) (list (Name &b:28 Load)) nil) (Call (Attribute (Attribute (Name &self:28 Load) s_buffer Load) s_seek Load) (list (Name &ptr:28 Load)) nil)) Load))) nil) (Assign (list (Attribute (Name &self:28 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:28 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:2 (arguments nil (list (arg &self:29 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:29 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:29 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:29 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:29 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:29 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:29 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:29 Load))) None) (Assign (list (Name &ptr:29 Store)) (Call (Attribute (Attribute (Name &self:29 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:29 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:29 Load) s_buffer Load) s_write Load) (list (Name &b:29 Load)) nil) (Call (Attribute (Attribute (Name &self:29 Load) s_buffer Load) s_seek Load) (list (Name &ptr:29 Load)) nil)) Load))) nil) (AugAssign (Attribute (Name &self:29 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:29 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:2 (arguments nil (list (arg &self:30 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:30 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name g_os Load) s_write Load) (list (Attribute (Name &self:30 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:30 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:30 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:30 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name g_IOBase Load)) nil (/seq (FunctionDef &__init__:3 (arguments nil (list (arg &self:31 None None) (arg &file:31 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:31 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:31 Load)) nil) None) (Assign (list (Attribute (Name &self:31 Load) s_flush Store)) (Attribute (Attribute (Name &self:31 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:31 Load) s_writable Store)) (Attribute (Attribute (Name &self:31 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:31 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:40 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:31 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:40 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:31 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:31 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:31 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:31 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil)) None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) nil)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (fn_3 &x:1) None) (Assign (list (Name &b:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i3 None))) nil) nil i0))) None) (For (Name &g:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &k:0 Store)) (Name &g:0 Load) None) (Assign (list (Name &cnt:0 Store)) (Constant i0 None) None) (Assign (list (Name &mm:0 Store)) (BinOp (Constant i10 None) Pow (Constant i10 None)) None) (Assign (list (Name &m:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &b:0 Load) (Name &g:0 Load) Load)) nil) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &mm:0 Store)) (Call (Name g_min Load) (list (Subscript (Name &b:0 Load) (Name &g:0 Load) Load)) nil) None)) nil) (If (Compare (Name &cnt:0 Load) (list Eq) (list (Name &k:0 Load))) (/seq (If (Compare (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (list Gt) (list (Name &mm:0 Load))) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (BinOp (Name &k:0 Load) Sub (Constant i1 None)) (UnaryOp USub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Subscript (Name &b:0 Load) (Name &g:0 Load) Load) (Name &j:0 Load) Load) (list Eq) (list (Name &mm:0 Load))) (/seq (Expr (Call (Attribute (Subscript (Name &b:0 Load) (Name &g:0 Load) Load) s_pop Load) (list (Name &j:0 Load)) nil)) Break) nil)) nil None) (Expr (Call (Attribute (Subscript (Name &b:0 Load) (Name &g:0 Load) Load) s_append Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil))) nil)) (/seq (Expr (Call (Attribute (Subscript (Name &b:0 Load) (Name &g:0 Load) Load) s_append Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil)) (AugAssign (Name &cnt:0 Store) Add (Constant i1 None)))) (Assign (list (Name &m:0 Store)) (Call (Name g_max Load) (list (Subscript (Name &b:0 Load) (Name &g:0 Load) Load)) nil) None)) nil None)) nil None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_3 &x:3) None) (AugAssign (Name &pos:0 Store) Sub (Constant i1 None)) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &b:0 Load) (Name &k:0 Load) Load) (Name &pos:0 Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (fn_2 &n:1) (Assign (list (Name &a:1 Store)) (Call (Name g_list Load) (list (Call (Name g_enumerate Load) (list (fn_1)) nil)) nil) None) (Expr (Call (Attribute (Name &a:1 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &item:2 None None)) None nil nil None nil) (Tuple (list (Subscript (Name &item:2 Load) (Constant i1 None) Load) (UnaryOp USub (Subscript (Name &item:2 Load) (Constant i0 None) Load))) Load)))))) (fn_2 &m:1) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Name &m:1 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:1 Store) (Name &pos:1 Store)) Store)) (fn_1) None) (Assign (list (Name &s:1 Store)) (Subscript (Name &a:1 Load) (Slice (UnaryOp USub (Name &k:1 Load)) None None) Load) None) (Assign (list (Name &s:1 Store)) (Call (Name g_sorted Load) (list (Name &s:1 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &s:1 Load) (BinOp (Name &pos:1 Load) Sub (Constant i1 None)) Load) (Constant i1 None) Load)) nil))) nil None)) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &aa:0 Store)) (fn_3 &i:1) None) (Assign (list (Name &dic:0 Store)) (Dict nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i0 None) (Name &n:0 Load)) nil) (/seq (If (Compare (Subscript (Name &aa:0 Load) (Name &i:0 Load) Load) (list NotIn) (list (Name &dic:0 Load))) (/seq (Assign (list (Subscript (Name &dic:0 Load) (Subscript (Name &aa:0 Load) (Name &i:0 Load) Load) Store)) (List (list (Name &i:0 Load)) Load) None)) (/seq (Expr (Call (Attribute (Subscript (Name &dic:0 Load) (Subscript (Name &aa:0 Load) (Name &i:0 Load) Load) Load) s_append Load) (list (Name &i:0 Load)) nil))))) nil None) (Assign (list (Name &ll:0 Store)) (Subscript (Call (Name g_sorted Load) (list (Name &dic:0 Load)) nil) (Slice None None (UnaryOp USub (Constant i1 None))) Load) None) (fn_2 &m:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Constant i0 None) (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i0 None) (Call (Name g_len Load) (list (Name &ll:0 Load)) nil)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Name &dic:0 Load) (Subscript (Name &ll:0 Load) (Name &i:0 Load) Load) Load)) nil) (list Lt) (list (Name &k:0 Load))) (/seq (AugAssign (Name &ans:0 Store) Add (Subscript (Name &dic:0 Load) (Subscript (Name &ll:0 Load) (Name &i:0 Load) Load) Load)) (AugAssign (Name &k:0 Store) Sub (Call (Name g_len Load) (list (Subscript (Name &dic:0 Load) (Subscript (Name &ll:0 Load) (Name &i:0 Load) Load) Load)) nil))) (/seq (AugAssign (Name &ans:0 Store) Add (Subscript (Subscript (Name &dic:0 Load) (Subscript (Name &ll:0 Load) (Name &i:0 Load) Load) Load) (Slice None (Name &k:0 Load) None) Load)) Break))) nil None) (Expr (Call (Name g_print Load) (list (Subscript (Name &aa:0 Load) (Subscript (Call (Name g_sorted Load) (list (Name &ans:0 Load)) nil) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &u:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) nil) None) (fn_2 &m:0) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &d:0 Store)) (List nil Load) None) (Assign (list (Name &p:0 Store)) (List nil Load) None) (Assign (list (Name &s:0 Store)) (Subscript (Name &u:0 Load) (Slice (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) None None) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Call (Name g_len Load) (list (Name &d:0 Load)) nil) (list Eq) (list (Name &k:0 Load))) (/seq Break) nil) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &s:0 Load)) nil)) nil) (/seq (If (Compare (Subscript (Name &s:0 Load) (Name &j:0 Load) Load) (list Eq) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))) (/seq (Assign (list (Subscript (Name &s:0 Load) (Name &j:0 Load) Store)) (UnaryOp USub (Constant i1 None)) None) (Expr (Call (Attribute (Name &d:0 Load) s_append Load) (list (Name &i:0 Load)) nil)) Break) nil)) nil None)) nil None) (Expr (Call (Attribute (Name &d:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Subscript (Name &a:0 Load) (Subscript (Name &d:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &ans:0 Load)) nil)) nil)) nil))) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &a1:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (UnaryOp USub (Name &x:1 Load)))))) None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &p:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &c:0 Store)) (Dict nil nil) None) (Assign (list (Name &c1:0 Store)) (Dict nil nil) None) (Assign (list (Name &s:0 Store)) (List nil Load) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Expr (Call (Attribute (Name &s:0 Load) s_append Load) (list (Dict nil nil)) nil))) nil None) (Assign (list (Name &pos:0 Store)) (Dict nil nil) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Subscript (Name &c:0 Load) (Subscript (Name &a1:0 Load) (Name &j:0 Load) Load) Store)) (Constant i0 None) None) (Assign (list (Subscript (Name &c1:0 Load) (Subscript (Name &a1:0 Load) (Name &j:0 Load) Load) Store)) (Constant i0 None) None) (Assign (list (Subscript (Subscript (Name &s:0 Load) (Constant i0 None) Load) (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) Store)) (Constant i0 None) None) (Assign (list (Subscript (Name &pos:0 Load) (Subscript (Name &a1:0 Load) (Name &j:0 Load) Load) Store)) (List nil Load) None)) nil None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (AugAssign (Subscript (Subscript (Name &s:0 Load) (Constant i0 None) Load) (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) Store) Add (Constant i1 None))) nil None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (For (Name &t:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Subscript (Subscript (Name &s:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Load) (Subscript (Name &a:0 Load) (Name &t:0 Load) Load) Store)) (Subscript (Subscript (Name &s:0 Load) (Name &j:0 Load) Load) (Subscript (Name &a:0 Load) (Name &t:0 Load) Load) Load) None)) nil None) (AugAssign (Subscript (Subscript (Name &s:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Load) (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) Store) Sub (Constant i1 None))) nil None) (Assign (list (Name &b:0 Store)) (List nil Load) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) (/seq (AugAssign (Subscript (Name &c:0 Load) (Subscript (Name &a1:0 Load) (Name &j:0 Load) Load) Store) Add (Constant i1 None))) nil None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load) (Name &n:0 Load)) nil) (/seq (AugAssign (Subscript (Name &c1:0 Load) (Subscript (Name &a1:0 Load) (Name &j:0 Load) Load) Store) Add (Constant i1 None))) nil None) (Assign (list (Name &ns:0 Store)) (List nil Load) None) (Assign (list (Name &us:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)) (UnaryOp USub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil) (/seq (If (BinOp (Subscript (Name &c1:0 Load) (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) Load) BitXor (Constant i0 None)) (/seq (AugAssign (Subscript (Name &c1:0 Load) (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) Store) Sub (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Subscript (Name &a:0 Load) (Name &j:0 Load) Load)) nil))))) nil None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (BinOp (Call (Name g_len Load) (list (Name &ans:0 Load)) nil) FloorDiv (Constant i2 None))) nil) (/seq (Assign (list (Tuple (list (Subscript (Name &ans:0 Load) (Name &j:0 Load) Store) (Subscript (Name &ans:0 Load) (BinOp (BinOp (Call (Name g_len Load) (list (Name &ans:0 Load)) nil) Sub (Constant i1 None)) Sub (Name &j:0 Load)) Store)) Store)) (Tuple (list (Subscript (Name &ans:0 Load) (BinOp (BinOp (Call (Name g_len Load) (list (Name &ans:0 Load)) nil) Sub (Constant i1 None)) Sub (Name &j:0 Load)) Load) (Subscript (Name &ans:0 Load) (Name &j:0 Load) Load)) Load) None)) nil None) (Expr (Call (Name g_print Load) (list (Subscript (Name &ans:0 Load) (BinOp (Name &p:0 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Import (list (alias &os:1 None))) (ImportFrom s_io (list (alias &BytesIO:1 None)) i0) (Assign (list (Name &input:1 Store)) (Attribute (Call (Name &BytesIO:1 Load) (list (Call (Attribute (Name &os:1 Load) s_read Load) (list (Constant i0 None) (Attribute (Call (Attribute (Name &os:1 Load) s_fstat Load) (list (Constant i0 None)) nil) s_st_size Load)) nil)) nil) s_readline Load) None) (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:1 Load) nil nil)) nil) None) (Assign (list (Name &a:1 Store)) (ListComp (Tuple (list (Call (Name g_int Load) (list (Name &el:2 Load)) nil) (UnaryOp USub (Name &ind:2 Load))) Load) (list (comprehension (Tuple (list (Name &ind:2 Store) (Name &el:2 Store)) Store) (Call (Name g_enumerate Load) (list (Call (Attribute (Call (Name &input:1 Load) nil nil) s_split Load) nil nil)) nil) nil i0))) None) (Expr (Call (Attribute (Name &a:1 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:1 Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &x:1 Store) (Name &y:1 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:1 Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &t:1 Store)) (Call (Name g_sorted Load) (list (Subscript (Name &a:1 Load) (Slice None (Name &x:1 Load) None) Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (UnaryOp USub (Subscript (Name &x:3 Load) (Constant i1 None) Load)))))) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &t:1 Load) (BinOp (Name &y:1 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
            "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (fn_3 &x:1) None) (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) (list (keyword s_reverse (Constant True None)))) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &d:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) (/seq (AugAssign (Subscript (Name &d:0 Load) (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) Store) Add (Constant i1 None))) nil None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (Assign (list (Name &num:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &x:0 Store) (Name &a:0 Load) (/seq (If (Subscript (Name &d:0 Load) (Name &x:0 Load) Load) (/seq (AugAssign (Subscript (Name &d:0 Load) (Name &x:0 Load) Store) Sub (Constant i1 None)) (AugAssign (Name &count:0 Store) Add (Constant i1 None))) nil) (If (Compare (Name &count:0 Load) (list Eq) (list (Name &pos:0 Load))) (/seq (Assign (list (Name &num:0 Store)) (Name &x:0 Load) None) Break) nil)) nil None) (Expr (Call (Name g_print Load) (list (Name &num:0 Load)) nil))) nil None)) nil)",
            "(Module (/seq (Import (list (alias g_os None))) (Import (list (alias g_sys None))) (Import (list (alias g_math None))) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (ImportFrom s_fractions (list (alias g_Fraction None)) i0) (ImportFrom s_collections (list (alias g_defaultdict None)) i0) (ImportFrom s_itertools (list (alias g_permutations None)) i0) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name g_IOBase Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:3 None None) (arg &file:3 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:3 Load) s__fd Store)) (Call (Attribute (Name &file:3 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:3 Load) s_buffer Store)) (Call (Name g_BytesIO Load) nil nil) None) (Assign (list (Attribute (Name &self:3 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:3 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:3 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:3 Load) s_write Store)) (IfExp (Attribute (Name &self:3 Load) s_writable Load) (Attribute (Attribute (Name &self:3 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:4 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:4 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:4 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:4 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:4 Load)) (/seq Break) nil) (Assign (list (Name &ptr:4 Store)) (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_write Load) (list (Name &b:4 Load)) nil) (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_seek Load) (list (Name &ptr:4 Load)) nil)) Load))) nil) (Assign (list (Attribute (Name &self:4 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:4 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:5 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:5 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:5 Store)) (Call (Attribute (Name g_os Load) s_read Load) (list (Attribute (Name &self:5 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Attribute (Name &self:5 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:5 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:5 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:5 Load))) None) (Assign (list (Name &ptr:5 Store)) (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load) (list (Name &b:5 Load)) nil) (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_seek Load) (list (Name &ptr:5 Load)) nil)) Load))) nil) (AugAssign (Attribute (Name &self:5 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:6 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:6 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name g_os Load) s_write Load) (list (Attribute (Name &self:6 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) nil)) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name g_IOBase Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:7 None None) (arg &file:7 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:7 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:7 Load)) nil) None) (Assign (list (Attribute (Name &self:7 Load) s_flush Store)) (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:7 Load) s_writable Store)) (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:7 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:8 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:8 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:7 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:7 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name g_sys Load) s_stdin Store) (Attribute (Name g_sys Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name g_sys Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil)) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &a1:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (Tuple (list (Subscript (Name &a1:0 Load) (Name &i:0 Load) Load) (BinOp (Name &n:0 Load) Sub (Name &i:0 Load))) Load)) nil))) nil None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_list Load) nil nil) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &c:0 Load) s_append Load) (list (BinOp (Name &n:0 Load) Sub (Subscript (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) (Constant i1 None) Load))) nil))) nil None) (Expr (Call (Attribute (Name &c:0 Load) s_sort Load) nil nil)) (Assign (list (Name &res:0 Store)) (Subscript (Name &a1:0 Load) (Subscript (Name &c:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) Load) None) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))) nil None)) nil)",
            "(Module (/seq (FunctionDef &test:0 (arguments nil (list (arg &a:1 None None) (arg &k:1 None None) (arg &pos:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &r:1 Store)) (Call (Name g_list Load) (list (Call (Name g_reversed Load) (list (Call (Name g_sorted Load) (list (Call (Attribute (Name &a:1 Load) s_copy Load) nil nil)) nil)) nil)) nil) None) (Assign (list (Name &countLast:1 Store)) (Subscript (Name &r:1 Load) (BinOp (Name &k:1 Load) Sub (Constant i1 None)) Load) None) (Assign (list (Name &s:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Name &k:1 Load) (Call (Name g_len Load) (list (Name &r:1 Load)) nil)) nil) (/seq (If (Compare (Subscript (Name &r:1 Load) (Name &i:1 Load) Load) (list Eq) (list (Name &countLast:1 Load))) (/seq (AugAssign (Name &s:1 Store) Add (Constant i1 None))) nil)) nil None) (Assign (list (Name &ans:1 Store)) (List nil Load) None) (Assign (list (Name &a:1 Store)) (Call (Name g_list Load) (list (Call (Name g_reversed Load) (list (Name &a:1 Load)) nil)) nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &a:1 Load)) nil)) nil) (/seq (If (BoolOp Or (list (Compare (Subscript (Name &a:1 Load) (Name &i:1 Load) Load) (list Gt) (list (Name &countLast:1 Load))) (BoolOp And (list (Compare (Subscript (Name &a:1 Load) (Name &i:1 Load) Load) (list Eq) (list (Name &countLast:1 Load))) (Compare (Name &s:1 Load) (list Eq) (list (Constant i0 None))))))) (/seq (Expr (Call (Attribute (Name &ans:1 Load) s_append Load) (list (Subscript (Name &a:1 Load) (Name &i:1 Load) Load)) nil))) (/seq (If (Compare (Subscript (Name &a:1 Load) (Name &i:1 Load) Load) (list Eq) (list (Name &countLast:1 Load))) (/seq (AugAssign (Name &s:1 Store) Sub (Constant i1 None))) nil)))) nil None) (Expr (Call (Name g_print Load) (list (Subscript (Call (Name g_list Load) (list (Call (Name g_reversed Load) (list (Name &ans:1 Load)) nil)) nil) (BinOp (Name &pos:1 Load) Sub (Constant i1 None)) Load)) nil))) nil None None) (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Expr (Call (Name &test:0 Load) (list (Name &a:0 Load) (Name &k:0 Load) (Name &pos:0 Load)) nil))) nil None)) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_* None)) i0) (ImportFrom s_copy (list (alias g_copy None)) i0) (FunctionDef &maximum:0 (arguments nil (list (arg &list_ticket:1 None None)) None nil nil None nil) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &list_ticket:1 Load)) nil)) nil) (/seq (If (Compare (Name &i:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &ma:1 Store)) (Subscript (Name &list_ticket:1 Load) (Name &i:1 Load) Load) None)) (/seq (Assign (list (Name &ma:1 Store)) (Call (Name g_max Load) (list (Name &ma:1 Load) (Subscript (Name &list_ticket:1 Load) (Name &i:1 Load) Load)) nil) None)))) nil None) (Assign (list (Name &ma:1 Store)) (Call (Attribute (Name &list_ticket:1 Load) s_index Load) (list (Name &ma:1 Load)) nil) None) (Expr (Call (Attribute (Name &list_ticket:1 Load) s_insert Load) (list (Name &ma:1 Load) (Constant i0 None)) nil)) (Expr (Call (Attribute (Name &list_ticket:1 Load) s_pop Load) (list (BinOp (Name &ma:1 Load) Add (Constant i1 None))) nil)) (Return (Name &ma:1 Load))) nil None None) (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Name &b:0 Store)) (Call (Name g_copy Load) (list (Name &a:0 Load)) nil) None) (Assign (list (Name &q:0 Store)) (List nil Load) None) (Assign (list (Name &array:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Subscript (Name &array:0 Load) (Constant i0 None) Load)) nil) (/seq (Expr (Call (Attribute (Name &q:0 Load) s_append Load) (list (Call (Name &maximum:0 Load) (list (Name &b:0 Load)) nil)) nil))) nil None) (Expr (Call (Attribute (Name &q:0 Load) s_sort Load) nil nil)) (Assign (list (Name &q1:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &q:0 Load)) nil)) nil) (/seq (Expr (Call (Attribute (Name &q1:0 Load) s_append Load) (list (Subscript (Name &a:0 Load) (Subscript (Name &q:0 Load) (Name &i:0 Load) Load) Load)) nil))) nil None) (Assign (list (Name &q1:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &q1:0 Load)) nil)) nil) None) (Expr (Call (Name g_print Load) (list (Subscript (Name &q1:0 Load) (BinOp (Subscript (Name &array:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &a:0) (Assign (list (Name &b:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &a:0 Load)) nil) (/seq (Assign (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Store)) (Tuple (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Name &i:0 Load))) Load) None)) nil None) (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil nil)) (fn_2 &k:0) (For (Name &q:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &l:0 Store)) (Subscript (Name &a:0 Load) (Constant i0 None) Load) None) (Assign (list (Name &p:0 Store)) (Subscript (Name &a:0 Load) (Constant i1 None) Load) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Call (Name g_sorted Load) (list (Subscript (Name &b:0 Load) (Slice (UnaryOp USub (Name &l:0 Load)) None None) Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (UnaryOp USub (Subscript (Name &x:1 Load) (Constant i1 None) Load)))))) (BinOp (Name &p:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (fn_3 &x:1) None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &kj:0 Store) (Name &posj:0 Store)) Store)) (fn_1) None) (Assign (list (Name &a_copy:0 Store)) (ListComp (Name &x:2 Load) (list (comprehension (Name &x:2 Store) (Name &a:0 Load) nil i0))) None) (For (Name &u:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Name &kj:0 Load))) nil) (/seq (Assign (list (Name &mid:0 Store)) (Constant i0 None) None) (For (Name &uuu:0 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &a_copy:0 Load)) nil)) nil) (/seq (If (Compare (Subscript (Name &a_copy:0 Load) (Name &uuu:0 Load) Load) (list LtE) (list (Subscript (Name &a_copy:0 Load) (Name &mid:0 Load) Load))) (/seq (Assign (list (Name &mid:0 Store)) (Name &uuu:0 Load) None)) nil)) nil None) (Expr (Call (Attribute (Name &a_copy:0 Load) s_pop Load) (list (Name &mid:0 Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Subscript (Name &a_copy:0 Load) (BinOp (Name &posj:0 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &m:0) (Assign (list (Name &q:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (fn_1) None) (Expr (Call (Attribute (Name &q:0 Load) s_append Load) (list (Tuple (list (Name &a:0 Load) (Name &b:0 Load)) Load)) nil))) nil None) (FunctionDef &f:0 (arguments nil (list (arg &arr:1 None None) (arg &m:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &vis:1 Store)) (BinOp (List (list (Constant False None)) Load) Mult (Call (Name g_len Load) (list (Name &arr:1 Load)) nil)) None) (Assign (list (Name &arr2:1 Store)) (List nil Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &arr:1 Load)) nil)) nil) (/seq (Expr (Call (Attribute (Name &arr2:1 Load) s_append Load) (list (List (list (Subscript (Name &arr:1 Load) (Name &i:1 Load) Load) (BinOp (Name &n:0 Load) Sub (Name &i:1 Load))) Load)) nil))) nil None) (Expr (Call (Attribute (Name &arr2:1 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (Assign (list (Name &arr2:1 Store)) (Subscript (Name &arr2:1 Load) (Slice None (Name &m:1 Load) None) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &arr2:1 Load)) nil)) nil) (/seq (Assign (list (Subscript (Subscript (Name &arr2:1 Load) (Name &i:1 Load) Load) (Constant i1 None) Store)) (BinOp (Name &n:0 Load) Sub (Subscript (Subscript (Name &arr2:1 Load) (Name &i:1 Load) Load) (Constant i1 None) Load)) None)) nil None) (Expr (Call (Attribute (Name &arr2:1 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Subscript (Name &x:2 Load) (Constant i1 None) Load)))))) (Assign (list (Name &res:1 Store)) (List nil Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &arr2:1 Load)) nil)) nil) (/seq (Expr (Call (Attribute (Name &res:1 Load) s_append Load) (list (Subscript (Subscript (Name &arr2:1 Load) (Name &i:1 Load) Load) (Constant i0 None) Load)) nil))) nil None) (Return (Name &res:1 Load))) nil None None) (For (Name &i:0 Store) (Name &q:0 Load) (/seq (Assign (list (Name &x:0 Store)) (Call (Name &f:0 Load) (list (Name &arr:0 Load) (Subscript (Name &i:0 Load) (Constant i0 None) Load)) nil) None) (Expr (Call (Name g_print Load) (list (Subscript (Name &x:0 Load) (BinOp (Subscript (Name &i:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load) None) (Assign (list (Name &mx:0 Store)) (BinOp (BinOp (Constant i2 None) Mult (BinOp (Constant i10 None) Pow (Constant i5 None))) Add (Constant i1 None)) None) (Assign (list (Name &bit:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &mx:0 Load)) None) (FunctionDef &add:0 (arguments nil (list (arg &idx:1 None None)) None nil nil None nil) (/seq (AugAssign (Name &idx:1 Store) Add (Constant i1 None)) (While (Compare (Name &idx:1 Load) (list Lt) (list (Name &mx:0 Load))) (/seq (AugAssign (Subscript (Name &bit:0 Load) (Name &idx:1 Load) Store) Add (Constant i1 None)) (AugAssign (Name &idx:1 Store) Add (BinOp (Name &idx:1 Load) BitAnd (UnaryOp USub (Name &idx:1 Load))))) nil)) nil None None) (FunctionDef &lower_bound:0 (arguments nil (list (arg &val:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &pos:2 Store)) (Constant i0 None) None) (Assign (list (Name &tot:2 Store)) (Constant i0 None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (Constant i20 None) (UnaryOp USub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (Name &pos:2 Load) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load))) (list Lt) (list (Name &mx:0 Load))) (Compare (BinOp (Name &tot:2 Load) Add (Subscript (Name &bit:0 Load) (BinOp (Name &pos:2 Load) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load))) Load)) (list Lt) (list (Name &val:2 Load))))) (/seq (AugAssign (Name &tot:2 Store) Add (Subscript (Name &bit:0 Load) (BinOp (Name &pos:2 Load) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load))) Load)) (AugAssign (Name &pos:2 Store) Add (BinOp (Constant i1 None) LShift (Name &i:2 Load)))) nil)) nil None) (Return (Name &pos:2 Load))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &new_el:0 Store)) (Call (Name g_sorted Load) (list (Call (Name g_list Load) (list (Call (Name g_range Load) (list (Name &n:0 Load)) nil)) nil)) (list (keyword s_key (Lambda (arguments nil (list (arg &i:3 None None)) None nil nil None nil) (Tuple (list (UnaryOp USub (Subscript (Name &a:0 Load) (Name &i:3 Load) Load)) (Name &i:3 Load)) Load))))) None) (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &queries:0 Store)) (List nil Load) None) (Assign (list (Name &answers:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &m:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &p:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (Expr (Call (Attribute (Name &queries:0 Load) s_append Load) (list (List (list (Name &k:0 Load) (Name &p:0 Load) (Name &i:0 Load)) Load)) nil))) nil None) (Expr (Call (Attribute (Name &queries:0 Load) s_sort Load) nil nil)) (Assign (list (Name &curr_len:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store) (Name &query_idx:0 Store)) Store)) (Subscript (Name &queries:0 Load) (Name &i:0 Load) Load) None) (While (Compare (Name &curr_len:0 Load) (list Lt) (list (Name &k:0 Load))) (/seq (Expr (Call (Name &add:0 Load) (list (Subscript (Name &new_el:0 Load) (Name &curr_len:0 Load) Load)) nil)) (AugAssign (Name &curr_len:0 Store) Add (Constant i1 None))) nil) (Assign (list (Subscript (Name &answers:0 Load) (Name &query_idx:0 Load) Store)) (Subscript (Name &a:0 Load) (Call (Name &lower_bound:0 Load) (list (Name &pos:0 Load)) nil) Load) None)) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &answers:0 Load) Load)) nil))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (fn_2 &n:1) (Assign (list (Name &al:1 Store)) (ListComp (List (list (Call (Name g_int Load) (list (Name &x:3 Load)) nil) (BinOp (Name &n:1 Load) Sub (Name &i:3 Load))) Load) (list (comprehension (Tuple (list (Name &i:3 Store) (Name &x:3 Store)) Store) (Call (Name g_enumerate Load) (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) nil i0))) None) (Expr (Call (Attribute (Name &al:1 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &al:1 Load) s_reverse Load) nil nil)) (Assign (list (Name &arr:1 Store)) (ListComp (ListComp (List nil Load) (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (Name &n:1 Load)) nil) nil i0))) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:1 Load)) nil) nil i0))) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:1 Load) Add (Constant i1 None))) nil) (/seq (For (Name &j:1 Store) (Call (Name g_range Load) (list (BinOp (Name &i:1 Load) Sub (Constant i1 None)) (Name &n:1 Load)) nil) (/seq (Assign (list (Subscript (Subscript (Name &arr:1 Load) (Name &j:1 Load) Load) (BinOp (Name &n:1 Load) Sub (Subscript (Subscript (Name &al:1 Load) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) Load) (Constant i1 None) Load)) Store)) (Subscript (Subscript (Name &al:1 Load) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load) None)) nil None)) nil None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:1 Load)) nil) (/seq (Assign (list (Subscript (Name &arr:1 Load) (Name &i:1 Load) Store)) (Call (Name g_list Load) (list (Call (Name g_filter Load) (list (Constant None None) (Subscript (Name &arr:1 Load) (Name &i:1 Load) Load)) nil)) nil) None)) nil None) (fn_2 &q:1) (For (Name &_:1 Store) (Call (Name g_range Load) (list (Name &q:1 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:1 Store) (Name &ind:1 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &arr:1 Load) (BinOp (Name &k:1 Load) Sub (Constant i1 None)) Load) (BinOp (Name &ind:1 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &b:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &a:0 Store)) (ListComp (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i2 None)) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Store)) (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) None) (Assign (list (Subscript (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Store)) (Name &i:0 Load) None)) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) (Constant i0 None) Load) (list Gt) (list (Subscript (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Load) (Constant i0 None) Load))) (/seq (Assign (list (Tuple (list (Subscript (Name &a:0 Load) (Name &j:0 Load) Store) (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Store)) Store)) (Tuple (list (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Load) (Subscript (Name &a:0 Load) (Name &j:0 Load) Load)) Load) None)) (/seq (If (BoolOp And (list (Compare (Subscript (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) (Constant i0 None) Load) (list Eq) (list (Subscript (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Load) (Constant i0 None) Load))) (Compare (Subscript (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) (Constant i1 None) Load) (list Lt) (list (Subscript (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Load) (Constant i1 None) Load))))) (/seq (Assign (list (Tuple (list (Subscript (Name &a:0 Load) (Name &j:0 Load) Store) (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Store)) Store)) (Tuple (list (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) Load) (Subscript (Name &a:0 Load) (Name &j:0 Load) Load)) Load) None)) nil)))) nil None)) nil None) (fn_2 &m:0) (For (Name &k:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &ind:0 Store)) Store)) (fn_1) None) (Assign (list (Name &ans:0 Store)) (ListComp (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i2 None)) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) (/seq (Assign (list (Subscript (Subscript (Name &ans:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Store)) (Subscript (Subscript (Name &a:0 Load) (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None)) Load) (Constant i1 None) Load) None) (Assign (list (Subscript (Subscript (Name &ans:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Store)) (Subscript (Subscript (Name &a:0 Load) (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None)) Load) (Constant i0 None) Load) None)) nil None) (Expr (Call (Attribute (Name &ans:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &ans:0 Load) (BinOp (Name &ind:0 Load) Sub (Constant i1 None)) Load) (Constant i1 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &save:0 Store)) (List nil Load) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil) (/seq (Expr (Call (Attribute (Name &save:0 Load) s_append Load) (list (Subscript (Name &a:0 Load) (Name &j:0 Load) Load)) nil))) nil None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (For (Name &x:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) (/seq (Assign (list (Name &maximum:0 Store)) (Constant i0 None) None) (Assign (list (Name &pr:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &save:0 Load)) nil)) nil) (/seq (If (Compare (Subscript (Name &save:0 Load) (Name &j:0 Load) Load) (list Gt) (list (Name &maximum:0 Load))) (/seq (Assign (list (Name &maximum:0 Store)) (Subscript (Name &save:0 Load) (Name &j:0 Load) Load) None) (Assign (list (Name &pr:0 Store)) (Name &j:0 Load) None)) nil)) nil None) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &maximum:0 Load)) nil)) (Expr (Call (Attribute (Name &save:0 Load) s_pop Load) (list (Name &pr:0 Load)) nil))) nil None) (Expr (Call (Attribute (Name &ans:0 Load) s_sort Load) nil nil)) (Assign (list (Name &answer:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (list In) (list (Name &ans:0 Load))) (/seq (Expr (Call (Attribute (Name &answer:0 Load) s_append Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil)) (Expr (Call (Attribute (Name &ans:0 Load) s_pop Load) (list (Call (Attribute (Name &ans:0 Load) s_index Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil)) nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Subscript (Name &answer:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &s:0 Store)) (Call (Name g_sorted Load) (list (ListComp (List (list (Name &v:1 Load) (UnaryOp USub (Name &i:1 Load))) Load) (list (comprehension (Tuple (list (Name &i:1 Store) (Name &v:1 Store)) Store) (Call (Name g_enumerate Load) (list (fn_1)) nil) nil i0)))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &i:0 Store)) Store)) (fn_1) None) (Assign (list (Name &ans:0 Store)) (Call (Name g_sorted Load) (list (Subscript (Name &s:0 Load) (Slice (UnaryOp USub (Name &k:0 Load)) None None) Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (UnaryOp USub (Subscript (Name &x:2 Load) (Constant i1 None) Load)))))) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &ans:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None) (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &b:0 Store)) (BinOp (Name &a:0 Load) Add (List nil Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) (/seq (Assign (list (Subscript (Name &d:0 Load) (Call (Attribute (Name &b:0 Load) s_index Load) (list (Call (Name g_max Load) (list (Name &b:0 Load)) nil)) nil) Store)) (Call (Name g_max Load) (list (Name &b:0 Load)) nil) None) (Assign (list (Subscript (Name &b:0 Load) (Call (Attribute (Name &b:0 Load) s_index Load) (list (Call (Name g_max Load) (list (Name &b:0 Load)) nil)) nil) Store)) (Constant i0 None) None)) nil None) (Expr (Call (Name g_print Load) (list (Subscript (Name &d:0 Load) (Subscript (Call (Name g_sorted Load) (list (Call (Attribute (Name &d:0 Load) s_keys Load) nil nil)) nil) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (FunctionDef &mergesort:0 (arguments nil (list (arg &l:1 None None) (arg &r:1 None None) (arg &arr:1 None None) (arg &pos:1 None None)) None nil nil None nil) (/seq (If (Compare (BinOp (Name &r:1 Load) Sub (Name &l:1 Load)) (list Eq) (list (Constant i1 None))) (/seq (Return (Tuple (list (Name &arr:1 Load) (Name &pos:1 Load)) Load))) nil) (Assign (list (Name &m:1 Store)) (BinOp (BinOp (Name &l:1 Load) Add (Name &r:1 Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Tuple (list (Name &arr:1 Store) (Name &pos:1 Store)) Store)) (Call (Name &mergesort:0 Load) (list (Name &l:1 Load) (Name &m:1 Load) (Name &arr:1 Load) (Name &pos:1 Load)) nil) None) (Assign (list (Tuple (list (Name &arr:1 Store) (Name &pos:1 Store)) Store)) (Call (Name &mergesort:0 Load) (list (Name &m:1 Load) (Name &r:1 Load) (Name &arr:1 Load) (Name &pos:1 Load)) nil) None) (Assign (list (Name &c:1 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (Name &r:1 Load)) nil) nil i0))) None) (Assign (list (Name &d:1 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (Name &r:1 Load)) nil) nil i0))) None) (Assign (list (Name &poi_a:1 Store)) (Name &l:1 Load) None) (Assign (list (Name &poi_b:1 Store)) (Name &m:1 Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Name &l:1 Load) (Name &r:1 Load)) nil) (/seq (If (Compare (Name &poi_a:1 Load) (list Eq) (list (Name &m:1 Load))) (/seq (Assign (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &arr:1 Load) (Name &poi_b:1 Load) Load) None) (Assign (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &pos:1 Load) (Name &poi_b:1 Load) Load) None) (AugAssign (Name &poi_b:1 Store) Add (Constant i1 None))) (/seq (If (Compare (Name &poi_b:1 Load) (list Eq) (list (Name &r:1 Load))) (/seq (Assign (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &arr:1 Load) (Name &poi_a:1 Load) Load) None) (Assign (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &pos:1 Load) (Name &poi_a:1 Load) Load) None) (AugAssign (Name &poi_a:1 Store) Add (Constant i1 None))) (/seq (If (Compare (Subscript (Name &a:0 Load) (Name &poi_a:1 Load) Load) (list Gt) (list (Subscript (Name &arr:1 Load) (Name &poi_b:1 Load) Load))) (/seq (Assign (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &arr:1 Load) (Name &poi_a:1 Load) Load) None) (Assign (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &pos:1 Load) (Name &poi_a:1 Load) Load) None) (AugAssign (Name &poi_a:1 Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &c:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &arr:1 Load) (Name &poi_b:1 Load) Load) None) (Assign (list (Subscript (Name &d:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &pos:1 Load) (Name &poi_b:1 Load) Load) None) (AugAssign (Name &poi_b:1 Store) Add (Constant i1 None))))))))) nil None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Name &l:1 Load) (Name &r:1 Load)) nil) (/seq (Assign (list (Subscript (Name &arr:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &c:1 Load) (Name &i:1 Load) Load) None) (Assign (list (Subscript (Name &pos:1 Load) (Name &i:1 Load) Store)) (Subscript (Name &d:1 Load) (Name &i:1 Load) Load) None)) nil None) (Return (Tuple (list (Name &arr:1 Load) (Name &pos:1 Load)) Load))) nil None None) (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &p:0 Store)) (ListComp (Name &i:2 Load) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Assign (list (Name &temp:0 Store)) (Subscript (Name &a:0 Load) (Slice None None None) Load) None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &p:0 Store)) Store)) (Call (Name &mergesort:0 Load) (list (Constant i0 None) (Name &n:0 Load) (Name &a:0 Load) (Name &p:0 Load)) nil) None) (For (Name &m:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &j:0 Store)) (Name &k:0 Load) None) (While (BoolOp And (list (Compare (Name &j:0 Load) (list Lt) (list (Name &n:0 Load))) (Compare (Subscript (Name &a:0 Load) (BinOp (Name &j:0 Load) Sub (Constant i1 None)) Load) (list Eq) (list (Subscript (Name &a:0 Load) (Name &j:0 Load) Load))))) (/seq (AugAssign (Name &j:0 Store) Add (Constant i1 None))) nil) (Assign (list (Name &i:0 Store)) (BinOp (Name &k:0 Load) Sub (Constant i1 None)) None) (Assign (list (Name &l:0 Store)) (Constant i1 None) None) (While (BoolOp And (list (Compare (Name &i:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Subscript (Name &a:0 Load) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) Load) (list Eq) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))))) (/seq (AugAssign (Name &i:0 Store) Sub (Constant i1 None)) (AugAssign (Name &l:0 Store) Add (Constant i1 None))) nil) (Assign (list (Name &m:0 Store)) (Call (Name g_sorted Load) (list (Subscript (Name &p:0 Load) (Slice (Name &i:0 Load) (Name &j:0 Load) None) Load)) nil) None) (Assign (list (Name &res:0 Store)) (Call (Name g_sorted Load) (list (BinOp (Subscript (Name &m:0 Load) (Slice None (Name &l:0 Load) None) Load) Add (Subscript (Name &p:0 Load) (Slice None (Name &i:0 Load) None) Load))) nil) None) (Expr (Call (Name g_print Load) (list (Subscript (Name &temp:0 Load) (Subscript (Name &res:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (fn_3 &x:1) None) (Assign (list (Name &z:0 Store)) (Subscript (Name &a:0 Load) (Slice None None None) Load) None) (Expr (Call (Attribute (Name &z:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (Assign (list (Name &an:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (Assign (list (Subscript (Name &an:0 Load) (Constant i0 None) Store)) (Subscript (Name &a:0 Load) (Slice None None None) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (BinOp (Call (Name g_len Load) (list (Name &a:0 Load)) nil) Sub (Constant i1 None)) (UnaryOp USub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) (list Eq) (list (Subscript (Name &z:0 Load) (UnaryOp USub (Constant i1 None)) Load))) (/seq (Delete (list (Subscript (Name &a:0 Load) (Name &j:0 Load) Del))) (Expr (Call (Attribute (Name &z:0 Load) s_pop Load) nil nil)) Break) nil)) nil None) (Assign (list (Subscript (Name &an:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store)) (Subscript (Name &a:0 Load) (Slice None None None) Load) None)) nil None) (Assign (list (Name &an:0 Store)) (Subscript (Name &an:0 Load) (Slice None None (UnaryOp USub (Constant i1 None))) Load) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &an:0 Load) (Name &x:0 Load) Load) (BinOp (Name &y:0 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (fn_3 &i:1) None) (Assign (list (Name &copy1:0 Store)) (Subscript (Name &a:0 Load) (Slice None None None) Load) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &ans:0 Store)) (List (list (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Name &copy:0 Store)) (Subscript (Name &a:0 Load) (Slice (UnaryOp USub (Name &k:0 Load)) None None) Load) None) (For (Name &i:0 Store) (Name &copy1:0 Load) (/seq (If (Compare (Name &i:0 Load) (list In) (list (Name &copy:0 Load))) (/seq (Expr (Call (Attribute (Name &copy:0 Load) s_pop Load) (list (Call (Attribute (Name &copy:0 Load) s_index Load) (list (Name &i:0 Load)) nil)) nil)) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Name &i:0 Load)) nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Subscript (Name &ans:0 Load) (Name &pos:0 Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (fn_3 &i:1) None) (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) nil) None) (Expr (Call (Attribute (Name &b:0 Load) s_reverse Load) nil nil)) (fn_2 &m:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &x:0 Store)) (Constant i0 None) None) (Assign (list (Name &j:0 Store)) (Constant i0 None) None) (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Subscript (Name &b:0 Load) (Slice None (Name &k:0 Load) None) Load) (/seq (Assign (list (Subscript (Name &d:0 Load) (Name &i:0 Load) Store)) (BinOp (Call (Attribute (Name &d:0 Load) s_get Load) (list (Name &i:0 Load) (Constant i0 None)) nil) Add (Constant i1 None)) None)) nil None) (While (Compare (Name &x:0 Load) (list NotEq) (list (Name &pos:0 Load))) (/seq (Assign (list (Name &u:0 Store)) (Subscript (Name &a:0 Load) (Name &j:0 Load) Load) None) (If (Compare (Name &u:0 Load) (list In) (list (Name &d:0 Load))) (/seq (AugAssign (Subscript (Name &d:0 Load) (Name &u:0 Load) Store) Sub (Constant i1 None)) (AugAssign (Name &x:0 Store) Add (Constant i1 None)) (If (Compare (Subscript (Name &d:0 Load) (Name &u:0 Load) Load) (list Eq) (list (Constant i0 None))) (/seq (Delete (list (Subscript (Name &d:0 Load) (Name &u:0 Load) Del)))) nil)) nil) (AugAssign (Name &j:0 Store) Add (Constant i1 None)) (Assign (list (Name &ans:0 Store)) (Name &u:0 Load) None)) nil) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &d:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &d:0 Load) s_append Load) (list (List (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Name &i:0 Load))) Load)) nil))) nil None) (Expr (Call (Attribute (Name &d:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (Assign (list (Name &e:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &e:0 Load) s_append Load) (list (List (list (UnaryOp USub (Subscript (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)) (Subscript (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)) Load)) nil))) nil None) (fn_2 &m:0) (Assign (list (Name &f:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &b:0 Store) (Name &c:0 Store)) Store)) (fn_1) None) (Assign (list (Name &f:0 Store)) (Subscript (Name &e:0 Load) (Slice None (Name &b:0 Load) None) Load) None) (Expr (Call (Attribute (Name &f:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &f:0 Load) (BinOp (Name &c:0 Load) Sub (Constant i1 None)) Load) (Constant i1 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Import (list (alias &copy:0 None))) (Assign (list (Name &mins:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Name &f:0 Store)) (Call (Attribute (Name &a:0 Load) s_copy Load) nil nil) None) (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (For (Name &l:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Name &k:0 Load))) nil) (/seq (If (Compare (Subscript (Name &mins:0 Load) (Name &l:0 Load) Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Name &mins:0 Load) (Name &l:0 Load) Store)) (Call (Name g_min Load) (list (Name &f:0 Load)) nil) None)) nil) (For (Name &j:0 Store) (Call (Name g_range Load) (list (BinOp (Call (Name g_len Load) (list (Name &f:0 Load)) nil) Sub (Constant i1 None)) (UnaryOp USub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Name &f:0 Load) (Name &j:0 Load) Load) (list Eq) (list (Subscript (Name &mins:0 Load) (Name &l:0 Load) Load))) (/seq (Expr (Call (Attribute (Name &f:0 Load) s_pop Load) (list (Name &j:0 Load)) nil)) Break) nil)) nil None)) nil None) (Expr (Call (Name g_print Load) (list (Subscript (Name &f:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &b:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &a:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (List (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) (BinOp (Name &n:0 Load) Sub (Name &i:0 Load))) Load)) nil))) nil None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &a:0 Load) s_reverse Load) nil nil)) (Assign (list (Name &p:0 Store)) (List nil Load) None) (Assign (list (Name &t:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &t:0 Load) s_append Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil)) (Assign (list (Name &d:0 Store)) (Call (Attribute (Name &t:0 Load) s_copy Load) nil nil) None) (Expr (Call (Attribute (Name &d:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (UnaryOp USub (Subscript (Name &x:1 Load) (Constant i1 None) Load))))))) (Expr (Call (Attribute (Name &p:0 Load) s_append Load) (list (Name &d:0 Load)) nil))) nil None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &d:0 Store)) (Call (Attribute (Subscript (Name &p:0 Load) (BinOp (Name &k:0 Load) Sub (Constant i1 None)) Load) s_copy Load) nil nil) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &d:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (fn_3 &x:1) None) (Assign (list (Name &a_sorted:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) (list (keyword s_reverse (Constant True None)))) None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_3 &x:2) None) (Assign (list (Name &vals:0 Store)) (Subscript (Name &a_sorted:0 Load) (Slice (Constant i0 None) (Name &k:0 Load) None) Load) None) (Assign (list (Name &result:0 Store)) (List nil Load) None) (For (Name &val:0 Store) (Name &a:0 Load) (/seq (If (Compare (Name &val:0 Load) (list In) (list (Name &vals:0 Load))) (/seq (Expr (Call (Attribute (Name &result:0 Load) s_append Load) (list (Name &val:0 Load)) nil)) (Expr (Call (Attribute (Name &vals:0 Load) s_remove Load) (list (Name &val:0 Load)) nil))) nil) (If (Compare (Call (Name g_len Load) (list (Name &vals:0 Load)) nil) (list Eq) (list (Constant i0 None))) (/seq Break) nil)) nil None) (Expr (Call (Name g_print Load) (list (Subscript (Name &result:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Store)) (Tuple (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Name &i:0 Load))) Load) None)) nil None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (fn_2 &m:0) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &k:0 Store)) (Subscript (Name &t:0 Load) (Constant i0 None) Load) None) (Assign (list (Name &p:0 Store)) (Subscript (Name &t:0 Load) (Constant i1 None) Load) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Call (Name g_sorted Load) (list (Subscript (Name &a:0 Load) (Slice (UnaryOp USub (Name &k:0 Load)) None None) Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (UnaryOp USub (Subscript (Name &x:1 Load) (Constant i1 None) Load)))))) (BinOp (Name &p:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &l:0 Store)) (fn_3 &j:1) None) (fn_2 &m:0) (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) (list In) (list (Name &d:0 Load))) (/seq (Expr (Call (Attribute (Subscript (Name &d:0 Load) (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) Load) s_append Load) (list (Name &i:0 Load)) nil))) (/seq (Assign (list (Subscript (Name &d:0 Load) (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) Store)) (List (list (Name &i:0 Load)) Load) None)))) nil None) (Assign (list (Name &d:0 Store)) (Call (Name g_sorted Load) (list (Call (Attribute (Name &d:0 Load) s_items Load) nil nil)) (list (keyword s_reverse (Constant True None)))) None) (For (Name &que:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_3 &j:2) None) (Assign (list (Name &min_:0 Store)) (List nil Load) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &j:0 Store)) (Constant i0 None) None) (While (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) (Expr (Call (Attribute (Name &min_:0 Load) s_append Load) (list (Subscript (Subscript (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load) (Name &j:0 Load) Load)) nil)) (AugAssign (Name &j:0 Store) Add (Constant i1 None)) (If (Compare (Name &j:0 Load) (list Eq) (list (Call (Name g_len Load) (list (Subscript (Subscript (Name &d:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)) nil))) (/seq (AugAssign (Name &i:0 Store) Add (Constant i1 None)) (Assign (list (Name &j:0 Store)) (Constant i0 None) None)) nil)) nil) (Expr (Call (Attribute (Name &min_:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Subscript (Name &l:0 Load) (Subscript (Name &min_:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &s_a:0 Store)) (Call (Name g_sorted Load) (list (Name &a:0 Load)) nil) None) (fn_2 &m:0) (Assign (list (Name &req:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &req:0 Load) s_append Load) (list (Call (Name g_list Load) (list (fn_1)) nil)) nil))) nil None) (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None) (For (Name &r:0 Store) (Name &req:0 Load) (/seq (If (Compare (Subscript (Name &r:0 Load) (Constant i0 None) Load) (list In) (list (Call (Attribute (Name &d:0 Load) s_keys Load) nil nil))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &d:0 Load) (Subscript (Name &r:0 Load) (Constant i0 None) Load) Load) (BinOp (Subscript (Name &r:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) Load)) nil))) (/seq (Assign (list (Name &del_indx:0 Store)) (List nil Load) None) (For (Name &e:0 Store) (Subscript (Name &s_a:0 Load) (Slice None (BinOp (Name &n:0 Load) Sub (Subscript (Name &r:0 Load) (Constant i0 None) Load)) None) Load) (/seq (For (Name &i:0 Store) (Call (Name g_reversed Load) (list (Call (Name g_range Load) (list (Name &n:0 Load)) nil)) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Name &e:0 Load))) (/seq (If (Compare (Name &i:0 Load) (list NotIn) (list (Name &del_indx:0 Load))) (/seq (Expr (Call (Attribute (Name &del_indx:0 Load) s_append Load) (list (Name &i:0 Load)) nil)) Break) nil)) nil)) nil None)) nil None) (Assign (list (Name &new_a:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Name &i:0 Load) (list NotIn) (list (Name &del_indx:0 Load))) (/seq (Expr (Call (Attribute (Name &new_a:0 Load) s_append Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil))) nil)) nil None) (Assign (list (Subscript (Name &d:0 Load) (Subscript (Name &r:0 Load) (Constant i0 None) Load) Store)) (Name &new_a:0 Load) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &d:0 Load) (Subscript (Name &r:0 Load) (Constant i0 None) Load) Load) (BinOp (Subscript (Name &r:0 Load) (Constant i1 None) Load) Sub (Constant i1 None)) Load)) nil))))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &b:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &b:0 Load) s_append Load) (list (List (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Name &i:0 Load))) Load)) nil))) nil None) (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &z:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) (/seq (AugAssign (Name &ans:0 Store) Add (Subscript (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)) (Expr (Call (Attribute (Name &z:0 Load) s_append Load) (list (List (list (UnaryOp USub (Subscript (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)) (Subscript (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) (Constant i0 None) Load)) Load)) nil))) nil None) (Expr (Call (Attribute (Name &z:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &z:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) (Constant i1 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &data:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &data1:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &data1:0 Load) s_append Load) (list (Tuple (list (Call (Name g_int Load) (list (Subscript (Name &data:0 Load) (Name &i:0 Load) Load)) nil) (Name &i:0 Load)) Load)) nil))) nil None) (Expr (Call (Attribute (Name &data1:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (Tuple (list (Subscript (Name &x:1 Load) (Constant i0 None) Load) (UnaryOp USub (Subscript (Name &x:1 Load) (Constant i1 None) Load))) Load)))))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &temp:0 Store)) (Call (Name g_sorted Load) (list (Subscript (Name &data1:0 Load) (Slice (BinOp (Call (Name g_len Load) (list (Name &data1:0 Load)) nil) Sub (Name &k:0 Load)) None None) Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Subscript (Name &x:2 Load) (Constant i1 None) Load))))) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &temp:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &arr:0 Store)) (fn_3 &i:1) None) (Assign (list (Name &sor:0 Store)) (ListComp (List (list (Subscript (Name &arr:0 Load) (Name &i:2 Load) Load) (BinOp (Name &n:0 Load) Sub (Name &i:2 Load))) Load) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &sor:0 Load) s_sort Load) nil nil)) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Name &op:0 Store)) (List nil Load) None) (Assign (list (List (list (Name &q:0 Store) (Name &index:0 Store)) Store)) (fn_3 &i:3) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &op:0 Load) s_append Load) (list (BinOp (Name &n:0 Load) Sub (Subscript (Subscript (Name &sor:0 Load) (BinOp (UnaryOp USub (Constant i1 None)) Sub (Name &j:0 Load)) Load) (Constant i1 None) Load))) nil))) nil None) (Expr (Call (Attribute (Name &op:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Subscript (Name &arr:0 Load) (Subscript (Name &op:0 Load) (BinOp (Name &index:0 Load) Sub (Constant i1 None)) Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (ImportFrom s_math (list (alias g_* None)) i0) (Import (list (alias g_os None) (alias g_sys None))) (ImportFrom s_io (list (alias g_BytesIO None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Call (Name g_BytesIO Load) (list (Call (Attribute (Name g_os Load) s_read Load) (list (Constant i0 None) (Attribute (Call (Attribute (Name g_os Load) s_fstat Load) (list (Constant i0 None)) nil) s_st_size Load)) nil)) nil) s_readline Load) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &b:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &b:0 Load) s_append Load) (list (Tuple (list (UnaryOp USub (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) (Name &i:0 Load)) Load)) nil))) nil None) (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &tmp:0 Store)) (List nil Load) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &tmp:0 Load) s_append Load) (list (Subscript (Subscript (Name &b:0 Load) (Name &j:0 Load) Load) (Constant i1 None) Load)) nil))) nil None) (Expr (Call (Attribute (Name &tmp:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Subscript (Name &a:0 Load) (Subscript (Name &tmp:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &arr_sorted:0 Store)) (ListComp (Tuple (list (Subscript (Name &arr:0 Load) (Name &i:1 Load) Load) (Name &i:1 Load)) Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &arr_sorted:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &el:2 None None)) None nil nil None nil) (Tuple (list (Subscript (Name &el:2 Load) (Constant i0 None) Load) (UnaryOp USub (Subscript (Name &el:2 Load) (Constant i1 None) Load))) Load))) (keyword s_reverse (Constant True None))))) (fn_2 &m:0) (For (Name &req_i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (AugAssign (Name &pos:0 Store) Sub (Constant i1 None)) (Assign (list (Name &cur_arr:0 Store)) (Subscript (Name &arr_sorted:0 Load) (Slice None (Name &k:0 Load) None) Load) None) (Expr (Call (Attribute (Name &cur_arr:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &el:3 None None)) None nil nil None nil) (Subscript (Name &el:3 Load) (Constant i1 None) Load)))))) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &cur_arr:0 Load) (Name &pos:0 Load) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (FunctionDef &f:0 (arguments nil (list (arg &a:1 None None)) None nil nil None nil) (/seq (Return (UnaryOp USub (Subscript (Name &a:1 Load) (Constant i1 None) Load)))) nil None None) (Import (list (alias &sys:0 None))) (Assign (list (Name &fin:0 Store)) (Attribute (Name &sys:0 Load) s_stdin Load) None) (fn_2 &n:0) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Name &fin:0 Load) s_readline Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &arr_ind:0 Store)) (Call (Name g_list Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &arr_ind:0 Load) s_append Load) (list (List (list (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Name &i:0 Load))) Load)) nil))) nil None) (Expr (Call (Attribute (Name &arr_ind:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &arr_ind:0 Load) s_reverse Load) nil nil)) (Assign (list (Name &ans_array:0 Store)) (Call (Name g_list Load) nil nil) None) (For (Name &k:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &ans:0 Store)) (Subscript (Name &arr_ind:0 Load) (Slice None (Name &k:0 Load) None) Load) None) (Expr (Call (Attribute (Name &ans:0 Load) s_sort Load) nil (list (keyword s_key (Name &f:0 Load))))) (Expr (Call (Attribute (Name &ans_array:0 Load) s_append Load) (list (Name &ans:0 Load)) nil))) nil None) (fn_2 &tests:0) (For (Name &test:0 Store) (Call (Name g_range Load) (list (Name &tests:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Subscript (Name &ans_array:0 Load) (BinOp (Name &k:0 Load) Sub (Constant i1 None)) Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &nar:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &m:0) (For (Name &q:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &p:0 Store)) Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &mar:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &mar:0 Load) s_append Load) (list (Subscript (Name &nar:0 Load) (Name &i:0 Load) Load)) nil))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load) (Name &n:0 Load)) nil) (/seq (Assign (list (Name &minItem:0 Store)) (Constant i0 None) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &k:0 Load)) nil) (/seq (If (Compare (Subscript (Name &mar:0 Load) (Name &j:0 Load) Load) (list LtE) (list (Subscript (Name &mar:0 Load) (Name &minItem:0 Load) Load))) (/seq (Assign (list (Name &minItem:0 Store)) (Name &j:0 Load) None)) nil)) nil None) (If (Compare (Subscript (Name &nar:0 Load) (Name &i:0 Load) Load) (list Gt) (list (Subscript (Name &mar:0 Load) (Name &minItem:0 Load) Load))) (/seq (Expr (Call (Attribute (Name &mar:0 Load) s_pop Load) (list (Name &minItem:0 Load)) nil)) (Expr (Call (Attribute (Name &mar:0 Load) s_append Load) (list (Subscript (Name &nar:0 Load) (Name &i:0 Load) Load)) nil))) nil)) nil None) (Expr (Call (Name g_print Load) (list (Subscript (Name &mar:0 Load) (BinOp (Name &p:0 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (Import (list (alias g_bisect None))) (Import (list (alias g_heapq None))) (Assign (list (Name &Ri:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (ListComp (Call (Name g_int Load) (list (Name &x:7 Load)) nil) (list (comprehension (Name &x:7 Store) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil) nil i0)))) None) (Assign (list (Name &ri:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil)) None) (FunctionDef &input:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &list2d:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None)) None nil nil None nil) (/seq (Return (ListComp (BinOp (List (list (Name &c:1 Load)) Load) Mult (Name &b:1 Load)) (list (comprehension (Name &i:8 Store) (Call (Name g_range Load) (list (Name &a:1 Load)) nil) nil i0))))) nil None None) (FunctionDef &list3d:0 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None) (arg &d:2 None None)) None nil nil None nil) (/seq (Return (ListComp (ListComp (BinOp (List (list (Name &d:2 Load)) Load) Mult (Name &c:2 Load)) (list (comprehension (Name &j:11 Store) (Call (Name g_range Load) (list (Name &b:2 Load)) nil) nil i0))) (list (comprehension (Name &i:9 Store) (Call (Name g_range Load) (list (Name &a:2 Load)) nil) nil i0))))) nil None None) (FunctionDef &list4d:0 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None) (arg &c:3 None None) (arg &d:3 None None) (arg &e:3 None None)) None nil nil None nil) (/seq (Return (ListComp (ListComp (ListComp (BinOp (List (list (Name &e:3 Load)) Load) Mult (Name &d:3 Load)) (list (comprehension (Name &j:15 Store) (Call (Name g_range Load) (list (Name &c:3 Load)) nil) nil i0))) (list (comprehension (Name &j:12 Store) (Call (Name g_range Load) (list (Name &b:3 Load)) nil) nil i0))) (list (comprehension (Name &i:10 Store) (Call (Name g_range Load) (list (Name &a:3 Load)) nil) nil i0))))) nil None None) (FunctionDef &ceil:0 (arguments nil (list (arg &x:4 None None) (arg &y:4 None None)) None nil nil None (list (Constant i1 None))) (/seq (Return (Call (Name g_int Load) (list (UnaryOp USub (BinOp (UnaryOp USub (Name &x:4 Load)) FloorDiv (Name &y:4 Load)))) nil))) nil None None) (FunctionDef &INT:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))) nil None None) (FunctionDef &MAP:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &LIST:0 (arguments nil (list (arg &N:5 None None)) None nil nil None (list (Constant None None))) (/seq (Return (IfExp (Compare (Name &N:5 Load) (list Is) (list (Constant None None))) (Call (Name g_list Load) (list (Call (Name &MAP:0 Load) nil nil)) nil) (ListComp (Call (Name &INT:0 Load) nil nil) (list (comprehension (Name &i:13 Store) (Call (Name g_range Load) (list (Name &N:5 Load)) nil) nil i0)))))) nil None None) (FunctionDef &Yes:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_Yes None)) nil))) nil None None) (FunctionDef &No:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_No None)) nil))) nil None None) (FunctionDef &YES:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil None None) (FunctionDef &NO:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) nil None None) (Assign (list (Name &INF:0 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None) (Assign (list (Name &MOD:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &ri:0 Load) nil nil)) nil) None) (Assign (list (Name &ar:0 Store)) (Call (Name &Ri:0 Load) nil nil) None) (Assign (list (Name &arr:0 Store)) (ListComp (Tuple (list (Subscript (Name &ar:0 Load) (Name &i:6 Load) Load) (Name &i:6 Load)) Load) (list (comprehension (Name &i:6 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) None) (Expr (Call (Attribute (Name &arr:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:14 None None)) None nil nil None nil) (UnaryOp USub (Subscript (Name &x:14 Load) (Constant i0 None) Load))))))) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name &ri:0 Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (Call (Name &Ri:0 Load) nil nil) None) (Assign (list (Name &temp:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &a:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &temp:0 Load) s_append Load) (list (Subscript (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (Constant i1 None) Load)) nil))) nil None) (Expr (Call (Attribute (Name &temp:0 Load) s_sort Load) nil nil)) (Expr (Call (Name g_print Load) (list (Subscript (Name &ar:0 Load) (Subscript (Name &temp:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &s:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Subscript (Name &s:0 Load) (Name &i:0 Load) Store)) (Tuple (list (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) (Name &i:0 Load)) Load) None)) nil None) (Assign (list (Name &mx:0 Store)) (Call (Name g_sorted Load) (list (Name &s:0 Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &y:1 None None)) None nil nil None nil) (Subscript (Name &y:1 Load) (Constant i0 None) Load))) (keyword s_reverse (Constant True None)))) None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (AugAssign (Name &pos:0 Store) Sub (Constant i1 None)) (Assign (list (Name &a:0 Store)) (Constant i0 None) None) (Assign (list (Name &last:0 Store)) (Subscript (Subscript (Name &mx:0 Load) (Constant i0 None) Load) (Constant i0 None) Load) None) (Assign (list (Name &res:0 Store)) (List nil Load) None) (Assign (list (Name &d:0 Store)) (Call (Name g_dict Load) nil nil) None) (Assign (list (Name &d2:0 Store)) (Call (Name g_dict Load) nil nil) None) (For (Name &x:0 Store) (Call (Name g_range Load) (list (Name &k:0 Load)) nil) (/seq (If (Compare (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load) (list NotIn) (list (Name &d:0 Load))) (/seq (Assign (list (Subscript (Name &d:0 Load) (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load) Store)) (Constant i1 None) None)) (/seq (AugAssign (Subscript (Name &d:0 Load) (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load) Store) Add (Constant i1 None))))) nil None) (For (Name &x:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load) (list NotEq) (list (Name &last:0 Load))) (/seq (AugAssign (Name &a:0 Store) Add (Constant i1 None)) (Assign (list (Name &last:0 Store)) (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load) None)) nil) (If (Compare (Name &a:0 Load) (list Eq) (list (Name &k:0 Load))) (/seq Break) nil) (If (Compare (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load) (list NotIn) (list (Name &d2:0 Load))) (/seq (Assign (list (Subscript (Name &d2:0 Load) (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load) Store)) (List (list (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i1 None) Load)) Load) None)) (/seq (Expr (Call (Attribute (Subscript (Name &d2:0 Load) (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i0 None) Load) Load) s_append Load) (list (Subscript (Subscript (Name &mx:0 Load) (Name &x:0 Load) Load) (Constant i1 None) Load)) nil))))) nil None) (For (Name &a:0 Store) (Call (Name g_list Load) (list (Call (Attribute (Name &d:0 Load) s_keys Load) nil nil)) nil) (/seq (Expr (Call (Attribute (Subscript (Name &d2:0 Load) (Name &a:0 Load) Load) s_sort Load) nil nil)) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Subscript (Name &d:0 Load) (Name &a:0 Load) Load)) nil) (/seq (Expr (Call (Attribute (Name &res:0 Load) s_append Load) (list (Tuple (list (Name &a:0 Load) (Subscript (Subscript (Name &d2:0 Load) (Name &a:0 Load) Load) (Name &j:0 Load) Load)) Load)) nil))) nil None)) nil None) (Assign (list (Name &res:0 Store)) (Call (Name g_sorted Load) (list (Name &res:0 Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &y:2 None None)) None nil nil None nil) (Subscript (Name &y:2 Load) (Constant i1 None) Load))))) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &res:0 Load) (Name &pos:0 Load) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &c:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (Tuple (list (Call (Name g_int Load) (list (Subscript (Name &x:1 Load) (Constant i1 None) Load)) nil) (UnaryOp USub (Subscript (Name &x:1 Load) (Constant i0 None) Load))) Load)) (Call (Name g_enumerate Load) (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil)) nil) None) (Assign (list (Name &so:0 Store)) (Call (Name g_sorted Load) (list (Name &c:0 Load)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &r:0 Store)) Store)) (fn_1) None) (Assign (list (Name &now:0 Store)) (Subscript (Name &so:0 Load) (Slice (UnaryOp USub (Name &k:0 Load)) None None) Load) None) (Expr (Call (Attribute (Name &now:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (UnaryOp USub (Subscript (Name &x:2 Load) (Constant i1 None) Load))))))) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &now:0 Load) (BinOp (Name &r:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_sorted Load) (list (Call (Name g_zip Load) (list (Call (Name g_list Load) (list (fn_1)) nil) (Call (Name g_range Load) (list (Name &n:0 Load)) nil)) nil)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (Tuple (list (Subscript (Name &x:1 Load) (Constant i0 None) Load) (UnaryOp USub (Subscript (Name &x:1 Load) (Constant i1 None) Load))) Load))) (keyword s_reverse (Constant True None)))) None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (Subscript (Name &a:0 Load) (Slice None (Name &k:0 Load) None) Load)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Subscript (Name &x:2 Load) (Constant i1 None) Load))))) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &b:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None)) i0) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil) None) (Assign (list (Name &alist:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &aindlist:0 Store)) (Call (Name g_sorted Load) (list (ListComp (Tuple (list (Name &elem:1 Load) (Name &i:1 Load)) Load) (list (comprehension (Tuple (list (Name &i:1 Store) (Name &elem:1 Store)) Store) (Call (Name g_enumerate Load) (list (Name &alist:0 Load)) nil) nil i0)))) (list (keyword s_key (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (Tuple (list (UnaryOp USub (Subscript (Name &x:3 Load) (Constant i0 None) Load)) (Subscript (Name &x:3 Load) (Constant i1 None) Load)) Load))))) None) (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil)) nil) None) (Assign (list (Name &ans:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Name g_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &temp:0 Store)) (ListComp (Subscript (Name &x:2 Load) (Constant i1 None) Load) (list (comprehension (Name &x:2 Store) (Subscript (Name &aindlist:0 Load) (Slice None (Name &k:0 Load) None) Load) nil i0))) None) (Expr (Call (Attribute (Name &temp:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &ans:0 Load) s_append Load) (list (Subscript (Name &alist:0 Load) (Subscript (Name &temp:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) Load)) nil))) nil None) (Expr (Call (Name g_print Load) (list (Starred (Name &ans:0 Load) Load)) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) nil)",
            "(Module (/seq (Import (list (alias g_itertools None))) (Import (list (alias g_functools None))) (ImportFrom s_operator (list (alias g_itemgetter None)) i0) (FunctionDef &cmp:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (If (Compare (Subscript (Name &a:1 Load) (Constant i0 None) Load) (list Gt) (list (Subscript (Name &b:1 Load) (Constant i0 None) Load))) (/seq (Return (UnaryOp USub (Constant i1 None)))) (/seq (If (Compare (Subscript (Name &a:1 Load) (Constant i0 None) Load) (list Lt) (list (Subscript (Name &b:1 Load) (Constant i0 None) Load))) (/seq (Return (Constant i1 None))) (/seq (If (Compare (Subscript (Name &a:1 Load) (Constant i1 None) Load) (list Lt) (list (Subscript (Name &b:1 Load) (Constant i1 None) Load))) (/seq (Return (UnaryOp USub (Constant i1 None)))) (/seq (If (Compare (Subscript (Name &a:1 Load) (Constant i1 None) Load) (list Gt) (list (Subscript (Name &b:1 Load) (Constant i1 None) Load))) (/seq (Return (Constant i1 None))) (/seq (Return (Constant i0 None))))))))))) nil None None) (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &c:0 Store)) (Subscript (Name &a:0 Load) (Slice None None None) Load) None) (Assign (list (Name &c:0 Store)) (Call (Name g_list Load) (list (Call (Name g_zip Load) (list (Name &a:0 Load) (Call (Attribute (Name g_itertools Load) s_count Load) (list (Constant i0 None)) nil)) nil)) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_sorted Load) (list (Name &c:0 Load)) (list (keyword s_key (Call (Attribute (Name g_functools Load) s_cmp_to_key Load) (list (Name &cmp:0 Load)) nil)))) None) (Assign (list (Name &h:0 Store)) (Subscript (Name &c:0 Load) (Slice None None None) Load) None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &h:0 Store)) (Call (Name g_sorted Load) (list (Subscript (Name &c:0 Load) (Slice None (Name &k:0 Load) None) Load)) (list (keyword s_key (Call (Name g_itemgetter Load) (list (Constant i1 None)) nil)))) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &h:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) (Constant i0 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &sequence:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &array:0 Store)) (Call (Name g_list Load) (list (Name &sequence:0 Load)) nil) None) (Expr (Call (Attribute (Name &array:0 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &D:0 Store)) (Call (Name g_dict Load) nil nil) None) (For (Name &elem:0 Store) (Subscript (Name &array:0 Load) (Slice None (Name &k:0 Load) None) Load) (/seq (If (Compare (Name &elem:0 Load) (list In) (list (Name &D:0 Load))) (/seq (AugAssign (Subscript (Name &D:0 Load) (Name &elem:0 Load) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &D:0 Load) (Name &elem:0 Load) Store)) (Constant i1 None) None)))) nil None) (For (Name &elem:0 Store) (Name &sequence:0 Load) (/seq (If (BoolOp And (list (Compare (Name &elem:0 Load) (list In) (list (Name &D:0 Load))) (Compare (Subscript (Name &D:0 Load) (Name &elem:0 Load) Load) (list NotEq) (list (Constant i0 None))))) (/seq (AugAssign (Subscript (Name &D:0 Load) (Name &elem:0 Load) Store) Sub (Constant i1 None)) (If (Compare (Name &pos:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &elem:0 Load)) nil)) Break) (/seq (AugAssign (Name &pos:0 Store) Sub (Constant i1 None))))) nil)) nil None)) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &p:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &p:0 Store)) (Call (Name g_sorted Load) (list (Call (Name g_list Load) (list (Call (Name g_enumerate Load) (list (Name &p:0 Load)) nil)) nil)) (list (keyword s_key (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (UnaryOp USub (Subscript (Name &x:1 Load) (Constant i1 None) Load)))))) None) (Assign (list (Name &a:0 Store)) (List (list (List nil Load)) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_append Load) (list (Call (Name g_sorted Load) (list (BinOp (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Load) Add (List (list (Subscript (Name &p:0 Load) (Name &i:0 Load) Load)) Load))) (list (keyword s_key (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Subscript (Name &x:2 Load) (Constant i0 None) Load)))))) nil))) nil None) (fn_2 &m:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store)) (fn_1) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Subscript (Name &a:0 Load) (Name &x:0 Load) Load) (BinOp (Name &y:0 Load) Sub (Constant i1 None)) Load) (Constant i1 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &n:0) (Assign (list (Name &A:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (Assign (list (Name &L:0 Store)) (Call (Attribute (Name &A:0 Load) s_copy Load) nil nil) None) (Assign (list (Name &L2:0 Store)) (Call (Attribute (Name &L:0 Load) s_copy Load) nil nil) None) (Expr (Call (Attribute (Name &A:0 Load) s_sort Load) nil nil)) (fn_2 &c:0) (Assign (list (Name &r:0 Store)) (List nil Load) None) (FunctionDef &S:0 (arguments nil (list (arg &x:1 None None) (arg &L:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &idx:1 Store)) (Call (Attribute (Name &L:1 Load) s_index Load) (list (Name &x:1 Load)) nil) None) (Assign (list (Subscript (Name &L:1 Load) (Name &idx:1 Load) Store)) (UnaryOp USub (Constant i1 None)) None) (Return (List (list (Name &idx:1 Load) (Name &x:1 Load)) Load))) nil None None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &c:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &B:0 Store)) (Subscript (Name &A:0 Load) (Slice None (BinOp (BinOp (Constant i0 None) Sub (Name &k:0 Load)) Sub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Name &H:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (Call (Name &S:0 Load) (list (Name &x:2 Load) (Name &L:0 Load)) nil)) (Name &B:0 Load)) nil)) nil) None) (Expr (Call (Attribute (Name &H:0 Load) s_sort Load) nil nil)) (Assign (list (Name &N:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (Subscript (Name &x:3 Load) (Constant i1 None) Load)) (Name &H:0 Load)) nil)) nil) None) (AugAssign (Name &r:0 Store) Add (List (list (Subscript (Name &N:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)) Load)) (Assign (list (Name &L:0 Store)) (Call (Attribute (Name &L2:0 Load) s_copy Load) nil nil) None)) nil None) (Expr (Call (Name g_print Load) (list (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (Call (Name g_map Load) (list (Name g_str Load) (Name &r:0 Load)) nil)) nil)) nil))) nil)",
            "(Module (/seq (FunctionDef &get_index:0 (arguments nil (list (arg &lt:1 None None) (arg &vec:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &max_el:1 Store)) (Constant i0 None) None) (Assign (list (Name &pos:1 Store)) (Constant None None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &vec:1 Load)) nil)) nil) (/seq (If (Compare (Name &i:1 Load) (list NotIn) (list (Name &lt:1 Load))) (/seq (If (Compare (Name &max_el:1 Load) (list Lt) (list (Subscript (Name &vec:1 Load) (Name &i:1 Load) Load))) (/seq (Assign (list (Name &max_el:1 Store)) (Subscript (Name &vec:1 Load) (Name &i:1 Load) Load) None) (Assign (list (Name &pos:1 Store)) (Name &i:1 Load) None)) nil)) nil)) nil None) (Return (Name &pos:1 Load))) nil None None) (fn_2 &n:0) (Assign (list (Name &vec:0 Store)) (fn_3 &x:2) None) (Assign (list (Name &lst:0 Store)) (List (list (List (list (Call (Attribute (Name &vec:0 Load) s_index Load) (list (Call (Name g_max Load) (list (Name &vec:0 Load)) nil)) nil)) Load)) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) (/seq (Assign (list (Name &lt:0 Store)) (Call (Name g_list Load) (list (Subscript (Name &lst:0 Load) (Name &i:0 Load) Load)) nil) None) (Assign (list (Name &ind:0 Store)) (Call (Name &get_index:0 Load) (list (Name &lt:0 Load) (Name &vec:0 Load)) nil) None) (Expr (Call (Attribute (Name &lt:0 Load) s_append Load) (list (Name &ind:0 Load)) nil)) (Expr (Call (Attribute (Name &lst:0 Load) s_append Load) (list (Name &lt:0 Load)) nil))) nil None) (For (Name &l:0 Store) (Name &lst:0 Load) (/seq (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil))) nil None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &m:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_3 &x:3) None) (Expr (Call (Name g_print Load) (list (Subscript (Name &vec:0 Load) (Subscript (Subscript (Name &lst:0 Load) (BinOp (Name &k:0 Load) Sub (Constant i1 None)) Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) Load)) nil))) nil None)) nil)",
            "(Module (/seq (ImportFrom s_sys (list (alias g_stdin None) (alias g_stdout None)) i0) (ImportFrom s_math (list (alias g_gcd None) (alias g_sqrt None) (alias g_factorial None) (alias g_pi None)) i0) (ImportFrom s_collections (list (alias g_deque None) (alias g_defaultdict None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Name g_stdin Load) s_readline Load) None) (Assign (list (Name &R:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) None) (Assign (list (Name &I:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)) None) (Assign (list (Name &S:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_rstrip Load) (list (Constant s-WzEwXQ== None)) nil)) None) (Assign (list (Name &L:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_list Load) (list (Call (Name &R:0 Load) nil nil)) nil)) None) (Assign (list (Name &P:0 Store)) (Lambda (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (Call (Attribute (Name g_stdout Load) s_write Load) (list (Name &x:1 Load)) nil)) None) (Assign (list (Name &lcm:0 Store)) (Lambda (arguments nil (list (arg &x:2 None None) (arg &y:2 None None)) None nil nil None nil) (BinOp (BinOp (Name &x:2 Load) Mult (Name &y:2 Load)) FloorDiv (Call (Name g_gcd Load) (list (Name &x:2 Load) (Name &y:2 Load)) nil))) None) (Assign (list (Name &hg:0 Store)) (Lambda (arguments nil (list (arg &x:3 None None) (arg &y:3 None None)) None nil nil None nil) (BinOp (BinOp (BinOp (BinOp (Name &y:3 Load) Add (Name &x:3 Load)) Sub (Constant i1 None)) FloorDiv (Name &x:3 Load)) Mult (Name &x:3 Load))) None) (Assign (list (Name &pw:0 Store)) (Lambda (arguments nil (list (arg &x:4 None None)) None nil nil None nil) (IfExp (Compare (Name &x:4 Load) (list Eq) (list (Constant i1 None))) (Constant i1 None) (BinOp (Constant i1 None) Add (Call (Name &pw:0 Load) (list (BinOp (Name &x:4 Load) FloorDiv (Constant i2 None))) nil)))) None) (Assign (list (Name &chk:0 Store)) (Lambda (arguments nil (list (arg &x:5 None None)) None nil nil None nil) (IfExp (UnaryOp Not (BinOp (Name &x:5 Load) Mod (Constant i2 None))) (Call (Name &chk:0 Load) (list (BinOp (Name &x:5 Load) FloorDiv (Constant i2 None))) nil) (IfExp (Compare (Name &x:5 Load) (list Eq) (list (Constant i1 None))) (Constant True None) (Constant False None)))) None) (Assign (list (Name &sm:0 Store)) (Lambda (arguments nil (list (arg &x:6 None None)) None nil nil None nil) (BinOp (BinOp (BinOp (Name &x:6 Load) Pow (Constant i2 None)) Add (Name &x:6 Load)) FloorDiv (Constant i2 None))) None) (Assign (list (Name &N:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &n:0 Store)) (Call (Name &I:0 Load) nil nil) None) (Assign (list (Name &d:0 Store)) (Dict nil nil) None) (For (Name &i:0 Store) (Call (Name g_sorted Load) (list (Call (Name g_enumerate Load) (list (Call (Name &R:0 Load) nil nil)) nil)) (list (keyword s_reverse (Constant True None)) (keyword s_key (Lambda (arguments nil (list (arg &x:7 None None)) None nil nil None nil) (Subscript (Name &x:7 Load) (Constant i1 None) Load))))) (/seq (If (Compare (Subscript (Name &i:0 Load) (Constant i1 None) Load) (list NotIn) (list (Name &d:0 Load))) (/seq (Assign (list (Subscript (Name &d:0 Load) (Subscript (Name &i:0 Load) (Constant i1 None) Load) Store)) (List nil Load) None)) nil) (AugAssign (Subscript (Name &d:0 Load) (Subscript (Name &i:0 Load) (Constant i1 None) Load) Store) Add (Tuple (list (Name &i:0 Load)) Load)) (Expr (Call (Attribute (Subscript (Name &d:0 Load) (Subscript (Name &i:0 Load) (Constant i1 None) Load) Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:8 None None)) None nil nil None nil) (Subscript (Name &x:8 Load) (Constant i0 None) Load))))))) nil None) (Assign (list (Name &a:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Name &d:0 Load) (/seq (Expr (Call (Attribute (Name &a:0 Load) s_extend Load) (list (Subscript (Name &d:0 Load) (Name &i:0 Load) Load)) nil))) nil None) (Assign (list (Name &m:0 Store)) (List nil Load) None) (Assign (list (Name &x:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (AugAssign (Name &x:0 Store) Add (Tuple (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) Load)) (Expr (Call (Attribute (Name &x:0 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:9 None None)) None nil nil None nil) (Subscript (Name &x:9 Load) (Constant i0 None) Load)))))) (Expr (Call (Attribute (Name &m:0 Load) s_append Load) (list (Call (Attribute (Name &x:0 Load) s_copy Load) nil nil)) nil))) nil None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Call (Name &I:0 Load) nil nil)) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (Call (Name &R:0 Load) nil nil) None) (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Subscript (Name &m:0 Load) (BinOp (Name &k:0 Load) Sub (Constant i1 None)) Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load) (Constant i1 None) Load)) nil))) nil None)) nil)",
            "(Module (/seq (fn_2 &m:0) (Assign (list (Name &line:0 Store)) (fn_3 &i:1) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Assign (list (Name &false_line:0 Store)) (Call (Name g_list Load) (list (Name &line:0 Load)) nil) None) (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (While (Compare (Call (Name g_len Load) (list (Name &false_line:0 Load)) nil) (list Gt) (list (Name &k:0 Load))) (/seq (Assign (list (Name &x:0 Store)) (Call (Name g_min Load) (list (Name &false_line:0 Load)) nil) None) (Assign (list (Name &rang:0 Store)) (Call (Name g_iter Load) (list (Call (Name g_range Load) (list (UnaryOp USub (Constant i1 None)) (BinOp (UnaryOp USub (Call (Name g_len Load) (list (Name &false_line:0 Load)) nil)) Sub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil)) nil) None) (Assign (list (Name &j:0 Store)) (Call (Name g_next Load) (list (Name &rang:0 Load)) nil) None) (While (Compare (Name &j:0 Load) (list Gt) (list (BinOp (UnaryOp USub (Call (Name g_len Load) (list (Name &false_line:0 Load)) nil)) Sub (Constant i1 None)))) (/seq (If (Compare (Subscript (Name &false_line:0 Load) (Name &j:0 Load) Load) (list Eq) (list (Name &x:0 Load))) (/seq (Delete (list (Subscript (Name &false_line:0 Load) (Name &j:0 Load) Del))) (If (Compare (Call (Name g_len Load) (list (Name &false_line:0 Load)) nil) (list Eq) (list (Name &k:0 Load))) (/seq Break) nil)) (/seq (Try (/seq (Assign (list (Name &j:0 Store)) (Call (Name g_next Load) (list (Name &rang:0 Load)) nil) None)) (list (ExceptHandler (Name g_StopIteration Load) None (/seq Break))) nil nil)))) nil)) nil) (Expr (Call (Name g_print Load) (list (Subscript (Name &false_line:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)) nil))) nil None)) nil)",
            "(Module (/seq (Import (list (alias g_copy None))) (Assign (list (Name &b:0 Store)) (List nil Load) None) (Assign (list (Name &a:0 Store)) (List nil Load) None) (Assign (list (Name &rezult:0 Store)) (Constant s_ None) None) (fn_2 &n:0) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (fn_1)) nil) None) (fn_2 &m:0) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Tuple (list (Name &k:0 Store) (Name &pos:0 Store)) Store)) (fn_1) None) (Assign (list (Name &b:0 Store)) (Call (Attribute (Name g_copy Load) s_deepcopy Load) (list (Name &a:0 Load)) nil) None) (Expr (Call (Attribute (Name &b:0 Load) s_reverse Load) nil nil)) (For (Name &j:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) Add (Constant i1 None))) nil) (/seq (Expr (Call (Attribute (Name &b:0 Load) s_remove Load) (list (Call (Name g_min Load) (list (Name &b:0 Load)) nil)) nil))) nil None) (Expr (Call (Attribute (Name &b:0 Load) s_reverse Load) nil nil)) (Assign (list (Name &rezult:0 Store)) (BinOp (BinOp (Name &rezult:0 Load) Add (Constant s-WzEwXQ== None)) Add (Call (Name g_str Load) (list (Subscript (Name &b:0 Load) (BinOp (Name &pos:0 Load) Sub (Constant i1 None)) Load)) nil)) None)) nil None) (Expr (Call (Name g_print Load) (list (Name &rezult:0 Load)) nil))) nil)"
        ]
    }
]
