[
    {
        "args": {
            "application_utility_symvar": -0.5,
            "application_utility_fixed": -3,
            "match_sequences": true,
            "dfa": "data_for_testing/dfa_imp.json",
            "application_utility_choicevar": -1.01,
            "application_utility_metavar": -1,
            "size_by_symbol": "data_for_testing/size_by_symbol.json"
        },
        "abstractions": [
            [
                1,
                5,
                "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) #0 None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) ?0 (AugAssign (Subscript (Name %2 Load) (_slice_content (Name %4 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name %2 Load) (_slice_content (Name %3 Load)) Store) Add (Constant i1 None))) (/seq) None))",
                "seqS",
                [
                    "E"
                ],
                [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ]
            ],
            [
                2,
                5,
                "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) #0 None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store))) Store)) #1 None) (AugAssign (Subscript (Name %2 Load) (_slice_content (BinOp (Name %4 Load) Sub (Constant i1 None))) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name %2 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Store) Add (Constant i1 None))) (/seq) None))",
                "seqS",
                [
                    "E",
                    "E"
                ],
                [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ]
            ],
            [
                2,
                0,
                "(/seq (If (Compare #1 (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) #0) (/seq)))",
                "seqS",
                [
                    "S",
                    "E"
                ],
                []
            ]
        ],
        "programs": [
            "(Module (/seq (/splice (fn_1 (ListComp (Constant i0 None) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil) nil i0))) &m:0 &l:0 &b:0 &a:0 &_:0 (/choiceseq))) (If (Compare (Constant i2 None) (list In) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))))) nil)",
            "(Module (/seq (Import (list (alias g_sys None))) (ClassDef &D1AddOnATree:0 nil nil (/seq (FunctionDef &dfs:1 (arguments nil (list (arg &self:2 None None) (arg &start:2 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:2 Load) s_done Load) (_slice_content (Name &start:2 Load)) Store)) (Constant i1 None) None) (For (Name &x:2 Store) (Subscript (Attribute (Name &self:2 Load) s_adj Load) (_slice_content (Name &start:2 Load)) Load) (/seq (If (Subscript (Attribute (Name &self:2 Load) s_done Load) (_slice_content (Name &x:2 Load)) Load) (/seq Continue) (/seq)) (Assign (list (Subscript (Attribute (Name &self:2 Load) s_par Load) (_slice_content (Name &x:2 Load)) Store)) (Name &start:2 Load) None) (Expr (Call (Attribute (Name &self:2 Load) s_dfs Load) (list (_starred_content (Name &x:2 Load))) nil))) (/seq) None)) nil None None) (FunctionDef &solve:1 (arguments nil (list (arg &self:3 None None)) None nil nil None nil) (/seq (ImportFrom s_collections (list (alias &defaultdict:3 None)) i0) (Import (list (alias &sys:3 None))) (Expr (Call (Attribute (Name &sys:3 Load) s_setrecursionlimit Load) (list (_starred_content (BinOp (BinOp (Constant i10 None) Pow (Constant i5 None)) Add (Constant i5 None)))) nil)) (Assign (list (Name &n:3 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_adj Store)) (Call (Name &defaultdict:3 Load) (list (_starred_content (Name g_list Load))) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_par Store)) (Call (Name &defaultdict:3 Load) (list (_starred_content (Name g_int Load))) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_done Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:3 Store)) (_starred_content (Name &v:3 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &_:4 Load))) nil) (list (comprehension (Name &_:4 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &u:3 Load)) Load) s_append Load) (list (_starred_content (Name &v:3 Load))) nil)) (Expr (Call (Attribute (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &v:3 Load)) Load) s_append Load) (list (_starred_content (Name &u:3 Load))) nil)) (AugAssign (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &u:3 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &v:3 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:3 Load) Add (Constant i1 None)))) nil) (fn_3 Break (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &i:3 Load)) Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) None) (Return None) (Assign (list (Name &v:3 Store)) (Call (Name g_max Load) (list (_starred_content (GeneratorExp (Call (Name g_len Load) (list (_starred_content (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &p:5 Load)) Load))) nil) (list (comprehension (Name &p:5 Store) (Attribute (Name &self:3 Load) s_adj Load) nil i0))))) nil) None) (Assign (list (Name &start:3 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &p:3 Store) (Attribute (Name &self:3 Load) s_adj Load) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &p:3 Load)) Load))) nil) (list Eq) (list (Name &v:3 Load))) (/seq (Assign (list (Name &start:3 Store)) (Name &p:3 Load) None) Break) (/seq))) (/seq) None) (Assert (Compare (Name &start:3 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) None) (Expr (Call (Attribute (Name &self:3 Load) s_dfs Load) (list (_starred_content (Name &start:3 Load))) nil)) (Assign (list (Name &cnt:3 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None) (For (Name &k:3 Store) (Attribute (Name &self:3 Load) s_adj Load) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_par Load) (_slice_content (Name &k:3 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq Continue) (/seq)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &k:3 Load)) Load))) nil) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Subscript (Name &cnt:3 Load) (_slice_content (Subscript (Attribute (Name &self:3 Load) s_par Load) (_slice_content (Name &k:3 Load)) Load)) Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Assign (list (Name &ans:3 Store)) (Constant i0 None) None) (For (Name &x:3 Store) (Name &cnt:3 Load) (/seq (If (Compare (Name &x:3 Load) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &ans:3 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Name &ans:3 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))) nil None None)) nil) (Assign (list (Name &solver:0 Store)) (Call (Name &D1AddOnATree:0 Load) nil nil) None) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Expr (Call (Attribute (Name &solver:0 Load) s_solve Load) nil nil))) nil)",
            "(Module (/seq (/splice (fn_1 (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) &n:0 &deg:0 &v:0 &u:0 &i:0 (/choiceseq (AugAssign (Name &u:0 Store) Sub (Constant i1 None)) (AugAssign (Name &v:0 Store) Sub (Constant i1 None))))) (For (Name &d:0 Store) (Name &deg:0 Load) (fn_3 (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil)) (Name &d:0 Load)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil)",
            "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (ImportFrom s_heapq (list (alias g_heappush None) (alias g_heappop None)) i0) (ImportFrom s_math (list (alias g_inf None)) i0) (Assign (list (Name &ri:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)) None) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &cnt:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store)) (Call (Name &ri:0 Load) nil nil) None) (AugAssign (Subscript (Name &cnt:1 Load) (_slice_content (Name &x:1 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &cnt:1 Load) (_slice_content (Name &y:1 Load)) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &valid:1 Store)) (Constant True None) None) (For (Name &x:1 Store) (Name &cnt:1 Load) (/seq (If (Compare (Subscript (Name &cnt:1 Load) (_slice_content (Name &x:1 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None)) (/seq))) (/seq) None) (If (Name &valid:1 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))) nil None None) (Assign (list (Name &t:0 Store)) (Constant i1 None) None) (While (Name &t:0 Load) (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Expr (Call (Name &solve:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (/splice (fn_2 (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) &n:0 &tree_nums:0 &a2:0 &a1:0 &i:0)) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) (/seq (Assign (list (Name &ans_is_no:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &tree_nums:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &ans_is_no:0 Store)) (Constant True None) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break) (/seq))) (/seq) None) (If (UnaryOp Not (Name &ans_is_no:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq))))))) nil)",
            "(Module (/seq (/splice (fn_1 (DictComp (Name &i:1 Load) (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) nil i0))) &n:0 &gr:0 &b:0 &a:0 &i:0 (/choiceseq))) (For (Name &i:0 Store) (Name &gr:0 Load) (fn_3 (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil)) (Subscript (Name &gr:0 Load) (_slice_content (Name &i:0 Load)) Load)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil)",
            "(Module (/seq (/splice (fn_1 (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) &n:0 &arr:0 &b:0 &a:0 &_:0 (/choiceseq))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (fn_3 Break (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) None)) nil)",
            "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &g:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Name &d:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i100001 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (_slice_content (Name &u:0 Load)) Load) s_append Load) (list (_starred_content (Name &v:0 Load))) nil)) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (_slice_content (Name &v:0 Load)) Load) s_append Load) (list (_starred_content (Name &u:0 Load))) nil)) (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &u:0 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &v:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:0 Store) (Name &d:0 Load) (fn_3 Break (Name &i:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) None)) nil)",
            "(Module (/seq (/splice (fn_2 (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) &n:0 &edges:0 &b:0 &a:0 &i:0)) (If (Compare (Constant i2 None) (list In) (list (Name &edges:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))))) nil)",
            "(Module (/seq (/splice (fn_2 (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) &n:0 &l:0 &v:0 &u:0 &i:0)) (For (Name &i:0 Store) (Name &l:0 Load) (fn_3 (Expr (Call (Name g_exit Load) nil nil)) (Name &i:0 Load)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil)"
        ]
    }
]
